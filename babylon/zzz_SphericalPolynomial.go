// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SphericalPolynomial represents a babylon.js SphericalPolynomial.
// Class representing spherical polynomial coefficients to the 3rd degree
type SphericalPolynomial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SphericalPolynomial) JSObject() js.Value { return s.p }

// SphericalPolynomial returns a SphericalPolynomial JavaScript class.
func (ba *Babylon) SphericalPolynomial() *SphericalPolynomial {
	p := ba.ctx.Get("SphericalPolynomial")
	return SphericalPolynomialFromJSObject(p, ba.ctx)
}

// SphericalPolynomialFromJSObject returns a wrapped SphericalPolynomial JavaScript class.
func SphericalPolynomialFromJSObject(p js.Value, ctx js.Value) *SphericalPolynomial {
	return &SphericalPolynomial{p: p, ctx: ctx}
}

// SphericalPolynomialArrayToJSArray returns a JavaScript Array for the wrapped array.
func SphericalPolynomialArrayToJSArray(array []*SphericalPolynomial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// AddAmbient calls the AddAmbient method on the SphericalPolynomial object.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#addambient
func (s *SphericalPolynomial) AddAmbient(color *Color3) {

	args := make([]interface{}, 0, 1+0)

	if color == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, color.JSObject())
	}

	s.p.Call("addAmbient", args...)
}

// FromArray calls the FromArray method on the SphericalPolynomial object.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#fromarray
func (s *SphericalPolynomial) FromArray(data js.Value) *SphericalPolynomial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, data)

	retVal := s.p.Call("FromArray", args...)
	return SphericalPolynomialFromJSObject(retVal, s.ctx)
}

// FromHarmonics calls the FromHarmonics method on the SphericalPolynomial object.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#fromharmonics
func (s *SphericalPolynomial) FromHarmonics(harmonics *SphericalHarmonics) *SphericalPolynomial {

	args := make([]interface{}, 0, 1+0)

	if harmonics == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, harmonics.JSObject())
	}

	retVal := s.p.Call("FromHarmonics", args...)
	return SphericalPolynomialFromJSObject(retVal, s.ctx)
}

// ScaleInPlace calls the ScaleInPlace method on the SphericalPolynomial object.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#scaleinplace
func (s *SphericalPolynomial) ScaleInPlace(scale float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scale)

	s.p.Call("scaleInPlace", args...)
}

// PreScaledHarmonics returns the PreScaledHarmonics property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#prescaledharmonics
func (s *SphericalPolynomial) PreScaledHarmonics() *SphericalHarmonics {
	retVal := s.p.Get("preScaledHarmonics")
	return SphericalHarmonicsFromJSObject(retVal, s.ctx)
}

// SetPreScaledHarmonics sets the PreScaledHarmonics property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#prescaledharmonics
func (s *SphericalPolynomial) SetPreScaledHarmonics(preScaledHarmonics *SphericalHarmonics) *SphericalPolynomial {
	s.p.Set("preScaledHarmonics", preScaledHarmonics.JSObject())
	return s
}

// X returns the X property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#x
func (s *SphericalPolynomial) X() *Vector3 {
	retVal := s.p.Get("x")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetX sets the X property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#x
func (s *SphericalPolynomial) SetX(x *Vector3) *SphericalPolynomial {
	s.p.Set("x", x.JSObject())
	return s
}

// Xx returns the Xx property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#xx
func (s *SphericalPolynomial) Xx() *Vector3 {
	retVal := s.p.Get("xx")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetXx sets the Xx property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#xx
func (s *SphericalPolynomial) SetXx(xx *Vector3) *SphericalPolynomial {
	s.p.Set("xx", xx.JSObject())
	return s
}

// Xy returns the Xy property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#xy
func (s *SphericalPolynomial) Xy() *Vector3 {
	retVal := s.p.Get("xy")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetXy sets the Xy property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#xy
func (s *SphericalPolynomial) SetXy(xy *Vector3) *SphericalPolynomial {
	s.p.Set("xy", xy.JSObject())
	return s
}

// Y returns the Y property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#y
func (s *SphericalPolynomial) Y() *Vector3 {
	retVal := s.p.Get("y")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetY sets the Y property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#y
func (s *SphericalPolynomial) SetY(y *Vector3) *SphericalPolynomial {
	s.p.Set("y", y.JSObject())
	return s
}

// Yy returns the Yy property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#yy
func (s *SphericalPolynomial) Yy() *Vector3 {
	retVal := s.p.Get("yy")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetYy sets the Yy property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#yy
func (s *SphericalPolynomial) SetYy(yy *Vector3) *SphericalPolynomial {
	s.p.Set("yy", yy.JSObject())
	return s
}

// Yz returns the Yz property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#yz
func (s *SphericalPolynomial) Yz() *Vector3 {
	retVal := s.p.Get("yz")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetYz sets the Yz property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#yz
func (s *SphericalPolynomial) SetYz(yz *Vector3) *SphericalPolynomial {
	s.p.Set("yz", yz.JSObject())
	return s
}

// Z returns the Z property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#z
func (s *SphericalPolynomial) Z() *Vector3 {
	retVal := s.p.Get("z")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetZ sets the Z property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#z
func (s *SphericalPolynomial) SetZ(z *Vector3) *SphericalPolynomial {
	s.p.Set("z", z.JSObject())
	return s
}

// Zx returns the Zx property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#zx
func (s *SphericalPolynomial) Zx() *Vector3 {
	retVal := s.p.Get("zx")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetZx sets the Zx property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#zx
func (s *SphericalPolynomial) SetZx(zx *Vector3) *SphericalPolynomial {
	s.p.Set("zx", zx.JSObject())
	return s
}

// Zz returns the Zz property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#zz
func (s *SphericalPolynomial) Zz() *Vector3 {
	retVal := s.p.Get("zz")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetZz sets the Zz property of class SphericalPolynomial.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalpolynomial#zz
func (s *SphericalPolynomial) SetZz(zz *Vector3) *SphericalPolynomial {
	s.p.Set("zz", zz.JSObject())
	return s
}
