// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// AssetContainer represents a babylon.js AssetContainer.
// Container with a set of assets that can be added or removed from a scene.
type AssetContainer struct {
	*AbstractScene
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *AssetContainer) JSObject() js.Value { return a.p }

// AssetContainer returns a AssetContainer JavaScript class.
func (ba *Babylon) AssetContainer() *AssetContainer {
	p := ba.ctx.Get("AssetContainer")
	return AssetContainerFromJSObject(p, ba.ctx)
}

// AssetContainerFromJSObject returns a wrapped AssetContainer JavaScript class.
func AssetContainerFromJSObject(p js.Value, ctx js.Value) *AssetContainer {
	return &AssetContainer{AbstractScene: AbstractSceneFromJSObject(p, ctx), ctx: ctx}
}

// AssetContainerArrayToJSArray returns a JavaScript Array for the wrapped array.
func AssetContainerArrayToJSArray(array []*AssetContainer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewAssetContainer returns a new AssetContainer object.
//
// https://doc.babylonjs.com/api/classes/babylon.assetcontainer
func (ba *Babylon) NewAssetContainer(scene *Scene) *AssetContainer {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scene.JSObject())

	p := ba.ctx.Get("AssetContainer").New(args...)
	return AssetContainerFromJSObject(p, ba.ctx)
}

// AddAllToScene calls the AddAllToScene method on the AssetContainer object.
//
// https://doc.babylonjs.com/api/classes/babylon.assetcontainer#addalltoscene
func (a *AssetContainer) AddAllToScene() {

	a.p.Call("addAllToScene")
}

// CreateRootMesh calls the CreateRootMesh method on the AssetContainer object.
//
// https://doc.babylonjs.com/api/classes/babylon.assetcontainer#createrootmesh
func (a *AssetContainer) CreateRootMesh() *Mesh {

	retVal := a.p.Call("createRootMesh")
	return MeshFromJSObject(retVal, a.ctx)
}

// Dispose calls the Dispose method on the AssetContainer object.
//
// https://doc.babylonjs.com/api/classes/babylon.assetcontainer#dispose
func (a *AssetContainer) Dispose() {

	a.p.Call("dispose")
}

// AssetContainerInstantiateModelsToSceneOpts contains optional parameters for AssetContainer.InstantiateModelsToScene.
type AssetContainerInstantiateModelsToSceneOpts struct {
	NameFunction   func()
	CloneMaterials *bool
}

// InstantiateModelsToScene calls the InstantiateModelsToScene method on the AssetContainer object.
//
// https://doc.babylonjs.com/api/classes/babylon.assetcontainer#instantiatemodelstoscene
func (a *AssetContainer) InstantiateModelsToScene(opts *AssetContainerInstantiateModelsToSceneOpts) *InstantiatedEntries {
	if opts == nil {
		opts = &AssetContainerInstantiateModelsToSceneOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.NameFunction == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { opts.NameFunction(); return nil }) /* never freed! */)
	}
	if opts.CloneMaterials == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CloneMaterials)
	}

	retVal := a.p.Call("instantiateModelsToScene", args...)
	return InstantiatedEntriesFromJSObject(retVal, a.ctx)
}

// AssetContainerMoveAllFromSceneOpts contains optional parameters for AssetContainer.MoveAllFromScene.
type AssetContainerMoveAllFromSceneOpts struct {
	KeepAssets *KeepAssets
}

// MoveAllFromScene calls the MoveAllFromScene method on the AssetContainer object.
//
// https://doc.babylonjs.com/api/classes/babylon.assetcontainer#moveallfromscene
func (a *AssetContainer) MoveAllFromScene(opts *AssetContainerMoveAllFromSceneOpts) {
	if opts == nil {
		opts = &AssetContainerMoveAllFromSceneOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.KeepAssets == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.KeepAssets.JSObject())
	}

	a.p.Call("moveAllFromScene", args...)
}

// RemoveAllFromScene calls the RemoveAllFromScene method on the AssetContainer object.
//
// https://doc.babylonjs.com/api/classes/babylon.assetcontainer#removeallfromscene
func (a *AssetContainer) RemoveAllFromScene() {

	a.p.Call("removeAllFromScene")
}

// Scene returns the Scene property of class AssetContainer.
//
// https://doc.babylonjs.com/api/classes/babylon.assetcontainer#scene
func (a *AssetContainer) Scene() *Scene {
	retVal := a.p.Get("scene")
	return SceneFromJSObject(retVal, a.ctx)
}

// SetScene sets the Scene property of class AssetContainer.
//
// https://doc.babylonjs.com/api/classes/babylon.assetcontainer#scene
func (a *AssetContainer) SetScene(scene *Scene) *AssetContainer {
	a.p.Set("scene", scene.JSObject())
	return a
}
