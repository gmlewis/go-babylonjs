// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FreeCameraDeviceOrientationInput represents a babylon.js FreeCameraDeviceOrientationInput.
// Takes information about the orientation of the device as reported by the deviceorientation event to orient the camera.
// Screen rotation is taken into account.
//
// See: http://doc.babylonjs.com/how_to/customizing_camera_inputs
type FreeCameraDeviceOrientationInput struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FreeCameraDeviceOrientationInput) JSObject() js.Value { return f.p }

// FreeCameraDeviceOrientationInput returns a FreeCameraDeviceOrientationInput JavaScript class.
func (ba *Babylon) FreeCameraDeviceOrientationInput() *FreeCameraDeviceOrientationInput {
	p := ba.ctx.Get("FreeCameraDeviceOrientationInput")
	return FreeCameraDeviceOrientationInputFromJSObject(p, ba.ctx)
}

// FreeCameraDeviceOrientationInputFromJSObject returns a wrapped FreeCameraDeviceOrientationInput JavaScript class.
func FreeCameraDeviceOrientationInputFromJSObject(p js.Value, ctx js.Value) *FreeCameraDeviceOrientationInput {
	return &FreeCameraDeviceOrientationInput{p: p, ctx: ctx}
}

// FreeCameraDeviceOrientationInputArrayToJSArray returns a JavaScript Array for the wrapped array.
func FreeCameraDeviceOrientationInputArrayToJSArray(array []*FreeCameraDeviceOrientationInput) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewFreeCameraDeviceOrientationInput returns a new FreeCameraDeviceOrientationInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecameradeviceorientationinput#constructor
func (ba *Babylon) NewFreeCameraDeviceOrientationInput() *FreeCameraDeviceOrientationInput {

	args := make([]interface{}, 0, 0+0)

	p := ba.ctx.Get("FreeCameraDeviceOrientationInput").New(args...)
	return FreeCameraDeviceOrientationInputFromJSObject(p, ba.ctx)
}

// FreeCameraDeviceOrientationInputAttachControlOpts contains optional parameters for FreeCameraDeviceOrientationInput.AttachControl.
type FreeCameraDeviceOrientationInputAttachControlOpts struct {
	NoPreventDefault *bool
}

// AttachControl calls the AttachControl method on the FreeCameraDeviceOrientationInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecameradeviceorientationinput#attachcontrol
func (f *FreeCameraDeviceOrientationInput) AttachControl(element js.Value, opts *FreeCameraDeviceOrientationInputAttachControlOpts) {
	if opts == nil {
		opts = &FreeCameraDeviceOrientationInputAttachControlOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, element)

	if opts.NoPreventDefault == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoPreventDefault)
	}

	f.p.Call("attachControl", args...)
}

// CheckInputs calls the CheckInputs method on the FreeCameraDeviceOrientationInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecameradeviceorientationinput#checkinputs
func (f *FreeCameraDeviceOrientationInput) CheckInputs() {

	f.p.Call("checkInputs")
}

// DetachControl calls the DetachControl method on the FreeCameraDeviceOrientationInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecameradeviceorientationinput#detachcontrol
func (f *FreeCameraDeviceOrientationInput) DetachControl(element js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, element)

	f.p.Call("detachControl", args...)
}

// GetClassName calls the GetClassName method on the FreeCameraDeviceOrientationInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecameradeviceorientationinput#getclassname
func (f *FreeCameraDeviceOrientationInput) GetClassName() string {

	retVal := f.p.Call("getClassName")
	return retVal.String()
}

// GetSimpleName calls the GetSimpleName method on the FreeCameraDeviceOrientationInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecameradeviceorientationinput#getsimplename
func (f *FreeCameraDeviceOrientationInput) GetSimpleName() string {

	retVal := f.p.Call("getSimpleName")
	return retVal.String()
}

// FreeCameraDeviceOrientationInputWaitForOrientationChangeAsyncOpts contains optional parameters for FreeCameraDeviceOrientationInput.WaitForOrientationChangeAsync.
type FreeCameraDeviceOrientationInputWaitForOrientationChangeAsyncOpts struct {
	Timeout *float64
}

// WaitForOrientationChangeAsync calls the WaitForOrientationChangeAsync method on the FreeCameraDeviceOrientationInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecameradeviceorientationinput#waitfororientationchangeasync
func (f *FreeCameraDeviceOrientationInput) WaitForOrientationChangeAsync(opts *FreeCameraDeviceOrientationInputWaitForOrientationChangeAsyncOpts) *Promise {
	if opts == nil {
		opts = &FreeCameraDeviceOrientationInputWaitForOrientationChangeAsyncOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Timeout == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Timeout)
	}

	retVal := f.p.Call("WaitForOrientationChangeAsync", args...)
	return PromiseFromJSObject(retVal, f.ctx)
}

// Camera returns the Camera property of class FreeCameraDeviceOrientationInput.
//
// https://doc.babylonjs.com/api/classes/babylon.freecameradeviceorientationinput#camera
func (f *FreeCameraDeviceOrientationInput) Camera() *FreeCamera {
	retVal := f.p.Get("camera")
	return FreeCameraFromJSObject(retVal, f.ctx)
}

// SetCamera sets the Camera property of class FreeCameraDeviceOrientationInput.
//
// https://doc.babylonjs.com/api/classes/babylon.freecameradeviceorientationinput#camera
func (f *FreeCameraDeviceOrientationInput) SetCamera(camera *FreeCamera) *FreeCameraDeviceOrientationInput {
	f.p.Set("camera", camera.JSObject())
	return f
}
