// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Effect represents a babylon.js Effect.
// Effect containing vertex and fragment shader that can be executed on an object.
type Effect struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *Effect) JSObject() js.Value { return e.p }

// Effect returns a Effect JavaScript class.
func (ba *Babylon) Effect() *Effect {
	p := ba.ctx.Get("Effect")
	return EffectFromJSObject(p, ba.ctx)
}

// EffectFromJSObject returns a wrapped Effect JavaScript class.
func EffectFromJSObject(p js.Value, ctx js.Value) *Effect {
	return &Effect{p: p, ctx: ctx}
}

// NewEffectOpts contains optional parameters for NewEffect.
type NewEffectOpts struct {
	Samplers *JSString

	Engine *ThinEngine

	Defines *JSString

	Fallbacks *JSValue

	OnCompiled *func()

	OnError *func()

	IndexParameters *interface{}
}

// NewEffect returns a new Effect object.
//
// https://doc.babylonjs.com/api/classes/babylon.effect
func (ba *Babylon) NewEffect(baseName interface{}, attributesNamesOrOptions string, uniformsNamesOrEngine string, opts *NewEffectOpts) *Effect {
	if opts == nil {
		opts = &NewEffectOpts{}
	}

	p := ba.ctx.Get("Effect").New(baseName, attributesNamesOrOptions, uniformsNamesOrEngine, opts.Samplers.JSObject(), opts.Engine.JSObject(), opts.Defines.JSObject(), opts.Fallbacks.JSObject(), opts.OnCompiled, opts.OnError, opts.IndexParameters)
	return EffectFromJSObject(p, ba.ctx)
}

// TODO: methods
