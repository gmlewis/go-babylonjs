// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// VRDeviceOrientationArcRotateCamera represents a babylon.js VRDeviceOrientationArcRotateCamera.
// Camera used to simulate VR rendering (based on ArcRotateCamera)
//
// See: http://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras
type VRDeviceOrientationArcRotateCamera struct {
	*ArcRotateCamera
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *VRDeviceOrientationArcRotateCamera) JSObject() js.Value { return v.p }

// VRDeviceOrientationArcRotateCamera returns a VRDeviceOrientationArcRotateCamera JavaScript class.
func (ba *Babylon) VRDeviceOrientationArcRotateCamera() *VRDeviceOrientationArcRotateCamera {
	p := ba.ctx.Get("VRDeviceOrientationArcRotateCamera")
	return VRDeviceOrientationArcRotateCameraFromJSObject(p, ba.ctx)
}

// VRDeviceOrientationArcRotateCameraFromJSObject returns a wrapped VRDeviceOrientationArcRotateCamera JavaScript class.
func VRDeviceOrientationArcRotateCameraFromJSObject(p js.Value, ctx js.Value) *VRDeviceOrientationArcRotateCamera {
	return &VRDeviceOrientationArcRotateCamera{ArcRotateCamera: ArcRotateCameraFromJSObject(p, ctx), ctx: ctx}
}

// VRDeviceOrientationArcRotateCameraArrayToJSArray returns a JavaScript Array for the wrapped array.
func VRDeviceOrientationArcRotateCameraArrayToJSArray(array []*VRDeviceOrientationArcRotateCamera) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewVRDeviceOrientationArcRotateCameraOpts contains optional parameters for NewVRDeviceOrientationArcRotateCamera.
type NewVRDeviceOrientationArcRotateCameraOpts struct {
	CompensateDistortion *bool
	VrCameraMetrics      *VRCameraMetrics
}

// NewVRDeviceOrientationArcRotateCamera returns a new VRDeviceOrientationArcRotateCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationarcrotatecamera#constructor
func (ba *Babylon) NewVRDeviceOrientationArcRotateCamera(name string, alpha float64, beta float64, radius float64, target *Vector3, scene *Scene, opts *NewVRDeviceOrientationArcRotateCameraOpts) *VRDeviceOrientationArcRotateCamera {
	if opts == nil {
		opts = &NewVRDeviceOrientationArcRotateCameraOpts{}
	}

	args := make([]interface{}, 0, 6+2)

	args = append(args, name)
	args = append(args, alpha)
	args = append(args, beta)
	args = append(args, radius)
	args = append(args, target.JSObject())
	args = append(args, scene.JSObject())

	if opts.CompensateDistortion == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CompensateDistortion)
	}
	if opts.VrCameraMetrics == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.VrCameraMetrics.JSObject())
	}

	p := ba.ctx.Get("VRDeviceOrientationArcRotateCamera").New(args...)
	return VRDeviceOrientationArcRotateCameraFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the VRDeviceOrientationArcRotateCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationarcrotatecamera#getclassname
func (v *VRDeviceOrientationArcRotateCamera) GetClassName() string {

	retVal := v.p.Call("getClassName")
	return retVal.String()
}
