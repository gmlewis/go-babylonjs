// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DirectionalLight represents a babylon.js DirectionalLight.
// A directional light is defined by a direction (what a surprise!).
// The light is emitted from everywhere in the specified direction, and has an infinite range.
// An example of a directional light is when a distance planet is lit by the apparently parallel lines of light from its sun. Light in a downward direction will light the top of an object.
// Documentation: &lt;a href=&#34;https://doc.babylonjs.com/babylon101/lights&#34;&gt;https://doc.babylonjs.com/babylon101/lights&lt;/a&gt;
type DirectionalLight struct {
	*ShadowLight
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DirectionalLight) JSObject() js.Value { return d.p }

// DirectionalLight returns a DirectionalLight JavaScript class.
func (ba *Babylon) DirectionalLight() *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight")
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// DirectionalLightFromJSObject returns a wrapped DirectionalLight JavaScript class.
func DirectionalLightFromJSObject(p js.Value, ctx js.Value) *DirectionalLight {
	return &DirectionalLight{ShadowLight: ShadowLightFromJSObject(p, ctx), ctx: ctx}
}

// DirectionalLightArrayToJSArray returns a JavaScript Array for the wrapped array.
func DirectionalLightArrayToJSArray(array []*DirectionalLight) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDirectionalLight returns a new DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight
func (ba *Babylon) NewDirectionalLight(name string, direction *Vector3, scene *Scene) *DirectionalLight {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, direction.JSObject())
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("DirectionalLight").New(args...)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// DirectionalLightAddBehaviorOpts contains optional parameters for DirectionalLight.AddBehavior.
type DirectionalLightAddBehaviorOpts struct {
	AttachImmediately *bool
}

// AddBehavior calls the AddBehavior method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#addbehavior
func (d *DirectionalLight) AddBehavior(behavior js.Value, opts *DirectionalLightAddBehaviorOpts) *Node {
	if opts == nil {
		opts = &DirectionalLightAddBehaviorOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, behavior)

	if opts.AttachImmediately == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.AttachImmediately)
	}

	retVal := d.p.Call("addBehavior", args...)
	return NodeFromJSObject(retVal, d.ctx)
}

// AddNodeConstructor calls the AddNodeConstructor method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#addnodeconstructor
func (d *DirectionalLight) AddNodeConstructor(jsType string, constructorFunc js.Value) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, jsType)
	args = append(args, constructorFunc)

	d.p.Call("AddNodeConstructor", args...)
}

// DirectionalLightBeginAnimationOpts contains optional parameters for DirectionalLight.BeginAnimation.
type DirectionalLightBeginAnimationOpts struct {
	Loop           *bool
	SpeedRatio     *float64
	OnAnimationEnd *func()
}

// BeginAnimation calls the BeginAnimation method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#beginanimation
func (d *DirectionalLight) BeginAnimation(name string, opts *DirectionalLightBeginAnimationOpts) *Animatable {
	if opts == nil {
		opts = &DirectionalLightBeginAnimationOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, name)

	if opts.Loop == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Loop)
	}
	if opts.SpeedRatio == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SpeedRatio)
	}
	if opts.OnAnimationEnd == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnAnimationEnd)
	}

	retVal := d.p.Call("beginAnimation", args...)
	return AnimatableFromJSObject(retVal, d.ctx)
}

// DirectionalLightBindLightOpts contains optional parameters for DirectionalLight.BindLight.
type DirectionalLightBindLightOpts struct {
	UsePhysicalLightFalloff *bool
	RebuildInParallel       *bool
}

// BindLight calls the BindLight method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#bindlight
func (d *DirectionalLight) BindLight(lightIndex float64, scene *Scene, effect *Effect, useSpecular bool, opts *DirectionalLightBindLightOpts) {
	if opts == nil {
		opts = &DirectionalLightBindLightOpts{}
	}

	args := make([]interface{}, 0, 4+2)

	args = append(args, lightIndex)
	args = append(args, scene.JSObject())
	args = append(args, effect.JSObject())
	args = append(args, useSpecular)

	if opts.UsePhysicalLightFalloff == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UsePhysicalLightFalloff)
	}
	if opts.RebuildInParallel == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RebuildInParallel)
	}

	d.p.Call("bindLight", args...)
}

// CanAffectMesh calls the CanAffectMesh method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#canaffectmesh
func (d *DirectionalLight) CanAffectMesh(mesh *AbstractMesh) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	retVal := d.p.Call("canAffectMesh", args...)
	return retVal.Bool()
}

// Clone calls the Clone method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#clone
func (d *DirectionalLight) Clone(name string) *Light {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := d.p.Call("clone", args...)
	return LightFromJSObject(retVal, d.ctx)
}

// CompareLightsPriority calls the CompareLightsPriority method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#comparelightspriority
func (d *DirectionalLight) CompareLightsPriority(a *Light, b *Light) float64 {

	args := make([]interface{}, 0, 2+0)

	args = append(args, a.JSObject())
	args = append(args, b.JSObject())

	retVal := d.p.Call("CompareLightsPriority", args...)
	return retVal.Float()
}

// ComputeTransformedInformation calls the ComputeTransformedInformation method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#computetransformedinformation
func (d *DirectionalLight) ComputeTransformedInformation() bool {

	retVal := d.p.Call("computeTransformedInformation")
	return retVal.Bool()
}

// DirectionalLightComputeWorldMatrixOpts contains optional parameters for DirectionalLight.ComputeWorldMatrix.
type DirectionalLightComputeWorldMatrixOpts struct {
	Force *bool
}

// ComputeWorldMatrix calls the ComputeWorldMatrix method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#computeworldmatrix
func (d *DirectionalLight) ComputeWorldMatrix(opts *DirectionalLightComputeWorldMatrixOpts) *Matrix {
	if opts == nil {
		opts = &DirectionalLightComputeWorldMatrixOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Force == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Force)
	}

	retVal := d.p.Call("computeWorldMatrix", args...)
	return MatrixFromJSObject(retVal, d.ctx)
}

// DirectionalLightConstructOpts contains optional parameters for DirectionalLight.Construct.
type DirectionalLightConstructOpts struct {
	Options *interface{}
}

// Construct calls the Construct method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#construct
func (d *DirectionalLight) Construct(jsType string, name string, scene *Scene, opts *DirectionalLightConstructOpts) js.Value {
	if opts == nil {
		opts = &DirectionalLightConstructOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, jsType)
	args = append(args, name)
	args = append(args, scene.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := d.p.Call("Construct", args...)
	return retVal
}

// CreateAnimationRange calls the CreateAnimationRange method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#createanimationrange
func (d *DirectionalLight) CreateAnimationRange(name string, from float64, to float64) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, from)
	args = append(args, to)

	d.p.Call("createAnimationRange", args...)
}

// DirectionalLightDeleteAnimationRangeOpts contains optional parameters for DirectionalLight.DeleteAnimationRange.
type DirectionalLightDeleteAnimationRangeOpts struct {
	DeleteFrames *bool
}

// DeleteAnimationRange calls the DeleteAnimationRange method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#deleteanimationrange
func (d *DirectionalLight) DeleteAnimationRange(name string, opts *DirectionalLightDeleteAnimationRangeOpts) {
	if opts == nil {
		opts = &DirectionalLightDeleteAnimationRangeOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, name)

	if opts.DeleteFrames == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DeleteFrames)
	}

	d.p.Call("deleteAnimationRange", args...)
}

// DirectionalLightDisposeOpts contains optional parameters for DirectionalLight.Dispose.
type DirectionalLightDisposeOpts struct {
	DoNotRecurse               *bool
	DisposeMaterialAndTextures *bool
}

// Dispose calls the Dispose method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#dispose
func (d *DirectionalLight) Dispose(opts *DirectionalLightDisposeOpts) {
	if opts == nil {
		opts = &DirectionalLightDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DoNotRecurse == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DoNotRecurse)
	}
	if opts.DisposeMaterialAndTextures == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DisposeMaterialAndTextures)
	}

	d.p.Call("dispose", args...)
}

// ForceProjectionMatrixCompute calls the ForceProjectionMatrixCompute method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#forceprojectionmatrixcompute
func (d *DirectionalLight) ForceProjectionMatrixCompute() {

	d.p.Call("forceProjectionMatrixCompute")
}

// GetAbsolutePosition calls the GetAbsolutePosition method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getabsoluteposition
func (d *DirectionalLight) GetAbsolutePosition() *Vector3 {

	retVal := d.p.Call("getAbsolutePosition")
	return Vector3FromJSObject(retVal, d.ctx)
}

// GetAnimationByName calls the GetAnimationByName method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getanimationbyname
func (d *DirectionalLight) GetAnimationByName(name string) *Animation {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := d.p.Call("getAnimationByName", args...)
	return AnimationFromJSObject(retVal, d.ctx)
}

// GetAnimationRange calls the GetAnimationRange method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getanimationrange
func (d *DirectionalLight) GetAnimationRange(name string) *AnimationRange {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := d.p.Call("getAnimationRange", args...)
	return AnimationRangeFromJSObject(retVal, d.ctx)
}

// GetAnimationRanges calls the GetAnimationRanges method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getanimationranges
func (d *DirectionalLight) GetAnimationRanges() *AnimationRange {

	retVal := d.p.Call("getAnimationRanges")
	return AnimationRangeFromJSObject(retVal, d.ctx)
}

// GetBehaviorByName calls the GetBehaviorByName method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getbehaviorbyname
func (d *DirectionalLight) GetBehaviorByName(name string) js.Value {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := d.p.Call("getBehaviorByName", args...)
	return retVal
}

// DirectionalLightGetChildMeshesOpts contains optional parameters for DirectionalLight.GetChildMeshes.
type DirectionalLightGetChildMeshesOpts struct {
	DirectDescendantsOnly *bool
	Predicate             *func()
}

// GetChildMeshes calls the GetChildMeshes method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getchildmeshes
func (d *DirectionalLight) GetChildMeshes(opts *DirectionalLightGetChildMeshesOpts) *AbstractMesh {
	if opts == nil {
		opts = &DirectionalLightGetChildMeshesOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := d.p.Call("getChildMeshes", args...)
	return AbstractMeshFromJSObject(retVal, d.ctx)
}

// DirectionalLightGetChildrenOpts contains optional parameters for DirectionalLight.GetChildren.
type DirectionalLightGetChildrenOpts struct {
	Predicate             *func()
	DirectDescendantsOnly *bool
}

// GetChildren calls the GetChildren method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getchildren
func (d *DirectionalLight) GetChildren(opts *DirectionalLightGetChildrenOpts) *Node {
	if opts == nil {
		opts = &DirectionalLightGetChildrenOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}
	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}

	retVal := d.p.Call("getChildren", args...)
	return NodeFromJSObject(retVal, d.ctx)
}

// GetClassName calls the GetClassName method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getclassname
func (d *DirectionalLight) GetClassName() string {

	retVal := d.p.Call("getClassName")
	return retVal.String()
}

// GetConstructorFromName calls the GetConstructorFromName method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getconstructorfromname
func (d *DirectionalLight) GetConstructorFromName(jsType float64, name string, scene *Scene) js.Value {

	args := make([]interface{}, 0, 3+0)

	args = append(args, jsType)
	args = append(args, name)
	args = append(args, scene.JSObject())

	retVal := d.p.Call("GetConstructorFromName", args...)
	return retVal
}

// GetDepthMaxZ calls the GetDepthMaxZ method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getdepthmaxz
func (d *DirectionalLight) GetDepthMaxZ(activeCamera *Camera) float64 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, activeCamera.JSObject())

	retVal := d.p.Call("getDepthMaxZ", args...)
	return retVal.Float()
}

// GetDepthMinZ calls the GetDepthMinZ method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getdepthminz
func (d *DirectionalLight) GetDepthMinZ(activeCamera *Camera) float64 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, activeCamera.JSObject())

	retVal := d.p.Call("getDepthMinZ", args...)
	return retVal.Float()
}

// GetDepthScale calls the GetDepthScale method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getdepthscale
func (d *DirectionalLight) GetDepthScale() float64 {

	retVal := d.p.Call("getDepthScale")
	return retVal.Float()
}

// DirectionalLightGetDescendantsOpts contains optional parameters for DirectionalLight.GetDescendants.
type DirectionalLightGetDescendantsOpts struct {
	DirectDescendantsOnly *bool
	Predicate             *func()
}

// GetDescendants calls the GetDescendants method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getdescendants
func (d *DirectionalLight) GetDescendants(opts *DirectionalLightGetDescendantsOpts) *Node {
	if opts == nil {
		opts = &DirectionalLightGetDescendantsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := d.p.Call("getDescendants", args...)
	return NodeFromJSObject(retVal, d.ctx)
}

// GetEngine calls the GetEngine method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getengine
func (d *DirectionalLight) GetEngine() *Engine {

	retVal := d.p.Call("getEngine")
	return EngineFromJSObject(retVal, d.ctx)
}

// DirectionalLightGetHierarchyBoundingVectorsOpts contains optional parameters for DirectionalLight.GetHierarchyBoundingVectors.
type DirectionalLightGetHierarchyBoundingVectorsOpts struct {
	IncludeDescendants *bool
	Predicate          *func()
}

// GetHierarchyBoundingVectors calls the GetHierarchyBoundingVectors method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#gethierarchyboundingvectors
func (d *DirectionalLight) GetHierarchyBoundingVectors(opts *DirectionalLightGetHierarchyBoundingVectorsOpts) js.Value {
	if opts == nil {
		opts = &DirectionalLightGetHierarchyBoundingVectorsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.IncludeDescendants == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IncludeDescendants)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := d.p.Call("getHierarchyBoundingVectors", args...)
	return retVal
}

// GetRotation calls the GetRotation method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getrotation
func (d *DirectionalLight) GetRotation() *Vector3 {

	retVal := d.p.Call("getRotation")
	return Vector3FromJSObject(retVal, d.ctx)
}

// GetScaledIntensity calls the GetScaledIntensity method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getscaledintensity
func (d *DirectionalLight) GetScaledIntensity() float64 {

	retVal := d.p.Call("getScaledIntensity")
	return retVal.Float()
}

// GetScene calls the GetScene method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getscene
func (d *DirectionalLight) GetScene() *Scene {

	retVal := d.p.Call("getScene")
	return SceneFromJSObject(retVal, d.ctx)
}

// DirectionalLightGetShadowDirectionOpts contains optional parameters for DirectionalLight.GetShadowDirection.
type DirectionalLightGetShadowDirectionOpts struct {
	FaceIndex *float64
}

// GetShadowDirection calls the GetShadowDirection method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getshadowdirection
func (d *DirectionalLight) GetShadowDirection(opts *DirectionalLightGetShadowDirectionOpts) *Vector3 {
	if opts == nil {
		opts = &DirectionalLightGetShadowDirectionOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.FaceIndex == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FaceIndex)
	}

	retVal := d.p.Call("getShadowDirection", args...)
	return Vector3FromJSObject(retVal, d.ctx)
}

// GetShadowGenerator calls the GetShadowGenerator method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getshadowgenerator
func (d *DirectionalLight) GetShadowGenerator() *IShadowGenerator {

	retVal := d.p.Call("getShadowGenerator")
	return IShadowGeneratorFromJSObject(retVal, d.ctx)
}

// GetTypeID calls the GetTypeID method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#gettypeid
func (d *DirectionalLight) GetTypeID() float64 {

	retVal := d.p.Call("getTypeID")
	return retVal.Float()
}

// GetWorldMatrix calls the GetWorldMatrix method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#getworldmatrix
func (d *DirectionalLight) GetWorldMatrix() *Matrix {

	retVal := d.p.Call("getWorldMatrix")
	return MatrixFromJSObject(retVal, d.ctx)
}

// IsDescendantOf calls the IsDescendantOf method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#isdescendantof
func (d *DirectionalLight) IsDescendantOf(ancestor *Node) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, ancestor.JSObject())

	retVal := d.p.Call("isDescendantOf", args...)
	return retVal.Bool()
}

// IsDisposed calls the IsDisposed method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#isdisposed
func (d *DirectionalLight) IsDisposed() bool {

	retVal := d.p.Call("isDisposed")
	return retVal.Bool()
}

// DirectionalLightIsEnabledOpts contains optional parameters for DirectionalLight.IsEnabled.
type DirectionalLightIsEnabledOpts struct {
	CheckAncestors *bool
}

// IsEnabled calls the IsEnabled method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#isenabled
func (d *DirectionalLight) IsEnabled(opts *DirectionalLightIsEnabledOpts) bool {
	if opts == nil {
		opts = &DirectionalLightIsEnabledOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.CheckAncestors == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CheckAncestors)
	}

	retVal := d.p.Call("isEnabled", args...)
	return retVal.Bool()
}

// DirectionalLightIsReadyOpts contains optional parameters for DirectionalLight.IsReady.
type DirectionalLightIsReadyOpts struct {
	CompleteCheck *bool
}

// IsReady calls the IsReady method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#isready
func (d *DirectionalLight) IsReady(opts *DirectionalLightIsReadyOpts) bool {
	if opts == nil {
		opts = &DirectionalLightIsReadyOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.CompleteCheck == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CompleteCheck)
	}

	retVal := d.p.Call("isReady", args...)
	return retVal.Bool()
}

// NeedCube calls the NeedCube method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#needcube
func (d *DirectionalLight) NeedCube() bool {

	retVal := d.p.Call("needCube")
	return retVal.Bool()
}

// NeedProjectionMatrixCompute calls the NeedProjectionMatrixCompute method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#needprojectionmatrixcompute
func (d *DirectionalLight) NeedProjectionMatrixCompute() bool {

	retVal := d.p.Call("needProjectionMatrixCompute")
	return retVal.Bool()
}

// Parse calls the Parse method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#parse
func (d *DirectionalLight) Parse(parsedLight interface{}, scene *Scene) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, parsedLight)
	args = append(args, scene.JSObject())

	retVal := d.p.Call("Parse", args...)
	return LightFromJSObject(retVal, d.ctx)
}

// ParseAnimationRanges calls the ParseAnimationRanges method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#parseanimationranges
func (d *DirectionalLight) ParseAnimationRanges(node *Node, parsedNode interface{}, scene *Scene) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, node.JSObject())
	args = append(args, parsedNode)
	args = append(args, scene.JSObject())

	d.p.Call("ParseAnimationRanges", args...)
}

// PrepareLightSpecificDefines calls the PrepareLightSpecificDefines method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#preparelightspecificdefines
func (d *DirectionalLight) PrepareLightSpecificDefines(defines interface{}, lightIndex float64) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, defines)
	args = append(args, lightIndex)

	d.p.Call("prepareLightSpecificDefines", args...)
}

// RemoveBehavior calls the RemoveBehavior method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#removebehavior
func (d *DirectionalLight) RemoveBehavior(behavior js.Value) *Node {

	args := make([]interface{}, 0, 1+0)

	args = append(args, behavior)

	retVal := d.p.Call("removeBehavior", args...)
	return NodeFromJSObject(retVal, d.ctx)
}

// Serialize calls the Serialize method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#serialize
func (d *DirectionalLight) Serialize() interface{} {

	retVal := d.p.Call("serialize")
	return retVal
}

// SerializeAnimationRanges calls the SerializeAnimationRanges method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#serializeanimationranges
func (d *DirectionalLight) SerializeAnimationRanges() interface{} {

	retVal := d.p.Call("serializeAnimationRanges")
	return retVal
}

// SetDirectionToTarget calls the SetDirectionToTarget method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#setdirectiontotarget
func (d *DirectionalLight) SetDirectionToTarget(target *Vector3) *Vector3 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, target.JSObject())

	retVal := d.p.Call("setDirectionToTarget", args...)
	return Vector3FromJSObject(retVal, d.ctx)
}

// SetEnabled calls the SetEnabled method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#setenabled
func (d *DirectionalLight) SetEnabled(value bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, value)

	d.p.Call("setEnabled", args...)
}

// SetShadowProjectionMatrix calls the SetShadowProjectionMatrix method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#setshadowprojectionmatrix
func (d *DirectionalLight) SetShadowProjectionMatrix(matrix *Matrix, viewMatrix *Matrix, renderList []*AbstractMesh) *IShadowLight {

	args := make([]interface{}, 0, 3+0)

	args = append(args, matrix.JSObject())
	args = append(args, viewMatrix.JSObject())
	args = append(args, AbstractMeshArrayToJSArray(renderList))

	retVal := d.p.Call("setShadowProjectionMatrix", args...)
	return IShadowLightFromJSObject(retVal, d.ctx)
}

// DirectionalLightToStringOpts contains optional parameters for DirectionalLight.ToString.
type DirectionalLightToStringOpts struct {
	FullDetails *bool
}

// ToString calls the ToString method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#tostring
func (d *DirectionalLight) ToString(opts *DirectionalLightToStringOpts) string {
	if opts == nil {
		opts = &DirectionalLightToStringOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.FullDetails == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FullDetails)
	}

	retVal := d.p.Call("toString", args...)
	return retVal.String()
}

// TransferTexturesToEffect calls the TransferTexturesToEffect method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#transfertexturestoeffect
func (d *DirectionalLight) TransferTexturesToEffect(effect *Effect, lightIndex string) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, lightIndex)

	retVal := d.p.Call("transferTexturesToEffect", args...)
	return LightFromJSObject(retVal, d.ctx)
}

// TransferToEffect calls the TransferToEffect method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#transfertoeffect
func (d *DirectionalLight) TransferToEffect(effect *Effect, lightIndex string) *DirectionalLight {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, lightIndex)

	retVal := d.p.Call("transferToEffect", args...)
	return DirectionalLightFromJSObject(retVal, d.ctx)
}

// TransferToNodeMaterialEffect calls the TransferToNodeMaterialEffect method on the DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#transfertonodematerialeffect
func (d *DirectionalLight) TransferToNodeMaterialEffect(effect *Effect, lightDataUniformName string) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, lightDataUniformName)

	retVal := d.p.Call("transferToNodeMaterialEffect", args...)
	return LightFromJSObject(retVal, d.ctx)
}

/*

// AnimationPropertiesOverride returns the AnimationPropertiesOverride property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#animationpropertiesoverride
func (d *DirectionalLight) AnimationPropertiesOverride(animationPropertiesOverride *AnimationPropertiesOverride) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(animationPropertiesOverride.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetAnimationPropertiesOverride sets the AnimationPropertiesOverride property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#animationpropertiesoverride
func (d *DirectionalLight) SetAnimationPropertiesOverride(animationPropertiesOverride *AnimationPropertiesOverride) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(animationPropertiesOverride.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// Animations returns the Animations property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#animations
func (d *DirectionalLight) Animations(animations *Animation) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(animations.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#animations
func (d *DirectionalLight) SetAnimations(animations *Animation) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(animations.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// AutoUpdateExtends returns the AutoUpdateExtends property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#autoupdateextends
func (d *DirectionalLight) AutoUpdateExtends(autoUpdateExtends bool) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(autoUpdateExtends)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetAutoUpdateExtends sets the AutoUpdateExtends property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#autoupdateextends
func (d *DirectionalLight) SetAutoUpdateExtends(autoUpdateExtends bool) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(autoUpdateExtends)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// Behaviors returns the Behaviors property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#behaviors
func (d *DirectionalLight) Behaviors(behaviors js.Value) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(behaviors)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetBehaviors sets the Behaviors property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#behaviors
func (d *DirectionalLight) SetBehaviors(behaviors js.Value) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(behaviors)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// CustomProjectionMatrixBuilder returns the CustomProjectionMatrixBuilder property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#customprojectionmatrixbuilder
func (d *DirectionalLight) CustomProjectionMatrixBuilder(customProjectionMatrixBuilder func()) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {customProjectionMatrixBuilder(); return nil}))
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetCustomProjectionMatrixBuilder sets the CustomProjectionMatrixBuilder property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#customprojectionmatrixbuilder
func (d *DirectionalLight) SetCustomProjectionMatrixBuilder(customProjectionMatrixBuilder func()) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {customProjectionMatrixBuilder(); return nil}))
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// Diffuse returns the Diffuse property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#diffuse
func (d *DirectionalLight) Diffuse(diffuse *Color3) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(diffuse.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetDiffuse sets the Diffuse property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#diffuse
func (d *DirectionalLight) SetDiffuse(diffuse *Color3) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(diffuse.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// Direction returns the Direction property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#direction
func (d *DirectionalLight) Direction(direction *Vector3) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(direction.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetDirection sets the Direction property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#direction
func (d *DirectionalLight) SetDirection(direction *Vector3) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(direction.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// DoNotSerialize returns the DoNotSerialize property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#donotserialize
func (d *DirectionalLight) DoNotSerialize(doNotSerialize bool) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(doNotSerialize)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetDoNotSerialize sets the DoNotSerialize property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#donotserialize
func (d *DirectionalLight) SetDoNotSerialize(doNotSerialize bool) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(doNotSerialize)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// ExcludeWithLayerMask returns the ExcludeWithLayerMask property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#excludewithlayermask
func (d *DirectionalLight) ExcludeWithLayerMask(excludeWithLayerMask float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(excludeWithLayerMask)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetExcludeWithLayerMask sets the ExcludeWithLayerMask property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#excludewithlayermask
func (d *DirectionalLight) SetExcludeWithLayerMask(excludeWithLayerMask float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(excludeWithLayerMask)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// ExcludedMeshes returns the ExcludedMeshes property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#excludedmeshes
func (d *DirectionalLight) ExcludedMeshes(excludedMeshes *AbstractMesh) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(excludedMeshes.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetExcludedMeshes sets the ExcludedMeshes property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#excludedmeshes
func (d *DirectionalLight) SetExcludedMeshes(excludedMeshes *AbstractMesh) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(excludedMeshes.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// FALLOFF_DEFAULT returns the FALLOFF_DEFAULT property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#falloff_default
func (d *DirectionalLight) FALLOFF_DEFAULT(FALLOFF_DEFAULT float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(FALLOFF_DEFAULT)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_DEFAULT sets the FALLOFF_DEFAULT property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#falloff_default
func (d *DirectionalLight) SetFALLOFF_DEFAULT(FALLOFF_DEFAULT float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(FALLOFF_DEFAULT)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// FALLOFF_GLTF returns the FALLOFF_GLTF property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#falloff_gltf
func (d *DirectionalLight) FALLOFF_GLTF(FALLOFF_GLTF float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(FALLOFF_GLTF)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_GLTF sets the FALLOFF_GLTF property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#falloff_gltf
func (d *DirectionalLight) SetFALLOFF_GLTF(FALLOFF_GLTF float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(FALLOFF_GLTF)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// FALLOFF_PHYSICAL returns the FALLOFF_PHYSICAL property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#falloff_physical
func (d *DirectionalLight) FALLOFF_PHYSICAL(FALLOFF_PHYSICAL float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(FALLOFF_PHYSICAL)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_PHYSICAL sets the FALLOFF_PHYSICAL property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#falloff_physical
func (d *DirectionalLight) SetFALLOFF_PHYSICAL(FALLOFF_PHYSICAL float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(FALLOFF_PHYSICAL)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// FALLOFF_STANDARD returns the FALLOFF_STANDARD property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#falloff_standard
func (d *DirectionalLight) FALLOFF_STANDARD(FALLOFF_STANDARD float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(FALLOFF_STANDARD)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_STANDARD sets the FALLOFF_STANDARD property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#falloff_standard
func (d *DirectionalLight) SetFALLOFF_STANDARD(FALLOFF_STANDARD float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(FALLOFF_STANDARD)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// FalloffType returns the FalloffType property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#fallofftype
func (d *DirectionalLight) FalloffType(falloffType float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(falloffType)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetFalloffType sets the FalloffType property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#fallofftype
func (d *DirectionalLight) SetFalloffType(falloffType float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(falloffType)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_AUTOMATIC returns the INTENSITYMODE_AUTOMATIC property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#intensitymode_automatic
func (d *DirectionalLight) INTENSITYMODE_AUTOMATIC(INTENSITYMODE_AUTOMATIC float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(INTENSITYMODE_AUTOMATIC)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_AUTOMATIC sets the INTENSITYMODE_AUTOMATIC property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#intensitymode_automatic
func (d *DirectionalLight) SetINTENSITYMODE_AUTOMATIC(INTENSITYMODE_AUTOMATIC float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(INTENSITYMODE_AUTOMATIC)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_ILLUMINANCE returns the INTENSITYMODE_ILLUMINANCE property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#intensitymode_illuminance
func (d *DirectionalLight) INTENSITYMODE_ILLUMINANCE(INTENSITYMODE_ILLUMINANCE float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(INTENSITYMODE_ILLUMINANCE)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_ILLUMINANCE sets the INTENSITYMODE_ILLUMINANCE property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#intensitymode_illuminance
func (d *DirectionalLight) SetINTENSITYMODE_ILLUMINANCE(INTENSITYMODE_ILLUMINANCE float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(INTENSITYMODE_ILLUMINANCE)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_LUMINANCE returns the INTENSITYMODE_LUMINANCE property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#intensitymode_luminance
func (d *DirectionalLight) INTENSITYMODE_LUMINANCE(INTENSITYMODE_LUMINANCE float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(INTENSITYMODE_LUMINANCE)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_LUMINANCE sets the INTENSITYMODE_LUMINANCE property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#intensitymode_luminance
func (d *DirectionalLight) SetINTENSITYMODE_LUMINANCE(INTENSITYMODE_LUMINANCE float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(INTENSITYMODE_LUMINANCE)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_LUMINOUSINTENSITY returns the INTENSITYMODE_LUMINOUSINTENSITY property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#intensitymode_luminousintensity
func (d *DirectionalLight) INTENSITYMODE_LUMINOUSINTENSITY(INTENSITYMODE_LUMINOUSINTENSITY float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(INTENSITYMODE_LUMINOUSINTENSITY)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_LUMINOUSINTENSITY sets the INTENSITYMODE_LUMINOUSINTENSITY property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#intensitymode_luminousintensity
func (d *DirectionalLight) SetINTENSITYMODE_LUMINOUSINTENSITY(INTENSITYMODE_LUMINOUSINTENSITY float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(INTENSITYMODE_LUMINOUSINTENSITY)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_LUMINOUSPOWER returns the INTENSITYMODE_LUMINOUSPOWER property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#intensitymode_luminouspower
func (d *DirectionalLight) INTENSITYMODE_LUMINOUSPOWER(INTENSITYMODE_LUMINOUSPOWER float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(INTENSITYMODE_LUMINOUSPOWER)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_LUMINOUSPOWER sets the INTENSITYMODE_LUMINOUSPOWER property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#intensitymode_luminouspower
func (d *DirectionalLight) SetINTENSITYMODE_LUMINOUSPOWER(INTENSITYMODE_LUMINOUSPOWER float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(INTENSITYMODE_LUMINOUSPOWER)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// Id returns the Id property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#id
func (d *DirectionalLight) Id(id string) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(id)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetId sets the Id property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#id
func (d *DirectionalLight) SetId(id string) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(id)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// IncludeOnlyWithLayerMask returns the IncludeOnlyWithLayerMask property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#includeonlywithlayermask
func (d *DirectionalLight) IncludeOnlyWithLayerMask(includeOnlyWithLayerMask float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(includeOnlyWithLayerMask)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetIncludeOnlyWithLayerMask sets the IncludeOnlyWithLayerMask property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#includeonlywithlayermask
func (d *DirectionalLight) SetIncludeOnlyWithLayerMask(includeOnlyWithLayerMask float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(includeOnlyWithLayerMask)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// IncludedOnlyMeshes returns the IncludedOnlyMeshes property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#includedonlymeshes
func (d *DirectionalLight) IncludedOnlyMeshes(includedOnlyMeshes *AbstractMesh) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(includedOnlyMeshes.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetIncludedOnlyMeshes sets the IncludedOnlyMeshes property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#includedonlymeshes
func (d *DirectionalLight) SetIncludedOnlyMeshes(includedOnlyMeshes *AbstractMesh) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(includedOnlyMeshes.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#inspectablecustomproperties
func (d *DirectionalLight) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(inspectableCustomProperties.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#inspectablecustomproperties
func (d *DirectionalLight) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(inspectableCustomProperties.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// Intensity returns the Intensity property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#intensity
func (d *DirectionalLight) Intensity(intensity float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(intensity)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetIntensity sets the Intensity property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#intensity
func (d *DirectionalLight) SetIntensity(intensity float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(intensity)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// IntensityMode returns the IntensityMode property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#intensitymode
func (d *DirectionalLight) IntensityMode(intensityMode float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(intensityMode)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetIntensityMode sets the IntensityMode property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#intensitymode
func (d *DirectionalLight) SetIntensityMode(intensityMode float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(intensityMode)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// LIGHTMAP_DEFAULT returns the LIGHTMAP_DEFAULT property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lightmap_default
func (d *DirectionalLight) LIGHTMAP_DEFAULT(LIGHTMAP_DEFAULT float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(LIGHTMAP_DEFAULT)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetLIGHTMAP_DEFAULT sets the LIGHTMAP_DEFAULT property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lightmap_default
func (d *DirectionalLight) SetLIGHTMAP_DEFAULT(LIGHTMAP_DEFAULT float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(LIGHTMAP_DEFAULT)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// LIGHTMAP_SHADOWSONLY returns the LIGHTMAP_SHADOWSONLY property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lightmap_shadowsonly
func (d *DirectionalLight) LIGHTMAP_SHADOWSONLY(LIGHTMAP_SHADOWSONLY float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(LIGHTMAP_SHADOWSONLY)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetLIGHTMAP_SHADOWSONLY sets the LIGHTMAP_SHADOWSONLY property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lightmap_shadowsonly
func (d *DirectionalLight) SetLIGHTMAP_SHADOWSONLY(LIGHTMAP_SHADOWSONLY float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(LIGHTMAP_SHADOWSONLY)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// LIGHTMAP_SPECULAR returns the LIGHTMAP_SPECULAR property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lightmap_specular
func (d *DirectionalLight) LIGHTMAP_SPECULAR(LIGHTMAP_SPECULAR float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(LIGHTMAP_SPECULAR)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetLIGHTMAP_SPECULAR sets the LIGHTMAP_SPECULAR property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lightmap_specular
func (d *DirectionalLight) SetLIGHTMAP_SPECULAR(LIGHTMAP_SPECULAR float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(LIGHTMAP_SPECULAR)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_DIRECTIONALLIGHT returns the LIGHTTYPEID_DIRECTIONALLIGHT property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lighttypeid_directionallight
func (d *DirectionalLight) LIGHTTYPEID_DIRECTIONALLIGHT(LIGHTTYPEID_DIRECTIONALLIGHT float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(LIGHTTYPEID_DIRECTIONALLIGHT)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_DIRECTIONALLIGHT sets the LIGHTTYPEID_DIRECTIONALLIGHT property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lighttypeid_directionallight
func (d *DirectionalLight) SetLIGHTTYPEID_DIRECTIONALLIGHT(LIGHTTYPEID_DIRECTIONALLIGHT float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(LIGHTTYPEID_DIRECTIONALLIGHT)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_HEMISPHERICLIGHT returns the LIGHTTYPEID_HEMISPHERICLIGHT property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lighttypeid_hemisphericlight
func (d *DirectionalLight) LIGHTTYPEID_HEMISPHERICLIGHT(LIGHTTYPEID_HEMISPHERICLIGHT float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(LIGHTTYPEID_HEMISPHERICLIGHT)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_HEMISPHERICLIGHT sets the LIGHTTYPEID_HEMISPHERICLIGHT property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lighttypeid_hemisphericlight
func (d *DirectionalLight) SetLIGHTTYPEID_HEMISPHERICLIGHT(LIGHTTYPEID_HEMISPHERICLIGHT float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(LIGHTTYPEID_HEMISPHERICLIGHT)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_POINTLIGHT returns the LIGHTTYPEID_POINTLIGHT property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lighttypeid_pointlight
func (d *DirectionalLight) LIGHTTYPEID_POINTLIGHT(LIGHTTYPEID_POINTLIGHT float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(LIGHTTYPEID_POINTLIGHT)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_POINTLIGHT sets the LIGHTTYPEID_POINTLIGHT property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lighttypeid_pointlight
func (d *DirectionalLight) SetLIGHTTYPEID_POINTLIGHT(LIGHTTYPEID_POINTLIGHT float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(LIGHTTYPEID_POINTLIGHT)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_SPOTLIGHT returns the LIGHTTYPEID_SPOTLIGHT property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lighttypeid_spotlight
func (d *DirectionalLight) LIGHTTYPEID_SPOTLIGHT(LIGHTTYPEID_SPOTLIGHT float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(LIGHTTYPEID_SPOTLIGHT)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_SPOTLIGHT sets the LIGHTTYPEID_SPOTLIGHT property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lighttypeid_spotlight
func (d *DirectionalLight) SetLIGHTTYPEID_SPOTLIGHT(LIGHTTYPEID_SPOTLIGHT float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(LIGHTTYPEID_SPOTLIGHT)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// LightmapMode returns the LightmapMode property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lightmapmode
func (d *DirectionalLight) LightmapMode(lightmapMode float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(lightmapMode)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetLightmapMode sets the LightmapMode property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#lightmapmode
func (d *DirectionalLight) SetLightmapMode(lightmapMode float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(lightmapMode)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#metadata
func (d *DirectionalLight) Metadata(metadata interface{}) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(metadata)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#metadata
func (d *DirectionalLight) SetMetadata(metadata interface{}) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(metadata)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#name
func (d *DirectionalLight) Name(name string) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(name)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#name
func (d *DirectionalLight) SetName(name string) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(name)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#ondispose
func (d *DirectionalLight) OnDispose(onDispose func()) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#ondispose
func (d *DirectionalLight) SetOnDispose(onDispose func()) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#ondisposeobservable
func (d *DirectionalLight) OnDisposeObservable(onDisposeObservable *Observable) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(onDisposeObservable.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#ondisposeobservable
func (d *DirectionalLight) SetOnDisposeObservable(onDisposeObservable *Observable) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(onDisposeObservable.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// OnReady returns the OnReady property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#onready
func (d *DirectionalLight) OnReady(onReady func()) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onReady(); return nil}))
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetOnReady sets the OnReady property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#onready
func (d *DirectionalLight) SetOnReady(onReady func()) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onReady(); return nil}))
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// Parent returns the Parent property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#parent
func (d *DirectionalLight) Parent(parent *Node) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(parent.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetParent sets the Parent property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#parent
func (d *DirectionalLight) SetParent(parent *Node) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(parent.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// Position returns the Position property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#position
func (d *DirectionalLight) Position(position *Vector3) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(position.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetPosition sets the Position property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#position
func (d *DirectionalLight) SetPosition(position *Vector3) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(position.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// Radius returns the Radius property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#radius
func (d *DirectionalLight) Radius(radius float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(radius)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetRadius sets the Radius property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#radius
func (d *DirectionalLight) SetRadius(radius float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(radius)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// Range returns the Range property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#range
func (d *DirectionalLight) Range(range float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(range)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetRange sets the Range property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#range
func (d *DirectionalLight) SetRange(range float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(range)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// RenderPriority returns the RenderPriority property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#renderpriority
func (d *DirectionalLight) RenderPriority(renderPriority float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(renderPriority)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetRenderPriority sets the RenderPriority property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#renderpriority
func (d *DirectionalLight) SetRenderPriority(renderPriority float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(renderPriority)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#reserveddatastore
func (d *DirectionalLight) ReservedDataStore(reservedDataStore interface{}) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(reservedDataStore)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#reserveddatastore
func (d *DirectionalLight) SetReservedDataStore(reservedDataStore interface{}) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(reservedDataStore)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// ShadowEnabled returns the ShadowEnabled property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#shadowenabled
func (d *DirectionalLight) ShadowEnabled(shadowEnabled bool) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(shadowEnabled)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetShadowEnabled sets the ShadowEnabled property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#shadowenabled
func (d *DirectionalLight) SetShadowEnabled(shadowEnabled bool) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(shadowEnabled)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// ShadowFrustumSize returns the ShadowFrustumSize property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#shadowfrustumsize
func (d *DirectionalLight) ShadowFrustumSize(shadowFrustumSize float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(shadowFrustumSize)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetShadowFrustumSize sets the ShadowFrustumSize property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#shadowfrustumsize
func (d *DirectionalLight) SetShadowFrustumSize(shadowFrustumSize float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(shadowFrustumSize)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// ShadowMaxZ returns the ShadowMaxZ property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#shadowmaxz
func (d *DirectionalLight) ShadowMaxZ(shadowMaxZ float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(shadowMaxZ)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetShadowMaxZ sets the ShadowMaxZ property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#shadowmaxz
func (d *DirectionalLight) SetShadowMaxZ(shadowMaxZ float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(shadowMaxZ)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// ShadowMinZ returns the ShadowMinZ property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#shadowminz
func (d *DirectionalLight) ShadowMinZ(shadowMinZ float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(shadowMinZ)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetShadowMinZ sets the ShadowMinZ property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#shadowminz
func (d *DirectionalLight) SetShadowMinZ(shadowMinZ float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(shadowMinZ)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// ShadowOrthoScale returns the ShadowOrthoScale property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#shadoworthoscale
func (d *DirectionalLight) ShadowOrthoScale(shadowOrthoScale float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(shadowOrthoScale)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetShadowOrthoScale sets the ShadowOrthoScale property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#shadoworthoscale
func (d *DirectionalLight) SetShadowOrthoScale(shadowOrthoScale float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(shadowOrthoScale)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// Specular returns the Specular property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#specular
func (d *DirectionalLight) Specular(specular *Color3) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(specular.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetSpecular sets the Specular property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#specular
func (d *DirectionalLight) SetSpecular(specular *Color3) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(specular.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// State returns the State property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#state
func (d *DirectionalLight) State(state string) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(state)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetState sets the State property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#state
func (d *DirectionalLight) SetState(state string) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(state)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// TransformedDirection returns the TransformedDirection property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#transformeddirection
func (d *DirectionalLight) TransformedDirection(transformedDirection *Vector3) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(transformedDirection.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetTransformedDirection sets the TransformedDirection property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#transformeddirection
func (d *DirectionalLight) SetTransformedDirection(transformedDirection *Vector3) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(transformedDirection.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// TransformedPosition returns the TransformedPosition property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#transformedposition
func (d *DirectionalLight) TransformedPosition(transformedPosition *Vector3) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(transformedPosition.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetTransformedPosition sets the TransformedPosition property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#transformedposition
func (d *DirectionalLight) SetTransformedPosition(transformedPosition *Vector3) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(transformedPosition.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#uniqueid
func (d *DirectionalLight) UniqueId(uniqueId float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(uniqueId)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#uniqueid
func (d *DirectionalLight) SetUniqueId(uniqueId float64) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(uniqueId)
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// WorldMatrixFromCache returns the WorldMatrixFromCache property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#worldmatrixfromcache
func (d *DirectionalLight) WorldMatrixFromCache(worldMatrixFromCache *Matrix) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(worldMatrixFromCache.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

// SetWorldMatrixFromCache sets the WorldMatrixFromCache property of class DirectionalLight.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight#worldmatrixfromcache
func (d *DirectionalLight) SetWorldMatrixFromCache(worldMatrixFromCache *Matrix) *DirectionalLight {
	p := ba.ctx.Get("DirectionalLight").New(worldMatrixFromCache.JSObject())
	return DirectionalLightFromJSObject(p, ba.ctx)
}

*/
