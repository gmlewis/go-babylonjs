// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DirectionalLight represents a babylon.js DirectionalLight.
// A directional light is defined by a direction (what a surprise!).
// The light is emitted from everywhere in the specified direction, and has an infinite range.
// An example of a directional light is when a distance planet is lit by the apparently parallel lines of light from its sun. Light in a downward direction will light the top of an object.
// Documentation: &lt;a href=&#34;https://doc.babylonjs.com/babylon101/lights&#34;&gt;https://doc.babylonjs.com/babylon101/lights&lt;/a&gt;
type DirectionalLight struct{ *ShadowLight }

// JSObject returns the underlying js.Value.
func (d *DirectionalLight) JSObject() js.Value { return d.p }

// DirectionalLight returns a DirectionalLight JavaScript class.
func (b *Babylon) DirectionalLight() *DirectionalLight {
	p := b.ctx.Get("DirectionalLight")
	return DirectionalLightFromJSObject(p)
}

// DirectionalLightFromJSObject returns a wrapped DirectionalLight JavaScript class.
func DirectionalLightFromJSObject(p js.Value) *DirectionalLight {
	return &DirectionalLight{ShadowLightFromJSObject(p)}
}

// NewDirectionalLight returns a new DirectionalLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.directionallight
func (b *Babylon) NewDirectionalLight(todo parameters) *DirectionalLight {
	p := b.ctx.Get("DirectionalLight").New(todo)
	return DirectionalLightFromJSObject(p)
}

// TODO: methods
