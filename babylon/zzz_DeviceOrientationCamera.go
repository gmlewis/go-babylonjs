// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DeviceOrientationCamera represents a babylon.js DeviceOrientationCamera.
// This is a camera specifically designed to react to device orientation events such as a modern mobile device
// being tilted forward or back and left or right.
type DeviceOrientationCamera struct {
	*FreeCamera
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DeviceOrientationCamera) JSObject() js.Value { return d.p }

// DeviceOrientationCamera returns a DeviceOrientationCamera JavaScript class.
func (ba *Babylon) DeviceOrientationCamera() *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera")
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// DeviceOrientationCameraFromJSObject returns a wrapped DeviceOrientationCamera JavaScript class.
func DeviceOrientationCameraFromJSObject(p js.Value, ctx js.Value) *DeviceOrientationCamera {
	return &DeviceOrientationCamera{FreeCamera: FreeCameraFromJSObject(p, ctx), ctx: ctx}
}

// DeviceOrientationCameraArrayToJSArray returns a JavaScript Array for the wrapped array.
func DeviceOrientationCameraArrayToJSArray(array []*DeviceOrientationCamera) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDeviceOrientationCamera returns a new DeviceOrientationCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera
func (ba *Babylon) NewDeviceOrientationCamera(name string, position *Vector3, scene *Scene) *DeviceOrientationCamera {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("DeviceOrientationCamera").New(args...)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// DeviceOrientationCameraEnableHorizontalDraggingOpts contains optional parameters for DeviceOrientationCamera.EnableHorizontalDragging.
type DeviceOrientationCameraEnableHorizontalDraggingOpts struct {
	DragFactor *float64
}

// EnableHorizontalDragging calls the EnableHorizontalDragging method on the DeviceOrientationCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#enablehorizontaldragging
func (d *DeviceOrientationCamera) EnableHorizontalDragging(opts *DeviceOrientationCameraEnableHorizontalDraggingOpts) {
	if opts == nil {
		opts = &DeviceOrientationCameraEnableHorizontalDraggingOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.DragFactor == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DragFactor)
	}

	d.p.Call("enableHorizontalDragging", args...)
}

// GetClassName calls the GetClassName method on the DeviceOrientationCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#getclassname
func (d *DeviceOrientationCamera) GetClassName() string {

	retVal := d.p.Call("getClassName")
	return retVal.String()
}

// DeviceOrientationCameraResetToCurrentRotationOpts contains optional parameters for DeviceOrientationCamera.ResetToCurrentRotation.
type DeviceOrientationCameraResetToCurrentRotationOpts struct {
	Axis *Axis
}

// ResetToCurrentRotation calls the ResetToCurrentRotation method on the DeviceOrientationCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#resettocurrentrotation
func (d *DeviceOrientationCamera) ResetToCurrentRotation(opts *DeviceOrientationCameraResetToCurrentRotationOpts) {
	if opts == nil {
		opts = &DeviceOrientationCameraResetToCurrentRotationOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Axis == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Axis.JSObject())
	}

	d.p.Call("resetToCurrentRotation", args...)
}

/*

// DisablePointerInputWhenUsingDeviceOrientation returns the DisablePointerInputWhenUsingDeviceOrientation property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#disablepointerinputwhenusingdeviceorientation
func (d *DeviceOrientationCamera) DisablePointerInputWhenUsingDeviceOrientation(disablePointerInputWhenUsingDeviceOrientation bool) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(disablePointerInputWhenUsingDeviceOrientation)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetDisablePointerInputWhenUsingDeviceOrientation sets the DisablePointerInputWhenUsingDeviceOrientation property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#disablepointerinputwhenusingdeviceorientation
func (d *DeviceOrientationCamera) SetDisablePointerInputWhenUsingDeviceOrientation(disablePointerInputWhenUsingDeviceOrientation bool) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(disablePointerInputWhenUsingDeviceOrientation)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

*/
