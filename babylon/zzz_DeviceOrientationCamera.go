// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DeviceOrientationCamera represents a babylon.js DeviceOrientationCamera.
// This is a camera specifically designed to react to device orientation events such as a modern mobile device
// being tilted forward or back and left or right.
type DeviceOrientationCamera struct {
	*FreeCamera
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DeviceOrientationCamera) JSObject() js.Value { return d.p }

// DeviceOrientationCamera returns a DeviceOrientationCamera JavaScript class.
func (ba *Babylon) DeviceOrientationCamera() *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera")
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// DeviceOrientationCameraFromJSObject returns a wrapped DeviceOrientationCamera JavaScript class.
func DeviceOrientationCameraFromJSObject(p js.Value, ctx js.Value) *DeviceOrientationCamera {
	return &DeviceOrientationCamera{FreeCamera: FreeCameraFromJSObject(p, ctx), ctx: ctx}
}

// DeviceOrientationCameraArrayToJSArray returns a JavaScript Array for the wrapped array.
func DeviceOrientationCameraArrayToJSArray(array []*DeviceOrientationCamera) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDeviceOrientationCamera returns a new DeviceOrientationCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera
func (ba *Babylon) NewDeviceOrientationCamera(name string, position *Vector3, scene *Scene) *DeviceOrientationCamera {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("DeviceOrientationCamera").New(args...)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// DeviceOrientationCameraAttachControlOpts contains optional parameters for DeviceOrientationCamera.AttachControl.
type DeviceOrientationCameraAttachControlOpts struct {
	NoPreventDefault *bool
}

// AttachControl calls the AttachControl method on the DeviceOrientationCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#attachcontrol
func (d *DeviceOrientationCamera) AttachControl(element js.Value, opts *DeviceOrientationCameraAttachControlOpts) {
	if opts == nil {
		opts = &DeviceOrientationCameraAttachControlOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, element)

	if opts.NoPreventDefault == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoPreventDefault)
	}

	d.p.Call("attachControl", args...)
}

// DetachControl calls the DetachControl method on the DeviceOrientationCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#detachcontrol
func (d *DeviceOrientationCamera) DetachControl(element js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, element)

	d.p.Call("detachControl", args...)
}

// Dispose calls the Dispose method on the DeviceOrientationCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#dispose
func (d *DeviceOrientationCamera) Dispose() {

	d.p.Call("dispose")
}

// DeviceOrientationCameraEnableHorizontalDraggingOpts contains optional parameters for DeviceOrientationCamera.EnableHorizontalDragging.
type DeviceOrientationCameraEnableHorizontalDraggingOpts struct {
	DragFactor *float64
}

// EnableHorizontalDragging calls the EnableHorizontalDragging method on the DeviceOrientationCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#enablehorizontaldragging
func (d *DeviceOrientationCamera) EnableHorizontalDragging(opts *DeviceOrientationCameraEnableHorizontalDraggingOpts) {
	if opts == nil {
		opts = &DeviceOrientationCameraEnableHorizontalDraggingOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.DragFactor == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DragFactor)
	}

	d.p.Call("enableHorizontalDragging", args...)
}

// GetClassName calls the GetClassName method on the DeviceOrientationCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#getclassname
func (d *DeviceOrientationCamera) GetClassName() string {

	retVal := d.p.Call("getClassName")
	return retVal.String()
}

// GetFrontPosition calls the GetFrontPosition method on the DeviceOrientationCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#getfrontposition
func (d *DeviceOrientationCamera) GetFrontPosition(distance float64) *Vector3 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, distance)

	retVal := d.p.Call("getFrontPosition", args...)
	return Vector3FromJSObject(retVal, d.ctx)
}

// GetTarget calls the GetTarget method on the DeviceOrientationCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#gettarget
func (d *DeviceOrientationCamera) GetTarget() *Vector3 {

	retVal := d.p.Call("getTarget")
	return Vector3FromJSObject(retVal, d.ctx)
}

// DeviceOrientationCameraResetToCurrentRotationOpts contains optional parameters for DeviceOrientationCamera.ResetToCurrentRotation.
type DeviceOrientationCameraResetToCurrentRotationOpts struct {
	Axis *Axis
}

// ResetToCurrentRotation calls the ResetToCurrentRotation method on the DeviceOrientationCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#resettocurrentrotation
func (d *DeviceOrientationCamera) ResetToCurrentRotation(opts *DeviceOrientationCameraResetToCurrentRotationOpts) {
	if opts == nil {
		opts = &DeviceOrientationCameraResetToCurrentRotationOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Axis == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Axis.JSObject())
	}

	d.p.Call("resetToCurrentRotation", args...)
}

// SetTarget calls the SetTarget method on the DeviceOrientationCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#settarget
func (d *DeviceOrientationCamera) SetTarget(target *Vector3) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, target.JSObject())

	d.p.Call("setTarget", args...)
}

// StoreState calls the StoreState method on the DeviceOrientationCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#storestate
func (d *DeviceOrientationCamera) StoreState() *Camera {

	retVal := d.p.Call("storeState")
	return CameraFromJSObject(retVal, d.ctx)
}

/*

// AngularSensibility returns the AngularSensibility property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#angularsensibility
func (d *DeviceOrientationCamera) AngularSensibility(angularSensibility float64) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(angularSensibility)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetAngularSensibility sets the AngularSensibility property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#angularsensibility
func (d *DeviceOrientationCamera) SetAngularSensibility(angularSensibility float64) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(angularSensibility)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// ApplyGravity returns the ApplyGravity property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#applygravity
func (d *DeviceOrientationCamera) ApplyGravity(applyGravity bool) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(applyGravity)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetApplyGravity sets the ApplyGravity property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#applygravity
func (d *DeviceOrientationCamera) SetApplyGravity(applyGravity bool) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(applyGravity)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// CameraDirection returns the CameraDirection property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#cameradirection
func (d *DeviceOrientationCamera) CameraDirection(cameraDirection *Vector3) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(cameraDirection.JSObject())
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetCameraDirection sets the CameraDirection property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#cameradirection
func (d *DeviceOrientationCamera) SetCameraDirection(cameraDirection *Vector3) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(cameraDirection.JSObject())
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// CameraRotation returns the CameraRotation property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#camerarotation
func (d *DeviceOrientationCamera) CameraRotation(cameraRotation *Vector2) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(cameraRotation.JSObject())
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetCameraRotation sets the CameraRotation property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#camerarotation
func (d *DeviceOrientationCamera) SetCameraRotation(cameraRotation *Vector2) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(cameraRotation.JSObject())
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// CheckCollisions returns the CheckCollisions property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#checkcollisions
func (d *DeviceOrientationCamera) CheckCollisions(checkCollisions bool) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(checkCollisions)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetCheckCollisions sets the CheckCollisions property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#checkcollisions
func (d *DeviceOrientationCamera) SetCheckCollisions(checkCollisions bool) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(checkCollisions)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// CollisionMask returns the CollisionMask property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#collisionmask
func (d *DeviceOrientationCamera) CollisionMask(collisionMask float64) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(collisionMask)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetCollisionMask sets the CollisionMask property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#collisionmask
func (d *DeviceOrientationCamera) SetCollisionMask(collisionMask float64) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(collisionMask)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// DisablePointerInputWhenUsingDeviceOrientation returns the DisablePointerInputWhenUsingDeviceOrientation property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#disablepointerinputwhenusingdeviceorientation
func (d *DeviceOrientationCamera) DisablePointerInputWhenUsingDeviceOrientation(disablePointerInputWhenUsingDeviceOrientation bool) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(disablePointerInputWhenUsingDeviceOrientation)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetDisablePointerInputWhenUsingDeviceOrientation sets the DisablePointerInputWhenUsingDeviceOrientation property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#disablepointerinputwhenusingdeviceorientation
func (d *DeviceOrientationCamera) SetDisablePointerInputWhenUsingDeviceOrientation(disablePointerInputWhenUsingDeviceOrientation bool) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(disablePointerInputWhenUsingDeviceOrientation)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// Ellipsoid returns the Ellipsoid property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#ellipsoid
func (d *DeviceOrientationCamera) Ellipsoid(ellipsoid *Vector3) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(ellipsoid.JSObject())
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetEllipsoid sets the Ellipsoid property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#ellipsoid
func (d *DeviceOrientationCamera) SetEllipsoid(ellipsoid *Vector3) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(ellipsoid.JSObject())
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// EllipsoidOffset returns the EllipsoidOffset property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#ellipsoidoffset
func (d *DeviceOrientationCamera) EllipsoidOffset(ellipsoidOffset *Vector3) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(ellipsoidOffset.JSObject())
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetEllipsoidOffset sets the EllipsoidOffset property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#ellipsoidoffset
func (d *DeviceOrientationCamera) SetEllipsoidOffset(ellipsoidOffset *Vector3) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(ellipsoidOffset.JSObject())
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#inputs
func (d *DeviceOrientationCamera) Inputs(inputs *FreeCameraInputsManager) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(inputs.JSObject())
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#inputs
func (d *DeviceOrientationCamera) SetInputs(inputs *FreeCameraInputsManager) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(inputs.JSObject())
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// KeysDown returns the KeysDown property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#keysdown
func (d *DeviceOrientationCamera) KeysDown(keysDown float64) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(keysDown)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetKeysDown sets the KeysDown property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#keysdown
func (d *DeviceOrientationCamera) SetKeysDown(keysDown float64) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(keysDown)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// KeysLeft returns the KeysLeft property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#keysleft
func (d *DeviceOrientationCamera) KeysLeft(keysLeft float64) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(keysLeft)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetKeysLeft sets the KeysLeft property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#keysleft
func (d *DeviceOrientationCamera) SetKeysLeft(keysLeft float64) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(keysLeft)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// KeysRight returns the KeysRight property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#keysright
func (d *DeviceOrientationCamera) KeysRight(keysRight float64) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(keysRight)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetKeysRight sets the KeysRight property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#keysright
func (d *DeviceOrientationCamera) SetKeysRight(keysRight float64) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(keysRight)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// KeysUp returns the KeysUp property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#keysup
func (d *DeviceOrientationCamera) KeysUp(keysUp float64) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(keysUp)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetKeysUp sets the KeysUp property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#keysup
func (d *DeviceOrientationCamera) SetKeysUp(keysUp float64) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(keysUp)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// LockedTarget returns the LockedTarget property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#lockedtarget
func (d *DeviceOrientationCamera) LockedTarget(lockedTarget interface{}) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(lockedTarget)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetLockedTarget sets the LockedTarget property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#lockedtarget
func (d *DeviceOrientationCamera) SetLockedTarget(lockedTarget interface{}) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(lockedTarget)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// NoRotationConstraint returns the NoRotationConstraint property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#norotationconstraint
func (d *DeviceOrientationCamera) NoRotationConstraint(noRotationConstraint bool) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(noRotationConstraint)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetNoRotationConstraint sets the NoRotationConstraint property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#norotationconstraint
func (d *DeviceOrientationCamera) SetNoRotationConstraint(noRotationConstraint bool) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(noRotationConstraint)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// OnCollide returns the OnCollide property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#oncollide
func (d *DeviceOrientationCamera) OnCollide(onCollide func()) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onCollide(); return nil}))
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetOnCollide sets the OnCollide property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#oncollide
func (d *DeviceOrientationCamera) SetOnCollide(onCollide func()) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onCollide(); return nil}))
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// Rotation returns the Rotation property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#rotation
func (d *DeviceOrientationCamera) Rotation(rotation *Vector3) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(rotation.JSObject())
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetRotation sets the Rotation property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#rotation
func (d *DeviceOrientationCamera) SetRotation(rotation *Vector3) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(rotation.JSObject())
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// RotationQuaternion returns the RotationQuaternion property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#rotationquaternion
func (d *DeviceOrientationCamera) RotationQuaternion(rotationQuaternion *Quaternion) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(rotationQuaternion.JSObject())
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetRotationQuaternion sets the RotationQuaternion property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#rotationquaternion
func (d *DeviceOrientationCamera) SetRotationQuaternion(rotationQuaternion *Quaternion) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(rotationQuaternion.JSObject())
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// Speed returns the Speed property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#speed
func (d *DeviceOrientationCamera) Speed(speed float64) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(speed)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetSpeed sets the Speed property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#speed
func (d *DeviceOrientationCamera) SetSpeed(speed float64) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(speed)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// UpdateUpVectorFromRotation returns the UpdateUpVectorFromRotation property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#updateupvectorfromrotation
func (d *DeviceOrientationCamera) UpdateUpVectorFromRotation(updateUpVectorFromRotation bool) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(updateUpVectorFromRotation)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

// SetUpdateUpVectorFromRotation sets the UpdateUpVectorFromRotation property of class DeviceOrientationCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.deviceorientationcamera#updateupvectorfromrotation
func (d *DeviceOrientationCamera) SetUpdateUpVectorFromRotation(updateUpVectorFromRotation bool) *DeviceOrientationCamera {
	p := ba.ctx.Get("DeviceOrientationCamera").New(updateUpVectorFromRotation)
	return DeviceOrientationCameraFromJSObject(p, ba.ctx)
}

*/
