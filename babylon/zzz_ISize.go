// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ISize represents a babylon.js ISize.
// Interface for the size containing width and height
type ISize struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ISize) JSObject() js.Value { return i.p }

// ISize returns a ISize JavaScript class.
func (ba *Babylon) ISize() *ISize {
	p := ba.ctx.Get("ISize")
	return ISizeFromJSObject(p, ba.ctx)
}

// ISizeFromJSObject returns a wrapped ISize JavaScript class.
func ISizeFromJSObject(p js.Value, ctx js.Value) *ISize {
	return &ISize{p: p, ctx: ctx}
}

// ISizeArrayToJSArray returns a JavaScript Array for the wrapped array.
func ISizeArrayToJSArray(array []*ISize) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Height returns the Height property of class ISize.
//
// https://doc.babylonjs.com/api/classes/babylon.isize#height
func (i *ISize) Height(height float64) *ISize {
	p := ba.ctx.Get("ISize").New(height)
	return ISizeFromJSObject(p, ba.ctx)
}

// SetHeight sets the Height property of class ISize.
//
// https://doc.babylonjs.com/api/classes/babylon.isize#height
func (i *ISize) SetHeight(height float64) *ISize {
	p := ba.ctx.Get("ISize").New(height)
	return ISizeFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class ISize.
//
// https://doc.babylonjs.com/api/classes/babylon.isize#width
func (i *ISize) Width(width float64) *ISize {
	p := ba.ctx.Get("ISize").New(width)
	return ISizeFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class ISize.
//
// https://doc.babylonjs.com/api/classes/babylon.isize#width
func (i *ISize) SetWidth(width float64) *ISize {
	p := ba.ctx.Get("ISize").New(width)
	return ISizeFromJSObject(p, ba.ctx)
}

*/
