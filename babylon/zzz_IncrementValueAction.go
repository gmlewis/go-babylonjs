// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IncrementValueAction represents a babylon.js IncrementValueAction.
// This defines an action responsible to increment the target value
// to a desired value once triggered.
//
// See: http://doc.babylonjs.com/how_to/how_to_use_actions
type IncrementValueAction struct {
	*Action
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IncrementValueAction) JSObject() js.Value { return i.p }

// IncrementValueAction returns a IncrementValueAction JavaScript class.
func (ba *Babylon) IncrementValueAction() *IncrementValueAction {
	p := ba.ctx.Get("IncrementValueAction")
	return IncrementValueActionFromJSObject(p, ba.ctx)
}

// IncrementValueActionFromJSObject returns a wrapped IncrementValueAction JavaScript class.
func IncrementValueActionFromJSObject(p js.Value, ctx js.Value) *IncrementValueAction {
	return &IncrementValueAction{Action: ActionFromJSObject(p, ctx), ctx: ctx}
}

// IncrementValueActionArrayToJSArray returns a JavaScript Array for the wrapped array.
func IncrementValueActionArrayToJSArray(array []*IncrementValueAction) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewIncrementValueActionOpts contains optional parameters for NewIncrementValueAction.
type NewIncrementValueActionOpts struct {
	Condition *Condition
}

// NewIncrementValueAction returns a new IncrementValueAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.incrementvalueaction
func (ba *Babylon) NewIncrementValueAction(triggerOptions JSObject, target JSObject, propertyPath string, value JSObject, opts *NewIncrementValueActionOpts) *IncrementValueAction {
	if opts == nil {
		opts = &NewIncrementValueActionOpts{}
	}

	args := make([]interface{}, 0, 4+1)

	args = append(args, triggerOptions.JSObject())
	args = append(args, target.JSObject())
	args = append(args, propertyPath)
	args = append(args, value.JSObject())

	if opts.Condition == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Condition.JSObject())
	}

	p := ba.ctx.Get("IncrementValueAction").New(args...)
	return IncrementValueActionFromJSObject(p, ba.ctx)
}

// Execute calls the Execute method on the IncrementValueAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.incrementvalueaction#execute
func (i *IncrementValueAction) Execute() {

	i.p.Call("execute")
}

// Serialize calls the Serialize method on the IncrementValueAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.incrementvalueaction#serialize
func (i *IncrementValueAction) Serialize(parent JSObject) js.Value {

	args := make([]interface{}, 0, 1+0)

	if parent == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, parent.JSObject())
	}

	retVal := i.p.Call("serialize", args...)
	return retVal
}

// PropertyPath returns the PropertyPath property of class IncrementValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.incrementvalueaction#propertypath
func (i *IncrementValueAction) PropertyPath() string {
	retVal := i.p.Get("propertyPath")
	return retVal.String()
}

// SetPropertyPath sets the PropertyPath property of class IncrementValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.incrementvalueaction#propertypath
func (i *IncrementValueAction) SetPropertyPath(propertyPath string) *IncrementValueAction {
	i.p.Set("propertyPath", propertyPath)
	return i
}

// Value returns the Value property of class IncrementValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.incrementvalueaction#value
func (i *IncrementValueAction) Value() js.Value {
	retVal := i.p.Get("value")
	return retVal
}

// SetValue sets the Value property of class IncrementValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.incrementvalueaction#value
func (i *IncrementValueAction) SetValue(value JSObject) *IncrementValueAction {
	i.p.Set("value", value.JSObject())
	return i
}
