// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IncrementValueAction represents a babylon.js IncrementValueAction.
// This defines an action responsible to increment the target value
// to a desired value once triggered.
//
// See: http://doc.babylonjs.com/how_to/how_to_use_actions
type IncrementValueAction struct{ *Action }

// JSObject returns the underlying js.Value.
func (i *IncrementValueAction) JSObject() js.Value { return i.p }

// IncrementValueAction returns a IncrementValueAction JavaScript class.
func (b *Babylon) IncrementValueAction() *IncrementValueAction {
	p := b.ctx.Get("IncrementValueAction")
	return IncrementValueActionFromJSObject(p)
}

// IncrementValueActionFromJSObject returns a wrapped IncrementValueAction JavaScript class.
func IncrementValueActionFromJSObject(p js.Value) *IncrementValueAction {
	return &IncrementValueAction{ActionFromJSObject(p)}
}

// NewIncrementValueActionOpts contains optional parameters for NewIncrementValueAction.
type NewIncrementValueActionOpts struct {
	Condition *Condition
}

// NewIncrementValueAction returns a new IncrementValueAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.incrementvalueaction
func (b *Babylon) NewIncrementValueAction(triggerOptions interface{}, target interface{}, propertyPath string, value interface{}, opts *NewIncrementValueActionOpts) *IncrementValueAction {
	if opts == nil {
		opts = &NewIncrementValueActionOpts{}
	}

	p := b.ctx.Get("IncrementValueAction").New(triggerOptions, target, propertyPath, value, opts.Condition.JSObject())
	return IncrementValueActionFromJSObject(p)
}

// TODO: methods
