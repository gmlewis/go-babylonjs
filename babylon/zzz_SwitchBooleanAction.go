// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SwitchBooleanAction represents a babylon.js SwitchBooleanAction.
// This defines an action responsible to toggle a boolean once triggered.
//
// See: http://doc.babylonjs.com/how_to/how_to_use_actions
type SwitchBooleanAction struct {
	*Action
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SwitchBooleanAction) JSObject() js.Value { return s.p }

// SwitchBooleanAction returns a SwitchBooleanAction JavaScript class.
func (ba *Babylon) SwitchBooleanAction() *SwitchBooleanAction {
	p := ba.ctx.Get("SwitchBooleanAction")
	return SwitchBooleanActionFromJSObject(p, ba.ctx)
}

// SwitchBooleanActionFromJSObject returns a wrapped SwitchBooleanAction JavaScript class.
func SwitchBooleanActionFromJSObject(p js.Value, ctx js.Value) *SwitchBooleanAction {
	return &SwitchBooleanAction{Action: ActionFromJSObject(p, ctx), ctx: ctx}
}

// NewSwitchBooleanActionOpts contains optional parameters for NewSwitchBooleanAction.
type NewSwitchBooleanActionOpts struct {
	Condition *Condition
}

// NewSwitchBooleanAction returns a new SwitchBooleanAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.switchbooleanaction
func (ba *Babylon) NewSwitchBooleanAction(triggerOptions interface{}, target interface{}, propertyPath string, opts *NewSwitchBooleanActionOpts) *SwitchBooleanAction {
	if opts == nil {
		opts = &NewSwitchBooleanActionOpts{}
	}

	p := ba.ctx.Get("SwitchBooleanAction").New(triggerOptions, target, propertyPath, opts.Condition.JSObject())
	return SwitchBooleanActionFromJSObject(p, ba.ctx)
}

// TODO: methods
