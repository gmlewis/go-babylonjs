// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ImageProcessingPostProcess represents a babylon.js ImageProcessingPostProcess.
// ImageProcessingPostProcess
//
// See: https://doc.babylonjs.com/how_to/how_to_use_postprocesses#imageprocessing
type ImageProcessingPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ImageProcessingPostProcess) JSObject() js.Value { return i.p }

// ImageProcessingPostProcess returns a ImageProcessingPostProcess JavaScript class.
func (ba *Babylon) ImageProcessingPostProcess() *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess")
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// ImageProcessingPostProcessFromJSObject returns a wrapped ImageProcessingPostProcess JavaScript class.
func ImageProcessingPostProcessFromJSObject(p js.Value, ctx js.Value) *ImageProcessingPostProcess {
	return &ImageProcessingPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// ImageProcessingPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func ImageProcessingPostProcessArrayToJSArray(array []*ImageProcessingPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewImageProcessingPostProcessOpts contains optional parameters for NewImageProcessingPostProcess.
type NewImageProcessingPostProcessOpts struct {
	Camera                       *Camera
	SamplingMode                 *float64
	Engine                       *Engine
	Reusable                     *bool
	TextureType                  *float64
	ImageProcessingConfiguration *ImageProcessingConfiguration
}

// NewImageProcessingPostProcess returns a new ImageProcessingPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess
func (ba *Babylon) NewImageProcessingPostProcess(name string, options float64, opts *NewImageProcessingPostProcessOpts) *ImageProcessingPostProcess {
	if opts == nil {
		opts = &NewImageProcessingPostProcessOpts{}
	}

	args := make([]interface{}, 0, 2+6)

	args = append(args, name)
	args = append(args, options)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}
	if opts.ImageProcessingConfiguration == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ImageProcessingConfiguration.JSObject())
	}

	p := ba.ctx.Get("ImageProcessingPostProcess").New(args...)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// ImageProcessingPostProcessDisposeOpts contains optional parameters for ImageProcessingPostProcess.Dispose.
type ImageProcessingPostProcessDisposeOpts struct {
	Camera *Camera
}

// Dispose calls the Dispose method on the ImageProcessingPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#dispose
func (i *ImageProcessingPostProcess) Dispose(opts *ImageProcessingPostProcessDisposeOpts) {
	if opts == nil {
		opts = &ImageProcessingPostProcessDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}

	i.p.Call("dispose", args...)
}

// GetClassName calls the GetClassName method on the ImageProcessingPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#getclassname
func (i *ImageProcessingPostProcess) GetClassName() string {

	retVal := i.p.Call("getClassName")
	return retVal.String()
}

/*

// ColorCurves returns the ColorCurves property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#colorcurves
func (i *ImageProcessingPostProcess) ColorCurves(colorCurves *ColorCurves) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(colorCurves.JSObject())
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetColorCurves sets the ColorCurves property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#colorcurves
func (i *ImageProcessingPostProcess) SetColorCurves(colorCurves *ColorCurves) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(colorCurves.JSObject())
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// ColorCurvesEnabled returns the ColorCurvesEnabled property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#colorcurvesenabled
func (i *ImageProcessingPostProcess) ColorCurvesEnabled(colorCurvesEnabled bool) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(colorCurvesEnabled)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetColorCurvesEnabled sets the ColorCurvesEnabled property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#colorcurvesenabled
func (i *ImageProcessingPostProcess) SetColorCurvesEnabled(colorCurvesEnabled bool) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(colorCurvesEnabled)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// ColorGradingEnabled returns the ColorGradingEnabled property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#colorgradingenabled
func (i *ImageProcessingPostProcess) ColorGradingEnabled(colorGradingEnabled bool) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(colorGradingEnabled)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetColorGradingEnabled sets the ColorGradingEnabled property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#colorgradingenabled
func (i *ImageProcessingPostProcess) SetColorGradingEnabled(colorGradingEnabled bool) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(colorGradingEnabled)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// ColorGradingTexture returns the ColorGradingTexture property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#colorgradingtexture
func (i *ImageProcessingPostProcess) ColorGradingTexture(colorGradingTexture *BaseTexture) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(colorGradingTexture.JSObject())
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetColorGradingTexture sets the ColorGradingTexture property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#colorgradingtexture
func (i *ImageProcessingPostProcess) SetColorGradingTexture(colorGradingTexture *BaseTexture) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(colorGradingTexture.JSObject())
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// Contrast returns the Contrast property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#contrast
func (i *ImageProcessingPostProcess) Contrast(contrast float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(contrast)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetContrast sets the Contrast property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#contrast
func (i *ImageProcessingPostProcess) SetContrast(contrast float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(contrast)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// Exposure returns the Exposure property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#exposure
func (i *ImageProcessingPostProcess) Exposure(exposure float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(exposure)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetExposure sets the Exposure property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#exposure
func (i *ImageProcessingPostProcess) SetExposure(exposure float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(exposure)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// FromLinearSpace returns the FromLinearSpace property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#fromlinearspace
func (i *ImageProcessingPostProcess) FromLinearSpace(fromLinearSpace bool) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(fromLinearSpace)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetFromLinearSpace sets the FromLinearSpace property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#fromlinearspace
func (i *ImageProcessingPostProcess) SetFromLinearSpace(fromLinearSpace bool) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(fromLinearSpace)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// ImageProcessingConfiguration returns the ImageProcessingConfiguration property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#imageprocessingconfiguration
func (i *ImageProcessingPostProcess) ImageProcessingConfiguration(imageProcessingConfiguration *ImageProcessingConfiguration) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(imageProcessingConfiguration.JSObject())
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetImageProcessingConfiguration sets the ImageProcessingConfiguration property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#imageprocessingconfiguration
func (i *ImageProcessingPostProcess) SetImageProcessingConfiguration(imageProcessingConfiguration *ImageProcessingConfiguration) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(imageProcessingConfiguration.JSObject())
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// ToneMappingEnabled returns the ToneMappingEnabled property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#tonemappingenabled
func (i *ImageProcessingPostProcess) ToneMappingEnabled(toneMappingEnabled bool) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(toneMappingEnabled)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetToneMappingEnabled sets the ToneMappingEnabled property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#tonemappingenabled
func (i *ImageProcessingPostProcess) SetToneMappingEnabled(toneMappingEnabled bool) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(toneMappingEnabled)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// ToneMappingType returns the ToneMappingType property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#tonemappingtype
func (i *ImageProcessingPostProcess) ToneMappingType(toneMappingType float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(toneMappingType)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetToneMappingType sets the ToneMappingType property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#tonemappingtype
func (i *ImageProcessingPostProcess) SetToneMappingType(toneMappingType float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(toneMappingType)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// VignetteBlendMode returns the VignetteBlendMode property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignetteblendmode
func (i *ImageProcessingPostProcess) VignetteBlendMode(vignetteBlendMode float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteBlendMode)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetVignetteBlendMode sets the VignetteBlendMode property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignetteblendmode
func (i *ImageProcessingPostProcess) SetVignetteBlendMode(vignetteBlendMode float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteBlendMode)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// VignetteCameraFov returns the VignetteCameraFov property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignettecamerafov
func (i *ImageProcessingPostProcess) VignetteCameraFov(vignetteCameraFov float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteCameraFov)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetVignetteCameraFov sets the VignetteCameraFov property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignettecamerafov
func (i *ImageProcessingPostProcess) SetVignetteCameraFov(vignetteCameraFov float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteCameraFov)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// VignetteCentreX returns the VignetteCentreX property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignettecentrex
func (i *ImageProcessingPostProcess) VignetteCentreX(vignetteCentreX float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteCentreX)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetVignetteCentreX sets the VignetteCentreX property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignettecentrex
func (i *ImageProcessingPostProcess) SetVignetteCentreX(vignetteCentreX float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteCentreX)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// VignetteCentreY returns the VignetteCentreY property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignettecentrey
func (i *ImageProcessingPostProcess) VignetteCentreY(vignetteCentreY float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteCentreY)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetVignetteCentreY sets the VignetteCentreY property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignettecentrey
func (i *ImageProcessingPostProcess) SetVignetteCentreY(vignetteCentreY float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteCentreY)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// VignetteColor returns the VignetteColor property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignettecolor
func (i *ImageProcessingPostProcess) VignetteColor(vignetteColor *Color4) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteColor.JSObject())
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetVignetteColor sets the VignetteColor property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignettecolor
func (i *ImageProcessingPostProcess) SetVignetteColor(vignetteColor *Color4) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteColor.JSObject())
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// VignetteEnabled returns the VignetteEnabled property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignetteenabled
func (i *ImageProcessingPostProcess) VignetteEnabled(vignetteEnabled bool) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteEnabled)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetVignetteEnabled sets the VignetteEnabled property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignetteenabled
func (i *ImageProcessingPostProcess) SetVignetteEnabled(vignetteEnabled bool) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteEnabled)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// VignetteStretch returns the VignetteStretch property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignettestretch
func (i *ImageProcessingPostProcess) VignetteStretch(vignetteStretch float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteStretch)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetVignetteStretch sets the VignetteStretch property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignettestretch
func (i *ImageProcessingPostProcess) SetVignetteStretch(vignetteStretch float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteStretch)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// VignetteWeight returns the VignetteWeight property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignetteweight
func (i *ImageProcessingPostProcess) VignetteWeight(vignetteWeight float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteWeight)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

// SetVignetteWeight sets the VignetteWeight property of class ImageProcessingPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingpostprocess#vignetteweight
func (i *ImageProcessingPostProcess) SetVignetteWeight(vignetteWeight float64) *ImageProcessingPostProcess {
	p := ba.ctx.Get("ImageProcessingPostProcess").New(vignetteWeight)
	return ImageProcessingPostProcessFromJSObject(p, ba.ctx)
}

*/
