// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FogBlock represents a babylon.js FogBlock.
// Block used to add support for scene fog
type FogBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FogBlock) JSObject() js.Value { return f.p }

// FogBlock returns a FogBlock JavaScript class.
func (ba *Babylon) FogBlock() *FogBlock {
	p := ba.ctx.Get("FogBlock")
	return FogBlockFromJSObject(p, ba.ctx)
}

// FogBlockFromJSObject returns a wrapped FogBlock JavaScript class.
func FogBlockFromJSObject(p js.Value, ctx js.Value) *FogBlock {
	return &FogBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// FogBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func FogBlockArrayToJSArray(array []*FogBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewFogBlock returns a new FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock
func (ba *Babylon) NewFogBlock(name string) *FogBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("FogBlock").New(args...)
	return FogBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#autoconfigure
func (f *FogBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	f.p.Call("autoConfigure", args...)
}

// FogBlockBindOpts contains optional parameters for FogBlock.Bind.
type FogBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#bind
func (f *FogBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *FogBlockBindOpts) {
	if opts == nil {
		opts = &FogBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	f.p.Call("bind", args...)
}

// GetClassName calls the GetClassName method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#getclassname
func (f *FogBlock) GetClassName() string {

	retVal := f.p.Call("getClassName")
	return retVal.String()
}

// PrepareDefines calls the PrepareDefines method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#preparedefines
func (f *FogBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	f.p.Call("prepareDefines", args...)
}

/*

// FogColor returns the FogColor property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#fogcolor
func (f *FogBlock) FogColor(fogColor *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(fogColor.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetFogColor sets the FogColor property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#fogcolor
func (f *FogBlock) SetFogColor(fogColor *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(fogColor.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// Input returns the Input property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#input
func (f *FogBlock) Input(input *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(input.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetInput sets the Input property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#input
func (f *FogBlock) SetInput(input *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(input.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#output
func (f *FogBlock) Output(output *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(output.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#output
func (f *FogBlock) SetOutput(output *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(output.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// View returns the View property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#view
func (f *FogBlock) View(view *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(view.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetView sets the View property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#view
func (f *FogBlock) SetView(view *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(view.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// WorldPosition returns the WorldPosition property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#worldposition
func (f *FogBlock) WorldPosition(worldPosition *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(worldPosition.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetWorldPosition sets the WorldPosition property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#worldposition
func (f *FogBlock) SetWorldPosition(worldPosition *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(worldPosition.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

*/
