// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FogBlock represents a babylon.js FogBlock.
// Block used to add support for scene fog
type FogBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FogBlock) JSObject() js.Value { return f.p }

// FogBlock returns a FogBlock JavaScript class.
func (ba *Babylon) FogBlock() *FogBlock {
	p := ba.ctx.Get("FogBlock")
	return FogBlockFromJSObject(p, ba.ctx)
}

// FogBlockFromJSObject returns a wrapped FogBlock JavaScript class.
func FogBlockFromJSObject(p js.Value, ctx js.Value) *FogBlock {
	return &FogBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// FogBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func FogBlockArrayToJSArray(array []*FogBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewFogBlock returns a new FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock
func (ba *Babylon) NewFogBlock(name string) *FogBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("FogBlock").New(args...)
	return FogBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#autoconfigure
func (f *FogBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	f.p.Call("autoConfigure", args...)
}

// FogBlockBindOpts contains optional parameters for FogBlock.Bind.
type FogBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#bind
func (f *FogBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *FogBlockBindOpts) {
	if opts == nil {
		opts = &FogBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	f.p.Call("bind", args...)
}

// Build calls the Build method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#build
func (f *FogBlock) Build(state *NodeMaterialBuildState, activeBlocks *NodeMaterialBlock) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, state.JSObject())
	args = append(args, activeBlocks.JSObject())

	retVal := f.p.Call("build", args...)
	return retVal.Bool()
}

// FogBlockCloneOpts contains optional parameters for FogBlock.Clone.
type FogBlockCloneOpts struct {
	RootUrl *string
}

// Clone calls the Clone method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#clone
func (f *FogBlock) Clone(scene *Scene, opts *FogBlockCloneOpts) *NodeMaterialBlock {
	if opts == nil {
		opts = &FogBlockCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := f.p.Call("clone", args...)
	return NodeMaterialBlockFromJSObject(retVal, f.ctx)
}

// FogBlockConnectToOpts contains optional parameters for FogBlock.ConnectTo.
type FogBlockConnectToOpts struct {
	Options js.Value
}

// ConnectTo calls the ConnectTo method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#connectto
func (f *FogBlock) ConnectTo(other *NodeMaterialBlock, opts *FogBlockConnectToOpts) *FogBlock {
	if opts == nil {
		opts = &FogBlockConnectToOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, other.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := f.p.Call("connectTo", args...)
	return FogBlockFromJSObject(retVal, f.ctx)
}

// Dispose calls the Dispose method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#dispose
func (f *FogBlock) Dispose() {

	f.p.Call("dispose")
}

// GetClassName calls the GetClassName method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#getclassname
func (f *FogBlock) GetClassName() string {

	retVal := f.p.Call("getClassName")
	return retVal.String()
}

// FogBlockGetFirstAvailableInputOpts contains optional parameters for FogBlock.GetFirstAvailableInput.
type FogBlockGetFirstAvailableInputOpts struct {
	ForOutput *NodeMaterialConnectionPoint
}

// GetFirstAvailableInput calls the GetFirstAvailableInput method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#getfirstavailableinput
func (f *FogBlock) GetFirstAvailableInput(opts *FogBlockGetFirstAvailableInputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &FogBlockGetFirstAvailableInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForOutput == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForOutput.JSObject())
	}

	retVal := f.p.Call("getFirstAvailableInput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, f.ctx)
}

// FogBlockGetFirstAvailableOutputOpts contains optional parameters for FogBlock.GetFirstAvailableOutput.
type FogBlockGetFirstAvailableOutputOpts struct {
	ForBlock *NodeMaterialBlock
}

// GetFirstAvailableOutput calls the GetFirstAvailableOutput method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#getfirstavailableoutput
func (f *FogBlock) GetFirstAvailableOutput(opts *FogBlockGetFirstAvailableOutputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &FogBlockGetFirstAvailableOutputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForBlock == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForBlock.JSObject())
	}

	retVal := f.p.Call("getFirstAvailableOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, f.ctx)
}

// GetInputByName calls the GetInputByName method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#getinputbyname
func (f *FogBlock) GetInputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := f.p.Call("getInputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, f.ctx)
}

// GetOutputByName calls the GetOutputByName method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#getoutputbyname
func (f *FogBlock) GetOutputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := f.p.Call("getOutputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, f.ctx)
}

// GetSiblingOutput calls the GetSiblingOutput method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#getsiblingoutput
func (f *FogBlock) GetSiblingOutput(current *NodeMaterialConnectionPoint) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, current.JSObject())

	retVal := f.p.Call("getSiblingOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, f.ctx)
}

// Initialize calls the Initialize method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#initialize
func (f *FogBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	f.p.Call("initialize", args...)
}

// FogBlockInitializeDefinesOpts contains optional parameters for FogBlock.InitializeDefines.
type FogBlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#initializedefines
func (f *FogBlock) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *FogBlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &FogBlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	f.p.Call("initializeDefines", args...)
}

// FogBlockIsReadyOpts contains optional parameters for FogBlock.IsReady.
type FogBlockIsReadyOpts struct {
	UseInstances *bool
}

// IsReady calls the IsReady method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#isready
func (f *FogBlock) IsReady(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *FogBlockIsReadyOpts) bool {
	if opts == nil {
		opts = &FogBlockIsReadyOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := f.p.Call("isReady", args...)
	return retVal.Bool()
}

// PrepareDefines calls the PrepareDefines method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#preparedefines
func (f *FogBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	f.p.Call("prepareDefines", args...)
}

// ProvideFallbacks calls the ProvideFallbacks method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#providefallbacks
func (f *FogBlock) ProvideFallbacks(mesh *AbstractMesh, fallbacks *EffectFallbacks) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, fallbacks.JSObject())

	f.p.Call("provideFallbacks", args...)
}

// FogBlockRegisterInputOpts contains optional parameters for FogBlock.RegisterInput.
type FogBlockRegisterInputOpts struct {
	IsOptional *bool
	Target     js.Value
}

// RegisterInput calls the RegisterInput method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#registerinput
func (f *FogBlock) RegisterInput(name string, jsType js.Value, opts *FogBlockRegisterInputOpts) *FogBlock {
	if opts == nil {
		opts = &FogBlockRegisterInputOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, jsType)

	if opts.IsOptional == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsOptional)
	}
	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := f.p.Call("registerInput", args...)
	return FogBlockFromJSObject(retVal, f.ctx)
}

// FogBlockRegisterOutputOpts contains optional parameters for FogBlock.RegisterOutput.
type FogBlockRegisterOutputOpts struct {
	Target js.Value
}

// RegisterOutput calls the RegisterOutput method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#registeroutput
func (f *FogBlock) RegisterOutput(name string, jsType js.Value, opts *FogBlockRegisterOutputOpts) *FogBlock {
	if opts == nil {
		opts = &FogBlockRegisterOutputOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, jsType)

	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := f.p.Call("registerOutput", args...)
	return FogBlockFromJSObject(retVal, f.ctx)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#replacerepeatablecontent
func (f *FogBlock) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	f.p.Call("replaceRepeatableContent", args...)
}

// Serialize calls the Serialize method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#serialize
func (f *FogBlock) Serialize() interface{} {

	retVal := f.p.Call("serialize")
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the FogBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#updateuniformsandsamples
func (f *FogBlock) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers string) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, state.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)
	args = append(args, uniformBuffers)

	f.p.Call("updateUniformsAndSamples", args...)
}

/*

// BuildId returns the BuildId property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#buildid
func (f *FogBlock) BuildId(buildId float64) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(buildId)
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetBuildId sets the BuildId property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#buildid
func (f *FogBlock) SetBuildId(buildId float64) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(buildId)
	return FogBlockFromJSObject(p, ba.ctx)
}

// Comments returns the Comments property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#comments
func (f *FogBlock) Comments(comments string) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(comments)
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetComments sets the Comments property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#comments
func (f *FogBlock) SetComments(comments string) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(comments)
	return FogBlockFromJSObject(p, ba.ctx)
}

// FogColor returns the FogColor property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#fogcolor
func (f *FogBlock) FogColor(fogColor *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(fogColor.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetFogColor sets the FogColor property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#fogcolor
func (f *FogBlock) SetFogColor(fogColor *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(fogColor.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// Input returns the Input property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#input
func (f *FogBlock) Input(input *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(input.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetInput sets the Input property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#input
func (f *FogBlock) SetInput(input *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(input.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#inputs
func (f *FogBlock) Inputs(inputs *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(inputs.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#inputs
func (f *FogBlock) SetInputs(inputs *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(inputs.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// IsFinalMerger returns the IsFinalMerger property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#isfinalmerger
func (f *FogBlock) IsFinalMerger(isFinalMerger bool) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(isFinalMerger)
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetIsFinalMerger sets the IsFinalMerger property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#isfinalmerger
func (f *FogBlock) SetIsFinalMerger(isFinalMerger bool) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(isFinalMerger)
	return FogBlockFromJSObject(p, ba.ctx)
}

// IsInput returns the IsInput property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#isinput
func (f *FogBlock) IsInput(isInput bool) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(isInput)
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetIsInput sets the IsInput property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#isinput
func (f *FogBlock) SetIsInput(isInput bool) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(isInput)
	return FogBlockFromJSObject(p, ba.ctx)
}

// IsUnique returns the IsUnique property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#isunique
func (f *FogBlock) IsUnique(isUnique bool) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(isUnique)
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetIsUnique sets the IsUnique property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#isunique
func (f *FogBlock) SetIsUnique(isUnique bool) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(isUnique)
	return FogBlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#name
func (f *FogBlock) Name(name string) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(name)
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#name
func (f *FogBlock) SetName(name string) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(name)
	return FogBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#output
func (f *FogBlock) Output(output *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(output.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#output
func (f *FogBlock) SetOutput(output *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(output.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// Outputs returns the Outputs property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#outputs
func (f *FogBlock) Outputs(outputs *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(outputs.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetOutputs sets the Outputs property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#outputs
func (f *FogBlock) SetOutputs(outputs *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(outputs.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#target
func (f *FogBlock) Target(target js.Value) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(target)
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#target
func (f *FogBlock) SetTarget(target js.Value) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(target)
	return FogBlockFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#uniqueid
func (f *FogBlock) UniqueId(uniqueId float64) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(uniqueId)
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#uniqueid
func (f *FogBlock) SetUniqueId(uniqueId float64) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(uniqueId)
	return FogBlockFromJSObject(p, ba.ctx)
}

// View returns the View property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#view
func (f *FogBlock) View(view *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(view.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetView sets the View property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#view
func (f *FogBlock) SetView(view *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(view.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// WorldPosition returns the WorldPosition property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#worldposition
func (f *FogBlock) WorldPosition(worldPosition *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(worldPosition.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

// SetWorldPosition sets the WorldPosition property of class FogBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fogblock#worldposition
func (f *FogBlock) SetWorldPosition(worldPosition *NodeMaterialConnectionPoint) *FogBlock {
	p := ba.ctx.Get("FogBlock").New(worldPosition.JSObject())
	return FogBlockFromJSObject(p, ba.ctx)
}

*/
