// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ShapeBuilder represents a babylon.js ShapeBuilder.
// Class containing static functions to help procedurally build meshes
type ShapeBuilder struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *ShapeBuilder) JSObject() js.Value { return s.p }

// ShapeBuilder returns a ShapeBuilder JavaScript class.
func (ba *Babylon) ShapeBuilder() *ShapeBuilder {
	p := ba.ctx.Get("ShapeBuilder")
	return ShapeBuilderFromJSObject(p, ba.ctx)
}

// ShapeBuilderFromJSObject returns a wrapped ShapeBuilder JavaScript class.
func ShapeBuilderFromJSObject(p js.Value, ctx js.Value) *ShapeBuilder {
	return &ShapeBuilder{p: p, ctx: ctx}
}

// ShapeBuilderExtrudeShapeOpts contains optional parameters for ShapeBuilder.ExtrudeShape.
type ShapeBuilderExtrudeShapeOpts struct {
	Scene *Scene
}

// ExtrudeShape calls the ExtrudeShape method on the ShapeBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.shapebuilder#extrudeshape
func (s *ShapeBuilder) ExtrudeShape(name string, options js.Value, opts *ShapeBuilderExtrudeShapeOpts) *Mesh {
	if opts == nil {
		opts = &ShapeBuilderExtrudeShapeOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, options)

	if opts.Scene == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scene.JSObject())
	}

	retVal := s.p.Call("ExtrudeShape", args...)
	return MeshFromJSObject(retVal, s.ctx)
}

// ShapeBuilderExtrudeShapeCustomOpts contains optional parameters for ShapeBuilder.ExtrudeShapeCustom.
type ShapeBuilderExtrudeShapeCustomOpts struct {
	Scene *Scene
}

// ExtrudeShapeCustom calls the ExtrudeShapeCustom method on the ShapeBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.shapebuilder#extrudeshapecustom
func (s *ShapeBuilder) ExtrudeShapeCustom(name string, options js.Value, opts *ShapeBuilderExtrudeShapeCustomOpts) *Mesh {
	if opts == nil {
		opts = &ShapeBuilderExtrudeShapeCustomOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, options)

	if opts.Scene == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scene.JSObject())
	}

	retVal := s.p.Call("ExtrudeShapeCustom", args...)
	return MeshFromJSObject(retVal, s.ctx)
}

/*

 */
