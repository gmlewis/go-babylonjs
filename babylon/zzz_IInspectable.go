// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IInspectable represents a babylon.js IInspectable.
// Interface used to define custom inspectable properties.
// This interface is used by the inspector to display custom property grids
//
// See: https://doc.babylonjs.com/how_to/debug_layer#extensibility
type IInspectable struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IInspectable) JSObject() js.Value { return i.p }

// IInspectable returns a IInspectable JavaScript class.
func (ba *Babylon) IInspectable() *IInspectable {
	p := ba.ctx.Get("IInspectable")
	return IInspectableFromJSObject(p, ba.ctx)
}

// IInspectableFromJSObject returns a wrapped IInspectable JavaScript class.
func IInspectableFromJSObject(p js.Value, ctx js.Value) *IInspectable {
	return &IInspectable{p: p, ctx: ctx}
}

// IInspectableArrayToJSArray returns a JavaScript Array for the wrapped array.
func IInspectableArrayToJSArray(array []*IInspectable) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Label returns the Label property of class IInspectable.
//
// https://doc.babylonjs.com/api/classes/babylon.iinspectable#label
func (i *IInspectable) Label() string {
	retVal := i.p.Get("label")
	return retVal.String()
}

// SetLabel sets the Label property of class IInspectable.
//
// https://doc.babylonjs.com/api/classes/babylon.iinspectable#label
func (i *IInspectable) SetLabel(label string) *IInspectable {
	i.p.Set("label", label)
	return i
}

// Max returns the Max property of class IInspectable.
//
// https://doc.babylonjs.com/api/classes/babylon.iinspectable#max
func (i *IInspectable) Max() float64 {
	retVal := i.p.Get("max")
	return retVal.Float()
}

// SetMax sets the Max property of class IInspectable.
//
// https://doc.babylonjs.com/api/classes/babylon.iinspectable#max
func (i *IInspectable) SetMax(max float64) *IInspectable {
	i.p.Set("max", max)
	return i
}

// Min returns the Min property of class IInspectable.
//
// https://doc.babylonjs.com/api/classes/babylon.iinspectable#min
func (i *IInspectable) Min() float64 {
	retVal := i.p.Get("min")
	return retVal.Float()
}

// SetMin sets the Min property of class IInspectable.
//
// https://doc.babylonjs.com/api/classes/babylon.iinspectable#min
func (i *IInspectable) SetMin(min float64) *IInspectable {
	i.p.Set("min", min)
	return i
}

// PropertyName returns the PropertyName property of class IInspectable.
//
// https://doc.babylonjs.com/api/classes/babylon.iinspectable#propertyname
func (i *IInspectable) PropertyName() string {
	retVal := i.p.Get("propertyName")
	return retVal.String()
}

// SetPropertyName sets the PropertyName property of class IInspectable.
//
// https://doc.babylonjs.com/api/classes/babylon.iinspectable#propertyname
func (i *IInspectable) SetPropertyName(propertyName string) *IInspectable {
	i.p.Set("propertyName", propertyName)
	return i
}

// Step returns the Step property of class IInspectable.
//
// https://doc.babylonjs.com/api/classes/babylon.iinspectable#step
func (i *IInspectable) Step() float64 {
	retVal := i.p.Get("step")
	return retVal.Float()
}

// SetStep sets the Step property of class IInspectable.
//
// https://doc.babylonjs.com/api/classes/babylon.iinspectable#step
func (i *IInspectable) SetStep(step float64) *IInspectable {
	i.p.Set("step", step)
	return i
}

// Type returns the Type property of class IInspectable.
//
// https://doc.babylonjs.com/api/classes/babylon.iinspectable#type
func (i *IInspectable) Type() js.Value {
	retVal := i.p.Get("type")
	return retVal
}

// SetType sets the Type property of class IInspectable.
//
// https://doc.babylonjs.com/api/classes/babylon.iinspectable#type
func (i *IInspectable) SetType(jsType js.Value) *IInspectable {
	i.p.Set("type", jsType)
	return i
}
