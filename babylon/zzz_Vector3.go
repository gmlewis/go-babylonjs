// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Vector3 represents a babylon.js Vector3.
// Class used to store (x,y,z) vector representation
// A Vector3 is the main object used in 3D geometry
// It can represent etiher the coordinates of a point the space, either a direction
// Reminder: js uses a left handed forward facing system
type Vector3 struct{ p js.Value }

// JSObject returns the underlying js.Value.
func (v *Vector3) JSObject() js.Value { return v.p }

// Vector3 returns a Vector3 JavaScript class.
func (ba *Babylon) Vector3() *Vector3 {
	p := ba.ctx.Get("Vector3")
	return Vector3FromJSObject(p)
}

// Vector3FromJSObject returns a wrapped Vector3 JavaScript class.
func Vector3FromJSObject(p js.Value) *Vector3 {
	return &Vector3{p: p}
}

// NewVector3Opts contains optional parameters for NewVector3.
type NewVector3Opts struct {
	X *JSFloat64

	Y *JSFloat64

	Z *JSFloat64
}

// NewVector3 returns a new Vector3 object.
//
// https://doc.babylonjs.com/api/classes/babylon.vector3
func (ba *Babylon) NewVector3(opts *NewVector3Opts) *Vector3 {
	if opts == nil {
		opts = &NewVector3Opts{}
	}

	p := ba.ctx.Get("Vector3").New(opts.X, opts.Y, opts.Z)
	return Vector3FromJSObject(p)
}

// TODO: methods
