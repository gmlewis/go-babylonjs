// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PlaneRotationGizmo represents a babylon.js PlaneRotationGizmo.
// Single plane rotation gizmo
type PlaneRotationGizmo struct {
	*Gizmo
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PlaneRotationGizmo) JSObject() js.Value { return p.p }

// PlaneRotationGizmo returns a PlaneRotationGizmo JavaScript class.
func (ba *Babylon) PlaneRotationGizmo() *PlaneRotationGizmo {
	p := ba.ctx.Get("PlaneRotationGizmo")
	return PlaneRotationGizmoFromJSObject(p, ba.ctx)
}

// PlaneRotationGizmoFromJSObject returns a wrapped PlaneRotationGizmo JavaScript class.
func PlaneRotationGizmoFromJSObject(p js.Value, ctx js.Value) *PlaneRotationGizmo {
	return &PlaneRotationGizmo{Gizmo: GizmoFromJSObject(p, ctx), ctx: ctx}
}

// NewPlaneRotationGizmoOpts contains optional parameters for NewPlaneRotationGizmo.
type NewPlaneRotationGizmoOpts struct {
	Color *Color3

	GizmoLayer *UtilityLayerRenderer

	Tessellation *JSFloat64

	Parent *RotationGizmo

	UseEulerRotation *JSBool
}

// NewPlaneRotationGizmo returns a new PlaneRotationGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.planerotationgizmo
func (ba *Babylon) NewPlaneRotationGizmo(planeNormal *Vector3, opts *NewPlaneRotationGizmoOpts) *PlaneRotationGizmo {
	if opts == nil {
		opts = &NewPlaneRotationGizmoOpts{}
	}

	p := ba.ctx.Get("PlaneRotationGizmo").New(planeNormal.JSObject(), opts.Color.JSObject(), opts.GizmoLayer.JSObject(), opts.Tessellation.JSObject(), opts.Parent.JSObject(), opts.UseEulerRotation.JSObject())
	return PlaneRotationGizmoFromJSObject(p, ba.ctx)
}

// TODO: methods
