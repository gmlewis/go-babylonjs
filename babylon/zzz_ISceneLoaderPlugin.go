// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ISceneLoaderPlugin represents a babylon.js ISceneLoaderPlugin.
// Interface used to define a SceneLoader plugin
type ISceneLoaderPlugin struct {
	*ISceneLoaderPluginBase
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ISceneLoaderPlugin) JSObject() js.Value { return i.p }

// ISceneLoaderPlugin returns a ISceneLoaderPlugin JavaScript class.
func (ba *Babylon) ISceneLoaderPlugin() *ISceneLoaderPlugin {
	p := ba.ctx.Get("ISceneLoaderPlugin")
	return ISceneLoaderPluginFromJSObject(p, ba.ctx)
}

// ISceneLoaderPluginFromJSObject returns a wrapped ISceneLoaderPlugin JavaScript class.
func ISceneLoaderPluginFromJSObject(p js.Value, ctx js.Value) *ISceneLoaderPlugin {
	return &ISceneLoaderPlugin{ISceneLoaderPluginBase: ISceneLoaderPluginBaseFromJSObject(p, ctx), ctx: ctx}
}

// ISceneLoaderPluginArrayToJSArray returns a JavaScript Array for the wrapped array.
func ISceneLoaderPluginArrayToJSArray(array []*ISceneLoaderPlugin) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// ISceneLoaderPluginImportMeshOpts contains optional parameters for ISceneLoaderPlugin.ImportMesh.
type ISceneLoaderPluginImportMeshOpts struct {
	OnError JSFunc
}

// ImportMesh calls the ImportMesh method on the ISceneLoaderPlugin object.
//
// https://doc.babylonjs.com/api/classes/babylon.isceneloaderplugin#importmesh
func (i *ISceneLoaderPlugin) ImportMesh(meshesNames JSObject, scene *Scene, data JSObject, rootUrl string, meshes []*AbstractMesh, particleSystems []*IParticleSystem, skeletons []*Skeleton, opts *ISceneLoaderPluginImportMeshOpts) bool {
	if opts == nil {
		opts = &ISceneLoaderPluginImportMeshOpts{}
	}

	args := make([]interface{}, 0, 7+1)

	if meshesNames == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, meshesNames.JSObject())
	}

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	if data == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, data.JSObject())
	}

	args = append(args, rootUrl)

	args = append(args, AbstractMeshArrayToJSArray(meshes))

	args = append(args, IParticleSystemArrayToJSArray(particleSystems))

	args = append(args, SkeletonArrayToJSArray(skeletons))

	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(opts.OnError) /* never freed! */)
	}

	retVal := i.p.Call("importMesh", args...)
	return retVal.Bool()
}

// ISceneLoaderPluginLoadOpts contains optional parameters for ISceneLoaderPlugin.Load.
type ISceneLoaderPluginLoadOpts struct {
	OnError JSFunc
}

// Load calls the Load method on the ISceneLoaderPlugin object.
//
// https://doc.babylonjs.com/api/classes/babylon.isceneloaderplugin#load
func (i *ISceneLoaderPlugin) Load(scene *Scene, data JSObject, rootUrl string, opts *ISceneLoaderPluginLoadOpts) bool {
	if opts == nil {
		opts = &ISceneLoaderPluginLoadOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	if data == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, data.JSObject())
	}

	args = append(args, rootUrl)

	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(opts.OnError) /* never freed! */)
	}

	retVal := i.p.Call("load", args...)
	return retVal.Bool()
}

// ISceneLoaderPluginLoadAssetContainerOpts contains optional parameters for ISceneLoaderPlugin.LoadAssetContainer.
type ISceneLoaderPluginLoadAssetContainerOpts struct {
	OnError JSFunc
}

// LoadAssetContainer calls the LoadAssetContainer method on the ISceneLoaderPlugin object.
//
// https://doc.babylonjs.com/api/classes/babylon.isceneloaderplugin#loadassetcontainer
func (i *ISceneLoaderPlugin) LoadAssetContainer(scene *Scene, data JSObject, rootUrl string, opts *ISceneLoaderPluginLoadAssetContainerOpts) *AssetContainer {
	if opts == nil {
		opts = &ISceneLoaderPluginLoadAssetContainerOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	if data == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, data.JSObject())
	}

	args = append(args, rootUrl)

	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(opts.OnError) /* never freed! */)
	}

	retVal := i.p.Call("loadAssetContainer", args...)
	return AssetContainerFromJSObject(retVal, i.ctx)
}
