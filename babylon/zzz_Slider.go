// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Slider represents a babylon.js Slider.
// Class used to create slider controls
type Slider struct {
	*BaseSlider
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *Slider) JSObject() js.Value { return s.p }

// Slider returns a Slider JavaScript class.
func (ba *Babylon) Slider() *Slider {
	p := ba.ctx.Get("Slider")
	return SliderFromJSObject(p, ba.ctx)
}

// SliderFromJSObject returns a wrapped Slider JavaScript class.
func SliderFromJSObject(p js.Value, ctx js.Value) *Slider {
	return &Slider{BaseSlider: BaseSliderFromJSObject(p, ctx), ctx: ctx}
}

// SliderArrayToJSArray returns a JavaScript Array for the wrapped array.
func SliderArrayToJSArray(array []*Slider) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewSliderOpts contains optional parameters for NewSlider.
type NewSliderOpts struct {
	Name *string
}

// NewSlider returns a new Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider
func (ba *Babylon) NewSlider(opts *NewSliderOpts) *Slider {
	if opts == nil {
		opts = &NewSliderOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}

	p := ba.ctx.Get("Slider").New(args...)
	return SliderFromJSObject(p, ba.ctx)
}

// Contains calls the Contains method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#contains
func (s *Slider) Contains(x float64, y float64) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, x)
	args = append(args, y)

	retVal := s.p.Call("contains", args...)
	return retVal.Bool()
}

// Dispose calls the Dispose method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#dispose
func (s *Slider) Dispose() {

	s.p.Call("dispose")
}

// GetAscendantOfClass calls the GetAscendantOfClass method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#getascendantofclass
func (s *Slider) GetAscendantOfClass(className string) *Control {

	args := make([]interface{}, 0, 1+0)

	args = append(args, className)

	retVal := s.p.Call("getAscendantOfClass", args...)
	return ControlFromJSObject(retVal, s.ctx)
}

// GetClassName calls the GetClassName method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#getclassname
func (s *Slider) GetClassName() string {

	retVal := s.p.Call("getClassName")
	return retVal.String()
}

// SliderGetDescendantsOpts contains optional parameters for Slider.GetDescendants.
type SliderGetDescendantsOpts struct {
	DirectDescendantsOnly *bool
	Predicate             func()
}

// GetDescendants calls the GetDescendants method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#getdescendants
func (s *Slider) GetDescendants(opts *SliderGetDescendantsOpts) *Control {
	if opts == nil {
		opts = &SliderGetDescendantsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := s.p.Call("getDescendants", args...)
	return ControlFromJSObject(retVal, s.ctx)
}

// SliderGetDescendantsToRefOpts contains optional parameters for Slider.GetDescendantsToRef.
type SliderGetDescendantsToRefOpts struct {
	DirectDescendantsOnly *bool
	Predicate             func()
}

// GetDescendantsToRef calls the GetDescendantsToRef method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#getdescendantstoref
func (s *Slider) GetDescendantsToRef(results *Control, opts *SliderGetDescendantsToRefOpts) {
	if opts == nil {
		opts = &SliderGetDescendantsToRefOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, results.JSObject())

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	s.p.Call("getDescendantsToRef", args...)
}

// GetLocalCoordinates calls the GetLocalCoordinates method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#getlocalcoordinates
func (s *Slider) GetLocalCoordinates(globalCoordinates *Vector2) *Vector2 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, globalCoordinates.JSObject())

	retVal := s.p.Call("getLocalCoordinates", args...)
	return Vector2FromJSObject(retVal, s.ctx)
}

// GetLocalCoordinatesToRef calls the GetLocalCoordinatesToRef method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#getlocalcoordinatestoref
func (s *Slider) GetLocalCoordinatesToRef(globalCoordinates *Vector2, result *Vector2) *Control {

	args := make([]interface{}, 0, 2+0)

	args = append(args, globalCoordinates.JSObject())
	args = append(args, result.JSObject())

	retVal := s.p.Call("getLocalCoordinatesToRef", args...)
	return ControlFromJSObject(retVal, s.ctx)
}

// GetParentLocalCoordinates calls the GetParentLocalCoordinates method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#getparentlocalcoordinates
func (s *Slider) GetParentLocalCoordinates(globalCoordinates *Vector2) *Vector2 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, globalCoordinates.JSObject())

	retVal := s.p.Call("getParentLocalCoordinates", args...)
	return Vector2FromJSObject(retVal, s.ctx)
}

// IsAscendant calls the IsAscendant method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#isascendant
func (s *Slider) IsAscendant(container *Control) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, container.JSObject())

	retVal := s.p.Call("isAscendant", args...)
	return retVal.Bool()
}

// LinkWithMesh calls the LinkWithMesh method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#linkwithmesh
func (s *Slider) LinkWithMesh(mesh *AbstractMesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	s.p.Call("linkWithMesh", args...)
}

// MoveToVector3 calls the MoveToVector3 method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#movetovector3
func (s *Slider) MoveToVector3(position *Vector3, scene *Scene) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	s.p.Call("moveToVector3", args...)
}

// Slider_drawOpts contains optional parameters for Slider._draw.
type Slider_drawOpts struct {
	InvalidatedRectangle *Measure
}

// _draw calls the _draw method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#_draw
func (s *Slider) _draw(context js.Value, opts *Slider_drawOpts) {
	if opts == nil {
		opts = &Slider_drawOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, context)

	if opts.InvalidatedRectangle == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.InvalidatedRectangle.JSObject())
	}

	s.p.Call("_draw", args...)
}

// _onPointerDown calls the _onPointerDown method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#_onpointerdown
func (s *Slider) _onPointerDown(target *Control, coordinates *Vector2, pointerId float64, buttonIndex float64) bool {

	args := make([]interface{}, 0, 4+0)

	args = append(args, target.JSObject())
	args = append(args, coordinates.JSObject())
	args = append(args, pointerId)
	args = append(args, buttonIndex)

	retVal := s.p.Call("_onPointerDown", args...)
	return retVal.Bool()
}

// _onPointerMove calls the _onPointerMove method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#_onpointermove
func (s *Slider) _onPointerMove(target *Control, coordinates *Vector2, pointerId float64) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, target.JSObject())
	args = append(args, coordinates.JSObject())
	args = append(args, pointerId)

	s.p.Call("_onPointerMove", args...)
}

// _onPointerUp calls the _onPointerUp method on the Slider object.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#_onpointerup
func (s *Slider) _onPointerUp(target *Control, coordinates *Vector2, pointerId float64, buttonIndex float64, notifyClick bool) {

	args := make([]interface{}, 0, 5+0)

	args = append(args, target.JSObject())
	args = append(args, coordinates.JSObject())
	args = append(args, pointerId)
	args = append(args, buttonIndex)
	args = append(args, notifyClick)

	s.p.Call("_onPointerUp", args...)
}

/*

// AllowAlphaInheritance returns the AllowAlphaInheritance property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#allowalphainheritance
func (s *Slider) AllowAlphaInheritance(AllowAlphaInheritance bool) *Slider {
	p := ba.ctx.Get("Slider").New(AllowAlphaInheritance)
	return SliderFromJSObject(p, ba.ctx)
}

// SetAllowAlphaInheritance sets the AllowAlphaInheritance property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#allowalphainheritance
func (s *Slider) SetAllowAlphaInheritance(AllowAlphaInheritance bool) *Slider {
	p := ba.ctx.Get("Slider").New(AllowAlphaInheritance)
	return SliderFromJSObject(p, ba.ctx)
}

// Alpha returns the Alpha property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#alpha
func (s *Slider) Alpha(alpha float64) *Slider {
	p := ba.ctx.Get("Slider").New(alpha)
	return SliderFromJSObject(p, ba.ctx)
}

// SetAlpha sets the Alpha property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#alpha
func (s *Slider) SetAlpha(alpha float64) *Slider {
	p := ba.ctx.Get("Slider").New(alpha)
	return SliderFromJSObject(p, ba.ctx)
}

// Background returns the Background property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#background
func (s *Slider) Background(background string) *Slider {
	p := ba.ctx.Get("Slider").New(background)
	return SliderFromJSObject(p, ba.ctx)
}

// SetBackground sets the Background property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#background
func (s *Slider) SetBackground(background string) *Slider {
	p := ba.ctx.Get("Slider").New(background)
	return SliderFromJSObject(p, ba.ctx)
}

// BarOffset returns the BarOffset property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#baroffset
func (s *Slider) BarOffset(barOffset string) *Slider {
	p := ba.ctx.Get("Slider").New(barOffset)
	return SliderFromJSObject(p, ba.ctx)
}

// SetBarOffset sets the BarOffset property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#baroffset
func (s *Slider) SetBarOffset(barOffset string) *Slider {
	p := ba.ctx.Get("Slider").New(barOffset)
	return SliderFromJSObject(p, ba.ctx)
}

// BarOffsetInPixels returns the BarOffsetInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#baroffsetinpixels
func (s *Slider) BarOffsetInPixels(barOffsetInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(barOffsetInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// SetBarOffsetInPixels sets the BarOffsetInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#baroffsetinpixels
func (s *Slider) SetBarOffsetInPixels(barOffsetInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(barOffsetInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// BorderColor returns the BorderColor property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#bordercolor
func (s *Slider) BorderColor(borderColor string) *Slider {
	p := ba.ctx.Get("Slider").New(borderColor)
	return SliderFromJSObject(p, ba.ctx)
}

// SetBorderColor sets the BorderColor property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#bordercolor
func (s *Slider) SetBorderColor(borderColor string) *Slider {
	p := ba.ctx.Get("Slider").New(borderColor)
	return SliderFromJSObject(p, ba.ctx)
}

// CenterX returns the CenterX property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#centerx
func (s *Slider) CenterX(centerX float64) *Slider {
	p := ba.ctx.Get("Slider").New(centerX)
	return SliderFromJSObject(p, ba.ctx)
}

// SetCenterX sets the CenterX property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#centerx
func (s *Slider) SetCenterX(centerX float64) *Slider {
	p := ba.ctx.Get("Slider").New(centerX)
	return SliderFromJSObject(p, ba.ctx)
}

// CenterY returns the CenterY property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#centery
func (s *Slider) CenterY(centerY float64) *Slider {
	p := ba.ctx.Get("Slider").New(centerY)
	return SliderFromJSObject(p, ba.ctx)
}

// SetCenterY sets the CenterY property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#centery
func (s *Slider) SetCenterY(centerY float64) *Slider {
	p := ba.ctx.Get("Slider").New(centerY)
	return SliderFromJSObject(p, ba.ctx)
}

// ClipChildren returns the ClipChildren property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#clipchildren
func (s *Slider) ClipChildren(clipChildren bool) *Slider {
	p := ba.ctx.Get("Slider").New(clipChildren)
	return SliderFromJSObject(p, ba.ctx)
}

// SetClipChildren sets the ClipChildren property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#clipchildren
func (s *Slider) SetClipChildren(clipChildren bool) *Slider {
	p := ba.ctx.Get("Slider").New(clipChildren)
	return SliderFromJSObject(p, ba.ctx)
}

// ClipContent returns the ClipContent property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#clipcontent
func (s *Slider) ClipContent(clipContent bool) *Slider {
	p := ba.ctx.Get("Slider").New(clipContent)
	return SliderFromJSObject(p, ba.ctx)
}

// SetClipContent sets the ClipContent property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#clipcontent
func (s *Slider) SetClipContent(clipContent bool) *Slider {
	p := ba.ctx.Get("Slider").New(clipContent)
	return SliderFromJSObject(p, ba.ctx)
}

// Color returns the Color property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#color
func (s *Slider) Color(color string) *Slider {
	p := ba.ctx.Get("Slider").New(color)
	return SliderFromJSObject(p, ba.ctx)
}

// SetColor sets the Color property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#color
func (s *Slider) SetColor(color string) *Slider {
	p := ba.ctx.Get("Slider").New(color)
	return SliderFromJSObject(p, ba.ctx)
}

// DisabledColor returns the DisabledColor property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#disabledcolor
func (s *Slider) DisabledColor(disabledColor string) *Slider {
	p := ba.ctx.Get("Slider").New(disabledColor)
	return SliderFromJSObject(p, ba.ctx)
}

// SetDisabledColor sets the DisabledColor property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#disabledcolor
func (s *Slider) SetDisabledColor(disabledColor string) *Slider {
	p := ba.ctx.Get("Slider").New(disabledColor)
	return SliderFromJSObject(p, ba.ctx)
}

// DisplayThumb returns the DisplayThumb property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#displaythumb
func (s *Slider) DisplayThumb(displayThumb bool) *Slider {
	p := ba.ctx.Get("Slider").New(displayThumb)
	return SliderFromJSObject(p, ba.ctx)
}

// SetDisplayThumb sets the DisplayThumb property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#displaythumb
func (s *Slider) SetDisplayThumb(displayThumb bool) *Slider {
	p := ba.ctx.Get("Slider").New(displayThumb)
	return SliderFromJSObject(p, ba.ctx)
}

// DisplayValueBar returns the DisplayValueBar property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#displayvaluebar
func (s *Slider) DisplayValueBar(displayValueBar bool) *Slider {
	p := ba.ctx.Get("Slider").New(displayValueBar)
	return SliderFromJSObject(p, ba.ctx)
}

// SetDisplayValueBar sets the DisplayValueBar property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#displayvaluebar
func (s *Slider) SetDisplayValueBar(displayValueBar bool) *Slider {
	p := ba.ctx.Get("Slider").New(displayValueBar)
	return SliderFromJSObject(p, ba.ctx)
}

// FontFamily returns the FontFamily property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#fontfamily
func (s *Slider) FontFamily(fontFamily string) *Slider {
	p := ba.ctx.Get("Slider").New(fontFamily)
	return SliderFromJSObject(p, ba.ctx)
}

// SetFontFamily sets the FontFamily property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#fontfamily
func (s *Slider) SetFontFamily(fontFamily string) *Slider {
	p := ba.ctx.Get("Slider").New(fontFamily)
	return SliderFromJSObject(p, ba.ctx)
}

// FontOffset returns the FontOffset property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#fontoffset
func (s *Slider) FontOffset(fontOffset js.Value) *Slider {
	p := ba.ctx.Get("Slider").New(fontOffset)
	return SliderFromJSObject(p, ba.ctx)
}

// SetFontOffset sets the FontOffset property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#fontoffset
func (s *Slider) SetFontOffset(fontOffset js.Value) *Slider {
	p := ba.ctx.Get("Slider").New(fontOffset)
	return SliderFromJSObject(p, ba.ctx)
}

// FontSize returns the FontSize property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#fontsize
func (s *Slider) FontSize(fontSize string) *Slider {
	p := ba.ctx.Get("Slider").New(fontSize)
	return SliderFromJSObject(p, ba.ctx)
}

// SetFontSize sets the FontSize property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#fontsize
func (s *Slider) SetFontSize(fontSize string) *Slider {
	p := ba.ctx.Get("Slider").New(fontSize)
	return SliderFromJSObject(p, ba.ctx)
}

// FontSizeInPixels returns the FontSizeInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#fontsizeinpixels
func (s *Slider) FontSizeInPixels(fontSizeInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(fontSizeInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// SetFontSizeInPixels sets the FontSizeInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#fontsizeinpixels
func (s *Slider) SetFontSizeInPixels(fontSizeInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(fontSizeInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// FontStyle returns the FontStyle property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#fontstyle
func (s *Slider) FontStyle(fontStyle string) *Slider {
	p := ba.ctx.Get("Slider").New(fontStyle)
	return SliderFromJSObject(p, ba.ctx)
}

// SetFontStyle sets the FontStyle property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#fontstyle
func (s *Slider) SetFontStyle(fontStyle string) *Slider {
	p := ba.ctx.Get("Slider").New(fontStyle)
	return SliderFromJSObject(p, ba.ctx)
}

// FontWeight returns the FontWeight property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#fontweight
func (s *Slider) FontWeight(fontWeight string) *Slider {
	p := ba.ctx.Get("Slider").New(fontWeight)
	return SliderFromJSObject(p, ba.ctx)
}

// SetFontWeight sets the FontWeight property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#fontweight
func (s *Slider) SetFontWeight(fontWeight string) *Slider {
	p := ba.ctx.Get("Slider").New(fontWeight)
	return SliderFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_CENTER returns the HORIZONTAL_ALIGNMENT_CENTER property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#horizontal_alignment_center
func (s *Slider) HORIZONTAL_ALIGNMENT_CENTER(HORIZONTAL_ALIGNMENT_CENTER float64) *Slider {
	p := ba.ctx.Get("Slider").New(HORIZONTAL_ALIGNMENT_CENTER)
	return SliderFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_CENTER sets the HORIZONTAL_ALIGNMENT_CENTER property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#horizontal_alignment_center
func (s *Slider) SetHORIZONTAL_ALIGNMENT_CENTER(HORIZONTAL_ALIGNMENT_CENTER float64) *Slider {
	p := ba.ctx.Get("Slider").New(HORIZONTAL_ALIGNMENT_CENTER)
	return SliderFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_LEFT returns the HORIZONTAL_ALIGNMENT_LEFT property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#horizontal_alignment_left
func (s *Slider) HORIZONTAL_ALIGNMENT_LEFT(HORIZONTAL_ALIGNMENT_LEFT float64) *Slider {
	p := ba.ctx.Get("Slider").New(HORIZONTAL_ALIGNMENT_LEFT)
	return SliderFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_LEFT sets the HORIZONTAL_ALIGNMENT_LEFT property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#horizontal_alignment_left
func (s *Slider) SetHORIZONTAL_ALIGNMENT_LEFT(HORIZONTAL_ALIGNMENT_LEFT float64) *Slider {
	p := ba.ctx.Get("Slider").New(HORIZONTAL_ALIGNMENT_LEFT)
	return SliderFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_RIGHT returns the HORIZONTAL_ALIGNMENT_RIGHT property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#horizontal_alignment_right
func (s *Slider) HORIZONTAL_ALIGNMENT_RIGHT(HORIZONTAL_ALIGNMENT_RIGHT float64) *Slider {
	p := ba.ctx.Get("Slider").New(HORIZONTAL_ALIGNMENT_RIGHT)
	return SliderFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_RIGHT sets the HORIZONTAL_ALIGNMENT_RIGHT property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#horizontal_alignment_right
func (s *Slider) SetHORIZONTAL_ALIGNMENT_RIGHT(HORIZONTAL_ALIGNMENT_RIGHT float64) *Slider {
	p := ba.ctx.Get("Slider").New(HORIZONTAL_ALIGNMENT_RIGHT)
	return SliderFromJSObject(p, ba.ctx)
}

// Height returns the Height property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#height
func (s *Slider) Height(height string) *Slider {
	p := ba.ctx.Get("Slider").New(height)
	return SliderFromJSObject(p, ba.ctx)
}

// SetHeight sets the Height property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#height
func (s *Slider) SetHeight(height string) *Slider {
	p := ba.ctx.Get("Slider").New(height)
	return SliderFromJSObject(p, ba.ctx)
}

// HeightInPixels returns the HeightInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#heightinpixels
func (s *Slider) HeightInPixels(heightInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(heightInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// SetHeightInPixels sets the HeightInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#heightinpixels
func (s *Slider) SetHeightInPixels(heightInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(heightInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// HorizontalAlignment returns the HorizontalAlignment property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#horizontalalignment
func (s *Slider) HorizontalAlignment(horizontalAlignment float64) *Slider {
	p := ba.ctx.Get("Slider").New(horizontalAlignment)
	return SliderFromJSObject(p, ba.ctx)
}

// SetHorizontalAlignment sets the HorizontalAlignment property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#horizontalalignment
func (s *Slider) SetHorizontalAlignment(horizontalAlignment float64) *Slider {
	p := ba.ctx.Get("Slider").New(horizontalAlignment)
	return SliderFromJSObject(p, ba.ctx)
}

// Host returns the Host property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#host
func (s *Slider) Host(host *AdvancedDynamicTexture) *Slider {
	p := ba.ctx.Get("Slider").New(host.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// SetHost sets the Host property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#host
func (s *Slider) SetHost(host *AdvancedDynamicTexture) *Slider {
	p := ba.ctx.Get("Slider").New(host.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// HoverCursor returns the HoverCursor property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#hovercursor
func (s *Slider) HoverCursor(hoverCursor string) *Slider {
	p := ba.ctx.Get("Slider").New(hoverCursor)
	return SliderFromJSObject(p, ba.ctx)
}

// SetHoverCursor sets the HoverCursor property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#hovercursor
func (s *Slider) SetHoverCursor(hoverCursor string) *Slider {
	p := ba.ctx.Get("Slider").New(hoverCursor)
	return SliderFromJSObject(p, ba.ctx)
}

// IsDirty returns the IsDirty property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#isdirty
func (s *Slider) IsDirty(isDirty bool) *Slider {
	p := ba.ctx.Get("Slider").New(isDirty)
	return SliderFromJSObject(p, ba.ctx)
}

// SetIsDirty sets the IsDirty property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#isdirty
func (s *Slider) SetIsDirty(isDirty bool) *Slider {
	p := ba.ctx.Get("Slider").New(isDirty)
	return SliderFromJSObject(p, ba.ctx)
}

// IsEnabled returns the IsEnabled property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#isenabled
func (s *Slider) IsEnabled(isEnabled bool) *Slider {
	p := ba.ctx.Get("Slider").New(isEnabled)
	return SliderFromJSObject(p, ba.ctx)
}

// SetIsEnabled sets the IsEnabled property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#isenabled
func (s *Slider) SetIsEnabled(isEnabled bool) *Slider {
	p := ba.ctx.Get("Slider").New(isEnabled)
	return SliderFromJSObject(p, ba.ctx)
}

// IsFocusInvisible returns the IsFocusInvisible property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#isfocusinvisible
func (s *Slider) IsFocusInvisible(isFocusInvisible bool) *Slider {
	p := ba.ctx.Get("Slider").New(isFocusInvisible)
	return SliderFromJSObject(p, ba.ctx)
}

// SetIsFocusInvisible sets the IsFocusInvisible property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#isfocusinvisible
func (s *Slider) SetIsFocusInvisible(isFocusInvisible bool) *Slider {
	p := ba.ctx.Get("Slider").New(isFocusInvisible)
	return SliderFromJSObject(p, ba.ctx)
}

// IsHighlighted returns the IsHighlighted property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#ishighlighted
func (s *Slider) IsHighlighted(isHighlighted bool) *Slider {
	p := ba.ctx.Get("Slider").New(isHighlighted)
	return SliderFromJSObject(p, ba.ctx)
}

// SetIsHighlighted sets the IsHighlighted property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#ishighlighted
func (s *Slider) SetIsHighlighted(isHighlighted bool) *Slider {
	p := ba.ctx.Get("Slider").New(isHighlighted)
	return SliderFromJSObject(p, ba.ctx)
}

// IsHitTestVisible returns the IsHitTestVisible property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#ishittestvisible
func (s *Slider) IsHitTestVisible(isHitTestVisible bool) *Slider {
	p := ba.ctx.Get("Slider").New(isHitTestVisible)
	return SliderFromJSObject(p, ba.ctx)
}

// SetIsHitTestVisible sets the IsHitTestVisible property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#ishittestvisible
func (s *Slider) SetIsHitTestVisible(isHitTestVisible bool) *Slider {
	p := ba.ctx.Get("Slider").New(isHitTestVisible)
	return SliderFromJSObject(p, ba.ctx)
}

// IsPointerBlocker returns the IsPointerBlocker property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#ispointerblocker
func (s *Slider) IsPointerBlocker(isPointerBlocker bool) *Slider {
	p := ba.ctx.Get("Slider").New(isPointerBlocker)
	return SliderFromJSObject(p, ba.ctx)
}

// SetIsPointerBlocker sets the IsPointerBlocker property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#ispointerblocker
func (s *Slider) SetIsPointerBlocker(isPointerBlocker bool) *Slider {
	p := ba.ctx.Get("Slider").New(isPointerBlocker)
	return SliderFromJSObject(p, ba.ctx)
}

// IsThumbCircle returns the IsThumbCircle property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#isthumbcircle
func (s *Slider) IsThumbCircle(isThumbCircle bool) *Slider {
	p := ba.ctx.Get("Slider").New(isThumbCircle)
	return SliderFromJSObject(p, ba.ctx)
}

// SetIsThumbCircle sets the IsThumbCircle property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#isthumbcircle
func (s *Slider) SetIsThumbCircle(isThumbCircle bool) *Slider {
	p := ba.ctx.Get("Slider").New(isThumbCircle)
	return SliderFromJSObject(p, ba.ctx)
}

// IsThumbClamped returns the IsThumbClamped property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#isthumbclamped
func (s *Slider) IsThumbClamped(isThumbClamped bool) *Slider {
	p := ba.ctx.Get("Slider").New(isThumbClamped)
	return SliderFromJSObject(p, ba.ctx)
}

// SetIsThumbClamped sets the IsThumbClamped property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#isthumbclamped
func (s *Slider) SetIsThumbClamped(isThumbClamped bool) *Slider {
	p := ba.ctx.Get("Slider").New(isThumbClamped)
	return SliderFromJSObject(p, ba.ctx)
}

// IsVertical returns the IsVertical property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#isvertical
func (s *Slider) IsVertical(isVertical bool) *Slider {
	p := ba.ctx.Get("Slider").New(isVertical)
	return SliderFromJSObject(p, ba.ctx)
}

// SetIsVertical sets the IsVertical property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#isvertical
func (s *Slider) SetIsVertical(isVertical bool) *Slider {
	p := ba.ctx.Get("Slider").New(isVertical)
	return SliderFromJSObject(p, ba.ctx)
}

// IsVisible returns the IsVisible property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#isvisible
func (s *Slider) IsVisible(isVisible bool) *Slider {
	p := ba.ctx.Get("Slider").New(isVisible)
	return SliderFromJSObject(p, ba.ctx)
}

// SetIsVisible sets the IsVisible property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#isvisible
func (s *Slider) SetIsVisible(isVisible bool) *Slider {
	p := ba.ctx.Get("Slider").New(isVisible)
	return SliderFromJSObject(p, ba.ctx)
}

// Left returns the Left property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#left
func (s *Slider) Left(left string) *Slider {
	p := ba.ctx.Get("Slider").New(left)
	return SliderFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#left
func (s *Slider) SetLeft(left string) *Slider {
	p := ba.ctx.Get("Slider").New(left)
	return SliderFromJSObject(p, ba.ctx)
}

// LeftInPixels returns the LeftInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#leftinpixels
func (s *Slider) LeftInPixels(leftInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(leftInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// SetLeftInPixels sets the LeftInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#leftinpixels
func (s *Slider) SetLeftInPixels(leftInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(leftInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// LinkOffsetX returns the LinkOffsetX property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#linkoffsetx
func (s *Slider) LinkOffsetX(linkOffsetX string) *Slider {
	p := ba.ctx.Get("Slider").New(linkOffsetX)
	return SliderFromJSObject(p, ba.ctx)
}

// SetLinkOffsetX sets the LinkOffsetX property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#linkoffsetx
func (s *Slider) SetLinkOffsetX(linkOffsetX string) *Slider {
	p := ba.ctx.Get("Slider").New(linkOffsetX)
	return SliderFromJSObject(p, ba.ctx)
}

// LinkOffsetXInPixels returns the LinkOffsetXInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#linkoffsetxinpixels
func (s *Slider) LinkOffsetXInPixels(linkOffsetXInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(linkOffsetXInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// SetLinkOffsetXInPixels sets the LinkOffsetXInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#linkoffsetxinpixels
func (s *Slider) SetLinkOffsetXInPixels(linkOffsetXInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(linkOffsetXInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// LinkOffsetY returns the LinkOffsetY property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#linkoffsety
func (s *Slider) LinkOffsetY(linkOffsetY string) *Slider {
	p := ba.ctx.Get("Slider").New(linkOffsetY)
	return SliderFromJSObject(p, ba.ctx)
}

// SetLinkOffsetY sets the LinkOffsetY property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#linkoffsety
func (s *Slider) SetLinkOffsetY(linkOffsetY string) *Slider {
	p := ba.ctx.Get("Slider").New(linkOffsetY)
	return SliderFromJSObject(p, ba.ctx)
}

// LinkOffsetYInPixels returns the LinkOffsetYInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#linkoffsetyinpixels
func (s *Slider) LinkOffsetYInPixels(linkOffsetYInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(linkOffsetYInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// SetLinkOffsetYInPixels sets the LinkOffsetYInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#linkoffsetyinpixels
func (s *Slider) SetLinkOffsetYInPixels(linkOffsetYInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(linkOffsetYInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// LinkedMesh returns the LinkedMesh property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#linkedmesh
func (s *Slider) LinkedMesh(linkedMesh *AbstractMesh) *Slider {
	p := ba.ctx.Get("Slider").New(linkedMesh.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// SetLinkedMesh sets the LinkedMesh property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#linkedmesh
func (s *Slider) SetLinkedMesh(linkedMesh *AbstractMesh) *Slider {
	p := ba.ctx.Get("Slider").New(linkedMesh.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// Maximum returns the Maximum property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#maximum
func (s *Slider) Maximum(maximum float64) *Slider {
	p := ba.ctx.Get("Slider").New(maximum)
	return SliderFromJSObject(p, ba.ctx)
}

// SetMaximum sets the Maximum property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#maximum
func (s *Slider) SetMaximum(maximum float64) *Slider {
	p := ba.ctx.Get("Slider").New(maximum)
	return SliderFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#metadata
func (s *Slider) Metadata(metadata interface{}) *Slider {
	p := ba.ctx.Get("Slider").New(metadata)
	return SliderFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#metadata
func (s *Slider) SetMetadata(metadata interface{}) *Slider {
	p := ba.ctx.Get("Slider").New(metadata)
	return SliderFromJSObject(p, ba.ctx)
}

// Minimum returns the Minimum property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#minimum
func (s *Slider) Minimum(minimum float64) *Slider {
	p := ba.ctx.Get("Slider").New(minimum)
	return SliderFromJSObject(p, ba.ctx)
}

// SetMinimum sets the Minimum property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#minimum
func (s *Slider) SetMinimum(minimum float64) *Slider {
	p := ba.ctx.Get("Slider").New(minimum)
	return SliderFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#name
func (s *Slider) Name(name string) *Slider {
	p := ba.ctx.Get("Slider").New(name)
	return SliderFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#name
func (s *Slider) SetName(name string) *Slider {
	p := ba.ctx.Get("Slider").New(name)
	return SliderFromJSObject(p, ba.ctx)
}

// NotRenderable returns the NotRenderable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#notrenderable
func (s *Slider) NotRenderable(notRenderable bool) *Slider {
	p := ba.ctx.Get("Slider").New(notRenderable)
	return SliderFromJSObject(p, ba.ctx)
}

// SetNotRenderable sets the NotRenderable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#notrenderable
func (s *Slider) SetNotRenderable(notRenderable bool) *Slider {
	p := ba.ctx.Get("Slider").New(notRenderable)
	return SliderFromJSObject(p, ba.ctx)
}

// OnAfterDrawObservable returns the OnAfterDrawObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onafterdrawobservable
func (s *Slider) OnAfterDrawObservable(onAfterDrawObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onAfterDrawObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// SetOnAfterDrawObservable sets the OnAfterDrawObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onafterdrawobservable
func (s *Slider) SetOnAfterDrawObservable(onAfterDrawObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onAfterDrawObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// OnBeforeDrawObservable returns the OnBeforeDrawObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onbeforedrawobservable
func (s *Slider) OnBeforeDrawObservable(onBeforeDrawObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onBeforeDrawObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// SetOnBeforeDrawObservable sets the OnBeforeDrawObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onbeforedrawobservable
func (s *Slider) SetOnBeforeDrawObservable(onBeforeDrawObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onBeforeDrawObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// OnDirtyObservable returns the OnDirtyObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#ondirtyobservable
func (s *Slider) OnDirtyObservable(onDirtyObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onDirtyObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// SetOnDirtyObservable sets the OnDirtyObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#ondirtyobservable
func (s *Slider) SetOnDirtyObservable(onDirtyObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onDirtyObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// OnPointerClickObservable returns the OnPointerClickObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onpointerclickobservable
func (s *Slider) OnPointerClickObservable(onPointerClickObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onPointerClickObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// SetOnPointerClickObservable sets the OnPointerClickObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onpointerclickobservable
func (s *Slider) SetOnPointerClickObservable(onPointerClickObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onPointerClickObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// OnPointerDownObservable returns the OnPointerDownObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onpointerdownobservable
func (s *Slider) OnPointerDownObservable(onPointerDownObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onPointerDownObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// SetOnPointerDownObservable sets the OnPointerDownObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onpointerdownobservable
func (s *Slider) SetOnPointerDownObservable(onPointerDownObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onPointerDownObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// OnPointerEnterObservable returns the OnPointerEnterObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onpointerenterobservable
func (s *Slider) OnPointerEnterObservable(onPointerEnterObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onPointerEnterObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// SetOnPointerEnterObservable sets the OnPointerEnterObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onpointerenterobservable
func (s *Slider) SetOnPointerEnterObservable(onPointerEnterObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onPointerEnterObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// OnPointerMoveObservable returns the OnPointerMoveObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onpointermoveobservable
func (s *Slider) OnPointerMoveObservable(onPointerMoveObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onPointerMoveObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// SetOnPointerMoveObservable sets the OnPointerMoveObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onpointermoveobservable
func (s *Slider) SetOnPointerMoveObservable(onPointerMoveObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onPointerMoveObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// OnPointerOutObservable returns the OnPointerOutObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onpointeroutobservable
func (s *Slider) OnPointerOutObservable(onPointerOutObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onPointerOutObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// SetOnPointerOutObservable sets the OnPointerOutObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onpointeroutobservable
func (s *Slider) SetOnPointerOutObservable(onPointerOutObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onPointerOutObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// OnPointerUpObservable returns the OnPointerUpObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onpointerupobservable
func (s *Slider) OnPointerUpObservable(onPointerUpObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onPointerUpObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// SetOnPointerUpObservable sets the OnPointerUpObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onpointerupobservable
func (s *Slider) SetOnPointerUpObservable(onPointerUpObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onPointerUpObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// OnValueChangedObservable returns the OnValueChangedObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onvaluechangedobservable
func (s *Slider) OnValueChangedObservable(onValueChangedObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onValueChangedObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// SetOnValueChangedObservable sets the OnValueChangedObservable property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#onvaluechangedobservable
func (s *Slider) SetOnValueChangedObservable(onValueChangedObservable *Observable) *Slider {
	p := ba.ctx.Get("Slider").New(onValueChangedObservable.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// PaddingBottom returns the PaddingBottom property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingbottom
func (s *Slider) PaddingBottom(paddingBottom string) *Slider {
	p := ba.ctx.Get("Slider").New(paddingBottom)
	return SliderFromJSObject(p, ba.ctx)
}

// SetPaddingBottom sets the PaddingBottom property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingbottom
func (s *Slider) SetPaddingBottom(paddingBottom string) *Slider {
	p := ba.ctx.Get("Slider").New(paddingBottom)
	return SliderFromJSObject(p, ba.ctx)
}

// PaddingBottomInPixels returns the PaddingBottomInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingbottominpixels
func (s *Slider) PaddingBottomInPixels(paddingBottomInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(paddingBottomInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// SetPaddingBottomInPixels sets the PaddingBottomInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingbottominpixels
func (s *Slider) SetPaddingBottomInPixels(paddingBottomInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(paddingBottomInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// PaddingLeft returns the PaddingLeft property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingleft
func (s *Slider) PaddingLeft(paddingLeft string) *Slider {
	p := ba.ctx.Get("Slider").New(paddingLeft)
	return SliderFromJSObject(p, ba.ctx)
}

// SetPaddingLeft sets the PaddingLeft property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingleft
func (s *Slider) SetPaddingLeft(paddingLeft string) *Slider {
	p := ba.ctx.Get("Slider").New(paddingLeft)
	return SliderFromJSObject(p, ba.ctx)
}

// PaddingLeftInPixels returns the PaddingLeftInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingleftinpixels
func (s *Slider) PaddingLeftInPixels(paddingLeftInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(paddingLeftInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// SetPaddingLeftInPixels sets the PaddingLeftInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingleftinpixels
func (s *Slider) SetPaddingLeftInPixels(paddingLeftInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(paddingLeftInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// PaddingRight returns the PaddingRight property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingright
func (s *Slider) PaddingRight(paddingRight string) *Slider {
	p := ba.ctx.Get("Slider").New(paddingRight)
	return SliderFromJSObject(p, ba.ctx)
}

// SetPaddingRight sets the PaddingRight property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingright
func (s *Slider) SetPaddingRight(paddingRight string) *Slider {
	p := ba.ctx.Get("Slider").New(paddingRight)
	return SliderFromJSObject(p, ba.ctx)
}

// PaddingRightInPixels returns the PaddingRightInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingrightinpixels
func (s *Slider) PaddingRightInPixels(paddingRightInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(paddingRightInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// SetPaddingRightInPixels sets the PaddingRightInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingrightinpixels
func (s *Slider) SetPaddingRightInPixels(paddingRightInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(paddingRightInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// PaddingTop returns the PaddingTop property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingtop
func (s *Slider) PaddingTop(paddingTop string) *Slider {
	p := ba.ctx.Get("Slider").New(paddingTop)
	return SliderFromJSObject(p, ba.ctx)
}

// SetPaddingTop sets the PaddingTop property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingtop
func (s *Slider) SetPaddingTop(paddingTop string) *Slider {
	p := ba.ctx.Get("Slider").New(paddingTop)
	return SliderFromJSObject(p, ba.ctx)
}

// PaddingTopInPixels returns the PaddingTopInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingtopinpixels
func (s *Slider) PaddingTopInPixels(paddingTopInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(paddingTopInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// SetPaddingTopInPixels sets the PaddingTopInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#paddingtopinpixels
func (s *Slider) SetPaddingTopInPixels(paddingTopInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(paddingTopInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// Parent returns the Parent property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#parent
func (s *Slider) Parent(parent *Container) *Slider {
	p := ba.ctx.Get("Slider").New(parent.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// SetParent sets the Parent property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#parent
func (s *Slider) SetParent(parent *Container) *Slider {
	p := ba.ctx.Get("Slider").New(parent.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// Rotation returns the Rotation property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#rotation
func (s *Slider) Rotation(rotation float64) *Slider {
	p := ba.ctx.Get("Slider").New(rotation)
	return SliderFromJSObject(p, ba.ctx)
}

// SetRotation sets the Rotation property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#rotation
func (s *Slider) SetRotation(rotation float64) *Slider {
	p := ba.ctx.Get("Slider").New(rotation)
	return SliderFromJSObject(p, ba.ctx)
}

// ScaleX returns the ScaleX property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#scalex
func (s *Slider) ScaleX(scaleX float64) *Slider {
	p := ba.ctx.Get("Slider").New(scaleX)
	return SliderFromJSObject(p, ba.ctx)
}

// SetScaleX sets the ScaleX property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#scalex
func (s *Slider) SetScaleX(scaleX float64) *Slider {
	p := ba.ctx.Get("Slider").New(scaleX)
	return SliderFromJSObject(p, ba.ctx)
}

// ScaleY returns the ScaleY property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#scaley
func (s *Slider) ScaleY(scaleY float64) *Slider {
	p := ba.ctx.Get("Slider").New(scaleY)
	return SliderFromJSObject(p, ba.ctx)
}

// SetScaleY sets the ScaleY property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#scaley
func (s *Slider) SetScaleY(scaleY float64) *Slider {
	p := ba.ctx.Get("Slider").New(scaleY)
	return SliderFromJSObject(p, ba.ctx)
}

// ShadowBlur returns the ShadowBlur property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#shadowblur
func (s *Slider) ShadowBlur(shadowBlur float64) *Slider {
	p := ba.ctx.Get("Slider").New(shadowBlur)
	return SliderFromJSObject(p, ba.ctx)
}

// SetShadowBlur sets the ShadowBlur property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#shadowblur
func (s *Slider) SetShadowBlur(shadowBlur float64) *Slider {
	p := ba.ctx.Get("Slider").New(shadowBlur)
	return SliderFromJSObject(p, ba.ctx)
}

// ShadowColor returns the ShadowColor property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#shadowcolor
func (s *Slider) ShadowColor(shadowColor string) *Slider {
	p := ba.ctx.Get("Slider").New(shadowColor)
	return SliderFromJSObject(p, ba.ctx)
}

// SetShadowColor sets the ShadowColor property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#shadowcolor
func (s *Slider) SetShadowColor(shadowColor string) *Slider {
	p := ba.ctx.Get("Slider").New(shadowColor)
	return SliderFromJSObject(p, ba.ctx)
}

// ShadowOffsetX returns the ShadowOffsetX property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#shadowoffsetx
func (s *Slider) ShadowOffsetX(shadowOffsetX float64) *Slider {
	p := ba.ctx.Get("Slider").New(shadowOffsetX)
	return SliderFromJSObject(p, ba.ctx)
}

// SetShadowOffsetX sets the ShadowOffsetX property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#shadowoffsetx
func (s *Slider) SetShadowOffsetX(shadowOffsetX float64) *Slider {
	p := ba.ctx.Get("Slider").New(shadowOffsetX)
	return SliderFromJSObject(p, ba.ctx)
}

// ShadowOffsetY returns the ShadowOffsetY property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#shadowoffsety
func (s *Slider) ShadowOffsetY(shadowOffsetY float64) *Slider {
	p := ba.ctx.Get("Slider").New(shadowOffsetY)
	return SliderFromJSObject(p, ba.ctx)
}

// SetShadowOffsetY sets the ShadowOffsetY property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#shadowoffsety
func (s *Slider) SetShadowOffsetY(shadowOffsetY float64) *Slider {
	p := ba.ctx.Get("Slider").New(shadowOffsetY)
	return SliderFromJSObject(p, ba.ctx)
}

// Step returns the Step property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#step
func (s *Slider) Step(step float64) *Slider {
	p := ba.ctx.Get("Slider").New(step)
	return SliderFromJSObject(p, ba.ctx)
}

// SetStep sets the Step property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#step
func (s *Slider) SetStep(step float64) *Slider {
	p := ba.ctx.Get("Slider").New(step)
	return SliderFromJSObject(p, ba.ctx)
}

// Style returns the Style property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#style
func (s *Slider) Style(style *Style) *Slider {
	p := ba.ctx.Get("Slider").New(style.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// SetStyle sets the Style property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#style
func (s *Slider) SetStyle(style *Style) *Slider {
	p := ba.ctx.Get("Slider").New(style.JSObject())
	return SliderFromJSObject(p, ba.ctx)
}

// ThumbWidth returns the ThumbWidth property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#thumbwidth
func (s *Slider) ThumbWidth(thumbWidth string) *Slider {
	p := ba.ctx.Get("Slider").New(thumbWidth)
	return SliderFromJSObject(p, ba.ctx)
}

// SetThumbWidth sets the ThumbWidth property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#thumbwidth
func (s *Slider) SetThumbWidth(thumbWidth string) *Slider {
	p := ba.ctx.Get("Slider").New(thumbWidth)
	return SliderFromJSObject(p, ba.ctx)
}

// ThumbWidthInPixels returns the ThumbWidthInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#thumbwidthinpixels
func (s *Slider) ThumbWidthInPixels(thumbWidthInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(thumbWidthInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// SetThumbWidthInPixels sets the ThumbWidthInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#thumbwidthinpixels
func (s *Slider) SetThumbWidthInPixels(thumbWidthInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(thumbWidthInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// Top returns the Top property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#top
func (s *Slider) Top(top string) *Slider {
	p := ba.ctx.Get("Slider").New(top)
	return SliderFromJSObject(p, ba.ctx)
}

// SetTop sets the Top property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#top
func (s *Slider) SetTop(top string) *Slider {
	p := ba.ctx.Get("Slider").New(top)
	return SliderFromJSObject(p, ba.ctx)
}

// TopInPixels returns the TopInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#topinpixels
func (s *Slider) TopInPixels(topInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(topInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// SetTopInPixels sets the TopInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#topinpixels
func (s *Slider) SetTopInPixels(topInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(topInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// TransformCenterX returns the TransformCenterX property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#transformcenterx
func (s *Slider) TransformCenterX(transformCenterX float64) *Slider {
	p := ba.ctx.Get("Slider").New(transformCenterX)
	return SliderFromJSObject(p, ba.ctx)
}

// SetTransformCenterX sets the TransformCenterX property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#transformcenterx
func (s *Slider) SetTransformCenterX(transformCenterX float64) *Slider {
	p := ba.ctx.Get("Slider").New(transformCenterX)
	return SliderFromJSObject(p, ba.ctx)
}

// TransformCenterY returns the TransformCenterY property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#transformcentery
func (s *Slider) TransformCenterY(transformCenterY float64) *Slider {
	p := ba.ctx.Get("Slider").New(transformCenterY)
	return SliderFromJSObject(p, ba.ctx)
}

// SetTransformCenterY sets the TransformCenterY property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#transformcentery
func (s *Slider) SetTransformCenterY(transformCenterY float64) *Slider {
	p := ba.ctx.Get("Slider").New(transformCenterY)
	return SliderFromJSObject(p, ba.ctx)
}

// TypeName returns the TypeName property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#typename
func (s *Slider) TypeName(typeName string) *Slider {
	p := ba.ctx.Get("Slider").New(typeName)
	return SliderFromJSObject(p, ba.ctx)
}

// SetTypeName sets the TypeName property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#typename
func (s *Slider) SetTypeName(typeName string) *Slider {
	p := ba.ctx.Get("Slider").New(typeName)
	return SliderFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#uniqueid
func (s *Slider) UniqueId(uniqueId float64) *Slider {
	p := ba.ctx.Get("Slider").New(uniqueId)
	return SliderFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#uniqueid
func (s *Slider) SetUniqueId(uniqueId float64) *Slider {
	p := ba.ctx.Get("Slider").New(uniqueId)
	return SliderFromJSObject(p, ba.ctx)
}

// UseBitmapCache returns the UseBitmapCache property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#usebitmapcache
func (s *Slider) UseBitmapCache(useBitmapCache bool) *Slider {
	p := ba.ctx.Get("Slider").New(useBitmapCache)
	return SliderFromJSObject(p, ba.ctx)
}

// SetUseBitmapCache sets the UseBitmapCache property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#usebitmapcache
func (s *Slider) SetUseBitmapCache(useBitmapCache bool) *Slider {
	p := ba.ctx.Get("Slider").New(useBitmapCache)
	return SliderFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_BOTTOM returns the VERTICAL_ALIGNMENT_BOTTOM property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#vertical_alignment_bottom
func (s *Slider) VERTICAL_ALIGNMENT_BOTTOM(VERTICAL_ALIGNMENT_BOTTOM float64) *Slider {
	p := ba.ctx.Get("Slider").New(VERTICAL_ALIGNMENT_BOTTOM)
	return SliderFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_BOTTOM sets the VERTICAL_ALIGNMENT_BOTTOM property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#vertical_alignment_bottom
func (s *Slider) SetVERTICAL_ALIGNMENT_BOTTOM(VERTICAL_ALIGNMENT_BOTTOM float64) *Slider {
	p := ba.ctx.Get("Slider").New(VERTICAL_ALIGNMENT_BOTTOM)
	return SliderFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_CENTER returns the VERTICAL_ALIGNMENT_CENTER property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#vertical_alignment_center
func (s *Slider) VERTICAL_ALIGNMENT_CENTER(VERTICAL_ALIGNMENT_CENTER float64) *Slider {
	p := ba.ctx.Get("Slider").New(VERTICAL_ALIGNMENT_CENTER)
	return SliderFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_CENTER sets the VERTICAL_ALIGNMENT_CENTER property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#vertical_alignment_center
func (s *Slider) SetVERTICAL_ALIGNMENT_CENTER(VERTICAL_ALIGNMENT_CENTER float64) *Slider {
	p := ba.ctx.Get("Slider").New(VERTICAL_ALIGNMENT_CENTER)
	return SliderFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_TOP returns the VERTICAL_ALIGNMENT_TOP property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#vertical_alignment_top
func (s *Slider) VERTICAL_ALIGNMENT_TOP(VERTICAL_ALIGNMENT_TOP float64) *Slider {
	p := ba.ctx.Get("Slider").New(VERTICAL_ALIGNMENT_TOP)
	return SliderFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_TOP sets the VERTICAL_ALIGNMENT_TOP property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#vertical_alignment_top
func (s *Slider) SetVERTICAL_ALIGNMENT_TOP(VERTICAL_ALIGNMENT_TOP float64) *Slider {
	p := ba.ctx.Get("Slider").New(VERTICAL_ALIGNMENT_TOP)
	return SliderFromJSObject(p, ba.ctx)
}

// Value returns the Value property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#value
func (s *Slider) Value(value float64) *Slider {
	p := ba.ctx.Get("Slider").New(value)
	return SliderFromJSObject(p, ba.ctx)
}

// SetValue sets the Value property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#value
func (s *Slider) SetValue(value float64) *Slider {
	p := ba.ctx.Get("Slider").New(value)
	return SliderFromJSObject(p, ba.ctx)
}

// VerticalAlignment returns the VerticalAlignment property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#verticalalignment
func (s *Slider) VerticalAlignment(verticalAlignment float64) *Slider {
	p := ba.ctx.Get("Slider").New(verticalAlignment)
	return SliderFromJSObject(p, ba.ctx)
}

// SetVerticalAlignment sets the VerticalAlignment property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#verticalalignment
func (s *Slider) SetVerticalAlignment(verticalAlignment float64) *Slider {
	p := ba.ctx.Get("Slider").New(verticalAlignment)
	return SliderFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#width
func (s *Slider) Width(width string) *Slider {
	p := ba.ctx.Get("Slider").New(width)
	return SliderFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#width
func (s *Slider) SetWidth(width string) *Slider {
	p := ba.ctx.Get("Slider").New(width)
	return SliderFromJSObject(p, ba.ctx)
}

// WidthInPixels returns the WidthInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#widthinpixels
func (s *Slider) WidthInPixels(widthInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(widthInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// SetWidthInPixels sets the WidthInPixels property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#widthinpixels
func (s *Slider) SetWidthInPixels(widthInPixels float64) *Slider {
	p := ba.ctx.Get("Slider").New(widthInPixels)
	return SliderFromJSObject(p, ba.ctx)
}

// ZIndex returns the ZIndex property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#zindex
func (s *Slider) ZIndex(zIndex float64) *Slider {
	p := ba.ctx.Get("Slider").New(zIndex)
	return SliderFromJSObject(p, ba.ctx)
}

// SetZIndex sets the ZIndex property of class Slider.
//
// https://doc.babylonjs.com/api/classes/babylon.slider#zindex
func (s *Slider) SetZIndex(zIndex float64) *Slider {
	p := ba.ctx.Get("Slider").New(zIndex)
	return SliderFromJSObject(p, ba.ctx)
}

*/
