// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PanoramaToCubeMapTools represents a babylon.js PanoramaToCubeMapTools.
// Helper class useful to convert panorama picture to their cubemap representation in 6 faces.
type PanoramaToCubeMapTools struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PanoramaToCubeMapTools) JSObject() js.Value { return p.p }

// PanoramaToCubeMapTools returns a PanoramaToCubeMapTools JavaScript class.
func (ba *Babylon) PanoramaToCubeMapTools() *PanoramaToCubeMapTools {
	p := ba.ctx.Get("PanoramaToCubeMapTools")
	return PanoramaToCubeMapToolsFromJSObject(p, ba.ctx)
}

// PanoramaToCubeMapToolsFromJSObject returns a wrapped PanoramaToCubeMapTools JavaScript class.
func PanoramaToCubeMapToolsFromJSObject(p js.Value, ctx js.Value) *PanoramaToCubeMapTools {
	return &PanoramaToCubeMapTools{p: p, ctx: ctx}
}

// PanoramaToCubeMapToolsArrayToJSArray returns a JavaScript Array for the wrapped array.
func PanoramaToCubeMapToolsArrayToJSArray(array []*PanoramaToCubeMapTools) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// ConvertPanoramaToCubemap calls the ConvertPanoramaToCubemap method on the PanoramaToCubeMapTools object.
//
// https://doc.babylonjs.com/api/classes/babylon.panoramatocubemaptools#convertpanoramatocubemap
func (p *PanoramaToCubeMapTools) ConvertPanoramaToCubemap(float32Array js.Value, inputWidth float64, inputHeight float64, size float64) js.Value {

	args := make([]interface{}, 0, 4+0)

	args = append(args, float32Array)

	args = append(args, inputWidth)

	args = append(args, inputHeight)

	args = append(args, size)

	retVal := p.p.Call("ConvertPanoramaToCubemap", args...)
	return retVal
}
