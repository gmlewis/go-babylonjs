// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ISampler represents a babylon.js ISampler.
// Loader interface with additional members.
type ISampler struct {
	*ISampler
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ISampler) JSObject() js.Value { return i.p }

// ISampler returns a ISampler JavaScript class.
func (ba *Babylon) ISampler() *ISampler {
	p := ba.ctx.Get("ISampler")
	return ISamplerFromJSObject(p, ba.ctx)
}

// ISamplerFromJSObject returns a wrapped ISampler JavaScript class.
func ISamplerFromJSObject(p js.Value, ctx js.Value) *ISampler {
	return &ISampler{ISampler: ISamplerFromJSObject(p, ctx), ctx: ctx}
}

// ISamplerArrayToJSArray returns a JavaScript Array for the wrapped array.
func ISamplerArrayToJSArray(array []*ISampler) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Extensions returns the Extensions property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#extensions
func (i *ISampler) Extensions(extensions js.Value) *ISampler {
	p := ba.ctx.Get("ISampler").New(extensions)
	return ISamplerFromJSObject(p, ba.ctx)
}

// SetExtensions sets the Extensions property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#extensions
func (i *ISampler) SetExtensions(extensions js.Value) *ISampler {
	p := ba.ctx.Get("ISampler").New(extensions)
	return ISamplerFromJSObject(p, ba.ctx)
}

// Extras returns the Extras property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#extras
func (i *ISampler) Extras(extras interface{}) *ISampler {
	p := ba.ctx.Get("ISampler").New(extras)
	return ISamplerFromJSObject(p, ba.ctx)
}

// SetExtras sets the Extras property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#extras
func (i *ISampler) SetExtras(extras interface{}) *ISampler {
	p := ba.ctx.Get("ISampler").New(extras)
	return ISamplerFromJSObject(p, ba.ctx)
}

// Index returns the Index property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#index
func (i *ISampler) Index(index float64) *ISampler {
	p := ba.ctx.Get("ISampler").New(index)
	return ISamplerFromJSObject(p, ba.ctx)
}

// SetIndex sets the Index property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#index
func (i *ISampler) SetIndex(index float64) *ISampler {
	p := ba.ctx.Get("ISampler").New(index)
	return ISamplerFromJSObject(p, ba.ctx)
}

// MagFilter returns the MagFilter property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#magfilter
func (i *ISampler) MagFilter(magFilter *TextureMagFilter) *ISampler {
	p := ba.ctx.Get("ISampler").New(magFilter.JSObject())
	return ISamplerFromJSObject(p, ba.ctx)
}

// SetMagFilter sets the MagFilter property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#magfilter
func (i *ISampler) SetMagFilter(magFilter *TextureMagFilter) *ISampler {
	p := ba.ctx.Get("ISampler").New(magFilter.JSObject())
	return ISamplerFromJSObject(p, ba.ctx)
}

// MinFilter returns the MinFilter property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#minfilter
func (i *ISampler) MinFilter(minFilter *TextureMinFilter) *ISampler {
	p := ba.ctx.Get("ISampler").New(minFilter.JSObject())
	return ISamplerFromJSObject(p, ba.ctx)
}

// SetMinFilter sets the MinFilter property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#minfilter
func (i *ISampler) SetMinFilter(minFilter *TextureMinFilter) *ISampler {
	p := ba.ctx.Get("ISampler").New(minFilter.JSObject())
	return ISamplerFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#name
func (i *ISampler) Name(name string) *ISampler {
	p := ba.ctx.Get("ISampler").New(name)
	return ISamplerFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#name
func (i *ISampler) SetName(name string) *ISampler {
	p := ba.ctx.Get("ISampler").New(name)
	return ISamplerFromJSObject(p, ba.ctx)
}

// WrapS returns the WrapS property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#wraps
func (i *ISampler) WrapS(wrapS *TextureWrapMode) *ISampler {
	p := ba.ctx.Get("ISampler").New(wrapS.JSObject())
	return ISamplerFromJSObject(p, ba.ctx)
}

// SetWrapS sets the WrapS property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#wraps
func (i *ISampler) SetWrapS(wrapS *TextureWrapMode) *ISampler {
	p := ba.ctx.Get("ISampler").New(wrapS.JSObject())
	return ISamplerFromJSObject(p, ba.ctx)
}

// WrapT returns the WrapT property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#wrapt
func (i *ISampler) WrapT(wrapT *TextureWrapMode) *ISampler {
	p := ba.ctx.Get("ISampler").New(wrapT.JSObject())
	return ISamplerFromJSObject(p, ba.ctx)
}

// SetWrapT sets the WrapT property of class ISampler.
//
// https://doc.babylonjs.com/api/classes/babylon.isampler#wrapt
func (i *ISampler) SetWrapT(wrapT *TextureWrapMode) *ISampler {
	p := ba.ctx.Get("ISampler").New(wrapT.JSObject())
	return ISamplerFromJSObject(p, ba.ctx)
}

*/
