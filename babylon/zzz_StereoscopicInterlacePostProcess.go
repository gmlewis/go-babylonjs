// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// StereoscopicInterlacePostProcess represents a babylon.js StereoscopicInterlacePostProcess.
// StereoscopicInterlacePostProcess used to render stereo views from a rigged camera
type StereoscopicInterlacePostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *StereoscopicInterlacePostProcess) JSObject() js.Value { return s.p }

// StereoscopicInterlacePostProcess returns a StereoscopicInterlacePostProcess JavaScript class.
func (ba *Babylon) StereoscopicInterlacePostProcess() *StereoscopicInterlacePostProcess {
	p := ba.ctx.Get("StereoscopicInterlacePostProcess")
	return StereoscopicInterlacePostProcessFromJSObject(p, ba.ctx)
}

// StereoscopicInterlacePostProcessFromJSObject returns a wrapped StereoscopicInterlacePostProcess JavaScript class.
func StereoscopicInterlacePostProcessFromJSObject(p js.Value, ctx js.Value) *StereoscopicInterlacePostProcess {
	return &StereoscopicInterlacePostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// NewStereoscopicInterlacePostProcessOpts contains optional parameters for NewStereoscopicInterlacePostProcess.
type NewStereoscopicInterlacePostProcessOpts struct {
	SamplingMode *JSFloat64

	Engine *Engine

	Reusable *JSBool
}

// NewStereoscopicInterlacePostProcess returns a new StereoscopicInterlacePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.stereoscopicinterlacepostprocess
func (ba *Babylon) NewStereoscopicInterlacePostProcess(name string, rigCameras *Camera, isStereoscopicHoriz bool, opts *NewStereoscopicInterlacePostProcessOpts) *StereoscopicInterlacePostProcess {
	if opts == nil {
		opts = &NewStereoscopicInterlacePostProcessOpts{}
	}

	p := ba.ctx.Get("StereoscopicInterlacePostProcess").New(name, rigCameras.JSObject(), isStereoscopicHoriz, opts.SamplingMode.JSObject(), opts.Engine.JSObject(), opts.Reusable.JSObject())
	return StereoscopicInterlacePostProcessFromJSObject(p, ba.ctx)
}

// TODO: methods
