// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DynamicTexture represents a babylon.js DynamicTexture.
// A class extending Texture allowing drawing on a texture
//
// See: http://doc.babylonjs.com/how_to/dynamictexture
type DynamicTexture struct{ *Texture }

// JSObject returns the underlying js.Value.
func (d *DynamicTexture) JSObject() js.Value { return d.p }

// DynamicTexture returns a DynamicTexture JavaScript class.
func (ba *Babylon) DynamicTexture() *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture")
	return DynamicTextureFromJSObject(p)
}

// DynamicTextureFromJSObject returns a wrapped DynamicTexture JavaScript class.
func DynamicTextureFromJSObject(p js.Value) *DynamicTexture {
	return &DynamicTexture{TextureFromJSObject(p)}
}

// NewDynamicTextureOpts contains optional parameters for NewDynamicTexture.
type NewDynamicTextureOpts struct {
	SamplingMode *JSFloat64

	Format *JSFloat64
}

// NewDynamicTexture returns a new DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture
func (ba *Babylon) NewDynamicTexture(name string, options interface{}, scene *Scene, generateMipMaps bool, opts *NewDynamicTextureOpts) *DynamicTexture {
	if opts == nil {
		opts = &NewDynamicTextureOpts{}
	}

	p := ba.ctx.Get("DynamicTexture").New(name, options, scene.JSObject(), generateMipMaps, opts.SamplingMode.JSObject(), opts.Format.JSObject())
	return DynamicTextureFromJSObject(p)
}

// TODO: methods
