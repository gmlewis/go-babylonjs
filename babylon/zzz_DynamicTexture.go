// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DynamicTexture represents a babylon.js DynamicTexture.
// A class extending Texture allowing drawing on a texture
//
// See: http://doc.babylonjs.com/how_to/dynamictexture
type DynamicTexture struct {
	*Texture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DynamicTexture) JSObject() js.Value { return d.p }

// DynamicTexture returns a DynamicTexture JavaScript class.
func (ba *Babylon) DynamicTexture() *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture")
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// DynamicTextureFromJSObject returns a wrapped DynamicTexture JavaScript class.
func DynamicTextureFromJSObject(p js.Value, ctx js.Value) *DynamicTexture {
	return &DynamicTexture{Texture: TextureFromJSObject(p, ctx), ctx: ctx}
}

// NewDynamicTextureOpts contains optional parameters for NewDynamicTexture.
type NewDynamicTextureOpts struct {
	SamplingMode *float64
	Format       *float64
}

// NewDynamicTexture returns a new DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture
func (ba *Babylon) NewDynamicTexture(name string, options interface{}, scene *Scene, generateMipMaps bool, opts *NewDynamicTextureOpts) *DynamicTexture {
	if opts == nil {
		opts = &NewDynamicTextureOpts{}
	}

	args := make([]interface{}, 0, 4+2)

	args = append(args, name)
	args = append(args, options)
	args = append(args, scene.JSObject())
	args = append(args, generateMipMaps)

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Format == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Format)
	}

	p := ba.ctx.Get("DynamicTexture").New(args...)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// Clear calls the Clear method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#clear
func (d *DynamicTexture) Clear() {

	args := make([]interface{}, 0, 0+0)

	d.p.Call("clear", args...)
}

// Clone calls the Clone method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#clone
func (d *DynamicTexture) Clone() *DynamicTexture {

	args := make([]interface{}, 0, 0+0)

	retVal := d.p.Call("clone", args...)
	return DynamicTextureFromJSObject(retVal, d.ctx)
}

// DynamicTextureCreateFromBase64StringOpts contains optional parameters for DynamicTexture.CreateFromBase64String.
type DynamicTextureCreateFromBase64StringOpts struct {
	NoMipmap     *bool
	InvertY      *bool
	SamplingMode *float64
	OnLoad       *func()
	OnError      *func()
	Format       *float64
}

// CreateFromBase64String calls the CreateFromBase64String method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#createfrombase64string
func (d *DynamicTexture) CreateFromBase64String(data string, name string, scene *Scene, opts *DynamicTextureCreateFromBase64StringOpts) *Texture {
	if opts == nil {
		opts = &DynamicTextureCreateFromBase64StringOpts{}
	}

	args := make([]interface{}, 0, 3+6)

	args = append(args, data)
	args = append(args, name)
	args = append(args, scene.JSObject())

	if opts.NoMipmap == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoMipmap)
	}
	if opts.InvertY == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.InvertY)
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.OnLoad == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnLoad)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}
	if opts.Format == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Format)
	}

	retVal := d.p.Call("CreateFromBase64String", args...)
	return TextureFromJSObject(retVal, d.ctx)
}

// Dispose calls the Dispose method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#dispose
func (d *DynamicTexture) Dispose() {

	args := make([]interface{}, 0, 0+0)

	d.p.Call("dispose", args...)
}

// DynamicTextureDrawTextOpts contains optional parameters for DynamicTexture.DrawText.
type DynamicTextureDrawTextOpts struct {
	InvertY *bool
	Update  *bool
}

// DrawText calls the DrawText method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#drawtext
func (d *DynamicTexture) DrawText(text string, x float64, y float64, font string, color string, clearColor string, opts *DynamicTextureDrawTextOpts) {
	if opts == nil {
		opts = &DynamicTextureDrawTextOpts{}
	}

	args := make([]interface{}, 0, 6+2)

	args = append(args, text)
	args = append(args, x)
	args = append(args, y)
	args = append(args, font)
	args = append(args, color)
	args = append(args, clearColor)

	if opts.InvertY == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.InvertY)
	}
	if opts.Update == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Update)
	}

	d.p.Call("drawText", args...)
}

// GetBaseSize calls the GetBaseSize method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#getbasesize
func (d *DynamicTexture) GetBaseSize() js.Value {

	args := make([]interface{}, 0, 0+0)

	retVal := d.p.Call("getBaseSize", args...)
	return retVal
}

// GetClassName calls the GetClassName method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#getclassname
func (d *DynamicTexture) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := d.p.Call("getClassName", args...)
	return retVal.String()
}

// GetContext calls the GetContext method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#getcontext
func (d *DynamicTexture) GetContext() js.Value {

	args := make([]interface{}, 0, 0+0)

	retVal := d.p.Call("getContext", args...)
	return retVal
}

// GetInternalTexture calls the GetInternalTexture method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#getinternaltexture
func (d *DynamicTexture) GetInternalTexture() *InternalTexture {

	args := make([]interface{}, 0, 0+0)

	retVal := d.p.Call("getInternalTexture", args...)
	return InternalTextureFromJSObject(retVal, d.ctx)
}

// GetReflectionTextureMatrix calls the GetReflectionTextureMatrix method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#getreflectiontexturematrix
func (d *DynamicTexture) GetReflectionTextureMatrix() *Matrix {

	args := make([]interface{}, 0, 0+0)

	retVal := d.p.Call("getReflectionTextureMatrix", args...)
	return MatrixFromJSObject(retVal, d.ctx)
}

// GetScene calls the GetScene method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#getscene
func (d *DynamicTexture) GetScene() *Scene {

	args := make([]interface{}, 0, 0+0)

	retVal := d.p.Call("getScene", args...)
	return SceneFromJSObject(retVal, d.ctx)
}

// GetSize calls the GetSize method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#getsize
func (d *DynamicTexture) GetSize() js.Value {

	args := make([]interface{}, 0, 0+0)

	retVal := d.p.Call("getSize", args...)
	return retVal
}

// DynamicTextureGetTextureMatrixOpts contains optional parameters for DynamicTexture.GetTextureMatrix.
type DynamicTextureGetTextureMatrixOpts struct {
	UBase *float64
}

// GetTextureMatrix calls the GetTextureMatrix method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#gettexturematrix
func (d *DynamicTexture) GetTextureMatrix(opts *DynamicTextureGetTextureMatrixOpts) *Matrix {
	if opts == nil {
		opts = &DynamicTextureGetTextureMatrixOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.UBase == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UBase)
	}

	retVal := d.p.Call("getTextureMatrix", args...)
	return MatrixFromJSObject(retVal, d.ctx)
}

// IsReady calls the IsReady method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#isready
func (d *DynamicTexture) IsReady() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := d.p.Call("isReady", args...)
	return retVal.Bool()
}

// IsReadyOrNotBlocking calls the IsReadyOrNotBlocking method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#isreadyornotblocking
func (d *DynamicTexture) IsReadyOrNotBlocking() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := d.p.Call("isReadyOrNotBlocking", args...)
	return retVal.Bool()
}

// DynamicTextureLoadFromDataStringOpts contains optional parameters for DynamicTexture.LoadFromDataString.
type DynamicTextureLoadFromDataStringOpts struct {
	DeleteBuffer *bool
	NoMipmap     *bool
	InvertY      *bool
	SamplingMode *float64
	OnLoad       *func()
	OnError      *func()
	Format       *float64
}

// LoadFromDataString calls the LoadFromDataString method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#loadfromdatastring
func (d *DynamicTexture) LoadFromDataString(name string, buffer interface{}, scene *Scene, opts *DynamicTextureLoadFromDataStringOpts) *Texture {
	if opts == nil {
		opts = &DynamicTextureLoadFromDataStringOpts{}
	}

	args := make([]interface{}, 0, 3+7)

	args = append(args, name)
	args = append(args, buffer)
	args = append(args, scene.JSObject())

	if opts.DeleteBuffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DeleteBuffer)
	}
	if opts.NoMipmap == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoMipmap)
	}
	if opts.InvertY == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.InvertY)
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.OnLoad == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnLoad)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}
	if opts.Format == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Format)
	}

	retVal := d.p.Call("LoadFromDataString", args...)
	return TextureFromJSObject(retVal, d.ctx)
}

// Parse calls the Parse method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#parse
func (d *DynamicTexture) Parse(parsedTexture interface{}, scene *Scene, rootUrl string) *BaseTexture {

	args := make([]interface{}, 0, 3+0)

	args = append(args, parsedTexture)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := d.p.Call("Parse", args...)
	return BaseTextureFromJSObject(retVal, d.ctx)
}

// DynamicTextureReadPixelsOpts contains optional parameters for DynamicTexture.ReadPixels.
type DynamicTextureReadPixelsOpts struct {
	FaceIndex *float64
	Level     *float64
	Buffer    js.Value
}

// ReadPixels calls the ReadPixels method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#readpixels
func (d *DynamicTexture) ReadPixels(opts *DynamicTextureReadPixelsOpts) js.Value {
	if opts == nil {
		opts = &DynamicTextureReadPixelsOpts{}
	}

	args := make([]interface{}, 0, 0+3)

	if opts.FaceIndex == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FaceIndex)
	}
	if opts.Level == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Level)
	}
	if opts.Buffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Buffer)
	}

	retVal := d.p.Call("readPixels", args...)
	return retVal
}

// ReleaseInternalTexture calls the ReleaseInternalTexture method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#releaseinternaltexture
func (d *DynamicTexture) ReleaseInternalTexture() {

	args := make([]interface{}, 0, 0+0)

	d.p.Call("releaseInternalTexture", args...)
}

// Scale calls the Scale method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#scale
func (d *DynamicTexture) Scale(ratio float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, ratio)

	d.p.Call("scale", args...)
}

// ScaleTo calls the ScaleTo method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#scaleto
func (d *DynamicTexture) ScaleTo(width float64, height float64) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, width)
	args = append(args, height)

	d.p.Call("scaleTo", args...)
}

// Serialize calls the Serialize method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#serialize
func (d *DynamicTexture) Serialize() interface{} {

	args := make([]interface{}, 0, 0+0)

	retVal := d.p.Call("serialize", args...)
	return retVal
}

// ToString calls the ToString method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#tostring
func (d *DynamicTexture) ToString() string {

	args := make([]interface{}, 0, 0+0)

	retVal := d.p.Call("toString", args...)
	return retVal.String()
}

// DynamicTextureUpdateOpts contains optional parameters for DynamicTexture.Update.
type DynamicTextureUpdateOpts struct {
	InvertY     *bool
	PremulAlpha *bool
}

// Update calls the Update method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#update
func (d *DynamicTexture) Update(opts *DynamicTextureUpdateOpts) {
	if opts == nil {
		opts = &DynamicTextureUpdateOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.InvertY == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.InvertY)
	}
	if opts.PremulAlpha == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.PremulAlpha)
	}

	d.p.Call("update", args...)
}

// UpdateSamplingMode calls the UpdateSamplingMode method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#updatesamplingmode
func (d *DynamicTexture) UpdateSamplingMode(samplingMode float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, samplingMode)

	d.p.Call("updateSamplingMode", args...)
}

// DynamicTextureUpdateURLOpts contains optional parameters for DynamicTexture.UpdateURL.
type DynamicTextureUpdateURLOpts struct {
	Buffer *string
	OnLoad *func()
}

// UpdateURL calls the UpdateURL method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#updateurl
func (d *DynamicTexture) UpdateURL(url string, opts *DynamicTextureUpdateURLOpts) {
	if opts == nil {
		opts = &DynamicTextureUpdateURLOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, url)

	if opts.Buffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Buffer)
	}
	if opts.OnLoad == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnLoad)
	}

	d.p.Call("updateURL", args...)
}

// WhenAllReady calls the WhenAllReady method on the DynamicTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#whenallready
func (d *DynamicTexture) WhenAllReady(textures *BaseTexture, callback func()) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, textures.JSObject())
	args = append(args, callback)

	d.p.Call("WhenAllReady", args...)
}

/*

// Animations returns the Animations property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#animations
func (d *DynamicTexture) Animations(animations *Animation) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(animations.JSObject())
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#animations
func (d *DynamicTexture) SetAnimations(animations *Animation) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(animations.JSObject())
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// AnisotropicFilteringLevel returns the AnisotropicFilteringLevel property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#anisotropicfilteringlevel
func (d *DynamicTexture) AnisotropicFilteringLevel(anisotropicFilteringLevel float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(anisotropicFilteringLevel)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetAnisotropicFilteringLevel sets the AnisotropicFilteringLevel property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#anisotropicfilteringlevel
func (d *DynamicTexture) SetAnisotropicFilteringLevel(anisotropicFilteringLevel float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(anisotropicFilteringLevel)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// BILINEAR_SAMPLINGMODE returns the BILINEAR_SAMPLINGMODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#bilinear_samplingmode
func (d *DynamicTexture) BILINEAR_SAMPLINGMODE(BILINEAR_SAMPLINGMODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(BILINEAR_SAMPLINGMODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetBILINEAR_SAMPLINGMODE sets the BILINEAR_SAMPLINGMODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#bilinear_samplingmode
func (d *DynamicTexture) SetBILINEAR_SAMPLINGMODE(BILINEAR_SAMPLINGMODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(BILINEAR_SAMPLINGMODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// CLAMP_ADDRESSMODE returns the CLAMP_ADDRESSMODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#clamp_addressmode
func (d *DynamicTexture) CLAMP_ADDRESSMODE(CLAMP_ADDRESSMODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(CLAMP_ADDRESSMODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetCLAMP_ADDRESSMODE sets the CLAMP_ADDRESSMODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#clamp_addressmode
func (d *DynamicTexture) SetCLAMP_ADDRESSMODE(CLAMP_ADDRESSMODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(CLAMP_ADDRESSMODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// CUBIC_MODE returns the CUBIC_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#cubic_mode
func (d *DynamicTexture) CUBIC_MODE(CUBIC_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(CUBIC_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetCUBIC_MODE sets the CUBIC_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#cubic_mode
func (d *DynamicTexture) SetCUBIC_MODE(CUBIC_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(CUBIC_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// CanRescale returns the CanRescale property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#canrescale
func (d *DynamicTexture) CanRescale(canRescale bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(canRescale)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetCanRescale sets the CanRescale property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#canrescale
func (d *DynamicTexture) SetCanRescale(canRescale bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(canRescale)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// CoordinatesIndex returns the CoordinatesIndex property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#coordinatesindex
func (d *DynamicTexture) CoordinatesIndex(coordinatesIndex float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(coordinatesIndex)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetCoordinatesIndex sets the CoordinatesIndex property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#coordinatesindex
func (d *DynamicTexture) SetCoordinatesIndex(coordinatesIndex float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(coordinatesIndex)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// CoordinatesMode returns the CoordinatesMode property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#coordinatesmode
func (d *DynamicTexture) CoordinatesMode(coordinatesMode float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(coordinatesMode)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetCoordinatesMode sets the CoordinatesMode property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#coordinatesmode
func (d *DynamicTexture) SetCoordinatesMode(coordinatesMode float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(coordinatesMode)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// DEFAULT_ANISOTROPIC_FILTERING_LEVEL returns the DEFAULT_ANISOTROPIC_FILTERING_LEVEL property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#default_anisotropic_filtering_level
func (d *DynamicTexture) DEFAULT_ANISOTROPIC_FILTERING_LEVEL(DEFAULT_ANISOTROPIC_FILTERING_LEVEL float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(DEFAULT_ANISOTROPIC_FILTERING_LEVEL)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetDEFAULT_ANISOTROPIC_FILTERING_LEVEL sets the DEFAULT_ANISOTROPIC_FILTERING_LEVEL property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#default_anisotropic_filtering_level
func (d *DynamicTexture) SetDEFAULT_ANISOTROPIC_FILTERING_LEVEL(DEFAULT_ANISOTROPIC_FILTERING_LEVEL float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(DEFAULT_ANISOTROPIC_FILTERING_LEVEL)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// DelayLoadState returns the DelayLoadState property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#delayloadstate
func (d *DynamicTexture) DelayLoadState(delayLoadState float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(delayLoadState)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetDelayLoadState sets the DelayLoadState property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#delayloadstate
func (d *DynamicTexture) SetDelayLoadState(delayLoadState float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(delayLoadState)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// EQUIRECTANGULAR_MODE returns the EQUIRECTANGULAR_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#equirectangular_mode
func (d *DynamicTexture) EQUIRECTANGULAR_MODE(EQUIRECTANGULAR_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(EQUIRECTANGULAR_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetEQUIRECTANGULAR_MODE sets the EQUIRECTANGULAR_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#equirectangular_mode
func (d *DynamicTexture) SetEQUIRECTANGULAR_MODE(EQUIRECTANGULAR_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(EQUIRECTANGULAR_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// EXPLICIT_MODE returns the EXPLICIT_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#explicit_mode
func (d *DynamicTexture) EXPLICIT_MODE(EXPLICIT_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(EXPLICIT_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetEXPLICIT_MODE sets the EXPLICIT_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#explicit_mode
func (d *DynamicTexture) SetEXPLICIT_MODE(EXPLICIT_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(EXPLICIT_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// FIXED_EQUIRECTANGULAR_MIRRORED_MODE returns the FIXED_EQUIRECTANGULAR_MIRRORED_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#fixed_equirectangular_mirrored_mode
func (d *DynamicTexture) FIXED_EQUIRECTANGULAR_MIRRORED_MODE(FIXED_EQUIRECTANGULAR_MIRRORED_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(FIXED_EQUIRECTANGULAR_MIRRORED_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetFIXED_EQUIRECTANGULAR_MIRRORED_MODE sets the FIXED_EQUIRECTANGULAR_MIRRORED_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#fixed_equirectangular_mirrored_mode
func (d *DynamicTexture) SetFIXED_EQUIRECTANGULAR_MIRRORED_MODE(FIXED_EQUIRECTANGULAR_MIRRORED_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(FIXED_EQUIRECTANGULAR_MIRRORED_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// FIXED_EQUIRECTANGULAR_MODE returns the FIXED_EQUIRECTANGULAR_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#fixed_equirectangular_mode
func (d *DynamicTexture) FIXED_EQUIRECTANGULAR_MODE(FIXED_EQUIRECTANGULAR_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(FIXED_EQUIRECTANGULAR_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetFIXED_EQUIRECTANGULAR_MODE sets the FIXED_EQUIRECTANGULAR_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#fixed_equirectangular_mode
func (d *DynamicTexture) SetFIXED_EQUIRECTANGULAR_MODE(FIXED_EQUIRECTANGULAR_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(FIXED_EQUIRECTANGULAR_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// GammaSpace returns the GammaSpace property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#gammaspace
func (d *DynamicTexture) GammaSpace(gammaSpace bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(gammaSpace)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetGammaSpace sets the GammaSpace property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#gammaspace
func (d *DynamicTexture) SetGammaSpace(gammaSpace bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(gammaSpace)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// GetAlphaFromRGB returns the GetAlphaFromRGB property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#getalphafromrgb
func (d *DynamicTexture) GetAlphaFromRGB(getAlphaFromRGB bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(getAlphaFromRGB)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetGetAlphaFromRGB sets the GetAlphaFromRGB property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#getalphafromrgb
func (d *DynamicTexture) SetGetAlphaFromRGB(getAlphaFromRGB bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(getAlphaFromRGB)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// HasAlpha returns the HasAlpha property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#hasalpha
func (d *DynamicTexture) HasAlpha(hasAlpha bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(hasAlpha)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetHasAlpha sets the HasAlpha property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#hasalpha
func (d *DynamicTexture) SetHasAlpha(hasAlpha bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(hasAlpha)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// INVCUBIC_MODE returns the INVCUBIC_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#invcubic_mode
func (d *DynamicTexture) INVCUBIC_MODE(INVCUBIC_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(INVCUBIC_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetINVCUBIC_MODE sets the INVCUBIC_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#invcubic_mode
func (d *DynamicTexture) SetINVCUBIC_MODE(INVCUBIC_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(INVCUBIC_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#inspectablecustomproperties
func (d *DynamicTexture) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(inspectableCustomProperties.JSObject())
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#inspectablecustomproperties
func (d *DynamicTexture) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(inspectableCustomProperties.JSObject())
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// InvertY returns the InvertY property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#inverty
func (d *DynamicTexture) InvertY(invertY bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(invertY)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetInvertY sets the InvertY property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#inverty
func (d *DynamicTexture) SetInvertY(invertY bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(invertY)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// InvertZ returns the InvertZ property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#invertz
func (d *DynamicTexture) InvertZ(invertZ bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(invertZ)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetInvertZ sets the InvertZ property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#invertz
func (d *DynamicTexture) SetInvertZ(invertZ bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(invertZ)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// IrradianceTexture returns the IrradianceTexture property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#irradiancetexture
func (d *DynamicTexture) IrradianceTexture(irradianceTexture *BaseTexture) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(irradianceTexture.JSObject())
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetIrradianceTexture sets the IrradianceTexture property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#irradiancetexture
func (d *DynamicTexture) SetIrradianceTexture(irradianceTexture *BaseTexture) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(irradianceTexture.JSObject())
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// Is2DArray returns the Is2DArray property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#is2darray
func (d *DynamicTexture) Is2DArray(is2DArray bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(is2DArray)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetIs2DArray sets the Is2DArray property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#is2darray
func (d *DynamicTexture) SetIs2DArray(is2DArray bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(is2DArray)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// Is3D returns the Is3D property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#is3d
func (d *DynamicTexture) Is3D(is3D bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(is3D)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetIs3D sets the Is3D property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#is3d
func (d *DynamicTexture) SetIs3D(is3D bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(is3D)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// IsBlocking returns the IsBlocking property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#isblocking
func (d *DynamicTexture) IsBlocking(isBlocking bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(isBlocking)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetIsBlocking sets the IsBlocking property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#isblocking
func (d *DynamicTexture) SetIsBlocking(isBlocking bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(isBlocking)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// IsCube returns the IsCube property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#iscube
func (d *DynamicTexture) IsCube(isCube bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(isCube)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetIsCube sets the IsCube property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#iscube
func (d *DynamicTexture) SetIsCube(isCube bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(isCube)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// IsRGBD returns the IsRGBD property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#isrgbd
func (d *DynamicTexture) IsRGBD(isRGBD bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(isRGBD)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetIsRGBD sets the IsRGBD property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#isrgbd
func (d *DynamicTexture) SetIsRGBD(isRGBD bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(isRGBD)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// IsRenderTarget returns the IsRenderTarget property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#isrendertarget
func (d *DynamicTexture) IsRenderTarget(isRenderTarget bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(isRenderTarget)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetIsRenderTarget sets the IsRenderTarget property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#isrendertarget
func (d *DynamicTexture) SetIsRenderTarget(isRenderTarget bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(isRenderTarget)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// LINEAR_LINEAR returns the LINEAR_LINEAR property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#linear_linear
func (d *DynamicTexture) LINEAR_LINEAR(LINEAR_LINEAR float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(LINEAR_LINEAR)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_LINEAR sets the LINEAR_LINEAR property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#linear_linear
func (d *DynamicTexture) SetLINEAR_LINEAR(LINEAR_LINEAR float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(LINEAR_LINEAR)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// LINEAR_LINEAR_MIPLINEAR returns the LINEAR_LINEAR_MIPLINEAR property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#linear_linear_miplinear
func (d *DynamicTexture) LINEAR_LINEAR_MIPLINEAR(LINEAR_LINEAR_MIPLINEAR float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(LINEAR_LINEAR_MIPLINEAR)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_LINEAR_MIPLINEAR sets the LINEAR_LINEAR_MIPLINEAR property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#linear_linear_miplinear
func (d *DynamicTexture) SetLINEAR_LINEAR_MIPLINEAR(LINEAR_LINEAR_MIPLINEAR float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(LINEAR_LINEAR_MIPLINEAR)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// LINEAR_LINEAR_MIPNEAREST returns the LINEAR_LINEAR_MIPNEAREST property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#linear_linear_mipnearest
func (d *DynamicTexture) LINEAR_LINEAR_MIPNEAREST(LINEAR_LINEAR_MIPNEAREST float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(LINEAR_LINEAR_MIPNEAREST)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_LINEAR_MIPNEAREST sets the LINEAR_LINEAR_MIPNEAREST property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#linear_linear_mipnearest
func (d *DynamicTexture) SetLINEAR_LINEAR_MIPNEAREST(LINEAR_LINEAR_MIPNEAREST float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(LINEAR_LINEAR_MIPNEAREST)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// LINEAR_NEAREST returns the LINEAR_NEAREST property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#linear_nearest
func (d *DynamicTexture) LINEAR_NEAREST(LINEAR_NEAREST float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(LINEAR_NEAREST)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_NEAREST sets the LINEAR_NEAREST property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#linear_nearest
func (d *DynamicTexture) SetLINEAR_NEAREST(LINEAR_NEAREST float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(LINEAR_NEAREST)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// LINEAR_NEAREST_MIPLINEAR returns the LINEAR_NEAREST_MIPLINEAR property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#linear_nearest_miplinear
func (d *DynamicTexture) LINEAR_NEAREST_MIPLINEAR(LINEAR_NEAREST_MIPLINEAR float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(LINEAR_NEAREST_MIPLINEAR)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_NEAREST_MIPLINEAR sets the LINEAR_NEAREST_MIPLINEAR property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#linear_nearest_miplinear
func (d *DynamicTexture) SetLINEAR_NEAREST_MIPLINEAR(LINEAR_NEAREST_MIPLINEAR float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(LINEAR_NEAREST_MIPLINEAR)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// LINEAR_NEAREST_MIPNEAREST returns the LINEAR_NEAREST_MIPNEAREST property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#linear_nearest_mipnearest
func (d *DynamicTexture) LINEAR_NEAREST_MIPNEAREST(LINEAR_NEAREST_MIPNEAREST float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(LINEAR_NEAREST_MIPNEAREST)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_NEAREST_MIPNEAREST sets the LINEAR_NEAREST_MIPNEAREST property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#linear_nearest_mipnearest
func (d *DynamicTexture) SetLINEAR_NEAREST_MIPNEAREST(LINEAR_NEAREST_MIPNEAREST float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(LINEAR_NEAREST_MIPNEAREST)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// Level returns the Level property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#level
func (d *DynamicTexture) Level(level float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(level)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetLevel sets the Level property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#level
func (d *DynamicTexture) SetLevel(level float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(level)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// LinearSpecularLOD returns the LinearSpecularLOD property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#linearspecularlod
func (d *DynamicTexture) LinearSpecularLOD(linearSpecularLOD bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(linearSpecularLOD)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetLinearSpecularLOD sets the LinearSpecularLOD property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#linearspecularlod
func (d *DynamicTexture) SetLinearSpecularLOD(linearSpecularLOD bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(linearSpecularLOD)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// LodGenerationOffset returns the LodGenerationOffset property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#lodgenerationoffset
func (d *DynamicTexture) LodGenerationOffset(lodGenerationOffset float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(lodGenerationOffset)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetLodGenerationOffset sets the LodGenerationOffset property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#lodgenerationoffset
func (d *DynamicTexture) SetLodGenerationOffset(lodGenerationOffset float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(lodGenerationOffset)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// LodGenerationScale returns the LodGenerationScale property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#lodgenerationscale
func (d *DynamicTexture) LodGenerationScale(lodGenerationScale float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(lodGenerationScale)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetLodGenerationScale sets the LodGenerationScale property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#lodgenerationscale
func (d *DynamicTexture) SetLodGenerationScale(lodGenerationScale float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(lodGenerationScale)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// MIRROR_ADDRESSMODE returns the MIRROR_ADDRESSMODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#mirror_addressmode
func (d *DynamicTexture) MIRROR_ADDRESSMODE(MIRROR_ADDRESSMODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(MIRROR_ADDRESSMODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetMIRROR_ADDRESSMODE sets the MIRROR_ADDRESSMODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#mirror_addressmode
func (d *DynamicTexture) SetMIRROR_ADDRESSMODE(MIRROR_ADDRESSMODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(MIRROR_ADDRESSMODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#metadata
func (d *DynamicTexture) Metadata(metadata interface{}) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(metadata)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#metadata
func (d *DynamicTexture) SetMetadata(metadata interface{}) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(metadata)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// NEAREST_LINEAR returns the NEAREST_LINEAR property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nearest_linear
func (d *DynamicTexture) NEAREST_LINEAR(NEAREST_LINEAR float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(NEAREST_LINEAR)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_LINEAR sets the NEAREST_LINEAR property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nearest_linear
func (d *DynamicTexture) SetNEAREST_LINEAR(NEAREST_LINEAR float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(NEAREST_LINEAR)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// NEAREST_LINEAR_MIPLINEAR returns the NEAREST_LINEAR_MIPLINEAR property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nearest_linear_miplinear
func (d *DynamicTexture) NEAREST_LINEAR_MIPLINEAR(NEAREST_LINEAR_MIPLINEAR float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(NEAREST_LINEAR_MIPLINEAR)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_LINEAR_MIPLINEAR sets the NEAREST_LINEAR_MIPLINEAR property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nearest_linear_miplinear
func (d *DynamicTexture) SetNEAREST_LINEAR_MIPLINEAR(NEAREST_LINEAR_MIPLINEAR float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(NEAREST_LINEAR_MIPLINEAR)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// NEAREST_LINEAR_MIPNEAREST returns the NEAREST_LINEAR_MIPNEAREST property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nearest_linear_mipnearest
func (d *DynamicTexture) NEAREST_LINEAR_MIPNEAREST(NEAREST_LINEAR_MIPNEAREST float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(NEAREST_LINEAR_MIPNEAREST)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_LINEAR_MIPNEAREST sets the NEAREST_LINEAR_MIPNEAREST property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nearest_linear_mipnearest
func (d *DynamicTexture) SetNEAREST_LINEAR_MIPNEAREST(NEAREST_LINEAR_MIPNEAREST float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(NEAREST_LINEAR_MIPNEAREST)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// NEAREST_NEAREST returns the NEAREST_NEAREST property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nearest_nearest
func (d *DynamicTexture) NEAREST_NEAREST(NEAREST_NEAREST float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(NEAREST_NEAREST)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_NEAREST sets the NEAREST_NEAREST property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nearest_nearest
func (d *DynamicTexture) SetNEAREST_NEAREST(NEAREST_NEAREST float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(NEAREST_NEAREST)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// NEAREST_NEAREST_MIPLINEAR returns the NEAREST_NEAREST_MIPLINEAR property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nearest_nearest_miplinear
func (d *DynamicTexture) NEAREST_NEAREST_MIPLINEAR(NEAREST_NEAREST_MIPLINEAR float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(NEAREST_NEAREST_MIPLINEAR)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_NEAREST_MIPLINEAR sets the NEAREST_NEAREST_MIPLINEAR property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nearest_nearest_miplinear
func (d *DynamicTexture) SetNEAREST_NEAREST_MIPLINEAR(NEAREST_NEAREST_MIPLINEAR float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(NEAREST_NEAREST_MIPLINEAR)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// NEAREST_NEAREST_MIPNEAREST returns the NEAREST_NEAREST_MIPNEAREST property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nearest_nearest_mipnearest
func (d *DynamicTexture) NEAREST_NEAREST_MIPNEAREST(NEAREST_NEAREST_MIPNEAREST float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(NEAREST_NEAREST_MIPNEAREST)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_NEAREST_MIPNEAREST sets the NEAREST_NEAREST_MIPNEAREST property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nearest_nearest_mipnearest
func (d *DynamicTexture) SetNEAREST_NEAREST_MIPNEAREST(NEAREST_NEAREST_MIPNEAREST float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(NEAREST_NEAREST_MIPNEAREST)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// NEAREST_SAMPLINGMODE returns the NEAREST_SAMPLINGMODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nearest_samplingmode
func (d *DynamicTexture) NEAREST_SAMPLINGMODE(NEAREST_SAMPLINGMODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(NEAREST_SAMPLINGMODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_SAMPLINGMODE sets the NEAREST_SAMPLINGMODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nearest_samplingmode
func (d *DynamicTexture) SetNEAREST_SAMPLINGMODE(NEAREST_SAMPLINGMODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(NEAREST_SAMPLINGMODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#name
func (d *DynamicTexture) Name(name string) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(name)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#name
func (d *DynamicTexture) SetName(name string) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(name)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// NoMipmap returns the NoMipmap property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nomipmap
func (d *DynamicTexture) NoMipmap(noMipmap bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(noMipmap)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetNoMipmap sets the NoMipmap property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#nomipmap
func (d *DynamicTexture) SetNoMipmap(noMipmap bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(noMipmap)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#ondispose
func (d *DynamicTexture) OnDispose(onDispose func()) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(onDispose)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#ondispose
func (d *DynamicTexture) SetOnDispose(onDispose func()) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(onDispose)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#ondisposeobservable
func (d *DynamicTexture) OnDisposeObservable(onDisposeObservable *Observable) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(onDisposeObservable.JSObject())
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#ondisposeobservable
func (d *DynamicTexture) SetOnDisposeObservable(onDisposeObservable *Observable) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(onDisposeObservable.JSObject())
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// OnLoadObservable returns the OnLoadObservable property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#onloadobservable
func (d *DynamicTexture) OnLoadObservable(onLoadObservable *Observable) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(onLoadObservable.JSObject())
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetOnLoadObservable sets the OnLoadObservable property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#onloadobservable
func (d *DynamicTexture) SetOnLoadObservable(onLoadObservable *Observable) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(onLoadObservable.JSObject())
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// PLANAR_MODE returns the PLANAR_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#planar_mode
func (d *DynamicTexture) PLANAR_MODE(PLANAR_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(PLANAR_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetPLANAR_MODE sets the PLANAR_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#planar_mode
func (d *DynamicTexture) SetPLANAR_MODE(PLANAR_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(PLANAR_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// PROJECTION_MODE returns the PROJECTION_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#projection_mode
func (d *DynamicTexture) PROJECTION_MODE(PROJECTION_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(PROJECTION_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetPROJECTION_MODE sets the PROJECTION_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#projection_mode
func (d *DynamicTexture) SetPROJECTION_MODE(PROJECTION_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(PROJECTION_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#reserveddatastore
func (d *DynamicTexture) ReservedDataStore(reservedDataStore interface{}) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(reservedDataStore)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#reserveddatastore
func (d *DynamicTexture) SetReservedDataStore(reservedDataStore interface{}) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(reservedDataStore)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SKYBOX_MODE returns the SKYBOX_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#skybox_mode
func (d *DynamicTexture) SKYBOX_MODE(SKYBOX_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(SKYBOX_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetSKYBOX_MODE sets the SKYBOX_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#skybox_mode
func (d *DynamicTexture) SetSKYBOX_MODE(SKYBOX_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(SKYBOX_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SPHERICAL_MODE returns the SPHERICAL_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#spherical_mode
func (d *DynamicTexture) SPHERICAL_MODE(SPHERICAL_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(SPHERICAL_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetSPHERICAL_MODE sets the SPHERICAL_MODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#spherical_mode
func (d *DynamicTexture) SetSPHERICAL_MODE(SPHERICAL_MODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(SPHERICAL_MODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SamplingMode returns the SamplingMode property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#samplingmode
func (d *DynamicTexture) SamplingMode(samplingMode float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(samplingMode)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetSamplingMode sets the SamplingMode property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#samplingmode
func (d *DynamicTexture) SetSamplingMode(samplingMode float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(samplingMode)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SerializeBuffers returns the SerializeBuffers property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#serializebuffers
func (d *DynamicTexture) SerializeBuffers(SerializeBuffers bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(SerializeBuffers)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetSerializeBuffers sets the SerializeBuffers property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#serializebuffers
func (d *DynamicTexture) SetSerializeBuffers(SerializeBuffers bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(SerializeBuffers)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// TRILINEAR_SAMPLINGMODE returns the TRILINEAR_SAMPLINGMODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#trilinear_samplingmode
func (d *DynamicTexture) TRILINEAR_SAMPLINGMODE(TRILINEAR_SAMPLINGMODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(TRILINEAR_SAMPLINGMODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetTRILINEAR_SAMPLINGMODE sets the TRILINEAR_SAMPLINGMODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#trilinear_samplingmode
func (d *DynamicTexture) SetTRILINEAR_SAMPLINGMODE(TRILINEAR_SAMPLINGMODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(TRILINEAR_SAMPLINGMODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// TextureFormat returns the TextureFormat property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#textureformat
func (d *DynamicTexture) TextureFormat(textureFormat float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(textureFormat)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetTextureFormat sets the TextureFormat property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#textureformat
func (d *DynamicTexture) SetTextureFormat(textureFormat float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(textureFormat)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// TextureType returns the TextureType property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#texturetype
func (d *DynamicTexture) TextureType(textureType float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(textureType)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetTextureType sets the TextureType property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#texturetype
func (d *DynamicTexture) SetTextureType(textureType float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(textureType)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// UAng returns the UAng property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#uang
func (d *DynamicTexture) UAng(uAng float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(uAng)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetUAng sets the UAng property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#uang
func (d *DynamicTexture) SetUAng(uAng float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(uAng)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// UOffset returns the UOffset property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#uoffset
func (d *DynamicTexture) UOffset(uOffset float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(uOffset)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetUOffset sets the UOffset property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#uoffset
func (d *DynamicTexture) SetUOffset(uOffset float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(uOffset)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// URotationCenter returns the URotationCenter property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#urotationcenter
func (d *DynamicTexture) URotationCenter(uRotationCenter float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(uRotationCenter)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetURotationCenter sets the URotationCenter property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#urotationcenter
func (d *DynamicTexture) SetURotationCenter(uRotationCenter float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(uRotationCenter)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// UScale returns the UScale property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#uscale
func (d *DynamicTexture) UScale(uScale float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(uScale)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetUScale sets the UScale property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#uscale
func (d *DynamicTexture) SetUScale(uScale float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(uScale)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// Uid returns the Uid property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#uid
func (d *DynamicTexture) Uid(uid string) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(uid)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetUid sets the Uid property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#uid
func (d *DynamicTexture) SetUid(uid string) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(uid)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#uniqueid
func (d *DynamicTexture) UniqueId(uniqueId float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(uniqueId)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#uniqueid
func (d *DynamicTexture) SetUniqueId(uniqueId float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(uniqueId)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// Url returns the Url property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#url
func (d *DynamicTexture) Url(url string) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(url)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetUrl sets the Url property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#url
func (d *DynamicTexture) SetUrl(url string) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(url)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// UseSerializedUrlIfAny returns the UseSerializedUrlIfAny property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#useserializedurlifany
func (d *DynamicTexture) UseSerializedUrlIfAny(UseSerializedUrlIfAny bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(UseSerializedUrlIfAny)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetUseSerializedUrlIfAny sets the UseSerializedUrlIfAny property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#useserializedurlifany
func (d *DynamicTexture) SetUseSerializedUrlIfAny(UseSerializedUrlIfAny bool) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(UseSerializedUrlIfAny)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// VAng returns the VAng property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#vang
func (d *DynamicTexture) VAng(vAng float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(vAng)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetVAng sets the VAng property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#vang
func (d *DynamicTexture) SetVAng(vAng float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(vAng)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// VOffset returns the VOffset property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#voffset
func (d *DynamicTexture) VOffset(vOffset float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(vOffset)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetVOffset sets the VOffset property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#voffset
func (d *DynamicTexture) SetVOffset(vOffset float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(vOffset)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// VRotationCenter returns the VRotationCenter property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#vrotationcenter
func (d *DynamicTexture) VRotationCenter(vRotationCenter float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(vRotationCenter)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetVRotationCenter sets the VRotationCenter property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#vrotationcenter
func (d *DynamicTexture) SetVRotationCenter(vRotationCenter float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(vRotationCenter)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// VScale returns the VScale property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#vscale
func (d *DynamicTexture) VScale(vScale float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(vScale)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetVScale sets the VScale property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#vscale
func (d *DynamicTexture) SetVScale(vScale float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(vScale)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// WAng returns the WAng property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#wang
func (d *DynamicTexture) WAng(wAng float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(wAng)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetWAng sets the WAng property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#wang
func (d *DynamicTexture) SetWAng(wAng float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(wAng)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// WRAP_ADDRESSMODE returns the WRAP_ADDRESSMODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#wrap_addressmode
func (d *DynamicTexture) WRAP_ADDRESSMODE(WRAP_ADDRESSMODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(WRAP_ADDRESSMODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetWRAP_ADDRESSMODE sets the WRAP_ADDRESSMODE property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#wrap_addressmode
func (d *DynamicTexture) SetWRAP_ADDRESSMODE(WRAP_ADDRESSMODE float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(WRAP_ADDRESSMODE)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// WRotationCenter returns the WRotationCenter property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#wrotationcenter
func (d *DynamicTexture) WRotationCenter(wRotationCenter float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(wRotationCenter)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetWRotationCenter sets the WRotationCenter property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#wrotationcenter
func (d *DynamicTexture) SetWRotationCenter(wRotationCenter float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(wRotationCenter)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// WrapR returns the WrapR property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#wrapr
func (d *DynamicTexture) WrapR(wrapR float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(wrapR)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetWrapR sets the WrapR property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#wrapr
func (d *DynamicTexture) SetWrapR(wrapR float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(wrapR)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// WrapU returns the WrapU property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#wrapu
func (d *DynamicTexture) WrapU(wrapU float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(wrapU)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetWrapU sets the WrapU property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#wrapu
func (d *DynamicTexture) SetWrapU(wrapU float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(wrapU)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// WrapV returns the WrapV property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#wrapv
func (d *DynamicTexture) WrapV(wrapV float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(wrapV)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

// SetWrapV sets the WrapV property of class DynamicTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.dynamictexture#wrapv
func (d *DynamicTexture) SetWrapV(wrapV float64) *DynamicTexture {
	p := ba.ctx.Get("DynamicTexture").New(wrapV)
	return DynamicTextureFromJSObject(p, ba.ctx)
}

*/
