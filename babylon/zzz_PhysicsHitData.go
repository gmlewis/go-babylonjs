// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PhysicsHitData represents a babylon.js PhysicsHitData.
// Interface for a physics hit data
//
// See: https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class
type PhysicsHitData struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PhysicsHitData) JSObject() js.Value { return p.p }

// PhysicsHitData returns a PhysicsHitData JavaScript class.
func (ba *Babylon) PhysicsHitData() *PhysicsHitData {
	p := ba.ctx.Get("PhysicsHitData")
	return PhysicsHitDataFromJSObject(p, ba.ctx)
}

// PhysicsHitDataFromJSObject returns a wrapped PhysicsHitData JavaScript class.
func PhysicsHitDataFromJSObject(p js.Value, ctx js.Value) *PhysicsHitData {
	return &PhysicsHitData{p: p, ctx: ctx}
}

// PhysicsHitDataArrayToJSArray returns a JavaScript Array for the wrapped array.
func PhysicsHitDataArrayToJSArray(array []*PhysicsHitData) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// ContactPoint returns the ContactPoint property of class PhysicsHitData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicshitdata#contactpoint
func (p *PhysicsHitData) ContactPoint() *Vector3 {
	retVal := p.p.Get("contactPoint")
	return Vector3FromJSObject(retVal, p.ctx)
}

// SetContactPoint sets the ContactPoint property of class PhysicsHitData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicshitdata#contactpoint
func (p *PhysicsHitData) SetContactPoint(contactPoint *Vector3) *PhysicsHitData {
	p.p.Set("contactPoint", contactPoint.JSObject())
	return p
}

// DistanceFromOrigin returns the DistanceFromOrigin property of class PhysicsHitData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicshitdata#distancefromorigin
func (p *PhysicsHitData) DistanceFromOrigin() float64 {
	retVal := p.p.Get("distanceFromOrigin")
	return retVal.Float()
}

// SetDistanceFromOrigin sets the DistanceFromOrigin property of class PhysicsHitData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicshitdata#distancefromorigin
func (p *PhysicsHitData) SetDistanceFromOrigin(distanceFromOrigin float64) *PhysicsHitData {
	p.p.Set("distanceFromOrigin", distanceFromOrigin)
	return p
}

// Force returns the Force property of class PhysicsHitData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicshitdata#force
func (p *PhysicsHitData) Force() *Vector3 {
	retVal := p.p.Get("force")
	return Vector3FromJSObject(retVal, p.ctx)
}

// SetForce sets the Force property of class PhysicsHitData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicshitdata#force
func (p *PhysicsHitData) SetForce(force *Vector3) *PhysicsHitData {
	p.p.Set("force", force.JSObject())
	return p
}
