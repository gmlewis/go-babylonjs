// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// EffectLayer represents a babylon.js EffectLayer.
// The effect layer Helps adding post process effect blended with the main pass.
//
// This can be for instance use to generate glow or higlight effects on the scene.
type EffectLayer struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *EffectLayer) JSObject() js.Value { return e.p }

// EffectLayer returns a EffectLayer JavaScript class.
func (ba *Babylon) EffectLayer() *EffectLayer {
	p := ba.ctx.Get("EffectLayer")
	return EffectLayerFromJSObject(p, ba.ctx)
}

// EffectLayerFromJSObject returns a wrapped EffectLayer JavaScript class.
func EffectLayerFromJSObject(p js.Value, ctx js.Value) *EffectLayer {
	return &EffectLayer{p: p, ctx: ctx}
}

// EffectLayerArrayToJSArray returns a JavaScript Array for the wrapped array.
func EffectLayerArrayToJSArray(array []*EffectLayer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewEffectLayer returns a new EffectLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#constructor
func (ba *Babylon) NewEffectLayer(name string, scene *Scene) *EffectLayer {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("EffectLayer").New(args...)
	return EffectLayerFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the EffectLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#dispose
func (e *EffectLayer) Dispose() {

	e.p.Call("dispose")
}

// GetClassName calls the GetClassName method on the EffectLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#getclassname
func (e *EffectLayer) GetClassName() string {

	retVal := e.p.Call("getClassName")
	return retVal.String()
}

// GetEffectName calls the GetEffectName method on the EffectLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#geteffectname
func (e *EffectLayer) GetEffectName() string {

	retVal := e.p.Call("getEffectName")
	return retVal.String()
}

// HasMesh calls the HasMesh method on the EffectLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#hasmesh
func (e *EffectLayer) HasMesh(mesh *AbstractMesh) bool {

	args := make([]interface{}, 0, 1+0)

	if mesh == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, mesh.JSObject())
	}

	retVal := e.p.Call("hasMesh", args...)
	return retVal.Bool()
}

// IsReady calls the IsReady method on the EffectLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#isready
func (e *EffectLayer) IsReady(subMesh *SubMesh, useInstances bool) bool {

	args := make([]interface{}, 0, 2+0)

	if subMesh == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, subMesh.JSObject())
	}

	args = append(args, useInstances)

	retVal := e.p.Call("isReady", args...)
	return retVal.Bool()
}

// NeedStencil calls the NeedStencil method on the EffectLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#needstencil
func (e *EffectLayer) NeedStencil() bool {

	retVal := e.p.Call("needStencil")
	return retVal.Bool()
}

// Parse calls the Parse method on the EffectLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#parse
func (e *EffectLayer) Parse(parsedEffectLayer JSObject, scene *Scene, rootUrl string) *EffectLayer {

	args := make([]interface{}, 0, 3+0)

	if parsedEffectLayer == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, parsedEffectLayer.JSObject())
	}

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	args = append(args, rootUrl)

	retVal := e.p.Call("Parse", args...)
	return EffectLayerFromJSObject(retVal, e.ctx)
}

// Render calls the Render method on the EffectLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#render
func (e *EffectLayer) Render() {

	e.p.Call("render")
}

// Serialize calls the Serialize method on the EffectLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#serialize
func (e *EffectLayer) Serialize() js.Value {

	retVal := e.p.Call("serialize")
	return retVal
}

// ShouldRender calls the ShouldRender method on the EffectLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#shouldrender
func (e *EffectLayer) ShouldRender() bool {

	retVal := e.p.Call("shouldRender")
	return retVal.Bool()
}

// _disposeMesh calls the _disposeMesh method on the EffectLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#_disposemesh
func (e *EffectLayer) _disposeMesh(mesh *Mesh) {

	args := make([]interface{}, 0, 1+0)

	if mesh == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, mesh.JSObject())
	}

	e.p.Call("_disposeMesh", args...)
}

// Camera returns the Camera property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#camera
func (e *EffectLayer) Camera() *Camera {
	retVal := e.p.Get("camera")
	return CameraFromJSObject(retVal, e.ctx)
}

// SetCamera sets the Camera property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#camera
func (e *EffectLayer) SetCamera(camera *Camera) *EffectLayer {
	e.p.Set("camera", camera.JSObject())
	return e
}

// IsEnabled returns the IsEnabled property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#isenabled
func (e *EffectLayer) IsEnabled() bool {
	retVal := e.p.Get("isEnabled")
	return retVal.Bool()
}

// SetIsEnabled sets the IsEnabled property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#isenabled
func (e *EffectLayer) SetIsEnabled(isEnabled bool) *EffectLayer {
	e.p.Set("isEnabled", isEnabled)
	return e
}

// Name returns the Name property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#name
func (e *EffectLayer) Name() string {
	retVal := e.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#name
func (e *EffectLayer) SetName(name string) *EffectLayer {
	e.p.Set("name", name)
	return e
}

// NeutralColor returns the NeutralColor property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#neutralcolor
func (e *EffectLayer) NeutralColor() *Color4 {
	retVal := e.p.Get("neutralColor")
	return Color4FromJSObject(retVal, e.ctx)
}

// SetNeutralColor sets the NeutralColor property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#neutralcolor
func (e *EffectLayer) SetNeutralColor(neutralColor *Color4) *EffectLayer {
	e.p.Set("neutralColor", neutralColor.JSObject())
	return e
}

// OnAfterComposeObservable returns the OnAfterComposeObservable property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#onaftercomposeobservable
func (e *EffectLayer) OnAfterComposeObservable() *Observable {
	retVal := e.p.Get("onAfterComposeObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnAfterComposeObservable sets the OnAfterComposeObservable property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#onaftercomposeobservable
func (e *EffectLayer) SetOnAfterComposeObservable(onAfterComposeObservable *Observable) *EffectLayer {
	e.p.Set("onAfterComposeObservable", onAfterComposeObservable.JSObject())
	return e
}

// OnAfterRenderMeshToEffect returns the OnAfterRenderMeshToEffect property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#onafterrendermeshtoeffect
func (e *EffectLayer) OnAfterRenderMeshToEffect() *Observable {
	retVal := e.p.Get("onAfterRenderMeshToEffect")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnAfterRenderMeshToEffect sets the OnAfterRenderMeshToEffect property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#onafterrendermeshtoeffect
func (e *EffectLayer) SetOnAfterRenderMeshToEffect(onAfterRenderMeshToEffect *Observable) *EffectLayer {
	e.p.Set("onAfterRenderMeshToEffect", onAfterRenderMeshToEffect.JSObject())
	return e
}

// OnBeforeComposeObservable returns the OnBeforeComposeObservable property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#onbeforecomposeobservable
func (e *EffectLayer) OnBeforeComposeObservable() *Observable {
	retVal := e.p.Get("onBeforeComposeObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnBeforeComposeObservable sets the OnBeforeComposeObservable property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#onbeforecomposeobservable
func (e *EffectLayer) SetOnBeforeComposeObservable(onBeforeComposeObservable *Observable) *EffectLayer {
	e.p.Set("onBeforeComposeObservable", onBeforeComposeObservable.JSObject())
	return e
}

// OnBeforeRenderMainTextureObservable returns the OnBeforeRenderMainTextureObservable property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#onbeforerendermaintextureobservable
func (e *EffectLayer) OnBeforeRenderMainTextureObservable() *Observable {
	retVal := e.p.Get("onBeforeRenderMainTextureObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnBeforeRenderMainTextureObservable sets the OnBeforeRenderMainTextureObservable property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#onbeforerendermaintextureobservable
func (e *EffectLayer) SetOnBeforeRenderMainTextureObservable(onBeforeRenderMainTextureObservable *Observable) *EffectLayer {
	e.p.Set("onBeforeRenderMainTextureObservable", onBeforeRenderMainTextureObservable.JSObject())
	return e
}

// OnBeforeRenderMeshToEffect returns the OnBeforeRenderMeshToEffect property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#onbeforerendermeshtoeffect
func (e *EffectLayer) OnBeforeRenderMeshToEffect() *Observable {
	retVal := e.p.Get("onBeforeRenderMeshToEffect")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnBeforeRenderMeshToEffect sets the OnBeforeRenderMeshToEffect property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#onbeforerendermeshtoeffect
func (e *EffectLayer) SetOnBeforeRenderMeshToEffect(onBeforeRenderMeshToEffect *Observable) *EffectLayer {
	e.p.Set("onBeforeRenderMeshToEffect", onBeforeRenderMeshToEffect.JSObject())
	return e
}

// OnDisposeObservable returns the OnDisposeObservable property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#ondisposeobservable
func (e *EffectLayer) OnDisposeObservable() *Observable {
	retVal := e.p.Get("onDisposeObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#ondisposeobservable
func (e *EffectLayer) SetOnDisposeObservable(onDisposeObservable *Observable) *EffectLayer {
	e.p.Set("onDisposeObservable", onDisposeObservable.JSObject())
	return e
}

// OnSizeChangedObservable returns the OnSizeChangedObservable property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#onsizechangedobservable
func (e *EffectLayer) OnSizeChangedObservable() *Observable {
	retVal := e.p.Get("onSizeChangedObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnSizeChangedObservable sets the OnSizeChangedObservable property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#onsizechangedobservable
func (e *EffectLayer) SetOnSizeChangedObservable(onSizeChangedObservable *Observable) *EffectLayer {
	e.p.Set("onSizeChangedObservable", onSizeChangedObservable.JSObject())
	return e
}

// RenderingGroupId returns the RenderingGroupId property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#renderinggroupid
func (e *EffectLayer) RenderingGroupId() float64 {
	retVal := e.p.Get("renderingGroupId")
	return retVal.Float()
}

// SetRenderingGroupId sets the RenderingGroupId property of class EffectLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.effectlayer#renderinggroupid
func (e *EffectLayer) SetRenderingGroupId(renderingGroupId float64) *EffectLayer {
	e.p.Set("renderingGroupId", renderingGroupId)
	return e
}
