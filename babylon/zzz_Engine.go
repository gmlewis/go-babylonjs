// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Engine represents a babylon.js Engine.
// The engine class is responsible for interfacing with all lower-level APIs such as WebGL and Audio
type Engine struct {
	*ThinEngine
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *Engine) JSObject() js.Value { return e.p }

// Engine returns a Engine JavaScript class.
func (ba *Babylon) Engine() *Engine {
	p := ba.ctx.Get("Engine")
	return EngineFromJSObject(p, ba.ctx)
}

// EngineFromJSObject returns a wrapped Engine JavaScript class.
func EngineFromJSObject(p js.Value, ctx js.Value) *Engine {
	return &Engine{ThinEngine: ThinEngineFromJSObject(p, ctx), ctx: ctx}
}

// NewEngineOpts contains optional parameters for NewEngine.
type NewEngineOpts struct {
	Antialias *JSBool

	Options *JSValue

	AdaptToDeviceRatio *JSBool
}

// NewEngine returns a new Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine
func (ba *Babylon) NewEngine(canvasOrContext js.Value, opts *NewEngineOpts) *Engine {
	if opts == nil {
		opts = &NewEngineOpts{}
	}

	p := ba.ctx.Get("Engine").New(canvasOrContext, opts.Antialias.JSObject(), opts.Options.JSObject(), opts.AdaptToDeviceRatio.JSObject())
	return EngineFromJSObject(p, ba.ctx)
}

// TODO: methods
