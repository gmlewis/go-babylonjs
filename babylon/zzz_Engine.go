// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Engine represents a babylon.js Engine.
// The engine class is responsible for interfacing with all lower-level APIs such as WebGL and Audio
type Engine struct {
	*ThinEngine
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *Engine) JSObject() js.Value { return e.p }

// Engine returns a Engine JavaScript class.
func (ba *Babylon) Engine() *Engine {
	p := ba.ctx.Get("Engine")
	return EngineFromJSObject(p, ba.ctx)
}

// EngineFromJSObject returns a wrapped Engine JavaScript class.
func EngineFromJSObject(p js.Value, ctx js.Value) *Engine {
	return &Engine{ThinEngine: ThinEngineFromJSObject(p, ctx), ctx: ctx}
}

// EngineArrayToJSArray returns a JavaScript Array for the wrapped array.
func EngineArrayToJSArray(array []*Engine) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewEngineOpts contains optional parameters for NewEngine.
type NewEngineOpts struct {
	Antialias          *bool
	Options            js.Value
	AdaptToDeviceRatio *bool
}

// NewEngine returns a new Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine
func (ba *Babylon) NewEngine(canvasOrContext js.Value, opts *NewEngineOpts) *Engine {
	if opts == nil {
		opts = &NewEngineOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, canvasOrContext)

	if opts.Antialias == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Antialias)
	}
	args = append(args, opts.Options)
	if opts.AdaptToDeviceRatio == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.AdaptToDeviceRatio)
	}

	p := ba.ctx.Get("Engine").New(args...)
	return EngineFromJSObject(p, ba.ctx)
}

// BeginFrame calls the BeginFrame method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#beginframe
func (e *Engine) BeginFrame() {

	e.p.Call("beginFrame")
}

// BeginOcclusionQuery calls the BeginOcclusionQuery method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#beginocclusionquery
func (e *Engine) BeginOcclusionQuery(algorithmType float64, query js.Value) *Engine {

	args := make([]interface{}, 0, 2+0)

	args = append(args, algorithmType)
	args = append(args, query)

	retVal := e.p.Call("beginOcclusionQuery", args...)
	return EngineFromJSObject(retVal, e.ctx)
}

// BeginTransformFeedback calls the BeginTransformFeedback method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#begintransformfeedback
func (e *Engine) BeginTransformFeedback(usePoints bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, usePoints)

	e.p.Call("beginTransformFeedback", args...)
}

// BindMultiviewFramebuffer calls the BindMultiviewFramebuffer method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#bindmultiviewframebuffer
func (e *Engine) BindMultiviewFramebuffer(multiviewTexture *InternalTexture) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, multiviewTexture.JSObject())

	e.p.Call("bindMultiviewFramebuffer", args...)
}

// BindTransformFeedback calls the BindTransformFeedback method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#bindtransformfeedback
func (e *Engine) BindTransformFeedback(value js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, value)

	e.p.Call("bindTransformFeedback", args...)
}

// BindTransformFeedbackBuffer calls the BindTransformFeedbackBuffer method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#bindtransformfeedbackbuffer
func (e *Engine) BindTransformFeedbackBuffer(value *DataBuffer) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, value.JSObject())

	e.p.Call("bindTransformFeedbackBuffer", args...)
}

// CacheStencilState calls the CacheStencilState method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#cachestencilstate
func (e *Engine) CacheStencilState() {

	e.p.Call("cacheStencilState")
}

// EngineCreateEffectForParticlesOpts contains optional parameters for Engine.CreateEffectForParticles.
type EngineCreateEffectForParticlesOpts struct {
	Fallbacks  *EffectFallbacks
	OnCompiled func()
	OnError    func()
}

// CreateEffectForParticles calls the CreateEffectForParticles method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#createeffectforparticles
func (e *Engine) CreateEffectForParticles(fragmentName string, uniformsNames string, samplers string, defines string, opts *EngineCreateEffectForParticlesOpts) *Effect {
	if opts == nil {
		opts = &EngineCreateEffectForParticlesOpts{}
	}

	args := make([]interface{}, 0, 4+3)

	args = append(args, fragmentName)
	args = append(args, uniformsNames)
	args = append(args, samplers)
	args = append(args, defines)

	if opts.Fallbacks == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Fallbacks.JSObject())
	}
	if opts.OnCompiled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { opts.OnCompiled(); return nil }) /* never freed! */)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { opts.OnError(); return nil }) /* never freed! */)
	}

	retVal := e.p.Call("createEffectForParticles", args...)
	return EffectFromJSObject(retVal, e.ctx)
}

// CreateInstancesBuffer calls the CreateInstancesBuffer method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#createinstancesbuffer
func (e *Engine) CreateInstancesBuffer(capacity float64) *DataBuffer {

	args := make([]interface{}, 0, 1+0)

	args = append(args, capacity)

	retVal := e.p.Call("createInstancesBuffer", args...)
	return DataBufferFromJSObject(retVal, e.ctx)
}

// CreateMultiviewRenderTargetTexture calls the CreateMultiviewRenderTargetTexture method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#createmultiviewrendertargettexture
func (e *Engine) CreateMultiviewRenderTargetTexture(width float64, height float64) *InternalTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, width)
	args = append(args, height)

	retVal := e.p.Call("createMultiviewRenderTargetTexture", args...)
	return InternalTextureFromJSObject(retVal, e.ctx)
}

// CreateQuery calls the CreateQuery method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#createquery
func (e *Engine) CreateQuery() js.Value {

	retVal := e.p.Call("createQuery")
	return retVal
}

// CreateRawCubeTexture calls the CreateRawCubeTexture method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#createrawcubetexture
func (e *Engine) CreateRawCubeTexture(data js.Value, size float64, format float64, jsType float64, generateMipMaps bool, invertY bool, samplingMode float64, compression string) *InternalTexture {

	args := make([]interface{}, 0, 8+0)

	args = append(args, data)
	args = append(args, size)
	args = append(args, format)
	args = append(args, jsType)
	args = append(args, generateMipMaps)
	args = append(args, invertY)
	args = append(args, samplingMode)
	args = append(args, compression)

	retVal := e.p.Call("createRawCubeTexture", args...)
	return InternalTextureFromJSObject(retVal, e.ctx)
}

// CreateRawCubeTextureFromUrl calls the CreateRawCubeTextureFromUrl method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#createrawcubetexturefromurl
func (e *Engine) CreateRawCubeTextureFromUrl(url string, scene *Scene, size float64, format float64, jsType float64, noMipmap bool, callback func(), mipmapGenerator func(), onLoad func(), onError func()) *InternalTexture {

	args := make([]interface{}, 0, 10+0)

	args = append(args, url)
	args = append(args, scene.JSObject())
	args = append(args, size)
	args = append(args, format)
	args = append(args, jsType)
	args = append(args, noMipmap)
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { callback(); return nil }))
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { mipmapGenerator(); return nil }))
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { onLoad(); return nil }))
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { onError(); return nil }))

	retVal := e.p.Call("createRawCubeTextureFromUrl", args...)
	return InternalTextureFromJSObject(retVal, e.ctx)
}

// CreateRawTexture calls the CreateRawTexture method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#createrawtexture
func (e *Engine) CreateRawTexture(data js.Value, width float64, height float64, format float64, generateMipMaps bool, invertY bool, samplingMode float64, compression string, jsType float64) *InternalTexture {

	args := make([]interface{}, 0, 9+0)

	args = append(args, data)
	args = append(args, width)
	args = append(args, height)
	args = append(args, format)
	args = append(args, generateMipMaps)
	args = append(args, invertY)
	args = append(args, samplingMode)
	args = append(args, compression)
	args = append(args, jsType)

	retVal := e.p.Call("createRawTexture", args...)
	return InternalTextureFromJSObject(retVal, e.ctx)
}

// CreateRawTexture2DArray calls the CreateRawTexture2DArray method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#createrawtexture2darray
func (e *Engine) CreateRawTexture2DArray(data js.Value, width float64, height float64, depth float64, format float64, generateMipMaps bool, invertY bool, samplingMode float64, compression string, textureType float64) *InternalTexture {

	args := make([]interface{}, 0, 10+0)

	args = append(args, data)
	args = append(args, width)
	args = append(args, height)
	args = append(args, depth)
	args = append(args, format)
	args = append(args, generateMipMaps)
	args = append(args, invertY)
	args = append(args, samplingMode)
	args = append(args, compression)
	args = append(args, textureType)

	retVal := e.p.Call("createRawTexture2DArray", args...)
	return InternalTextureFromJSObject(retVal, e.ctx)
}

// CreateRawTexture3D calls the CreateRawTexture3D method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#createrawtexture3d
func (e *Engine) CreateRawTexture3D(data js.Value, width float64, height float64, depth float64, format float64, generateMipMaps bool, invertY bool, samplingMode float64, compression string, textureType float64) *InternalTexture {

	args := make([]interface{}, 0, 10+0)

	args = append(args, data)
	args = append(args, width)
	args = append(args, height)
	args = append(args, depth)
	args = append(args, format)
	args = append(args, generateMipMaps)
	args = append(args, invertY)
	args = append(args, samplingMode)
	args = append(args, compression)
	args = append(args, textureType)

	retVal := e.p.Call("createRawTexture3D", args...)
	return InternalTextureFromJSObject(retVal, e.ctx)
}

// EngineCreateShaderProgramOpts contains optional parameters for Engine.CreateShaderProgram.
type EngineCreateShaderProgramOpts struct {
	Context                   js.Value
	TransformFeedbackVaryings *string
}

// CreateShaderProgram calls the CreateShaderProgram method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#createshaderprogram
func (e *Engine) CreateShaderProgram(pipelineContext *IPipelineContext, vertexCode string, fragmentCode string, defines string, opts *EngineCreateShaderProgramOpts) js.Value {
	if opts == nil {
		opts = &EngineCreateShaderProgramOpts{}
	}

	args := make([]interface{}, 0, 4+2)

	args = append(args, pipelineContext.JSObject())
	args = append(args, vertexCode)
	args = append(args, fragmentCode)
	args = append(args, defines)

	args = append(args, opts.Context)
	if opts.TransformFeedbackVaryings == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TransformFeedbackVaryings)
	}

	retVal := e.p.Call("createShaderProgram", args...)
	return retVal
}

// CreateTransformFeedback calls the CreateTransformFeedback method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#createtransformfeedback
func (e *Engine) CreateTransformFeedback() js.Value {

	retVal := e.p.Call("createTransformFeedback")
	return retVal
}

// DefaultLoadingScreenFactory calls the DefaultLoadingScreenFactory method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#defaultloadingscreenfactory
func (e *Engine) DefaultLoadingScreenFactory(canvas js.Value) *ILoadingScreen {

	args := make([]interface{}, 0, 1+0)

	args = append(args, canvas)

	retVal := e.p.Call("DefaultLoadingScreenFactory", args...)
	return ILoadingScreenFromJSObject(retVal, e.ctx)
}

// DeleteInstancesBuffer calls the DeleteInstancesBuffer method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#deleteinstancesbuffer
func (e *Engine) DeleteInstancesBuffer(buffer js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, buffer)

	e.p.Call("deleteInstancesBuffer", args...)
}

// DeleteQuery calls the DeleteQuery method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#deletequery
func (e *Engine) DeleteQuery(query js.Value) *Engine {

	args := make([]interface{}, 0, 1+0)

	args = append(args, query)

	retVal := e.p.Call("deleteQuery", args...)
	return EngineFromJSObject(retVal, e.ctx)
}

// DeleteTransformFeedback calls the DeleteTransformFeedback method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#deletetransformfeedback
func (e *Engine) DeleteTransformFeedback(value js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, value)

	e.p.Call("deleteTransformFeedback", args...)
}

// DisableScissor calls the DisableScissor method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#disablescissor
func (e *Engine) DisableScissor() {

	e.p.Call("disableScissor")
}

// DisableVR calls the DisableVR method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#disablevr
func (e *Engine) DisableVR() {

	e.p.Call("disableVR")
}

// DisplayLoadingUI calls the DisplayLoadingUI method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#displayloadingui
func (e *Engine) DisplayLoadingUI() {

	e.p.Call("displayLoadingUI")
}

// Dispose calls the Dispose method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#dispose
func (e *Engine) Dispose() {

	e.p.Call("dispose")
}

// EnableScissor calls the EnableScissor method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#enablescissor
func (e *Engine) EnableScissor(x float64, y float64, width float64, height float64) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, x)
	args = append(args, y)
	args = append(args, width)
	args = append(args, height)

	e.p.Call("enableScissor", args...)
}

// EnableVR calls the EnableVR method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#enablevr
func (e *Engine) EnableVR(options js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, options)

	e.p.Call("enableVR", args...)
}

// EndFrame calls the EndFrame method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#endframe
func (e *Engine) EndFrame() {

	e.p.Call("endFrame")
}

// EndOcclusionQuery calls the EndOcclusionQuery method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#endocclusionquery
func (e *Engine) EndOcclusionQuery(algorithmType float64) *Engine {

	args := make([]interface{}, 0, 1+0)

	args = append(args, algorithmType)

	retVal := e.p.Call("endOcclusionQuery", args...)
	return EngineFromJSObject(retVal, e.ctx)
}

// EndTimeQuery calls the EndTimeQuery method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#endtimequery
func (e *Engine) EndTimeQuery(token js.Value) int {

	args := make([]interface{}, 0, 1+0)

	args = append(args, token)

	retVal := e.p.Call("endTimeQuery", args...)
	return retVal.Int()
}

// EndTransformFeedback calls the EndTransformFeedback method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#endtransformfeedback
func (e *Engine) EndTransformFeedback() {

	e.p.Call("endTransformFeedback")
}

// EnterFullscreen calls the EnterFullscreen method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#enterfullscreen
func (e *Engine) EnterFullscreen(requestPointerLock bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, requestPointerLock)

	e.p.Call("enterFullscreen", args...)
}

// EnterPointerlock calls the EnterPointerlock method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#enterpointerlock
func (e *Engine) EnterPointerlock() {

	e.p.Call("enterPointerlock")
}

// ExitFullscreen calls the ExitFullscreen method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#exitfullscreen
func (e *Engine) ExitFullscreen() {

	e.p.Call("exitFullscreen")
}

// ExitPointerlock calls the ExitPointerlock method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#exitpointerlock
func (e *Engine) ExitPointerlock() {

	e.p.Call("exitPointerlock")
}

// GenerateMipMapsForCubemap calls the GenerateMipMapsForCubemap method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#generatemipmapsforcubemap
func (e *Engine) GenerateMipMapsForCubemap(texture *InternalTexture) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	e.p.Call("generateMipMapsForCubemap", args...)
}

// GetAlphaEquation calls the GetAlphaEquation method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getalphaequation
func (e *Engine) GetAlphaEquation() float64 {

	retVal := e.p.Call("getAlphaEquation")
	return retVal.Float()
}

// GetAlphaMode calls the GetAlphaMode method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getalphamode
func (e *Engine) GetAlphaMode() float64 {

	retVal := e.p.Call("getAlphaMode")
	return retVal.Float()
}

// EngineGetAspectRatioOpts contains optional parameters for Engine.GetAspectRatio.
type EngineGetAspectRatioOpts struct {
	UseScreen *bool
}

// GetAspectRatio calls the GetAspectRatio method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getaspectratio
func (e *Engine) GetAspectRatio(viewportOwner js.Value, opts *EngineGetAspectRatioOpts) float64 {
	if opts == nil {
		opts = &EngineGetAspectRatioOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, viewportOwner)

	if opts.UseScreen == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseScreen)
	}

	retVal := e.p.Call("getAspectRatio", args...)
	return retVal.Float()
}

// GetColorWrite calls the GetColorWrite method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getcolorwrite
func (e *Engine) GetColorWrite() bool {

	retVal := e.p.Call("getColorWrite")
	return retVal.Bool()
}

// GetDeltaTime calls the GetDeltaTime method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getdeltatime
func (e *Engine) GetDeltaTime() float64 {

	retVal := e.p.Call("getDeltaTime")
	return retVal.Float()
}

// GetDepthFunction calls the GetDepthFunction method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getdepthfunction
func (e *Engine) GetDepthFunction() float64 {

	retVal := e.p.Call("getDepthFunction")
	return retVal.Float()
}

// GetDepthWrite calls the GetDepthWrite method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getdepthwrite
func (e *Engine) GetDepthWrite() bool {

	retVal := e.p.Call("getDepthWrite")
	return retVal.Bool()
}

// GetFps calls the GetFps method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getfps
func (e *Engine) GetFps() float64 {

	retVal := e.p.Call("getFps")
	return retVal.Float()
}

// GetFragmentShaderSource calls the GetFragmentShaderSource method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getfragmentshadersource
func (e *Engine) GetFragmentShaderSource(program js.Value) string {

	args := make([]interface{}, 0, 1+0)

	args = append(args, program)

	retVal := e.p.Call("getFragmentShaderSource", args...)
	return retVal.String()
}

// GetInputElement calls the GetInputElement method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getinputelement
func (e *Engine) GetInputElement() js.Value {

	retVal := e.p.Call("getInputElement")
	return retVal
}

// GetInputElementClientRect calls the GetInputElementClientRect method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getinputelementclientrect
func (e *Engine) GetInputElementClientRect() js.Value {

	retVal := e.p.Call("getInputElementClientRect")
	return retVal
}

// GetLockstepMaxSteps calls the GetLockstepMaxSteps method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getlockstepmaxsteps
func (e *Engine) GetLockstepMaxSteps() float64 {

	retVal := e.p.Call("getLockstepMaxSteps")
	return retVal.Float()
}

// GetQueryResult calls the GetQueryResult method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getqueryresult
func (e *Engine) GetQueryResult(query js.Value) float64 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, query)

	retVal := e.p.Call("getQueryResult", args...)
	return retVal.Float()
}

// GetRenderingCanvasClientRect calls the GetRenderingCanvasClientRect method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getrenderingcanvasclientrect
func (e *Engine) GetRenderingCanvasClientRect() js.Value {

	retVal := e.p.Call("getRenderingCanvasClientRect")
	return retVal
}

// GetScreenAspectRatio calls the GetScreenAspectRatio method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getscreenaspectratio
func (e *Engine) GetScreenAspectRatio() float64 {

	retVal := e.p.Call("getScreenAspectRatio")
	return retVal.Float()
}

// GetStencilBuffer calls the GetStencilBuffer method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getstencilbuffer
func (e *Engine) GetStencilBuffer() bool {

	retVal := e.p.Call("getStencilBuffer")
	return retVal.Bool()
}

// GetStencilFunction calls the GetStencilFunction method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getstencilfunction
func (e *Engine) GetStencilFunction() float64 {

	retVal := e.p.Call("getStencilFunction")
	return retVal.Float()
}

// GetStencilFunctionMask calls the GetStencilFunctionMask method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getstencilfunctionmask
func (e *Engine) GetStencilFunctionMask() float64 {

	retVal := e.p.Call("getStencilFunctionMask")
	return retVal.Float()
}

// GetStencilFunctionReference calls the GetStencilFunctionReference method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getstencilfunctionreference
func (e *Engine) GetStencilFunctionReference() float64 {

	retVal := e.p.Call("getStencilFunctionReference")
	return retVal.Float()
}

// GetStencilMask calls the GetStencilMask method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getstencilmask
func (e *Engine) GetStencilMask() float64 {

	retVal := e.p.Call("getStencilMask")
	return retVal.Float()
}

// GetStencilOperationDepthFail calls the GetStencilOperationDepthFail method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getstenciloperationdepthfail
func (e *Engine) GetStencilOperationDepthFail() float64 {

	retVal := e.p.Call("getStencilOperationDepthFail")
	return retVal.Float()
}

// GetStencilOperationFail calls the GetStencilOperationFail method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getstenciloperationfail
func (e *Engine) GetStencilOperationFail() float64 {

	retVal := e.p.Call("getStencilOperationFail")
	return retVal.Float()
}

// GetStencilOperationPass calls the GetStencilOperationPass method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getstenciloperationpass
func (e *Engine) GetStencilOperationPass() float64 {

	retVal := e.p.Call("getStencilOperationPass")
	return retVal.Float()
}

// GetTimeStep calls the GetTimeStep method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#gettimestep
func (e *Engine) GetTimeStep() float64 {

	retVal := e.p.Call("getTimeStep")
	return retVal.Float()
}

// GetVRDevice calls the GetVRDevice method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getvrdevice
func (e *Engine) GetVRDevice() interface{} {

	retVal := e.p.Call("getVRDevice")
	return retVal
}

// GetVertexShaderSource calls the GetVertexShaderSource method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getvertexshadersource
func (e *Engine) GetVertexShaderSource(program js.Value) string {

	args := make([]interface{}, 0, 1+0)

	args = append(args, program)

	retVal := e.p.Call("getVertexShaderSource", args...)
	return retVal.String()
}

// GetZOffset calls the GetZOffset method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#getzoffset
func (e *Engine) GetZOffset() float64 {

	retVal := e.p.Call("getZOffset")
	return retVal.Float()
}

// HideLoadingUI calls the HideLoadingUI method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#hideloadingui
func (e *Engine) HideLoadingUI() {

	e.p.Call("hideLoadingUI")
}

// InitWebVR calls the InitWebVR method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#initwebvr
func (e *Engine) InitWebVR() *Observable {

	retVal := e.p.Call("initWebVR")
	return ObservableFromJSObject(retVal, e.ctx)
}

// InitWebVRAsync calls the InitWebVRAsync method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#initwebvrasync
func (e *Engine) InitWebVRAsync() *Promise {

	retVal := e.p.Call("initWebVRAsync")
	return PromiseFromJSObject(retVal, e.ctx)
}

// IsDeterministicLockStep calls the IsDeterministicLockStep method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#isdeterministiclockstep
func (e *Engine) IsDeterministicLockStep() bool {

	retVal := e.p.Call("isDeterministicLockStep")
	return retVal.Bool()
}

// IsQueryResultAvailable calls the IsQueryResultAvailable method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#isqueryresultavailable
func (e *Engine) IsQueryResultAvailable(query js.Value) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, query)

	retVal := e.p.Call("isQueryResultAvailable", args...)
	return retVal.Bool()
}

// IsVRDevicePresent calls the IsVRDevicePresent method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#isvrdevicepresent
func (e *Engine) IsVRDevicePresent() bool {

	retVal := e.p.Call("isVRDevicePresent")
	return retVal.Bool()
}

// IsVRPresenting calls the IsVRPresenting method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#isvrpresenting
func (e *Engine) IsVRPresenting() bool {

	retVal := e.p.Call("isVRPresenting")
	return retVal.Bool()
}

// EngineMarkAllMaterialsAsDirtyOpts contains optional parameters for Engine.MarkAllMaterialsAsDirty.
type EngineMarkAllMaterialsAsDirtyOpts struct {
	Predicate func()
}

// MarkAllMaterialsAsDirty calls the MarkAllMaterialsAsDirty method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#markallmaterialsasdirty
func (e *Engine) MarkAllMaterialsAsDirty(flag float64, opts *EngineMarkAllMaterialsAsDirtyOpts) {
	if opts == nil {
		opts = &EngineMarkAllMaterialsAsDirtyOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, flag)

	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { opts.Predicate(); return nil }) /* never freed! */)
	}

	e.p.Call("MarkAllMaterialsAsDirty", args...)
}

// ReadPixels calls the ReadPixels method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#readpixels
func (e *Engine) ReadPixels(x float64, y float64, width float64, height float64) js.Value {

	args := make([]interface{}, 0, 4+0)

	args = append(args, x)
	args = append(args, y)
	args = append(args, width)
	args = append(args, height)

	retVal := e.p.Call("readPixels", args...)
	return retVal
}

// EngineRegisterViewOpts contains optional parameters for Engine.RegisterView.
type EngineRegisterViewOpts struct {
	Camera *Camera
}

// RegisterView calls the RegisterView method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#registerview
func (e *Engine) RegisterView(canvas js.Value, opts *EngineRegisterViewOpts) *EngineView {
	if opts == nil {
		opts = &EngineRegisterViewOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, canvas)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}

	retVal := e.p.Call("registerView", args...)
	return EngineViewFromJSObject(retVal, e.ctx)
}

// Resize calls the Resize method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#resize
func (e *Engine) Resize() {

	e.p.Call("resize")
}

// RestoreStencilState calls the RestoreStencilState method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#restorestencilstate
func (e *Engine) RestoreStencilState() {

	e.p.Call("restoreStencilState")
}

// ScissorClear calls the ScissorClear method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#scissorclear
func (e *Engine) ScissorClear(x float64, y float64, width float64, height float64, clearColor js.Value) {

	args := make([]interface{}, 0, 5+0)

	args = append(args, x)
	args = append(args, y)
	args = append(args, width)
	args = append(args, height)
	args = append(args, clearColor)

	e.p.Call("scissorClear", args...)
}

// SetAlphaConstants calls the SetAlphaConstants method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setalphaconstants
func (e *Engine) SetAlphaConstants(r float64, g float64, b float64, a float64) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, r)
	args = append(args, g)
	args = append(args, b)
	args = append(args, a)

	e.p.Call("setAlphaConstants", args...)
}

// SetAlphaEquation calls the SetAlphaEquation method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setalphaequation
func (e *Engine) SetAlphaEquation(equation float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, equation)

	e.p.Call("setAlphaEquation", args...)
}

// EngineSetAlphaModeOpts contains optional parameters for Engine.SetAlphaMode.
type EngineSetAlphaModeOpts struct {
	NoDepthWriteChange *bool
}

// SetAlphaMode calls the SetAlphaMode method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setalphamode
func (e *Engine) SetAlphaMode(mode float64, opts *EngineSetAlphaModeOpts) {
	if opts == nil {
		opts = &EngineSetAlphaModeOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, mode)

	if opts.NoDepthWriteChange == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoDepthWriteChange)
	}

	e.p.Call("setAlphaMode", args...)
}

// SetColorWrite calls the SetColorWrite method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setcolorwrite
func (e *Engine) SetColorWrite(enable bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, enable)

	e.p.Call("setColorWrite", args...)
}

// SetDepthBuffer calls the SetDepthBuffer method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setdepthbuffer
func (e *Engine) SetDepthBuffer(enable bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, enable)

	e.p.Call("setDepthBuffer", args...)
}

// SetDepthFunction calls the SetDepthFunction method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setdepthfunction
func (e *Engine) SetDepthFunction(depthFunc float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, depthFunc)

	e.p.Call("setDepthFunction", args...)
}

// SetDepthFunctionToGreater calls the SetDepthFunctionToGreater method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setdepthfunctiontogreater
func (e *Engine) SetDepthFunctionToGreater() {

	e.p.Call("setDepthFunctionToGreater")
}

// SetDepthFunctionToGreaterOrEqual calls the SetDepthFunctionToGreaterOrEqual method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setdepthfunctiontogreaterorequal
func (e *Engine) SetDepthFunctionToGreaterOrEqual() {

	e.p.Call("setDepthFunctionToGreaterOrEqual")
}

// SetDepthFunctionToLess calls the SetDepthFunctionToLess method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setdepthfunctiontoless
func (e *Engine) SetDepthFunctionToLess() {

	e.p.Call("setDepthFunctionToLess")
}

// SetDepthFunctionToLessOrEqual calls the SetDepthFunctionToLessOrEqual method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setdepthfunctiontolessorequal
func (e *Engine) SetDepthFunctionToLessOrEqual() {

	e.p.Call("setDepthFunctionToLessOrEqual")
}

// SetDepthStencilTexture calls the SetDepthStencilTexture method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setdepthstenciltexture
func (e *Engine) SetDepthStencilTexture(channel float64, uniform js.Value, texture *RenderTargetTexture) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, channel)
	args = append(args, uniform)
	args = append(args, texture.JSObject())

	e.p.Call("setDepthStencilTexture", args...)
}

// SetDepthWrite calls the SetDepthWrite method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setdepthwrite
func (e *Engine) SetDepthWrite(enable bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, enable)

	e.p.Call("setDepthWrite", args...)
}

// SetDirectViewport calls the SetDirectViewport method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setdirectviewport
func (e *Engine) SetDirectViewport(x float64, y float64, width float64, height float64) js.Value {

	args := make([]interface{}, 0, 4+0)

	args = append(args, x)
	args = append(args, y)
	args = append(args, width)
	args = append(args, height)

	retVal := e.p.Call("setDirectViewport", args...)
	return retVal
}

// SetDitheringState calls the SetDitheringState method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setditheringstate
func (e *Engine) SetDitheringState(value bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, value)

	e.p.Call("setDitheringState", args...)
}

// SetFrameBufferDepthStencilTexture calls the SetFrameBufferDepthStencilTexture method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setframebufferdepthstenciltexture
func (e *Engine) SetFrameBufferDepthStencilTexture(renderTarget *RenderTargetTexture) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, renderTarget.JSObject())

	e.p.Call("setFrameBufferDepthStencilTexture", args...)
}

// SetRasterizerState calls the SetRasterizerState method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setrasterizerstate
func (e *Engine) SetRasterizerState(value bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, value)

	e.p.Call("setRasterizerState", args...)
}

// SetSize calls the SetSize method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setsize
func (e *Engine) SetSize(width float64, height float64) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, width)
	args = append(args, height)

	e.p.Call("setSize", args...)
}

// EngineSetStateOpts contains optional parameters for Engine.SetState.
type EngineSetStateOpts struct {
	ZOffset     *float64
	Force       *bool
	ReverseSide *bool
}

// SetState calls the SetState method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setstate
func (e *Engine) SetState(culling bool, opts *EngineSetStateOpts) {
	if opts == nil {
		opts = &EngineSetStateOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, culling)

	if opts.ZOffset == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ZOffset)
	}
	if opts.Force == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Force)
	}
	if opts.ReverseSide == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ReverseSide)
	}

	e.p.Call("setState", args...)
}

// SetStencilBuffer calls the SetStencilBuffer method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setstencilbuffer
func (e *Engine) SetStencilBuffer(enable bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, enable)

	e.p.Call("setStencilBuffer", args...)
}

// SetStencilFunction calls the SetStencilFunction method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setstencilfunction
func (e *Engine) SetStencilFunction(stencilFunc float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, stencilFunc)

	e.p.Call("setStencilFunction", args...)
}

// SetStencilFunctionMask calls the SetStencilFunctionMask method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setstencilfunctionmask
func (e *Engine) SetStencilFunctionMask(mask float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mask)

	e.p.Call("setStencilFunctionMask", args...)
}

// SetStencilFunctionReference calls the SetStencilFunctionReference method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setstencilfunctionreference
func (e *Engine) SetStencilFunctionReference(reference float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, reference)

	e.p.Call("setStencilFunctionReference", args...)
}

// SetStencilMask calls the SetStencilMask method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setstencilmask
func (e *Engine) SetStencilMask(mask float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mask)

	e.p.Call("setStencilMask", args...)
}

// SetStencilOperationDepthFail calls the SetStencilOperationDepthFail method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setstenciloperationdepthfail
func (e *Engine) SetStencilOperationDepthFail(operation float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, operation)

	e.p.Call("setStencilOperationDepthFail", args...)
}

// SetStencilOperationFail calls the SetStencilOperationFail method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setstenciloperationfail
func (e *Engine) SetStencilOperationFail(operation float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, operation)

	e.p.Call("setStencilOperationFail", args...)
}

// SetStencilOperationPass calls the SetStencilOperationPass method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setstenciloperationpass
func (e *Engine) SetStencilOperationPass(operation float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, operation)

	e.p.Call("setStencilOperationPass", args...)
}

// SetTextureFormatToUse calls the SetTextureFormatToUse method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#settextureformattouse
func (e *Engine) SetTextureFormatToUse(formatsAvailable []string) string {

	args := make([]interface{}, 0, 1+0)

	args = append(args, formatsAvailable)

	retVal := e.p.Call("setTextureFormatToUse", args...)
	return retVal.String()
}

// SetTextureFromPostProcess calls the SetTextureFromPostProcess method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#settexturefrompostprocess
func (e *Engine) SetTextureFromPostProcess(channel float64, postProcess *PostProcess) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, channel)
	args = append(args, postProcess.JSObject())

	e.p.Call("setTextureFromPostProcess", args...)
}

// SetTextureFromPostProcessOutput calls the SetTextureFromPostProcessOutput method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#settexturefrompostprocessoutput
func (e *Engine) SetTextureFromPostProcessOutput(channel float64, postProcess *PostProcess) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, channel)
	args = append(args, postProcess.JSObject())

	e.p.Call("setTextureFromPostProcessOutput", args...)
}

// SetTranformFeedbackVaryings calls the SetTranformFeedbackVaryings method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#settranformfeedbackvaryings
func (e *Engine) SetTranformFeedbackVaryings(program js.Value, value string) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, program)
	args = append(args, value)

	e.p.Call("setTranformFeedbackVaryings", args...)
}

// SetZOffset calls the SetZOffset method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#setzoffset
func (e *Engine) SetZOffset(value float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, value)

	e.p.Call("setZOffset", args...)
}

// StartTimeQuery calls the StartTimeQuery method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#starttimequery
func (e *Engine) StartTimeQuery() js.Value {

	retVal := e.p.Call("startTimeQuery")
	return retVal
}

// SwitchFullscreen calls the SwitchFullscreen method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#switchfullscreen
func (e *Engine) SwitchFullscreen(requestPointerLock bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, requestPointerLock)

	e.p.Call("switchFullscreen", args...)
}

// UnRegisterView calls the UnRegisterView method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#unregisterview
func (e *Engine) UnRegisterView(canvas js.Value) *Engine {

	args := make([]interface{}, 0, 1+0)

	args = append(args, canvas)

	retVal := e.p.Call("unRegisterView", args...)
	return EngineFromJSObject(retVal, e.ctx)
}

// EngineUpdateDynamicIndexBufferOpts contains optional parameters for Engine.UpdateDynamicIndexBuffer.
type EngineUpdateDynamicIndexBufferOpts struct {
	Offset *float64
}

// UpdateDynamicIndexBuffer calls the UpdateDynamicIndexBuffer method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#updatedynamicindexbuffer
func (e *Engine) UpdateDynamicIndexBuffer(indexBuffer *DataBuffer, indices js.Value, opts *EngineUpdateDynamicIndexBufferOpts) {
	if opts == nil {
		opts = &EngineUpdateDynamicIndexBufferOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, indexBuffer.JSObject())
	args = append(args, indices)

	if opts.Offset == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Offset)
	}

	e.p.Call("updateDynamicIndexBuffer", args...)
}

// EngineUpdateDynamicVertexBufferOpts contains optional parameters for Engine.UpdateDynamicVertexBuffer.
type EngineUpdateDynamicVertexBufferOpts struct {
	ByteOffset *float64
	ByteLength *float64
}

// UpdateDynamicVertexBuffer calls the UpdateDynamicVertexBuffer method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#updatedynamicvertexbuffer
func (e *Engine) UpdateDynamicVertexBuffer(vertexBuffer *DataBuffer, data []float64, opts *EngineUpdateDynamicVertexBufferOpts) {
	if opts == nil {
		opts = &EngineUpdateDynamicVertexBufferOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, vertexBuffer.JSObject())
	args = append(args, data)

	if opts.ByteOffset == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ByteOffset)
	}
	if opts.ByteLength == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ByteLength)
	}

	e.p.Call("updateDynamicVertexBuffer", args...)
}

// UpdateRawCubeTexture calls the UpdateRawCubeTexture method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#updaterawcubetexture
func (e *Engine) UpdateRawCubeTexture(texture *InternalTexture, data js.Value, format float64, jsType float64, invertY bool) {

	args := make([]interface{}, 0, 5+0)

	args = append(args, texture.JSObject())
	args = append(args, data)
	args = append(args, format)
	args = append(args, jsType)
	args = append(args, invertY)

	e.p.Call("updateRawCubeTexture", args...)
}

// UpdateRawTexture calls the UpdateRawTexture method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#updaterawtexture
func (e *Engine) UpdateRawTexture(texture *InternalTexture, data js.Value, format float64, invertY bool) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, texture.JSObject())
	args = append(args, data)
	args = append(args, format)
	args = append(args, invertY)

	e.p.Call("updateRawTexture", args...)
}

// UpdateRawTexture2DArray calls the UpdateRawTexture2DArray method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#updaterawtexture2darray
func (e *Engine) UpdateRawTexture2DArray(texture *InternalTexture, data js.Value, format float64, invertY bool) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, texture.JSObject())
	args = append(args, data)
	args = append(args, format)
	args = append(args, invertY)

	e.p.Call("updateRawTexture2DArray", args...)
}

// UpdateRawTexture3D calls the UpdateRawTexture3D method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#updaterawtexture3d
func (e *Engine) UpdateRawTexture3D(texture *InternalTexture, data js.Value, format float64, invertY bool) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, texture.JSObject())
	args = append(args, data)
	args = append(args, format)
	args = append(args, invertY)

	e.p.Call("updateRawTexture3D", args...)
}

// UpdateRenderTargetTextureSampleCount calls the UpdateRenderTargetTextureSampleCount method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#updaterendertargettexturesamplecount
func (e *Engine) UpdateRenderTargetTextureSampleCount(texture *InternalTexture, samples float64) float64 {

	args := make([]interface{}, 0, 2+0)

	args = append(args, texture.JSObject())
	args = append(args, samples)

	retVal := e.p.Call("updateRenderTargetTextureSampleCount", args...)
	return retVal.Float()
}

// UpdateTextureComparisonFunction calls the UpdateTextureComparisonFunction method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#updatetexturecomparisonfunction
func (e *Engine) UpdateTextureComparisonFunction(texture *InternalTexture, comparisonFunction float64) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, texture.JSObject())
	args = append(args, comparisonFunction)

	e.p.Call("updateTextureComparisonFunction", args...)
}

// _ExitFullscreen calls the _ExitFullscreen method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#_exitfullscreen
func (e *Engine) _ExitFullscreen() {

	e.p.Call("_ExitFullscreen")
}

// _ExitPointerlock calls the _ExitPointerlock method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#_exitpointerlock
func (e *Engine) _ExitPointerlock() {

	e.p.Call("_ExitPointerlock")
}

// _RequestFullscreen calls the _RequestFullscreen method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#_requestfullscreen
func (e *Engine) _RequestFullscreen(element js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, element)

	e.p.Call("_RequestFullscreen", args...)
}

// _RequestPointerlock calls the _RequestPointerlock method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#_requestpointerlock
func (e *Engine) _RequestPointerlock(element js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, element)

	e.p.Call("_RequestPointerlock", args...)
}

// _deletePipelineContext calls the _deletePipelineContext method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#_deletepipelinecontext
func (e *Engine) _deletePipelineContext(pipelineContext *IPipelineContext) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, pipelineContext.JSObject())

	e.p.Call("_deletePipelineContext", args...)
}

// _releaseTexture calls the _releaseTexture method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#_releasetexture
func (e *Engine) _releaseTexture(texture *InternalTexture) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	e.p.Call("_releaseTexture", args...)
}

// _renderLoop calls the _renderLoop method on the Engine object.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#_renderloop
func (e *Engine) _renderLoop() {

	e.p.Call("_renderLoop")
}

// ALPHA_ADD returns the ALPHA_ADD property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_add
func (e *Engine) ALPHA_ADD() float64 {
	retVal := e.p.Get("ALPHA_ADD")
	return retVal.Float()
}

// SetALPHA_ADD sets the ALPHA_ADD property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_add
func (e *Engine) SetALPHA_ADD(ALPHA_ADD float64) *Engine {
	e.p.Set("ALPHA_ADD", ALPHA_ADD)
	return e
}

// ALPHA_COMBINE returns the ALPHA_COMBINE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_combine
func (e *Engine) ALPHA_COMBINE() float64 {
	retVal := e.p.Get("ALPHA_COMBINE")
	return retVal.Float()
}

// SetALPHA_COMBINE sets the ALPHA_COMBINE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_combine
func (e *Engine) SetALPHA_COMBINE(ALPHA_COMBINE float64) *Engine {
	e.p.Set("ALPHA_COMBINE", ALPHA_COMBINE)
	return e
}

// ALPHA_DISABLE returns the ALPHA_DISABLE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_disable
func (e *Engine) ALPHA_DISABLE() float64 {
	retVal := e.p.Get("ALPHA_DISABLE")
	return retVal.Float()
}

// SetALPHA_DISABLE sets the ALPHA_DISABLE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_disable
func (e *Engine) SetALPHA_DISABLE(ALPHA_DISABLE float64) *Engine {
	e.p.Set("ALPHA_DISABLE", ALPHA_DISABLE)
	return e
}

// ALPHA_INTERPOLATE returns the ALPHA_INTERPOLATE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_interpolate
func (e *Engine) ALPHA_INTERPOLATE() float64 {
	retVal := e.p.Get("ALPHA_INTERPOLATE")
	return retVal.Float()
}

// SetALPHA_INTERPOLATE sets the ALPHA_INTERPOLATE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_interpolate
func (e *Engine) SetALPHA_INTERPOLATE(ALPHA_INTERPOLATE float64) *Engine {
	e.p.Set("ALPHA_INTERPOLATE", ALPHA_INTERPOLATE)
	return e
}

// ALPHA_MAXIMIZED returns the ALPHA_MAXIMIZED property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_maximized
func (e *Engine) ALPHA_MAXIMIZED() float64 {
	retVal := e.p.Get("ALPHA_MAXIMIZED")
	return retVal.Float()
}

// SetALPHA_MAXIMIZED sets the ALPHA_MAXIMIZED property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_maximized
func (e *Engine) SetALPHA_MAXIMIZED(ALPHA_MAXIMIZED float64) *Engine {
	e.p.Set("ALPHA_MAXIMIZED", ALPHA_MAXIMIZED)
	return e
}

// ALPHA_MULTIPLY returns the ALPHA_MULTIPLY property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_multiply
func (e *Engine) ALPHA_MULTIPLY() float64 {
	retVal := e.p.Get("ALPHA_MULTIPLY")
	return retVal.Float()
}

// SetALPHA_MULTIPLY sets the ALPHA_MULTIPLY property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_multiply
func (e *Engine) SetALPHA_MULTIPLY(ALPHA_MULTIPLY float64) *Engine {
	e.p.Set("ALPHA_MULTIPLY", ALPHA_MULTIPLY)
	return e
}

// ALPHA_ONEONE returns the ALPHA_ONEONE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_oneone
func (e *Engine) ALPHA_ONEONE() float64 {
	retVal := e.p.Get("ALPHA_ONEONE")
	return retVal.Float()
}

// SetALPHA_ONEONE sets the ALPHA_ONEONE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_oneone
func (e *Engine) SetALPHA_ONEONE(ALPHA_ONEONE float64) *Engine {
	e.p.Set("ALPHA_ONEONE", ALPHA_ONEONE)
	return e
}

// ALPHA_PREMULTIPLIED returns the ALPHA_PREMULTIPLIED property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_premultiplied
func (e *Engine) ALPHA_PREMULTIPLIED() float64 {
	retVal := e.p.Get("ALPHA_PREMULTIPLIED")
	return retVal.Float()
}

// SetALPHA_PREMULTIPLIED sets the ALPHA_PREMULTIPLIED property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_premultiplied
func (e *Engine) SetALPHA_PREMULTIPLIED(ALPHA_PREMULTIPLIED float64) *Engine {
	e.p.Set("ALPHA_PREMULTIPLIED", ALPHA_PREMULTIPLIED)
	return e
}

// ALPHA_PREMULTIPLIED_PORTERDUFF returns the ALPHA_PREMULTIPLIED_PORTERDUFF property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_premultiplied_porterduff
func (e *Engine) ALPHA_PREMULTIPLIED_PORTERDUFF() float64 {
	retVal := e.p.Get("ALPHA_PREMULTIPLIED_PORTERDUFF")
	return retVal.Float()
}

// SetALPHA_PREMULTIPLIED_PORTERDUFF sets the ALPHA_PREMULTIPLIED_PORTERDUFF property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_premultiplied_porterduff
func (e *Engine) SetALPHA_PREMULTIPLIED_PORTERDUFF(ALPHA_PREMULTIPLIED_PORTERDUFF float64) *Engine {
	e.p.Set("ALPHA_PREMULTIPLIED_PORTERDUFF", ALPHA_PREMULTIPLIED_PORTERDUFF)
	return e
}

// ALPHA_SCREENMODE returns the ALPHA_SCREENMODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_screenmode
func (e *Engine) ALPHA_SCREENMODE() float64 {
	retVal := e.p.Get("ALPHA_SCREENMODE")
	return retVal.Float()
}

// SetALPHA_SCREENMODE sets the ALPHA_SCREENMODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_screenmode
func (e *Engine) SetALPHA_SCREENMODE(ALPHA_SCREENMODE float64) *Engine {
	e.p.Set("ALPHA_SCREENMODE", ALPHA_SCREENMODE)
	return e
}

// ALPHA_SUBTRACT returns the ALPHA_SUBTRACT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_subtract
func (e *Engine) ALPHA_SUBTRACT() float64 {
	retVal := e.p.Get("ALPHA_SUBTRACT")
	return retVal.Float()
}

// SetALPHA_SUBTRACT sets the ALPHA_SUBTRACT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#alpha_subtract
func (e *Engine) SetALPHA_SUBTRACT(ALPHA_SUBTRACT float64) *Engine {
	e.p.Set("ALPHA_SUBTRACT", ALPHA_SUBTRACT)
	return e
}

// ALWAYS returns the ALWAYS property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#always
func (e *Engine) ALWAYS() float64 {
	retVal := e.p.Get("ALWAYS")
	return retVal.Float()
}

// SetALWAYS sets the ALWAYS property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#always
func (e *Engine) SetALWAYS(ALWAYS float64) *Engine {
	e.p.Set("ALWAYS", ALWAYS)
	return e
}

// ActiveView returns the ActiveView property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#activeview
func (e *Engine) ActiveView() *EngineView {
	retVal := e.p.Get("activeView")
	return EngineViewFromJSObject(retVal, e.ctx)
}

// SetActiveView sets the ActiveView property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#activeview
func (e *Engine) SetActiveView(activeView *EngineView) *Engine {
	e.p.Set("activeView", activeView.JSObject())
	return e
}

// AudioEngine returns the AudioEngine property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#audioengine
func (e *Engine) AudioEngine() *IAudioEngine {
	retVal := e.p.Get("audioEngine")
	return IAudioEngineFromJSObject(retVal, e.ctx)
}

// SetAudioEngine sets the AudioEngine property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#audioengine
func (e *Engine) SetAudioEngine(audioEngine *IAudioEngine) *Engine {
	e.p.Set("audioEngine", audioEngine.JSObject())
	return e
}

// AudioEngineFactory returns the AudioEngineFactory property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#audioenginefactory
func (e *Engine) AudioEngineFactory() js.Value {
	retVal := e.p.Get("AudioEngineFactory")
	return retVal
}

// SetAudioEngineFactory sets the AudioEngineFactory property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#audioenginefactory
func (e *Engine) SetAudioEngineFactory(AudioEngineFactory func()) *Engine {
	e.p.Set("AudioEngineFactory", js.FuncOf(func(this js.Value, args []js.Value) interface{} { AudioEngineFactory(); return nil }))
	return e
}

// CustomAnimationFrameRequester returns the CustomAnimationFrameRequester property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#customanimationframerequester
func (e *Engine) CustomAnimationFrameRequester() *ICustomAnimationFrameRequester {
	retVal := e.p.Get("customAnimationFrameRequester")
	return ICustomAnimationFrameRequesterFromJSObject(retVal, e.ctx)
}

// SetCustomAnimationFrameRequester sets the CustomAnimationFrameRequester property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#customanimationframerequester
func (e *Engine) SetCustomAnimationFrameRequester(customAnimationFrameRequester *ICustomAnimationFrameRequester) *Engine {
	e.p.Set("customAnimationFrameRequester", customAnimationFrameRequester.JSObject())
	return e
}

// DECR returns the DECR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#decr
func (e *Engine) DECR() float64 {
	retVal := e.p.Get("DECR")
	return retVal.Float()
}

// SetDECR sets the DECR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#decr
func (e *Engine) SetDECR(DECR float64) *Engine {
	e.p.Set("DECR", DECR)
	return e
}

// DECR_WRAP returns the DECR_WRAP property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#decr_wrap
func (e *Engine) DECR_WRAP() float64 {
	retVal := e.p.Get("DECR_WRAP")
	return retVal.Float()
}

// SetDECR_WRAP sets the DECR_WRAP property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#decr_wrap
func (e *Engine) SetDECR_WRAP(DECR_WRAP float64) *Engine {
	e.p.Set("DECR_WRAP", DECR_WRAP)
	return e
}

// DELAYLOADSTATE_LOADED returns the DELAYLOADSTATE_LOADED property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#delayloadstate_loaded
func (e *Engine) DELAYLOADSTATE_LOADED() float64 {
	retVal := e.p.Get("DELAYLOADSTATE_LOADED")
	return retVal.Float()
}

// SetDELAYLOADSTATE_LOADED sets the DELAYLOADSTATE_LOADED property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#delayloadstate_loaded
func (e *Engine) SetDELAYLOADSTATE_LOADED(DELAYLOADSTATE_LOADED float64) *Engine {
	e.p.Set("DELAYLOADSTATE_LOADED", DELAYLOADSTATE_LOADED)
	return e
}

// DELAYLOADSTATE_LOADING returns the DELAYLOADSTATE_LOADING property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#delayloadstate_loading
func (e *Engine) DELAYLOADSTATE_LOADING() float64 {
	retVal := e.p.Get("DELAYLOADSTATE_LOADING")
	return retVal.Float()
}

// SetDELAYLOADSTATE_LOADING sets the DELAYLOADSTATE_LOADING property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#delayloadstate_loading
func (e *Engine) SetDELAYLOADSTATE_LOADING(DELAYLOADSTATE_LOADING float64) *Engine {
	e.p.Set("DELAYLOADSTATE_LOADING", DELAYLOADSTATE_LOADING)
	return e
}

// DELAYLOADSTATE_NONE returns the DELAYLOADSTATE_NONE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#delayloadstate_none
func (e *Engine) DELAYLOADSTATE_NONE() float64 {
	retVal := e.p.Get("DELAYLOADSTATE_NONE")
	return retVal.Float()
}

// SetDELAYLOADSTATE_NONE sets the DELAYLOADSTATE_NONE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#delayloadstate_none
func (e *Engine) SetDELAYLOADSTATE_NONE(DELAYLOADSTATE_NONE float64) *Engine {
	e.p.Set("DELAYLOADSTATE_NONE", DELAYLOADSTATE_NONE)
	return e
}

// DELAYLOADSTATE_NOTLOADED returns the DELAYLOADSTATE_NOTLOADED property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#delayloadstate_notloaded
func (e *Engine) DELAYLOADSTATE_NOTLOADED() float64 {
	retVal := e.p.Get("DELAYLOADSTATE_NOTLOADED")
	return retVal.Float()
}

// SetDELAYLOADSTATE_NOTLOADED sets the DELAYLOADSTATE_NOTLOADED property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#delayloadstate_notloaded
func (e *Engine) SetDELAYLOADSTATE_NOTLOADED(DELAYLOADSTATE_NOTLOADED float64) *Engine {
	e.p.Set("DELAYLOADSTATE_NOTLOADED", DELAYLOADSTATE_NOTLOADED)
	return e
}

// DisableManifestCheck returns the DisableManifestCheck property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#disablemanifestcheck
func (e *Engine) DisableManifestCheck() bool {
	retVal := e.p.Get("disableManifestCheck")
	return retVal.Bool()
}

// SetDisableManifestCheck sets the DisableManifestCheck property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#disablemanifestcheck
func (e *Engine) SetDisableManifestCheck(disableManifestCheck bool) *Engine {
	e.p.Set("disableManifestCheck", disableManifestCheck)
	return e
}

// DisablePerformanceMonitorInBackground returns the DisablePerformanceMonitorInBackground property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#disableperformancemonitorinbackground
func (e *Engine) DisablePerformanceMonitorInBackground() bool {
	retVal := e.p.Get("disablePerformanceMonitorInBackground")
	return retVal.Bool()
}

// SetDisablePerformanceMonitorInBackground sets the DisablePerformanceMonitorInBackground property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#disableperformancemonitorinbackground
func (e *Engine) SetDisablePerformanceMonitorInBackground(disablePerformanceMonitorInBackground bool) *Engine {
	e.p.Set("disablePerformanceMonitorInBackground", disablePerformanceMonitorInBackground)
	return e
}

// EQUAL returns the EQUAL property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#equal
func (e *Engine) EQUAL() float64 {
	retVal := e.p.Get("EQUAL")
	return retVal.Float()
}

// SetEQUAL sets the EQUAL property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#equal
func (e *Engine) SetEQUAL(EQUAL float64) *Engine {
	e.p.Set("EQUAL", EQUAL)
	return e
}

// EnableOfflineSupport returns the EnableOfflineSupport property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#enableofflinesupport
func (e *Engine) EnableOfflineSupport() bool {
	retVal := e.p.Get("enableOfflineSupport")
	return retVal.Bool()
}

// SetEnableOfflineSupport sets the EnableOfflineSupport property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#enableofflinesupport
func (e *Engine) SetEnableOfflineSupport(enableOfflineSupport bool) *Engine {
	e.p.Set("enableOfflineSupport", enableOfflineSupport)
	return e
}

// GEQUAL returns the GEQUAL property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#gequal
func (e *Engine) GEQUAL() float64 {
	retVal := e.p.Get("GEQUAL")
	return retVal.Float()
}

// SetGEQUAL sets the GEQUAL property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#gequal
func (e *Engine) SetGEQUAL(GEQUAL float64) *Engine {
	e.p.Set("GEQUAL", GEQUAL)
	return e
}

// GREATER returns the GREATER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#greater
func (e *Engine) GREATER() float64 {
	retVal := e.p.Get("GREATER")
	return retVal.Float()
}

// SetGREATER sets the GREATER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#greater
func (e *Engine) SetGREATER(GREATER float64) *Engine {
	e.p.Set("GREATER", GREATER)
	return e
}

// INCR returns the INCR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#incr
func (e *Engine) INCR() float64 {
	retVal := e.p.Get("INCR")
	return retVal.Float()
}

// SetINCR sets the INCR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#incr
func (e *Engine) SetINCR(INCR float64) *Engine {
	e.p.Set("INCR", INCR)
	return e
}

// INCR_WRAP returns the INCR_WRAP property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#incr_wrap
func (e *Engine) INCR_WRAP() float64 {
	retVal := e.p.Get("INCR_WRAP")
	return retVal.Float()
}

// SetINCR_WRAP sets the INCR_WRAP property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#incr_wrap
func (e *Engine) SetINCR_WRAP(INCR_WRAP float64) *Engine {
	e.p.Set("INCR_WRAP", INCR_WRAP)
	return e
}

// INVERT returns the INVERT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#invert
func (e *Engine) INVERT() float64 {
	retVal := e.p.Get("INVERT")
	return retVal.Float()
}

// SetINVERT sets the INVERT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#invert
func (e *Engine) SetINVERT(INVERT float64) *Engine {
	e.p.Set("INVERT", INVERT)
	return e
}

// InputElement returns the InputElement property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#inputelement
func (e *Engine) InputElement() js.Value {
	retVal := e.p.Get("inputElement")
	return retVal
}

// SetInputElement sets the InputElement property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#inputelement
func (e *Engine) SetInputElement(inputElement js.Value) *Engine {
	e.p.Set("inputElement", inputElement)
	return e
}

// Instances returns the Instances property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#instances
func (e *Engine) Instances() *Engine {
	retVal := e.p.Get("Instances")
	return EngineFromJSObject(retVal, e.ctx)
}

// SetInstances sets the Instances property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#instances
func (e *Engine) SetInstances(Instances *Engine) *Engine {
	e.p.Set("Instances", Instances.JSObject())
	return e
}

// IsInVRExclusivePointerMode returns the IsInVRExclusivePointerMode property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#isinvrexclusivepointermode
func (e *Engine) IsInVRExclusivePointerMode() bool {
	retVal := e.p.Get("isInVRExclusivePointerMode")
	return retVal.Bool()
}

// SetIsInVRExclusivePointerMode sets the IsInVRExclusivePointerMode property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#isinvrexclusivepointermode
func (e *Engine) SetIsInVRExclusivePointerMode(isInVRExclusivePointerMode bool) *Engine {
	e.p.Set("isInVRExclusivePointerMode", isInVRExclusivePointerMode)
	return e
}

// IsPointerLock returns the IsPointerLock property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#ispointerlock
func (e *Engine) IsPointerLock() bool {
	retVal := e.p.Get("isPointerLock")
	return retVal.Bool()
}

// SetIsPointerLock sets the IsPointerLock property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#ispointerlock
func (e *Engine) SetIsPointerLock(isPointerLock bool) *Engine {
	e.p.Set("isPointerLock", isPointerLock)
	return e
}

// KEEP returns the KEEP property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#keep
func (e *Engine) KEEP() float64 {
	retVal := e.p.Get("KEEP")
	return retVal.Float()
}

// SetKEEP sets the KEEP property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#keep
func (e *Engine) SetKEEP(KEEP float64) *Engine {
	e.p.Set("KEEP", KEEP)
	return e
}

// LEQUAL returns the LEQUAL property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#lequal
func (e *Engine) LEQUAL() float64 {
	retVal := e.p.Get("LEQUAL")
	return retVal.Float()
}

// SetLEQUAL sets the LEQUAL property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#lequal
func (e *Engine) SetLEQUAL(LEQUAL float64) *Engine {
	e.p.Set("LEQUAL", LEQUAL)
	return e
}

// LESS returns the LESS property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#less
func (e *Engine) LESS() float64 {
	retVal := e.p.Get("LESS")
	return retVal.Float()
}

// SetLESS sets the LESS property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#less
func (e *Engine) SetLESS(LESS float64) *Engine {
	e.p.Set("LESS", LESS)
	return e
}

// LastCreatedEngine returns the LastCreatedEngine property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#lastcreatedengine
func (e *Engine) LastCreatedEngine() *Engine {
	retVal := e.p.Get("LastCreatedEngine")
	return EngineFromJSObject(retVal, e.ctx)
}

// SetLastCreatedEngine sets the LastCreatedEngine property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#lastcreatedengine
func (e *Engine) SetLastCreatedEngine(LastCreatedEngine *Engine) *Engine {
	e.p.Set("LastCreatedEngine", LastCreatedEngine.JSObject())
	return e
}

// LastCreatedScene returns the LastCreatedScene property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#lastcreatedscene
func (e *Engine) LastCreatedScene() *Scene {
	retVal := e.p.Get("LastCreatedScene")
	return SceneFromJSObject(retVal, e.ctx)
}

// SetLastCreatedScene sets the LastCreatedScene property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#lastcreatedscene
func (e *Engine) SetLastCreatedScene(LastCreatedScene *Scene) *Engine {
	e.p.Set("LastCreatedScene", LastCreatedScene.JSObject())
	return e
}

// LoadingScreen returns the LoadingScreen property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#loadingscreen
func (e *Engine) LoadingScreen() *ILoadingScreen {
	retVal := e.p.Get("loadingScreen")
	return ILoadingScreenFromJSObject(retVal, e.ctx)
}

// SetLoadingScreen sets the LoadingScreen property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#loadingscreen
func (e *Engine) SetLoadingScreen(loadingScreen *ILoadingScreen) *Engine {
	e.p.Set("loadingScreen", loadingScreen.JSObject())
	return e
}

// LoadingUIBackgroundColor returns the LoadingUIBackgroundColor property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#loadinguibackgroundcolor
func (e *Engine) LoadingUIBackgroundColor() string {
	retVal := e.p.Get("loadingUIBackgroundColor")
	return retVal.String()
}

// SetLoadingUIBackgroundColor sets the LoadingUIBackgroundColor property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#loadinguibackgroundcolor
func (e *Engine) SetLoadingUIBackgroundColor(loadingUIBackgroundColor string) *Engine {
	e.p.Set("loadingUIBackgroundColor", loadingUIBackgroundColor)
	return e
}

// LoadingUIText returns the LoadingUIText property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#loadinguitext
func (e *Engine) LoadingUIText() string {
	retVal := e.p.Get("loadingUIText")
	return retVal.String()
}

// SetLoadingUIText sets the LoadingUIText property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#loadinguitext
func (e *Engine) SetLoadingUIText(loadingUIText string) *Engine {
	e.p.Set("loadingUIText", loadingUIText)
	return e
}

// NEVER returns the NEVER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#never
func (e *Engine) NEVER() float64 {
	retVal := e.p.Get("NEVER")
	return retVal.Float()
}

// SetNEVER sets the NEVER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#never
func (e *Engine) SetNEVER(NEVER float64) *Engine {
	e.p.Set("NEVER", NEVER)
	return e
}

// NOTEQUAL returns the NOTEQUAL property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#notequal
func (e *Engine) NOTEQUAL() float64 {
	retVal := e.p.Get("NOTEQUAL")
	return retVal.Float()
}

// SetNOTEQUAL sets the NOTEQUAL property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#notequal
func (e *Engine) SetNOTEQUAL(NOTEQUAL float64) *Engine {
	e.p.Set("NOTEQUAL", NOTEQUAL)
	return e
}

// NpmPackage returns the NpmPackage property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#npmpackage
func (e *Engine) NpmPackage() string {
	retVal := e.p.Get("NpmPackage")
	return retVal.String()
}

// SetNpmPackage sets the NpmPackage property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#npmpackage
func (e *Engine) SetNpmPackage(NpmPackage string) *Engine {
	e.p.Set("NpmPackage", NpmPackage)
	return e
}

// OfflineProviderFactory returns the OfflineProviderFactory property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#offlineproviderfactory
func (e *Engine) OfflineProviderFactory() js.Value {
	retVal := e.p.Get("OfflineProviderFactory")
	return retVal
}

// SetOfflineProviderFactory sets the OfflineProviderFactory property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#offlineproviderfactory
func (e *Engine) SetOfflineProviderFactory(OfflineProviderFactory func()) *Engine {
	e.p.Set("OfflineProviderFactory", js.FuncOf(func(this js.Value, args []js.Value) interface{} { OfflineProviderFactory(); return nil }))
	return e
}

// OnAfterShaderCompilationObservable returns the OnAfterShaderCompilationObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onaftershadercompilationobservable
func (e *Engine) OnAfterShaderCompilationObservable() *Observable {
	retVal := e.p.Get("onAfterShaderCompilationObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnAfterShaderCompilationObservable sets the OnAfterShaderCompilationObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onaftershadercompilationobservable
func (e *Engine) SetOnAfterShaderCompilationObservable(onAfterShaderCompilationObservable *Observable) *Engine {
	e.p.Set("onAfterShaderCompilationObservable", onAfterShaderCompilationObservable.JSObject())
	return e
}

// OnBeforeShaderCompilationObservable returns the OnBeforeShaderCompilationObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onbeforeshadercompilationobservable
func (e *Engine) OnBeforeShaderCompilationObservable() *Observable {
	retVal := e.p.Get("onBeforeShaderCompilationObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnBeforeShaderCompilationObservable sets the OnBeforeShaderCompilationObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onbeforeshadercompilationobservable
func (e *Engine) SetOnBeforeShaderCompilationObservable(onBeforeShaderCompilationObservable *Observable) *Engine {
	e.p.Set("onBeforeShaderCompilationObservable", onBeforeShaderCompilationObservable.JSObject())
	return e
}

// OnBeginFrameObservable returns the OnBeginFrameObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onbeginframeobservable
func (e *Engine) OnBeginFrameObservable() *Observable {
	retVal := e.p.Get("onBeginFrameObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnBeginFrameObservable sets the OnBeginFrameObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onbeginframeobservable
func (e *Engine) SetOnBeginFrameObservable(onBeginFrameObservable *Observable) *Engine {
	e.p.Set("onBeginFrameObservable", onBeginFrameObservable.JSObject())
	return e
}

// OnCanvasBlurObservable returns the OnCanvasBlurObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#oncanvasblurobservable
func (e *Engine) OnCanvasBlurObservable() *Observable {
	retVal := e.p.Get("onCanvasBlurObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnCanvasBlurObservable sets the OnCanvasBlurObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#oncanvasblurobservable
func (e *Engine) SetOnCanvasBlurObservable(onCanvasBlurObservable *Observable) *Engine {
	e.p.Set("onCanvasBlurObservable", onCanvasBlurObservable.JSObject())
	return e
}

// OnCanvasFocusObservable returns the OnCanvasFocusObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#oncanvasfocusobservable
func (e *Engine) OnCanvasFocusObservable() *Observable {
	retVal := e.p.Get("onCanvasFocusObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnCanvasFocusObservable sets the OnCanvasFocusObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#oncanvasfocusobservable
func (e *Engine) SetOnCanvasFocusObservable(onCanvasFocusObservable *Observable) *Engine {
	e.p.Set("onCanvasFocusObservable", onCanvasFocusObservable.JSObject())
	return e
}

// OnCanvasPointerOutObservable returns the OnCanvasPointerOutObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#oncanvaspointeroutobservable
func (e *Engine) OnCanvasPointerOutObservable() *Observable {
	retVal := e.p.Get("onCanvasPointerOutObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnCanvasPointerOutObservable sets the OnCanvasPointerOutObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#oncanvaspointeroutobservable
func (e *Engine) SetOnCanvasPointerOutObservable(onCanvasPointerOutObservable *Observable) *Engine {
	e.p.Set("onCanvasPointerOutObservable", onCanvasPointerOutObservable.JSObject())
	return e
}

// OnEndFrameObservable returns the OnEndFrameObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onendframeobservable
func (e *Engine) OnEndFrameObservable() *Observable {
	retVal := e.p.Get("onEndFrameObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnEndFrameObservable sets the OnEndFrameObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onendframeobservable
func (e *Engine) SetOnEndFrameObservable(onEndFrameObservable *Observable) *Engine {
	e.p.Set("onEndFrameObservable", onEndFrameObservable.JSObject())
	return e
}

// OnNewSceneAddedObservable returns the OnNewSceneAddedObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onnewsceneaddedobservable
func (e *Engine) OnNewSceneAddedObservable() *Observable {
	retVal := e.p.Get("onNewSceneAddedObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnNewSceneAddedObservable sets the OnNewSceneAddedObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onnewsceneaddedobservable
func (e *Engine) SetOnNewSceneAddedObservable(onNewSceneAddedObservable *Observable) *Engine {
	e.p.Set("onNewSceneAddedObservable", onNewSceneAddedObservable.JSObject())
	return e
}

// OnResizeObservable returns the OnResizeObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onresizeobservable
func (e *Engine) OnResizeObservable() *Observable {
	retVal := e.p.Get("onResizeObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnResizeObservable sets the OnResizeObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onresizeobservable
func (e *Engine) SetOnResizeObservable(onResizeObservable *Observable) *Engine {
	e.p.Set("onResizeObservable", onResizeObservable.JSObject())
	return e
}

// OnVRDisplayChangedObservable returns the OnVRDisplayChangedObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onvrdisplaychangedobservable
func (e *Engine) OnVRDisplayChangedObservable() *Observable {
	retVal := e.p.Get("onVRDisplayChangedObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnVRDisplayChangedObservable sets the OnVRDisplayChangedObservable property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onvrdisplaychangedobservable
func (e *Engine) SetOnVRDisplayChangedObservable(onVRDisplayChangedObservable *Observable) *Engine {
	e.p.Set("onVRDisplayChangedObservable", onVRDisplayChangedObservable.JSObject())
	return e
}

// OnVRRequestPresentComplete returns the OnVRRequestPresentComplete property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onvrrequestpresentcomplete
func (e *Engine) OnVRRequestPresentComplete() *Observable {
	retVal := e.p.Get("onVRRequestPresentComplete")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnVRRequestPresentComplete sets the OnVRRequestPresentComplete property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onvrrequestpresentcomplete
func (e *Engine) SetOnVRRequestPresentComplete(onVRRequestPresentComplete *Observable) *Engine {
	e.p.Set("onVRRequestPresentComplete", onVRRequestPresentComplete.JSObject())
	return e
}

// OnVRRequestPresentStart returns the OnVRRequestPresentStart property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onvrrequestpresentstart
func (e *Engine) OnVRRequestPresentStart() *Observable {
	retVal := e.p.Get("onVRRequestPresentStart")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnVRRequestPresentStart sets the OnVRRequestPresentStart property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#onvrrequestpresentstart
func (e *Engine) SetOnVRRequestPresentStart(onVRRequestPresentStart *Observable) *Engine {
	e.p.Set("onVRRequestPresentStart", onVRRequestPresentStart.JSObject())
	return e
}

// PerformanceMonitor returns the PerformanceMonitor property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#performancemonitor
func (e *Engine) PerformanceMonitor() *PerformanceMonitor {
	retVal := e.p.Get("performanceMonitor")
	return PerformanceMonitorFromJSObject(retVal, e.ctx)
}

// SetPerformanceMonitor sets the PerformanceMonitor property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#performancemonitor
func (e *Engine) SetPerformanceMonitor(performanceMonitor *PerformanceMonitor) *Engine {
	e.p.Set("performanceMonitor", performanceMonitor.JSObject())
	return e
}

// PostProcesses returns the PostProcesses property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#postprocesses
func (e *Engine) PostProcesses() *PostProcess {
	retVal := e.p.Get("postProcesses")
	return PostProcessFromJSObject(retVal, e.ctx)
}

// SetPostProcesses sets the PostProcesses property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#postprocesses
func (e *Engine) SetPostProcesses(postProcesses *PostProcess) *Engine {
	e.p.Set("postProcesses", postProcesses.JSObject())
	return e
}

// REPLACE returns the REPLACE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#replace
func (e *Engine) REPLACE() float64 {
	retVal := e.p.Get("REPLACE")
	return retVal.Float()
}

// SetREPLACE sets the REPLACE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#replace
func (e *Engine) SetREPLACE(REPLACE float64) *Engine {
	e.p.Set("REPLACE", REPLACE)
	return e
}

// SCALEMODE_CEILING returns the SCALEMODE_CEILING property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_ceiling
func (e *Engine) SCALEMODE_CEILING() float64 {
	retVal := e.p.Get("SCALEMODE_CEILING")
	return retVal.Float()
}

// SetSCALEMODE_CEILING sets the SCALEMODE_CEILING property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_ceiling
func (e *Engine) SetSCALEMODE_CEILING(SCALEMODE_CEILING float64) *Engine {
	e.p.Set("SCALEMODE_CEILING", SCALEMODE_CEILING)
	return e
}

// SCALEMODE_FLOOR returns the SCALEMODE_FLOOR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_floor
func (e *Engine) SCALEMODE_FLOOR() float64 {
	retVal := e.p.Get("SCALEMODE_FLOOR")
	return retVal.Float()
}

// SetSCALEMODE_FLOOR sets the SCALEMODE_FLOOR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_floor
func (e *Engine) SetSCALEMODE_FLOOR(SCALEMODE_FLOOR float64) *Engine {
	e.p.Set("SCALEMODE_FLOOR", SCALEMODE_FLOOR)
	return e
}

// SCALEMODE_NEAREST returns the SCALEMODE_NEAREST property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_nearest
func (e *Engine) SCALEMODE_NEAREST() float64 {
	retVal := e.p.Get("SCALEMODE_NEAREST")
	return retVal.Float()
}

// SetSCALEMODE_NEAREST sets the SCALEMODE_NEAREST property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_nearest
func (e *Engine) SetSCALEMODE_NEAREST(SCALEMODE_NEAREST float64) *Engine {
	e.p.Set("SCALEMODE_NEAREST", SCALEMODE_NEAREST)
	return e
}

// Scenes returns the Scenes property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#scenes
func (e *Engine) Scenes() *Scene {
	retVal := e.p.Get("scenes")
	return SceneFromJSObject(retVal, e.ctx)
}

// SetScenes sets the Scenes property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#scenes
func (e *Engine) SetScenes(scenes *Scene) *Engine {
	e.p.Set("scenes", scenes.JSObject())
	return e
}

// TEXTUREFORMAT_ALPHA returns the TEXTUREFORMAT_ALPHA property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_alpha
func (e *Engine) TEXTUREFORMAT_ALPHA() float64 {
	retVal := e.p.Get("TEXTUREFORMAT_ALPHA")
	return retVal.Float()
}

// SetTEXTUREFORMAT_ALPHA sets the TEXTUREFORMAT_ALPHA property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_alpha
func (e *Engine) SetTEXTUREFORMAT_ALPHA(TEXTUREFORMAT_ALPHA float64) *Engine {
	e.p.Set("TEXTUREFORMAT_ALPHA", TEXTUREFORMAT_ALPHA)
	return e
}

// TEXTUREFORMAT_LUMINANCE returns the TEXTUREFORMAT_LUMINANCE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_luminance
func (e *Engine) TEXTUREFORMAT_LUMINANCE() float64 {
	retVal := e.p.Get("TEXTUREFORMAT_LUMINANCE")
	return retVal.Float()
}

// SetTEXTUREFORMAT_LUMINANCE sets the TEXTUREFORMAT_LUMINANCE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_luminance
func (e *Engine) SetTEXTUREFORMAT_LUMINANCE(TEXTUREFORMAT_LUMINANCE float64) *Engine {
	e.p.Set("TEXTUREFORMAT_LUMINANCE", TEXTUREFORMAT_LUMINANCE)
	return e
}

// TEXTUREFORMAT_LUMINANCE_ALPHA returns the TEXTUREFORMAT_LUMINANCE_ALPHA property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_luminance_alpha
func (e *Engine) TEXTUREFORMAT_LUMINANCE_ALPHA() float64 {
	retVal := e.p.Get("TEXTUREFORMAT_LUMINANCE_ALPHA")
	return retVal.Float()
}

// SetTEXTUREFORMAT_LUMINANCE_ALPHA sets the TEXTUREFORMAT_LUMINANCE_ALPHA property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_luminance_alpha
func (e *Engine) SetTEXTUREFORMAT_LUMINANCE_ALPHA(TEXTUREFORMAT_LUMINANCE_ALPHA float64) *Engine {
	e.p.Set("TEXTUREFORMAT_LUMINANCE_ALPHA", TEXTUREFORMAT_LUMINANCE_ALPHA)
	return e
}

// TEXTUREFORMAT_R returns the TEXTUREFORMAT_R property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_r
func (e *Engine) TEXTUREFORMAT_R() float64 {
	retVal := e.p.Get("TEXTUREFORMAT_R")
	return retVal.Float()
}

// SetTEXTUREFORMAT_R sets the TEXTUREFORMAT_R property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_r
func (e *Engine) SetTEXTUREFORMAT_R(TEXTUREFORMAT_R float64) *Engine {
	e.p.Set("TEXTUREFORMAT_R", TEXTUREFORMAT_R)
	return e
}

// TEXTUREFORMAT_RED returns the TEXTUREFORMAT_RED property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_red
func (e *Engine) TEXTUREFORMAT_RED() float64 {
	retVal := e.p.Get("TEXTUREFORMAT_RED")
	return retVal.Float()
}

// SetTEXTUREFORMAT_RED sets the TEXTUREFORMAT_RED property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_red
func (e *Engine) SetTEXTUREFORMAT_RED(TEXTUREFORMAT_RED float64) *Engine {
	e.p.Set("TEXTUREFORMAT_RED", TEXTUREFORMAT_RED)
	return e
}

// TEXTUREFORMAT_RED_INTEGER returns the TEXTUREFORMAT_RED_INTEGER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_red_integer
func (e *Engine) TEXTUREFORMAT_RED_INTEGER() float64 {
	retVal := e.p.Get("TEXTUREFORMAT_RED_INTEGER")
	return retVal.Float()
}

// SetTEXTUREFORMAT_RED_INTEGER sets the TEXTUREFORMAT_RED_INTEGER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_red_integer
func (e *Engine) SetTEXTUREFORMAT_RED_INTEGER(TEXTUREFORMAT_RED_INTEGER float64) *Engine {
	e.p.Set("TEXTUREFORMAT_RED_INTEGER", TEXTUREFORMAT_RED_INTEGER)
	return e
}

// TEXTUREFORMAT_RG returns the TEXTUREFORMAT_RG property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_rg
func (e *Engine) TEXTUREFORMAT_RG() float64 {
	retVal := e.p.Get("TEXTUREFORMAT_RG")
	return retVal.Float()
}

// SetTEXTUREFORMAT_RG sets the TEXTUREFORMAT_RG property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_rg
func (e *Engine) SetTEXTUREFORMAT_RG(TEXTUREFORMAT_RG float64) *Engine {
	e.p.Set("TEXTUREFORMAT_RG", TEXTUREFORMAT_RG)
	return e
}

// TEXTUREFORMAT_RGB returns the TEXTUREFORMAT_RGB property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_rgb
func (e *Engine) TEXTUREFORMAT_RGB() float64 {
	retVal := e.p.Get("TEXTUREFORMAT_RGB")
	return retVal.Float()
}

// SetTEXTUREFORMAT_RGB sets the TEXTUREFORMAT_RGB property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_rgb
func (e *Engine) SetTEXTUREFORMAT_RGB(TEXTUREFORMAT_RGB float64) *Engine {
	e.p.Set("TEXTUREFORMAT_RGB", TEXTUREFORMAT_RGB)
	return e
}

// TEXTUREFORMAT_RGBA returns the TEXTUREFORMAT_RGBA property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_rgba
func (e *Engine) TEXTUREFORMAT_RGBA() float64 {
	retVal := e.p.Get("TEXTUREFORMAT_RGBA")
	return retVal.Float()
}

// SetTEXTUREFORMAT_RGBA sets the TEXTUREFORMAT_RGBA property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_rgba
func (e *Engine) SetTEXTUREFORMAT_RGBA(TEXTUREFORMAT_RGBA float64) *Engine {
	e.p.Set("TEXTUREFORMAT_RGBA", TEXTUREFORMAT_RGBA)
	return e
}

// TEXTUREFORMAT_RGBA_INTEGER returns the TEXTUREFORMAT_RGBA_INTEGER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_rgba_integer
func (e *Engine) TEXTUREFORMAT_RGBA_INTEGER() float64 {
	retVal := e.p.Get("TEXTUREFORMAT_RGBA_INTEGER")
	return retVal.Float()
}

// SetTEXTUREFORMAT_RGBA_INTEGER sets the TEXTUREFORMAT_RGBA_INTEGER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_rgba_integer
func (e *Engine) SetTEXTUREFORMAT_RGBA_INTEGER(TEXTUREFORMAT_RGBA_INTEGER float64) *Engine {
	e.p.Set("TEXTUREFORMAT_RGBA_INTEGER", TEXTUREFORMAT_RGBA_INTEGER)
	return e
}

// TEXTUREFORMAT_RGB_INTEGER returns the TEXTUREFORMAT_RGB_INTEGER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_rgb_integer
func (e *Engine) TEXTUREFORMAT_RGB_INTEGER() float64 {
	retVal := e.p.Get("TEXTUREFORMAT_RGB_INTEGER")
	return retVal.Float()
}

// SetTEXTUREFORMAT_RGB_INTEGER sets the TEXTUREFORMAT_RGB_INTEGER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_rgb_integer
func (e *Engine) SetTEXTUREFORMAT_RGB_INTEGER(TEXTUREFORMAT_RGB_INTEGER float64) *Engine {
	e.p.Set("TEXTUREFORMAT_RGB_INTEGER", TEXTUREFORMAT_RGB_INTEGER)
	return e
}

// TEXTUREFORMAT_RG_INTEGER returns the TEXTUREFORMAT_RG_INTEGER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_rg_integer
func (e *Engine) TEXTUREFORMAT_RG_INTEGER() float64 {
	retVal := e.p.Get("TEXTUREFORMAT_RG_INTEGER")
	return retVal.Float()
}

// SetTEXTUREFORMAT_RG_INTEGER sets the TEXTUREFORMAT_RG_INTEGER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_rg_integer
func (e *Engine) SetTEXTUREFORMAT_RG_INTEGER(TEXTUREFORMAT_RG_INTEGER float64) *Engine {
	e.p.Set("TEXTUREFORMAT_RG_INTEGER", TEXTUREFORMAT_RG_INTEGER)
	return e
}

// TEXTUREFORMAT_R_INTEGER returns the TEXTUREFORMAT_R_INTEGER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_r_integer
func (e *Engine) TEXTUREFORMAT_R_INTEGER() float64 {
	retVal := e.p.Get("TEXTUREFORMAT_R_INTEGER")
	return retVal.Float()
}

// SetTEXTUREFORMAT_R_INTEGER sets the TEXTUREFORMAT_R_INTEGER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#textureformat_r_integer
func (e *Engine) SetTEXTUREFORMAT_R_INTEGER(TEXTUREFORMAT_R_INTEGER float64) *Engine {
	e.p.Set("TEXTUREFORMAT_R_INTEGER", TEXTUREFORMAT_R_INTEGER)
	return e
}

// TEXTURETYPE_BYTE returns the TEXTURETYPE_BYTE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_byte
func (e *Engine) TEXTURETYPE_BYTE() float64 {
	retVal := e.p.Get("TEXTURETYPE_BYTE")
	return retVal.Float()
}

// SetTEXTURETYPE_BYTE sets the TEXTURETYPE_BYTE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_byte
func (e *Engine) SetTEXTURETYPE_BYTE(TEXTURETYPE_BYTE float64) *Engine {
	e.p.Set("TEXTURETYPE_BYTE", TEXTURETYPE_BYTE)
	return e
}

// TEXTURETYPE_FLOAT returns the TEXTURETYPE_FLOAT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_float
func (e *Engine) TEXTURETYPE_FLOAT() float64 {
	retVal := e.p.Get("TEXTURETYPE_FLOAT")
	return retVal.Float()
}

// SetTEXTURETYPE_FLOAT sets the TEXTURETYPE_FLOAT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_float
func (e *Engine) SetTEXTURETYPE_FLOAT(TEXTURETYPE_FLOAT float64) *Engine {
	e.p.Set("TEXTURETYPE_FLOAT", TEXTURETYPE_FLOAT)
	return e
}

// TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV returns the TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_float_32_unsigned_int_24_8_rev
func (e *Engine) TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV() float64 {
	retVal := e.p.Get("TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV")
	return retVal.Float()
}

// SetTEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV sets the TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_float_32_unsigned_int_24_8_rev
func (e *Engine) SetTEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV(TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV float64) *Engine {
	e.p.Set("TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV", TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV)
	return e
}

// TEXTURETYPE_HALF_FLOAT returns the TEXTURETYPE_HALF_FLOAT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_half_float
func (e *Engine) TEXTURETYPE_HALF_FLOAT() float64 {
	retVal := e.p.Get("TEXTURETYPE_HALF_FLOAT")
	return retVal.Float()
}

// SetTEXTURETYPE_HALF_FLOAT sets the TEXTURETYPE_HALF_FLOAT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_half_float
func (e *Engine) SetTEXTURETYPE_HALF_FLOAT(TEXTURETYPE_HALF_FLOAT float64) *Engine {
	e.p.Set("TEXTURETYPE_HALF_FLOAT", TEXTURETYPE_HALF_FLOAT)
	return e
}

// TEXTURETYPE_INT returns the TEXTURETYPE_INT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_int
func (e *Engine) TEXTURETYPE_INT() float64 {
	retVal := e.p.Get("TEXTURETYPE_INT")
	return retVal.Float()
}

// SetTEXTURETYPE_INT sets the TEXTURETYPE_INT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_int
func (e *Engine) SetTEXTURETYPE_INT(TEXTURETYPE_INT float64) *Engine {
	e.p.Set("TEXTURETYPE_INT", TEXTURETYPE_INT)
	return e
}

// TEXTURETYPE_SHORT returns the TEXTURETYPE_SHORT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_short
func (e *Engine) TEXTURETYPE_SHORT() float64 {
	retVal := e.p.Get("TEXTURETYPE_SHORT")
	return retVal.Float()
}

// SetTEXTURETYPE_SHORT sets the TEXTURETYPE_SHORT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_short
func (e *Engine) SetTEXTURETYPE_SHORT(TEXTURETYPE_SHORT float64) *Engine {
	e.p.Set("TEXTURETYPE_SHORT", TEXTURETYPE_SHORT)
	return e
}

// TEXTURETYPE_UNSIGNED_BYTE returns the TEXTURETYPE_UNSIGNED_BYTE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_byte
func (e *Engine) TEXTURETYPE_UNSIGNED_BYTE() float64 {
	retVal := e.p.Get("TEXTURETYPE_UNSIGNED_BYTE")
	return retVal.Float()
}

// SetTEXTURETYPE_UNSIGNED_BYTE sets the TEXTURETYPE_UNSIGNED_BYTE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_byte
func (e *Engine) SetTEXTURETYPE_UNSIGNED_BYTE(TEXTURETYPE_UNSIGNED_BYTE float64) *Engine {
	e.p.Set("TEXTURETYPE_UNSIGNED_BYTE", TEXTURETYPE_UNSIGNED_BYTE)
	return e
}

// TEXTURETYPE_UNSIGNED_INT returns the TEXTURETYPE_UNSIGNED_INT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_int
func (e *Engine) TEXTURETYPE_UNSIGNED_INT() float64 {
	retVal := e.p.Get("TEXTURETYPE_UNSIGNED_INT")
	return retVal.Float()
}

// SetTEXTURETYPE_UNSIGNED_INT sets the TEXTURETYPE_UNSIGNED_INT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_int
func (e *Engine) SetTEXTURETYPE_UNSIGNED_INT(TEXTURETYPE_UNSIGNED_INT float64) *Engine {
	e.p.Set("TEXTURETYPE_UNSIGNED_INT", TEXTURETYPE_UNSIGNED_INT)
	return e
}

// TEXTURETYPE_UNSIGNED_INTEGER returns the TEXTURETYPE_UNSIGNED_INTEGER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_integer
func (e *Engine) TEXTURETYPE_UNSIGNED_INTEGER() float64 {
	retVal := e.p.Get("TEXTURETYPE_UNSIGNED_INTEGER")
	return retVal.Float()
}

// SetTEXTURETYPE_UNSIGNED_INTEGER sets the TEXTURETYPE_UNSIGNED_INTEGER property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_integer
func (e *Engine) SetTEXTURETYPE_UNSIGNED_INTEGER(TEXTURETYPE_UNSIGNED_INTEGER float64) *Engine {
	e.p.Set("TEXTURETYPE_UNSIGNED_INTEGER", TEXTURETYPE_UNSIGNED_INTEGER)
	return e
}

// TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV returns the TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_int_10f_11f_11f_rev
func (e *Engine) TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV() float64 {
	retVal := e.p.Get("TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV")
	return retVal.Float()
}

// SetTEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV sets the TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_int_10f_11f_11f_rev
func (e *Engine) SetTEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV(TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV float64) *Engine {
	e.p.Set("TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV", TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV)
	return e
}

// TEXTURETYPE_UNSIGNED_INT_24_8 returns the TEXTURETYPE_UNSIGNED_INT_24_8 property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_int_24_8
func (e *Engine) TEXTURETYPE_UNSIGNED_INT_24_8() float64 {
	retVal := e.p.Get("TEXTURETYPE_UNSIGNED_INT_24_8")
	return retVal.Float()
}

// SetTEXTURETYPE_UNSIGNED_INT_24_8 sets the TEXTURETYPE_UNSIGNED_INT_24_8 property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_int_24_8
func (e *Engine) SetTEXTURETYPE_UNSIGNED_INT_24_8(TEXTURETYPE_UNSIGNED_INT_24_8 float64) *Engine {
	e.p.Set("TEXTURETYPE_UNSIGNED_INT_24_8", TEXTURETYPE_UNSIGNED_INT_24_8)
	return e
}

// TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV returns the TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_int_2_10_10_10_rev
func (e *Engine) TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV() float64 {
	retVal := e.p.Get("TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV")
	return retVal.Float()
}

// SetTEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV sets the TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_int_2_10_10_10_rev
func (e *Engine) SetTEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV(TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV float64) *Engine {
	e.p.Set("TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV", TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV)
	return e
}

// TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV returns the TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_int_5_9_9_9_rev
func (e *Engine) TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV() float64 {
	retVal := e.p.Get("TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV")
	return retVal.Float()
}

// SetTEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV sets the TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_int_5_9_9_9_rev
func (e *Engine) SetTEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV(TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV float64) *Engine {
	e.p.Set("TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV", TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV)
	return e
}

// TEXTURETYPE_UNSIGNED_SHORT returns the TEXTURETYPE_UNSIGNED_SHORT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_short
func (e *Engine) TEXTURETYPE_UNSIGNED_SHORT() float64 {
	retVal := e.p.Get("TEXTURETYPE_UNSIGNED_SHORT")
	return retVal.Float()
}

// SetTEXTURETYPE_UNSIGNED_SHORT sets the TEXTURETYPE_UNSIGNED_SHORT property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_short
func (e *Engine) SetTEXTURETYPE_UNSIGNED_SHORT(TEXTURETYPE_UNSIGNED_SHORT float64) *Engine {
	e.p.Set("TEXTURETYPE_UNSIGNED_SHORT", TEXTURETYPE_UNSIGNED_SHORT)
	return e
}

// TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 returns the TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_short_4_4_4_4
func (e *Engine) TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4() float64 {
	retVal := e.p.Get("TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4")
	return retVal.Float()
}

// SetTEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 sets the TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_short_4_4_4_4
func (e *Engine) SetTEXTURETYPE_UNSIGNED_SHORT_4_4_4_4(TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 float64) *Engine {
	e.p.Set("TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4", TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4)
	return e
}

// TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 returns the TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_short_5_5_5_1
func (e *Engine) TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1() float64 {
	retVal := e.p.Get("TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1")
	return retVal.Float()
}

// SetTEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 sets the TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_short_5_5_5_1
func (e *Engine) SetTEXTURETYPE_UNSIGNED_SHORT_5_5_5_1(TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 float64) *Engine {
	e.p.Set("TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1", TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1)
	return e
}

// TEXTURETYPE_UNSIGNED_SHORT_5_6_5 returns the TEXTURETYPE_UNSIGNED_SHORT_5_6_5 property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_short_5_6_5
func (e *Engine) TEXTURETYPE_UNSIGNED_SHORT_5_6_5() float64 {
	retVal := e.p.Get("TEXTURETYPE_UNSIGNED_SHORT_5_6_5")
	return retVal.Float()
}

// SetTEXTURETYPE_UNSIGNED_SHORT_5_6_5 sets the TEXTURETYPE_UNSIGNED_SHORT_5_6_5 property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texturetype_unsigned_short_5_6_5
func (e *Engine) SetTEXTURETYPE_UNSIGNED_SHORT_5_6_5(TEXTURETYPE_UNSIGNED_SHORT_5_6_5 float64) *Engine {
	e.p.Set("TEXTURETYPE_UNSIGNED_SHORT_5_6_5", TEXTURETYPE_UNSIGNED_SHORT_5_6_5)
	return e
}

// TEXTURE_BILINEAR_SAMPLINGMODE returns the TEXTURE_BILINEAR_SAMPLINGMODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_bilinear_samplingmode
func (e *Engine) TEXTURE_BILINEAR_SAMPLINGMODE() float64 {
	retVal := e.p.Get("TEXTURE_BILINEAR_SAMPLINGMODE")
	return retVal.Float()
}

// SetTEXTURE_BILINEAR_SAMPLINGMODE sets the TEXTURE_BILINEAR_SAMPLINGMODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_bilinear_samplingmode
func (e *Engine) SetTEXTURE_BILINEAR_SAMPLINGMODE(TEXTURE_BILINEAR_SAMPLINGMODE float64) *Engine {
	e.p.Set("TEXTURE_BILINEAR_SAMPLINGMODE", TEXTURE_BILINEAR_SAMPLINGMODE)
	return e
}

// TEXTURE_CLAMP_ADDRESSMODE returns the TEXTURE_CLAMP_ADDRESSMODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_clamp_addressmode
func (e *Engine) TEXTURE_CLAMP_ADDRESSMODE() float64 {
	retVal := e.p.Get("TEXTURE_CLAMP_ADDRESSMODE")
	return retVal.Float()
}

// SetTEXTURE_CLAMP_ADDRESSMODE sets the TEXTURE_CLAMP_ADDRESSMODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_clamp_addressmode
func (e *Engine) SetTEXTURE_CLAMP_ADDRESSMODE(TEXTURE_CLAMP_ADDRESSMODE float64) *Engine {
	e.p.Set("TEXTURE_CLAMP_ADDRESSMODE", TEXTURE_CLAMP_ADDRESSMODE)
	return e
}

// TEXTURE_CUBIC_MODE returns the TEXTURE_CUBIC_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_cubic_mode
func (e *Engine) TEXTURE_CUBIC_MODE() float64 {
	retVal := e.p.Get("TEXTURE_CUBIC_MODE")
	return retVal.Float()
}

// SetTEXTURE_CUBIC_MODE sets the TEXTURE_CUBIC_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_cubic_mode
func (e *Engine) SetTEXTURE_CUBIC_MODE(TEXTURE_CUBIC_MODE float64) *Engine {
	e.p.Set("TEXTURE_CUBIC_MODE", TEXTURE_CUBIC_MODE)
	return e
}

// TEXTURE_EQUIRECTANGULAR_MODE returns the TEXTURE_EQUIRECTANGULAR_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_equirectangular_mode
func (e *Engine) TEXTURE_EQUIRECTANGULAR_MODE() float64 {
	retVal := e.p.Get("TEXTURE_EQUIRECTANGULAR_MODE")
	return retVal.Float()
}

// SetTEXTURE_EQUIRECTANGULAR_MODE sets the TEXTURE_EQUIRECTANGULAR_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_equirectangular_mode
func (e *Engine) SetTEXTURE_EQUIRECTANGULAR_MODE(TEXTURE_EQUIRECTANGULAR_MODE float64) *Engine {
	e.p.Set("TEXTURE_EQUIRECTANGULAR_MODE", TEXTURE_EQUIRECTANGULAR_MODE)
	return e
}

// TEXTURE_EXPLICIT_MODE returns the TEXTURE_EXPLICIT_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_explicit_mode
func (e *Engine) TEXTURE_EXPLICIT_MODE() float64 {
	retVal := e.p.Get("TEXTURE_EXPLICIT_MODE")
	return retVal.Float()
}

// SetTEXTURE_EXPLICIT_MODE sets the TEXTURE_EXPLICIT_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_explicit_mode
func (e *Engine) SetTEXTURE_EXPLICIT_MODE(TEXTURE_EXPLICIT_MODE float64) *Engine {
	e.p.Set("TEXTURE_EXPLICIT_MODE", TEXTURE_EXPLICIT_MODE)
	return e
}

// TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE returns the TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_fixed_equirectangular_mirrored_mode
func (e *Engine) TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE() float64 {
	retVal := e.p.Get("TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE")
	return retVal.Float()
}

// SetTEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE sets the TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_fixed_equirectangular_mirrored_mode
func (e *Engine) SetTEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE(TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE float64) *Engine {
	e.p.Set("TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE", TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE)
	return e
}

// TEXTURE_FIXED_EQUIRECTANGULAR_MODE returns the TEXTURE_FIXED_EQUIRECTANGULAR_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_fixed_equirectangular_mode
func (e *Engine) TEXTURE_FIXED_EQUIRECTANGULAR_MODE() float64 {
	retVal := e.p.Get("TEXTURE_FIXED_EQUIRECTANGULAR_MODE")
	return retVal.Float()
}

// SetTEXTURE_FIXED_EQUIRECTANGULAR_MODE sets the TEXTURE_FIXED_EQUIRECTANGULAR_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_fixed_equirectangular_mode
func (e *Engine) SetTEXTURE_FIXED_EQUIRECTANGULAR_MODE(TEXTURE_FIXED_EQUIRECTANGULAR_MODE float64) *Engine {
	e.p.Set("TEXTURE_FIXED_EQUIRECTANGULAR_MODE", TEXTURE_FIXED_EQUIRECTANGULAR_MODE)
	return e
}

// TEXTURE_INVCUBIC_MODE returns the TEXTURE_INVCUBIC_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_invcubic_mode
func (e *Engine) TEXTURE_INVCUBIC_MODE() float64 {
	retVal := e.p.Get("TEXTURE_INVCUBIC_MODE")
	return retVal.Float()
}

// SetTEXTURE_INVCUBIC_MODE sets the TEXTURE_INVCUBIC_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_invcubic_mode
func (e *Engine) SetTEXTURE_INVCUBIC_MODE(TEXTURE_INVCUBIC_MODE float64) *Engine {
	e.p.Set("TEXTURE_INVCUBIC_MODE", TEXTURE_INVCUBIC_MODE)
	return e
}

// TEXTURE_LINEAR_LINEAR returns the TEXTURE_LINEAR_LINEAR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_linear_linear
func (e *Engine) TEXTURE_LINEAR_LINEAR() float64 {
	retVal := e.p.Get("TEXTURE_LINEAR_LINEAR")
	return retVal.Float()
}

// SetTEXTURE_LINEAR_LINEAR sets the TEXTURE_LINEAR_LINEAR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_linear_linear
func (e *Engine) SetTEXTURE_LINEAR_LINEAR(TEXTURE_LINEAR_LINEAR float64) *Engine {
	e.p.Set("TEXTURE_LINEAR_LINEAR", TEXTURE_LINEAR_LINEAR)
	return e
}

// TEXTURE_LINEAR_LINEAR_MIPLINEAR returns the TEXTURE_LINEAR_LINEAR_MIPLINEAR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_linear_linear_miplinear
func (e *Engine) TEXTURE_LINEAR_LINEAR_MIPLINEAR() float64 {
	retVal := e.p.Get("TEXTURE_LINEAR_LINEAR_MIPLINEAR")
	return retVal.Float()
}

// SetTEXTURE_LINEAR_LINEAR_MIPLINEAR sets the TEXTURE_LINEAR_LINEAR_MIPLINEAR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_linear_linear_miplinear
func (e *Engine) SetTEXTURE_LINEAR_LINEAR_MIPLINEAR(TEXTURE_LINEAR_LINEAR_MIPLINEAR float64) *Engine {
	e.p.Set("TEXTURE_LINEAR_LINEAR_MIPLINEAR", TEXTURE_LINEAR_LINEAR_MIPLINEAR)
	return e
}

// TEXTURE_LINEAR_LINEAR_MIPNEAREST returns the TEXTURE_LINEAR_LINEAR_MIPNEAREST property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_linear_linear_mipnearest
func (e *Engine) TEXTURE_LINEAR_LINEAR_MIPNEAREST() float64 {
	retVal := e.p.Get("TEXTURE_LINEAR_LINEAR_MIPNEAREST")
	return retVal.Float()
}

// SetTEXTURE_LINEAR_LINEAR_MIPNEAREST sets the TEXTURE_LINEAR_LINEAR_MIPNEAREST property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_linear_linear_mipnearest
func (e *Engine) SetTEXTURE_LINEAR_LINEAR_MIPNEAREST(TEXTURE_LINEAR_LINEAR_MIPNEAREST float64) *Engine {
	e.p.Set("TEXTURE_LINEAR_LINEAR_MIPNEAREST", TEXTURE_LINEAR_LINEAR_MIPNEAREST)
	return e
}

// TEXTURE_LINEAR_NEAREST returns the TEXTURE_LINEAR_NEAREST property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_linear_nearest
func (e *Engine) TEXTURE_LINEAR_NEAREST() float64 {
	retVal := e.p.Get("TEXTURE_LINEAR_NEAREST")
	return retVal.Float()
}

// SetTEXTURE_LINEAR_NEAREST sets the TEXTURE_LINEAR_NEAREST property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_linear_nearest
func (e *Engine) SetTEXTURE_LINEAR_NEAREST(TEXTURE_LINEAR_NEAREST float64) *Engine {
	e.p.Set("TEXTURE_LINEAR_NEAREST", TEXTURE_LINEAR_NEAREST)
	return e
}

// TEXTURE_LINEAR_NEAREST_MIPLINEAR returns the TEXTURE_LINEAR_NEAREST_MIPLINEAR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_linear_nearest_miplinear
func (e *Engine) TEXTURE_LINEAR_NEAREST_MIPLINEAR() float64 {
	retVal := e.p.Get("TEXTURE_LINEAR_NEAREST_MIPLINEAR")
	return retVal.Float()
}

// SetTEXTURE_LINEAR_NEAREST_MIPLINEAR sets the TEXTURE_LINEAR_NEAREST_MIPLINEAR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_linear_nearest_miplinear
func (e *Engine) SetTEXTURE_LINEAR_NEAREST_MIPLINEAR(TEXTURE_LINEAR_NEAREST_MIPLINEAR float64) *Engine {
	e.p.Set("TEXTURE_LINEAR_NEAREST_MIPLINEAR", TEXTURE_LINEAR_NEAREST_MIPLINEAR)
	return e
}

// TEXTURE_LINEAR_NEAREST_MIPNEAREST returns the TEXTURE_LINEAR_NEAREST_MIPNEAREST property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_linear_nearest_mipnearest
func (e *Engine) TEXTURE_LINEAR_NEAREST_MIPNEAREST() float64 {
	retVal := e.p.Get("TEXTURE_LINEAR_NEAREST_MIPNEAREST")
	return retVal.Float()
}

// SetTEXTURE_LINEAR_NEAREST_MIPNEAREST sets the TEXTURE_LINEAR_NEAREST_MIPNEAREST property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_linear_nearest_mipnearest
func (e *Engine) SetTEXTURE_LINEAR_NEAREST_MIPNEAREST(TEXTURE_LINEAR_NEAREST_MIPNEAREST float64) *Engine {
	e.p.Set("TEXTURE_LINEAR_NEAREST_MIPNEAREST", TEXTURE_LINEAR_NEAREST_MIPNEAREST)
	return e
}

// TEXTURE_MIRROR_ADDRESSMODE returns the TEXTURE_MIRROR_ADDRESSMODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_mirror_addressmode
func (e *Engine) TEXTURE_MIRROR_ADDRESSMODE() float64 {
	retVal := e.p.Get("TEXTURE_MIRROR_ADDRESSMODE")
	return retVal.Float()
}

// SetTEXTURE_MIRROR_ADDRESSMODE sets the TEXTURE_MIRROR_ADDRESSMODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_mirror_addressmode
func (e *Engine) SetTEXTURE_MIRROR_ADDRESSMODE(TEXTURE_MIRROR_ADDRESSMODE float64) *Engine {
	e.p.Set("TEXTURE_MIRROR_ADDRESSMODE", TEXTURE_MIRROR_ADDRESSMODE)
	return e
}

// TEXTURE_NEAREST_LINEAR returns the TEXTURE_NEAREST_LINEAR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_nearest_linear
func (e *Engine) TEXTURE_NEAREST_LINEAR() float64 {
	retVal := e.p.Get("TEXTURE_NEAREST_LINEAR")
	return retVal.Float()
}

// SetTEXTURE_NEAREST_LINEAR sets the TEXTURE_NEAREST_LINEAR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_nearest_linear
func (e *Engine) SetTEXTURE_NEAREST_LINEAR(TEXTURE_NEAREST_LINEAR float64) *Engine {
	e.p.Set("TEXTURE_NEAREST_LINEAR", TEXTURE_NEAREST_LINEAR)
	return e
}

// TEXTURE_NEAREST_LINEAR_MIPLINEAR returns the TEXTURE_NEAREST_LINEAR_MIPLINEAR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_nearest_linear_miplinear
func (e *Engine) TEXTURE_NEAREST_LINEAR_MIPLINEAR() float64 {
	retVal := e.p.Get("TEXTURE_NEAREST_LINEAR_MIPLINEAR")
	return retVal.Float()
}

// SetTEXTURE_NEAREST_LINEAR_MIPLINEAR sets the TEXTURE_NEAREST_LINEAR_MIPLINEAR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_nearest_linear_miplinear
func (e *Engine) SetTEXTURE_NEAREST_LINEAR_MIPLINEAR(TEXTURE_NEAREST_LINEAR_MIPLINEAR float64) *Engine {
	e.p.Set("TEXTURE_NEAREST_LINEAR_MIPLINEAR", TEXTURE_NEAREST_LINEAR_MIPLINEAR)
	return e
}

// TEXTURE_NEAREST_LINEAR_MIPNEAREST returns the TEXTURE_NEAREST_LINEAR_MIPNEAREST property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_nearest_linear_mipnearest
func (e *Engine) TEXTURE_NEAREST_LINEAR_MIPNEAREST() float64 {
	retVal := e.p.Get("TEXTURE_NEAREST_LINEAR_MIPNEAREST")
	return retVal.Float()
}

// SetTEXTURE_NEAREST_LINEAR_MIPNEAREST sets the TEXTURE_NEAREST_LINEAR_MIPNEAREST property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_nearest_linear_mipnearest
func (e *Engine) SetTEXTURE_NEAREST_LINEAR_MIPNEAREST(TEXTURE_NEAREST_LINEAR_MIPNEAREST float64) *Engine {
	e.p.Set("TEXTURE_NEAREST_LINEAR_MIPNEAREST", TEXTURE_NEAREST_LINEAR_MIPNEAREST)
	return e
}

// TEXTURE_NEAREST_NEAREST returns the TEXTURE_NEAREST_NEAREST property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_nearest_nearest
func (e *Engine) TEXTURE_NEAREST_NEAREST() float64 {
	retVal := e.p.Get("TEXTURE_NEAREST_NEAREST")
	return retVal.Float()
}

// SetTEXTURE_NEAREST_NEAREST sets the TEXTURE_NEAREST_NEAREST property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_nearest_nearest
func (e *Engine) SetTEXTURE_NEAREST_NEAREST(TEXTURE_NEAREST_NEAREST float64) *Engine {
	e.p.Set("TEXTURE_NEAREST_NEAREST", TEXTURE_NEAREST_NEAREST)
	return e
}

// TEXTURE_NEAREST_NEAREST_MIPLINEAR returns the TEXTURE_NEAREST_NEAREST_MIPLINEAR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_nearest_nearest_miplinear
func (e *Engine) TEXTURE_NEAREST_NEAREST_MIPLINEAR() float64 {
	retVal := e.p.Get("TEXTURE_NEAREST_NEAREST_MIPLINEAR")
	return retVal.Float()
}

// SetTEXTURE_NEAREST_NEAREST_MIPLINEAR sets the TEXTURE_NEAREST_NEAREST_MIPLINEAR property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_nearest_nearest_miplinear
func (e *Engine) SetTEXTURE_NEAREST_NEAREST_MIPLINEAR(TEXTURE_NEAREST_NEAREST_MIPLINEAR float64) *Engine {
	e.p.Set("TEXTURE_NEAREST_NEAREST_MIPLINEAR", TEXTURE_NEAREST_NEAREST_MIPLINEAR)
	return e
}

// TEXTURE_NEAREST_NEAREST_MIPNEAREST returns the TEXTURE_NEAREST_NEAREST_MIPNEAREST property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_nearest_nearest_mipnearest
func (e *Engine) TEXTURE_NEAREST_NEAREST_MIPNEAREST() float64 {
	retVal := e.p.Get("TEXTURE_NEAREST_NEAREST_MIPNEAREST")
	return retVal.Float()
}

// SetTEXTURE_NEAREST_NEAREST_MIPNEAREST sets the TEXTURE_NEAREST_NEAREST_MIPNEAREST property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_nearest_nearest_mipnearest
func (e *Engine) SetTEXTURE_NEAREST_NEAREST_MIPNEAREST(TEXTURE_NEAREST_NEAREST_MIPNEAREST float64) *Engine {
	e.p.Set("TEXTURE_NEAREST_NEAREST_MIPNEAREST", TEXTURE_NEAREST_NEAREST_MIPNEAREST)
	return e
}

// TEXTURE_NEAREST_SAMPLINGMODE returns the TEXTURE_NEAREST_SAMPLINGMODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_nearest_samplingmode
func (e *Engine) TEXTURE_NEAREST_SAMPLINGMODE() float64 {
	retVal := e.p.Get("TEXTURE_NEAREST_SAMPLINGMODE")
	return retVal.Float()
}

// SetTEXTURE_NEAREST_SAMPLINGMODE sets the TEXTURE_NEAREST_SAMPLINGMODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_nearest_samplingmode
func (e *Engine) SetTEXTURE_NEAREST_SAMPLINGMODE(TEXTURE_NEAREST_SAMPLINGMODE float64) *Engine {
	e.p.Set("TEXTURE_NEAREST_SAMPLINGMODE", TEXTURE_NEAREST_SAMPLINGMODE)
	return e
}

// TEXTURE_PLANAR_MODE returns the TEXTURE_PLANAR_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_planar_mode
func (e *Engine) TEXTURE_PLANAR_MODE() float64 {
	retVal := e.p.Get("TEXTURE_PLANAR_MODE")
	return retVal.Float()
}

// SetTEXTURE_PLANAR_MODE sets the TEXTURE_PLANAR_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_planar_mode
func (e *Engine) SetTEXTURE_PLANAR_MODE(TEXTURE_PLANAR_MODE float64) *Engine {
	e.p.Set("TEXTURE_PLANAR_MODE", TEXTURE_PLANAR_MODE)
	return e
}

// TEXTURE_PROJECTION_MODE returns the TEXTURE_PROJECTION_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_projection_mode
func (e *Engine) TEXTURE_PROJECTION_MODE() float64 {
	retVal := e.p.Get("TEXTURE_PROJECTION_MODE")
	return retVal.Float()
}

// SetTEXTURE_PROJECTION_MODE sets the TEXTURE_PROJECTION_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_projection_mode
func (e *Engine) SetTEXTURE_PROJECTION_MODE(TEXTURE_PROJECTION_MODE float64) *Engine {
	e.p.Set("TEXTURE_PROJECTION_MODE", TEXTURE_PROJECTION_MODE)
	return e
}

// TEXTURE_SKYBOX_MODE returns the TEXTURE_SKYBOX_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_skybox_mode
func (e *Engine) TEXTURE_SKYBOX_MODE() float64 {
	retVal := e.p.Get("TEXTURE_SKYBOX_MODE")
	return retVal.Float()
}

// SetTEXTURE_SKYBOX_MODE sets the TEXTURE_SKYBOX_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_skybox_mode
func (e *Engine) SetTEXTURE_SKYBOX_MODE(TEXTURE_SKYBOX_MODE float64) *Engine {
	e.p.Set("TEXTURE_SKYBOX_MODE", TEXTURE_SKYBOX_MODE)
	return e
}

// TEXTURE_SPHERICAL_MODE returns the TEXTURE_SPHERICAL_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_spherical_mode
func (e *Engine) TEXTURE_SPHERICAL_MODE() float64 {
	retVal := e.p.Get("TEXTURE_SPHERICAL_MODE")
	return retVal.Float()
}

// SetTEXTURE_SPHERICAL_MODE sets the TEXTURE_SPHERICAL_MODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_spherical_mode
func (e *Engine) SetTEXTURE_SPHERICAL_MODE(TEXTURE_SPHERICAL_MODE float64) *Engine {
	e.p.Set("TEXTURE_SPHERICAL_MODE", TEXTURE_SPHERICAL_MODE)
	return e
}

// TEXTURE_TRILINEAR_SAMPLINGMODE returns the TEXTURE_TRILINEAR_SAMPLINGMODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_trilinear_samplingmode
func (e *Engine) TEXTURE_TRILINEAR_SAMPLINGMODE() float64 {
	retVal := e.p.Get("TEXTURE_TRILINEAR_SAMPLINGMODE")
	return retVal.Float()
}

// SetTEXTURE_TRILINEAR_SAMPLINGMODE sets the TEXTURE_TRILINEAR_SAMPLINGMODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_trilinear_samplingmode
func (e *Engine) SetTEXTURE_TRILINEAR_SAMPLINGMODE(TEXTURE_TRILINEAR_SAMPLINGMODE float64) *Engine {
	e.p.Set("TEXTURE_TRILINEAR_SAMPLINGMODE", TEXTURE_TRILINEAR_SAMPLINGMODE)
	return e
}

// TEXTURE_WRAP_ADDRESSMODE returns the TEXTURE_WRAP_ADDRESSMODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_wrap_addressmode
func (e *Engine) TEXTURE_WRAP_ADDRESSMODE() float64 {
	retVal := e.p.Get("TEXTURE_WRAP_ADDRESSMODE")
	return retVal.Float()
}

// SetTEXTURE_WRAP_ADDRESSMODE sets the TEXTURE_WRAP_ADDRESSMODE property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#texture_wrap_addressmode
func (e *Engine) SetTEXTURE_WRAP_ADDRESSMODE(TEXTURE_WRAP_ADDRESSMODE float64) *Engine {
	e.p.Set("TEXTURE_WRAP_ADDRESSMODE", TEXTURE_WRAP_ADDRESSMODE)
	return e
}

// Version returns the Version property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#version
func (e *Engine) Version() string {
	retVal := e.p.Get("Version")
	return retVal.String()
}

// SetVersion sets the Version property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#version
func (e *Engine) SetVersion(Version string) *Engine {
	e.p.Set("Version", Version)
	return e
}

// Views returns the Views property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#views
func (e *Engine) Views() *EngineView {
	retVal := e.p.Get("views")
	return EngineViewFromJSObject(retVal, e.ctx)
}

// SetViews sets the Views property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#views
func (e *Engine) SetViews(views *EngineView) *Engine {
	e.p.Set("views", views.JSObject())
	return e
}

// VrPresentationAttributes returns the VrPresentationAttributes property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#vrpresentationattributes
func (e *Engine) VrPresentationAttributes() *IVRPresentationAttributes {
	retVal := e.p.Get("vrPresentationAttributes")
	return IVRPresentationAttributesFromJSObject(retVal, e.ctx)
}

// SetVrPresentationAttributes sets the VrPresentationAttributes property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#vrpresentationattributes
func (e *Engine) SetVrPresentationAttributes(vrPresentationAttributes *IVRPresentationAttributes) *Engine {
	e.p.Set("vrPresentationAttributes", vrPresentationAttributes.JSObject())
	return e
}

// _RescalePostProcessFactory returns the _RescalePostProcessFactory property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#_rescalepostprocessfactory
func (e *Engine) _RescalePostProcessFactory() js.Value {
	retVal := e.p.Get("_RescalePostProcessFactory")
	return retVal
}

// Set_RescalePostProcessFactory sets the _RescalePostProcessFactory property of class Engine.
//
// https://doc.babylonjs.com/api/classes/babylon.engine#_rescalepostprocessfactory
func (e *Engine) Set_RescalePostProcessFactory(_RescalePostProcessFactory func()) *Engine {
	e.p.Set("_RescalePostProcessFactory", js.FuncOf(func(this js.Value, args []js.Value) interface{} { _RescalePostProcessFactory(); return nil }))
	return e
}
