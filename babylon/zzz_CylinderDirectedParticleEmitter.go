// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CylinderDirectedParticleEmitter represents a babylon.js CylinderDirectedParticleEmitter.
// Particle emitter emitting particles from the inside of a cylinder.
// It emits the particles randomly between two vectors.
type CylinderDirectedParticleEmitter struct{ *CylinderParticleEmitter }

// JSObject returns the underlying js.Value.
func (c *CylinderDirectedParticleEmitter) JSObject() js.Value { return c.p }

// CylinderDirectedParticleEmitter returns a CylinderDirectedParticleEmitter JavaScript class.
func (ba *Babylon) CylinderDirectedParticleEmitter() *CylinderDirectedParticleEmitter {
	p := ba.ctx.Get("CylinderDirectedParticleEmitter")
	return CylinderDirectedParticleEmitterFromJSObject(p)
}

// CylinderDirectedParticleEmitterFromJSObject returns a wrapped CylinderDirectedParticleEmitter JavaScript class.
func CylinderDirectedParticleEmitterFromJSObject(p js.Value) *CylinderDirectedParticleEmitter {
	return &CylinderDirectedParticleEmitter{CylinderParticleEmitterFromJSObject(p)}
}

// NewCylinderDirectedParticleEmitterOpts contains optional parameters for NewCylinderDirectedParticleEmitter.
type NewCylinderDirectedParticleEmitterOpts struct {
	Radius *JSFloat64

	Height *JSFloat64

	RadiusRange *JSFloat64

	Direction1 *Vector3

	Direction2 *Vector3
}

// NewCylinderDirectedParticleEmitter returns a new CylinderDirectedParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.cylinderdirectedparticleemitter
func (ba *Babylon) NewCylinderDirectedParticleEmitter(opts *NewCylinderDirectedParticleEmitterOpts) *CylinderDirectedParticleEmitter {
	if opts == nil {
		opts = &NewCylinderDirectedParticleEmitterOpts{}
	}

	p := ba.ctx.Get("CylinderDirectedParticleEmitter").New(opts.Radius, opts.Height, opts.RadiusRange, opts.Direction1.JSObject(), opts.Direction2.JSObject())
	return CylinderDirectedParticleEmitterFromJSObject(p)
}

// TODO: methods
