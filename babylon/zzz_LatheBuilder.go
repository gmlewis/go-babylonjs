// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// LatheBuilder represents a babylon.js LatheBuilder.
// Class containing static functions to help procedurally build meshes
type LatheBuilder struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (l *LatheBuilder) JSObject() js.Value { return l.p }

// LatheBuilder returns a LatheBuilder JavaScript class.
func (ba *Babylon) LatheBuilder() *LatheBuilder {
	p := ba.ctx.Get("LatheBuilder")
	return LatheBuilderFromJSObject(p, ba.ctx)
}

// LatheBuilderFromJSObject returns a wrapped LatheBuilder JavaScript class.
func LatheBuilderFromJSObject(p js.Value, ctx js.Value) *LatheBuilder {
	return &LatheBuilder{p: p, ctx: ctx}
}

// LatheBuilderArrayToJSArray returns a JavaScript Array for the wrapped array.
func LatheBuilderArrayToJSArray(array []*LatheBuilder) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// LatheBuilderCreateLatheOpts contains optional parameters for LatheBuilder.CreateLathe.
type LatheBuilderCreateLatheOpts struct {
	Scene *Scene
}

// CreateLathe calls the CreateLathe method on the LatheBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.lathebuilder#createlathe
func (l *LatheBuilder) CreateLathe(name string, options js.Value, opts *LatheBuilderCreateLatheOpts) *Mesh {
	if opts == nil {
		opts = &LatheBuilderCreateLatheOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, options)

	if opts.Scene == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scene.JSObject())
	}

	retVal := l.p.Call("CreateLathe", args...)
	return MeshFromJSObject(retVal, l.ctx)
}
