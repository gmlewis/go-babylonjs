// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CustomMaterial represents a babylon.js CustomMaterial.
//
type CustomMaterial struct {
	*StandardMaterial
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *CustomMaterial) JSObject() js.Value { return c.p }

// CustomMaterial returns a CustomMaterial JavaScript class.
func (ba *Babylon) CustomMaterial() *CustomMaterial {
	p := ba.ctx.Get("CustomMaterial")
	return CustomMaterialFromJSObject(p, ba.ctx)
}

// CustomMaterialFromJSObject returns a wrapped CustomMaterial JavaScript class.
func CustomMaterialFromJSObject(p js.Value, ctx js.Value) *CustomMaterial {
	return &CustomMaterial{StandardMaterial: StandardMaterialFromJSObject(p, ctx), ctx: ctx}
}

// CustomMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func CustomMaterialArrayToJSArray(array []*CustomMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewCustomMaterial returns a new CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial
func (ba *Babylon) NewCustomMaterial(name string, scene *Scene) *CustomMaterial {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("CustomMaterial").New(args...)
	return CustomMaterialFromJSObject(p, ba.ctx)
}

// AddUniform calls the AddUniform method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#adduniform
func (c *CustomMaterial) AddUniform(name string, kind string, param JSObject) *CustomMaterial {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)

	args = append(args, kind)

	if param == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, param.JSObject())
	}

	retVal := c.p.Call("AddUniform", args...)
	return CustomMaterialFromJSObject(retVal, c.ctx)
}

// AttachAfterBind calls the AttachAfterBind method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#attachafterbind
func (c *CustomMaterial) AttachAfterBind(mesh *Mesh, effect *Effect) {

	args := make([]interface{}, 0, 2+0)

	if mesh == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, mesh.JSObject())
	}

	if effect == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, effect.JSObject())
	}

	c.p.Call("AttachAfterBind", args...)
}

// Builder calls the Builder method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#builder
func (c *CustomMaterial) Builder(shaderName string, uniforms []string, uniformBuffers []string, samplers []string, defines js.Value) string {

	args := make([]interface{}, 0, 5+0)

	args = append(args, shaderName)

	args = append(args, uniforms)

	args = append(args, uniformBuffers)

	args = append(args, samplers)

	args = append(args, defines)

	retVal := c.p.Call("Builder", args...)
	return retVal.String()
}

// Fragment_Before_Fog calls the Fragment_Before_Fog method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#fragment_before_fog
func (c *CustomMaterial) Fragment_Before_Fog(shaderPart string) *CustomMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, shaderPart)

	retVal := c.p.Call("Fragment_Before_Fog", args...)
	return CustomMaterialFromJSObject(retVal, c.ctx)
}

// Fragment_Before_FragColor calls the Fragment_Before_FragColor method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#fragment_before_fragcolor
func (c *CustomMaterial) Fragment_Before_FragColor(shaderPart string) *CustomMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, shaderPart)

	retVal := c.p.Call("Fragment_Before_FragColor", args...)
	return CustomMaterialFromJSObject(retVal, c.ctx)
}

// Fragment_Before_Lights calls the Fragment_Before_Lights method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#fragment_before_lights
func (c *CustomMaterial) Fragment_Before_Lights(shaderPart string) *CustomMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, shaderPart)

	retVal := c.p.Call("Fragment_Before_Lights", args...)
	return CustomMaterialFromJSObject(retVal, c.ctx)
}

// Fragment_Begin calls the Fragment_Begin method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#fragment_begin
func (c *CustomMaterial) Fragment_Begin(shaderPart string) *CustomMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, shaderPart)

	retVal := c.p.Call("Fragment_Begin", args...)
	return CustomMaterialFromJSObject(retVal, c.ctx)
}

// Fragment_Custom_Alpha calls the Fragment_Custom_Alpha method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#fragment_custom_alpha
func (c *CustomMaterial) Fragment_Custom_Alpha(shaderPart string) *CustomMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, shaderPart)

	retVal := c.p.Call("Fragment_Custom_Alpha", args...)
	return CustomMaterialFromJSObject(retVal, c.ctx)
}

// Fragment_Custom_Diffuse calls the Fragment_Custom_Diffuse method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#fragment_custom_diffuse
func (c *CustomMaterial) Fragment_Custom_Diffuse(shaderPart string) *CustomMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, shaderPart)

	retVal := c.p.Call("Fragment_Custom_Diffuse", args...)
	return CustomMaterialFromJSObject(retVal, c.ctx)
}

// Fragment_Definitions calls the Fragment_Definitions method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#fragment_definitions
func (c *CustomMaterial) Fragment_Definitions(shaderPart string) *CustomMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, shaderPart)

	retVal := c.p.Call("Fragment_Definitions", args...)
	return CustomMaterialFromJSObject(retVal, c.ctx)
}

// Fragment_MainBegin calls the Fragment_MainBegin method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#fragment_mainbegin
func (c *CustomMaterial) Fragment_MainBegin(shaderPart string) *CustomMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, shaderPart)

	retVal := c.p.Call("Fragment_MainBegin", args...)
	return CustomMaterialFromJSObject(retVal, c.ctx)
}

// ReviewUniform calls the ReviewUniform method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#reviewuniform
func (c *CustomMaterial) ReviewUniform(name string, arr []string) []string {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)

	args = append(args, arr)

	retVal := c.p.Call("ReviewUniform", args...)
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// Vertex_Before_NormalUpdated calls the Vertex_Before_NormalUpdated method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#vertex_before_normalupdated
func (c *CustomMaterial) Vertex_Before_NormalUpdated(shaderPart string) *CustomMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, shaderPart)

	retVal := c.p.Call("Vertex_Before_NormalUpdated", args...)
	return CustomMaterialFromJSObject(retVal, c.ctx)
}

// Vertex_Before_PositionUpdated calls the Vertex_Before_PositionUpdated method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#vertex_before_positionupdated
func (c *CustomMaterial) Vertex_Before_PositionUpdated(shaderPart string) *CustomMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, shaderPart)

	retVal := c.p.Call("Vertex_Before_PositionUpdated", args...)
	return CustomMaterialFromJSObject(retVal, c.ctx)
}

// Vertex_Begin calls the Vertex_Begin method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#vertex_begin
func (c *CustomMaterial) Vertex_Begin(shaderPart string) *CustomMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, shaderPart)

	retVal := c.p.Call("Vertex_Begin", args...)
	return CustomMaterialFromJSObject(retVal, c.ctx)
}

// Vertex_Definitions calls the Vertex_Definitions method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#vertex_definitions
func (c *CustomMaterial) Vertex_Definitions(shaderPart string) *CustomMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, shaderPart)

	retVal := c.p.Call("Vertex_Definitions", args...)
	return CustomMaterialFromJSObject(retVal, c.ctx)
}

// Vertex_MainBegin calls the Vertex_MainBegin method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#vertex_mainbegin
func (c *CustomMaterial) Vertex_MainBegin(shaderPart string) *CustomMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, shaderPart)

	retVal := c.p.Call("Vertex_MainBegin", args...)
	return CustomMaterialFromJSObject(retVal, c.ctx)
}

// Vertex_MainEnd calls the Vertex_MainEnd method on the CustomMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#vertex_mainend
func (c *CustomMaterial) Vertex_MainEnd(shaderPart string) *CustomMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, shaderPart)

	retVal := c.p.Call("Vertex_MainEnd", args...)
	return CustomMaterialFromJSObject(retVal, c.ctx)
}

// CustomParts returns the CustomParts property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#customparts
func (c *CustomMaterial) CustomParts() *ShaderSpecialParts {
	retVal := c.p.Get("CustomParts")
	return ShaderSpecialPartsFromJSObject(retVal, c.ctx)
}

// SetCustomParts sets the CustomParts property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#customparts
func (c *CustomMaterial) SetCustomParts(CustomParts *ShaderSpecialParts) *CustomMaterial {
	c.p.Set("CustomParts", CustomParts.JSObject())
	return c
}

// FragmentShader returns the FragmentShader property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#fragmentshader
func (c *CustomMaterial) FragmentShader() string {
	retVal := c.p.Get("FragmentShader")
	return retVal.String()
}

// SetFragmentShader sets the FragmentShader property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#fragmentshader
func (c *CustomMaterial) SetFragmentShader(FragmentShader string) *CustomMaterial {
	c.p.Set("FragmentShader", FragmentShader)
	return c
}

// ShaderIndexer returns the ShaderIndexer property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#shaderindexer
func (c *CustomMaterial) ShaderIndexer() float64 {
	retVal := c.p.Get("ShaderIndexer")
	return retVal.Float()
}

// SetShaderIndexer sets the ShaderIndexer property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#shaderindexer
func (c *CustomMaterial) SetShaderIndexer(ShaderIndexer float64) *CustomMaterial {
	c.p.Set("ShaderIndexer", ShaderIndexer)
	return c
}

// VertexShader returns the VertexShader property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#vertexshader
func (c *CustomMaterial) VertexShader() string {
	retVal := c.p.Get("VertexShader")
	return retVal.String()
}

// SetVertexShader sets the VertexShader property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#vertexshader
func (c *CustomMaterial) SetVertexShader(VertexShader string) *CustomMaterial {
	c.p.Set("VertexShader", VertexShader)
	return c
}

// _createdShaderName returns the _createdShaderName property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#_createdshadername
func (c *CustomMaterial) _createdShaderName() string {
	retVal := c.p.Get("_createdShaderName")
	return retVal.String()
}

// Set_createdShaderName sets the _createdShaderName property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#_createdshadername
func (c *CustomMaterial) Set_createdShaderName(_createdShaderName string) *CustomMaterial {
	c.p.Set("_createdShaderName", _createdShaderName)
	return c
}

// _customUniform returns the _customUniform property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#_customuniform
func (c *CustomMaterial) _customUniform() []string {
	retVal := c.p.Get("_customUniform")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// Set_customUniform sets the _customUniform property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#_customuniform
func (c *CustomMaterial) Set_customUniform(_customUniform []string) *CustomMaterial {
	c.p.Set("_customUniform", _customUniform)
	return c
}

// _isCreatedShader returns the _isCreatedShader property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#_iscreatedshader
func (c *CustomMaterial) _isCreatedShader() bool {
	retVal := c.p.Get("_isCreatedShader")
	return retVal.Bool()
}

// Set_isCreatedShader sets the _isCreatedShader property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#_iscreatedshader
func (c *CustomMaterial) Set_isCreatedShader(_isCreatedShader bool) *CustomMaterial {
	c.p.Set("_isCreatedShader", _isCreatedShader)
	return c
}

// _newSamplerInstances returns the _newSamplerInstances property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#_newsamplerinstances
func (c *CustomMaterial) _newSamplerInstances() []*Texture {
	retVal := c.p.Get("_newSamplerInstances")
	result := []*Texture{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, TextureFromJSObject(retVal.Index(ri), c.ctx))
	}
	return result
}

// Set_newSamplerInstances sets the _newSamplerInstances property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#_newsamplerinstances
func (c *CustomMaterial) Set_newSamplerInstances(_newSamplerInstances []*Texture) *CustomMaterial {
	c.p.Set("_newSamplerInstances", _newSamplerInstances)
	return c
}

// _newUniformInstances returns the _newUniformInstances property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#_newuniforminstances
func (c *CustomMaterial) _newUniformInstances() js.Value {
	retVal := c.p.Get("_newUniformInstances")
	return retVal
}

// Set_newUniformInstances sets the _newUniformInstances property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#_newuniforminstances
func (c *CustomMaterial) Set_newUniformInstances(_newUniformInstances JSObject) *CustomMaterial {
	c.p.Set("_newUniformInstances", _newUniformInstances.JSObject())
	return c
}

// _newUniforms returns the _newUniforms property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#_newuniforms
func (c *CustomMaterial) _newUniforms() []string {
	retVal := c.p.Get("_newUniforms")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// Set_newUniforms sets the _newUniforms property of class CustomMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.custommaterial#_newuniforms
func (c *CustomMaterial) Set_newUniforms(_newUniforms []string) *CustomMaterial {
	c.p.Set("_newUniforms", _newUniforms)
	return c
}
