// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PhotoDome represents a babylon.js PhotoDome.
// Display a 360 degree photo on an approximately spherical surface, useful for VR applications or skyboxes.
// As a subclass of TransformNode, this allow parenting to the camera with different locations in the scene.
// This class achieves its effect with a Texture and a correctly configured BackgroundMaterial on an inverted sphere.
// Potential additions to this helper include zoom and and non-infinite distance rendering effects.
type PhotoDome struct {
	*TransformNode
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PhotoDome) JSObject() js.Value { return p.p }

// PhotoDome returns a PhotoDome JavaScript class.
func (ba *Babylon) PhotoDome() *PhotoDome {
	p := ba.ctx.Get("PhotoDome")
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// PhotoDomeFromJSObject returns a wrapped PhotoDome JavaScript class.
func PhotoDomeFromJSObject(p js.Value, ctx js.Value) *PhotoDome {
	return &PhotoDome{TransformNode: TransformNodeFromJSObject(p, ctx), ctx: ctx}
}

// PhotoDomeArrayToJSArray returns a JavaScript Array for the wrapped array.
func PhotoDomeArrayToJSArray(array []*PhotoDome) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPhotoDomeOpts contains optional parameters for NewPhotoDome.
type NewPhotoDomeOpts struct {
	OnError *func()
}

// NewPhotoDome returns a new PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome
func (ba *Babylon) NewPhotoDome(name string, urlOfPhoto string, options js.Value, scene *Scene, opts *NewPhotoDomeOpts) *PhotoDome {
	if opts == nil {
		opts = &NewPhotoDomeOpts{}
	}

	args := make([]interface{}, 0, 4+1)

	args = append(args, name)
	args = append(args, urlOfPhoto)
	args = append(args, options)
	args = append(args, scene.JSObject())

	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}

	p := ba.ctx.Get("PhotoDome").New(args...)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// PhotoDomeAddBehaviorOpts contains optional parameters for PhotoDome.AddBehavior.
type PhotoDomeAddBehaviorOpts struct {
	AttachImmediately *bool
}

// AddBehavior calls the AddBehavior method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#addbehavior
func (p *PhotoDome) AddBehavior(behavior js.Value, opts *PhotoDomeAddBehaviorOpts) *Node {
	if opts == nil {
		opts = &PhotoDomeAddBehaviorOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, behavior)

	if opts.AttachImmediately == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.AttachImmediately)
	}

	retVal := p.p.Call("addBehavior", args...)
	return NodeFromJSObject(retVal, p.ctx)
}

// AddNodeConstructor calls the AddNodeConstructor method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#addnodeconstructor
func (p *PhotoDome) AddNodeConstructor(jsType string, constructorFunc js.Value) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, jsType)
	args = append(args, constructorFunc)

	p.p.Call("AddNodeConstructor", args...)
}

// AddRotation calls the AddRotation method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#addrotation
func (p *PhotoDome) AddRotation(x float64, y float64, z float64) *TransformNode {

	args := make([]interface{}, 0, 3+0)

	args = append(args, x)
	args = append(args, y)
	args = append(args, z)

	retVal := p.p.Call("addRotation", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// AttachToBone calls the AttachToBone method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#attachtobone
func (p *PhotoDome) AttachToBone(bone *Bone, affectedTransformNode *TransformNode) *TransformNode {

	args := make([]interface{}, 0, 2+0)

	args = append(args, bone.JSObject())
	args = append(args, affectedTransformNode.JSObject())

	retVal := p.p.Call("attachToBone", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// PhotoDomeBeginAnimationOpts contains optional parameters for PhotoDome.BeginAnimation.
type PhotoDomeBeginAnimationOpts struct {
	Loop           *bool
	SpeedRatio     *float64
	OnAnimationEnd *func()
}

// BeginAnimation calls the BeginAnimation method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#beginanimation
func (p *PhotoDome) BeginAnimation(name string, opts *PhotoDomeBeginAnimationOpts) *Animatable {
	if opts == nil {
		opts = &PhotoDomeBeginAnimationOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, name)

	if opts.Loop == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Loop)
	}
	if opts.SpeedRatio == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SpeedRatio)
	}
	if opts.OnAnimationEnd == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnAnimationEnd)
	}

	retVal := p.p.Call("beginAnimation", args...)
	return AnimatableFromJSObject(retVal, p.ctx)
}

// PhotoDomeCloneOpts contains optional parameters for PhotoDome.Clone.
type PhotoDomeCloneOpts struct {
	DoNotCloneChildren *bool
}

// Clone calls the Clone method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#clone
func (p *PhotoDome) Clone(name string, newParent *Node, opts *PhotoDomeCloneOpts) *TransformNode {
	if opts == nil {
		opts = &PhotoDomeCloneOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, newParent.JSObject())

	if opts.DoNotCloneChildren == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DoNotCloneChildren)
	}

	retVal := p.p.Call("clone", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// PhotoDomeComputeWorldMatrixOpts contains optional parameters for PhotoDome.ComputeWorldMatrix.
type PhotoDomeComputeWorldMatrixOpts struct {
	Force *bool
}

// ComputeWorldMatrix calls the ComputeWorldMatrix method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#computeworldmatrix
func (p *PhotoDome) ComputeWorldMatrix(opts *PhotoDomeComputeWorldMatrixOpts) *Matrix {
	if opts == nil {
		opts = &PhotoDomeComputeWorldMatrixOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Force == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Force)
	}

	retVal := p.p.Call("computeWorldMatrix", args...)
	return MatrixFromJSObject(retVal, p.ctx)
}

// PhotoDomeConstructOpts contains optional parameters for PhotoDome.Construct.
type PhotoDomeConstructOpts struct {
	Options *interface{}
}

// Construct calls the Construct method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#construct
func (p *PhotoDome) Construct(jsType string, name string, scene *Scene, opts *PhotoDomeConstructOpts) func() {
	if opts == nil {
		opts = &PhotoDomeConstructOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, jsType)
	args = append(args, name)
	args = append(args, scene.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := p.p.Call("Construct", args...)
	return retVal
}

// CreateAnimationRange calls the CreateAnimationRange method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#createanimationrange
func (p *PhotoDome) CreateAnimationRange(name string, from float64, to float64) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, from)
	args = append(args, to)

	p.p.Call("createAnimationRange", args...)
}

// PhotoDomeDeleteAnimationRangeOpts contains optional parameters for PhotoDome.DeleteAnimationRange.
type PhotoDomeDeleteAnimationRangeOpts struct {
	DeleteFrames *bool
}

// DeleteAnimationRange calls the DeleteAnimationRange method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#deleteanimationrange
func (p *PhotoDome) DeleteAnimationRange(name string, opts *PhotoDomeDeleteAnimationRangeOpts) {
	if opts == nil {
		opts = &PhotoDomeDeleteAnimationRangeOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, name)

	if opts.DeleteFrames == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DeleteFrames)
	}

	p.p.Call("deleteAnimationRange", args...)
}

// DetachFromBone calls the DetachFromBone method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#detachfrombone
func (p *PhotoDome) DetachFromBone() *TransformNode {

	retVal := p.p.Call("detachFromBone")
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// PhotoDomeDisposeOpts contains optional parameters for PhotoDome.Dispose.
type PhotoDomeDisposeOpts struct {
	DoNotRecurse               *bool
	DisposeMaterialAndTextures *bool
}

// Dispose calls the Dispose method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#dispose
func (p *PhotoDome) Dispose(opts *PhotoDomeDisposeOpts) {
	if opts == nil {
		opts = &PhotoDomeDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DoNotRecurse == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DoNotRecurse)
	}
	if opts.DisposeMaterialAndTextures == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DisposeMaterialAndTextures)
	}

	p.p.Call("dispose", args...)
}

// PhotoDomeFreezeWorldMatrixOpts contains optional parameters for PhotoDome.FreezeWorldMatrix.
type PhotoDomeFreezeWorldMatrixOpts struct {
	NewWorldMatrix *Matrix
}

// FreezeWorldMatrix calls the FreezeWorldMatrix method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#freezeworldmatrix
func (p *PhotoDome) FreezeWorldMatrix(opts *PhotoDomeFreezeWorldMatrixOpts) *TransformNode {
	if opts == nil {
		opts = &PhotoDomeFreezeWorldMatrixOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.NewWorldMatrix == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.NewWorldMatrix.JSObject())
	}

	retVal := p.p.Call("freezeWorldMatrix", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// GetAbsolutePivotPoint calls the GetAbsolutePivotPoint method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getabsolutepivotpoint
func (p *PhotoDome) GetAbsolutePivotPoint() *Vector3 {

	retVal := p.p.Call("getAbsolutePivotPoint")
	return Vector3FromJSObject(retVal, p.ctx)
}

// GetAbsolutePivotPointToRef calls the GetAbsolutePivotPointToRef method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getabsolutepivotpointtoref
func (p *PhotoDome) GetAbsolutePivotPointToRef(result *Vector3) *TransformNode {

	args := make([]interface{}, 0, 1+0)

	args = append(args, result.JSObject())

	retVal := p.p.Call("getAbsolutePivotPointToRef", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// GetAbsolutePosition calls the GetAbsolutePosition method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getabsoluteposition
func (p *PhotoDome) GetAbsolutePosition() *Vector3 {

	retVal := p.p.Call("getAbsolutePosition")
	return Vector3FromJSObject(retVal, p.ctx)
}

// GetAnimationByName calls the GetAnimationByName method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getanimationbyname
func (p *PhotoDome) GetAnimationByName(name string) *Animation {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := p.p.Call("getAnimationByName", args...)
	return AnimationFromJSObject(retVal, p.ctx)
}

// GetAnimationRange calls the GetAnimationRange method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getanimationrange
func (p *PhotoDome) GetAnimationRange(name string) *AnimationRange {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := p.p.Call("getAnimationRange", args...)
	return AnimationRangeFromJSObject(retVal, p.ctx)
}

// GetAnimationRanges calls the GetAnimationRanges method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getanimationranges
func (p *PhotoDome) GetAnimationRanges() *AnimationRange {

	retVal := p.p.Call("getAnimationRanges")
	return AnimationRangeFromJSObject(retVal, p.ctx)
}

// GetBehaviorByName calls the GetBehaviorByName method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getbehaviorbyname
func (p *PhotoDome) GetBehaviorByName(name string) js.Value {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := p.p.Call("getBehaviorByName", args...)
	return retVal
}

// PhotoDomeGetChildMeshesOpts contains optional parameters for PhotoDome.GetChildMeshes.
type PhotoDomeGetChildMeshesOpts struct {
	DirectDescendantsOnly *bool
	Predicate             *func()
}

// GetChildMeshes calls the GetChildMeshes method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getchildmeshes
func (p *PhotoDome) GetChildMeshes(opts *PhotoDomeGetChildMeshesOpts) *AbstractMesh {
	if opts == nil {
		opts = &PhotoDomeGetChildMeshesOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := p.p.Call("getChildMeshes", args...)
	return AbstractMeshFromJSObject(retVal, p.ctx)
}

// PhotoDomeGetChildTransformNodesOpts contains optional parameters for PhotoDome.GetChildTransformNodes.
type PhotoDomeGetChildTransformNodesOpts struct {
	DirectDescendantsOnly *bool
	Predicate             *func()
}

// GetChildTransformNodes calls the GetChildTransformNodes method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getchildtransformnodes
func (p *PhotoDome) GetChildTransformNodes(opts *PhotoDomeGetChildTransformNodesOpts) *TransformNode {
	if opts == nil {
		opts = &PhotoDomeGetChildTransformNodesOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := p.p.Call("getChildTransformNodes", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// PhotoDomeGetChildrenOpts contains optional parameters for PhotoDome.GetChildren.
type PhotoDomeGetChildrenOpts struct {
	Predicate             *func()
	DirectDescendantsOnly *bool
}

// GetChildren calls the GetChildren method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getchildren
func (p *PhotoDome) GetChildren(opts *PhotoDomeGetChildrenOpts) *Node {
	if opts == nil {
		opts = &PhotoDomeGetChildrenOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}
	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}

	retVal := p.p.Call("getChildren", args...)
	return NodeFromJSObject(retVal, p.ctx)
}

// GetClassName calls the GetClassName method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getclassname
func (p *PhotoDome) GetClassName() string {

	retVal := p.p.Call("getClassName")
	return retVal.String()
}

// PhotoDomeGetDescendantsOpts contains optional parameters for PhotoDome.GetDescendants.
type PhotoDomeGetDescendantsOpts struct {
	DirectDescendantsOnly *bool
	Predicate             *func()
}

// GetDescendants calls the GetDescendants method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getdescendants
func (p *PhotoDome) GetDescendants(opts *PhotoDomeGetDescendantsOpts) *Node {
	if opts == nil {
		opts = &PhotoDomeGetDescendantsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := p.p.Call("getDescendants", args...)
	return NodeFromJSObject(retVal, p.ctx)
}

// GetDirection calls the GetDirection method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getdirection
func (p *PhotoDome) GetDirection(localAxis *Vector3) *Vector3 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, localAxis.JSObject())

	retVal := p.p.Call("getDirection", args...)
	return Vector3FromJSObject(retVal, p.ctx)
}

// GetDirectionToRef calls the GetDirectionToRef method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getdirectiontoref
func (p *PhotoDome) GetDirectionToRef(localAxis *Vector3, result *Vector3) *TransformNode {

	args := make([]interface{}, 0, 2+0)

	args = append(args, localAxis.JSObject())
	args = append(args, result.JSObject())

	retVal := p.p.Call("getDirectionToRef", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// PhotoDomeGetDistanceToCameraOpts contains optional parameters for PhotoDome.GetDistanceToCamera.
type PhotoDomeGetDistanceToCameraOpts struct {
	Camera *Camera
}

// GetDistanceToCamera calls the GetDistanceToCamera method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getdistancetocamera
func (p *PhotoDome) GetDistanceToCamera(opts *PhotoDomeGetDistanceToCameraOpts) float64 {
	if opts == nil {
		opts = &PhotoDomeGetDistanceToCameraOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}

	retVal := p.p.Call("getDistanceToCamera", args...)
	return retVal.Float()
}

// GetEngine calls the GetEngine method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getengine
func (p *PhotoDome) GetEngine() *Engine {

	retVal := p.p.Call("getEngine")
	return EngineFromJSObject(retVal, p.ctx)
}

// PhotoDomeGetHierarchyBoundingVectorsOpts contains optional parameters for PhotoDome.GetHierarchyBoundingVectors.
type PhotoDomeGetHierarchyBoundingVectorsOpts struct {
	IncludeDescendants *bool
	Predicate          *func()
}

// GetHierarchyBoundingVectors calls the GetHierarchyBoundingVectors method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#gethierarchyboundingvectors
func (p *PhotoDome) GetHierarchyBoundingVectors(opts *PhotoDomeGetHierarchyBoundingVectorsOpts) js.Value {
	if opts == nil {
		opts = &PhotoDomeGetHierarchyBoundingVectorsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.IncludeDescendants == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IncludeDescendants)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := p.p.Call("getHierarchyBoundingVectors", args...)
	return retVal
}

// GetPivotMatrix calls the GetPivotMatrix method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getpivotmatrix
func (p *PhotoDome) GetPivotMatrix() *Matrix {

	retVal := p.p.Call("getPivotMatrix")
	return MatrixFromJSObject(retVal, p.ctx)
}

// GetPivotPoint calls the GetPivotPoint method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getpivotpoint
func (p *PhotoDome) GetPivotPoint() *Vector3 {

	retVal := p.p.Call("getPivotPoint")
	return Vector3FromJSObject(retVal, p.ctx)
}

// GetPivotPointToRef calls the GetPivotPointToRef method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getpivotpointtoref
func (p *PhotoDome) GetPivotPointToRef(result *Vector3) *TransformNode {

	args := make([]interface{}, 0, 1+0)

	args = append(args, result.JSObject())

	retVal := p.p.Call("getPivotPointToRef", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// GetPoseMatrix calls the GetPoseMatrix method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getposematrix
func (p *PhotoDome) GetPoseMatrix() *Matrix {

	retVal := p.p.Call("getPoseMatrix")
	return MatrixFromJSObject(retVal, p.ctx)
}

// GetPositionExpressedInLocalSpace calls the GetPositionExpressedInLocalSpace method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getpositionexpressedinlocalspace
func (p *PhotoDome) GetPositionExpressedInLocalSpace() *Vector3 {

	retVal := p.p.Call("getPositionExpressedInLocalSpace")
	return Vector3FromJSObject(retVal, p.ctx)
}

// PhotoDomeGetPositionInCameraSpaceOpts contains optional parameters for PhotoDome.GetPositionInCameraSpace.
type PhotoDomeGetPositionInCameraSpaceOpts struct {
	Camera *Camera
}

// GetPositionInCameraSpace calls the GetPositionInCameraSpace method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getpositionincameraspace
func (p *PhotoDome) GetPositionInCameraSpace(opts *PhotoDomeGetPositionInCameraSpaceOpts) *Vector3 {
	if opts == nil {
		opts = &PhotoDomeGetPositionInCameraSpaceOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}

	retVal := p.p.Call("getPositionInCameraSpace", args...)
	return Vector3FromJSObject(retVal, p.ctx)
}

// GetScene calls the GetScene method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getscene
func (p *PhotoDome) GetScene() *Scene {

	retVal := p.p.Call("getScene")
	return SceneFromJSObject(retVal, p.ctx)
}

// GetWorldMatrix calls the GetWorldMatrix method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#getworldmatrix
func (p *PhotoDome) GetWorldMatrix() *Matrix {

	retVal := p.p.Call("getWorldMatrix")
	return MatrixFromJSObject(retVal, p.ctx)
}

// PhotoDomeInstantiateHierarchyOpts contains optional parameters for PhotoDome.InstantiateHierarchy.
type PhotoDomeInstantiateHierarchyOpts struct {
	NewParent        *TransformNode
	Options          js.Value
	OnNewNodeCreated *func()
}

// InstantiateHierarchy calls the InstantiateHierarchy method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#instantiatehierarchy
func (p *PhotoDome) InstantiateHierarchy(opts *PhotoDomeInstantiateHierarchyOpts) *TransformNode {
	if opts == nil {
		opts = &PhotoDomeInstantiateHierarchyOpts{}
	}

	args := make([]interface{}, 0, 0+3)

	if opts.NewParent == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.NewParent.JSObject())
	}
	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}
	if opts.OnNewNodeCreated == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnNewNodeCreated)
	}

	retVal := p.p.Call("instantiateHierarchy", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// IsDescendantOf calls the IsDescendantOf method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#isdescendantof
func (p *PhotoDome) IsDescendantOf(ancestor *Node) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, ancestor.JSObject())

	retVal := p.p.Call("isDescendantOf", args...)
	return retVal.Bool()
}

// IsDisposed calls the IsDisposed method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#isdisposed
func (p *PhotoDome) IsDisposed() bool {

	retVal := p.p.Call("isDisposed")
	return retVal.Bool()
}

// PhotoDomeIsEnabledOpts contains optional parameters for PhotoDome.IsEnabled.
type PhotoDomeIsEnabledOpts struct {
	CheckAncestors *bool
}

// IsEnabled calls the IsEnabled method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#isenabled
func (p *PhotoDome) IsEnabled(opts *PhotoDomeIsEnabledOpts) bool {
	if opts == nil {
		opts = &PhotoDomeIsEnabledOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.CheckAncestors == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CheckAncestors)
	}

	retVal := p.p.Call("isEnabled", args...)
	return retVal.Bool()
}

// PhotoDomeIsReadyOpts contains optional parameters for PhotoDome.IsReady.
type PhotoDomeIsReadyOpts struct {
	CompleteCheck *bool
}

// IsReady calls the IsReady method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#isready
func (p *PhotoDome) IsReady(opts *PhotoDomeIsReadyOpts) bool {
	if opts == nil {
		opts = &PhotoDomeIsReadyOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.CompleteCheck == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CompleteCheck)
	}

	retVal := p.p.Call("isReady", args...)
	return retVal.Bool()
}

// LocallyTranslate calls the LocallyTranslate method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#locallytranslate
func (p *PhotoDome) LocallyTranslate(vector3 *Vector3) *TransformNode {

	args := make([]interface{}, 0, 1+0)

	args = append(args, vector3.JSObject())

	retVal := p.p.Call("locallyTranslate", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// PhotoDomeLookAtOpts contains optional parameters for PhotoDome.LookAt.
type PhotoDomeLookAtOpts struct {
	YawCor   *float64
	PitchCor *float64
	RollCor  *float64
	Space    js.Value
}

// LookAt calls the LookAt method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#lookat
func (p *PhotoDome) LookAt(targetPoint *Vector3, opts *PhotoDomeLookAtOpts) *TransformNode {
	if opts == nil {
		opts = &PhotoDomeLookAtOpts{}
	}

	args := make([]interface{}, 0, 1+4)

	args = append(args, targetPoint.JSObject())

	if opts.YawCor == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.YawCor)
	}
	if opts.PitchCor == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.PitchCor)
	}
	if opts.RollCor == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RollCor)
	}
	if opts.Space == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Space)
	}

	retVal := p.p.Call("lookAt", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// MarkAsDirty calls the MarkAsDirty method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#markasdirty
func (p *PhotoDome) MarkAsDirty(property string) *TransformNode {

	args := make([]interface{}, 0, 1+0)

	args = append(args, property)

	retVal := p.p.Call("markAsDirty", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// PhotoDomeNormalizeToUnitCubeOpts contains optional parameters for PhotoDome.NormalizeToUnitCube.
type PhotoDomeNormalizeToUnitCubeOpts struct {
	IncludeDescendants *bool
	IgnoreRotation     *bool
	Predicate          *func()
}

// NormalizeToUnitCube calls the NormalizeToUnitCube method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#normalizetounitcube
func (p *PhotoDome) NormalizeToUnitCube(opts *PhotoDomeNormalizeToUnitCubeOpts) *TransformNode {
	if opts == nil {
		opts = &PhotoDomeNormalizeToUnitCubeOpts{}
	}

	args := make([]interface{}, 0, 0+3)

	if opts.IncludeDescendants == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IncludeDescendants)
	}
	if opts.IgnoreRotation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IgnoreRotation)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := p.p.Call("normalizeToUnitCube", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// Parse calls the Parse method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#parse
func (p *PhotoDome) Parse(parsedTransformNode interface{}, scene *Scene, rootUrl string) *TransformNode {

	args := make([]interface{}, 0, 3+0)

	args = append(args, parsedTransformNode)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := p.p.Call("Parse", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// ParseAnimationRanges calls the ParseAnimationRanges method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#parseanimationranges
func (p *PhotoDome) ParseAnimationRanges(node *Node, parsedNode interface{}, scene *Scene) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, node.JSObject())
	args = append(args, parsedNode)
	args = append(args, scene.JSObject())

	p.p.Call("ParseAnimationRanges", args...)
}

// RegisterAfterWorldMatrixUpdate calls the RegisterAfterWorldMatrixUpdate method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#registerafterworldmatrixupdate
func (p *PhotoDome) RegisterAfterWorldMatrixUpdate(jsFunc func()) *TransformNode {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { jsFunc(); return nil }))

	retVal := p.p.Call("registerAfterWorldMatrixUpdate", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// RemoveBehavior calls the RemoveBehavior method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#removebehavior
func (p *PhotoDome) RemoveBehavior(behavior js.Value) *Node {

	args := make([]interface{}, 0, 1+0)

	args = append(args, behavior)

	retVal := p.p.Call("removeBehavior", args...)
	return NodeFromJSObject(retVal, p.ctx)
}

// PhotoDomeRotateOpts contains optional parameters for PhotoDome.Rotate.
type PhotoDomeRotateOpts struct {
	Space js.Value
}

// Rotate calls the Rotate method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#rotate
func (p *PhotoDome) Rotate(axis *Vector3, amount float64, opts *PhotoDomeRotateOpts) *TransformNode {
	if opts == nil {
		opts = &PhotoDomeRotateOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, axis.JSObject())
	args = append(args, amount)

	if opts.Space == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Space)
	}

	retVal := p.p.Call("rotate", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// RotateAround calls the RotateAround method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#rotatearound
func (p *PhotoDome) RotateAround(point *Vector3, axis *Vector3, amount float64) *TransformNode {

	args := make([]interface{}, 0, 3+0)

	args = append(args, point.JSObject())
	args = append(args, axis.JSObject())
	args = append(args, amount)

	retVal := p.p.Call("rotateAround", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// PhotoDomeSerializeOpts contains optional parameters for PhotoDome.Serialize.
type PhotoDomeSerializeOpts struct {
	CurrentSerializationObject *interface{}
}

// Serialize calls the Serialize method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#serialize
func (p *PhotoDome) Serialize(opts *PhotoDomeSerializeOpts) interface{} {
	if opts == nil {
		opts = &PhotoDomeSerializeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.CurrentSerializationObject == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.CurrentSerializationObject)
	}

	retVal := p.p.Call("serialize", args...)
	return retVal
}

// SerializeAnimationRanges calls the SerializeAnimationRanges method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#serializeanimationranges
func (p *PhotoDome) SerializeAnimationRanges() interface{} {

	retVal := p.p.Call("serializeAnimationRanges")
	return retVal
}

// SetAbsolutePosition calls the SetAbsolutePosition method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#setabsoluteposition
func (p *PhotoDome) SetAbsolutePosition(absolutePosition *Vector3) *TransformNode {

	args := make([]interface{}, 0, 1+0)

	args = append(args, absolutePosition.JSObject())

	retVal := p.p.Call("setAbsolutePosition", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// PhotoDomeSetDirectionOpts contains optional parameters for PhotoDome.SetDirection.
type PhotoDomeSetDirectionOpts struct {
	YawCor   *float64
	PitchCor *float64
	RollCor  *float64
}

// SetDirection calls the SetDirection method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#setdirection
func (p *PhotoDome) SetDirection(localAxis *Vector3, opts *PhotoDomeSetDirectionOpts) *TransformNode {
	if opts == nil {
		opts = &PhotoDomeSetDirectionOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, localAxis.JSObject())

	if opts.YawCor == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.YawCor)
	}
	if opts.PitchCor == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.PitchCor)
	}
	if opts.RollCor == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RollCor)
	}

	retVal := p.p.Call("setDirection", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// SetEnabled calls the SetEnabled method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#setenabled
func (p *PhotoDome) SetEnabled(value bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, value)

	p.p.Call("setEnabled", args...)
}

// SetParent calls the SetParent method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#setparent
func (p *PhotoDome) SetParent(node *Node) *TransformNode {

	args := make([]interface{}, 0, 1+0)

	args = append(args, node.JSObject())

	retVal := p.p.Call("setParent", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// PhotoDomeSetPivotMatrixOpts contains optional parameters for PhotoDome.SetPivotMatrix.
type PhotoDomeSetPivotMatrixOpts struct {
	PostMultiplyPivotMatrix *bool
}

// SetPivotMatrix calls the SetPivotMatrix method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#setpivotmatrix
func (p *PhotoDome) SetPivotMatrix(matrix *Matrix, opts *PhotoDomeSetPivotMatrixOpts) *TransformNode {
	if opts == nil {
		opts = &PhotoDomeSetPivotMatrixOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, matrix.JSObject())

	if opts.PostMultiplyPivotMatrix == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.PostMultiplyPivotMatrix)
	}

	retVal := p.p.Call("setPivotMatrix", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// PhotoDomeSetPivotPointOpts contains optional parameters for PhotoDome.SetPivotPoint.
type PhotoDomeSetPivotPointOpts struct {
	Space js.Value
}

// SetPivotPoint calls the SetPivotPoint method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#setpivotpoint
func (p *PhotoDome) SetPivotPoint(point *Vector3, opts *PhotoDomeSetPivotPointOpts) *TransformNode {
	if opts == nil {
		opts = &PhotoDomeSetPivotPointOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, point.JSObject())

	if opts.Space == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Space)
	}

	retVal := p.p.Call("setPivotPoint", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// SetPositionWithLocalVector calls the SetPositionWithLocalVector method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#setpositionwithlocalvector
func (p *PhotoDome) SetPositionWithLocalVector(vector3 *Vector3) *TransformNode {

	args := make([]interface{}, 0, 1+0)

	args = append(args, vector3.JSObject())

	retVal := p.p.Call("setPositionWithLocalVector", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// SetPreTransformMatrix calls the SetPreTransformMatrix method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#setpretransformmatrix
func (p *PhotoDome) SetPreTransformMatrix(matrix *Matrix) *TransformNode {

	args := make([]interface{}, 0, 1+0)

	args = append(args, matrix.JSObject())

	retVal := p.p.Call("setPreTransformMatrix", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// PhotoDomeTranslateOpts contains optional parameters for PhotoDome.Translate.
type PhotoDomeTranslateOpts struct {
	Space js.Value
}

// Translate calls the Translate method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#translate
func (p *PhotoDome) Translate(axis *Vector3, distance float64, opts *PhotoDomeTranslateOpts) *TransformNode {
	if opts == nil {
		opts = &PhotoDomeTranslateOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, axis.JSObject())
	args = append(args, distance)

	if opts.Space == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Space)
	}

	retVal := p.p.Call("translate", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// UnfreezeWorldMatrix calls the UnfreezeWorldMatrix method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#unfreezeworldmatrix
func (p *PhotoDome) UnfreezeWorldMatrix() *PhotoDome {

	retVal := p.p.Call("unfreezeWorldMatrix")
	return PhotoDomeFromJSObject(retVal, p.ctx)
}

// UnregisterAfterWorldMatrixUpdate calls the UnregisterAfterWorldMatrixUpdate method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#unregisterafterworldmatrixupdate
func (p *PhotoDome) UnregisterAfterWorldMatrixUpdate(jsFunc func()) *TransformNode {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { jsFunc(); return nil }))

	retVal := p.p.Call("unregisterAfterWorldMatrixUpdate", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

// UpdatePoseMatrix calls the UpdatePoseMatrix method on the PhotoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#updateposematrix
func (p *PhotoDome) UpdatePoseMatrix(matrix *Matrix) *TransformNode {

	args := make([]interface{}, 0, 1+0)

	args = append(args, matrix.JSObject())

	retVal := p.p.Call("updatePoseMatrix", args...)
	return TransformNodeFromJSObject(retVal, p.ctx)
}

/*

// AbsolutePosition returns the AbsolutePosition property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#absoluteposition
func (p *PhotoDome) AbsolutePosition(absolutePosition *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(absolutePosition.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetAbsolutePosition sets the AbsolutePosition property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#absoluteposition
func (p *PhotoDome) SetAbsolutePosition(absolutePosition *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(absolutePosition.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// AbsoluteRotationQuaternion returns the AbsoluteRotationQuaternion property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#absoluterotationquaternion
func (p *PhotoDome) AbsoluteRotationQuaternion(absoluteRotationQuaternion *Quaternion) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(absoluteRotationQuaternion.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetAbsoluteRotationQuaternion sets the AbsoluteRotationQuaternion property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#absoluterotationquaternion
func (p *PhotoDome) SetAbsoluteRotationQuaternion(absoluteRotationQuaternion *Quaternion) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(absoluteRotationQuaternion.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// AbsoluteScaling returns the AbsoluteScaling property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#absolutescaling
func (p *PhotoDome) AbsoluteScaling(absoluteScaling *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(absoluteScaling.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetAbsoluteScaling sets the AbsoluteScaling property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#absolutescaling
func (p *PhotoDome) SetAbsoluteScaling(absoluteScaling *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(absoluteScaling.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// AnimationPropertiesOverride returns the AnimationPropertiesOverride property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#animationpropertiesoverride
func (p *PhotoDome) AnimationPropertiesOverride(animationPropertiesOverride *AnimationPropertiesOverride) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(animationPropertiesOverride.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetAnimationPropertiesOverride sets the AnimationPropertiesOverride property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#animationpropertiesoverride
func (p *PhotoDome) SetAnimationPropertiesOverride(animationPropertiesOverride *AnimationPropertiesOverride) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(animationPropertiesOverride.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// Animations returns the Animations property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#animations
func (p *PhotoDome) Animations(animations *Animation) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(animations.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#animations
func (p *PhotoDome) SetAnimations(animations *Animation) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(animations.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// BILLBOARDMODE_ALL returns the BILLBOARDMODE_ALL property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#billboardmode_all
func (p *PhotoDome) BILLBOARDMODE_ALL(BILLBOARDMODE_ALL float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(BILLBOARDMODE_ALL)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetBILLBOARDMODE_ALL sets the BILLBOARDMODE_ALL property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#billboardmode_all
func (p *PhotoDome) SetBILLBOARDMODE_ALL(BILLBOARDMODE_ALL float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(BILLBOARDMODE_ALL)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// BILLBOARDMODE_NONE returns the BILLBOARDMODE_NONE property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#billboardmode_none
func (p *PhotoDome) BILLBOARDMODE_NONE(BILLBOARDMODE_NONE float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(BILLBOARDMODE_NONE)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetBILLBOARDMODE_NONE sets the BILLBOARDMODE_NONE property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#billboardmode_none
func (p *PhotoDome) SetBILLBOARDMODE_NONE(BILLBOARDMODE_NONE float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(BILLBOARDMODE_NONE)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// BILLBOARDMODE_USE_POSITION returns the BILLBOARDMODE_USE_POSITION property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#billboardmode_use_position
func (p *PhotoDome) BILLBOARDMODE_USE_POSITION(BILLBOARDMODE_USE_POSITION float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(BILLBOARDMODE_USE_POSITION)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetBILLBOARDMODE_USE_POSITION sets the BILLBOARDMODE_USE_POSITION property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#billboardmode_use_position
func (p *PhotoDome) SetBILLBOARDMODE_USE_POSITION(BILLBOARDMODE_USE_POSITION float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(BILLBOARDMODE_USE_POSITION)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// BILLBOARDMODE_X returns the BILLBOARDMODE_X property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#billboardmode_x
func (p *PhotoDome) BILLBOARDMODE_X(BILLBOARDMODE_X float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(BILLBOARDMODE_X)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetBILLBOARDMODE_X sets the BILLBOARDMODE_X property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#billboardmode_x
func (p *PhotoDome) SetBILLBOARDMODE_X(BILLBOARDMODE_X float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(BILLBOARDMODE_X)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// BILLBOARDMODE_Y returns the BILLBOARDMODE_Y property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#billboardmode_y
func (p *PhotoDome) BILLBOARDMODE_Y(BILLBOARDMODE_Y float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(BILLBOARDMODE_Y)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetBILLBOARDMODE_Y sets the BILLBOARDMODE_Y property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#billboardmode_y
func (p *PhotoDome) SetBILLBOARDMODE_Y(BILLBOARDMODE_Y float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(BILLBOARDMODE_Y)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// BILLBOARDMODE_Z returns the BILLBOARDMODE_Z property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#billboardmode_z
func (p *PhotoDome) BILLBOARDMODE_Z(BILLBOARDMODE_Z float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(BILLBOARDMODE_Z)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetBILLBOARDMODE_Z sets the BILLBOARDMODE_Z property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#billboardmode_z
func (p *PhotoDome) SetBILLBOARDMODE_Z(BILLBOARDMODE_Z float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(BILLBOARDMODE_Z)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// Behaviors returns the Behaviors property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#behaviors
func (p *PhotoDome) Behaviors(behaviors js.Value) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(behaviors)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetBehaviors sets the Behaviors property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#behaviors
func (p *PhotoDome) SetBehaviors(behaviors js.Value) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(behaviors)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// BillboardMode returns the BillboardMode property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#billboardmode
func (p *PhotoDome) BillboardMode(billboardMode float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(billboardMode)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetBillboardMode sets the BillboardMode property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#billboardmode
func (p *PhotoDome) SetBillboardMode(billboardMode float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(billboardMode)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// DoNotSerialize returns the DoNotSerialize property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#donotserialize
func (p *PhotoDome) DoNotSerialize(doNotSerialize bool) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(doNotSerialize)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetDoNotSerialize sets the DoNotSerialize property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#donotserialize
func (p *PhotoDome) SetDoNotSerialize(doNotSerialize bool) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(doNotSerialize)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// Forward returns the Forward property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#forward
func (p *PhotoDome) Forward(forward *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(forward.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetForward sets the Forward property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#forward
func (p *PhotoDome) SetForward(forward *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(forward.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// FovMultiplier returns the FovMultiplier property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#fovmultiplier
func (p *PhotoDome) FovMultiplier(fovMultiplier float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(fovMultiplier)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetFovMultiplier sets the FovMultiplier property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#fovmultiplier
func (p *PhotoDome) SetFovMultiplier(fovMultiplier float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(fovMultiplier)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// Id returns the Id property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#id
func (p *PhotoDome) Id(id string) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(id)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetId sets the Id property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#id
func (p *PhotoDome) SetId(id string) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(id)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// IgnoreNonUniformScaling returns the IgnoreNonUniformScaling property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#ignorenonuniformscaling
func (p *PhotoDome) IgnoreNonUniformScaling(ignoreNonUniformScaling bool) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(ignoreNonUniformScaling)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetIgnoreNonUniformScaling sets the IgnoreNonUniformScaling property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#ignorenonuniformscaling
func (p *PhotoDome) SetIgnoreNonUniformScaling(ignoreNonUniformScaling bool) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(ignoreNonUniformScaling)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// ImageMode returns the ImageMode property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#imagemode
func (p *PhotoDome) ImageMode(imageMode float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(imageMode)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetImageMode sets the ImageMode property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#imagemode
func (p *PhotoDome) SetImageMode(imageMode float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(imageMode)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// InfiniteDistance returns the InfiniteDistance property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#infinitedistance
func (p *PhotoDome) InfiniteDistance(infiniteDistance bool) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(infiniteDistance)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetInfiniteDistance sets the InfiniteDistance property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#infinitedistance
func (p *PhotoDome) SetInfiniteDistance(infiniteDistance bool) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(infiniteDistance)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#inspectablecustomproperties
func (p *PhotoDome) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(inspectableCustomProperties.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#inspectablecustomproperties
func (p *PhotoDome) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(inspectableCustomProperties.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// IsWorldMatrixFrozen returns the IsWorldMatrixFrozen property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#isworldmatrixfrozen
func (p *PhotoDome) IsWorldMatrixFrozen(isWorldMatrixFrozen bool) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(isWorldMatrixFrozen)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetIsWorldMatrixFrozen sets the IsWorldMatrixFrozen property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#isworldmatrixfrozen
func (p *PhotoDome) SetIsWorldMatrixFrozen(isWorldMatrixFrozen bool) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(isWorldMatrixFrozen)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// MODE_MONOSCOPIC returns the MODE_MONOSCOPIC property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#mode_monoscopic
func (p *PhotoDome) MODE_MONOSCOPIC(MODE_MONOSCOPIC float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(MODE_MONOSCOPIC)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetMODE_MONOSCOPIC sets the MODE_MONOSCOPIC property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#mode_monoscopic
func (p *PhotoDome) SetMODE_MONOSCOPIC(MODE_MONOSCOPIC float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(MODE_MONOSCOPIC)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// MODE_SIDEBYSIDE returns the MODE_SIDEBYSIDE property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#mode_sidebyside
func (p *PhotoDome) MODE_SIDEBYSIDE(MODE_SIDEBYSIDE float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(MODE_SIDEBYSIDE)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetMODE_SIDEBYSIDE sets the MODE_SIDEBYSIDE property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#mode_sidebyside
func (p *PhotoDome) SetMODE_SIDEBYSIDE(MODE_SIDEBYSIDE float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(MODE_SIDEBYSIDE)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// MODE_TOPBOTTOM returns the MODE_TOPBOTTOM property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#mode_topbottom
func (p *PhotoDome) MODE_TOPBOTTOM(MODE_TOPBOTTOM float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(MODE_TOPBOTTOM)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetMODE_TOPBOTTOM sets the MODE_TOPBOTTOM property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#mode_topbottom
func (p *PhotoDome) SetMODE_TOPBOTTOM(MODE_TOPBOTTOM float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(MODE_TOPBOTTOM)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// Mesh returns the Mesh property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#mesh
func (p *PhotoDome) Mesh(mesh *Mesh) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(mesh.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetMesh sets the Mesh property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#mesh
func (p *PhotoDome) SetMesh(mesh *Mesh) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(mesh.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#metadata
func (p *PhotoDome) Metadata(metadata interface{}) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(metadata)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#metadata
func (p *PhotoDome) SetMetadata(metadata interface{}) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(metadata)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#name
func (p *PhotoDome) Name(name string) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(name)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#name
func (p *PhotoDome) SetName(name string) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(name)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// NonUniformScaling returns the NonUniformScaling property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#nonuniformscaling
func (p *PhotoDome) NonUniformScaling(nonUniformScaling bool) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(nonUniformScaling)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetNonUniformScaling sets the NonUniformScaling property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#nonuniformscaling
func (p *PhotoDome) SetNonUniformScaling(nonUniformScaling bool) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(nonUniformScaling)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// OnAfterWorldMatrixUpdateObservable returns the OnAfterWorldMatrixUpdateObservable property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#onafterworldmatrixupdateobservable
func (p *PhotoDome) OnAfterWorldMatrixUpdateObservable(onAfterWorldMatrixUpdateObservable *Observable) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(onAfterWorldMatrixUpdateObservable.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetOnAfterWorldMatrixUpdateObservable sets the OnAfterWorldMatrixUpdateObservable property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#onafterworldmatrixupdateobservable
func (p *PhotoDome) SetOnAfterWorldMatrixUpdateObservable(onAfterWorldMatrixUpdateObservable *Observable) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(onAfterWorldMatrixUpdateObservable.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#ondispose
func (p *PhotoDome) OnDispose(onDispose func()) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#ondispose
func (p *PhotoDome) SetOnDispose(onDispose func()) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#ondisposeobservable
func (p *PhotoDome) OnDisposeObservable(onDisposeObservable *Observable) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(onDisposeObservable.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#ondisposeobservable
func (p *PhotoDome) SetOnDisposeObservable(onDisposeObservable *Observable) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(onDisposeObservable.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// OnLoadErrorObservable returns the OnLoadErrorObservable property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#onloaderrorobservable
func (p *PhotoDome) OnLoadErrorObservable(onLoadErrorObservable *Observable) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(onLoadErrorObservable.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetOnLoadErrorObservable sets the OnLoadErrorObservable property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#onloaderrorobservable
func (p *PhotoDome) SetOnLoadErrorObservable(onLoadErrorObservable *Observable) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(onLoadErrorObservable.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// OnReady returns the OnReady property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#onready
func (p *PhotoDome) OnReady(onReady func()) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onReady(); return nil}))
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetOnReady sets the OnReady property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#onready
func (p *PhotoDome) SetOnReady(onReady func()) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onReady(); return nil}))
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// Parent returns the Parent property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#parent
func (p *PhotoDome) Parent(parent *Node) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(parent.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetParent sets the Parent property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#parent
func (p *PhotoDome) SetParent(parent *Node) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(parent.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// PhotoTexture returns the PhotoTexture property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#phototexture
func (p *PhotoDome) PhotoTexture(photoTexture *Texture) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(photoTexture.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetPhotoTexture sets the PhotoTexture property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#phototexture
func (p *PhotoDome) SetPhotoTexture(photoTexture *Texture) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(photoTexture.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// Position returns the Position property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#position
func (p *PhotoDome) Position(position *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(position.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetPosition sets the Position property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#position
func (p *PhotoDome) SetPosition(position *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(position.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// PreserveParentRotationForBillboard returns the PreserveParentRotationForBillboard property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#preserveparentrotationforbillboard
func (p *PhotoDome) PreserveParentRotationForBillboard(preserveParentRotationForBillboard bool) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(preserveParentRotationForBillboard)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetPreserveParentRotationForBillboard sets the PreserveParentRotationForBillboard property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#preserveparentrotationforbillboard
func (p *PhotoDome) SetPreserveParentRotationForBillboard(preserveParentRotationForBillboard bool) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(preserveParentRotationForBillboard)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// ReIntegrateRotationIntoRotationQuaternion returns the ReIntegrateRotationIntoRotationQuaternion property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#reintegraterotationintorotationquaternion
func (p *PhotoDome) ReIntegrateRotationIntoRotationQuaternion(reIntegrateRotationIntoRotationQuaternion bool) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(reIntegrateRotationIntoRotationQuaternion)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetReIntegrateRotationIntoRotationQuaternion sets the ReIntegrateRotationIntoRotationQuaternion property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#reintegraterotationintorotationquaternion
func (p *PhotoDome) SetReIntegrateRotationIntoRotationQuaternion(reIntegrateRotationIntoRotationQuaternion bool) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(reIntegrateRotationIntoRotationQuaternion)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#reserveddatastore
func (p *PhotoDome) ReservedDataStore(reservedDataStore interface{}) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(reservedDataStore)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#reserveddatastore
func (p *PhotoDome) SetReservedDataStore(reservedDataStore interface{}) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(reservedDataStore)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// Right returns the Right property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#right
func (p *PhotoDome) Right(right *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(right.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetRight sets the Right property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#right
func (p *PhotoDome) SetRight(right *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(right.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// Rotation returns the Rotation property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#rotation
func (p *PhotoDome) Rotation(rotation *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(rotation.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetRotation sets the Rotation property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#rotation
func (p *PhotoDome) SetRotation(rotation *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(rotation.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// RotationQuaternion returns the RotationQuaternion property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#rotationquaternion
func (p *PhotoDome) RotationQuaternion(rotationQuaternion *Quaternion) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(rotationQuaternion.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetRotationQuaternion sets the RotationQuaternion property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#rotationquaternion
func (p *PhotoDome) SetRotationQuaternion(rotationQuaternion *Quaternion) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(rotationQuaternion.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// Scaling returns the Scaling property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#scaling
func (p *PhotoDome) Scaling(scaling *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(scaling.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetScaling sets the Scaling property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#scaling
func (p *PhotoDome) SetScaling(scaling *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(scaling.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// ScalingDeterminant returns the ScalingDeterminant property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#scalingdeterminant
func (p *PhotoDome) ScalingDeterminant(scalingDeterminant float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(scalingDeterminant)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetScalingDeterminant sets the ScalingDeterminant property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#scalingdeterminant
func (p *PhotoDome) SetScalingDeterminant(scalingDeterminant float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(scalingDeterminant)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// State returns the State property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#state
func (p *PhotoDome) State(state string) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(state)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetState sets the State property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#state
func (p *PhotoDome) SetState(state string) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(state)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#uniqueid
func (p *PhotoDome) UniqueId(uniqueId float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(uniqueId)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#uniqueid
func (p *PhotoDome) SetUniqueId(uniqueId float64) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(uniqueId)
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// Up returns the Up property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#up
func (p *PhotoDome) Up(up *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(up.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetUp sets the Up property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#up
func (p *PhotoDome) SetUp(up *Vector3) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(up.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// WorldMatrixFromCache returns the WorldMatrixFromCache property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#worldmatrixfromcache
func (p *PhotoDome) WorldMatrixFromCache(worldMatrixFromCache *Matrix) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(worldMatrixFromCache.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

// SetWorldMatrixFromCache sets the WorldMatrixFromCache property of class PhotoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.photodome#worldmatrixfromcache
func (p *PhotoDome) SetWorldMatrixFromCache(worldMatrixFromCache *Matrix) *PhotoDome {
	p := ba.ctx.Get("PhotoDome").New(worldMatrixFromCache.JSObject())
	return PhotoDomeFromJSObject(p, ba.ctx)
}

*/
