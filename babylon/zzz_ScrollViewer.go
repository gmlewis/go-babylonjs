// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ScrollViewer represents a babylon.js ScrollViewer.
// Class used to hold a viewer window and sliders in a grid
type ScrollViewer struct {
	*Rectangle
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *ScrollViewer) JSObject() js.Value { return s.p }

// ScrollViewer returns a ScrollViewer JavaScript class.
func (ba *Babylon) ScrollViewer() *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer")
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// ScrollViewerFromJSObject returns a wrapped ScrollViewer JavaScript class.
func ScrollViewerFromJSObject(p js.Value, ctx js.Value) *ScrollViewer {
	return &ScrollViewer{Rectangle: RectangleFromJSObject(p, ctx), ctx: ctx}
}

// ScrollViewerArrayToJSArray returns a JavaScript Array for the wrapped array.
func ScrollViewerArrayToJSArray(array []*ScrollViewer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewScrollViewerOpts contains optional parameters for NewScrollViewer.
type NewScrollViewerOpts struct {
	Name         *string
	IsImageBased *bool
}

// NewScrollViewer returns a new ScrollViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer
func (ba *Babylon) NewScrollViewer(opts *NewScrollViewerOpts) *ScrollViewer {
	if opts == nil {
		opts = &NewScrollViewerOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}
	if opts.IsImageBased == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsImageBased)
	}

	p := ba.ctx.Get("ScrollViewer").New(args...)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// AddControl calls the AddControl method on the ScrollViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#addcontrol
func (s *ScrollViewer) AddControl(control *Control) *Container {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := s.p.Call("addControl", args...)
	return ContainerFromJSObject(retVal, s.ctx)
}

// Dispose calls the Dispose method on the ScrollViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#dispose
func (s *ScrollViewer) Dispose() {

	s.p.Call("dispose")
}

// RemoveControl calls the RemoveControl method on the ScrollViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#removecontrol
func (s *ScrollViewer) RemoveControl(control *Control) *Container {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := s.p.Call("removeControl", args...)
	return ContainerFromJSObject(retVal, s.ctx)
}

// ResetWindow calls the ResetWindow method on the ScrollViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#resetwindow
func (s *ScrollViewer) ResetWindow() {

	s.p.Call("resetWindow")
}

// _flagDescendantsAsMatrixDirty calls the _flagDescendantsAsMatrixDirty method on the ScrollViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#_flagdescendantsasmatrixdirty
func (s *ScrollViewer) _flagDescendantsAsMatrixDirty() {

	s.p.Call("_flagDescendantsAsMatrixDirty")
}

// _link calls the _link method on the ScrollViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#_link
func (s *ScrollViewer) _link(host *AdvancedDynamicTexture) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, host.JSObject())

	s.p.Call("_link", args...)
}

// _renderHighlightSpecific calls the _renderHighlightSpecific method on the ScrollViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#_renderhighlightspecific
func (s *ScrollViewer) _renderHighlightSpecific(context js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, context)

	s.p.Call("_renderHighlightSpecific", args...)
}

/*

// BarBackground returns the BarBackground property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#barbackground
func (s *ScrollViewer) BarBackground(barBackground string) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(barBackground)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// SetBarBackground sets the BarBackground property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#barbackground
func (s *ScrollViewer) SetBarBackground(barBackground string) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(barBackground)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// BarColor returns the BarColor property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#barcolor
func (s *ScrollViewer) BarColor(barColor string) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(barColor)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// SetBarColor sets the BarColor property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#barcolor
func (s *ScrollViewer) SetBarColor(barColor string) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(barColor)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// BarImage returns the BarImage property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#barimage
func (s *ScrollViewer) BarImage(barImage *Image) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(barImage.JSObject())
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// SetBarImage sets the BarImage property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#barimage
func (s *ScrollViewer) SetBarImage(barImage *Image) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(barImage.JSObject())
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// BarImageHeight returns the BarImageHeight property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#barimageheight
func (s *ScrollViewer) BarImageHeight(barImageHeight float64) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(barImageHeight)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// SetBarImageHeight sets the BarImageHeight property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#barimageheight
func (s *ScrollViewer) SetBarImageHeight(barImageHeight float64) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(barImageHeight)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// BarSize returns the BarSize property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#barsize
func (s *ScrollViewer) BarSize(barSize float64) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(barSize)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// SetBarSize sets the BarSize property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#barsize
func (s *ScrollViewer) SetBarSize(barSize float64) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(barSize)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// Children returns the Children property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#children
func (s *ScrollViewer) Children(children *Control) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(children.JSObject())
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// SetChildren sets the Children property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#children
func (s *ScrollViewer) SetChildren(children *Control) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(children.JSObject())
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// HorizontalBar returns the HorizontalBar property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#horizontalbar
func (s *ScrollViewer) HorizontalBar(horizontalBar *ScrollBar) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(horizontalBar.JSObject())
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// SetHorizontalBar sets the HorizontalBar property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#horizontalbar
func (s *ScrollViewer) SetHorizontalBar(horizontalBar *ScrollBar) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(horizontalBar.JSObject())
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// ScrollBackground returns the ScrollBackground property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#scrollbackground
func (s *ScrollViewer) ScrollBackground(scrollBackground string) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(scrollBackground)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// SetScrollBackground sets the ScrollBackground property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#scrollbackground
func (s *ScrollViewer) SetScrollBackground(scrollBackground string) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(scrollBackground)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// ThumbHeight returns the ThumbHeight property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#thumbheight
func (s *ScrollViewer) ThumbHeight(thumbHeight float64) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(thumbHeight)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// SetThumbHeight sets the ThumbHeight property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#thumbheight
func (s *ScrollViewer) SetThumbHeight(thumbHeight float64) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(thumbHeight)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// ThumbImage returns the ThumbImage property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#thumbimage
func (s *ScrollViewer) ThumbImage(thumbImage *Image) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(thumbImage.JSObject())
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// SetThumbImage sets the ThumbImage property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#thumbimage
func (s *ScrollViewer) SetThumbImage(thumbImage *Image) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(thumbImage.JSObject())
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// ThumbLength returns the ThumbLength property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#thumblength
func (s *ScrollViewer) ThumbLength(thumbLength float64) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(thumbLength)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// SetThumbLength sets the ThumbLength property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#thumblength
func (s *ScrollViewer) SetThumbLength(thumbLength float64) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(thumbLength)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// VerticalBar returns the VerticalBar property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#verticalbar
func (s *ScrollViewer) VerticalBar(verticalBar *ScrollBar) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(verticalBar.JSObject())
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// SetVerticalBar sets the VerticalBar property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#verticalbar
func (s *ScrollViewer) SetVerticalBar(verticalBar *ScrollBar) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(verticalBar.JSObject())
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// WheelPrecision returns the WheelPrecision property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#wheelprecision
func (s *ScrollViewer) WheelPrecision(wheelPrecision float64) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(wheelPrecision)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

// SetWheelPrecision sets the WheelPrecision property of class ScrollViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollviewer#wheelprecision
func (s *ScrollViewer) SetWheelPrecision(wheelPrecision float64) *ScrollViewer {
	p := ba.ctx.Get("ScrollViewer").New(wheelPrecision)
	return ScrollViewerFromJSObject(p, ba.ctx)
}

*/
