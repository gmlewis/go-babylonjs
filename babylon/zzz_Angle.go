// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Angle represents a babylon.js Angle.
// Defines angle representation
type Angle struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *Angle) JSObject() js.Value { return a.p }

// Angle returns a Angle JavaScript class.
func (ba *Babylon) Angle() *Angle {
	p := ba.ctx.Get("Angle")
	return AngleFromJSObject(p, ba.ctx)
}

// AngleFromJSObject returns a wrapped Angle JavaScript class.
func AngleFromJSObject(p js.Value, ctx js.Value) *Angle {
	return &Angle{p: p, ctx: ctx}
}

// AngleArrayToJSArray returns a JavaScript Array for the wrapped array.
func AngleArrayToJSArray(array []*Angle) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewAngle returns a new Angle object.
//
// https://doc.babylonjs.com/api/classes/babylon.angle
func (ba *Babylon) NewAngle(radians float64) *Angle {

	args := make([]interface{}, 0, 1+0)

	args = append(args, radians)

	p := ba.ctx.Get("Angle").New(args...)
	return AngleFromJSObject(p, ba.ctx)
}

// BetweenTwoPoints calls the BetweenTwoPoints method on the Angle object.
//
// https://doc.babylonjs.com/api/classes/babylon.angle#betweentwopoints
func (a *Angle) BetweenTwoPoints(av *Vector2, b *Vector2) *Angle {

	args := make([]interface{}, 0, 2+0)

	if av == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, av.JSObject())
	}

	if b == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, b.JSObject())
	}

	retVal := a.p.Call("BetweenTwoPoints", args...)
	return AngleFromJSObject(retVal, a.ctx)
}

// Degrees calls the Degrees method on the Angle object.
//
// https://doc.babylonjs.com/api/classes/babylon.angle#degrees
func (a *Angle) Degrees() float64 {

	retVal := a.p.Call("degrees")
	return retVal.Float()
}

// FromDegrees calls the FromDegrees method on the Angle object.
//
// https://doc.babylonjs.com/api/classes/babylon.angle#fromdegrees
func (a *Angle) FromDegrees(degrees float64) *Angle {

	args := make([]interface{}, 0, 1+0)

	args = append(args, degrees)

	retVal := a.p.Call("FromDegrees", args...)
	return AngleFromJSObject(retVal, a.ctx)
}

// FromRadians calls the FromRadians method on the Angle object.
//
// https://doc.babylonjs.com/api/classes/babylon.angle#fromradians
func (a *Angle) FromRadians(radians float64) *Angle {

	args := make([]interface{}, 0, 1+0)

	args = append(args, radians)

	retVal := a.p.Call("FromRadians", args...)
	return AngleFromJSObject(retVal, a.ctx)
}

// Radians calls the Radians method on the Angle object.
//
// https://doc.babylonjs.com/api/classes/babylon.angle#radians
func (a *Angle) Radians() float64 {

	retVal := a.p.Call("radians")
	return retVal.Float()
}
