// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ExtrasAsMetadata represents a babylon.js ExtrasAsMetadata.
// Store glTF extras (if present) in BJS objects&#39; metadata
type ExtrasAsMetadata struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *ExtrasAsMetadata) JSObject() js.Value { return e.p }

// ExtrasAsMetadata returns a ExtrasAsMetadata JavaScript class.
func (ba *Babylon) ExtrasAsMetadata() *ExtrasAsMetadata {
	p := ba.ctx.Get("ExtrasAsMetadata")
	return ExtrasAsMetadataFromJSObject(p, ba.ctx)
}

// ExtrasAsMetadataFromJSObject returns a wrapped ExtrasAsMetadata JavaScript class.
func ExtrasAsMetadataFromJSObject(p js.Value, ctx js.Value) *ExtrasAsMetadata {
	return &ExtrasAsMetadata{p: p, ctx: ctx}
}

// ExtrasAsMetadataArrayToJSArray returns a JavaScript Array for the wrapped array.
func ExtrasAsMetadataArrayToJSArray(array []*ExtrasAsMetadata) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Enabled returns the Enabled property of class ExtrasAsMetadata.
//
// https://doc.babylonjs.com/api/classes/babylon.extrasasmetadata#enabled
func (e *ExtrasAsMetadata) Enabled() bool {
	retVal := e.p.Get("enabled")
	return retVal.Bool()
}

// SetEnabled sets the Enabled property of class ExtrasAsMetadata.
//
// https://doc.babylonjs.com/api/classes/babylon.extrasasmetadata#enabled
func (e *ExtrasAsMetadata) SetEnabled(enabled bool) *ExtrasAsMetadata {
	e.p.Set("enabled", enabled)
	return e
}

// Name returns the Name property of class ExtrasAsMetadata.
//
// https://doc.babylonjs.com/api/classes/babylon.extrasasmetadata#name
func (e *ExtrasAsMetadata) Name() string {
	retVal := e.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class ExtrasAsMetadata.
//
// https://doc.babylonjs.com/api/classes/babylon.extrasasmetadata#name
func (e *ExtrasAsMetadata) SetName(name string) *ExtrasAsMetadata {
	e.p.Set("name", name)
	return e
}
