// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BlurPostProcess represents a babylon.js BlurPostProcess.
// The Blur Post Process which blurs an image based on a kernel and direction.
// Can be used twice in x and y directions to perform a guassian blur in two passes.
type BlurPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BlurPostProcess) JSObject() js.Value { return b.p }

// BlurPostProcess returns a BlurPostProcess JavaScript class.
func (ba *Babylon) BlurPostProcess() *BlurPostProcess {
	p := ba.ctx.Get("BlurPostProcess")
	return BlurPostProcessFromJSObject(p, ba.ctx)
}

// BlurPostProcessFromJSObject returns a wrapped BlurPostProcess JavaScript class.
func BlurPostProcessFromJSObject(p js.Value, ctx js.Value) *BlurPostProcess {
	return &BlurPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// BlurPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func BlurPostProcessArrayToJSArray(array []*BlurPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewBlurPostProcessOpts contains optional parameters for NewBlurPostProcess.
type NewBlurPostProcessOpts struct {
	SamplingMode     *float64
	Engine           *Engine
	Reusable         *bool
	TextureType      *float64
	Defines          *string
	BlockCompilation *bool
}

// NewBlurPostProcess returns a new BlurPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blurpostprocess
func (ba *Babylon) NewBlurPostProcess(name string, direction *Vector2, kernel float64, options float64, camera *Camera, opts *NewBlurPostProcessOpts) *BlurPostProcess {
	if opts == nil {
		opts = &NewBlurPostProcessOpts{}
	}

	args := make([]interface{}, 0, 5+6)

	args = append(args, name)
	args = append(args, direction.JSObject())
	args = append(args, kernel)
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}
	if opts.Defines == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Defines)
	}
	if opts.BlockCompilation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.BlockCompilation)
	}

	p := ba.ctx.Get("BlurPostProcess").New(args...)
	return BlurPostProcessFromJSObject(p, ba.ctx)
}

// BlurPostProcessUpdateEffectOpts contains optional parameters for BlurPostProcess.UpdateEffect.
type BlurPostProcessUpdateEffectOpts struct {
	Defines         *string
	Uniforms        *string
	Samplers        *string
	IndexParameters *interface{}
	OnCompiled      func()
	OnError         func()
}

// UpdateEffect calls the UpdateEffect method on the BlurPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blurpostprocess#updateeffect
func (b *BlurPostProcess) UpdateEffect(opts *BlurPostProcessUpdateEffectOpts) {
	if opts == nil {
		opts = &BlurPostProcessUpdateEffectOpts{}
	}

	args := make([]interface{}, 0, 0+6)

	if opts.Defines == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Defines)
	}
	if opts.Uniforms == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Uniforms)
	}
	if opts.Samplers == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Samplers)
	}
	if opts.IndexParameters == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.IndexParameters)
	}
	if opts.OnCompiled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { opts.OnCompiled(); return nil }) /* never freed! */)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { opts.OnError(); return nil }) /* never freed! */)
	}

	b.p.Call("updateEffect", args...)
}

// Direction returns the Direction property of class BlurPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blurpostprocess#direction
func (b *BlurPostProcess) Direction() *Vector2 {
	retVal := b.p.Get("direction")
	return Vector2FromJSObject(retVal, b.ctx)
}

// SetDirection sets the Direction property of class BlurPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blurpostprocess#direction
func (b *BlurPostProcess) SetDirection(direction *Vector2) *BlurPostProcess {
	b.p.Set("direction", direction.JSObject())
	return b
}

// Kernel returns the Kernel property of class BlurPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blurpostprocess#kernel
func (b *BlurPostProcess) Kernel() float64 {
	retVal := b.p.Get("kernel")
	return retVal.Float()
}

// SetKernel sets the Kernel property of class BlurPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blurpostprocess#kernel
func (b *BlurPostProcess) SetKernel(kernel float64) *BlurPostProcess {
	b.p.Set("kernel", kernel)
	return b
}

// PackedFloat returns the PackedFloat property of class BlurPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blurpostprocess#packedfloat
func (b *BlurPostProcess) PackedFloat() bool {
	retVal := b.p.Get("packedFloat")
	return retVal.Bool()
}

// SetPackedFloat sets the PackedFloat property of class BlurPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blurpostprocess#packedfloat
func (b *BlurPostProcess) SetPackedFloat(packedFloat bool) *BlurPostProcess {
	b.p.Set("packedFloat", packedFloat)
	return b
}
