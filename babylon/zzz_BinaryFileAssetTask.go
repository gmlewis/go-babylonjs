// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BinaryFileAssetTask represents a babylon.js BinaryFileAssetTask.
// Define a task used by AssetsManager to load binary data
type BinaryFileAssetTask struct {
	*AbstractAssetTask
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BinaryFileAssetTask) JSObject() js.Value { return b.p }

// BinaryFileAssetTask returns a BinaryFileAssetTask JavaScript class.
func (ba *Babylon) BinaryFileAssetTask() *BinaryFileAssetTask {
	p := ba.ctx.Get("BinaryFileAssetTask")
	return BinaryFileAssetTaskFromJSObject(p, ba.ctx)
}

// BinaryFileAssetTaskFromJSObject returns a wrapped BinaryFileAssetTask JavaScript class.
func BinaryFileAssetTaskFromJSObject(p js.Value, ctx js.Value) *BinaryFileAssetTask {
	return &BinaryFileAssetTask{AbstractAssetTask: AbstractAssetTaskFromJSObject(p, ctx), ctx: ctx}
}

// BinaryFileAssetTaskArrayToJSArray returns a JavaScript Array for the wrapped array.
func BinaryFileAssetTaskArrayToJSArray(array []*BinaryFileAssetTask) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewBinaryFileAssetTask returns a new BinaryFileAssetTask object.
//
// https://doc.babylonjs.com/api/classes/babylon.binaryfileassettask
func (ba *Babylon) NewBinaryFileAssetTask(name string, url string) *BinaryFileAssetTask {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, url)

	p := ba.ctx.Get("BinaryFileAssetTask").New(args...)
	return BinaryFileAssetTaskFromJSObject(p, ba.ctx)
}

// RunTask calls the RunTask method on the BinaryFileAssetTask object.
//
// https://doc.babylonjs.com/api/classes/babylon.binaryfileassettask#runtask
func (b *BinaryFileAssetTask) RunTask(scene *Scene, onSuccess func(), onError func()) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, scene.JSObject())
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { onSuccess(); return nil }))
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { onError(); return nil }))

	b.p.Call("runTask", args...)
}

// Data returns the Data property of class BinaryFileAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.binaryfileassettask#data
func (b *BinaryFileAssetTask) Data() js.Value {
	retVal := b.p.Get("data")
	return retVal
}

// SetData sets the Data property of class BinaryFileAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.binaryfileassettask#data
func (b *BinaryFileAssetTask) SetData(data js.Value) *BinaryFileAssetTask {
	b.p.Set("data", data)
	return b
}

// Name returns the Name property of class BinaryFileAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.binaryfileassettask#name
func (b *BinaryFileAssetTask) Name() string {
	retVal := b.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class BinaryFileAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.binaryfileassettask#name
func (b *BinaryFileAssetTask) SetName(name string) *BinaryFileAssetTask {
	b.p.Set("name", name)
	return b
}

// OnError returns the OnError property of class BinaryFileAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.binaryfileassettask#onerror
func (b *BinaryFileAssetTask) OnError() js.Value {
	retVal := b.p.Get("onError")
	return retVal
}

// SetOnError sets the OnError property of class BinaryFileAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.binaryfileassettask#onerror
func (b *BinaryFileAssetTask) SetOnError(onError func()) *BinaryFileAssetTask {
	b.p.Set("onError", js.FuncOf(func(this js.Value, args []js.Value) interface{} { onError(); return nil }))
	return b
}

// OnSuccess returns the OnSuccess property of class BinaryFileAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.binaryfileassettask#onsuccess
func (b *BinaryFileAssetTask) OnSuccess() js.Value {
	retVal := b.p.Get("onSuccess")
	return retVal
}

// SetOnSuccess sets the OnSuccess property of class BinaryFileAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.binaryfileassettask#onsuccess
func (b *BinaryFileAssetTask) SetOnSuccess(onSuccess func()) *BinaryFileAssetTask {
	b.p.Set("onSuccess", js.FuncOf(func(this js.Value, args []js.Value) interface{} { onSuccess(); return nil }))
	return b
}

// Url returns the Url property of class BinaryFileAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.binaryfileassettask#url
func (b *BinaryFileAssetTask) Url() string {
	retVal := b.p.Get("url")
	return retVal.String()
}

// SetUrl sets the Url property of class BinaryFileAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.binaryfileassettask#url
func (b *BinaryFileAssetTask) SetUrl(url string) *BinaryFileAssetTask {
	b.p.Set("url", url)
	return b
}
