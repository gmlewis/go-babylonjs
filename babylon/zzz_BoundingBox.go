// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BoundingBox represents a babylon.js BoundingBox.
// Class used to store bounding box information
type BoundingBox struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BoundingBox) JSObject() js.Value { return b.p }

// BoundingBox returns a BoundingBox JavaScript class.
func (ba *Babylon) BoundingBox() *BoundingBox {
	p := ba.ctx.Get("BoundingBox")
	return BoundingBoxFromJSObject(p, ba.ctx)
}

// BoundingBoxFromJSObject returns a wrapped BoundingBox JavaScript class.
func BoundingBoxFromJSObject(p js.Value, ctx js.Value) *BoundingBox {
	return &BoundingBox{p: p, ctx: ctx}
}

// BoundingBoxArrayToJSArray returns a JavaScript Array for the wrapped array.
func BoundingBoxArrayToJSArray(array []*BoundingBox) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewBoundingBoxOpts contains optional parameters for NewBoundingBox.
type NewBoundingBoxOpts struct {
	WorldMatrix *Matrix
}

// NewBoundingBox returns a new BoundingBox object.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox
func (ba *Babylon) NewBoundingBox(min *Vector3, max *Vector3, opts *NewBoundingBoxOpts) *BoundingBox {
	if opts == nil {
		opts = &NewBoundingBoxOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, min.JSObject())
	args = append(args, max.JSObject())

	if opts.WorldMatrix == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.WorldMatrix.JSObject())
	}

	p := ba.ctx.Get("BoundingBox").New(args...)
	return BoundingBoxFromJSObject(p, ba.ctx)
}

// GetWorldMatrix calls the GetWorldMatrix method on the BoundingBox object.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#getworldmatrix
func (b *BoundingBox) GetWorldMatrix() *Matrix {

	retVal := b.p.Call("getWorldMatrix")
	return MatrixFromJSObject(retVal, b.ctx)
}

// Intersects calls the Intersects method on the BoundingBox object.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#intersects
func (b *BoundingBox) Intersects(box0 *BoundingBox, box1 *BoundingBox) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, box0.JSObject())
	args = append(args, box1.JSObject())

	retVal := b.p.Call("Intersects", args...)
	return retVal.Bool()
}

// IntersectsMinMax calls the IntersectsMinMax method on the BoundingBox object.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#intersectsminmax
func (b *BoundingBox) IntersectsMinMax(min *Vector3, max *Vector3) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, min.JSObject())
	args = append(args, max.JSObject())

	retVal := b.p.Call("intersectsMinMax", args...)
	return retVal.Bool()
}

// IntersectsPoint calls the IntersectsPoint method on the BoundingBox object.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#intersectspoint
func (b *BoundingBox) IntersectsPoint(point *Vector3) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, point.JSObject())

	retVal := b.p.Call("intersectsPoint", args...)
	return retVal.Bool()
}

// IntersectsSphere calls the IntersectsSphere method on the BoundingBox object.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#intersectssphere
func (b *BoundingBox) IntersectsSphere(minPoint *Vector3, maxPoint *Vector3, sphereCenter *Vector3, sphereRadius float64) bool {

	args := make([]interface{}, 0, 4+0)

	args = append(args, minPoint.JSObject())
	args = append(args, maxPoint.JSObject())
	args = append(args, sphereCenter.JSObject())
	args = append(args, sphereRadius)

	retVal := b.p.Call("IntersectsSphere", args...)
	return retVal.Bool()
}

// IsCompletelyInFrustum calls the IsCompletelyInFrustum method on the BoundingBox object.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#iscompletelyinfrustum
func (b *BoundingBox) IsCompletelyInFrustum(boundingVectors []*Vector3, frustumPlanes []*Plane) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, Vector3ArrayToJSArray(boundingVectors))
	args = append(args, PlaneArrayToJSArray(frustumPlanes))

	retVal := b.p.Call("IsCompletelyInFrustum", args...)
	return retVal.Bool()
}

// IsInFrustum calls the IsInFrustum method on the BoundingBox object.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#isinfrustum
func (b *BoundingBox) IsInFrustum(boundingVectors []*Vector3, frustumPlanes []*Plane) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, Vector3ArrayToJSArray(boundingVectors))
	args = append(args, PlaneArrayToJSArray(frustumPlanes))

	retVal := b.p.Call("IsInFrustum", args...)
	return retVal.Bool()
}

// BoundingBoxReConstructOpts contains optional parameters for BoundingBox.ReConstruct.
type BoundingBoxReConstructOpts struct {
	WorldMatrix *Matrix
}

// ReConstruct calls the ReConstruct method on the BoundingBox object.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#reconstruct
func (b *BoundingBox) ReConstruct(min *Vector3, max *Vector3, opts *BoundingBoxReConstructOpts) {
	if opts == nil {
		opts = &BoundingBoxReConstructOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, min.JSObject())
	args = append(args, max.JSObject())

	if opts.WorldMatrix == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.WorldMatrix.JSObject())
	}

	b.p.Call("reConstruct", args...)
}

// Scale calls the Scale method on the BoundingBox object.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#scale
func (b *BoundingBox) Scale(factor float64) *BoundingBox {

	args := make([]interface{}, 0, 1+0)

	args = append(args, factor)

	retVal := b.p.Call("scale", args...)
	return BoundingBoxFromJSObject(retVal, b.ctx)
}

// Center returns the Center property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#center
func (b *BoundingBox) Center() *Vector3 {
	retVal := b.p.Get("center")
	return Vector3FromJSObject(retVal, b.ctx)
}

// SetCenter sets the Center property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#center
func (b *BoundingBox) SetCenter(center *Vector3) *BoundingBox {
	b.p.Set("center", center.JSObject())
	return b
}

// CenterWorld returns the CenterWorld property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#centerworld
func (b *BoundingBox) CenterWorld() *Vector3 {
	retVal := b.p.Get("centerWorld")
	return Vector3FromJSObject(retVal, b.ctx)
}

// SetCenterWorld sets the CenterWorld property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#centerworld
func (b *BoundingBox) SetCenterWorld(centerWorld *Vector3) *BoundingBox {
	b.p.Set("centerWorld", centerWorld.JSObject())
	return b
}

// Directions returns the Directions property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#directions
func (b *BoundingBox) Directions() *Vector3 {
	retVal := b.p.Get("directions")
	return Vector3FromJSObject(retVal, b.ctx)
}

// SetDirections sets the Directions property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#directions
func (b *BoundingBox) SetDirections(directions *Vector3) *BoundingBox {
	b.p.Set("directions", directions.JSObject())
	return b
}

// ExtendSize returns the ExtendSize property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#extendsize
func (b *BoundingBox) ExtendSize() *Vector3 {
	retVal := b.p.Get("extendSize")
	return Vector3FromJSObject(retVal, b.ctx)
}

// SetExtendSize sets the ExtendSize property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#extendsize
func (b *BoundingBox) SetExtendSize(extendSize *Vector3) *BoundingBox {
	b.p.Set("extendSize", extendSize.JSObject())
	return b
}

// ExtendSizeWorld returns the ExtendSizeWorld property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#extendsizeworld
func (b *BoundingBox) ExtendSizeWorld() *Vector3 {
	retVal := b.p.Get("extendSizeWorld")
	return Vector3FromJSObject(retVal, b.ctx)
}

// SetExtendSizeWorld sets the ExtendSizeWorld property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#extendsizeworld
func (b *BoundingBox) SetExtendSizeWorld(extendSizeWorld *Vector3) *BoundingBox {
	b.p.Set("extendSizeWorld", extendSizeWorld.JSObject())
	return b
}

// Maximum returns the Maximum property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#maximum
func (b *BoundingBox) Maximum() *Vector3 {
	retVal := b.p.Get("maximum")
	return Vector3FromJSObject(retVal, b.ctx)
}

// SetMaximum sets the Maximum property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#maximum
func (b *BoundingBox) SetMaximum(maximum *Vector3) *BoundingBox {
	b.p.Set("maximum", maximum.JSObject())
	return b
}

// MaximumWorld returns the MaximumWorld property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#maximumworld
func (b *BoundingBox) MaximumWorld() *Vector3 {
	retVal := b.p.Get("maximumWorld")
	return Vector3FromJSObject(retVal, b.ctx)
}

// SetMaximumWorld sets the MaximumWorld property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#maximumworld
func (b *BoundingBox) SetMaximumWorld(maximumWorld *Vector3) *BoundingBox {
	b.p.Set("maximumWorld", maximumWorld.JSObject())
	return b
}

// Minimum returns the Minimum property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#minimum
func (b *BoundingBox) Minimum() *Vector3 {
	retVal := b.p.Get("minimum")
	return Vector3FromJSObject(retVal, b.ctx)
}

// SetMinimum sets the Minimum property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#minimum
func (b *BoundingBox) SetMinimum(minimum *Vector3) *BoundingBox {
	b.p.Set("minimum", minimum.JSObject())
	return b
}

// MinimumWorld returns the MinimumWorld property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#minimumworld
func (b *BoundingBox) MinimumWorld() *Vector3 {
	retVal := b.p.Get("minimumWorld")
	return Vector3FromJSObject(retVal, b.ctx)
}

// SetMinimumWorld sets the MinimumWorld property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#minimumworld
func (b *BoundingBox) SetMinimumWorld(minimumWorld *Vector3) *BoundingBox {
	b.p.Set("minimumWorld", minimumWorld.JSObject())
	return b
}

// Vectors returns the Vectors property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#vectors
func (b *BoundingBox) Vectors() *Vector3 {
	retVal := b.p.Get("vectors")
	return Vector3FromJSObject(retVal, b.ctx)
}

// SetVectors sets the Vectors property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#vectors
func (b *BoundingBox) SetVectors(vectors *Vector3) *BoundingBox {
	b.p.Set("vectors", vectors.JSObject())
	return b
}

// VectorsWorld returns the VectorsWorld property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#vectorsworld
func (b *BoundingBox) VectorsWorld() *Vector3 {
	retVal := b.p.Get("vectorsWorld")
	return Vector3FromJSObject(retVal, b.ctx)
}

// SetVectorsWorld sets the VectorsWorld property of class BoundingBox.
//
// https://doc.babylonjs.com/api/classes/babylon.boundingbox#vectorsworld
func (b *BoundingBox) SetVectorsWorld(vectorsWorld *Vector3) *BoundingBox {
	b.p.Set("vectorsWorld", vectorsWorld.JSObject())
	return b
}
