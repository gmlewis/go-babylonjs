// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Checkbox represents a babylon.js Checkbox.
// Class used to represent a 2D checkbox
type Checkbox struct {
	*Control
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *Checkbox) JSObject() js.Value { return c.p }

// Checkbox returns a Checkbox JavaScript class.
func (ba *Babylon) Checkbox() *Checkbox {
	p := ba.ctx.Get("Checkbox")
	return CheckboxFromJSObject(p, ba.ctx)
}

// CheckboxFromJSObject returns a wrapped Checkbox JavaScript class.
func CheckboxFromJSObject(p js.Value, ctx js.Value) *Checkbox {
	return &Checkbox{Control: ControlFromJSObject(p, ctx), ctx: ctx}
}

// CheckboxArrayToJSArray returns a JavaScript Array for the wrapped array.
func CheckboxArrayToJSArray(array []*Checkbox) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewCheckboxOpts contains optional parameters for NewCheckbox.
type NewCheckboxOpts struct {
	Name *string
}

// NewCheckbox returns a new Checkbox object.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox
func (ba *Babylon) NewCheckbox(opts *NewCheckboxOpts) *Checkbox {
	if opts == nil {
		opts = &NewCheckboxOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}

	p := ba.ctx.Get("Checkbox").New(args...)
	return CheckboxFromJSObject(p, ba.ctx)
}

// AddCheckBoxWithHeader calls the AddCheckBoxWithHeader method on the Checkbox object.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#addcheckboxwithheader
func (c *Checkbox) AddCheckBoxWithHeader(title string, onValueChanged func()) *StackPanel {

	args := make([]interface{}, 0, 2+0)

	args = append(args, title)
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { onValueChanged(); return nil }))

	retVal := c.p.Call("AddCheckBoxWithHeader", args...)
	return StackPanelFromJSObject(retVal, c.ctx)
}

// Contains calls the Contains method on the Checkbox object.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#contains
func (c *Checkbox) Contains(x float64, y float64) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, x)
	args = append(args, y)

	retVal := c.p.Call("contains", args...)
	return retVal.Bool()
}

// Dispose calls the Dispose method on the Checkbox object.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#dispose
func (c *Checkbox) Dispose() {

	c.p.Call("dispose")
}

// GetAscendantOfClass calls the GetAscendantOfClass method on the Checkbox object.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#getascendantofclass
func (c *Checkbox) GetAscendantOfClass(className string) *Control {

	args := make([]interface{}, 0, 1+0)

	args = append(args, className)

	retVal := c.p.Call("getAscendantOfClass", args...)
	return ControlFromJSObject(retVal, c.ctx)
}

// GetClassName calls the GetClassName method on the Checkbox object.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#getclassname
func (c *Checkbox) GetClassName() string {

	retVal := c.p.Call("getClassName")
	return retVal.String()
}

// CheckboxGetDescendantsOpts contains optional parameters for Checkbox.GetDescendants.
type CheckboxGetDescendantsOpts struct {
	DirectDescendantsOnly *bool
	Predicate             func()
}

// GetDescendants calls the GetDescendants method on the Checkbox object.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#getdescendants
func (c *Checkbox) GetDescendants(opts *CheckboxGetDescendantsOpts) *Control {
	if opts == nil {
		opts = &CheckboxGetDescendantsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := c.p.Call("getDescendants", args...)
	return ControlFromJSObject(retVal, c.ctx)
}

// CheckboxGetDescendantsToRefOpts contains optional parameters for Checkbox.GetDescendantsToRef.
type CheckboxGetDescendantsToRefOpts struct {
	DirectDescendantsOnly *bool
	Predicate             func()
}

// GetDescendantsToRef calls the GetDescendantsToRef method on the Checkbox object.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#getdescendantstoref
func (c *Checkbox) GetDescendantsToRef(results *Control, opts *CheckboxGetDescendantsToRefOpts) {
	if opts == nil {
		opts = &CheckboxGetDescendantsToRefOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, results.JSObject())

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	c.p.Call("getDescendantsToRef", args...)
}

// GetLocalCoordinates calls the GetLocalCoordinates method on the Checkbox object.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#getlocalcoordinates
func (c *Checkbox) GetLocalCoordinates(globalCoordinates *Vector2) *Vector2 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, globalCoordinates.JSObject())

	retVal := c.p.Call("getLocalCoordinates", args...)
	return Vector2FromJSObject(retVal, c.ctx)
}

// GetLocalCoordinatesToRef calls the GetLocalCoordinatesToRef method on the Checkbox object.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#getlocalcoordinatestoref
func (c *Checkbox) GetLocalCoordinatesToRef(globalCoordinates *Vector2, result *Vector2) *Control {

	args := make([]interface{}, 0, 2+0)

	args = append(args, globalCoordinates.JSObject())
	args = append(args, result.JSObject())

	retVal := c.p.Call("getLocalCoordinatesToRef", args...)
	return ControlFromJSObject(retVal, c.ctx)
}

// GetParentLocalCoordinates calls the GetParentLocalCoordinates method on the Checkbox object.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#getparentlocalcoordinates
func (c *Checkbox) GetParentLocalCoordinates(globalCoordinates *Vector2) *Vector2 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, globalCoordinates.JSObject())

	retVal := c.p.Call("getParentLocalCoordinates", args...)
	return Vector2FromJSObject(retVal, c.ctx)
}

// IsAscendant calls the IsAscendant method on the Checkbox object.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#isascendant
func (c *Checkbox) IsAscendant(container *Control) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, container.JSObject())

	retVal := c.p.Call("isAscendant", args...)
	return retVal.Bool()
}

// LinkWithMesh calls the LinkWithMesh method on the Checkbox object.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#linkwithmesh
func (c *Checkbox) LinkWithMesh(mesh *AbstractMesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	c.p.Call("linkWithMesh", args...)
}

// MoveToVector3 calls the MoveToVector3 method on the Checkbox object.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#movetovector3
func (c *Checkbox) MoveToVector3(position *Vector3, scene *Scene) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	c.p.Call("moveToVector3", args...)
}

/*

// AllowAlphaInheritance returns the AllowAlphaInheritance property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#allowalphainheritance
func (c *Checkbox) AllowAlphaInheritance(AllowAlphaInheritance bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(AllowAlphaInheritance)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetAllowAlphaInheritance sets the AllowAlphaInheritance property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#allowalphainheritance
func (c *Checkbox) SetAllowAlphaInheritance(AllowAlphaInheritance bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(AllowAlphaInheritance)
	return CheckboxFromJSObject(p, ba.ctx)
}

// Alpha returns the Alpha property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#alpha
func (c *Checkbox) Alpha(alpha float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(alpha)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetAlpha sets the Alpha property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#alpha
func (c *Checkbox) SetAlpha(alpha float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(alpha)
	return CheckboxFromJSObject(p, ba.ctx)
}

// Background returns the Background property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#background
func (c *Checkbox) Background(background string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(background)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetBackground sets the Background property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#background
func (c *Checkbox) SetBackground(background string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(background)
	return CheckboxFromJSObject(p, ba.ctx)
}

// CenterX returns the CenterX property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#centerx
func (c *Checkbox) CenterX(centerX float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(centerX)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetCenterX sets the CenterX property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#centerx
func (c *Checkbox) SetCenterX(centerX float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(centerX)
	return CheckboxFromJSObject(p, ba.ctx)
}

// CenterY returns the CenterY property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#centery
func (c *Checkbox) CenterY(centerY float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(centerY)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetCenterY sets the CenterY property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#centery
func (c *Checkbox) SetCenterY(centerY float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(centerY)
	return CheckboxFromJSObject(p, ba.ctx)
}

// CheckSizeRatio returns the CheckSizeRatio property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#checksizeratio
func (c *Checkbox) CheckSizeRatio(checkSizeRatio float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(checkSizeRatio)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetCheckSizeRatio sets the CheckSizeRatio property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#checksizeratio
func (c *Checkbox) SetCheckSizeRatio(checkSizeRatio float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(checkSizeRatio)
	return CheckboxFromJSObject(p, ba.ctx)
}

// ClipChildren returns the ClipChildren property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#clipchildren
func (c *Checkbox) ClipChildren(clipChildren bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(clipChildren)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetClipChildren sets the ClipChildren property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#clipchildren
func (c *Checkbox) SetClipChildren(clipChildren bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(clipChildren)
	return CheckboxFromJSObject(p, ba.ctx)
}

// ClipContent returns the ClipContent property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#clipcontent
func (c *Checkbox) ClipContent(clipContent bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(clipContent)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetClipContent sets the ClipContent property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#clipcontent
func (c *Checkbox) SetClipContent(clipContent bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(clipContent)
	return CheckboxFromJSObject(p, ba.ctx)
}

// Color returns the Color property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#color
func (c *Checkbox) Color(color string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(color)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetColor sets the Color property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#color
func (c *Checkbox) SetColor(color string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(color)
	return CheckboxFromJSObject(p, ba.ctx)
}

// DisabledColor returns the DisabledColor property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#disabledcolor
func (c *Checkbox) DisabledColor(disabledColor string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(disabledColor)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetDisabledColor sets the DisabledColor property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#disabledcolor
func (c *Checkbox) SetDisabledColor(disabledColor string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(disabledColor)
	return CheckboxFromJSObject(p, ba.ctx)
}

// FontFamily returns the FontFamily property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#fontfamily
func (c *Checkbox) FontFamily(fontFamily string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(fontFamily)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetFontFamily sets the FontFamily property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#fontfamily
func (c *Checkbox) SetFontFamily(fontFamily string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(fontFamily)
	return CheckboxFromJSObject(p, ba.ctx)
}

// FontOffset returns the FontOffset property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#fontoffset
func (c *Checkbox) FontOffset(fontOffset js.Value) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(fontOffset)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetFontOffset sets the FontOffset property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#fontoffset
func (c *Checkbox) SetFontOffset(fontOffset js.Value) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(fontOffset)
	return CheckboxFromJSObject(p, ba.ctx)
}

// FontSize returns the FontSize property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#fontsize
func (c *Checkbox) FontSize(fontSize string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(fontSize)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetFontSize sets the FontSize property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#fontsize
func (c *Checkbox) SetFontSize(fontSize string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(fontSize)
	return CheckboxFromJSObject(p, ba.ctx)
}

// FontSizeInPixels returns the FontSizeInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#fontsizeinpixels
func (c *Checkbox) FontSizeInPixels(fontSizeInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(fontSizeInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetFontSizeInPixels sets the FontSizeInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#fontsizeinpixels
func (c *Checkbox) SetFontSizeInPixels(fontSizeInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(fontSizeInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// FontStyle returns the FontStyle property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#fontstyle
func (c *Checkbox) FontStyle(fontStyle string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(fontStyle)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetFontStyle sets the FontStyle property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#fontstyle
func (c *Checkbox) SetFontStyle(fontStyle string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(fontStyle)
	return CheckboxFromJSObject(p, ba.ctx)
}

// FontWeight returns the FontWeight property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#fontweight
func (c *Checkbox) FontWeight(fontWeight string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(fontWeight)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetFontWeight sets the FontWeight property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#fontweight
func (c *Checkbox) SetFontWeight(fontWeight string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(fontWeight)
	return CheckboxFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_CENTER returns the HORIZONTAL_ALIGNMENT_CENTER property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#horizontal_alignment_center
func (c *Checkbox) HORIZONTAL_ALIGNMENT_CENTER(HORIZONTAL_ALIGNMENT_CENTER float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(HORIZONTAL_ALIGNMENT_CENTER)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_CENTER sets the HORIZONTAL_ALIGNMENT_CENTER property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#horizontal_alignment_center
func (c *Checkbox) SetHORIZONTAL_ALIGNMENT_CENTER(HORIZONTAL_ALIGNMENT_CENTER float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(HORIZONTAL_ALIGNMENT_CENTER)
	return CheckboxFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_LEFT returns the HORIZONTAL_ALIGNMENT_LEFT property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#horizontal_alignment_left
func (c *Checkbox) HORIZONTAL_ALIGNMENT_LEFT(HORIZONTAL_ALIGNMENT_LEFT float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(HORIZONTAL_ALIGNMENT_LEFT)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_LEFT sets the HORIZONTAL_ALIGNMENT_LEFT property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#horizontal_alignment_left
func (c *Checkbox) SetHORIZONTAL_ALIGNMENT_LEFT(HORIZONTAL_ALIGNMENT_LEFT float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(HORIZONTAL_ALIGNMENT_LEFT)
	return CheckboxFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_RIGHT returns the HORIZONTAL_ALIGNMENT_RIGHT property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#horizontal_alignment_right
func (c *Checkbox) HORIZONTAL_ALIGNMENT_RIGHT(HORIZONTAL_ALIGNMENT_RIGHT float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(HORIZONTAL_ALIGNMENT_RIGHT)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_RIGHT sets the HORIZONTAL_ALIGNMENT_RIGHT property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#horizontal_alignment_right
func (c *Checkbox) SetHORIZONTAL_ALIGNMENT_RIGHT(HORIZONTAL_ALIGNMENT_RIGHT float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(HORIZONTAL_ALIGNMENT_RIGHT)
	return CheckboxFromJSObject(p, ba.ctx)
}

// Height returns the Height property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#height
func (c *Checkbox) Height(height string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(height)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetHeight sets the Height property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#height
func (c *Checkbox) SetHeight(height string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(height)
	return CheckboxFromJSObject(p, ba.ctx)
}

// HeightInPixels returns the HeightInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#heightinpixels
func (c *Checkbox) HeightInPixels(heightInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(heightInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetHeightInPixels sets the HeightInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#heightinpixels
func (c *Checkbox) SetHeightInPixels(heightInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(heightInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// HorizontalAlignment returns the HorizontalAlignment property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#horizontalalignment
func (c *Checkbox) HorizontalAlignment(horizontalAlignment float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(horizontalAlignment)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetHorizontalAlignment sets the HorizontalAlignment property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#horizontalalignment
func (c *Checkbox) SetHorizontalAlignment(horizontalAlignment float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(horizontalAlignment)
	return CheckboxFromJSObject(p, ba.ctx)
}

// Host returns the Host property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#host
func (c *Checkbox) Host(host *AdvancedDynamicTexture) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(host.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetHost sets the Host property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#host
func (c *Checkbox) SetHost(host *AdvancedDynamicTexture) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(host.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// HoverCursor returns the HoverCursor property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#hovercursor
func (c *Checkbox) HoverCursor(hoverCursor string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(hoverCursor)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetHoverCursor sets the HoverCursor property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#hovercursor
func (c *Checkbox) SetHoverCursor(hoverCursor string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(hoverCursor)
	return CheckboxFromJSObject(p, ba.ctx)
}

// IsChecked returns the IsChecked property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#ischecked
func (c *Checkbox) IsChecked(isChecked bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isChecked)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetIsChecked sets the IsChecked property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#ischecked
func (c *Checkbox) SetIsChecked(isChecked bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isChecked)
	return CheckboxFromJSObject(p, ba.ctx)
}

// IsDirty returns the IsDirty property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#isdirty
func (c *Checkbox) IsDirty(isDirty bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isDirty)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetIsDirty sets the IsDirty property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#isdirty
func (c *Checkbox) SetIsDirty(isDirty bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isDirty)
	return CheckboxFromJSObject(p, ba.ctx)
}

// IsEnabled returns the IsEnabled property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#isenabled
func (c *Checkbox) IsEnabled(isEnabled bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isEnabled)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetIsEnabled sets the IsEnabled property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#isenabled
func (c *Checkbox) SetIsEnabled(isEnabled bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isEnabled)
	return CheckboxFromJSObject(p, ba.ctx)
}

// IsFocusInvisible returns the IsFocusInvisible property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#isfocusinvisible
func (c *Checkbox) IsFocusInvisible(isFocusInvisible bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isFocusInvisible)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetIsFocusInvisible sets the IsFocusInvisible property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#isfocusinvisible
func (c *Checkbox) SetIsFocusInvisible(isFocusInvisible bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isFocusInvisible)
	return CheckboxFromJSObject(p, ba.ctx)
}

// IsHighlighted returns the IsHighlighted property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#ishighlighted
func (c *Checkbox) IsHighlighted(isHighlighted bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isHighlighted)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetIsHighlighted sets the IsHighlighted property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#ishighlighted
func (c *Checkbox) SetIsHighlighted(isHighlighted bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isHighlighted)
	return CheckboxFromJSObject(p, ba.ctx)
}

// IsHitTestVisible returns the IsHitTestVisible property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#ishittestvisible
func (c *Checkbox) IsHitTestVisible(isHitTestVisible bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isHitTestVisible)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetIsHitTestVisible sets the IsHitTestVisible property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#ishittestvisible
func (c *Checkbox) SetIsHitTestVisible(isHitTestVisible bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isHitTestVisible)
	return CheckboxFromJSObject(p, ba.ctx)
}

// IsPointerBlocker returns the IsPointerBlocker property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#ispointerblocker
func (c *Checkbox) IsPointerBlocker(isPointerBlocker bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isPointerBlocker)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetIsPointerBlocker sets the IsPointerBlocker property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#ispointerblocker
func (c *Checkbox) SetIsPointerBlocker(isPointerBlocker bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isPointerBlocker)
	return CheckboxFromJSObject(p, ba.ctx)
}

// IsVisible returns the IsVisible property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#isvisible
func (c *Checkbox) IsVisible(isVisible bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isVisible)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetIsVisible sets the IsVisible property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#isvisible
func (c *Checkbox) SetIsVisible(isVisible bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(isVisible)
	return CheckboxFromJSObject(p, ba.ctx)
}

// Left returns the Left property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#left
func (c *Checkbox) Left(left string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(left)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#left
func (c *Checkbox) SetLeft(left string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(left)
	return CheckboxFromJSObject(p, ba.ctx)
}

// LeftInPixels returns the LeftInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#leftinpixels
func (c *Checkbox) LeftInPixels(leftInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(leftInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetLeftInPixels sets the LeftInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#leftinpixels
func (c *Checkbox) SetLeftInPixels(leftInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(leftInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// LinkOffsetX returns the LinkOffsetX property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#linkoffsetx
func (c *Checkbox) LinkOffsetX(linkOffsetX string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(linkOffsetX)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetLinkOffsetX sets the LinkOffsetX property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#linkoffsetx
func (c *Checkbox) SetLinkOffsetX(linkOffsetX string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(linkOffsetX)
	return CheckboxFromJSObject(p, ba.ctx)
}

// LinkOffsetXInPixels returns the LinkOffsetXInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#linkoffsetxinpixels
func (c *Checkbox) LinkOffsetXInPixels(linkOffsetXInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(linkOffsetXInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetLinkOffsetXInPixels sets the LinkOffsetXInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#linkoffsetxinpixels
func (c *Checkbox) SetLinkOffsetXInPixels(linkOffsetXInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(linkOffsetXInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// LinkOffsetY returns the LinkOffsetY property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#linkoffsety
func (c *Checkbox) LinkOffsetY(linkOffsetY string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(linkOffsetY)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetLinkOffsetY sets the LinkOffsetY property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#linkoffsety
func (c *Checkbox) SetLinkOffsetY(linkOffsetY string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(linkOffsetY)
	return CheckboxFromJSObject(p, ba.ctx)
}

// LinkOffsetYInPixels returns the LinkOffsetYInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#linkoffsetyinpixels
func (c *Checkbox) LinkOffsetYInPixels(linkOffsetYInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(linkOffsetYInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetLinkOffsetYInPixels sets the LinkOffsetYInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#linkoffsetyinpixels
func (c *Checkbox) SetLinkOffsetYInPixels(linkOffsetYInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(linkOffsetYInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// LinkedMesh returns the LinkedMesh property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#linkedmesh
func (c *Checkbox) LinkedMesh(linkedMesh *AbstractMesh) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(linkedMesh.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetLinkedMesh sets the LinkedMesh property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#linkedmesh
func (c *Checkbox) SetLinkedMesh(linkedMesh *AbstractMesh) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(linkedMesh.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#metadata
func (c *Checkbox) Metadata(metadata interface{}) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(metadata)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#metadata
func (c *Checkbox) SetMetadata(metadata interface{}) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(metadata)
	return CheckboxFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#name
func (c *Checkbox) Name(name string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(name)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#name
func (c *Checkbox) SetName(name string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(name)
	return CheckboxFromJSObject(p, ba.ctx)
}

// NotRenderable returns the NotRenderable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#notrenderable
func (c *Checkbox) NotRenderable(notRenderable bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(notRenderable)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetNotRenderable sets the NotRenderable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#notrenderable
func (c *Checkbox) SetNotRenderable(notRenderable bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(notRenderable)
	return CheckboxFromJSObject(p, ba.ctx)
}

// OnAfterDrawObservable returns the OnAfterDrawObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onafterdrawobservable
func (c *Checkbox) OnAfterDrawObservable(onAfterDrawObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onAfterDrawObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetOnAfterDrawObservable sets the OnAfterDrawObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onafterdrawobservable
func (c *Checkbox) SetOnAfterDrawObservable(onAfterDrawObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onAfterDrawObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// OnBeforeDrawObservable returns the OnBeforeDrawObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onbeforedrawobservable
func (c *Checkbox) OnBeforeDrawObservable(onBeforeDrawObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onBeforeDrawObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetOnBeforeDrawObservable sets the OnBeforeDrawObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onbeforedrawobservable
func (c *Checkbox) SetOnBeforeDrawObservable(onBeforeDrawObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onBeforeDrawObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// OnDirtyObservable returns the OnDirtyObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#ondirtyobservable
func (c *Checkbox) OnDirtyObservable(onDirtyObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onDirtyObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetOnDirtyObservable sets the OnDirtyObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#ondirtyobservable
func (c *Checkbox) SetOnDirtyObservable(onDirtyObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onDirtyObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// OnIsCheckedChangedObservable returns the OnIsCheckedChangedObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onischeckedchangedobservable
func (c *Checkbox) OnIsCheckedChangedObservable(onIsCheckedChangedObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onIsCheckedChangedObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetOnIsCheckedChangedObservable sets the OnIsCheckedChangedObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onischeckedchangedobservable
func (c *Checkbox) SetOnIsCheckedChangedObservable(onIsCheckedChangedObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onIsCheckedChangedObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// OnPointerClickObservable returns the OnPointerClickObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onpointerclickobservable
func (c *Checkbox) OnPointerClickObservable(onPointerClickObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onPointerClickObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetOnPointerClickObservable sets the OnPointerClickObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onpointerclickobservable
func (c *Checkbox) SetOnPointerClickObservable(onPointerClickObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onPointerClickObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// OnPointerDownObservable returns the OnPointerDownObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onpointerdownobservable
func (c *Checkbox) OnPointerDownObservable(onPointerDownObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onPointerDownObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetOnPointerDownObservable sets the OnPointerDownObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onpointerdownobservable
func (c *Checkbox) SetOnPointerDownObservable(onPointerDownObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onPointerDownObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// OnPointerEnterObservable returns the OnPointerEnterObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onpointerenterobservable
func (c *Checkbox) OnPointerEnterObservable(onPointerEnterObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onPointerEnterObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetOnPointerEnterObservable sets the OnPointerEnterObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onpointerenterobservable
func (c *Checkbox) SetOnPointerEnterObservable(onPointerEnterObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onPointerEnterObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// OnPointerMoveObservable returns the OnPointerMoveObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onpointermoveobservable
func (c *Checkbox) OnPointerMoveObservable(onPointerMoveObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onPointerMoveObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetOnPointerMoveObservable sets the OnPointerMoveObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onpointermoveobservable
func (c *Checkbox) SetOnPointerMoveObservable(onPointerMoveObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onPointerMoveObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// OnPointerOutObservable returns the OnPointerOutObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onpointeroutobservable
func (c *Checkbox) OnPointerOutObservable(onPointerOutObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onPointerOutObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetOnPointerOutObservable sets the OnPointerOutObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onpointeroutobservable
func (c *Checkbox) SetOnPointerOutObservable(onPointerOutObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onPointerOutObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// OnPointerUpObservable returns the OnPointerUpObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onpointerupobservable
func (c *Checkbox) OnPointerUpObservable(onPointerUpObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onPointerUpObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetOnPointerUpObservable sets the OnPointerUpObservable property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#onpointerupobservable
func (c *Checkbox) SetOnPointerUpObservable(onPointerUpObservable *Observable) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(onPointerUpObservable.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// PaddingBottom returns the PaddingBottom property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingbottom
func (c *Checkbox) PaddingBottom(paddingBottom string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingBottom)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetPaddingBottom sets the PaddingBottom property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingbottom
func (c *Checkbox) SetPaddingBottom(paddingBottom string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingBottom)
	return CheckboxFromJSObject(p, ba.ctx)
}

// PaddingBottomInPixels returns the PaddingBottomInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingbottominpixels
func (c *Checkbox) PaddingBottomInPixels(paddingBottomInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingBottomInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetPaddingBottomInPixels sets the PaddingBottomInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingbottominpixels
func (c *Checkbox) SetPaddingBottomInPixels(paddingBottomInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingBottomInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// PaddingLeft returns the PaddingLeft property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingleft
func (c *Checkbox) PaddingLeft(paddingLeft string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingLeft)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetPaddingLeft sets the PaddingLeft property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingleft
func (c *Checkbox) SetPaddingLeft(paddingLeft string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingLeft)
	return CheckboxFromJSObject(p, ba.ctx)
}

// PaddingLeftInPixels returns the PaddingLeftInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingleftinpixels
func (c *Checkbox) PaddingLeftInPixels(paddingLeftInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingLeftInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetPaddingLeftInPixels sets the PaddingLeftInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingleftinpixels
func (c *Checkbox) SetPaddingLeftInPixels(paddingLeftInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingLeftInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// PaddingRight returns the PaddingRight property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingright
func (c *Checkbox) PaddingRight(paddingRight string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingRight)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetPaddingRight sets the PaddingRight property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingright
func (c *Checkbox) SetPaddingRight(paddingRight string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingRight)
	return CheckboxFromJSObject(p, ba.ctx)
}

// PaddingRightInPixels returns the PaddingRightInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingrightinpixels
func (c *Checkbox) PaddingRightInPixels(paddingRightInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingRightInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetPaddingRightInPixels sets the PaddingRightInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingrightinpixels
func (c *Checkbox) SetPaddingRightInPixels(paddingRightInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingRightInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// PaddingTop returns the PaddingTop property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingtop
func (c *Checkbox) PaddingTop(paddingTop string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingTop)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetPaddingTop sets the PaddingTop property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingtop
func (c *Checkbox) SetPaddingTop(paddingTop string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingTop)
	return CheckboxFromJSObject(p, ba.ctx)
}

// PaddingTopInPixels returns the PaddingTopInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingtopinpixels
func (c *Checkbox) PaddingTopInPixels(paddingTopInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingTopInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetPaddingTopInPixels sets the PaddingTopInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#paddingtopinpixels
func (c *Checkbox) SetPaddingTopInPixels(paddingTopInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(paddingTopInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// Parent returns the Parent property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#parent
func (c *Checkbox) Parent(parent *Container) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(parent.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetParent sets the Parent property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#parent
func (c *Checkbox) SetParent(parent *Container) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(parent.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// Rotation returns the Rotation property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#rotation
func (c *Checkbox) Rotation(rotation float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(rotation)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetRotation sets the Rotation property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#rotation
func (c *Checkbox) SetRotation(rotation float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(rotation)
	return CheckboxFromJSObject(p, ba.ctx)
}

// ScaleX returns the ScaleX property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#scalex
func (c *Checkbox) ScaleX(scaleX float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(scaleX)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetScaleX sets the ScaleX property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#scalex
func (c *Checkbox) SetScaleX(scaleX float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(scaleX)
	return CheckboxFromJSObject(p, ba.ctx)
}

// ScaleY returns the ScaleY property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#scaley
func (c *Checkbox) ScaleY(scaleY float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(scaleY)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetScaleY sets the ScaleY property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#scaley
func (c *Checkbox) SetScaleY(scaleY float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(scaleY)
	return CheckboxFromJSObject(p, ba.ctx)
}

// ShadowBlur returns the ShadowBlur property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#shadowblur
func (c *Checkbox) ShadowBlur(shadowBlur float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(shadowBlur)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetShadowBlur sets the ShadowBlur property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#shadowblur
func (c *Checkbox) SetShadowBlur(shadowBlur float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(shadowBlur)
	return CheckboxFromJSObject(p, ba.ctx)
}

// ShadowColor returns the ShadowColor property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#shadowcolor
func (c *Checkbox) ShadowColor(shadowColor string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(shadowColor)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetShadowColor sets the ShadowColor property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#shadowcolor
func (c *Checkbox) SetShadowColor(shadowColor string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(shadowColor)
	return CheckboxFromJSObject(p, ba.ctx)
}

// ShadowOffsetX returns the ShadowOffsetX property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#shadowoffsetx
func (c *Checkbox) ShadowOffsetX(shadowOffsetX float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(shadowOffsetX)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetShadowOffsetX sets the ShadowOffsetX property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#shadowoffsetx
func (c *Checkbox) SetShadowOffsetX(shadowOffsetX float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(shadowOffsetX)
	return CheckboxFromJSObject(p, ba.ctx)
}

// ShadowOffsetY returns the ShadowOffsetY property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#shadowoffsety
func (c *Checkbox) ShadowOffsetY(shadowOffsetY float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(shadowOffsetY)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetShadowOffsetY sets the ShadowOffsetY property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#shadowoffsety
func (c *Checkbox) SetShadowOffsetY(shadowOffsetY float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(shadowOffsetY)
	return CheckboxFromJSObject(p, ba.ctx)
}

// Style returns the Style property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#style
func (c *Checkbox) Style(style *Style) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(style.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetStyle sets the Style property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#style
func (c *Checkbox) SetStyle(style *Style) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(style.JSObject())
	return CheckboxFromJSObject(p, ba.ctx)
}

// Thickness returns the Thickness property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#thickness
func (c *Checkbox) Thickness(thickness float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(thickness)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetThickness sets the Thickness property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#thickness
func (c *Checkbox) SetThickness(thickness float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(thickness)
	return CheckboxFromJSObject(p, ba.ctx)
}

// Top returns the Top property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#top
func (c *Checkbox) Top(top string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(top)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetTop sets the Top property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#top
func (c *Checkbox) SetTop(top string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(top)
	return CheckboxFromJSObject(p, ba.ctx)
}

// TopInPixels returns the TopInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#topinpixels
func (c *Checkbox) TopInPixels(topInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(topInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetTopInPixels sets the TopInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#topinpixels
func (c *Checkbox) SetTopInPixels(topInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(topInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// TransformCenterX returns the TransformCenterX property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#transformcenterx
func (c *Checkbox) TransformCenterX(transformCenterX float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(transformCenterX)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetTransformCenterX sets the TransformCenterX property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#transformcenterx
func (c *Checkbox) SetTransformCenterX(transformCenterX float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(transformCenterX)
	return CheckboxFromJSObject(p, ba.ctx)
}

// TransformCenterY returns the TransformCenterY property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#transformcentery
func (c *Checkbox) TransformCenterY(transformCenterY float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(transformCenterY)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetTransformCenterY sets the TransformCenterY property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#transformcentery
func (c *Checkbox) SetTransformCenterY(transformCenterY float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(transformCenterY)
	return CheckboxFromJSObject(p, ba.ctx)
}

// TypeName returns the TypeName property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#typename
func (c *Checkbox) TypeName(typeName string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(typeName)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetTypeName sets the TypeName property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#typename
func (c *Checkbox) SetTypeName(typeName string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(typeName)
	return CheckboxFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#uniqueid
func (c *Checkbox) UniqueId(uniqueId float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(uniqueId)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#uniqueid
func (c *Checkbox) SetUniqueId(uniqueId float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(uniqueId)
	return CheckboxFromJSObject(p, ba.ctx)
}

// UseBitmapCache returns the UseBitmapCache property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#usebitmapcache
func (c *Checkbox) UseBitmapCache(useBitmapCache bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(useBitmapCache)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetUseBitmapCache sets the UseBitmapCache property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#usebitmapcache
func (c *Checkbox) SetUseBitmapCache(useBitmapCache bool) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(useBitmapCache)
	return CheckboxFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_BOTTOM returns the VERTICAL_ALIGNMENT_BOTTOM property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#vertical_alignment_bottom
func (c *Checkbox) VERTICAL_ALIGNMENT_BOTTOM(VERTICAL_ALIGNMENT_BOTTOM float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(VERTICAL_ALIGNMENT_BOTTOM)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_BOTTOM sets the VERTICAL_ALIGNMENT_BOTTOM property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#vertical_alignment_bottom
func (c *Checkbox) SetVERTICAL_ALIGNMENT_BOTTOM(VERTICAL_ALIGNMENT_BOTTOM float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(VERTICAL_ALIGNMENT_BOTTOM)
	return CheckboxFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_CENTER returns the VERTICAL_ALIGNMENT_CENTER property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#vertical_alignment_center
func (c *Checkbox) VERTICAL_ALIGNMENT_CENTER(VERTICAL_ALIGNMENT_CENTER float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(VERTICAL_ALIGNMENT_CENTER)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_CENTER sets the VERTICAL_ALIGNMENT_CENTER property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#vertical_alignment_center
func (c *Checkbox) SetVERTICAL_ALIGNMENT_CENTER(VERTICAL_ALIGNMENT_CENTER float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(VERTICAL_ALIGNMENT_CENTER)
	return CheckboxFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_TOP returns the VERTICAL_ALIGNMENT_TOP property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#vertical_alignment_top
func (c *Checkbox) VERTICAL_ALIGNMENT_TOP(VERTICAL_ALIGNMENT_TOP float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(VERTICAL_ALIGNMENT_TOP)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_TOP sets the VERTICAL_ALIGNMENT_TOP property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#vertical_alignment_top
func (c *Checkbox) SetVERTICAL_ALIGNMENT_TOP(VERTICAL_ALIGNMENT_TOP float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(VERTICAL_ALIGNMENT_TOP)
	return CheckboxFromJSObject(p, ba.ctx)
}

// VerticalAlignment returns the VerticalAlignment property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#verticalalignment
func (c *Checkbox) VerticalAlignment(verticalAlignment float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(verticalAlignment)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetVerticalAlignment sets the VerticalAlignment property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#verticalalignment
func (c *Checkbox) SetVerticalAlignment(verticalAlignment float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(verticalAlignment)
	return CheckboxFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#width
func (c *Checkbox) Width(width string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(width)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#width
func (c *Checkbox) SetWidth(width string) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(width)
	return CheckboxFromJSObject(p, ba.ctx)
}

// WidthInPixels returns the WidthInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#widthinpixels
func (c *Checkbox) WidthInPixels(widthInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(widthInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetWidthInPixels sets the WidthInPixels property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#widthinpixels
func (c *Checkbox) SetWidthInPixels(widthInPixels float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(widthInPixels)
	return CheckboxFromJSObject(p, ba.ctx)
}

// ZIndex returns the ZIndex property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#zindex
func (c *Checkbox) ZIndex(zIndex float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(zIndex)
	return CheckboxFromJSObject(p, ba.ctx)
}

// SetZIndex sets the ZIndex property of class Checkbox.
//
// https://doc.babylonjs.com/api/classes/babylon.checkbox#zindex
func (c *Checkbox) SetZIndex(zIndex float64) *Checkbox {
	p := ba.ctx.Get("Checkbox").New(zIndex)
	return CheckboxFromJSObject(p, ba.ctx)
}

*/
