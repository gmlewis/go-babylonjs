// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ActionEvent represents a babylon.js ActionEvent.
// ActionEvent is the event being sent when an action is triggered.
type ActionEvent struct{ p js.Value }

// JSObject returns the underlying js.Value.
func (a *ActionEvent) JSObject() js.Value { return a.p }

// ActionEvent returns a ActionEvent JavaScript class.
func (ba *Babylon) ActionEvent() *ActionEvent {
	p := ba.ctx.Get("ActionEvent")
	return ActionEventFromJSObject(p)
}

// ActionEventFromJSObject returns a wrapped ActionEvent JavaScript class.
func ActionEventFromJSObject(p js.Value) *ActionEvent {
	return &ActionEvent{p: p}
}

// NewActionEventOpts contains optional parameters for NewActionEvent.
type NewActionEventOpts struct {
	SourceEvent *interface{}

	AdditionalData *interface{}
}

// NewActionEvent returns a new ActionEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.actionevent
func (ba *Babylon) NewActionEvent(source interface{}, pointerX float64, pointerY float64, meshUnderPointer *AbstractMesh, opts *NewActionEventOpts) *ActionEvent {
	if opts == nil {
		opts = &NewActionEventOpts{}
	}

	p := ba.ctx.Get("ActionEvent").New(source, pointerX, pointerY, meshUnderPointer.JSObject(), opts.SourceEvent, opts.AdditionalData)
	return ActionEventFromJSObject(p)
}

// TODO: methods
