// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Curve3 represents a babylon.js Curve3.
// A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.
// A Curve3 is designed from a series of successive Vector3.
//
// See: https://doc.babylonjs.com/how_to/how_to_use_curve3
type Curve3 struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *Curve3) JSObject() js.Value { return c.p }

// Curve3 returns a Curve3 JavaScript class.
func (ba *Babylon) Curve3() *Curve3 {
	p := ba.ctx.Get("Curve3")
	return Curve3FromJSObject(p, ba.ctx)
}

// Curve3FromJSObject returns a wrapped Curve3 JavaScript class.
func Curve3FromJSObject(p js.Value, ctx js.Value) *Curve3 {
	return &Curve3{p: p, ctx: ctx}
}

// NewCurve3 returns a new Curve3 object.
//
// https://doc.babylonjs.com/api/classes/babylon.curve3
func (ba *Babylon) NewCurve3(points *Vector3) *Curve3 {
	p := ba.ctx.Get("Curve3").New(points.JSObject())
	return Curve3FromJSObject(p, ba.ctx)
}

// TODO: methods
