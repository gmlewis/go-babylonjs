// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// GlowLayer represents a babylon.js GlowLayer.
// The glow layer Helps adding a glow effect around the emissive parts of a mesh.
//
// Once instantiated in a scene, by default, all the emissive meshes will glow.
type GlowLayer struct {
	*EffectLayer
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (g *GlowLayer) JSObject() js.Value { return g.p }

// GlowLayer returns a GlowLayer JavaScript class.
func (ba *Babylon) GlowLayer() *GlowLayer {
	p := ba.ctx.Get("GlowLayer")
	return GlowLayerFromJSObject(p, ba.ctx)
}

// GlowLayerFromJSObject returns a wrapped GlowLayer JavaScript class.
func GlowLayerFromJSObject(p js.Value, ctx js.Value) *GlowLayer {
	return &GlowLayer{EffectLayer: EffectLayerFromJSObject(p, ctx), ctx: ctx}
}

// GlowLayerArrayToJSArray returns a JavaScript Array for the wrapped array.
func GlowLayerArrayToJSArray(array []*GlowLayer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewGlowLayerOpts contains optional parameters for NewGlowLayer.
type NewGlowLayerOpts struct {
	Options *IGlowLayerOptions
}

// NewGlowLayer returns a new GlowLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer
func (ba *Babylon) NewGlowLayer(name string, scene *Scene, opts *NewGlowLayerOpts) *GlowLayer {
	if opts == nil {
		opts = &NewGlowLayerOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, scene.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options.JSObject())
	}

	p := ba.ctx.Get("GlowLayer").New(args...)
	return GlowLayerFromJSObject(p, ba.ctx)
}

// AddExcludedMesh calls the AddExcludedMesh method on the GlowLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#addexcludedmesh
func (g *GlowLayer) AddExcludedMesh(mesh *Mesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	g.p.Call("addExcludedMesh", args...)
}

// AddIncludedOnlyMesh calls the AddIncludedOnlyMesh method on the GlowLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#addincludedonlymesh
func (g *GlowLayer) AddIncludedOnlyMesh(mesh *Mesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	g.p.Call("addIncludedOnlyMesh", args...)
}

// GetClassName calls the GetClassName method on the GlowLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#getclassname
func (g *GlowLayer) GetClassName() string {

	retVal := g.p.Call("getClassName")
	return retVal.String()
}

// GetEffectName calls the GetEffectName method on the GlowLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#geteffectname
func (g *GlowLayer) GetEffectName() string {

	retVal := g.p.Call("getEffectName")
	return retVal.String()
}

// HasMesh calls the HasMesh method on the GlowLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#hasmesh
func (g *GlowLayer) HasMesh(mesh *AbstractMesh) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	retVal := g.p.Call("hasMesh", args...)
	return retVal.Bool()
}

// IsReady calls the IsReady method on the GlowLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#isready
func (g *GlowLayer) IsReady(subMesh *SubMesh, useInstances bool) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, subMesh.JSObject())
	args = append(args, useInstances)

	retVal := g.p.Call("isReady", args...)
	return retVal.Bool()
}

// NeedStencil calls the NeedStencil method on the GlowLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#needstencil
func (g *GlowLayer) NeedStencil() bool {

	retVal := g.p.Call("needStencil")
	return retVal.Bool()
}

// Parse calls the Parse method on the GlowLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#parse
func (g *GlowLayer) Parse(parsedGlowLayer interface{}, scene *Scene, rootUrl string) *GlowLayer {

	args := make([]interface{}, 0, 3+0)

	args = append(args, parsedGlowLayer)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := g.p.Call("Parse", args...)
	return GlowLayerFromJSObject(retVal, g.ctx)
}

// ReferenceMeshToUseItsOwnMaterial calls the ReferenceMeshToUseItsOwnMaterial method on the GlowLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#referencemeshtouseitsownmaterial
func (g *GlowLayer) ReferenceMeshToUseItsOwnMaterial(mesh *AbstractMesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	g.p.Call("referenceMeshToUseItsOwnMaterial", args...)
}

// RemoveExcludedMesh calls the RemoveExcludedMesh method on the GlowLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#removeexcludedmesh
func (g *GlowLayer) RemoveExcludedMesh(mesh *Mesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	g.p.Call("removeExcludedMesh", args...)
}

// RemoveIncludedOnlyMesh calls the RemoveIncludedOnlyMesh method on the GlowLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#removeincludedonlymesh
func (g *GlowLayer) RemoveIncludedOnlyMesh(mesh *Mesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	g.p.Call("removeIncludedOnlyMesh", args...)
}

// Serialize calls the Serialize method on the GlowLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#serialize
func (g *GlowLayer) Serialize() interface{} {

	retVal := g.p.Call("serialize")
	return retVal
}

// UnReferenceMeshFromUsingItsOwnMaterial calls the UnReferenceMeshFromUsingItsOwnMaterial method on the GlowLayer object.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#unreferencemeshfromusingitsownmaterial
func (g *GlowLayer) UnReferenceMeshFromUsingItsOwnMaterial(mesh *AbstractMesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	g.p.Call("unReferenceMeshFromUsingItsOwnMaterial", args...)
}

// BlurKernelSize returns the BlurKernelSize property of class GlowLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#blurkernelsize
func (g *GlowLayer) BlurKernelSize() float64 {
	retVal := g.p.Get("blurKernelSize")
	return retVal.Float()
}

// SetBlurKernelSize sets the BlurKernelSize property of class GlowLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#blurkernelsize
func (g *GlowLayer) SetBlurKernelSize(blurKernelSize float64) *GlowLayer {
	g.p.Set("blurKernelSize", blurKernelSize)
	return g
}

// CustomEmissiveColorSelector returns the CustomEmissiveColorSelector property of class GlowLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#customemissivecolorselector
func (g *GlowLayer) CustomEmissiveColorSelector() js.Value {
	retVal := g.p.Get("customEmissiveColorSelector")
	return retVal
}

// SetCustomEmissiveColorSelector sets the CustomEmissiveColorSelector property of class GlowLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#customemissivecolorselector
func (g *GlowLayer) SetCustomEmissiveColorSelector(customEmissiveColorSelector JSFunc) *GlowLayer {
	g.p.Set("customEmissiveColorSelector", js.FuncOf(customEmissiveColorSelector))
	return g
}

// CustomEmissiveTextureSelector returns the CustomEmissiveTextureSelector property of class GlowLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#customemissivetextureselector
func (g *GlowLayer) CustomEmissiveTextureSelector() js.Value {
	retVal := g.p.Get("customEmissiveTextureSelector")
	return retVal
}

// SetCustomEmissiveTextureSelector sets the CustomEmissiveTextureSelector property of class GlowLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#customemissivetextureselector
func (g *GlowLayer) SetCustomEmissiveTextureSelector(customEmissiveTextureSelector JSFunc) *GlowLayer {
	g.p.Set("customEmissiveTextureSelector", js.FuncOf(customEmissiveTextureSelector))
	return g
}

// DefaultBlurKernelSize returns the DefaultBlurKernelSize property of class GlowLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#defaultblurkernelsize
func (g *GlowLayer) DefaultBlurKernelSize() float64 {
	retVal := g.p.Get("DefaultBlurKernelSize")
	return retVal.Float()
}

// SetDefaultBlurKernelSize sets the DefaultBlurKernelSize property of class GlowLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#defaultblurkernelsize
func (g *GlowLayer) SetDefaultBlurKernelSize(DefaultBlurKernelSize float64) *GlowLayer {
	g.p.Set("DefaultBlurKernelSize", DefaultBlurKernelSize)
	return g
}

// DefaultTextureRatio returns the DefaultTextureRatio property of class GlowLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#defaulttextureratio
func (g *GlowLayer) DefaultTextureRatio() float64 {
	retVal := g.p.Get("DefaultTextureRatio")
	return retVal.Float()
}

// SetDefaultTextureRatio sets the DefaultTextureRatio property of class GlowLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#defaulttextureratio
func (g *GlowLayer) SetDefaultTextureRatio(DefaultTextureRatio float64) *GlowLayer {
	g.p.Set("DefaultTextureRatio", DefaultTextureRatio)
	return g
}

// EffectName returns the EffectName property of class GlowLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#effectname
func (g *GlowLayer) EffectName() string {
	retVal := g.p.Get("EffectName")
	return retVal.String()
}

// SetEffectName sets the EffectName property of class GlowLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#effectname
func (g *GlowLayer) SetEffectName(EffectName string) *GlowLayer {
	g.p.Set("EffectName", EffectName)
	return g
}

// Intensity returns the Intensity property of class GlowLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#intensity
func (g *GlowLayer) Intensity() float64 {
	retVal := g.p.Get("intensity")
	return retVal.Float()
}

// SetIntensity sets the Intensity property of class GlowLayer.
//
// https://doc.babylonjs.com/api/classes/babylon.glowlayer#intensity
func (g *GlowLayer) SetIntensity(intensity float64) *GlowLayer {
	g.p.Set("intensity", intensity)
	return g
}
