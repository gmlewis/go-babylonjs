// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// AddBlock represents a babylon.js AddBlock.
// Block used to add 2 vectors
type AddBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *AddBlock) JSObject() js.Value { return a.p }

// AddBlock returns a AddBlock JavaScript class.
func (ba *Babylon) AddBlock() *AddBlock {
	p := ba.ctx.Get("AddBlock")
	return AddBlockFromJSObject(p, ba.ctx)
}

// AddBlockFromJSObject returns a wrapped AddBlock JavaScript class.
func AddBlockFromJSObject(p js.Value, ctx js.Value) *AddBlock {
	return &AddBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// AddBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func AddBlockArrayToJSArray(array []*AddBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewAddBlock returns a new AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock
func (ba *Babylon) NewAddBlock(name string) *AddBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("AddBlock").New(args...)
	return AddBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#autoconfigure
func (a *AddBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	a.p.Call("autoConfigure", args...)
}

// AddBlockBindOpts contains optional parameters for AddBlock.Bind.
type AddBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#bind
func (a *AddBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *AddBlockBindOpts) {
	if opts == nil {
		opts = &AddBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	a.p.Call("bind", args...)
}

// Build calls the Build method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#build
func (a *AddBlock) Build(state *NodeMaterialBuildState, activeBlocks *NodeMaterialBlock) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, state.JSObject())
	args = append(args, activeBlocks.JSObject())

	retVal := a.p.Call("build", args...)
	return retVal.Bool()
}

// AddBlockCloneOpts contains optional parameters for AddBlock.Clone.
type AddBlockCloneOpts struct {
	RootUrl *string
}

// Clone calls the Clone method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#clone
func (a *AddBlock) Clone(scene *Scene, opts *AddBlockCloneOpts) *NodeMaterialBlock {
	if opts == nil {
		opts = &AddBlockCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := a.p.Call("clone", args...)
	return NodeMaterialBlockFromJSObject(retVal, a.ctx)
}

// AddBlockConnectToOpts contains optional parameters for AddBlock.ConnectTo.
type AddBlockConnectToOpts struct {
	Options js.Value
}

// ConnectTo calls the ConnectTo method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#connectto
func (a *AddBlock) ConnectTo(other *NodeMaterialBlock, opts *AddBlockConnectToOpts) *AddBlock {
	if opts == nil {
		opts = &AddBlockConnectToOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, other.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := a.p.Call("connectTo", args...)
	return AddBlockFromJSObject(retVal, a.ctx)
}

// Dispose calls the Dispose method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#dispose
func (a *AddBlock) Dispose() {

	a.p.Call("dispose")
}

// GetClassName calls the GetClassName method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#getclassname
func (a *AddBlock) GetClassName() string {

	retVal := a.p.Call("getClassName")
	return retVal.String()
}

// AddBlockGetFirstAvailableInputOpts contains optional parameters for AddBlock.GetFirstAvailableInput.
type AddBlockGetFirstAvailableInputOpts struct {
	ForOutput *NodeMaterialConnectionPoint
}

// GetFirstAvailableInput calls the GetFirstAvailableInput method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#getfirstavailableinput
func (a *AddBlock) GetFirstAvailableInput(opts *AddBlockGetFirstAvailableInputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &AddBlockGetFirstAvailableInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForOutput == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForOutput.JSObject())
	}

	retVal := a.p.Call("getFirstAvailableInput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, a.ctx)
}

// AddBlockGetFirstAvailableOutputOpts contains optional parameters for AddBlock.GetFirstAvailableOutput.
type AddBlockGetFirstAvailableOutputOpts struct {
	ForBlock *NodeMaterialBlock
}

// GetFirstAvailableOutput calls the GetFirstAvailableOutput method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#getfirstavailableoutput
func (a *AddBlock) GetFirstAvailableOutput(opts *AddBlockGetFirstAvailableOutputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &AddBlockGetFirstAvailableOutputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForBlock == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForBlock.JSObject())
	}

	retVal := a.p.Call("getFirstAvailableOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, a.ctx)
}

// GetInputByName calls the GetInputByName method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#getinputbyname
func (a *AddBlock) GetInputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := a.p.Call("getInputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, a.ctx)
}

// GetOutputByName calls the GetOutputByName method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#getoutputbyname
func (a *AddBlock) GetOutputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := a.p.Call("getOutputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, a.ctx)
}

// GetSiblingOutput calls the GetSiblingOutput method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#getsiblingoutput
func (a *AddBlock) GetSiblingOutput(current *NodeMaterialConnectionPoint) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, current.JSObject())

	retVal := a.p.Call("getSiblingOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, a.ctx)
}

// Initialize calls the Initialize method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#initialize
func (a *AddBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	a.p.Call("initialize", args...)
}

// AddBlockInitializeDefinesOpts contains optional parameters for AddBlock.InitializeDefines.
type AddBlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#initializedefines
func (a *AddBlock) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *AddBlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &AddBlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	a.p.Call("initializeDefines", args...)
}

// AddBlockIsReadyOpts contains optional parameters for AddBlock.IsReady.
type AddBlockIsReadyOpts struct {
	UseInstances *bool
}

// IsReady calls the IsReady method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#isready
func (a *AddBlock) IsReady(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *AddBlockIsReadyOpts) bool {
	if opts == nil {
		opts = &AddBlockIsReadyOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := a.p.Call("isReady", args...)
	return retVal.Bool()
}

// AddBlockPrepareDefinesOpts contains optional parameters for AddBlock.PrepareDefines.
type AddBlockPrepareDefinesOpts struct {
	UseInstances *bool
}

// PrepareDefines calls the PrepareDefines method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#preparedefines
func (a *AddBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *AddBlockPrepareDefinesOpts) {
	if opts == nil {
		opts = &AddBlockPrepareDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	a.p.Call("prepareDefines", args...)
}

// ProvideFallbacks calls the ProvideFallbacks method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#providefallbacks
func (a *AddBlock) ProvideFallbacks(mesh *AbstractMesh, fallbacks *EffectFallbacks) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, fallbacks.JSObject())

	a.p.Call("provideFallbacks", args...)
}

// AddBlockRegisterInputOpts contains optional parameters for AddBlock.RegisterInput.
type AddBlockRegisterInputOpts struct {
	IsOptional *bool
	Target     js.Value
}

// RegisterInput calls the RegisterInput method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#registerinput
func (a *AddBlock) RegisterInput(name string, jsType js.Value, opts *AddBlockRegisterInputOpts) *AddBlock {
	if opts == nil {
		opts = &AddBlockRegisterInputOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, jsType)

	if opts.IsOptional == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsOptional)
	}
	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := a.p.Call("registerInput", args...)
	return AddBlockFromJSObject(retVal, a.ctx)
}

// AddBlockRegisterOutputOpts contains optional parameters for AddBlock.RegisterOutput.
type AddBlockRegisterOutputOpts struct {
	Target js.Value
}

// RegisterOutput calls the RegisterOutput method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#registeroutput
func (a *AddBlock) RegisterOutput(name string, jsType js.Value, opts *AddBlockRegisterOutputOpts) *AddBlock {
	if opts == nil {
		opts = &AddBlockRegisterOutputOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, jsType)

	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := a.p.Call("registerOutput", args...)
	return AddBlockFromJSObject(retVal, a.ctx)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#replacerepeatablecontent
func (a *AddBlock) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	a.p.Call("replaceRepeatableContent", args...)
}

// Serialize calls the Serialize method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#serialize
func (a *AddBlock) Serialize() interface{} {

	retVal := a.p.Call("serialize")
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the AddBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#updateuniformsandsamples
func (a *AddBlock) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers string) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, state.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)
	args = append(args, uniformBuffers)

	a.p.Call("updateUniformsAndSamples", args...)
}

/*

// BuildId returns the BuildId property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#buildid
func (a *AddBlock) BuildId(buildId float64) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(buildId)
	return AddBlockFromJSObject(p, ba.ctx)
}

// SetBuildId sets the BuildId property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#buildid
func (a *AddBlock) SetBuildId(buildId float64) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(buildId)
	return AddBlockFromJSObject(p, ba.ctx)
}

// Comments returns the Comments property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#comments
func (a *AddBlock) Comments(comments string) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(comments)
	return AddBlockFromJSObject(p, ba.ctx)
}

// SetComments sets the Comments property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#comments
func (a *AddBlock) SetComments(comments string) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(comments)
	return AddBlockFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#inputs
func (a *AddBlock) Inputs(inputs *NodeMaterialConnectionPoint) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(inputs.JSObject())
	return AddBlockFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#inputs
func (a *AddBlock) SetInputs(inputs *NodeMaterialConnectionPoint) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(inputs.JSObject())
	return AddBlockFromJSObject(p, ba.ctx)
}

// IsFinalMerger returns the IsFinalMerger property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#isfinalmerger
func (a *AddBlock) IsFinalMerger(isFinalMerger bool) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(isFinalMerger)
	return AddBlockFromJSObject(p, ba.ctx)
}

// SetIsFinalMerger sets the IsFinalMerger property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#isfinalmerger
func (a *AddBlock) SetIsFinalMerger(isFinalMerger bool) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(isFinalMerger)
	return AddBlockFromJSObject(p, ba.ctx)
}

// IsInput returns the IsInput property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#isinput
func (a *AddBlock) IsInput(isInput bool) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(isInput)
	return AddBlockFromJSObject(p, ba.ctx)
}

// SetIsInput sets the IsInput property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#isinput
func (a *AddBlock) SetIsInput(isInput bool) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(isInput)
	return AddBlockFromJSObject(p, ba.ctx)
}

// IsUnique returns the IsUnique property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#isunique
func (a *AddBlock) IsUnique(isUnique bool) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(isUnique)
	return AddBlockFromJSObject(p, ba.ctx)
}

// SetIsUnique sets the IsUnique property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#isunique
func (a *AddBlock) SetIsUnique(isUnique bool) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(isUnique)
	return AddBlockFromJSObject(p, ba.ctx)
}

// Left returns the Left property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#left
func (a *AddBlock) Left(left *NodeMaterialConnectionPoint) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(left.JSObject())
	return AddBlockFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#left
func (a *AddBlock) SetLeft(left *NodeMaterialConnectionPoint) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(left.JSObject())
	return AddBlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#name
func (a *AddBlock) Name(name string) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(name)
	return AddBlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#name
func (a *AddBlock) SetName(name string) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(name)
	return AddBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#output
func (a *AddBlock) Output(output *NodeMaterialConnectionPoint) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(output.JSObject())
	return AddBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#output
func (a *AddBlock) SetOutput(output *NodeMaterialConnectionPoint) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(output.JSObject())
	return AddBlockFromJSObject(p, ba.ctx)
}

// Outputs returns the Outputs property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#outputs
func (a *AddBlock) Outputs(outputs *NodeMaterialConnectionPoint) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(outputs.JSObject())
	return AddBlockFromJSObject(p, ba.ctx)
}

// SetOutputs sets the Outputs property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#outputs
func (a *AddBlock) SetOutputs(outputs *NodeMaterialConnectionPoint) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(outputs.JSObject())
	return AddBlockFromJSObject(p, ba.ctx)
}

// Right returns the Right property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#right
func (a *AddBlock) Right(right *NodeMaterialConnectionPoint) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(right.JSObject())
	return AddBlockFromJSObject(p, ba.ctx)
}

// SetRight sets the Right property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#right
func (a *AddBlock) SetRight(right *NodeMaterialConnectionPoint) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(right.JSObject())
	return AddBlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#target
func (a *AddBlock) Target(target js.Value) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(target)
	return AddBlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#target
func (a *AddBlock) SetTarget(target js.Value) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(target)
	return AddBlockFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#uniqueid
func (a *AddBlock) UniqueId(uniqueId float64) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(uniqueId)
	return AddBlockFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class AddBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.addblock#uniqueid
func (a *AddBlock) SetUniqueId(uniqueId float64) *AddBlock {
	p := ba.ctx.Get("AddBlock").New(uniqueId)
	return AddBlockFromJSObject(p, ba.ctx)
}

*/
