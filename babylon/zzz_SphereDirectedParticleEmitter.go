// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SphereDirectedParticleEmitter represents a babylon.js SphereDirectedParticleEmitter.
// Particle emitter emitting particles from the inside of a sphere.
// It emits the particles randomly between two vectors.
type SphereDirectedParticleEmitter struct {
	*SphereParticleEmitter
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SphereDirectedParticleEmitter) JSObject() js.Value { return s.p }

// SphereDirectedParticleEmitter returns a SphereDirectedParticleEmitter JavaScript class.
func (ba *Babylon) SphereDirectedParticleEmitter() *SphereDirectedParticleEmitter {
	p := ba.ctx.Get("SphereDirectedParticleEmitter")
	return SphereDirectedParticleEmitterFromJSObject(p, ba.ctx)
}

// SphereDirectedParticleEmitterFromJSObject returns a wrapped SphereDirectedParticleEmitter JavaScript class.
func SphereDirectedParticleEmitterFromJSObject(p js.Value, ctx js.Value) *SphereDirectedParticleEmitter {
	return &SphereDirectedParticleEmitter{SphereParticleEmitter: SphereParticleEmitterFromJSObject(p, ctx), ctx: ctx}
}

// SphereDirectedParticleEmitterArrayToJSArray returns a JavaScript Array for the wrapped array.
func SphereDirectedParticleEmitterArrayToJSArray(array []*SphereDirectedParticleEmitter) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewSphereDirectedParticleEmitterOpts contains optional parameters for NewSphereDirectedParticleEmitter.
type NewSphereDirectedParticleEmitterOpts struct {
	Radius     *float64
	Direction1 *Vector3
	Direction2 *Vector3
}

// NewSphereDirectedParticleEmitter returns a new SphereDirectedParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.spheredirectedparticleemitter
func (ba *Babylon) NewSphereDirectedParticleEmitter(opts *NewSphereDirectedParticleEmitterOpts) *SphereDirectedParticleEmitter {
	if opts == nil {
		opts = &NewSphereDirectedParticleEmitterOpts{}
	}

	args := make([]interface{}, 0, 0+3)

	if opts.Radius == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Radius)
	}
	if opts.Direction1 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Direction1.JSObject())
	}
	if opts.Direction2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Direction2.JSObject())
	}

	p := ba.ctx.Get("SphereDirectedParticleEmitter").New(args...)
	return SphereDirectedParticleEmitterFromJSObject(p, ba.ctx)
}

// ApplyToShader calls the ApplyToShader method on the SphereDirectedParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.spheredirectedparticleemitter#applytoshader
func (s *SphereDirectedParticleEmitter) ApplyToShader(effect *Effect) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, effect.JSObject())

	s.p.Call("applyToShader", args...)
}

// Clone calls the Clone method on the SphereDirectedParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.spheredirectedparticleemitter#clone
func (s *SphereDirectedParticleEmitter) Clone() *SphereDirectedParticleEmitter {

	retVal := s.p.Call("clone")
	return SphereDirectedParticleEmitterFromJSObject(retVal, s.ctx)
}

// GetClassName calls the GetClassName method on the SphereDirectedParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.spheredirectedparticleemitter#getclassname
func (s *SphereDirectedParticleEmitter) GetClassName() string {

	retVal := s.p.Call("getClassName")
	return retVal.String()
}

// GetEffectDefines calls the GetEffectDefines method on the SphereDirectedParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.spheredirectedparticleemitter#geteffectdefines
func (s *SphereDirectedParticleEmitter) GetEffectDefines() string {

	retVal := s.p.Call("getEffectDefines")
	return retVal.String()
}

// Parse calls the Parse method on the SphereDirectedParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.spheredirectedparticleemitter#parse
func (s *SphereDirectedParticleEmitter) Parse(serializationObject interface{}) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, serializationObject)

	s.p.Call("parse", args...)
}

// Serialize calls the Serialize method on the SphereDirectedParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.spheredirectedparticleemitter#serialize
func (s *SphereDirectedParticleEmitter) Serialize() interface{} {

	retVal := s.p.Call("serialize")
	return retVal
}

// StartDirectionFunction calls the StartDirectionFunction method on the SphereDirectedParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.spheredirectedparticleemitter#startdirectionfunction
func (s *SphereDirectedParticleEmitter) StartDirectionFunction(worldMatrix *Matrix, directionToUpdate *Vector3, particle *Particle) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, worldMatrix.JSObject())
	args = append(args, directionToUpdate.JSObject())
	args = append(args, particle.JSObject())

	s.p.Call("startDirectionFunction", args...)
}

// Direction1 returns the Direction1 property of class SphereDirectedParticleEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.spheredirectedparticleemitter#direction1
func (s *SphereDirectedParticleEmitter) Direction1() *Vector3 {
	retVal := s.p.Get("direction1")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetDirection1 sets the Direction1 property of class SphereDirectedParticleEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.spheredirectedparticleemitter#direction1
func (s *SphereDirectedParticleEmitter) SetDirection1(direction1 *Vector3) *SphereDirectedParticleEmitter {
	s.p.Set("direction1", direction1.JSObject())
	return s
}

// Direction2 returns the Direction2 property of class SphereDirectedParticleEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.spheredirectedparticleemitter#direction2
func (s *SphereDirectedParticleEmitter) Direction2() *Vector3 {
	retVal := s.p.Get("direction2")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetDirection2 sets the Direction2 property of class SphereDirectedParticleEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.spheredirectedparticleemitter#direction2
func (s *SphereDirectedParticleEmitter) SetDirection2(direction2 *Vector3) *SphereDirectedParticleEmitter {
	s.p.Set("direction2", direction2.JSObject())
	return s
}
