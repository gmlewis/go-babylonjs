// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SphereDirectedParticleEmitter represents a babylon.js SphereDirectedParticleEmitter.
// Particle emitter emitting particles from the inside of a sphere.
// It emits the particles randomly between two vectors.
type SphereDirectedParticleEmitter struct{ *SphereParticleEmitter }

// JSObject returns the underlying js.Value.
func (s *SphereDirectedParticleEmitter) JSObject() js.Value { return s.p }

// SphereDirectedParticleEmitter returns a SphereDirectedParticleEmitter JavaScript class.
func (b *Babylon) SphereDirectedParticleEmitter() *SphereDirectedParticleEmitter {
	p := b.ctx.Get("SphereDirectedParticleEmitter")
	return SphereDirectedParticleEmitterFromJSObject(p)
}

// SphereDirectedParticleEmitterFromJSObject returns a wrapped SphereDirectedParticleEmitter JavaScript class.
func SphereDirectedParticleEmitterFromJSObject(p js.Value) *SphereDirectedParticleEmitter {
	return &SphereDirectedParticleEmitter{SphereParticleEmitterFromJSObject(p)}
}

// NewSphereDirectedParticleEmitter returns a new SphereDirectedParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.spheredirectedparticleemitter
func (b *Babylon) NewSphereDirectedParticleEmitter(todo parameters) *SphereDirectedParticleEmitter {
	p := b.ctx.Get("SphereDirectedParticleEmitter").New(todo)
	return SphereDirectedParticleEmitterFromJSObject(p)
}

// TODO: methods
