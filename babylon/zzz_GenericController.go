// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// GenericController represents a babylon.js GenericController.
// Generic Controller
type GenericController struct {
	*WebVRController
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (g *GenericController) JSObject() js.Value { return g.p }

// GenericController returns a GenericController JavaScript class.
func (ba *Babylon) GenericController() *GenericController {
	p := ba.ctx.Get("GenericController")
	return GenericControllerFromJSObject(p, ba.ctx)
}

// GenericControllerFromJSObject returns a wrapped GenericController JavaScript class.
func GenericControllerFromJSObject(p js.Value, ctx js.Value) *GenericController {
	return &GenericController{WebVRController: WebVRControllerFromJSObject(p, ctx), ctx: ctx}
}

// GenericControllerArrayToJSArray returns a JavaScript Array for the wrapped array.
func GenericControllerArrayToJSArray(array []*GenericController) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewGenericController returns a new GenericController object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller
func (ba *Babylon) NewGenericController(vrGamepad interface{}) *GenericController {

	args := make([]interface{}, 0, 1+0)

	args = append(args, vrGamepad)

	p := ba.ctx.Get("GenericController").New(args...)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// AttachToMesh calls the AttachToMesh method on the GenericController object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#attachtomesh
func (g *GenericController) AttachToMesh(mesh *AbstractMesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	g.p.Call("attachToMesh", args...)
}

// AttachToPoseControlledCamera calls the AttachToPoseControlledCamera method on the GenericController object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#attachtoposecontrolledcamera
func (g *GenericController) AttachToPoseControlledCamera(camera *TargetCamera) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, camera.JSObject())

	g.p.Call("attachToPoseControlledCamera", args...)
}

// Dispose calls the Dispose method on the GenericController object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#dispose
func (g *GenericController) Dispose() {

	g.p.Call("dispose")
}

// GenericControllerGetForwardRayOpts contains optional parameters for GenericController.GetForwardRay.
type GenericControllerGetForwardRayOpts struct {
	Length *float64
}

// GetForwardRay calls the GetForwardRay method on the GenericController object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#getforwardray
func (g *GenericController) GetForwardRay(opts *GenericControllerGetForwardRayOpts) *Ray {
	if opts == nil {
		opts = &GenericControllerGetForwardRayOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Length == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Length)
	}

	retVal := g.p.Call("getForwardRay", args...)
	return RayFromJSObject(retVal, g.ctx)
}

// GenericControllerInitControllerMeshOpts contains optional parameters for GenericController.InitControllerMesh.
type GenericControllerInitControllerMeshOpts struct {
	MeshLoaded *func()
}

// InitControllerMesh calls the InitControllerMesh method on the GenericController object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#initcontrollermesh
func (g *GenericController) InitControllerMesh(scene *Scene, opts *GenericControllerInitControllerMeshOpts) {
	if opts == nil {
		opts = &GenericControllerInitControllerMeshOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.MeshLoaded == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.MeshLoaded)
	}

	g.p.Call("initControllerMesh", args...)
}

// OnButtonStateChange calls the OnButtonStateChange method on the GenericController object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#onbuttonstatechange
func (g *GenericController) OnButtonStateChange(callback func()) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { callback(); return nil }))

	g.p.Call("onButtonStateChange", args...)
}

// Onleftstickchanged calls the Onleftstickchanged method on the GenericController object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#onleftstickchanged
func (g *GenericController) Onleftstickchanged(callback func()) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { callback(); return nil }))

	g.p.Call("onleftstickchanged", args...)
}

// Onrightstickchanged calls the Onrightstickchanged method on the GenericController object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#onrightstickchanged
func (g *GenericController) Onrightstickchanged(callback func()) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { callback(); return nil }))

	g.p.Call("onrightstickchanged", args...)
}

// Update calls the Update method on the GenericController object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#update
func (g *GenericController) Update() {

	g.p.Call("update")
}

// UpdateFromDevice calls the UpdateFromDevice method on the GenericController object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#updatefromdevice
func (g *GenericController) UpdateFromDevice(poseData js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, poseData)

	g.p.Call("updateFromDevice", args...)
}

/*

// BrowserGamepad returns the BrowserGamepad property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#browsergamepad
func (g *GenericController) BrowserGamepad(browserGamepad interface{}) *GenericController {
	p := ba.ctx.Get("GenericController").New(browserGamepad)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetBrowserGamepad sets the BrowserGamepad property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#browsergamepad
func (g *GenericController) SetBrowserGamepad(browserGamepad interface{}) *GenericController {
	p := ba.ctx.Get("GenericController").New(browserGamepad)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// ControllerType returns the ControllerType property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#controllertype
func (g *GenericController) ControllerType(controllerType *PoseEnabledControllerType) *GenericController {
	p := ba.ctx.Get("GenericController").New(controllerType.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetControllerType sets the ControllerType property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#controllertype
func (g *GenericController) SetControllerType(controllerType *PoseEnabledControllerType) *GenericController {
	p := ba.ctx.Get("GenericController").New(controllerType.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// DUALSHOCK returns the DUALSHOCK property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#dualshock
func (g *GenericController) DUALSHOCK(DUALSHOCK float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(DUALSHOCK)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetDUALSHOCK sets the DUALSHOCK property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#dualshock
func (g *GenericController) SetDUALSHOCK(DUALSHOCK float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(DUALSHOCK)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// DefaultModel returns the DefaultModel property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#defaultmodel
func (g *GenericController) DefaultModel(defaultModel *AbstractMesh) *GenericController {
	p := ba.ctx.Get("GenericController").New(defaultModel.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetDefaultModel sets the DefaultModel property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#defaultmodel
func (g *GenericController) SetDefaultModel(defaultModel *AbstractMesh) *GenericController {
	p := ba.ctx.Get("GenericController").New(defaultModel.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// DevicePosition returns the DevicePosition property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#deviceposition
func (g *GenericController) DevicePosition(devicePosition *Vector3) *GenericController {
	p := ba.ctx.Get("GenericController").New(devicePosition.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetDevicePosition sets the DevicePosition property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#deviceposition
func (g *GenericController) SetDevicePosition(devicePosition *Vector3) *GenericController {
	p := ba.ctx.Get("GenericController").New(devicePosition.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// DeviceRotationQuaternion returns the DeviceRotationQuaternion property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#devicerotationquaternion
func (g *GenericController) DeviceRotationQuaternion(deviceRotationQuaternion *Quaternion) *GenericController {
	p := ba.ctx.Get("GenericController").New(deviceRotationQuaternion.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetDeviceRotationQuaternion sets the DeviceRotationQuaternion property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#devicerotationquaternion
func (g *GenericController) SetDeviceRotationQuaternion(deviceRotationQuaternion *Quaternion) *GenericController {
	p := ba.ctx.Get("GenericController").New(deviceRotationQuaternion.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// DeviceScaleFactor returns the DeviceScaleFactor property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#devicescalefactor
func (g *GenericController) DeviceScaleFactor(deviceScaleFactor float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(deviceScaleFactor)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetDeviceScaleFactor sets the DeviceScaleFactor property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#devicescalefactor
func (g *GenericController) SetDeviceScaleFactor(deviceScaleFactor float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(deviceScaleFactor)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// GAMEPAD returns the GAMEPAD property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#gamepad
func (g *GenericController) GAMEPAD(GAMEPAD float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(GAMEPAD)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetGAMEPAD sets the GAMEPAD property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#gamepad
func (g *GenericController) SetGAMEPAD(GAMEPAD float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(GAMEPAD)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// GENERIC returns the GENERIC property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#generic
func (g *GenericController) GENERIC(GENERIC float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(GENERIC)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetGENERIC sets the GENERIC property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#generic
func (g *GenericController) SetGENERIC(GENERIC float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(GENERIC)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// Hand returns the Hand property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#hand
func (g *GenericController) Hand(hand string) *GenericController {
	p := ba.ctx.Get("GenericController").New(hand)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetHand sets the Hand property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#hand
func (g *GenericController) SetHand(hand string) *GenericController {
	p := ba.ctx.Get("GenericController").New(hand)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// Id returns the Id property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#id
func (g *GenericController) Id(id string) *GenericController {
	p := ba.ctx.Get("GenericController").New(id)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetId sets the Id property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#id
func (g *GenericController) SetId(id string) *GenericController {
	p := ba.ctx.Get("GenericController").New(id)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// Index returns the Index property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#index
func (g *GenericController) Index(index float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(index)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetIndex sets the Index property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#index
func (g *GenericController) SetIndex(index float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(index)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// IsConnected returns the IsConnected property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#isconnected
func (g *GenericController) IsConnected(isConnected bool) *GenericController {
	p := ba.ctx.Get("GenericController").New(isConnected)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetIsConnected sets the IsConnected property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#isconnected
func (g *GenericController) SetIsConnected(isConnected bool) *GenericController {
	p := ba.ctx.Get("GenericController").New(isConnected)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// IsXR returns the IsXR property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#isxr
func (g *GenericController) IsXR(isXR bool) *GenericController {
	p := ba.ctx.Get("GenericController").New(isXR)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetIsXR sets the IsXR property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#isxr
func (g *GenericController) SetIsXR(isXR bool) *GenericController {
	p := ba.ctx.Get("GenericController").New(isXR)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// LeftStick returns the LeftStick property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#leftstick
func (g *GenericController) LeftStick(leftStick *StickValues) *GenericController {
	p := ba.ctx.Get("GenericController").New(leftStick.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetLeftStick sets the LeftStick property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#leftstick
func (g *GenericController) SetLeftStick(leftStick *StickValues) *GenericController {
	p := ba.ctx.Get("GenericController").New(leftStick.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// MODEL_BASE_URL returns the MODEL_BASE_URL property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#model_base_url
func (g *GenericController) MODEL_BASE_URL(MODEL_BASE_URL string) *GenericController {
	p := ba.ctx.Get("GenericController").New(MODEL_BASE_URL)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetMODEL_BASE_URL sets the MODEL_BASE_URL property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#model_base_url
func (g *GenericController) SetMODEL_BASE_URL(MODEL_BASE_URL string) *GenericController {
	p := ba.ctx.Get("GenericController").New(MODEL_BASE_URL)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// MODEL_FILENAME returns the MODEL_FILENAME property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#model_filename
func (g *GenericController) MODEL_FILENAME(MODEL_FILENAME string) *GenericController {
	p := ba.ctx.Get("GenericController").New(MODEL_FILENAME)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetMODEL_FILENAME sets the MODEL_FILENAME property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#model_filename
func (g *GenericController) SetMODEL_FILENAME(MODEL_FILENAME string) *GenericController {
	p := ba.ctx.Get("GenericController").New(MODEL_FILENAME)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// Mesh returns the Mesh property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#mesh
func (g *GenericController) Mesh(mesh *AbstractMesh) *GenericController {
	p := ba.ctx.Get("GenericController").New(mesh.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetMesh sets the Mesh property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#mesh
func (g *GenericController) SetMesh(mesh *AbstractMesh) *GenericController {
	p := ba.ctx.Get("GenericController").New(mesh.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// OnMainButtonStateChangedObservable returns the OnMainButtonStateChangedObservable property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#onmainbuttonstatechangedobservable
func (g *GenericController) OnMainButtonStateChangedObservable(onMainButtonStateChangedObservable *Observable) *GenericController {
	p := ba.ctx.Get("GenericController").New(onMainButtonStateChangedObservable.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetOnMainButtonStateChangedObservable sets the OnMainButtonStateChangedObservable property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#onmainbuttonstatechangedobservable
func (g *GenericController) SetOnMainButtonStateChangedObservable(onMainButtonStateChangedObservable *Observable) *GenericController {
	p := ba.ctx.Get("GenericController").New(onMainButtonStateChangedObservable.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// OnPadStateChangedObservable returns the OnPadStateChangedObservable property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#onpadstatechangedobservable
func (g *GenericController) OnPadStateChangedObservable(onPadStateChangedObservable *Observable) *GenericController {
	p := ba.ctx.Get("GenericController").New(onPadStateChangedObservable.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetOnPadStateChangedObservable sets the OnPadStateChangedObservable property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#onpadstatechangedobservable
func (g *GenericController) SetOnPadStateChangedObservable(onPadStateChangedObservable *Observable) *GenericController {
	p := ba.ctx.Get("GenericController").New(onPadStateChangedObservable.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// OnPadValuesChangedObservable returns the OnPadValuesChangedObservable property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#onpadvalueschangedobservable
func (g *GenericController) OnPadValuesChangedObservable(onPadValuesChangedObservable *Observable) *GenericController {
	p := ba.ctx.Get("GenericController").New(onPadValuesChangedObservable.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetOnPadValuesChangedObservable sets the OnPadValuesChangedObservable property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#onpadvalueschangedobservable
func (g *GenericController) SetOnPadValuesChangedObservable(onPadValuesChangedObservable *Observable) *GenericController {
	p := ba.ctx.Get("GenericController").New(onPadValuesChangedObservable.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// OnSecondaryButtonStateChangedObservable returns the OnSecondaryButtonStateChangedObservable property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#onsecondarybuttonstatechangedobservable
func (g *GenericController) OnSecondaryButtonStateChangedObservable(onSecondaryButtonStateChangedObservable *Observable) *GenericController {
	p := ba.ctx.Get("GenericController").New(onSecondaryButtonStateChangedObservable.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetOnSecondaryButtonStateChangedObservable sets the OnSecondaryButtonStateChangedObservable property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#onsecondarybuttonstatechangedobservable
func (g *GenericController) SetOnSecondaryButtonStateChangedObservable(onSecondaryButtonStateChangedObservable *Observable) *GenericController {
	p := ba.ctx.Get("GenericController").New(onSecondaryButtonStateChangedObservable.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// OnTriggerStateChangedObservable returns the OnTriggerStateChangedObservable property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#ontriggerstatechangedobservable
func (g *GenericController) OnTriggerStateChangedObservable(onTriggerStateChangedObservable *Observable) *GenericController {
	p := ba.ctx.Get("GenericController").New(onTriggerStateChangedObservable.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetOnTriggerStateChangedObservable sets the OnTriggerStateChangedObservable property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#ontriggerstatechangedobservable
func (g *GenericController) SetOnTriggerStateChangedObservable(onTriggerStateChangedObservable *Observable) *GenericController {
	p := ba.ctx.Get("GenericController").New(onTriggerStateChangedObservable.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// POINTING_POSE returns the POINTING_POSE property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#pointing_pose
func (g *GenericController) POINTING_POSE(POINTING_POSE string) *GenericController {
	p := ba.ctx.Get("GenericController").New(POINTING_POSE)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetPOINTING_POSE sets the POINTING_POSE property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#pointing_pose
func (g *GenericController) SetPOINTING_POSE(POINTING_POSE string) *GenericController {
	p := ba.ctx.Get("GenericController").New(POINTING_POSE)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// POSE_ENABLED returns the POSE_ENABLED property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#pose_enabled
func (g *GenericController) POSE_ENABLED(POSE_ENABLED float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(POSE_ENABLED)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetPOSE_ENABLED sets the POSE_ENABLED property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#pose_enabled
func (g *GenericController) SetPOSE_ENABLED(POSE_ENABLED float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(POSE_ENABLED)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// Pad returns the Pad property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#pad
func (g *GenericController) Pad(pad *StickValues) *GenericController {
	p := ba.ctx.Get("GenericController").New(pad.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetPad sets the Pad property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#pad
func (g *GenericController) SetPad(pad *StickValues) *GenericController {
	p := ba.ctx.Get("GenericController").New(pad.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// Position returns the Position property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#position
func (g *GenericController) Position(position *Vector3) *GenericController {
	p := ba.ctx.Get("GenericController").New(position.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetPosition sets the Position property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#position
func (g *GenericController) SetPosition(position *Vector3) *GenericController {
	p := ba.ctx.Get("GenericController").New(position.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// RawPose returns the RawPose property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#rawpose
func (g *GenericController) RawPose(rawPose js.Value) *GenericController {
	p := ba.ctx.Get("GenericController").New(rawPose)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetRawPose sets the RawPose property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#rawpose
func (g *GenericController) SetRawPose(rawPose js.Value) *GenericController {
	p := ba.ctx.Get("GenericController").New(rawPose)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// RightStick returns the RightStick property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#rightstick
func (g *GenericController) RightStick(rightStick *StickValues) *GenericController {
	p := ba.ctx.Get("GenericController").New(rightStick.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetRightStick sets the RightStick property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#rightstick
func (g *GenericController) SetRightStick(rightStick *StickValues) *GenericController {
	p := ba.ctx.Get("GenericController").New(rightStick.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// RotationQuaternion returns the RotationQuaternion property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#rotationquaternion
func (g *GenericController) RotationQuaternion(rotationQuaternion *Quaternion) *GenericController {
	p := ba.ctx.Get("GenericController").New(rotationQuaternion.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetRotationQuaternion sets the RotationQuaternion property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#rotationquaternion
func (g *GenericController) SetRotationQuaternion(rotationQuaternion *Quaternion) *GenericController {
	p := ba.ctx.Get("GenericController").New(rotationQuaternion.JSObject())
	return GenericControllerFromJSObject(p, ba.ctx)
}

// Type returns the Type property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#type
func (g *GenericController) Type(jsType float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(jsType)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetType sets the Type property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#type
func (g *GenericController) SetType(jsType float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(jsType)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// XBOX returns the XBOX property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#xbox
func (g *GenericController) XBOX(XBOX float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(XBOX)
	return GenericControllerFromJSObject(p, ba.ctx)
}

// SetXBOX sets the XBOX property of class GenericController.
//
// https://doc.babylonjs.com/api/classes/babylon.genericcontroller#xbox
func (g *GenericController) SetXBOX(XBOX float64) *GenericController {
	p := ba.ctx.Get("GenericController").New(XBOX)
	return GenericControllerFromJSObject(p, ba.ctx)
}

*/
