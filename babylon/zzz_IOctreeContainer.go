// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IOctreeContainer represents a babylon.js IOctreeContainer.
// Contains an array of blocks representing the octree
type IOctreeContainer struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IOctreeContainer) JSObject() js.Value { return i.p }

// IOctreeContainer returns a IOctreeContainer JavaScript class.
func (ba *Babylon) IOctreeContainer() *IOctreeContainer {
	p := ba.ctx.Get("IOctreeContainer")
	return IOctreeContainerFromJSObject(p, ba.ctx)
}

// IOctreeContainerFromJSObject returns a wrapped IOctreeContainer JavaScript class.
func IOctreeContainerFromJSObject(p js.Value, ctx js.Value) *IOctreeContainer {
	return &IOctreeContainer{p: p, ctx: ctx}
}

// IOctreeContainerArrayToJSArray returns a JavaScript Array for the wrapped array.
func IOctreeContainerArrayToJSArray(array []*IOctreeContainer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Blocks returns the Blocks property of class IOctreeContainer.
//
// https://doc.babylonjs.com/api/classes/babylon.ioctreecontainer#blocks
func (i *IOctreeContainer) Blocks() []*OctreeBlock {
	retVal := i.p.Get("blocks")
	result := []*OctreeBlock{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, OctreeBlockFromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// SetBlocks sets the Blocks property of class IOctreeContainer.
//
// https://doc.babylonjs.com/api/classes/babylon.ioctreecontainer#blocks
func (i *IOctreeContainer) SetBlocks(blocks []*OctreeBlock) *IOctreeContainer {
	i.p.Set("blocks", blocks)
	return i
}
