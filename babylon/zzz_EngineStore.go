// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// EngineStore represents a babylon.js EngineStore.
// The engine store class is responsible to hold all the instances of Engine and Scene created
// during the life time of the application.
type EngineStore struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *EngineStore) JSObject() js.Value { return e.p }

// EngineStore returns a EngineStore JavaScript class.
func (ba *Babylon) EngineStore() *EngineStore {
	p := ba.ctx.Get("EngineStore")
	return EngineStoreFromJSObject(p, ba.ctx)
}

// EngineStoreFromJSObject returns a wrapped EngineStore JavaScript class.
func EngineStoreFromJSObject(p js.Value, ctx js.Value) *EngineStore {
	return &EngineStore{p: p, ctx: ctx}
}

// EngineStoreArrayToJSArray returns a JavaScript Array for the wrapped array.
func EngineStoreArrayToJSArray(array []*EngineStore) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// FallbackTexture returns the FallbackTexture property of class EngineStore.
//
// https://doc.babylonjs.com/api/classes/babylon.enginestore#fallbacktexture
func (e *EngineStore) FallbackTexture() string {
	retVal := e.p.Get("FallbackTexture")
	return retVal.String()
}

// SetFallbackTexture sets the FallbackTexture property of class EngineStore.
//
// https://doc.babylonjs.com/api/classes/babylon.enginestore#fallbacktexture
func (e *EngineStore) SetFallbackTexture(FallbackTexture string) *EngineStore {
	e.p.Set("FallbackTexture", FallbackTexture)
	return e
}

// Instances returns the Instances property of class EngineStore.
//
// https://doc.babylonjs.com/api/classes/babylon.enginestore#instances
func (e *EngineStore) Instances() []*Engine {
	retVal := e.p.Get("Instances")
	result := []*Engine{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, EngineFromJSObject(retVal.Index(ri), e.ctx))
	}
	return result
}

// SetInstances sets the Instances property of class EngineStore.
//
// https://doc.babylonjs.com/api/classes/babylon.enginestore#instances
func (e *EngineStore) SetInstances(Instances []*Engine) *EngineStore {
	e.p.Set("Instances", Instances)
	return e
}

// LastCreatedEngine returns the LastCreatedEngine property of class EngineStore.
//
// https://doc.babylonjs.com/api/classes/babylon.enginestore#lastcreatedengine
func (e *EngineStore) LastCreatedEngine() *Engine {
	retVal := e.p.Get("LastCreatedEngine")
	return EngineFromJSObject(retVal, e.ctx)
}

// SetLastCreatedEngine sets the LastCreatedEngine property of class EngineStore.
//
// https://doc.babylonjs.com/api/classes/babylon.enginestore#lastcreatedengine
func (e *EngineStore) SetLastCreatedEngine(LastCreatedEngine *Engine) *EngineStore {
	e.p.Set("LastCreatedEngine", LastCreatedEngine.JSObject())
	return e
}

// LastCreatedScene returns the LastCreatedScene property of class EngineStore.
//
// https://doc.babylonjs.com/api/classes/babylon.enginestore#lastcreatedscene
func (e *EngineStore) LastCreatedScene() *Scene {
	retVal := e.p.Get("LastCreatedScene")
	return SceneFromJSObject(retVal, e.ctx)
}

// SetLastCreatedScene sets the LastCreatedScene property of class EngineStore.
//
// https://doc.babylonjs.com/api/classes/babylon.enginestore#lastcreatedscene
func (e *EngineStore) SetLastCreatedScene(LastCreatedScene *Scene) *EngineStore {
	e.p.Set("LastCreatedScene", LastCreatedScene.JSObject())
	return e
}

// UseFallbackTexture returns the UseFallbackTexture property of class EngineStore.
//
// https://doc.babylonjs.com/api/classes/babylon.enginestore#usefallbacktexture
func (e *EngineStore) UseFallbackTexture() bool {
	retVal := e.p.Get("UseFallbackTexture")
	return retVal.Bool()
}

// SetUseFallbackTexture sets the UseFallbackTexture property of class EngineStore.
//
// https://doc.babylonjs.com/api/classes/babylon.enginestore#usefallbacktexture
func (e *EngineStore) SetUseFallbackTexture(UseFallbackTexture bool) *EngineStore {
	e.p.Set("UseFallbackTexture", UseFallbackTexture)
	return e
}
