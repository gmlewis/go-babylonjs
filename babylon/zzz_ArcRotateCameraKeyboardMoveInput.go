// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ArcRotateCameraKeyboardMoveInput represents a babylon.js ArcRotateCameraKeyboardMoveInput.
// Manage the keyboard inputs to control the movement of an arc rotate camera.
//
// See: http://doc.babylonjs.com/how_to/customizing_camera_inputs
type ArcRotateCameraKeyboardMoveInput struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *ArcRotateCameraKeyboardMoveInput) JSObject() js.Value { return a.p }

// ArcRotateCameraKeyboardMoveInput returns a ArcRotateCameraKeyboardMoveInput JavaScript class.
func (ba *Babylon) ArcRotateCameraKeyboardMoveInput() *ArcRotateCameraKeyboardMoveInput {
	p := ba.ctx.Get("ArcRotateCameraKeyboardMoveInput")
	return ArcRotateCameraKeyboardMoveInputFromJSObject(p, ba.ctx)
}

// ArcRotateCameraKeyboardMoveInputFromJSObject returns a wrapped ArcRotateCameraKeyboardMoveInput JavaScript class.
func ArcRotateCameraKeyboardMoveInputFromJSObject(p js.Value, ctx js.Value) *ArcRotateCameraKeyboardMoveInput {
	return &ArcRotateCameraKeyboardMoveInput{p: p, ctx: ctx}
}

// ArcRotateCameraKeyboardMoveInputArrayToJSArray returns a JavaScript Array for the wrapped array.
func ArcRotateCameraKeyboardMoveInputArrayToJSArray(array []*ArcRotateCameraKeyboardMoveInput) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// ArcRotateCameraKeyboardMoveInputAttachControlOpts contains optional parameters for ArcRotateCameraKeyboardMoveInput.AttachControl.
type ArcRotateCameraKeyboardMoveInputAttachControlOpts struct {
	NoPreventDefault *bool
}

// AttachControl calls the AttachControl method on the ArcRotateCameraKeyboardMoveInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#attachcontrol
func (a *ArcRotateCameraKeyboardMoveInput) AttachControl(element js.Value, opts *ArcRotateCameraKeyboardMoveInputAttachControlOpts) {
	if opts == nil {
		opts = &ArcRotateCameraKeyboardMoveInputAttachControlOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, element)

	if opts.NoPreventDefault == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoPreventDefault)
	}

	a.p.Call("attachControl", args...)
}

// CheckInputs calls the CheckInputs method on the ArcRotateCameraKeyboardMoveInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#checkinputs
func (a *ArcRotateCameraKeyboardMoveInput) CheckInputs() {

	a.p.Call("checkInputs")
}

// DetachControl calls the DetachControl method on the ArcRotateCameraKeyboardMoveInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#detachcontrol
func (a *ArcRotateCameraKeyboardMoveInput) DetachControl(element js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, element)

	a.p.Call("detachControl", args...)
}

// GetClassName calls the GetClassName method on the ArcRotateCameraKeyboardMoveInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#getclassname
func (a *ArcRotateCameraKeyboardMoveInput) GetClassName() string {

	retVal := a.p.Call("getClassName")
	return retVal.String()
}

// GetSimpleName calls the GetSimpleName method on the ArcRotateCameraKeyboardMoveInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#getsimplename
func (a *ArcRotateCameraKeyboardMoveInput) GetSimpleName() string {

	retVal := a.p.Call("getSimpleName")
	return retVal.String()
}

// AngularSpeed returns the AngularSpeed property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#angularspeed
func (a *ArcRotateCameraKeyboardMoveInput) AngularSpeed() float64 {
	retVal := a.p.Get("angularSpeed")
	return retVal.Float()
}

// SetAngularSpeed sets the AngularSpeed property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#angularspeed
func (a *ArcRotateCameraKeyboardMoveInput) SetAngularSpeed(angularSpeed float64) *ArcRotateCameraKeyboardMoveInput {
	a.p.Set("angularSpeed", angularSpeed)
	return a
}

// Camera returns the Camera property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#camera
func (a *ArcRotateCameraKeyboardMoveInput) Camera() *ArcRotateCamera {
	retVal := a.p.Get("camera")
	return ArcRotateCameraFromJSObject(retVal, a.ctx)
}

// SetCamera sets the Camera property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#camera
func (a *ArcRotateCameraKeyboardMoveInput) SetCamera(camera *ArcRotateCamera) *ArcRotateCameraKeyboardMoveInput {
	a.p.Set("camera", camera.JSObject())
	return a
}

// KeysDown returns the KeysDown property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#keysdown
func (a *ArcRotateCameraKeyboardMoveInput) KeysDown() []float64 {
	retVal := a.p.Get("keysDown")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetKeysDown sets the KeysDown property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#keysdown
func (a *ArcRotateCameraKeyboardMoveInput) SetKeysDown(keysDown []float64) *ArcRotateCameraKeyboardMoveInput {
	a.p.Set("keysDown", keysDown)
	return a
}

// KeysLeft returns the KeysLeft property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#keysleft
func (a *ArcRotateCameraKeyboardMoveInput) KeysLeft() []float64 {
	retVal := a.p.Get("keysLeft")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetKeysLeft sets the KeysLeft property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#keysleft
func (a *ArcRotateCameraKeyboardMoveInput) SetKeysLeft(keysLeft []float64) *ArcRotateCameraKeyboardMoveInput {
	a.p.Set("keysLeft", keysLeft)
	return a
}

// KeysReset returns the KeysReset property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#keysreset
func (a *ArcRotateCameraKeyboardMoveInput) KeysReset() []float64 {
	retVal := a.p.Get("keysReset")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetKeysReset sets the KeysReset property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#keysreset
func (a *ArcRotateCameraKeyboardMoveInput) SetKeysReset(keysReset []float64) *ArcRotateCameraKeyboardMoveInput {
	a.p.Set("keysReset", keysReset)
	return a
}

// KeysRight returns the KeysRight property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#keysright
func (a *ArcRotateCameraKeyboardMoveInput) KeysRight() []float64 {
	retVal := a.p.Get("keysRight")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetKeysRight sets the KeysRight property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#keysright
func (a *ArcRotateCameraKeyboardMoveInput) SetKeysRight(keysRight []float64) *ArcRotateCameraKeyboardMoveInput {
	a.p.Set("keysRight", keysRight)
	return a
}

// KeysUp returns the KeysUp property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#keysup
func (a *ArcRotateCameraKeyboardMoveInput) KeysUp() []float64 {
	retVal := a.p.Get("keysUp")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetKeysUp sets the KeysUp property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#keysup
func (a *ArcRotateCameraKeyboardMoveInput) SetKeysUp(keysUp []float64) *ArcRotateCameraKeyboardMoveInput {
	a.p.Set("keysUp", keysUp)
	return a
}

// PanningSensibility returns the PanningSensibility property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#panningsensibility
func (a *ArcRotateCameraKeyboardMoveInput) PanningSensibility() float64 {
	retVal := a.p.Get("panningSensibility")
	return retVal.Float()
}

// SetPanningSensibility sets the PanningSensibility property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#panningsensibility
func (a *ArcRotateCameraKeyboardMoveInput) SetPanningSensibility(panningSensibility float64) *ArcRotateCameraKeyboardMoveInput {
	a.p.Set("panningSensibility", panningSensibility)
	return a
}

// UseAltToZoom returns the UseAltToZoom property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#usealttozoom
func (a *ArcRotateCameraKeyboardMoveInput) UseAltToZoom() bool {
	retVal := a.p.Get("useAltToZoom")
	return retVal.Bool()
}

// SetUseAltToZoom sets the UseAltToZoom property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#usealttozoom
func (a *ArcRotateCameraKeyboardMoveInput) SetUseAltToZoom(useAltToZoom bool) *ArcRotateCameraKeyboardMoveInput {
	a.p.Set("useAltToZoom", useAltToZoom)
	return a
}

// ZoomingSensibility returns the ZoomingSensibility property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#zoomingsensibility
func (a *ArcRotateCameraKeyboardMoveInput) ZoomingSensibility() float64 {
	retVal := a.p.Get("zoomingSensibility")
	return retVal.Float()
}

// SetZoomingSensibility sets the ZoomingSensibility property of class ArcRotateCameraKeyboardMoveInput.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerakeyboardmoveinput#zoomingsensibility
func (a *ArcRotateCameraKeyboardMoveInput) SetZoomingSensibility(zoomingSensibility float64) *ArcRotateCameraKeyboardMoveInput {
	a.p.Set("zoomingSensibility", zoomingSensibility)
	return a
}
