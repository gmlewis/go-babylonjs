// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IScene represents a babylon.js IScene.
// Loader interface with additional members.
type IScene struct {
	*IScene
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IScene) JSObject() js.Value { return i.p }

// IScene returns a IScene JavaScript class.
func (ba *Babylon) IScene() *IScene {
	p := ba.ctx.Get("IScene")
	return ISceneFromJSObject(p, ba.ctx)
}

// ISceneFromJSObject returns a wrapped IScene JavaScript class.
func ISceneFromJSObject(p js.Value, ctx js.Value) *IScene {
	return &IScene{IScene: ISceneFromJSObject(p, ctx), ctx: ctx}
}

// ISceneArrayToJSArray returns a JavaScript Array for the wrapped array.
func ISceneArrayToJSArray(array []*IScene) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Extensions returns the Extensions property of class IScene.
//
// https://doc.babylonjs.com/api/classes/babylon.iscene#extensions
func (i *IScene) Extensions(extensions js.Value) *IScene {
	p := ba.ctx.Get("IScene").New(extensions)
	return ISceneFromJSObject(p, ba.ctx)
}

// SetExtensions sets the Extensions property of class IScene.
//
// https://doc.babylonjs.com/api/classes/babylon.iscene#extensions
func (i *IScene) SetExtensions(extensions js.Value) *IScene {
	p := ba.ctx.Get("IScene").New(extensions)
	return ISceneFromJSObject(p, ba.ctx)
}

// Extras returns the Extras property of class IScene.
//
// https://doc.babylonjs.com/api/classes/babylon.iscene#extras
func (i *IScene) Extras(extras interface{}) *IScene {
	p := ba.ctx.Get("IScene").New(extras)
	return ISceneFromJSObject(p, ba.ctx)
}

// SetExtras sets the Extras property of class IScene.
//
// https://doc.babylonjs.com/api/classes/babylon.iscene#extras
func (i *IScene) SetExtras(extras interface{}) *IScene {
	p := ba.ctx.Get("IScene").New(extras)
	return ISceneFromJSObject(p, ba.ctx)
}

// Index returns the Index property of class IScene.
//
// https://doc.babylonjs.com/api/classes/babylon.iscene#index
func (i *IScene) Index(index float64) *IScene {
	p := ba.ctx.Get("IScene").New(index)
	return ISceneFromJSObject(p, ba.ctx)
}

// SetIndex sets the Index property of class IScene.
//
// https://doc.babylonjs.com/api/classes/babylon.iscene#index
func (i *IScene) SetIndex(index float64) *IScene {
	p := ba.ctx.Get("IScene").New(index)
	return ISceneFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class IScene.
//
// https://doc.babylonjs.com/api/classes/babylon.iscene#name
func (i *IScene) Name(name string) *IScene {
	p := ba.ctx.Get("IScene").New(name)
	return ISceneFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class IScene.
//
// https://doc.babylonjs.com/api/classes/babylon.iscene#name
func (i *IScene) SetName(name string) *IScene {
	p := ba.ctx.Get("IScene").New(name)
	return ISceneFromJSObject(p, ba.ctx)
}

// Nodes returns the Nodes property of class IScene.
//
// https://doc.babylonjs.com/api/classes/babylon.iscene#nodes
func (i *IScene) Nodes(nodes float64) *IScene {
	p := ba.ctx.Get("IScene").New(nodes)
	return ISceneFromJSObject(p, ba.ctx)
}

// SetNodes sets the Nodes property of class IScene.
//
// https://doc.babylonjs.com/api/classes/babylon.iscene#nodes
func (i *IScene) SetNodes(nodes float64) *IScene {
	p := ba.ctx.Get("IScene").New(nodes)
	return ISceneFromJSObject(p, ba.ctx)
}

*/
