// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DualShockPad represents a babylon.js DualShockPad.
// Defines a DualShock gamepad
type DualShockPad struct {
	*Gamepad
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DualShockPad) JSObject() js.Value { return d.p }

// DualShockPad returns a DualShockPad JavaScript class.
func (ba *Babylon) DualShockPad() *DualShockPad {
	p := ba.ctx.Get("DualShockPad")
	return DualShockPadFromJSObject(p, ba.ctx)
}

// DualShockPadFromJSObject returns a wrapped DualShockPad JavaScript class.
func DualShockPadFromJSObject(p js.Value, ctx js.Value) *DualShockPad {
	return &DualShockPad{Gamepad: GamepadFromJSObject(p, ctx), ctx: ctx}
}

// DualShockPadArrayToJSArray returns a JavaScript Array for the wrapped array.
func DualShockPadArrayToJSArray(array []*DualShockPad) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDualShockPad returns a new DualShockPad object.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad
func (ba *Babylon) NewDualShockPad(id string, index float64, gamepad interface{}) *DualShockPad {

	args := make([]interface{}, 0, 3+0)

	args = append(args, id)
	args = append(args, index)
	args = append(args, gamepad)

	p := ba.ctx.Get("DualShockPad").New(args...)
	return DualShockPadFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the DualShockPad object.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#dispose
func (d *DualShockPad) Dispose() {

	d.p.Call("dispose")
}

// Onbuttondown calls the Onbuttondown method on the DualShockPad object.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#onbuttondown
func (d *DualShockPad) Onbuttondown(callback func()) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { callback(); return nil }))

	d.p.Call("onbuttondown", args...)
}

// Onbuttonup calls the Onbuttonup method on the DualShockPad object.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#onbuttonup
func (d *DualShockPad) Onbuttonup(callback func()) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { callback(); return nil }))

	d.p.Call("onbuttonup", args...)
}

// Ondpaddown calls the Ondpaddown method on the DualShockPad object.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#ondpaddown
func (d *DualShockPad) Ondpaddown(callback func()) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { callback(); return nil }))

	d.p.Call("ondpaddown", args...)
}

// Ondpadup calls the Ondpadup method on the DualShockPad object.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#ondpadup
func (d *DualShockPad) Ondpadup(callback func()) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { callback(); return nil }))

	d.p.Call("ondpadup", args...)
}

// Onlefttriggerchanged calls the Onlefttriggerchanged method on the DualShockPad object.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#onlefttriggerchanged
func (d *DualShockPad) Onlefttriggerchanged(callback func()) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { callback(); return nil }))

	d.p.Call("onlefttriggerchanged", args...)
}

// Onrighttriggerchanged calls the Onrighttriggerchanged method on the DualShockPad object.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#onrighttriggerchanged
func (d *DualShockPad) Onrighttriggerchanged(callback func()) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { callback(); return nil }))

	d.p.Call("onrighttriggerchanged", args...)
}

// Update calls the Update method on the DualShockPad object.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#update
func (d *DualShockPad) Update() {

	d.p.Call("update")
}

// ButtonCircle returns the ButtonCircle property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttoncircle
func (d *DualShockPad) ButtonCircle() float64 {
	retVal := d.p.Get("buttonCircle")
	return retVal.Float()
}

// SetButtonCircle sets the ButtonCircle property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttoncircle
func (d *DualShockPad) SetButtonCircle(buttonCircle float64) *DualShockPad {
	d.p.Set("buttonCircle", buttonCircle)
	return d
}

// ButtonCross returns the ButtonCross property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttoncross
func (d *DualShockPad) ButtonCross() float64 {
	retVal := d.p.Get("buttonCross")
	return retVal.Float()
}

// SetButtonCross sets the ButtonCross property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttoncross
func (d *DualShockPad) SetButtonCross(buttonCross float64) *DualShockPad {
	d.p.Set("buttonCross", buttonCross)
	return d
}

// ButtonL1 returns the ButtonL1 property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttonl1
func (d *DualShockPad) ButtonL1() float64 {
	retVal := d.p.Get("buttonL1")
	return retVal.Float()
}

// SetButtonL1 sets the ButtonL1 property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttonl1
func (d *DualShockPad) SetButtonL1(buttonL1 float64) *DualShockPad {
	d.p.Set("buttonL1", buttonL1)
	return d
}

// ButtonLeftStick returns the ButtonLeftStick property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttonleftstick
func (d *DualShockPad) ButtonLeftStick() float64 {
	retVal := d.p.Get("buttonLeftStick")
	return retVal.Float()
}

// SetButtonLeftStick sets the ButtonLeftStick property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttonleftstick
func (d *DualShockPad) SetButtonLeftStick(buttonLeftStick float64) *DualShockPad {
	d.p.Set("buttonLeftStick", buttonLeftStick)
	return d
}

// ButtonOptions returns the ButtonOptions property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttonoptions
func (d *DualShockPad) ButtonOptions() float64 {
	retVal := d.p.Get("buttonOptions")
	return retVal.Float()
}

// SetButtonOptions sets the ButtonOptions property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttonoptions
func (d *DualShockPad) SetButtonOptions(buttonOptions float64) *DualShockPad {
	d.p.Set("buttonOptions", buttonOptions)
	return d
}

// ButtonR1 returns the ButtonR1 property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttonr1
func (d *DualShockPad) ButtonR1() float64 {
	retVal := d.p.Get("buttonR1")
	return retVal.Float()
}

// SetButtonR1 sets the ButtonR1 property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttonr1
func (d *DualShockPad) SetButtonR1(buttonR1 float64) *DualShockPad {
	d.p.Set("buttonR1", buttonR1)
	return d
}

// ButtonRightStick returns the ButtonRightStick property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttonrightstick
func (d *DualShockPad) ButtonRightStick() float64 {
	retVal := d.p.Get("buttonRightStick")
	return retVal.Float()
}

// SetButtonRightStick sets the ButtonRightStick property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttonrightstick
func (d *DualShockPad) SetButtonRightStick(buttonRightStick float64) *DualShockPad {
	d.p.Set("buttonRightStick", buttonRightStick)
	return d
}

// ButtonShare returns the ButtonShare property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttonshare
func (d *DualShockPad) ButtonShare() float64 {
	retVal := d.p.Get("buttonShare")
	return retVal.Float()
}

// SetButtonShare sets the ButtonShare property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttonshare
func (d *DualShockPad) SetButtonShare(buttonShare float64) *DualShockPad {
	d.p.Set("buttonShare", buttonShare)
	return d
}

// ButtonSquare returns the ButtonSquare property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttonsquare
func (d *DualShockPad) ButtonSquare() float64 {
	retVal := d.p.Get("buttonSquare")
	return retVal.Float()
}

// SetButtonSquare sets the ButtonSquare property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttonsquare
func (d *DualShockPad) SetButtonSquare(buttonSquare float64) *DualShockPad {
	d.p.Set("buttonSquare", buttonSquare)
	return d
}

// ButtonTriangle returns the ButtonTriangle property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttontriangle
func (d *DualShockPad) ButtonTriangle() float64 {
	retVal := d.p.Get("buttonTriangle")
	return retVal.Float()
}

// SetButtonTriangle sets the ButtonTriangle property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#buttontriangle
func (d *DualShockPad) SetButtonTriangle(buttonTriangle float64) *DualShockPad {
	d.p.Set("buttonTriangle", buttonTriangle)
	return d
}

// DPadDown returns the DPadDown property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#dpaddown
func (d *DualShockPad) DPadDown() float64 {
	retVal := d.p.Get("dPadDown")
	return retVal.Float()
}

// SetDPadDown sets the DPadDown property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#dpaddown
func (d *DualShockPad) SetDPadDown(dPadDown float64) *DualShockPad {
	d.p.Set("dPadDown", dPadDown)
	return d
}

// DPadLeft returns the DPadLeft property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#dpadleft
func (d *DualShockPad) DPadLeft() float64 {
	retVal := d.p.Get("dPadLeft")
	return retVal.Float()
}

// SetDPadLeft sets the DPadLeft property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#dpadleft
func (d *DualShockPad) SetDPadLeft(dPadLeft float64) *DualShockPad {
	d.p.Set("dPadLeft", dPadLeft)
	return d
}

// DPadRight returns the DPadRight property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#dpadright
func (d *DualShockPad) DPadRight() float64 {
	retVal := d.p.Get("dPadRight")
	return retVal.Float()
}

// SetDPadRight sets the DPadRight property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#dpadright
func (d *DualShockPad) SetDPadRight(dPadRight float64) *DualShockPad {
	d.p.Set("dPadRight", dPadRight)
	return d
}

// DPadUp returns the DPadUp property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#dpadup
func (d *DualShockPad) DPadUp() float64 {
	retVal := d.p.Get("dPadUp")
	return retVal.Float()
}

// SetDPadUp sets the DPadUp property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#dpadup
func (d *DualShockPad) SetDPadUp(dPadUp float64) *DualShockPad {
	d.p.Set("dPadUp", dPadUp)
	return d
}

// LeftTrigger returns the LeftTrigger property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#lefttrigger
func (d *DualShockPad) LeftTrigger() float64 {
	retVal := d.p.Get("leftTrigger")
	return retVal.Float()
}

// SetLeftTrigger sets the LeftTrigger property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#lefttrigger
func (d *DualShockPad) SetLeftTrigger(leftTrigger float64) *DualShockPad {
	d.p.Set("leftTrigger", leftTrigger)
	return d
}

// OnButtonDownObservable returns the OnButtonDownObservable property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#onbuttondownobservable
func (d *DualShockPad) OnButtonDownObservable() *Observable {
	retVal := d.p.Get("onButtonDownObservable")
	return ObservableFromJSObject(retVal, d.ctx)
}

// SetOnButtonDownObservable sets the OnButtonDownObservable property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#onbuttondownobservable
func (d *DualShockPad) SetOnButtonDownObservable(onButtonDownObservable *Observable) *DualShockPad {
	d.p.Set("onButtonDownObservable", onButtonDownObservable.JSObject())
	return d
}

// OnButtonUpObservable returns the OnButtonUpObservable property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#onbuttonupobservable
func (d *DualShockPad) OnButtonUpObservable() *Observable {
	retVal := d.p.Get("onButtonUpObservable")
	return ObservableFromJSObject(retVal, d.ctx)
}

// SetOnButtonUpObservable sets the OnButtonUpObservable property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#onbuttonupobservable
func (d *DualShockPad) SetOnButtonUpObservable(onButtonUpObservable *Observable) *DualShockPad {
	d.p.Set("onButtonUpObservable", onButtonUpObservable.JSObject())
	return d
}

// OnPadDownObservable returns the OnPadDownObservable property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#onpaddownobservable
func (d *DualShockPad) OnPadDownObservable() *Observable {
	retVal := d.p.Get("onPadDownObservable")
	return ObservableFromJSObject(retVal, d.ctx)
}

// SetOnPadDownObservable sets the OnPadDownObservable property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#onpaddownobservable
func (d *DualShockPad) SetOnPadDownObservable(onPadDownObservable *Observable) *DualShockPad {
	d.p.Set("onPadDownObservable", onPadDownObservable.JSObject())
	return d
}

// OnPadUpObservable returns the OnPadUpObservable property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#onpadupobservable
func (d *DualShockPad) OnPadUpObservable() *Observable {
	retVal := d.p.Get("onPadUpObservable")
	return ObservableFromJSObject(retVal, d.ctx)
}

// SetOnPadUpObservable sets the OnPadUpObservable property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#onpadupobservable
func (d *DualShockPad) SetOnPadUpObservable(onPadUpObservable *Observable) *DualShockPad {
	d.p.Set("onPadUpObservable", onPadUpObservable.JSObject())
	return d
}

// RightTrigger returns the RightTrigger property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#righttrigger
func (d *DualShockPad) RightTrigger() float64 {
	retVal := d.p.Get("rightTrigger")
	return retVal.Float()
}

// SetRightTrigger sets the RightTrigger property of class DualShockPad.
//
// https://doc.babylonjs.com/api/classes/babylon.dualshockpad#righttrigger
func (d *DualShockPad) SetRightTrigger(rightTrigger float64) *DualShockPad {
	d.p.Set("rightTrigger", rightTrigger)
	return d
}
