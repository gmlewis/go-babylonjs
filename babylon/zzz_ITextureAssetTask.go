// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ITextureAssetTask represents a babylon.js ITextureAssetTask.
// Defines the interface used by texture loading tasks
type ITextureAssetTask struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ITextureAssetTask) JSObject() js.Value { return i.p }

// ITextureAssetTask returns a ITextureAssetTask JavaScript class.
func (ba *Babylon) ITextureAssetTask() *ITextureAssetTask {
	p := ba.ctx.Get("ITextureAssetTask")
	return ITextureAssetTaskFromJSObject(p, ba.ctx)
}

// ITextureAssetTaskFromJSObject returns a wrapped ITextureAssetTask JavaScript class.
func ITextureAssetTaskFromJSObject(p js.Value, ctx js.Value) *ITextureAssetTask {
	return &ITextureAssetTask{p: p, ctx: ctx}
}

// ITextureAssetTaskArrayToJSArray returns a JavaScript Array for the wrapped array.
func ITextureAssetTaskArrayToJSArray(array []*ITextureAssetTask) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Texture returns the Texture property of class ITextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.itextureassettask#texture
func (i *ITextureAssetTask) Texture(texture *TEX) *ITextureAssetTask {
	p := ba.ctx.Get("ITextureAssetTask").New(texture.JSObject())
	return ITextureAssetTaskFromJSObject(p, ba.ctx)
}

// SetTexture sets the Texture property of class ITextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.itextureassettask#texture
func (i *ITextureAssetTask) SetTexture(texture *TEX) *ITextureAssetTask {
	p := ba.ctx.Get("ITextureAssetTask").New(texture.JSObject())
	return ITextureAssetTaskFromJSObject(p, ba.ctx)
}

*/
