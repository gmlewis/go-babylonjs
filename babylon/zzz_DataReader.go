// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DataReader represents a babylon.js DataReader.
// Utility class for reading from a data buffer
type DataReader struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DataReader) JSObject() js.Value { return d.p }

// DataReader returns a DataReader JavaScript class.
func (ba *Babylon) DataReader() *DataReader {
	p := ba.ctx.Get("DataReader")
	return DataReaderFromJSObject(p, ba.ctx)
}

// DataReaderFromJSObject returns a wrapped DataReader JavaScript class.
func DataReaderFromJSObject(p js.Value, ctx js.Value) *DataReader {
	return &DataReader{p: p, ctx: ctx}
}

// DataReaderArrayToJSArray returns a JavaScript Array for the wrapped array.
func DataReaderArrayToJSArray(array []*DataReader) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDataReader returns a new DataReader object.
//
// https://doc.babylonjs.com/api/classes/babylon.datareader
func (ba *Babylon) NewDataReader(buffer *IDataBuffer) *DataReader {

	args := make([]interface{}, 0, 1+0)

	args = append(args, buffer.JSObject())

	p := ba.ctx.Get("DataReader").New(args...)
	return DataReaderFromJSObject(p, ba.ctx)
}

// LoadAsync calls the LoadAsync method on the DataReader object.
//
// https://doc.babylonjs.com/api/classes/babylon.datareader#loadasync
func (d *DataReader) LoadAsync(byteLength float64) *Promise {

	args := make([]interface{}, 0, 1+0)

	args = append(args, byteLength)

	retVal := d.p.Call("loadAsync", args...)
	return PromiseFromJSObject(retVal, d.ctx)
}

// ReadString calls the ReadString method on the DataReader object.
//
// https://doc.babylonjs.com/api/classes/babylon.datareader#readstring
func (d *DataReader) ReadString(byteLength float64) string {

	args := make([]interface{}, 0, 1+0)

	args = append(args, byteLength)

	retVal := d.p.Call("readString", args...)
	return retVal.String()
}

// ReadUint32 calls the ReadUint32 method on the DataReader object.
//
// https://doc.babylonjs.com/api/classes/babylon.datareader#readuint32
func (d *DataReader) ReadUint32() float64 {

	retVal := d.p.Call("readUint32")
	return retVal.Float()
}

// ReadUint8Array calls the ReadUint8Array method on the DataReader object.
//
// https://doc.babylonjs.com/api/classes/babylon.datareader#readuint8array
func (d *DataReader) ReadUint8Array(byteLength float64) js.Value {

	args := make([]interface{}, 0, 1+0)

	args = append(args, byteLength)

	retVal := d.p.Call("readUint8Array", args...)
	return retVal
}

// SkipBytes calls the SkipBytes method on the DataReader object.
//
// https://doc.babylonjs.com/api/classes/babylon.datareader#skipbytes
func (d *DataReader) SkipBytes(byteLength float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, byteLength)

	d.p.Call("skipBytes", args...)
}

// Buffer returns the Buffer property of class DataReader.
//
// https://doc.babylonjs.com/api/classes/babylon.datareader#buffer
func (d *DataReader) Buffer() *IDataBuffer {
	retVal := d.p.Get("buffer")
	return IDataBufferFromJSObject(retVal, d.ctx)
}

// SetBuffer sets the Buffer property of class DataReader.
//
// https://doc.babylonjs.com/api/classes/babylon.datareader#buffer
func (d *DataReader) SetBuffer(buffer *IDataBuffer) *DataReader {
	d.p.Set("buffer", buffer.JSObject())
	return d
}

// ByteOffset returns the ByteOffset property of class DataReader.
//
// https://doc.babylonjs.com/api/classes/babylon.datareader#byteoffset
func (d *DataReader) ByteOffset() float64 {
	retVal := d.p.Get("byteOffset")
	return retVal.Float()
}

// SetByteOffset sets the ByteOffset property of class DataReader.
//
// https://doc.babylonjs.com/api/classes/babylon.datareader#byteoffset
func (d *DataReader) SetByteOffset(byteOffset float64) *DataReader {
	d.p.Set("byteOffset", byteOffset)
	return d
}
