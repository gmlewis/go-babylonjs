// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// LightGizmo represents a babylon.js LightGizmo.
// Gizmo that enables viewing a light
type LightGizmo struct {
	*Gizmo
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (l *LightGizmo) JSObject() js.Value { return l.p }

// LightGizmo returns a LightGizmo JavaScript class.
func (ba *Babylon) LightGizmo() *LightGizmo {
	p := ba.ctx.Get("LightGizmo")
	return LightGizmoFromJSObject(p, ba.ctx)
}

// LightGizmoFromJSObject returns a wrapped LightGizmo JavaScript class.
func LightGizmoFromJSObject(p js.Value, ctx js.Value) *LightGizmo {
	return &LightGizmo{Gizmo: GizmoFromJSObject(p, ctx), ctx: ctx}
}

// LightGizmoArrayToJSArray returns a JavaScript Array for the wrapped array.
func LightGizmoArrayToJSArray(array []*LightGizmo) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewLightGizmoOpts contains optional parameters for NewLightGizmo.
type NewLightGizmoOpts struct {
	GizmoLayer *UtilityLayerRenderer
}

// NewLightGizmo returns a new LightGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo
func (ba *Babylon) NewLightGizmo(opts *NewLightGizmoOpts) *LightGizmo {
	if opts == nil {
		opts = &NewLightGizmoOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.GizmoLayer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.GizmoLayer.JSObject())
	}

	p := ba.ctx.Get("LightGizmo").New(args...)
	return LightGizmoFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the LightGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#dispose
func (l *LightGizmo) Dispose() {

	l.p.Call("dispose")
}

// Light returns the Light property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#light
func (l *LightGizmo) Light() *Light {
	retVal := l.p.Get("light")
	return LightFromJSObject(retVal, l.ctx)
}

// SetLight sets the Light property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#light
func (l *LightGizmo) SetLight(light *Light) *LightGizmo {
	l.p.Set("light", light.JSObject())
	return l
}

// Material returns the Material property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#material
func (l *LightGizmo) Material() *StandardMaterial {
	retVal := l.p.Get("material")
	return StandardMaterialFromJSObject(retVal, l.ctx)
}

// SetMaterial sets the Material property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#material
func (l *LightGizmo) SetMaterial(material *StandardMaterial) *LightGizmo {
	l.p.Set("material", material.JSObject())
	return l
}
