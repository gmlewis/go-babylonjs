// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// LightGizmo represents a babylon.js LightGizmo.
// Gizmo that enables viewing a light
type LightGizmo struct {
	*Gizmo
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (l *LightGizmo) JSObject() js.Value { return l.p }

// LightGizmo returns a LightGizmo JavaScript class.
func (ba *Babylon) LightGizmo() *LightGizmo {
	p := ba.ctx.Get("LightGizmo")
	return LightGizmoFromJSObject(p, ba.ctx)
}

// LightGizmoFromJSObject returns a wrapped LightGizmo JavaScript class.
func LightGizmoFromJSObject(p js.Value, ctx js.Value) *LightGizmo {
	return &LightGizmo{Gizmo: GizmoFromJSObject(p, ctx), ctx: ctx}
}

// LightGizmoArrayToJSArray returns a JavaScript Array for the wrapped array.
func LightGizmoArrayToJSArray(array []*LightGizmo) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewLightGizmoOpts contains optional parameters for NewLightGizmo.
type NewLightGizmoOpts struct {
	GizmoLayer *UtilityLayerRenderer
}

// NewLightGizmo returns a new LightGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo
func (ba *Babylon) NewLightGizmo(opts *NewLightGizmoOpts) *LightGizmo {
	if opts == nil {
		opts = &NewLightGizmoOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.GizmoLayer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.GizmoLayer.JSObject())
	}

	p := ba.ctx.Get("LightGizmo").New(args...)
	return LightGizmoFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the LightGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#dispose
func (l *LightGizmo) Dispose() {

	l.p.Call("dispose")
}

// SetCustomMesh calls the SetCustomMesh method on the LightGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#setcustommesh
func (l *LightGizmo) SetCustomMesh(mesh *Mesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	l.p.Call("setCustomMesh", args...)
}

/*

// AttachedMesh returns the AttachedMesh property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#attachedmesh
func (l *LightGizmo) AttachedMesh(attachedMesh *AbstractMesh) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(attachedMesh.JSObject())
	return LightGizmoFromJSObject(p, ba.ctx)
}

// SetAttachedMesh sets the AttachedMesh property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#attachedmesh
func (l *LightGizmo) SetAttachedMesh(attachedMesh *AbstractMesh) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(attachedMesh.JSObject())
	return LightGizmoFromJSObject(p, ba.ctx)
}

// GizmoLayer returns the GizmoLayer property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#gizmolayer
func (l *LightGizmo) GizmoLayer(gizmoLayer *UtilityLayerRenderer) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(gizmoLayer.JSObject())
	return LightGizmoFromJSObject(p, ba.ctx)
}

// SetGizmoLayer sets the GizmoLayer property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#gizmolayer
func (l *LightGizmo) SetGizmoLayer(gizmoLayer *UtilityLayerRenderer) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(gizmoLayer.JSObject())
	return LightGizmoFromJSObject(p, ba.ctx)
}

// Light returns the Light property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#light
func (l *LightGizmo) Light(light *Light) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(light.JSObject())
	return LightGizmoFromJSObject(p, ba.ctx)
}

// SetLight sets the Light property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#light
func (l *LightGizmo) SetLight(light *Light) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(light.JSObject())
	return LightGizmoFromJSObject(p, ba.ctx)
}

// Material returns the Material property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#material
func (l *LightGizmo) Material(material *StandardMaterial) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(material.JSObject())
	return LightGizmoFromJSObject(p, ba.ctx)
}

// SetMaterial sets the Material property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#material
func (l *LightGizmo) SetMaterial(material *StandardMaterial) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(material.JSObject())
	return LightGizmoFromJSObject(p, ba.ctx)
}

// ScaleRatio returns the ScaleRatio property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#scaleratio
func (l *LightGizmo) ScaleRatio(scaleRatio float64) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(scaleRatio)
	return LightGizmoFromJSObject(p, ba.ctx)
}

// SetScaleRatio sets the ScaleRatio property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#scaleratio
func (l *LightGizmo) SetScaleRatio(scaleRatio float64) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(scaleRatio)
	return LightGizmoFromJSObject(p, ba.ctx)
}

// UpdateGizmoPositionToMatchAttachedMesh returns the UpdateGizmoPositionToMatchAttachedMesh property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#updategizmopositiontomatchattachedmesh
func (l *LightGizmo) UpdateGizmoPositionToMatchAttachedMesh(updateGizmoPositionToMatchAttachedMesh bool) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(updateGizmoPositionToMatchAttachedMesh)
	return LightGizmoFromJSObject(p, ba.ctx)
}

// SetUpdateGizmoPositionToMatchAttachedMesh sets the UpdateGizmoPositionToMatchAttachedMesh property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#updategizmopositiontomatchattachedmesh
func (l *LightGizmo) SetUpdateGizmoPositionToMatchAttachedMesh(updateGizmoPositionToMatchAttachedMesh bool) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(updateGizmoPositionToMatchAttachedMesh)
	return LightGizmoFromJSObject(p, ba.ctx)
}

// UpdateGizmoRotationToMatchAttachedMesh returns the UpdateGizmoRotationToMatchAttachedMesh property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#updategizmorotationtomatchattachedmesh
func (l *LightGizmo) UpdateGizmoRotationToMatchAttachedMesh(updateGizmoRotationToMatchAttachedMesh bool) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(updateGizmoRotationToMatchAttachedMesh)
	return LightGizmoFromJSObject(p, ba.ctx)
}

// SetUpdateGizmoRotationToMatchAttachedMesh sets the UpdateGizmoRotationToMatchAttachedMesh property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#updategizmorotationtomatchattachedmesh
func (l *LightGizmo) SetUpdateGizmoRotationToMatchAttachedMesh(updateGizmoRotationToMatchAttachedMesh bool) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(updateGizmoRotationToMatchAttachedMesh)
	return LightGizmoFromJSObject(p, ba.ctx)
}

// UpdateScale returns the UpdateScale property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#updatescale
func (l *LightGizmo) UpdateScale(updateScale bool) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(updateScale)
	return LightGizmoFromJSObject(p, ba.ctx)
}

// SetUpdateScale sets the UpdateScale property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#updatescale
func (l *LightGizmo) SetUpdateScale(updateScale bool) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(updateScale)
	return LightGizmoFromJSObject(p, ba.ctx)
}

// _rootMesh returns the _rootMesh property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#_rootmesh
func (l *LightGizmo) _rootMesh(_rootMesh *Mesh) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(_rootMesh.JSObject())
	return LightGizmoFromJSObject(p, ba.ctx)
}

// Set_rootMesh sets the _rootMesh property of class LightGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.lightgizmo#_rootmesh
func (l *LightGizmo) Set_rootMesh(_rootMesh *Mesh) *LightGizmo {
	p := ba.ctx.Get("LightGizmo").New(_rootMesh.JSObject())
	return LightGizmoFromJSObject(p, ba.ctx)
}

*/
