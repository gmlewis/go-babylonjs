// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IMeshPrimitive represents a babylon.js IMeshPrimitive.
// Loader interface with additional members.
type IMeshPrimitive struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IMeshPrimitive) JSObject() js.Value { return i.p }

// IMeshPrimitive returns a IMeshPrimitive JavaScript class.
func (ba *Babylon) IMeshPrimitive() *IMeshPrimitive {
	p := ba.ctx.Get("IMeshPrimitive")
	return IMeshPrimitiveFromJSObject(p, ba.ctx)
}

// IMeshPrimitiveFromJSObject returns a wrapped IMeshPrimitive JavaScript class.
func IMeshPrimitiveFromJSObject(p js.Value, ctx js.Value) *IMeshPrimitive {
	return &IMeshPrimitive{p: p, ctx: ctx}
}

// IMeshPrimitiveArrayToJSArray returns a JavaScript Array for the wrapped array.
func IMeshPrimitiveArrayToJSArray(array []*IMeshPrimitive) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}
