// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// InstancesBlock represents a babylon.js InstancesBlock.
// Block used to add support for instances
//
// See: https://doc.babylonjs.com/how_to/how_to_use_instances
type InstancesBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *InstancesBlock) JSObject() js.Value { return i.p }

// InstancesBlock returns a InstancesBlock JavaScript class.
func (ba *Babylon) InstancesBlock() *InstancesBlock {
	p := ba.ctx.Get("InstancesBlock")
	return InstancesBlockFromJSObject(p, ba.ctx)
}

// InstancesBlockFromJSObject returns a wrapped InstancesBlock JavaScript class.
func InstancesBlockFromJSObject(p js.Value, ctx js.Value) *InstancesBlock {
	return &InstancesBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// InstancesBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func InstancesBlockArrayToJSArray(array []*InstancesBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewInstancesBlock returns a new InstancesBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#constructor
func (ba *Babylon) NewInstancesBlock(name string) *InstancesBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("InstancesBlock").New(args...)
	return InstancesBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the InstancesBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#autoconfigure
func (i *InstancesBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	if material == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, material.JSObject())
	}

	i.p.Call("autoConfigure", args...)
}

// GetClassName calls the GetClassName method on the InstancesBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#getclassname
func (i *InstancesBlock) GetClassName() string {

	retVal := i.p.Call("getClassName")
	return retVal.String()
}

// InstancesBlockPrepareDefinesOpts contains optional parameters for InstancesBlock.PrepareDefines.
type InstancesBlockPrepareDefinesOpts struct {
	UseInstances *bool
}

// PrepareDefines calls the PrepareDefines method on the InstancesBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#preparedefines
func (i *InstancesBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *InstancesBlockPrepareDefinesOpts) {
	if opts == nil {
		opts = &InstancesBlockPrepareDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	if mesh == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, mesh.JSObject())
	}

	if nodeMaterial == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, nodeMaterial.JSObject())
	}

	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	i.p.Call("prepareDefines", args...)
}

// Output returns the Output property of class InstancesBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#output
func (i *InstancesBlock) Output() *NodeMaterialConnectionPoint {
	retVal := i.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, i.ctx)
}

// SetOutput sets the Output property of class InstancesBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#output
func (i *InstancesBlock) SetOutput(output *NodeMaterialConnectionPoint) *InstancesBlock {
	i.p.Set("output", output.JSObject())
	return i
}

// World returns the World property of class InstancesBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#world
func (i *InstancesBlock) World() *NodeMaterialConnectionPoint {
	retVal := i.p.Get("world")
	return NodeMaterialConnectionPointFromJSObject(retVal, i.ctx)
}

// SetWorld sets the World property of class InstancesBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#world
func (i *InstancesBlock) SetWorld(world *NodeMaterialConnectionPoint) *InstancesBlock {
	i.p.Set("world", world.JSObject())
	return i
}

// World0 returns the World0 property of class InstancesBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#world0
func (i *InstancesBlock) World0() *NodeMaterialConnectionPoint {
	retVal := i.p.Get("world0")
	return NodeMaterialConnectionPointFromJSObject(retVal, i.ctx)
}

// SetWorld0 sets the World0 property of class InstancesBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#world0
func (i *InstancesBlock) SetWorld0(world0 *NodeMaterialConnectionPoint) *InstancesBlock {
	i.p.Set("world0", world0.JSObject())
	return i
}

// World1 returns the World1 property of class InstancesBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#world1
func (i *InstancesBlock) World1() *NodeMaterialConnectionPoint {
	retVal := i.p.Get("world1")
	return NodeMaterialConnectionPointFromJSObject(retVal, i.ctx)
}

// SetWorld1 sets the World1 property of class InstancesBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#world1
func (i *InstancesBlock) SetWorld1(world1 *NodeMaterialConnectionPoint) *InstancesBlock {
	i.p.Set("world1", world1.JSObject())
	return i
}

// World2 returns the World2 property of class InstancesBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#world2
func (i *InstancesBlock) World2() *NodeMaterialConnectionPoint {
	retVal := i.p.Get("world2")
	return NodeMaterialConnectionPointFromJSObject(retVal, i.ctx)
}

// SetWorld2 sets the World2 property of class InstancesBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#world2
func (i *InstancesBlock) SetWorld2(world2 *NodeMaterialConnectionPoint) *InstancesBlock {
	i.p.Set("world2", world2.JSObject())
	return i
}

// World3 returns the World3 property of class InstancesBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#world3
func (i *InstancesBlock) World3() *NodeMaterialConnectionPoint {
	retVal := i.p.Get("world3")
	return NodeMaterialConnectionPointFromJSObject(retVal, i.ctx)
}

// SetWorld3 sets the World3 property of class InstancesBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.instancesblock#world3
func (i *InstancesBlock) SetWorld3(world3 *NodeMaterialConnectionPoint) *InstancesBlock {
	i.p.Set("world3", world3.JSObject())
	return i
}
