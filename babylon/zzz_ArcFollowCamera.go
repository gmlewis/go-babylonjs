// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ArcFollowCamera represents a babylon.js ArcFollowCamera.
// Arc Rotate version of the follow camera.
// It still follows a Defined mesh but in an Arc Rotate Camera fashion.
//
// See: http://doc.babylonjs.com/features/cameras#follow-camera
type ArcFollowCamera struct {
	*TargetCamera
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *ArcFollowCamera) JSObject() js.Value { return a.p }

// ArcFollowCamera returns a ArcFollowCamera JavaScript class.
func (ba *Babylon) ArcFollowCamera() *ArcFollowCamera {
	p := ba.ctx.Get("ArcFollowCamera")
	return ArcFollowCameraFromJSObject(p, ba.ctx)
}

// ArcFollowCameraFromJSObject returns a wrapped ArcFollowCamera JavaScript class.
func ArcFollowCameraFromJSObject(p js.Value, ctx js.Value) *ArcFollowCamera {
	return &ArcFollowCamera{TargetCamera: TargetCameraFromJSObject(p, ctx), ctx: ctx}
}

// ArcFollowCameraArrayToJSArray returns a JavaScript Array for the wrapped array.
func ArcFollowCameraArrayToJSArray(array []*ArcFollowCamera) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewArcFollowCamera returns a new ArcFollowCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.arcfollowcamera
func (ba *Babylon) NewArcFollowCamera(name string, alpha float64, beta float64, radius float64, target *AbstractMesh, scene *Scene) *ArcFollowCamera {

	args := make([]interface{}, 0, 6+0)

	args = append(args, name)
	args = append(args, alpha)
	args = append(args, beta)
	args = append(args, radius)
	args = append(args, target.JSObject())
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("ArcFollowCamera").New(args...)
	return ArcFollowCameraFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the ArcFollowCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.arcfollowcamera#getclassname
func (a *ArcFollowCamera) GetClassName() string {

	retVal := a.p.Call("getClassName")
	return retVal.String()
}

// Alpha returns the Alpha property of class ArcFollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.arcfollowcamera#alpha
func (a *ArcFollowCamera) Alpha() float64 {
	retVal := a.p.Get("alpha")
	return retVal.Float()
}

// SetAlpha sets the Alpha property of class ArcFollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.arcfollowcamera#alpha
func (a *ArcFollowCamera) SetAlpha(alpha float64) *ArcFollowCamera {
	a.p.Set("alpha", alpha)
	return a
}

// Beta returns the Beta property of class ArcFollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.arcfollowcamera#beta
func (a *ArcFollowCamera) Beta() float64 {
	retVal := a.p.Get("beta")
	return retVal.Float()
}

// SetBeta sets the Beta property of class ArcFollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.arcfollowcamera#beta
func (a *ArcFollowCamera) SetBeta(beta float64) *ArcFollowCamera {
	a.p.Set("beta", beta)
	return a
}

// Radius returns the Radius property of class ArcFollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.arcfollowcamera#radius
func (a *ArcFollowCamera) Radius() float64 {
	retVal := a.p.Get("radius")
	return retVal.Float()
}

// SetRadius sets the Radius property of class ArcFollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.arcfollowcamera#radius
func (a *ArcFollowCamera) SetRadius(radius float64) *ArcFollowCamera {
	a.p.Set("radius", radius)
	return a
}

// Target returns the Target property of class ArcFollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.arcfollowcamera#target
func (a *ArcFollowCamera) Target() *AbstractMesh {
	retVal := a.p.Get("target")
	return AbstractMeshFromJSObject(retVal, a.ctx)
}

// SetTarget sets the Target property of class ArcFollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.arcfollowcamera#target
func (a *ArcFollowCamera) SetTarget(target *AbstractMesh) *ArcFollowCamera {
	a.p.Set("target", target.JSObject())
	return a
}
