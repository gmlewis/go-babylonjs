// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PlanePanel represents a babylon.js PlanePanel.
// Class used to create a container panel deployed on the surface of a plane
type PlanePanel struct {
	*VolumeBasedPanel
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PlanePanel) JSObject() js.Value { return p.p }

// PlanePanel returns a PlanePanel JavaScript class.
func (ba *Babylon) PlanePanel() *PlanePanel {
	p := ba.ctx.Get("PlanePanel")
	return PlanePanelFromJSObject(p, ba.ctx)
}

// PlanePanelFromJSObject returns a wrapped PlanePanel JavaScript class.
func PlanePanelFromJSObject(p js.Value, ctx js.Value) *PlanePanel {
	return &PlanePanel{VolumeBasedPanel: VolumeBasedPanelFromJSObject(p, ctx), ctx: ctx}
}

// PlanePanelArrayToJSArray returns a JavaScript Array for the wrapped array.
func PlanePanelArrayToJSArray(array []*PlanePanel) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPlanePanel returns a new PlanePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel
func (ba *Babylon) NewPlanePanel() *PlanePanel {

	args := make([]interface{}, 0, 0+0)

	p := ba.ctx.Get("PlanePanel").New(args...)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// AddBehavior calls the AddBehavior method on the PlanePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#addbehavior
func (p *PlanePanel) AddBehavior(behavior js.Value) *Control3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, behavior)

	retVal := p.p.Call("addBehavior", args...)
	return Control3DFromJSObject(retVal, p.ctx)
}

// AddControl calls the AddControl method on the PlanePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#addcontrol
func (p *PlanePanel) AddControl(control *Control3D) *Container3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := p.p.Call("addControl", args...)
	return Container3DFromJSObject(retVal, p.ctx)
}

// ContainsControl calls the ContainsControl method on the PlanePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#containscontrol
func (p *PlanePanel) ContainsControl(control *Control3D) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := p.p.Call("containsControl", args...)
	return retVal.Bool()
}

// Dispose calls the Dispose method on the PlanePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#dispose
func (p *PlanePanel) Dispose() {

	p.p.Call("dispose")
}

// GetBehaviorByName calls the GetBehaviorByName method on the PlanePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#getbehaviorbyname
func (p *PlanePanel) GetBehaviorByName(name string) js.Value {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := p.p.Call("getBehaviorByName", args...)
	return retVal
}

// GetClassName calls the GetClassName method on the PlanePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#getclassname
func (p *PlanePanel) GetClassName() string {

	retVal := p.p.Call("getClassName")
	return retVal.String()
}

// LinkToTransformNode calls the LinkToTransformNode method on the PlanePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#linktotransformnode
func (p *PlanePanel) LinkToTransformNode(node *TransformNode) *Control3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, node.JSObject())

	retVal := p.p.Call("linkToTransformNode", args...)
	return Control3DFromJSObject(retVal, p.ctx)
}

// RemoveBehavior calls the RemoveBehavior method on the PlanePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#removebehavior
func (p *PlanePanel) RemoveBehavior(behavior js.Value) *Control3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, behavior)

	retVal := p.p.Call("removeBehavior", args...)
	return Control3DFromJSObject(retVal, p.ctx)
}

// RemoveControl calls the RemoveControl method on the PlanePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#removecontrol
func (p *PlanePanel) RemoveControl(control *Control3D) *Container3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := p.p.Call("removeControl", args...)
	return Container3DFromJSObject(retVal, p.ctx)
}

// UpdateLayout calls the UpdateLayout method on the PlanePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#updatelayout
func (p *PlanePanel) UpdateLayout() *Container3D {

	retVal := p.p.Call("updateLayout")
	return Container3DFromJSObject(retVal, p.ctx)
}

/*

// Behaviors returns the Behaviors property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#behaviors
func (p *PlanePanel) Behaviors(behaviors js.Value) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(behaviors)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetBehaviors sets the Behaviors property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#behaviors
func (p *PlanePanel) SetBehaviors(behaviors js.Value) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(behaviors)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// BlockLayout returns the BlockLayout property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#blocklayout
func (p *PlanePanel) BlockLayout(blockLayout bool) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(blockLayout)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetBlockLayout sets the BlockLayout property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#blocklayout
func (p *PlanePanel) SetBlockLayout(blockLayout bool) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(blockLayout)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// Children returns the Children property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#children
func (p *PlanePanel) Children(children []*Control3D) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(children)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetChildren sets the Children property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#children
func (p *PlanePanel) SetChildren(children []*Control3D) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(children)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// Columns returns the Columns property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#columns
func (p *PlanePanel) Columns(columns int) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(columns)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetColumns sets the Columns property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#columns
func (p *PlanePanel) SetColumns(columns int) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(columns)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// FACEFORWARDREVERSED_ORIENTATION returns the FACEFORWARDREVERSED_ORIENTATION property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#faceforwardreversed_orientation
func (p *PlanePanel) FACEFORWARDREVERSED_ORIENTATION(FACEFORWARDREVERSED_ORIENTATION float64) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(FACEFORWARDREVERSED_ORIENTATION)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetFACEFORWARDREVERSED_ORIENTATION sets the FACEFORWARDREVERSED_ORIENTATION property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#faceforwardreversed_orientation
func (p *PlanePanel) SetFACEFORWARDREVERSED_ORIENTATION(FACEFORWARDREVERSED_ORIENTATION float64) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(FACEFORWARDREVERSED_ORIENTATION)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// FACEFORWARD_ORIENTATION returns the FACEFORWARD_ORIENTATION property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#faceforward_orientation
func (p *PlanePanel) FACEFORWARD_ORIENTATION(FACEFORWARD_ORIENTATION float64) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(FACEFORWARD_ORIENTATION)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetFACEFORWARD_ORIENTATION sets the FACEFORWARD_ORIENTATION property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#faceforward_orientation
func (p *PlanePanel) SetFACEFORWARD_ORIENTATION(FACEFORWARD_ORIENTATION float64) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(FACEFORWARD_ORIENTATION)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// FACEORIGINREVERSED_ORIENTATION returns the FACEORIGINREVERSED_ORIENTATION property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#faceoriginreversed_orientation
func (p *PlanePanel) FACEORIGINREVERSED_ORIENTATION(FACEORIGINREVERSED_ORIENTATION float64) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(FACEORIGINREVERSED_ORIENTATION)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetFACEORIGINREVERSED_ORIENTATION sets the FACEORIGINREVERSED_ORIENTATION property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#faceoriginreversed_orientation
func (p *PlanePanel) SetFACEORIGINREVERSED_ORIENTATION(FACEORIGINREVERSED_ORIENTATION float64) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(FACEORIGINREVERSED_ORIENTATION)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// FACEORIGIN_ORIENTATION returns the FACEORIGIN_ORIENTATION property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#faceorigin_orientation
func (p *PlanePanel) FACEORIGIN_ORIENTATION(FACEORIGIN_ORIENTATION float64) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(FACEORIGIN_ORIENTATION)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetFACEORIGIN_ORIENTATION sets the FACEORIGIN_ORIENTATION property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#faceorigin_orientation
func (p *PlanePanel) SetFACEORIGIN_ORIENTATION(FACEORIGIN_ORIENTATION float64) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(FACEORIGIN_ORIENTATION)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// IsVisible returns the IsVisible property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#isvisible
func (p *PlanePanel) IsVisible(isVisible bool) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(isVisible)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetIsVisible sets the IsVisible property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#isvisible
func (p *PlanePanel) SetIsVisible(isVisible bool) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(isVisible)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// Margin returns the Margin property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#margin
func (p *PlanePanel) Margin(margin float64) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(margin)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetMargin sets the Margin property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#margin
func (p *PlanePanel) SetMargin(margin float64) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(margin)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// Mesh returns the Mesh property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#mesh
func (p *PlanePanel) Mesh(mesh *AbstractMesh) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(mesh.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetMesh sets the Mesh property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#mesh
func (p *PlanePanel) SetMesh(mesh *AbstractMesh) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(mesh.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#name
func (p *PlanePanel) Name(name string) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(name)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#name
func (p *PlanePanel) SetName(name string) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(name)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// Node returns the Node property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#node
func (p *PlanePanel) Node(node *TransformNode) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(node.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetNode sets the Node property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#node
func (p *PlanePanel) SetNode(node *TransformNode) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(node.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// OnPointerClickObservable returns the OnPointerClickObservable property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#onpointerclickobservable
func (p *PlanePanel) OnPointerClickObservable(onPointerClickObservable *Observable) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(onPointerClickObservable.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetOnPointerClickObservable sets the OnPointerClickObservable property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#onpointerclickobservable
func (p *PlanePanel) SetOnPointerClickObservable(onPointerClickObservable *Observable) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(onPointerClickObservable.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// OnPointerDownObservable returns the OnPointerDownObservable property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#onpointerdownobservable
func (p *PlanePanel) OnPointerDownObservable(onPointerDownObservable *Observable) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(onPointerDownObservable.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetOnPointerDownObservable sets the OnPointerDownObservable property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#onpointerdownobservable
func (p *PlanePanel) SetOnPointerDownObservable(onPointerDownObservable *Observable) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(onPointerDownObservable.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// OnPointerEnterObservable returns the OnPointerEnterObservable property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#onpointerenterobservable
func (p *PlanePanel) OnPointerEnterObservable(onPointerEnterObservable *Observable) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(onPointerEnterObservable.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetOnPointerEnterObservable sets the OnPointerEnterObservable property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#onpointerenterobservable
func (p *PlanePanel) SetOnPointerEnterObservable(onPointerEnterObservable *Observable) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(onPointerEnterObservable.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// OnPointerMoveObservable returns the OnPointerMoveObservable property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#onpointermoveobservable
func (p *PlanePanel) OnPointerMoveObservable(onPointerMoveObservable *Observable) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(onPointerMoveObservable.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetOnPointerMoveObservable sets the OnPointerMoveObservable property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#onpointermoveobservable
func (p *PlanePanel) SetOnPointerMoveObservable(onPointerMoveObservable *Observable) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(onPointerMoveObservable.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// OnPointerOutObservable returns the OnPointerOutObservable property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#onpointeroutobservable
func (p *PlanePanel) OnPointerOutObservable(onPointerOutObservable *Observable) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(onPointerOutObservable.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetOnPointerOutObservable sets the OnPointerOutObservable property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#onpointeroutobservable
func (p *PlanePanel) SetOnPointerOutObservable(onPointerOutObservable *Observable) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(onPointerOutObservable.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// OnPointerUpObservable returns the OnPointerUpObservable property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#onpointerupobservable
func (p *PlanePanel) OnPointerUpObservable(onPointerUpObservable *Observable) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(onPointerUpObservable.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetOnPointerUpObservable sets the OnPointerUpObservable property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#onpointerupobservable
func (p *PlanePanel) SetOnPointerUpObservable(onPointerUpObservable *Observable) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(onPointerUpObservable.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// Orientation returns the Orientation property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#orientation
func (p *PlanePanel) Orientation(orientation float64) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(orientation)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetOrientation sets the Orientation property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#orientation
func (p *PlanePanel) SetOrientation(orientation float64) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(orientation)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// Parent returns the Parent property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#parent
func (p *PlanePanel) Parent(parent *Container3D) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(parent.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetParent sets the Parent property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#parent
func (p *PlanePanel) SetParent(parent *Container3D) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(parent.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// PointerDownAnimation returns the PointerDownAnimation property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#pointerdownanimation
func (p *PlanePanel) PointerDownAnimation(pointerDownAnimation func()) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerDownAnimation(); return nil}))
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetPointerDownAnimation sets the PointerDownAnimation property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#pointerdownanimation
func (p *PlanePanel) SetPointerDownAnimation(pointerDownAnimation func()) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerDownAnimation(); return nil}))
	return PlanePanelFromJSObject(p, ba.ctx)
}

// PointerEnterAnimation returns the PointerEnterAnimation property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#pointerenteranimation
func (p *PlanePanel) PointerEnterAnimation(pointerEnterAnimation func()) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerEnterAnimation(); return nil}))
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetPointerEnterAnimation sets the PointerEnterAnimation property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#pointerenteranimation
func (p *PlanePanel) SetPointerEnterAnimation(pointerEnterAnimation func()) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerEnterAnimation(); return nil}))
	return PlanePanelFromJSObject(p, ba.ctx)
}

// PointerOutAnimation returns the PointerOutAnimation property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#pointeroutanimation
func (p *PlanePanel) PointerOutAnimation(pointerOutAnimation func()) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerOutAnimation(); return nil}))
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetPointerOutAnimation sets the PointerOutAnimation property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#pointeroutanimation
func (p *PlanePanel) SetPointerOutAnimation(pointerOutAnimation func()) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerOutAnimation(); return nil}))
	return PlanePanelFromJSObject(p, ba.ctx)
}

// PointerUpAnimation returns the PointerUpAnimation property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#pointerupanimation
func (p *PlanePanel) PointerUpAnimation(pointerUpAnimation func()) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerUpAnimation(); return nil}))
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetPointerUpAnimation sets the PointerUpAnimation property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#pointerupanimation
func (p *PlanePanel) SetPointerUpAnimation(pointerUpAnimation func()) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerUpAnimation(); return nil}))
	return PlanePanelFromJSObject(p, ba.ctx)
}

// Position returns the Position property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#position
func (p *PlanePanel) Position(position *Vector3) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(position.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetPosition sets the Position property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#position
func (p *PlanePanel) SetPosition(position *Vector3) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(position.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// Rows returns the Rows property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#rows
func (p *PlanePanel) Rows(rows int) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(rows)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetRows sets the Rows property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#rows
func (p *PlanePanel) SetRows(rows int) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(rows)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// Scaling returns the Scaling property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#scaling
func (p *PlanePanel) Scaling(scaling *Vector3) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(scaling.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetScaling sets the Scaling property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#scaling
func (p *PlanePanel) SetScaling(scaling *Vector3) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(scaling.JSObject())
	return PlanePanelFromJSObject(p, ba.ctx)
}

// TypeName returns the TypeName property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#typename
func (p *PlanePanel) TypeName(typeName string) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(typeName)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetTypeName sets the TypeName property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#typename
func (p *PlanePanel) SetTypeName(typeName string) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(typeName)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// UNSET_ORIENTATION returns the UNSET_ORIENTATION property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#unset_orientation
func (p *PlanePanel) UNSET_ORIENTATION(UNSET_ORIENTATION float64) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(UNSET_ORIENTATION)
	return PlanePanelFromJSObject(p, ba.ctx)
}

// SetUNSET_ORIENTATION sets the UNSET_ORIENTATION property of class PlanePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.planepanel#unset_orientation
func (p *PlanePanel) SetUNSET_ORIENTATION(UNSET_ORIENTATION float64) *PlanePanel {
	p := ba.ctx.Get("PlanePanel").New(UNSET_ORIENTATION)
	return PlanePanelFromJSObject(p, ba.ctx)
}

*/
