// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// UtilityLayerRenderer represents a babylon.js UtilityLayerRenderer.
// Renders a layer on top of an existing scene
type UtilityLayerRenderer struct{ p js.Value }

// JSObject returns the underlying js.Value.
func (u *UtilityLayerRenderer) JSObject() js.Value { return u.p }

// UtilityLayerRenderer returns a UtilityLayerRenderer JavaScript class.
func (ba *Babylon) UtilityLayerRenderer() *UtilityLayerRenderer {
	p := ba.ctx.Get("UtilityLayerRenderer")
	return UtilityLayerRendererFromJSObject(p)
}

// UtilityLayerRendererFromJSObject returns a wrapped UtilityLayerRenderer JavaScript class.
func UtilityLayerRendererFromJSObject(p js.Value) *UtilityLayerRenderer {
	return &UtilityLayerRenderer{p: p}
}

// NewUtilityLayerRendererOpts contains optional parameters for NewUtilityLayerRenderer.
type NewUtilityLayerRendererOpts struct {
	HandleEvents *JSBool
}

// NewUtilityLayerRenderer returns a new UtilityLayerRenderer object.
//
// https://doc.babylonjs.com/api/classes/babylon.utilitylayerrenderer
func (ba *Babylon) NewUtilityLayerRenderer(originalScene *Scene, opts *NewUtilityLayerRendererOpts) *UtilityLayerRenderer {
	if opts == nil {
		opts = &NewUtilityLayerRendererOpts{}
	}

	p := ba.ctx.Get("UtilityLayerRenderer").New(originalScene.JSObject(), opts.HandleEvents.JSObject())
	return UtilityLayerRendererFromJSObject(p)
}

// TODO: methods
