// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SmartArrayNoDuplicate represents a babylon.js SmartArrayNoDuplicate.
// Defines an GC Friendly array where the backfield array do not shrink to prevent over allocations.
// The data in this array can only be present once
type SmartArrayNoDuplicate struct{ *SmartArray }

// JSObject returns the underlying js.Value.
func (s *SmartArrayNoDuplicate) JSObject() js.Value { return s.p }

// SmartArrayNoDuplicate returns a SmartArrayNoDuplicate JavaScript class.
func (ba *Babylon) SmartArrayNoDuplicate() *SmartArrayNoDuplicate {
	p := ba.ctx.Get("SmartArrayNoDuplicate")
	return SmartArrayNoDuplicateFromJSObject(p)
}

// SmartArrayNoDuplicateFromJSObject returns a wrapped SmartArrayNoDuplicate JavaScript class.
func SmartArrayNoDuplicateFromJSObject(p js.Value) *SmartArrayNoDuplicate {
	return &SmartArrayNoDuplicate{SmartArrayFromJSObject(p)}
}

// NewSmartArrayNoDuplicate returns a new SmartArrayNoDuplicate object.
//
// https://doc.babylonjs.com/api/classes/babylon.smartarraynoduplicate
func (ba *Babylon) NewSmartArrayNoDuplicate(capacity float64) *SmartArrayNoDuplicate {
	p := ba.ctx.Get("SmartArrayNoDuplicate").New(capacity)
	return SmartArrayNoDuplicateFromJSObject(p)
}

// TODO: methods
