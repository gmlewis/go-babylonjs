// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PhysicsRadialExplosionEventData represents a babylon.js PhysicsRadialExplosionEventData.
// Interface for radial explosion event data
//
// See: https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class
type PhysicsRadialExplosionEventData struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PhysicsRadialExplosionEventData) JSObject() js.Value { return p.p }

// PhysicsRadialExplosionEventData returns a PhysicsRadialExplosionEventData JavaScript class.
func (ba *Babylon) PhysicsRadialExplosionEventData() *PhysicsRadialExplosionEventData {
	p := ba.ctx.Get("PhysicsRadialExplosionEventData")
	return PhysicsRadialExplosionEventDataFromJSObject(p, ba.ctx)
}

// PhysicsRadialExplosionEventDataFromJSObject returns a wrapped PhysicsRadialExplosionEventData JavaScript class.
func PhysicsRadialExplosionEventDataFromJSObject(p js.Value, ctx js.Value) *PhysicsRadialExplosionEventData {
	return &PhysicsRadialExplosionEventData{p: p, ctx: ctx}
}

// PhysicsRadialExplosionEventDataArrayToJSArray returns a JavaScript Array for the wrapped array.
func PhysicsRadialExplosionEventDataArrayToJSArray(array []*PhysicsRadialExplosionEventData) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Sphere returns the Sphere property of class PhysicsRadialExplosionEventData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsradialexplosioneventdata#sphere
func (p *PhysicsRadialExplosionEventData) Sphere() *Mesh {
	retVal := p.p.Get("sphere")
	return MeshFromJSObject(retVal, p.ctx)
}

// SetSphere sets the Sphere property of class PhysicsRadialExplosionEventData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsradialexplosioneventdata#sphere
func (p *PhysicsRadialExplosionEventData) SetSphere(sphere *Mesh) *PhysicsRadialExplosionEventData {
	p.p.Set("sphere", sphere.JSObject())
	return p
}
