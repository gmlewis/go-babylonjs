// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IEdgesRenderer represents a babylon.js IEdgesRenderer.
// Defines the minimum contract an Edges renderer should follow.
type IEdgesRenderer struct {
	*IDisposable
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IEdgesRenderer) JSObject() js.Value { return i.p }

// IEdgesRenderer returns a IEdgesRenderer JavaScript class.
func (ba *Babylon) IEdgesRenderer() *IEdgesRenderer {
	p := ba.ctx.Get("IEdgesRenderer")
	return IEdgesRendererFromJSObject(p, ba.ctx)
}

// IEdgesRendererFromJSObject returns a wrapped IEdgesRenderer JavaScript class.
func IEdgesRendererFromJSObject(p js.Value, ctx js.Value) *IEdgesRenderer {
	return &IEdgesRenderer{IDisposable: IDisposableFromJSObject(p, ctx), ctx: ctx}
}

// IEdgesRendererArrayToJSArray returns a JavaScript Array for the wrapped array.
func IEdgesRendererArrayToJSArray(array []*IEdgesRenderer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// IsReady calls the IsReady method on the IEdgesRenderer object.
//
// https://doc.babylonjs.com/api/classes/babylon.iedgesrenderer#isready
func (i *IEdgesRenderer) IsReady() bool {

	retVal := i.p.Call("isReady")
	return retVal.Bool()
}

// Render calls the Render method on the IEdgesRenderer object.
//
// https://doc.babylonjs.com/api/classes/babylon.iedgesrenderer#render
func (i *IEdgesRenderer) Render() {

	i.p.Call("render")
}

// IsEnabled returns the IsEnabled property of class IEdgesRenderer.
//
// https://doc.babylonjs.com/api/classes/babylon.iedgesrenderer#isenabled
func (i *IEdgesRenderer) IsEnabled() bool {
	retVal := i.p.Get("isEnabled")
	return retVal.Bool()
}

// SetIsEnabled sets the IsEnabled property of class IEdgesRenderer.
//
// https://doc.babylonjs.com/api/classes/babylon.iedgesrenderer#isenabled
func (i *IEdgesRenderer) SetIsEnabled(isEnabled bool) *IEdgesRenderer {
	i.p.Set("isEnabled", isEnabled)
	return i
}
