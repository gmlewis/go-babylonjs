// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// NodeMaterialOptimizer represents a babylon.js NodeMaterialOptimizer.
// Root class for all node material optimizers
type NodeMaterialOptimizer struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (n *NodeMaterialOptimizer) JSObject() js.Value { return n.p }

// NodeMaterialOptimizer returns a NodeMaterialOptimizer JavaScript class.
func (ba *Babylon) NodeMaterialOptimizer() *NodeMaterialOptimizer {
	p := ba.ctx.Get("NodeMaterialOptimizer")
	return NodeMaterialOptimizerFromJSObject(p, ba.ctx)
}

// NodeMaterialOptimizerFromJSObject returns a wrapped NodeMaterialOptimizer JavaScript class.
func NodeMaterialOptimizerFromJSObject(p js.Value, ctx js.Value) *NodeMaterialOptimizer {
	return &NodeMaterialOptimizer{p: p, ctx: ctx}
}

// NodeMaterialOptimizerArrayToJSArray returns a JavaScript Array for the wrapped array.
func NodeMaterialOptimizerArrayToJSArray(array []*NodeMaterialOptimizer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Optimize calls the Optimize method on the NodeMaterialOptimizer object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialoptimizer#optimize
func (n *NodeMaterialOptimizer) Optimize(vertexOutputNodes *NodeMaterialBlock, fragmentOutputNodes *NodeMaterialBlock) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, vertexOutputNodes.JSObject())
	args = append(args, fragmentOutputNodes.JSObject())

	n.p.Call("optimize", args...)
}

/*

 */
