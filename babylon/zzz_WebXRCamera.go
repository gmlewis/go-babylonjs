// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// WebXRCamera represents a babylon.js WebXRCamera.
// WebXR Camera which holds the views for the xrSession
//
// See: https://doc.babylonjs.com/how_to/webxr
type WebXRCamera struct {
	*FreeCamera
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (w *WebXRCamera) JSObject() js.Value { return w.p }

// WebXRCamera returns a WebXRCamera JavaScript class.
func (ba *Babylon) WebXRCamera() *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera")
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// WebXRCameraFromJSObject returns a wrapped WebXRCamera JavaScript class.
func WebXRCameraFromJSObject(p js.Value, ctx js.Value) *WebXRCamera {
	return &WebXRCamera{FreeCamera: FreeCameraFromJSObject(p, ctx), ctx: ctx}
}

// NewWebXRCamera returns a new WebXRCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera
func (ba *Babylon) NewWebXRCamera(name string, scene *Scene) *WebXRCamera {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("WebXRCamera").New(args...)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// WebXRCameraAttachControlOpts contains optional parameters for WebXRCamera.AttachControl.
type WebXRCameraAttachControlOpts struct {
	NoPreventDefault *bool
}

// AttachControl calls the AttachControl method on the WebXRCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#attachcontrol
func (w *WebXRCamera) AttachControl(element js.Value, opts *WebXRCameraAttachControlOpts) {
	if opts == nil {
		opts = &WebXRCameraAttachControlOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, element)

	if opts.NoPreventDefault == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoPreventDefault)
	}

	w.p.Call("attachControl", args...)
}

// DetachControl calls the DetachControl method on the WebXRCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#detachcontrol
func (w *WebXRCamera) DetachControl(element js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, element)

	w.p.Call("detachControl", args...)
}

// Dispose calls the Dispose method on the WebXRCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#dispose
func (w *WebXRCamera) Dispose() {

	args := make([]interface{}, 0, 0+0)

	w.p.Call("dispose", args...)
}

// GetClassName calls the GetClassName method on the WebXRCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#getclassname
func (w *WebXRCamera) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := w.p.Call("getClassName", args...)
	return retVal.String()
}

// GetFrontPosition calls the GetFrontPosition method on the WebXRCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#getfrontposition
func (w *WebXRCamera) GetFrontPosition(distance float64) *Vector3 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, distance)

	retVal := w.p.Call("getFrontPosition", args...)
	return Vector3FromJSObject(retVal, w.ctx)
}

// GetTarget calls the GetTarget method on the WebXRCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#gettarget
func (w *WebXRCamera) GetTarget() *Vector3 {

	args := make([]interface{}, 0, 0+0)

	retVal := w.p.Call("getTarget", args...)
	return Vector3FromJSObject(retVal, w.ctx)
}

// SetTarget calls the SetTarget method on the WebXRCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#settarget
func (w *WebXRCamera) SetTarget(target *Vector3) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, target.JSObject())

	w.p.Call("setTarget", args...)
}

// StoreState calls the StoreState method on the WebXRCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#storestate
func (w *WebXRCamera) StoreState() *Camera {

	args := make([]interface{}, 0, 0+0)

	retVal := w.p.Call("storeState", args...)
	return CameraFromJSObject(retVal, w.ctx)
}

// UpdateFromXRSessionManager calls the UpdateFromXRSessionManager method on the WebXRCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#updatefromxrsessionmanager
func (w *WebXRCamera) UpdateFromXRSessionManager(xrSessionManager *WebXRSessionManager) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, xrSessionManager.JSObject())

	retVal := w.p.Call("updateFromXRSessionManager", args...)
	return retVal.Bool()
}

/*

// AngularSensibility returns the AngularSensibility property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#angularsensibility
func (w *WebXRCamera) AngularSensibility(angularSensibility float64) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(angularSensibility)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetAngularSensibility sets the AngularSensibility property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#angularsensibility
func (w *WebXRCamera) SetAngularSensibility(angularSensibility float64) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(angularSensibility)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// ApplyGravity returns the ApplyGravity property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#applygravity
func (w *WebXRCamera) ApplyGravity(applyGravity bool) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(applyGravity)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetApplyGravity sets the ApplyGravity property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#applygravity
func (w *WebXRCamera) SetApplyGravity(applyGravity bool) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(applyGravity)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// CameraDirection returns the CameraDirection property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#cameradirection
func (w *WebXRCamera) CameraDirection(cameraDirection *Vector3) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(cameraDirection.JSObject())
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetCameraDirection sets the CameraDirection property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#cameradirection
func (w *WebXRCamera) SetCameraDirection(cameraDirection *Vector3) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(cameraDirection.JSObject())
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// CameraRotation returns the CameraRotation property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#camerarotation
func (w *WebXRCamera) CameraRotation(cameraRotation *Vector2) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(cameraRotation.JSObject())
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetCameraRotation sets the CameraRotation property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#camerarotation
func (w *WebXRCamera) SetCameraRotation(cameraRotation *Vector2) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(cameraRotation.JSObject())
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// CheckCollisions returns the CheckCollisions property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#checkcollisions
func (w *WebXRCamera) CheckCollisions(checkCollisions bool) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(checkCollisions)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetCheckCollisions sets the CheckCollisions property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#checkcollisions
func (w *WebXRCamera) SetCheckCollisions(checkCollisions bool) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(checkCollisions)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// CollisionMask returns the CollisionMask property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#collisionmask
func (w *WebXRCamera) CollisionMask(collisionMask float64) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(collisionMask)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetCollisionMask sets the CollisionMask property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#collisionmask
func (w *WebXRCamera) SetCollisionMask(collisionMask float64) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(collisionMask)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// DebugMode returns the DebugMode property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#debugmode
func (w *WebXRCamera) DebugMode(debugMode bool) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(debugMode)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetDebugMode sets the DebugMode property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#debugmode
func (w *WebXRCamera) SetDebugMode(debugMode bool) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(debugMode)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// Ellipsoid returns the Ellipsoid property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#ellipsoid
func (w *WebXRCamera) Ellipsoid(ellipsoid *Vector3) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(ellipsoid.JSObject())
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetEllipsoid sets the Ellipsoid property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#ellipsoid
func (w *WebXRCamera) SetEllipsoid(ellipsoid *Vector3) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(ellipsoid.JSObject())
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// EllipsoidOffset returns the EllipsoidOffset property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#ellipsoidoffset
func (w *WebXRCamera) EllipsoidOffset(ellipsoidOffset *Vector3) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(ellipsoidOffset.JSObject())
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetEllipsoidOffset sets the EllipsoidOffset property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#ellipsoidoffset
func (w *WebXRCamera) SetEllipsoidOffset(ellipsoidOffset *Vector3) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(ellipsoidOffset.JSObject())
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#inputs
func (w *WebXRCamera) Inputs(inputs *FreeCameraInputsManager) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(inputs.JSObject())
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#inputs
func (w *WebXRCamera) SetInputs(inputs *FreeCameraInputsManager) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(inputs.JSObject())
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// KeysDown returns the KeysDown property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#keysdown
func (w *WebXRCamera) KeysDown(keysDown float64) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(keysDown)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetKeysDown sets the KeysDown property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#keysdown
func (w *WebXRCamera) SetKeysDown(keysDown float64) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(keysDown)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// KeysLeft returns the KeysLeft property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#keysleft
func (w *WebXRCamera) KeysLeft(keysLeft float64) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(keysLeft)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetKeysLeft sets the KeysLeft property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#keysleft
func (w *WebXRCamera) SetKeysLeft(keysLeft float64) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(keysLeft)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// KeysRight returns the KeysRight property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#keysright
func (w *WebXRCamera) KeysRight(keysRight float64) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(keysRight)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetKeysRight sets the KeysRight property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#keysright
func (w *WebXRCamera) SetKeysRight(keysRight float64) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(keysRight)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// KeysUp returns the KeysUp property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#keysup
func (w *WebXRCamera) KeysUp(keysUp float64) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(keysUp)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetKeysUp sets the KeysUp property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#keysup
func (w *WebXRCamera) SetKeysUp(keysUp float64) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(keysUp)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// LockedTarget returns the LockedTarget property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#lockedtarget
func (w *WebXRCamera) LockedTarget(lockedTarget interface{}) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(lockedTarget)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetLockedTarget sets the LockedTarget property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#lockedtarget
func (w *WebXRCamera) SetLockedTarget(lockedTarget interface{}) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(lockedTarget)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// NoRotationConstraint returns the NoRotationConstraint property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#norotationconstraint
func (w *WebXRCamera) NoRotationConstraint(noRotationConstraint bool) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(noRotationConstraint)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetNoRotationConstraint sets the NoRotationConstraint property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#norotationconstraint
func (w *WebXRCamera) SetNoRotationConstraint(noRotationConstraint bool) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(noRotationConstraint)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// OnCollide returns the OnCollide property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#oncollide
func (w *WebXRCamera) OnCollide(onCollide func()) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(onCollide)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetOnCollide sets the OnCollide property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#oncollide
func (w *WebXRCamera) SetOnCollide(onCollide func()) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(onCollide)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// Rotation returns the Rotation property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#rotation
func (w *WebXRCamera) Rotation(rotation *Vector3) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(rotation.JSObject())
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetRotation sets the Rotation property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#rotation
func (w *WebXRCamera) SetRotation(rotation *Vector3) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(rotation.JSObject())
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// RotationQuaternion returns the RotationQuaternion property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#rotationquaternion
func (w *WebXRCamera) RotationQuaternion(rotationQuaternion *Quaternion) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(rotationQuaternion.JSObject())
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetRotationQuaternion sets the RotationQuaternion property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#rotationquaternion
func (w *WebXRCamera) SetRotationQuaternion(rotationQuaternion *Quaternion) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(rotationQuaternion.JSObject())
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// Speed returns the Speed property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#speed
func (w *WebXRCamera) Speed(speed float64) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(speed)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetSpeed sets the Speed property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#speed
func (w *WebXRCamera) SetSpeed(speed float64) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(speed)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// UpdateUpVectorFromRotation returns the UpdateUpVectorFromRotation property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#updateupvectorfromrotation
func (w *WebXRCamera) UpdateUpVectorFromRotation(updateUpVectorFromRotation bool) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(updateUpVectorFromRotation)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

// SetUpdateUpVectorFromRotation sets the UpdateUpVectorFromRotation property of class WebXRCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcamera#updateupvectorfromrotation
func (w *WebXRCamera) SetUpdateUpVectorFromRotation(updateUpVectorFromRotation bool) *WebXRCamera {
	p := ba.ctx.Get("WebXRCamera").New(updateUpVectorFromRotation)
	return WebXRCameraFromJSObject(p, ba.ctx)
}

*/
