// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PhysicsGravitationalFieldEventData represents a babylon.js PhysicsGravitationalFieldEventData.
// Interface for gravitational field event data
//
// See: https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class
type PhysicsGravitationalFieldEventData struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PhysicsGravitationalFieldEventData) JSObject() js.Value { return p.p }

// PhysicsGravitationalFieldEventData returns a PhysicsGravitationalFieldEventData JavaScript class.
func (ba *Babylon) PhysicsGravitationalFieldEventData() *PhysicsGravitationalFieldEventData {
	p := ba.ctx.Get("PhysicsGravitationalFieldEventData")
	return PhysicsGravitationalFieldEventDataFromJSObject(p, ba.ctx)
}

// PhysicsGravitationalFieldEventDataFromJSObject returns a wrapped PhysicsGravitationalFieldEventData JavaScript class.
func PhysicsGravitationalFieldEventDataFromJSObject(p js.Value, ctx js.Value) *PhysicsGravitationalFieldEventData {
	return &PhysicsGravitationalFieldEventData{p: p, ctx: ctx}
}

// PhysicsGravitationalFieldEventDataArrayToJSArray returns a JavaScript Array for the wrapped array.
func PhysicsGravitationalFieldEventDataArrayToJSArray(array []*PhysicsGravitationalFieldEventData) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Sphere returns the Sphere property of class PhysicsGravitationalFieldEventData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsgravitationalfieldeventdata#sphere
func (p *PhysicsGravitationalFieldEventData) Sphere() *Mesh {
	retVal := p.p.Get("sphere")
	return MeshFromJSObject(retVal, p.ctx)
}

// SetSphere sets the Sphere property of class PhysicsGravitationalFieldEventData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsgravitationalfieldeventdata#sphere
func (p *PhysicsGravitationalFieldEventData) SetSphere(sphere *Mesh) *PhysicsGravitationalFieldEventData {
	p.p.Set("sphere", sphere.JSObject())
	return p
}
