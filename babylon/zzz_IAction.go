// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IAction represents a babylon.js IAction.
// Interface used to define Action
type IAction struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IAction) JSObject() js.Value { return i.p }

// IAction returns a IAction JavaScript class.
func (ba *Babylon) IAction() *IAction {
	p := ba.ctx.Get("IAction")
	return IActionFromJSObject(p, ba.ctx)
}

// IActionFromJSObject returns a wrapped IAction JavaScript class.
func IActionFromJSObject(p js.Value, ctx js.Value) *IAction {
	return &IAction{p: p, ctx: ctx}
}

// IActionArrayToJSArray returns a JavaScript Array for the wrapped array.
func IActionArrayToJSArray(array []*IAction) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// GetTriggerParameter calls the GetTriggerParameter method on the IAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.iaction#gettriggerparameter
func (i *IAction) GetTriggerParameter() interface{} {

	retVal := i.p.Call("getTriggerParameter")
	return retVal
}

// Serialize calls the Serialize method on the IAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.iaction#serialize
func (i *IAction) Serialize(parent interface{}) interface{} {

	args := make([]interface{}, 0, 1+0)

	args = append(args, parent)

	retVal := i.p.Call("serialize", args...)
	return retVal
}

// Then calls the Then method on the IAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.iaction#then
func (i *IAction) Then(action *IAction) *IAction {

	args := make([]interface{}, 0, 1+0)

	args = append(args, action.JSObject())

	retVal := i.p.Call("then", args...)
	return IActionFromJSObject(retVal, i.ctx)
}

/*

// Trigger returns the Trigger property of class IAction.
//
// https://doc.babylonjs.com/api/classes/babylon.iaction#trigger
func (i *IAction) Trigger(trigger float64) *IAction {
	p := ba.ctx.Get("IAction").New(trigger)
	return IActionFromJSObject(p, ba.ctx)
}

// SetTrigger sets the Trigger property of class IAction.
//
// https://doc.babylonjs.com/api/classes/babylon.iaction#trigger
func (i *IAction) SetTrigger(trigger float64) *IAction {
	p := ba.ctx.Get("IAction").New(trigger)
	return IActionFromJSObject(p, ba.ctx)
}

// TriggerOptions returns the TriggerOptions property of class IAction.
//
// https://doc.babylonjs.com/api/classes/babylon.iaction#triggeroptions
func (i *IAction) TriggerOptions(triggerOptions interface{}) *IAction {
	p := ba.ctx.Get("IAction").New(triggerOptions)
	return IActionFromJSObject(p, ba.ctx)
}

// SetTriggerOptions sets the TriggerOptions property of class IAction.
//
// https://doc.babylonjs.com/api/classes/babylon.iaction#triggeroptions
func (i *IAction) SetTriggerOptions(triggerOptions interface{}) *IAction {
	p := ba.ctx.Get("IAction").New(triggerOptions)
	return IActionFromJSObject(p, ba.ctx)
}

*/
