// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// WebXRControllerModelLoader represents a babylon.js WebXRControllerModelLoader.
// Loads a controller model and adds it as a child of the WebXRControllers grip when the controller is created
type WebXRControllerModelLoader struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (w *WebXRControllerModelLoader) JSObject() js.Value { return w.p }

// WebXRControllerModelLoader returns a WebXRControllerModelLoader JavaScript class.
func (ba *Babylon) WebXRControllerModelLoader() *WebXRControllerModelLoader {
	p := ba.ctx.Get("WebXRControllerModelLoader")
	return WebXRControllerModelLoaderFromJSObject(p, ba.ctx)
}

// WebXRControllerModelLoaderFromJSObject returns a wrapped WebXRControllerModelLoader JavaScript class.
func WebXRControllerModelLoaderFromJSObject(p js.Value, ctx js.Value) *WebXRControllerModelLoader {
	return &WebXRControllerModelLoader{p: p, ctx: ctx}
}

// WebXRControllerModelLoaderArrayToJSArray returns a JavaScript Array for the wrapped array.
func WebXRControllerModelLoaderArrayToJSArray(array []*WebXRControllerModelLoader) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewWebXRControllerModelLoader returns a new WebXRControllerModelLoader object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcontrollermodelloader
func (ba *Babylon) NewWebXRControllerModelLoader(input *WebXRInput) *WebXRControllerModelLoader {

	args := make([]interface{}, 0, 1+0)

	args = append(args, input.JSObject())

	p := ba.ctx.Get("WebXRControllerModelLoader").New(args...)
	return WebXRControllerModelLoaderFromJSObject(p, ba.ctx)
}

// OnControllerModelLoaded returns the OnControllerModelLoaded property of class WebXRControllerModelLoader.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcontrollermodelloader#oncontrollermodelloaded
func (w *WebXRControllerModelLoader) OnControllerModelLoaded() *Observable {
	retVal := w.p.Get("onControllerModelLoaded")
	return ObservableFromJSObject(retVal, w.ctx)
}

// SetOnControllerModelLoaded sets the OnControllerModelLoaded property of class WebXRControllerModelLoader.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrcontrollermodelloader#oncontrollermodelloaded
func (w *WebXRControllerModelLoader) SetOnControllerModelLoaded(onControllerModelLoaded *Observable) *WebXRControllerModelLoader {
	w.p.Set("onControllerModelLoaded", onControllerModelLoaded.JSObject())
	return w
}
