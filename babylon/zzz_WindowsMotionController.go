// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// WindowsMotionController represents a babylon.js WindowsMotionController.
// Defines the WindowsMotionController object that the state of the windows motion controller
type WindowsMotionController struct {
	*WebVRController
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (w *WindowsMotionController) JSObject() js.Value { return w.p }

// WindowsMotionController returns a WindowsMotionController JavaScript class.
func (ba *Babylon) WindowsMotionController() *WindowsMotionController {
	p := ba.ctx.Get("WindowsMotionController")
	return WindowsMotionControllerFromJSObject(p, ba.ctx)
}

// WindowsMotionControllerFromJSObject returns a wrapped WindowsMotionController JavaScript class.
func WindowsMotionControllerFromJSObject(p js.Value, ctx js.Value) *WindowsMotionController {
	return &WindowsMotionController{WebVRController: WebVRControllerFromJSObject(p, ctx), ctx: ctx}
}

// WindowsMotionControllerArrayToJSArray returns a JavaScript Array for the wrapped array.
func WindowsMotionControllerArrayToJSArray(array []*WindowsMotionController) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewWindowsMotionController returns a new WindowsMotionController object.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller
func (ba *Babylon) NewWindowsMotionController(vrGamepad interface{}) *WindowsMotionController {

	args := make([]interface{}, 0, 1+0)

	args = append(args, vrGamepad)

	p := ba.ctx.Get("WindowsMotionController").New(args...)
	return WindowsMotionControllerFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the WindowsMotionController object.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#dispose
func (w *WindowsMotionController) Dispose() {

	w.p.Call("dispose")
}

// WindowsMotionControllerGetForwardRayOpts contains optional parameters for WindowsMotionController.GetForwardRay.
type WindowsMotionControllerGetForwardRayOpts struct {
	Length *float64
}

// GetForwardRay calls the GetForwardRay method on the WindowsMotionController object.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#getforwardray
func (w *WindowsMotionController) GetForwardRay(opts *WindowsMotionControllerGetForwardRayOpts) *Ray {
	if opts == nil {
		opts = &WindowsMotionControllerGetForwardRayOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Length == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Length)
	}

	retVal := w.p.Call("getForwardRay", args...)
	return RayFromJSObject(retVal, w.ctx)
}

// WindowsMotionControllerInitControllerMeshOpts contains optional parameters for WindowsMotionController.InitControllerMesh.
type WindowsMotionControllerInitControllerMeshOpts struct {
	MeshLoaded   func()
	ForceDefault *bool
}

// InitControllerMesh calls the InitControllerMesh method on the WindowsMotionController object.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#initcontrollermesh
func (w *WindowsMotionController) InitControllerMesh(scene *Scene, opts *WindowsMotionControllerInitControllerMeshOpts) {
	if opts == nil {
		opts = &WindowsMotionControllerInitControllerMeshOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, scene.JSObject())

	if opts.MeshLoaded == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { opts.MeshLoaded(); return nil }) /* never freed! */)
	}
	if opts.ForceDefault == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDefault)
	}

	w.p.Call("initControllerMesh", args...)
}

// Update calls the Update method on the WindowsMotionController object.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#update
func (w *WindowsMotionController) Update() {

	w.p.Call("update")
}

// GAMEPAD_ID_PREFIX returns the GAMEPAD_ID_PREFIX property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#gamepad_id_prefix
func (w *WindowsMotionController) GAMEPAD_ID_PREFIX() string {
	retVal := w.p.Get("GAMEPAD_ID_PREFIX")
	return retVal.String()
}

// SetGAMEPAD_ID_PREFIX sets the GAMEPAD_ID_PREFIX property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#gamepad_id_prefix
func (w *WindowsMotionController) SetGAMEPAD_ID_PREFIX(GAMEPAD_ID_PREFIX string) *WindowsMotionController {
	w.p.Set("GAMEPAD_ID_PREFIX", GAMEPAD_ID_PREFIX)
	return w
}

// MODEL_BASE_URL returns the MODEL_BASE_URL property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#model_base_url
func (w *WindowsMotionController) MODEL_BASE_URL() string {
	retVal := w.p.Get("MODEL_BASE_URL")
	return retVal.String()
}

// SetMODEL_BASE_URL sets the MODEL_BASE_URL property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#model_base_url
func (w *WindowsMotionController) SetMODEL_BASE_URL(MODEL_BASE_URL string) *WindowsMotionController {
	w.p.Set("MODEL_BASE_URL", MODEL_BASE_URL)
	return w
}

// MODEL_LEFT_FILENAME returns the MODEL_LEFT_FILENAME property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#model_left_filename
func (w *WindowsMotionController) MODEL_LEFT_FILENAME() string {
	retVal := w.p.Get("MODEL_LEFT_FILENAME")
	return retVal.String()
}

// SetMODEL_LEFT_FILENAME sets the MODEL_LEFT_FILENAME property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#model_left_filename
func (w *WindowsMotionController) SetMODEL_LEFT_FILENAME(MODEL_LEFT_FILENAME string) *WindowsMotionController {
	w.p.Set("MODEL_LEFT_FILENAME", MODEL_LEFT_FILENAME)
	return w
}

// MODEL_RIGHT_FILENAME returns the MODEL_RIGHT_FILENAME property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#model_right_filename
func (w *WindowsMotionController) MODEL_RIGHT_FILENAME() string {
	retVal := w.p.Get("MODEL_RIGHT_FILENAME")
	return retVal.String()
}

// SetMODEL_RIGHT_FILENAME sets the MODEL_RIGHT_FILENAME property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#model_right_filename
func (w *WindowsMotionController) SetMODEL_RIGHT_FILENAME(MODEL_RIGHT_FILENAME string) *WindowsMotionController {
	w.p.Set("MODEL_RIGHT_FILENAME", MODEL_RIGHT_FILENAME)
	return w
}

// OnGripButtonStateChangedObservable returns the OnGripButtonStateChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#ongripbuttonstatechangedobservable
func (w *WindowsMotionController) OnGripButtonStateChangedObservable() *Observable {
	retVal := w.p.Get("onGripButtonStateChangedObservable")
	return ObservableFromJSObject(retVal, w.ctx)
}

// SetOnGripButtonStateChangedObservable sets the OnGripButtonStateChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#ongripbuttonstatechangedobservable
func (w *WindowsMotionController) SetOnGripButtonStateChangedObservable(onGripButtonStateChangedObservable *Observable) *WindowsMotionController {
	w.p.Set("onGripButtonStateChangedObservable", onGripButtonStateChangedObservable.JSObject())
	return w
}

// OnMenuButtonStateChangedObservable returns the OnMenuButtonStateChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#onmenubuttonstatechangedobservable
func (w *WindowsMotionController) OnMenuButtonStateChangedObservable() *Observable {
	retVal := w.p.Get("onMenuButtonStateChangedObservable")
	return ObservableFromJSObject(retVal, w.ctx)
}

// SetOnMenuButtonStateChangedObservable sets the OnMenuButtonStateChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#onmenubuttonstatechangedobservable
func (w *WindowsMotionController) SetOnMenuButtonStateChangedObservable(onMenuButtonStateChangedObservable *Observable) *WindowsMotionController {
	w.p.Set("onMenuButtonStateChangedObservable", onMenuButtonStateChangedObservable.JSObject())
	return w
}

// OnThumbstickButtonStateChangedObservable returns the OnThumbstickButtonStateChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#onthumbstickbuttonstatechangedobservable
func (w *WindowsMotionController) OnThumbstickButtonStateChangedObservable() *Observable {
	retVal := w.p.Get("onThumbstickButtonStateChangedObservable")
	return ObservableFromJSObject(retVal, w.ctx)
}

// SetOnThumbstickButtonStateChangedObservable sets the OnThumbstickButtonStateChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#onthumbstickbuttonstatechangedobservable
func (w *WindowsMotionController) SetOnThumbstickButtonStateChangedObservable(onThumbstickButtonStateChangedObservable *Observable) *WindowsMotionController {
	w.p.Set("onThumbstickButtonStateChangedObservable", onThumbstickButtonStateChangedObservable.JSObject())
	return w
}

// OnTouchpadButtonStateChangedObservable returns the OnTouchpadButtonStateChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#ontouchpadbuttonstatechangedobservable
func (w *WindowsMotionController) OnTouchpadButtonStateChangedObservable() *Observable {
	retVal := w.p.Get("onTouchpadButtonStateChangedObservable")
	return ObservableFromJSObject(retVal, w.ctx)
}

// SetOnTouchpadButtonStateChangedObservable sets the OnTouchpadButtonStateChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#ontouchpadbuttonstatechangedobservable
func (w *WindowsMotionController) SetOnTouchpadButtonStateChangedObservable(onTouchpadButtonStateChangedObservable *Observable) *WindowsMotionController {
	w.p.Set("onTouchpadButtonStateChangedObservable", onTouchpadButtonStateChangedObservable.JSObject())
	return w
}

// OnTouchpadValuesChangedObservable returns the OnTouchpadValuesChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#ontouchpadvalueschangedobservable
func (w *WindowsMotionController) OnTouchpadValuesChangedObservable() *Observable {
	retVal := w.p.Get("onTouchpadValuesChangedObservable")
	return ObservableFromJSObject(retVal, w.ctx)
}

// SetOnTouchpadValuesChangedObservable sets the OnTouchpadValuesChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#ontouchpadvalueschangedobservable
func (w *WindowsMotionController) SetOnTouchpadValuesChangedObservable(onTouchpadValuesChangedObservable *Observable) *WindowsMotionController {
	w.p.Set("onTouchpadValuesChangedObservable", onTouchpadValuesChangedObservable.JSObject())
	return w
}

// OnTrackpadChangedObservable returns the OnTrackpadChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#ontrackpadchangedobservable
func (w *WindowsMotionController) OnTrackpadChangedObservable() *Observable {
	retVal := w.p.Get("onTrackpadChangedObservable")
	return ObservableFromJSObject(retVal, w.ctx)
}

// SetOnTrackpadChangedObservable sets the OnTrackpadChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#ontrackpadchangedobservable
func (w *WindowsMotionController) SetOnTrackpadChangedObservable(onTrackpadChangedObservable *Observable) *WindowsMotionController {
	w.p.Set("onTrackpadChangedObservable", onTrackpadChangedObservable.JSObject())
	return w
}

// OnTrackpadValuesChangedObservable returns the OnTrackpadValuesChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#ontrackpadvalueschangedobservable
func (w *WindowsMotionController) OnTrackpadValuesChangedObservable() *Observable {
	retVal := w.p.Get("onTrackpadValuesChangedObservable")
	return ObservableFromJSObject(retVal, w.ctx)
}

// SetOnTrackpadValuesChangedObservable sets the OnTrackpadValuesChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#ontrackpadvalueschangedobservable
func (w *WindowsMotionController) SetOnTrackpadValuesChangedObservable(onTrackpadValuesChangedObservable *Observable) *WindowsMotionController {
	w.p.Set("onTrackpadValuesChangedObservable", onTrackpadValuesChangedObservable.JSObject())
	return w
}

// OnTriggerButtonStateChangedObservable returns the OnTriggerButtonStateChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#ontriggerbuttonstatechangedobservable
func (w *WindowsMotionController) OnTriggerButtonStateChangedObservable() *Observable {
	retVal := w.p.Get("onTriggerButtonStateChangedObservable")
	return ObservableFromJSObject(retVal, w.ctx)
}

// SetOnTriggerButtonStateChangedObservable sets the OnTriggerButtonStateChangedObservable property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#ontriggerbuttonstatechangedobservable
func (w *WindowsMotionController) SetOnTriggerButtonStateChangedObservable(onTriggerButtonStateChangedObservable *Observable) *WindowsMotionController {
	w.p.Set("onTriggerButtonStateChangedObservable", onTriggerButtonStateChangedObservable.JSObject())
	return w
}

// Trackpad returns the Trackpad property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#trackpad
func (w *WindowsMotionController) Trackpad() *StickValues {
	retVal := w.p.Get("trackpad")
	return StickValuesFromJSObject(retVal, w.ctx)
}

// SetTrackpad sets the Trackpad property of class WindowsMotionController.
//
// https://doc.babylonjs.com/api/classes/babylon.windowsmotioncontroller#trackpad
func (w *WindowsMotionController) SetTrackpad(trackpad *StickValues) *WindowsMotionController {
	w.p.Set("trackpad", trackpad.JSObject())
	return w
}
