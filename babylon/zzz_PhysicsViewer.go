// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PhysicsViewer represents a babylon.js PhysicsViewer.
// Used to show the physics impostor around the specific mesh
type PhysicsViewer struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PhysicsViewer) JSObject() js.Value { return p.p }

// PhysicsViewer returns a PhysicsViewer JavaScript class.
func (ba *Babylon) PhysicsViewer() *PhysicsViewer {
	p := ba.ctx.Get("PhysicsViewer")
	return PhysicsViewerFromJSObject(p, ba.ctx)
}

// PhysicsViewerFromJSObject returns a wrapped PhysicsViewer JavaScript class.
func PhysicsViewerFromJSObject(p js.Value, ctx js.Value) *PhysicsViewer {
	return &PhysicsViewer{p: p, ctx: ctx}
}

// PhysicsViewerArrayToJSArray returns a JavaScript Array for the wrapped array.
func PhysicsViewerArrayToJSArray(array []*PhysicsViewer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPhysicsViewer returns a new PhysicsViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsviewer
func (ba *Babylon) NewPhysicsViewer(scene *Scene) *PhysicsViewer {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scene.JSObject())

	p := ba.ctx.Get("PhysicsViewer").New(args...)
	return PhysicsViewerFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the PhysicsViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsviewer#dispose
func (p *PhysicsViewer) Dispose() {

	p.p.Call("dispose")
}

// HideImpostor calls the HideImpostor method on the PhysicsViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsviewer#hideimpostor
func (p *PhysicsViewer) HideImpostor(impostor *PhysicsImpostor) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, impostor.JSObject())

	p.p.Call("hideImpostor", args...)
}

// PhysicsViewerShowImpostorOpts contains optional parameters for PhysicsViewer.ShowImpostor.
type PhysicsViewerShowImpostorOpts struct {
	TargetMesh *Mesh
}

// ShowImpostor calls the ShowImpostor method on the PhysicsViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsviewer#showimpostor
func (p *PhysicsViewer) ShowImpostor(impostor *PhysicsImpostor, opts *PhysicsViewerShowImpostorOpts) *AbstractMesh {
	if opts == nil {
		opts = &PhysicsViewerShowImpostorOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, impostor.JSObject())

	if opts.TargetMesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.TargetMesh.JSObject())
	}

	retVal := p.p.Call("showImpostor", args...)
	return AbstractMeshFromJSObject(retVal, p.ctx)
}

/*

 */
