// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RandomNumberBlock represents a babylon.js RandomNumberBlock.
// Block used to get a random number
type RandomNumberBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RandomNumberBlock) JSObject() js.Value { return r.p }

// RandomNumberBlock returns a RandomNumberBlock JavaScript class.
func (ba *Babylon) RandomNumberBlock() *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock")
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// RandomNumberBlockFromJSObject returns a wrapped RandomNumberBlock JavaScript class.
func RandomNumberBlockFromJSObject(p js.Value, ctx js.Value) *RandomNumberBlock {
	return &RandomNumberBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// RandomNumberBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func RandomNumberBlockArrayToJSArray(array []*RandomNumberBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewRandomNumberBlock returns a new RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock
func (ba *Babylon) NewRandomNumberBlock(name string) *RandomNumberBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("RandomNumberBlock").New(args...)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#autoconfigure
func (r *RandomNumberBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	r.p.Call("autoConfigure", args...)
}

// RandomNumberBlockBindOpts contains optional parameters for RandomNumberBlock.Bind.
type RandomNumberBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#bind
func (r *RandomNumberBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *RandomNumberBlockBindOpts) {
	if opts == nil {
		opts = &RandomNumberBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	r.p.Call("bind", args...)
}

// Build calls the Build method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#build
func (r *RandomNumberBlock) Build(state *NodeMaterialBuildState, activeBlocks *NodeMaterialBlock) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, state.JSObject())
	args = append(args, activeBlocks.JSObject())

	retVal := r.p.Call("build", args...)
	return retVal.Bool()
}

// RandomNumberBlockCloneOpts contains optional parameters for RandomNumberBlock.Clone.
type RandomNumberBlockCloneOpts struct {
	RootUrl *string
}

// Clone calls the Clone method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#clone
func (r *RandomNumberBlock) Clone(scene *Scene, opts *RandomNumberBlockCloneOpts) *NodeMaterialBlock {
	if opts == nil {
		opts = &RandomNumberBlockCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := r.p.Call("clone", args...)
	return NodeMaterialBlockFromJSObject(retVal, r.ctx)
}

// RandomNumberBlockConnectToOpts contains optional parameters for RandomNumberBlock.ConnectTo.
type RandomNumberBlockConnectToOpts struct {
	Options map[string]interface{}
}

// ConnectTo calls the ConnectTo method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#connectto
func (r *RandomNumberBlock) ConnectTo(other *NodeMaterialBlock, opts *RandomNumberBlockConnectToOpts) *RandomNumberBlock {
	if opts == nil {
		opts = &RandomNumberBlockConnectToOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, other.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := r.p.Call("connectTo", args...)
	return RandomNumberBlockFromJSObject(retVal, r.ctx)
}

// Dispose calls the Dispose method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#dispose
func (r *RandomNumberBlock) Dispose() {

	r.p.Call("dispose")
}

// GetClassName calls the GetClassName method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#getclassname
func (r *RandomNumberBlock) GetClassName() string {

	retVal := r.p.Call("getClassName")
	return retVal.String()
}

// RandomNumberBlockGetFirstAvailableInputOpts contains optional parameters for RandomNumberBlock.GetFirstAvailableInput.
type RandomNumberBlockGetFirstAvailableInputOpts struct {
	ForOutput *NodeMaterialConnectionPoint
}

// GetFirstAvailableInput calls the GetFirstAvailableInput method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#getfirstavailableinput
func (r *RandomNumberBlock) GetFirstAvailableInput(opts *RandomNumberBlockGetFirstAvailableInputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &RandomNumberBlockGetFirstAvailableInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForOutput == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForOutput.JSObject())
	}

	retVal := r.p.Call("getFirstAvailableInput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// RandomNumberBlockGetFirstAvailableOutputOpts contains optional parameters for RandomNumberBlock.GetFirstAvailableOutput.
type RandomNumberBlockGetFirstAvailableOutputOpts struct {
	ForBlock *NodeMaterialBlock
}

// GetFirstAvailableOutput calls the GetFirstAvailableOutput method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#getfirstavailableoutput
func (r *RandomNumberBlock) GetFirstAvailableOutput(opts *RandomNumberBlockGetFirstAvailableOutputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &RandomNumberBlockGetFirstAvailableOutputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForBlock == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForBlock.JSObject())
	}

	retVal := r.p.Call("getFirstAvailableOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// GetInputByName calls the GetInputByName method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#getinputbyname
func (r *RandomNumberBlock) GetInputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := r.p.Call("getInputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// GetOutputByName calls the GetOutputByName method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#getoutputbyname
func (r *RandomNumberBlock) GetOutputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := r.p.Call("getOutputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// GetSiblingOutput calls the GetSiblingOutput method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#getsiblingoutput
func (r *RandomNumberBlock) GetSiblingOutput(current *NodeMaterialConnectionPoint) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, current.JSObject())

	retVal := r.p.Call("getSiblingOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// Initialize calls the Initialize method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#initialize
func (r *RandomNumberBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	r.p.Call("initialize", args...)
}

// RandomNumberBlockInitializeDefinesOpts contains optional parameters for RandomNumberBlock.InitializeDefines.
type RandomNumberBlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#initializedefines
func (r *RandomNumberBlock) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *RandomNumberBlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &RandomNumberBlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	r.p.Call("initializeDefines", args...)
}

// RandomNumberBlockIsReadyOpts contains optional parameters for RandomNumberBlock.IsReady.
type RandomNumberBlockIsReadyOpts struct {
	UseInstances *bool
}

// IsReady calls the IsReady method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#isready
func (r *RandomNumberBlock) IsReady(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *RandomNumberBlockIsReadyOpts) bool {
	if opts == nil {
		opts = &RandomNumberBlockIsReadyOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := r.p.Call("isReady", args...)
	return retVal.Bool()
}

// RandomNumberBlockPrepareDefinesOpts contains optional parameters for RandomNumberBlock.PrepareDefines.
type RandomNumberBlockPrepareDefinesOpts struct {
	UseInstances *bool
}

// PrepareDefines calls the PrepareDefines method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#preparedefines
func (r *RandomNumberBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *RandomNumberBlockPrepareDefinesOpts) {
	if opts == nil {
		opts = &RandomNumberBlockPrepareDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	r.p.Call("prepareDefines", args...)
}

// ProvideFallbacks calls the ProvideFallbacks method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#providefallbacks
func (r *RandomNumberBlock) ProvideFallbacks(mesh *AbstractMesh, fallbacks *EffectFallbacks) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, fallbacks.JSObject())

	r.p.Call("provideFallbacks", args...)
}

// RandomNumberBlockRegisterInputOpts contains optional parameters for RandomNumberBlock.RegisterInput.
type RandomNumberBlockRegisterInputOpts struct {
	IsOptional *bool
	Target     js.Value
}

// RegisterInput calls the RegisterInput method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#registerinput
func (r *RandomNumberBlock) RegisterInput(name string, jsType js.Value, opts *RandomNumberBlockRegisterInputOpts) *RandomNumberBlock {
	if opts == nil {
		opts = &RandomNumberBlockRegisterInputOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, jsType)

	if opts.IsOptional == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsOptional)
	}
	args = append(args, opts.Target)

	retVal := r.p.Call("registerInput", args...)
	return RandomNumberBlockFromJSObject(retVal, r.ctx)
}

// RandomNumberBlockRegisterOutputOpts contains optional parameters for RandomNumberBlock.RegisterOutput.
type RandomNumberBlockRegisterOutputOpts struct {
	Target js.Value
}

// RegisterOutput calls the RegisterOutput method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#registeroutput
func (r *RandomNumberBlock) RegisterOutput(name string, jsType js.Value, opts *RandomNumberBlockRegisterOutputOpts) *RandomNumberBlock {
	if opts == nil {
		opts = &RandomNumberBlockRegisterOutputOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, jsType)

	args = append(args, opts.Target)

	retVal := r.p.Call("registerOutput", args...)
	return RandomNumberBlockFromJSObject(retVal, r.ctx)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#replacerepeatablecontent
func (r *RandomNumberBlock) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	r.p.Call("replaceRepeatableContent", args...)
}

// Serialize calls the Serialize method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#serialize
func (r *RandomNumberBlock) Serialize() interface{} {

	retVal := r.p.Call("serialize")
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the RandomNumberBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#updateuniformsandsamples
func (r *RandomNumberBlock) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers string) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, state.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)
	args = append(args, uniformBuffers)

	r.p.Call("updateUniformsAndSamples", args...)
}

/*

// BuildId returns the BuildId property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#buildid
func (r *RandomNumberBlock) BuildId(buildId float64) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(buildId)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// SetBuildId sets the BuildId property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#buildid
func (r *RandomNumberBlock) SetBuildId(buildId float64) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(buildId)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// Comments returns the Comments property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#comments
func (r *RandomNumberBlock) Comments(comments string) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(comments)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// SetComments sets the Comments property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#comments
func (r *RandomNumberBlock) SetComments(comments string) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(comments)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#inputs
func (r *RandomNumberBlock) Inputs(inputs *NodeMaterialConnectionPoint) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(inputs.JSObject())
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#inputs
func (r *RandomNumberBlock) SetInputs(inputs *NodeMaterialConnectionPoint) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(inputs.JSObject())
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// IsFinalMerger returns the IsFinalMerger property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#isfinalmerger
func (r *RandomNumberBlock) IsFinalMerger(isFinalMerger bool) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(isFinalMerger)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// SetIsFinalMerger sets the IsFinalMerger property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#isfinalmerger
func (r *RandomNumberBlock) SetIsFinalMerger(isFinalMerger bool) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(isFinalMerger)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// IsInput returns the IsInput property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#isinput
func (r *RandomNumberBlock) IsInput(isInput bool) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(isInput)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// SetIsInput sets the IsInput property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#isinput
func (r *RandomNumberBlock) SetIsInput(isInput bool) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(isInput)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// IsUnique returns the IsUnique property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#isunique
func (r *RandomNumberBlock) IsUnique(isUnique bool) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(isUnique)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// SetIsUnique sets the IsUnique property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#isunique
func (r *RandomNumberBlock) SetIsUnique(isUnique bool) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(isUnique)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#name
func (r *RandomNumberBlock) Name(name string) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(name)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#name
func (r *RandomNumberBlock) SetName(name string) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(name)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#output
func (r *RandomNumberBlock) Output(output *NodeMaterialConnectionPoint) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(output.JSObject())
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#output
func (r *RandomNumberBlock) SetOutput(output *NodeMaterialConnectionPoint) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(output.JSObject())
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// Outputs returns the Outputs property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#outputs
func (r *RandomNumberBlock) Outputs(outputs *NodeMaterialConnectionPoint) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(outputs.JSObject())
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// SetOutputs sets the Outputs property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#outputs
func (r *RandomNumberBlock) SetOutputs(outputs *NodeMaterialConnectionPoint) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(outputs.JSObject())
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// Seed returns the Seed property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#seed
func (r *RandomNumberBlock) Seed(seed *NodeMaterialConnectionPoint) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(seed.JSObject())
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// SetSeed sets the Seed property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#seed
func (r *RandomNumberBlock) SetSeed(seed *NodeMaterialConnectionPoint) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(seed.JSObject())
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#target
func (r *RandomNumberBlock) Target(target js.Value) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(target)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#target
func (r *RandomNumberBlock) SetTarget(target js.Value) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(target)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#uniqueid
func (r *RandomNumberBlock) UniqueId(uniqueId float64) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(uniqueId)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class RandomNumberBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.randomnumberblock#uniqueid
func (r *RandomNumberBlock) SetUniqueId(uniqueId float64) *RandomNumberBlock {
	p := ba.ctx.Get("RandomNumberBlock").New(uniqueId)
	return RandomNumberBlockFromJSObject(p, ba.ctx)
}

*/
