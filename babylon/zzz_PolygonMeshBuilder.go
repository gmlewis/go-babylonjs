// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PolygonMeshBuilder represents a babylon.js PolygonMeshBuilder.
// Builds a polygon
//
// See: https://doc.babylonjs.com/how_to/polygonmeshbuilder
type PolygonMeshBuilder struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PolygonMeshBuilder) JSObject() js.Value { return p.p }

// PolygonMeshBuilder returns a PolygonMeshBuilder JavaScript class.
func (ba *Babylon) PolygonMeshBuilder() *PolygonMeshBuilder {
	p := ba.ctx.Get("PolygonMeshBuilder")
	return PolygonMeshBuilderFromJSObject(p, ba.ctx)
}

// PolygonMeshBuilderFromJSObject returns a wrapped PolygonMeshBuilder JavaScript class.
func PolygonMeshBuilderFromJSObject(p js.Value, ctx js.Value) *PolygonMeshBuilder {
	return &PolygonMeshBuilder{p: p, ctx: ctx}
}

// PolygonMeshBuilderArrayToJSArray returns a JavaScript Array for the wrapped array.
func PolygonMeshBuilderArrayToJSArray(array []*PolygonMeshBuilder) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPolygonMeshBuilderOpts contains optional parameters for NewPolygonMeshBuilder.
type NewPolygonMeshBuilderOpts struct {
	Scene           *Scene
	EarcutInjection *interface{}
}

// NewPolygonMeshBuilder returns a new PolygonMeshBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.polygonmeshbuilder
func (ba *Babylon) NewPolygonMeshBuilder(name string, contours *Path2, opts *NewPolygonMeshBuilderOpts) *PolygonMeshBuilder {
	if opts == nil {
		opts = &NewPolygonMeshBuilderOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, contours.JSObject())

	if opts.Scene == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scene.JSObject())
	}
	if opts.EarcutInjection == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.EarcutInjection)
	}

	p := ba.ctx.Get("PolygonMeshBuilder").New(args...)
	return PolygonMeshBuilderFromJSObject(p, ba.ctx)
}

// AddHole calls the AddHole method on the PolygonMeshBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.polygonmeshbuilder#addhole
func (p *PolygonMeshBuilder) AddHole(hole *Vector2) *PolygonMeshBuilder {

	args := make([]interface{}, 0, 1+0)

	args = append(args, hole.JSObject())

	retVal := p.p.Call("addHole", args...)
	return PolygonMeshBuilderFromJSObject(retVal, p.ctx)
}

// PolygonMeshBuilderBuildOpts contains optional parameters for PolygonMeshBuilder.Build.
type PolygonMeshBuilderBuildOpts struct {
	Updatable *bool
	Depth     *float64
}

// Build calls the Build method on the PolygonMeshBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.polygonmeshbuilder#build
func (p *PolygonMeshBuilder) Build(opts *PolygonMeshBuilderBuildOpts) *Mesh {
	if opts == nil {
		opts = &PolygonMeshBuilderBuildOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Updatable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Updatable)
	}
	if opts.Depth == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Depth)
	}

	retVal := p.p.Call("build", args...)
	return MeshFromJSObject(retVal, p.ctx)
}

// PolygonMeshBuilderBuildVertexDataOpts contains optional parameters for PolygonMeshBuilder.BuildVertexData.
type PolygonMeshBuilderBuildVertexDataOpts struct {
	Depth *float64
}

// BuildVertexData calls the BuildVertexData method on the PolygonMeshBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.polygonmeshbuilder#buildvertexdata
func (p *PolygonMeshBuilder) BuildVertexData(opts *PolygonMeshBuilderBuildVertexDataOpts) *VertexData {
	if opts == nil {
		opts = &PolygonMeshBuilderBuildVertexDataOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Depth == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Depth)
	}

	retVal := p.p.Call("buildVertexData", args...)
	return VertexDataFromJSObject(retVal, p.ctx)
}

// BjsEarcut returns the BjsEarcut property of class PolygonMeshBuilder.
//
// https://doc.babylonjs.com/api/classes/babylon.polygonmeshbuilder#bjsearcut
func (p *PolygonMeshBuilder) BjsEarcut() interface{} {
	retVal := p.p.Get("bjsEarcut")
	return retVal
}

// SetBjsEarcut sets the BjsEarcut property of class PolygonMeshBuilder.
//
// https://doc.babylonjs.com/api/classes/babylon.polygonmeshbuilder#bjsearcut
func (p *PolygonMeshBuilder) SetBjsEarcut(bjsEarcut interface{}) *PolygonMeshBuilder {
	p.p.Set("bjsEarcut", bjsEarcut)
	return p
}
