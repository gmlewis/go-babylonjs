// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// OculusTouchController represents a babylon.js OculusTouchController.
// Oculus Touch Controller
type OculusTouchController struct {
	*WebVRController
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (o *OculusTouchController) JSObject() js.Value { return o.p }

// OculusTouchController returns a OculusTouchController JavaScript class.
func (ba *Babylon) OculusTouchController() *OculusTouchController {
	p := ba.ctx.Get("OculusTouchController")
	return OculusTouchControllerFromJSObject(p, ba.ctx)
}

// OculusTouchControllerFromJSObject returns a wrapped OculusTouchController JavaScript class.
func OculusTouchControllerFromJSObject(p js.Value, ctx js.Value) *OculusTouchController {
	return &OculusTouchController{WebVRController: WebVRControllerFromJSObject(p, ctx), ctx: ctx}
}

// OculusTouchControllerArrayToJSArray returns a JavaScript Array for the wrapped array.
func OculusTouchControllerArrayToJSArray(array []*OculusTouchController) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewOculusTouchController returns a new OculusTouchController object.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller
func (ba *Babylon) NewOculusTouchController(vrGamepad interface{}) *OculusTouchController {

	args := make([]interface{}, 0, 1+0)

	args = append(args, vrGamepad)

	p := ba.ctx.Get("OculusTouchController").New(args...)
	return OculusTouchControllerFromJSObject(p, ba.ctx)
}

// OculusTouchControllerInitControllerMeshOpts contains optional parameters for OculusTouchController.InitControllerMesh.
type OculusTouchControllerInitControllerMeshOpts struct {
	MeshLoaded func()
}

// InitControllerMesh calls the InitControllerMesh method on the OculusTouchController object.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#initcontrollermesh
func (o *OculusTouchController) InitControllerMesh(scene *Scene, opts *OculusTouchControllerInitControllerMeshOpts) {
	if opts == nil {
		opts = &OculusTouchControllerInitControllerMeshOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.MeshLoaded == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.MeshLoaded)
	}

	o.p.Call("initControllerMesh", args...)
}

// MODEL_BASE_URL returns the MODEL_BASE_URL property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#model_base_url
func (o *OculusTouchController) MODEL_BASE_URL() string {
	retVal := o.p.Get("MODEL_BASE_URL")
	return retVal.String()
}

// SetMODEL_BASE_URL sets the MODEL_BASE_URL property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#model_base_url
func (o *OculusTouchController) SetMODEL_BASE_URL(MODEL_BASE_URL string) *OculusTouchController {
	o.p.Set("MODEL_BASE_URL", MODEL_BASE_URL)
	return o
}

// MODEL_LEFT_FILENAME returns the MODEL_LEFT_FILENAME property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#model_left_filename
func (o *OculusTouchController) MODEL_LEFT_FILENAME() string {
	retVal := o.p.Get("MODEL_LEFT_FILENAME")
	return retVal.String()
}

// SetMODEL_LEFT_FILENAME sets the MODEL_LEFT_FILENAME property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#model_left_filename
func (o *OculusTouchController) SetMODEL_LEFT_FILENAME(MODEL_LEFT_FILENAME string) *OculusTouchController {
	o.p.Set("MODEL_LEFT_FILENAME", MODEL_LEFT_FILENAME)
	return o
}

// MODEL_RIGHT_FILENAME returns the MODEL_RIGHT_FILENAME property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#model_right_filename
func (o *OculusTouchController) MODEL_RIGHT_FILENAME() string {
	retVal := o.p.Get("MODEL_RIGHT_FILENAME")
	return retVal.String()
}

// SetMODEL_RIGHT_FILENAME sets the MODEL_RIGHT_FILENAME property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#model_right_filename
func (o *OculusTouchController) SetMODEL_RIGHT_FILENAME(MODEL_RIGHT_FILENAME string) *OculusTouchController {
	o.p.Set("MODEL_RIGHT_FILENAME", MODEL_RIGHT_FILENAME)
	return o
}

// OnAButtonStateChangedObservable returns the OnAButtonStateChangedObservable property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#onabuttonstatechangedobservable
func (o *OculusTouchController) OnAButtonStateChangedObservable() *Observable {
	retVal := o.p.Get("onAButtonStateChangedObservable")
	return ObservableFromJSObject(retVal, o.ctx)
}

// SetOnAButtonStateChangedObservable sets the OnAButtonStateChangedObservable property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#onabuttonstatechangedobservable
func (o *OculusTouchController) SetOnAButtonStateChangedObservable(onAButtonStateChangedObservable *Observable) *OculusTouchController {
	o.p.Set("onAButtonStateChangedObservable", onAButtonStateChangedObservable.JSObject())
	return o
}

// OnBButtonStateChangedObservable returns the OnBButtonStateChangedObservable property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#onbbuttonstatechangedobservable
func (o *OculusTouchController) OnBButtonStateChangedObservable() *Observable {
	retVal := o.p.Get("onBButtonStateChangedObservable")
	return ObservableFromJSObject(retVal, o.ctx)
}

// SetOnBButtonStateChangedObservable sets the OnBButtonStateChangedObservable property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#onbbuttonstatechangedobservable
func (o *OculusTouchController) SetOnBButtonStateChangedObservable(onBButtonStateChangedObservable *Observable) *OculusTouchController {
	o.p.Set("onBButtonStateChangedObservable", onBButtonStateChangedObservable.JSObject())
	return o
}

// OnSecondaryTriggerStateChangedObservable returns the OnSecondaryTriggerStateChangedObservable property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#onsecondarytriggerstatechangedobservable
func (o *OculusTouchController) OnSecondaryTriggerStateChangedObservable() *Observable {
	retVal := o.p.Get("onSecondaryTriggerStateChangedObservable")
	return ObservableFromJSObject(retVal, o.ctx)
}

// SetOnSecondaryTriggerStateChangedObservable sets the OnSecondaryTriggerStateChangedObservable property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#onsecondarytriggerstatechangedobservable
func (o *OculusTouchController) SetOnSecondaryTriggerStateChangedObservable(onSecondaryTriggerStateChangedObservable *Observable) *OculusTouchController {
	o.p.Set("onSecondaryTriggerStateChangedObservable", onSecondaryTriggerStateChangedObservable.JSObject())
	return o
}

// OnThumbRestChangedObservable returns the OnThumbRestChangedObservable property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#onthumbrestchangedobservable
func (o *OculusTouchController) OnThumbRestChangedObservable() *Observable {
	retVal := o.p.Get("onThumbRestChangedObservable")
	return ObservableFromJSObject(retVal, o.ctx)
}

// SetOnThumbRestChangedObservable sets the OnThumbRestChangedObservable property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#onthumbrestchangedobservable
func (o *OculusTouchController) SetOnThumbRestChangedObservable(onThumbRestChangedObservable *Observable) *OculusTouchController {
	o.p.Set("onThumbRestChangedObservable", onThumbRestChangedObservable.JSObject())
	return o
}

// OnXButtonStateChangedObservable returns the OnXButtonStateChangedObservable property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#onxbuttonstatechangedobservable
func (o *OculusTouchController) OnXButtonStateChangedObservable() *Observable {
	retVal := o.p.Get("onXButtonStateChangedObservable")
	return ObservableFromJSObject(retVal, o.ctx)
}

// SetOnXButtonStateChangedObservable sets the OnXButtonStateChangedObservable property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#onxbuttonstatechangedobservable
func (o *OculusTouchController) SetOnXButtonStateChangedObservable(onXButtonStateChangedObservable *Observable) *OculusTouchController {
	o.p.Set("onXButtonStateChangedObservable", onXButtonStateChangedObservable.JSObject())
	return o
}

// OnYButtonStateChangedObservable returns the OnYButtonStateChangedObservable property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#onybuttonstatechangedobservable
func (o *OculusTouchController) OnYButtonStateChangedObservable() *Observable {
	retVal := o.p.Get("onYButtonStateChangedObservable")
	return ObservableFromJSObject(retVal, o.ctx)
}

// SetOnYButtonStateChangedObservable sets the OnYButtonStateChangedObservable property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#onybuttonstatechangedobservable
func (o *OculusTouchController) SetOnYButtonStateChangedObservable(onYButtonStateChangedObservable *Observable) *OculusTouchController {
	o.p.Set("onYButtonStateChangedObservable", onYButtonStateChangedObservable.JSObject())
	return o
}

// QUEST_MODEL_BASE_URL returns the QUEST_MODEL_BASE_URL property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#quest_model_base_url
func (o *OculusTouchController) QUEST_MODEL_BASE_URL() string {
	retVal := o.p.Get("QUEST_MODEL_BASE_URL")
	return retVal.String()
}

// SetQUEST_MODEL_BASE_URL sets the QUEST_MODEL_BASE_URL property of class OculusTouchController.
//
// https://doc.babylonjs.com/api/classes/babylon.oculustouchcontroller#quest_model_base_url
func (o *OculusTouchController) SetQUEST_MODEL_BASE_URL(QUEST_MODEL_BASE_URL string) *OculusTouchController {
	o.p.Set("QUEST_MODEL_BASE_URL", QUEST_MODEL_BASE_URL)
	return o
}
