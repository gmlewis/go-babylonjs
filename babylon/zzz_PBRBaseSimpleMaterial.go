// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PBRBaseSimpleMaterial represents a babylon.js PBRBaseSimpleMaterial.
// The Physically based simple base material of BJS.
//
// This enables better naming and convention enforcements on top of the pbrMaterial.
// It is used as the base class for both the specGloss and metalRough conventions.
type PBRBaseSimpleMaterial struct {
	*PBRBaseMaterial
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PBRBaseSimpleMaterial) JSObject() js.Value { return p.p }

// PBRBaseSimpleMaterial returns a PBRBaseSimpleMaterial JavaScript class.
func (ba *Babylon) PBRBaseSimpleMaterial() *PBRBaseSimpleMaterial {
	p := ba.ctx.Get("PBRBaseSimpleMaterial")
	return PBRBaseSimpleMaterialFromJSObject(p, ba.ctx)
}

// PBRBaseSimpleMaterialFromJSObject returns a wrapped PBRBaseSimpleMaterial JavaScript class.
func PBRBaseSimpleMaterialFromJSObject(p js.Value, ctx js.Value) *PBRBaseSimpleMaterial {
	return &PBRBaseSimpleMaterial{PBRBaseMaterial: PBRBaseMaterialFromJSObject(p, ctx), ctx: ctx}
}

// PBRBaseSimpleMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func PBRBaseSimpleMaterialArrayToJSArray(array []*PBRBaseSimpleMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPBRBaseSimpleMaterial returns a new PBRBaseSimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#constructor
func (ba *Babylon) NewPBRBaseSimpleMaterial(name string, scene *Scene) *PBRBaseSimpleMaterial {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("PBRBaseSimpleMaterial").New(args...)
	return PBRBaseSimpleMaterialFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the PBRBaseSimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#getclassname
func (p *PBRBaseSimpleMaterial) GetClassName() string {

	retVal := p.p.Call("getClassName")
	return retVal.String()
}

// AlphaCutOff returns the AlphaCutOff property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#alphacutoff
func (p *PBRBaseSimpleMaterial) AlphaCutOff() float64 {
	retVal := p.p.Get("alphaCutOff")
	return retVal.Float()
}

// SetAlphaCutOff sets the AlphaCutOff property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#alphacutoff
func (p *PBRBaseSimpleMaterial) SetAlphaCutOff(alphaCutOff float64) *PBRBaseSimpleMaterial {
	p.p.Set("alphaCutOff", alphaCutOff)
	return p
}

// DisableLighting returns the DisableLighting property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#disablelighting
func (p *PBRBaseSimpleMaterial) DisableLighting() bool {
	retVal := p.p.Get("disableLighting")
	return retVal.Bool()
}

// SetDisableLighting sets the DisableLighting property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#disablelighting
func (p *PBRBaseSimpleMaterial) SetDisableLighting(disableLighting bool) *PBRBaseSimpleMaterial {
	p.p.Set("disableLighting", disableLighting)
	return p
}

// DoubleSided returns the DoubleSided property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#doublesided
func (p *PBRBaseSimpleMaterial) DoubleSided() bool {
	retVal := p.p.Get("doubleSided")
	return retVal.Bool()
}

// SetDoubleSided sets the DoubleSided property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#doublesided
func (p *PBRBaseSimpleMaterial) SetDoubleSided(doubleSided bool) *PBRBaseSimpleMaterial {
	p.p.Set("doubleSided", doubleSided)
	return p
}

// EmissiveColor returns the EmissiveColor property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#emissivecolor
func (p *PBRBaseSimpleMaterial) EmissiveColor() *Color3 {
	retVal := p.p.Get("emissiveColor")
	return Color3FromJSObject(retVal, p.ctx)
}

// SetEmissiveColor sets the EmissiveColor property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#emissivecolor
func (p *PBRBaseSimpleMaterial) SetEmissiveColor(emissiveColor *Color3) *PBRBaseSimpleMaterial {
	p.p.Set("emissiveColor", emissiveColor.JSObject())
	return p
}

// EmissiveTexture returns the EmissiveTexture property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#emissivetexture
func (p *PBRBaseSimpleMaterial) EmissiveTexture() *BaseTexture {
	retVal := p.p.Get("emissiveTexture")
	return BaseTextureFromJSObject(retVal, p.ctx)
}

// SetEmissiveTexture sets the EmissiveTexture property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#emissivetexture
func (p *PBRBaseSimpleMaterial) SetEmissiveTexture(emissiveTexture *BaseTexture) *PBRBaseSimpleMaterial {
	p.p.Set("emissiveTexture", emissiveTexture.JSObject())
	return p
}

// EnvironmentTexture returns the EnvironmentTexture property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#environmenttexture
func (p *PBRBaseSimpleMaterial) EnvironmentTexture() *BaseTexture {
	retVal := p.p.Get("environmentTexture")
	return BaseTextureFromJSObject(retVal, p.ctx)
}

// SetEnvironmentTexture sets the EnvironmentTexture property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#environmenttexture
func (p *PBRBaseSimpleMaterial) SetEnvironmentTexture(environmentTexture *BaseTexture) *PBRBaseSimpleMaterial {
	p.p.Set("environmentTexture", environmentTexture.JSObject())
	return p
}

// InvertNormalMapX returns the InvertNormalMapX property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#invertnormalmapx
func (p *PBRBaseSimpleMaterial) InvertNormalMapX() bool {
	retVal := p.p.Get("invertNormalMapX")
	return retVal.Bool()
}

// SetInvertNormalMapX sets the InvertNormalMapX property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#invertnormalmapx
func (p *PBRBaseSimpleMaterial) SetInvertNormalMapX(invertNormalMapX bool) *PBRBaseSimpleMaterial {
	p.p.Set("invertNormalMapX", invertNormalMapX)
	return p
}

// InvertNormalMapY returns the InvertNormalMapY property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#invertnormalmapy
func (p *PBRBaseSimpleMaterial) InvertNormalMapY() bool {
	retVal := p.p.Get("invertNormalMapY")
	return retVal.Bool()
}

// SetInvertNormalMapY sets the InvertNormalMapY property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#invertnormalmapy
func (p *PBRBaseSimpleMaterial) SetInvertNormalMapY(invertNormalMapY bool) *PBRBaseSimpleMaterial {
	p.p.Set("invertNormalMapY", invertNormalMapY)
	return p
}

// LightmapTexture returns the LightmapTexture property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#lightmaptexture
func (p *PBRBaseSimpleMaterial) LightmapTexture() *BaseTexture {
	retVal := p.p.Get("lightmapTexture")
	return BaseTextureFromJSObject(retVal, p.ctx)
}

// SetLightmapTexture sets the LightmapTexture property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#lightmaptexture
func (p *PBRBaseSimpleMaterial) SetLightmapTexture(lightmapTexture *BaseTexture) *PBRBaseSimpleMaterial {
	p.p.Set("lightmapTexture", lightmapTexture.JSObject())
	return p
}

// MaxSimultaneousLights returns the MaxSimultaneousLights property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#maxsimultaneouslights
func (p *PBRBaseSimpleMaterial) MaxSimultaneousLights() float64 {
	retVal := p.p.Get("maxSimultaneousLights")
	return retVal.Float()
}

// SetMaxSimultaneousLights sets the MaxSimultaneousLights property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#maxsimultaneouslights
func (p *PBRBaseSimpleMaterial) SetMaxSimultaneousLights(maxSimultaneousLights float64) *PBRBaseSimpleMaterial {
	p.p.Set("maxSimultaneousLights", maxSimultaneousLights)
	return p
}

// NormalTexture returns the NormalTexture property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#normaltexture
func (p *PBRBaseSimpleMaterial) NormalTexture() *BaseTexture {
	retVal := p.p.Get("normalTexture")
	return BaseTextureFromJSObject(retVal, p.ctx)
}

// SetNormalTexture sets the NormalTexture property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#normaltexture
func (p *PBRBaseSimpleMaterial) SetNormalTexture(normalTexture *BaseTexture) *PBRBaseSimpleMaterial {
	p.p.Set("normalTexture", normalTexture.JSObject())
	return p
}

// OcclusionStrength returns the OcclusionStrength property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#occlusionstrength
func (p *PBRBaseSimpleMaterial) OcclusionStrength() float64 {
	retVal := p.p.Get("occlusionStrength")
	return retVal.Float()
}

// SetOcclusionStrength sets the OcclusionStrength property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#occlusionstrength
func (p *PBRBaseSimpleMaterial) SetOcclusionStrength(occlusionStrength float64) *PBRBaseSimpleMaterial {
	p.p.Set("occlusionStrength", occlusionStrength)
	return p
}

// OcclusionTexture returns the OcclusionTexture property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#occlusiontexture
func (p *PBRBaseSimpleMaterial) OcclusionTexture() *BaseTexture {
	retVal := p.p.Get("occlusionTexture")
	return BaseTextureFromJSObject(retVal, p.ctx)
}

// SetOcclusionTexture sets the OcclusionTexture property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#occlusiontexture
func (p *PBRBaseSimpleMaterial) SetOcclusionTexture(occlusionTexture *BaseTexture) *PBRBaseSimpleMaterial {
	p.p.Set("occlusionTexture", occlusionTexture.JSObject())
	return p
}

// UseLightmapAsShadowmap returns the UseLightmapAsShadowmap property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#uselightmapasshadowmap
func (p *PBRBaseSimpleMaterial) UseLightmapAsShadowmap() bool {
	retVal := p.p.Get("useLightmapAsShadowmap")
	return retVal.Bool()
}

// SetUseLightmapAsShadowmap sets the UseLightmapAsShadowmap property of class PBRBaseSimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.pbrbasesimplematerial#uselightmapasshadowmap
func (p *PBRBaseSimpleMaterial) SetUseLightmapAsShadowmap(useLightmapAsShadowmap bool) *PBRBaseSimpleMaterial {
	p.p.Set("useLightmapAsShadowmap", useLightmapAsShadowmap)
	return p
}
