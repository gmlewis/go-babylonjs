// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MeshAssetTask represents a babylon.js MeshAssetTask.
// Define a task used by AssetsManager to load meshes
type MeshAssetTask struct {
	*AbstractAssetTask
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MeshAssetTask) JSObject() js.Value { return m.p }

// MeshAssetTask returns a MeshAssetTask JavaScript class.
func (ba *Babylon) MeshAssetTask() *MeshAssetTask {
	p := ba.ctx.Get("MeshAssetTask")
	return MeshAssetTaskFromJSObject(p, ba.ctx)
}

// MeshAssetTaskFromJSObject returns a wrapped MeshAssetTask JavaScript class.
func MeshAssetTaskFromJSObject(p js.Value, ctx js.Value) *MeshAssetTask {
	return &MeshAssetTask{AbstractAssetTask: AbstractAssetTaskFromJSObject(p, ctx), ctx: ctx}
}

// MeshAssetTaskArrayToJSArray returns a JavaScript Array for the wrapped array.
func MeshAssetTaskArrayToJSArray(array []*MeshAssetTask) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewMeshAssetTask returns a new MeshAssetTask object.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask
func (ba *Babylon) NewMeshAssetTask(name string, meshesNames interface{}, rootUrl string, sceneFilename string) *MeshAssetTask {

	args := make([]interface{}, 0, 4+0)

	args = append(args, name)
	args = append(args, meshesNames)
	args = append(args, rootUrl)
	args = append(args, sceneFilename)

	p := ba.ctx.Get("MeshAssetTask").New(args...)
	return MeshAssetTaskFromJSObject(p, ba.ctx)
}

// RunTask calls the RunTask method on the MeshAssetTask object.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#runtask
func (m *MeshAssetTask) RunTask(scene *Scene, onSuccess func(), onError func()) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, scene.JSObject())
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { onSuccess(); return nil }))
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { onError(); return nil }))

	m.p.Call("runTask", args...)
}

// LoadedAnimationGroups returns the LoadedAnimationGroups property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#loadedanimationgroups
func (m *MeshAssetTask) LoadedAnimationGroups() []*AnimationGroup {
	retVal := m.p.Get("loadedAnimationGroups")
	result := []*AnimationGroup{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, AnimationGroupFromJSObject(retVal.Index(ri), m.ctx))
	}
	return result
}

// SetLoadedAnimationGroups sets the LoadedAnimationGroups property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#loadedanimationgroups
func (m *MeshAssetTask) SetLoadedAnimationGroups(loadedAnimationGroups []*AnimationGroup) *MeshAssetTask {
	m.p.Set("loadedAnimationGroups", loadedAnimationGroups)
	return m
}

// LoadedMeshes returns the LoadedMeshes property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#loadedmeshes
func (m *MeshAssetTask) LoadedMeshes() []*AbstractMesh {
	retVal := m.p.Get("loadedMeshes")
	result := []*AbstractMesh{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, AbstractMeshFromJSObject(retVal.Index(ri), m.ctx))
	}
	return result
}

// SetLoadedMeshes sets the LoadedMeshes property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#loadedmeshes
func (m *MeshAssetTask) SetLoadedMeshes(loadedMeshes []*AbstractMesh) *MeshAssetTask {
	m.p.Set("loadedMeshes", loadedMeshes)
	return m
}

// LoadedParticleSystems returns the LoadedParticleSystems property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#loadedparticlesystems
func (m *MeshAssetTask) LoadedParticleSystems() []*IParticleSystem {
	retVal := m.p.Get("loadedParticleSystems")
	result := []*IParticleSystem{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, IParticleSystemFromJSObject(retVal.Index(ri), m.ctx))
	}
	return result
}

// SetLoadedParticleSystems sets the LoadedParticleSystems property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#loadedparticlesystems
func (m *MeshAssetTask) SetLoadedParticleSystems(loadedParticleSystems []*IParticleSystem) *MeshAssetTask {
	m.p.Set("loadedParticleSystems", loadedParticleSystems)
	return m
}

// LoadedSkeletons returns the LoadedSkeletons property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#loadedskeletons
func (m *MeshAssetTask) LoadedSkeletons() []*Skeleton {
	retVal := m.p.Get("loadedSkeletons")
	result := []*Skeleton{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, SkeletonFromJSObject(retVal.Index(ri), m.ctx))
	}
	return result
}

// SetLoadedSkeletons sets the LoadedSkeletons property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#loadedskeletons
func (m *MeshAssetTask) SetLoadedSkeletons(loadedSkeletons []*Skeleton) *MeshAssetTask {
	m.p.Set("loadedSkeletons", loadedSkeletons)
	return m
}

// MeshesNames returns the MeshesNames property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#meshesnames
func (m *MeshAssetTask) MeshesNames() interface{} {
	retVal := m.p.Get("meshesNames")
	return retVal
}

// SetMeshesNames sets the MeshesNames property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#meshesnames
func (m *MeshAssetTask) SetMeshesNames(meshesNames interface{}) *MeshAssetTask {
	m.p.Set("meshesNames", meshesNames)
	return m
}

// Name returns the Name property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#name
func (m *MeshAssetTask) Name() string {
	retVal := m.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#name
func (m *MeshAssetTask) SetName(name string) *MeshAssetTask {
	m.p.Set("name", name)
	return m
}

// OnError returns the OnError property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#onerror
func (m *MeshAssetTask) OnError() js.Value {
	retVal := m.p.Get("onError")
	return retVal
}

// SetOnError sets the OnError property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#onerror
func (m *MeshAssetTask) SetOnError(onError func()) *MeshAssetTask {
	m.p.Set("onError", js.FuncOf(func(this js.Value, args []js.Value) interface{} { onError(); return nil }))
	return m
}

// OnSuccess returns the OnSuccess property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#onsuccess
func (m *MeshAssetTask) OnSuccess() js.Value {
	retVal := m.p.Get("onSuccess")
	return retVal
}

// SetOnSuccess sets the OnSuccess property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#onsuccess
func (m *MeshAssetTask) SetOnSuccess(onSuccess func()) *MeshAssetTask {
	m.p.Set("onSuccess", js.FuncOf(func(this js.Value, args []js.Value) interface{} { onSuccess(); return nil }))
	return m
}

// RootUrl returns the RootUrl property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#rooturl
func (m *MeshAssetTask) RootUrl() string {
	retVal := m.p.Get("rootUrl")
	return retVal.String()
}

// SetRootUrl sets the RootUrl property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#rooturl
func (m *MeshAssetTask) SetRootUrl(rootUrl string) *MeshAssetTask {
	m.p.Set("rootUrl", rootUrl)
	return m
}

// SceneFilename returns the SceneFilename property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#scenefilename
func (m *MeshAssetTask) SceneFilename() string {
	retVal := m.p.Get("sceneFilename")
	return retVal.String()
}

// SetSceneFilename sets the SceneFilename property of class MeshAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.meshassettask#scenefilename
func (m *MeshAssetTask) SetSceneFilename(sceneFilename string) *MeshAssetTask {
	m.p.Set("sceneFilename", sceneFilename)
	return m
}
