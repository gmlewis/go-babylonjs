// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MultiLine represents a babylon.js MultiLine.
// Class used to create multi line control
type MultiLine struct {
	*Control
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MultiLine) JSObject() js.Value { return m.p }

// MultiLine returns a MultiLine JavaScript class.
func (ba *Babylon) MultiLine() *MultiLine {
	p := ba.ctx.Get("MultiLine")
	return MultiLineFromJSObject(p, ba.ctx)
}

// MultiLineFromJSObject returns a wrapped MultiLine JavaScript class.
func MultiLineFromJSObject(p js.Value, ctx js.Value) *MultiLine {
	return &MultiLine{Control: ControlFromJSObject(p, ctx), ctx: ctx}
}

// MultiLineArrayToJSArray returns a JavaScript Array for the wrapped array.
func MultiLineArrayToJSArray(array []*MultiLine) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewMultiLineOpts contains optional parameters for NewMultiLine.
type NewMultiLineOpts struct {
	Name *string
}

// NewMultiLine returns a new MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline
func (ba *Babylon) NewMultiLine(opts *NewMultiLineOpts) *MultiLine {
	if opts == nil {
		opts = &NewMultiLineOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}

	p := ba.ctx.Get("MultiLine").New(args...)
	return MultiLineFromJSObject(p, ba.ctx)
}

// Add calls the Add method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#add
func (m *MultiLine) Add(items *AbstractMesh) *MultiLinePoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, items.JSObject())

	retVal := m.p.Call("add", args...)
	return MultiLinePointFromJSObject(retVal, m.ctx)
}

// Contains calls the Contains method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#contains
func (m *MultiLine) Contains(x float64, y float64) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, x)
	args = append(args, y)

	retVal := m.p.Call("contains", args...)
	return retVal.Bool()
}

// Dispose calls the Dispose method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#dispose
func (m *MultiLine) Dispose() {

	m.p.Call("dispose")
}

// GetAscendantOfClass calls the GetAscendantOfClass method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#getascendantofclass
func (m *MultiLine) GetAscendantOfClass(className string) *Control {

	args := make([]interface{}, 0, 1+0)

	args = append(args, className)

	retVal := m.p.Call("getAscendantOfClass", args...)
	return ControlFromJSObject(retVal, m.ctx)
}

// GetAt calls the GetAt method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#getat
func (m *MultiLine) GetAt(index float64) *MultiLinePoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, index)

	retVal := m.p.Call("getAt", args...)
	return MultiLinePointFromJSObject(retVal, m.ctx)
}

// GetClassName calls the GetClassName method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#getclassname
func (m *MultiLine) GetClassName() string {

	retVal := m.p.Call("getClassName")
	return retVal.String()
}

// MultiLineGetDescendantsOpts contains optional parameters for MultiLine.GetDescendants.
type MultiLineGetDescendantsOpts struct {
	DirectDescendantsOnly *bool
	Predicate             func()
}

// GetDescendants calls the GetDescendants method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#getdescendants
func (m *MultiLine) GetDescendants(opts *MultiLineGetDescendantsOpts) *Control {
	if opts == nil {
		opts = &MultiLineGetDescendantsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := m.p.Call("getDescendants", args...)
	return ControlFromJSObject(retVal, m.ctx)
}

// MultiLineGetDescendantsToRefOpts contains optional parameters for MultiLine.GetDescendantsToRef.
type MultiLineGetDescendantsToRefOpts struct {
	DirectDescendantsOnly *bool
	Predicate             func()
}

// GetDescendantsToRef calls the GetDescendantsToRef method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#getdescendantstoref
func (m *MultiLine) GetDescendantsToRef(results *Control, opts *MultiLineGetDescendantsToRefOpts) {
	if opts == nil {
		opts = &MultiLineGetDescendantsToRefOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, results.JSObject())

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	m.p.Call("getDescendantsToRef", args...)
}

// GetLocalCoordinates calls the GetLocalCoordinates method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#getlocalcoordinates
func (m *MultiLine) GetLocalCoordinates(globalCoordinates *Vector2) *Vector2 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, globalCoordinates.JSObject())

	retVal := m.p.Call("getLocalCoordinates", args...)
	return Vector2FromJSObject(retVal, m.ctx)
}

// GetLocalCoordinatesToRef calls the GetLocalCoordinatesToRef method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#getlocalcoordinatestoref
func (m *MultiLine) GetLocalCoordinatesToRef(globalCoordinates *Vector2, result *Vector2) *Control {

	args := make([]interface{}, 0, 2+0)

	args = append(args, globalCoordinates.JSObject())
	args = append(args, result.JSObject())

	retVal := m.p.Call("getLocalCoordinatesToRef", args...)
	return ControlFromJSObject(retVal, m.ctx)
}

// GetParentLocalCoordinates calls the GetParentLocalCoordinates method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#getparentlocalcoordinates
func (m *MultiLine) GetParentLocalCoordinates(globalCoordinates *Vector2) *Vector2 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, globalCoordinates.JSObject())

	retVal := m.p.Call("getParentLocalCoordinates", args...)
	return Vector2FromJSObject(retVal, m.ctx)
}

// IsAscendant calls the IsAscendant method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#isascendant
func (m *MultiLine) IsAscendant(container *Control) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, container.JSObject())

	retVal := m.p.Call("isAscendant", args...)
	return retVal.Bool()
}

// LinkWithMesh calls the LinkWithMesh method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#linkwithmesh
func (m *MultiLine) LinkWithMesh(mesh *AbstractMesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	m.p.Call("linkWithMesh", args...)
}

// MoveToVector3 calls the MoveToVector3 method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#movetovector3
func (m *MultiLine) MoveToVector3(position *Vector3, scene *Scene) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	m.p.Call("moveToVector3", args...)
}

// MultiLinePushOpts contains optional parameters for MultiLine.Push.
type MultiLinePushOpts struct {
	Item *AbstractMesh
}

// Push calls the Push method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#push
func (m *MultiLine) Push(opts *MultiLinePushOpts) *MultiLinePoint {
	if opts == nil {
		opts = &MultiLinePushOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Item == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Item.JSObject())
	}

	retVal := m.p.Call("push", args...)
	return MultiLinePointFromJSObject(retVal, m.ctx)
}

// Remove calls the Remove method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#remove
func (m *MultiLine) Remove(value float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, value)

	m.p.Call("remove", args...)
}

// Reset calls the Reset method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#reset
func (m *MultiLine) Reset() {

	m.p.Call("reset")
}

// ResetLinks calls the ResetLinks method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#resetlinks
func (m *MultiLine) ResetLinks() {

	m.p.Call("resetLinks")
}

// MultiLine_drawOpts contains optional parameters for MultiLine._draw.
type MultiLine_drawOpts struct {
	InvalidatedRectangle *Measure
}

// _draw calls the _draw method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#_draw
func (m *MultiLine) _draw(context js.Value, opts *MultiLine_drawOpts) {
	if opts == nil {
		opts = &MultiLine_drawOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, context)

	if opts.InvalidatedRectangle == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.InvalidatedRectangle.JSObject())
	}

	m.p.Call("_draw", args...)
}

// _measure calls the _measure method on the MultiLine object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#_measure
func (m *MultiLine) _measure() {

	m.p.Call("_measure")
}

/*

// AllowAlphaInheritance returns the AllowAlphaInheritance property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#allowalphainheritance
func (m *MultiLine) AllowAlphaInheritance(AllowAlphaInheritance bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(AllowAlphaInheritance)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetAllowAlphaInheritance sets the AllowAlphaInheritance property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#allowalphainheritance
func (m *MultiLine) SetAllowAlphaInheritance(AllowAlphaInheritance bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(AllowAlphaInheritance)
	return MultiLineFromJSObject(p, ba.ctx)
}

// Alpha returns the Alpha property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#alpha
func (m *MultiLine) Alpha(alpha float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(alpha)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetAlpha sets the Alpha property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#alpha
func (m *MultiLine) SetAlpha(alpha float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(alpha)
	return MultiLineFromJSObject(p, ba.ctx)
}

// CenterX returns the CenterX property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#centerx
func (m *MultiLine) CenterX(centerX float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(centerX)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetCenterX sets the CenterX property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#centerx
func (m *MultiLine) SetCenterX(centerX float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(centerX)
	return MultiLineFromJSObject(p, ba.ctx)
}

// CenterY returns the CenterY property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#centery
func (m *MultiLine) CenterY(centerY float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(centerY)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetCenterY sets the CenterY property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#centery
func (m *MultiLine) SetCenterY(centerY float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(centerY)
	return MultiLineFromJSObject(p, ba.ctx)
}

// ClipChildren returns the ClipChildren property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#clipchildren
func (m *MultiLine) ClipChildren(clipChildren bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(clipChildren)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetClipChildren sets the ClipChildren property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#clipchildren
func (m *MultiLine) SetClipChildren(clipChildren bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(clipChildren)
	return MultiLineFromJSObject(p, ba.ctx)
}

// ClipContent returns the ClipContent property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#clipcontent
func (m *MultiLine) ClipContent(clipContent bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(clipContent)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetClipContent sets the ClipContent property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#clipcontent
func (m *MultiLine) SetClipContent(clipContent bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(clipContent)
	return MultiLineFromJSObject(p, ba.ctx)
}

// Color returns the Color property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#color
func (m *MultiLine) Color(color string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(color)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetColor sets the Color property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#color
func (m *MultiLine) SetColor(color string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(color)
	return MultiLineFromJSObject(p, ba.ctx)
}

// Dash returns the Dash property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#dash
func (m *MultiLine) Dash(dash []float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(dash)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetDash sets the Dash property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#dash
func (m *MultiLine) SetDash(dash []float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(dash)
	return MultiLineFromJSObject(p, ba.ctx)
}

// DisabledColor returns the DisabledColor property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#disabledcolor
func (m *MultiLine) DisabledColor(disabledColor string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(disabledColor)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetDisabledColor sets the DisabledColor property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#disabledcolor
func (m *MultiLine) SetDisabledColor(disabledColor string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(disabledColor)
	return MultiLineFromJSObject(p, ba.ctx)
}

// FontFamily returns the FontFamily property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#fontfamily
func (m *MultiLine) FontFamily(fontFamily string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(fontFamily)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetFontFamily sets the FontFamily property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#fontfamily
func (m *MultiLine) SetFontFamily(fontFamily string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(fontFamily)
	return MultiLineFromJSObject(p, ba.ctx)
}

// FontOffset returns the FontOffset property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#fontoffset
func (m *MultiLine) FontOffset(fontOffset js.Value) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(fontOffset)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetFontOffset sets the FontOffset property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#fontoffset
func (m *MultiLine) SetFontOffset(fontOffset js.Value) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(fontOffset)
	return MultiLineFromJSObject(p, ba.ctx)
}

// FontSize returns the FontSize property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#fontsize
func (m *MultiLine) FontSize(fontSize string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(fontSize)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetFontSize sets the FontSize property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#fontsize
func (m *MultiLine) SetFontSize(fontSize string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(fontSize)
	return MultiLineFromJSObject(p, ba.ctx)
}

// FontSizeInPixels returns the FontSizeInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#fontsizeinpixels
func (m *MultiLine) FontSizeInPixels(fontSizeInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(fontSizeInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetFontSizeInPixels sets the FontSizeInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#fontsizeinpixels
func (m *MultiLine) SetFontSizeInPixels(fontSizeInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(fontSizeInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// FontStyle returns the FontStyle property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#fontstyle
func (m *MultiLine) FontStyle(fontStyle string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(fontStyle)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetFontStyle sets the FontStyle property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#fontstyle
func (m *MultiLine) SetFontStyle(fontStyle string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(fontStyle)
	return MultiLineFromJSObject(p, ba.ctx)
}

// FontWeight returns the FontWeight property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#fontweight
func (m *MultiLine) FontWeight(fontWeight string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(fontWeight)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetFontWeight sets the FontWeight property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#fontweight
func (m *MultiLine) SetFontWeight(fontWeight string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(fontWeight)
	return MultiLineFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_CENTER returns the HORIZONTAL_ALIGNMENT_CENTER property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#horizontal_alignment_center
func (m *MultiLine) HORIZONTAL_ALIGNMENT_CENTER(HORIZONTAL_ALIGNMENT_CENTER float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(HORIZONTAL_ALIGNMENT_CENTER)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_CENTER sets the HORIZONTAL_ALIGNMENT_CENTER property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#horizontal_alignment_center
func (m *MultiLine) SetHORIZONTAL_ALIGNMENT_CENTER(HORIZONTAL_ALIGNMENT_CENTER float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(HORIZONTAL_ALIGNMENT_CENTER)
	return MultiLineFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_LEFT returns the HORIZONTAL_ALIGNMENT_LEFT property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#horizontal_alignment_left
func (m *MultiLine) HORIZONTAL_ALIGNMENT_LEFT(HORIZONTAL_ALIGNMENT_LEFT float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(HORIZONTAL_ALIGNMENT_LEFT)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_LEFT sets the HORIZONTAL_ALIGNMENT_LEFT property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#horizontal_alignment_left
func (m *MultiLine) SetHORIZONTAL_ALIGNMENT_LEFT(HORIZONTAL_ALIGNMENT_LEFT float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(HORIZONTAL_ALIGNMENT_LEFT)
	return MultiLineFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_RIGHT returns the HORIZONTAL_ALIGNMENT_RIGHT property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#horizontal_alignment_right
func (m *MultiLine) HORIZONTAL_ALIGNMENT_RIGHT(HORIZONTAL_ALIGNMENT_RIGHT float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(HORIZONTAL_ALIGNMENT_RIGHT)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_RIGHT sets the HORIZONTAL_ALIGNMENT_RIGHT property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#horizontal_alignment_right
func (m *MultiLine) SetHORIZONTAL_ALIGNMENT_RIGHT(HORIZONTAL_ALIGNMENT_RIGHT float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(HORIZONTAL_ALIGNMENT_RIGHT)
	return MultiLineFromJSObject(p, ba.ctx)
}

// Height returns the Height property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#height
func (m *MultiLine) Height(height string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(height)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetHeight sets the Height property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#height
func (m *MultiLine) SetHeight(height string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(height)
	return MultiLineFromJSObject(p, ba.ctx)
}

// HeightInPixels returns the HeightInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#heightinpixels
func (m *MultiLine) HeightInPixels(heightInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(heightInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetHeightInPixels sets the HeightInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#heightinpixels
func (m *MultiLine) SetHeightInPixels(heightInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(heightInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// HorizontalAlignment returns the HorizontalAlignment property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#horizontalalignment
func (m *MultiLine) HorizontalAlignment(horizontalAlignment float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(horizontalAlignment)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetHorizontalAlignment sets the HorizontalAlignment property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#horizontalalignment
func (m *MultiLine) SetHorizontalAlignment(horizontalAlignment float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(horizontalAlignment)
	return MultiLineFromJSObject(p, ba.ctx)
}

// Host returns the Host property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#host
func (m *MultiLine) Host(host *AdvancedDynamicTexture) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(host.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetHost sets the Host property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#host
func (m *MultiLine) SetHost(host *AdvancedDynamicTexture) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(host.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// HoverCursor returns the HoverCursor property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#hovercursor
func (m *MultiLine) HoverCursor(hoverCursor string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(hoverCursor)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetHoverCursor sets the HoverCursor property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#hovercursor
func (m *MultiLine) SetHoverCursor(hoverCursor string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(hoverCursor)
	return MultiLineFromJSObject(p, ba.ctx)
}

// IsDirty returns the IsDirty property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#isdirty
func (m *MultiLine) IsDirty(isDirty bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(isDirty)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetIsDirty sets the IsDirty property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#isdirty
func (m *MultiLine) SetIsDirty(isDirty bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(isDirty)
	return MultiLineFromJSObject(p, ba.ctx)
}

// IsEnabled returns the IsEnabled property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#isenabled
func (m *MultiLine) IsEnabled(isEnabled bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(isEnabled)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetIsEnabled sets the IsEnabled property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#isenabled
func (m *MultiLine) SetIsEnabled(isEnabled bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(isEnabled)
	return MultiLineFromJSObject(p, ba.ctx)
}

// IsFocusInvisible returns the IsFocusInvisible property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#isfocusinvisible
func (m *MultiLine) IsFocusInvisible(isFocusInvisible bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(isFocusInvisible)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetIsFocusInvisible sets the IsFocusInvisible property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#isfocusinvisible
func (m *MultiLine) SetIsFocusInvisible(isFocusInvisible bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(isFocusInvisible)
	return MultiLineFromJSObject(p, ba.ctx)
}

// IsHighlighted returns the IsHighlighted property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#ishighlighted
func (m *MultiLine) IsHighlighted(isHighlighted bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(isHighlighted)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetIsHighlighted sets the IsHighlighted property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#ishighlighted
func (m *MultiLine) SetIsHighlighted(isHighlighted bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(isHighlighted)
	return MultiLineFromJSObject(p, ba.ctx)
}

// IsHitTestVisible returns the IsHitTestVisible property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#ishittestvisible
func (m *MultiLine) IsHitTestVisible(isHitTestVisible bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(isHitTestVisible)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetIsHitTestVisible sets the IsHitTestVisible property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#ishittestvisible
func (m *MultiLine) SetIsHitTestVisible(isHitTestVisible bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(isHitTestVisible)
	return MultiLineFromJSObject(p, ba.ctx)
}

// IsPointerBlocker returns the IsPointerBlocker property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#ispointerblocker
func (m *MultiLine) IsPointerBlocker(isPointerBlocker bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(isPointerBlocker)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetIsPointerBlocker sets the IsPointerBlocker property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#ispointerblocker
func (m *MultiLine) SetIsPointerBlocker(isPointerBlocker bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(isPointerBlocker)
	return MultiLineFromJSObject(p, ba.ctx)
}

// IsVisible returns the IsVisible property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#isvisible
func (m *MultiLine) IsVisible(isVisible bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(isVisible)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetIsVisible sets the IsVisible property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#isvisible
func (m *MultiLine) SetIsVisible(isVisible bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(isVisible)
	return MultiLineFromJSObject(p, ba.ctx)
}

// Left returns the Left property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#left
func (m *MultiLine) Left(left string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(left)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#left
func (m *MultiLine) SetLeft(left string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(left)
	return MultiLineFromJSObject(p, ba.ctx)
}

// LeftInPixels returns the LeftInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#leftinpixels
func (m *MultiLine) LeftInPixels(leftInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(leftInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetLeftInPixels sets the LeftInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#leftinpixels
func (m *MultiLine) SetLeftInPixels(leftInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(leftInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// LineWidth returns the LineWidth property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#linewidth
func (m *MultiLine) LineWidth(lineWidth float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(lineWidth)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetLineWidth sets the LineWidth property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#linewidth
func (m *MultiLine) SetLineWidth(lineWidth float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(lineWidth)
	return MultiLineFromJSObject(p, ba.ctx)
}

// LinkOffsetX returns the LinkOffsetX property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#linkoffsetx
func (m *MultiLine) LinkOffsetX(linkOffsetX string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(linkOffsetX)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetLinkOffsetX sets the LinkOffsetX property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#linkoffsetx
func (m *MultiLine) SetLinkOffsetX(linkOffsetX string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(linkOffsetX)
	return MultiLineFromJSObject(p, ba.ctx)
}

// LinkOffsetXInPixels returns the LinkOffsetXInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#linkoffsetxinpixels
func (m *MultiLine) LinkOffsetXInPixels(linkOffsetXInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(linkOffsetXInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetLinkOffsetXInPixels sets the LinkOffsetXInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#linkoffsetxinpixels
func (m *MultiLine) SetLinkOffsetXInPixels(linkOffsetXInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(linkOffsetXInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// LinkOffsetY returns the LinkOffsetY property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#linkoffsety
func (m *MultiLine) LinkOffsetY(linkOffsetY string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(linkOffsetY)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetLinkOffsetY sets the LinkOffsetY property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#linkoffsety
func (m *MultiLine) SetLinkOffsetY(linkOffsetY string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(linkOffsetY)
	return MultiLineFromJSObject(p, ba.ctx)
}

// LinkOffsetYInPixels returns the LinkOffsetYInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#linkoffsetyinpixels
func (m *MultiLine) LinkOffsetYInPixels(linkOffsetYInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(linkOffsetYInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetLinkOffsetYInPixels sets the LinkOffsetYInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#linkoffsetyinpixels
func (m *MultiLine) SetLinkOffsetYInPixels(linkOffsetYInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(linkOffsetYInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// LinkedMesh returns the LinkedMesh property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#linkedmesh
func (m *MultiLine) LinkedMesh(linkedMesh *AbstractMesh) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(linkedMesh.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetLinkedMesh sets the LinkedMesh property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#linkedmesh
func (m *MultiLine) SetLinkedMesh(linkedMesh *AbstractMesh) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(linkedMesh.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#metadata
func (m *MultiLine) Metadata(metadata interface{}) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(metadata)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#metadata
func (m *MultiLine) SetMetadata(metadata interface{}) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(metadata)
	return MultiLineFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#name
func (m *MultiLine) Name(name string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(name)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#name
func (m *MultiLine) SetName(name string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(name)
	return MultiLineFromJSObject(p, ba.ctx)
}

// NotRenderable returns the NotRenderable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#notrenderable
func (m *MultiLine) NotRenderable(notRenderable bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(notRenderable)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetNotRenderable sets the NotRenderable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#notrenderable
func (m *MultiLine) SetNotRenderable(notRenderable bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(notRenderable)
	return MultiLineFromJSObject(p, ba.ctx)
}

// OnAfterDrawObservable returns the OnAfterDrawObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onafterdrawobservable
func (m *MultiLine) OnAfterDrawObservable(onAfterDrawObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onAfterDrawObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetOnAfterDrawObservable sets the OnAfterDrawObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onafterdrawobservable
func (m *MultiLine) SetOnAfterDrawObservable(onAfterDrawObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onAfterDrawObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// OnBeforeDrawObservable returns the OnBeforeDrawObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onbeforedrawobservable
func (m *MultiLine) OnBeforeDrawObservable(onBeforeDrawObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onBeforeDrawObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetOnBeforeDrawObservable sets the OnBeforeDrawObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onbeforedrawobservable
func (m *MultiLine) SetOnBeforeDrawObservable(onBeforeDrawObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onBeforeDrawObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// OnDirtyObservable returns the OnDirtyObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#ondirtyobservable
func (m *MultiLine) OnDirtyObservable(onDirtyObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onDirtyObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetOnDirtyObservable sets the OnDirtyObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#ondirtyobservable
func (m *MultiLine) SetOnDirtyObservable(onDirtyObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onDirtyObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// OnPointUpdate returns the OnPointUpdate property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onpointupdate
func (m *MultiLine) OnPointUpdate(onPointUpdate func()) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onPointUpdate(); return nil}))
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetOnPointUpdate sets the OnPointUpdate property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onpointupdate
func (m *MultiLine) SetOnPointUpdate(onPointUpdate func()) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onPointUpdate(); return nil}))
	return MultiLineFromJSObject(p, ba.ctx)
}

// OnPointerClickObservable returns the OnPointerClickObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onpointerclickobservable
func (m *MultiLine) OnPointerClickObservable(onPointerClickObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onPointerClickObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetOnPointerClickObservable sets the OnPointerClickObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onpointerclickobservable
func (m *MultiLine) SetOnPointerClickObservable(onPointerClickObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onPointerClickObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// OnPointerDownObservable returns the OnPointerDownObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onpointerdownobservable
func (m *MultiLine) OnPointerDownObservable(onPointerDownObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onPointerDownObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetOnPointerDownObservable sets the OnPointerDownObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onpointerdownobservable
func (m *MultiLine) SetOnPointerDownObservable(onPointerDownObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onPointerDownObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// OnPointerEnterObservable returns the OnPointerEnterObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onpointerenterobservable
func (m *MultiLine) OnPointerEnterObservable(onPointerEnterObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onPointerEnterObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetOnPointerEnterObservable sets the OnPointerEnterObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onpointerenterobservable
func (m *MultiLine) SetOnPointerEnterObservable(onPointerEnterObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onPointerEnterObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// OnPointerMoveObservable returns the OnPointerMoveObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onpointermoveobservable
func (m *MultiLine) OnPointerMoveObservable(onPointerMoveObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onPointerMoveObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetOnPointerMoveObservable sets the OnPointerMoveObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onpointermoveobservable
func (m *MultiLine) SetOnPointerMoveObservable(onPointerMoveObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onPointerMoveObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// OnPointerOutObservable returns the OnPointerOutObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onpointeroutobservable
func (m *MultiLine) OnPointerOutObservable(onPointerOutObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onPointerOutObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetOnPointerOutObservable sets the OnPointerOutObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onpointeroutobservable
func (m *MultiLine) SetOnPointerOutObservable(onPointerOutObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onPointerOutObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// OnPointerUpObservable returns the OnPointerUpObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onpointerupobservable
func (m *MultiLine) OnPointerUpObservable(onPointerUpObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onPointerUpObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetOnPointerUpObservable sets the OnPointerUpObservable property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#onpointerupobservable
func (m *MultiLine) SetOnPointerUpObservable(onPointerUpObservable *Observable) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(onPointerUpObservable.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// PaddingBottom returns the PaddingBottom property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingbottom
func (m *MultiLine) PaddingBottom(paddingBottom string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingBottom)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetPaddingBottom sets the PaddingBottom property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingbottom
func (m *MultiLine) SetPaddingBottom(paddingBottom string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingBottom)
	return MultiLineFromJSObject(p, ba.ctx)
}

// PaddingBottomInPixels returns the PaddingBottomInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingbottominpixels
func (m *MultiLine) PaddingBottomInPixels(paddingBottomInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingBottomInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetPaddingBottomInPixels sets the PaddingBottomInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingbottominpixels
func (m *MultiLine) SetPaddingBottomInPixels(paddingBottomInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingBottomInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// PaddingLeft returns the PaddingLeft property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingleft
func (m *MultiLine) PaddingLeft(paddingLeft string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingLeft)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetPaddingLeft sets the PaddingLeft property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingleft
func (m *MultiLine) SetPaddingLeft(paddingLeft string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingLeft)
	return MultiLineFromJSObject(p, ba.ctx)
}

// PaddingLeftInPixels returns the PaddingLeftInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingleftinpixels
func (m *MultiLine) PaddingLeftInPixels(paddingLeftInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingLeftInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetPaddingLeftInPixels sets the PaddingLeftInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingleftinpixels
func (m *MultiLine) SetPaddingLeftInPixels(paddingLeftInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingLeftInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// PaddingRight returns the PaddingRight property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingright
func (m *MultiLine) PaddingRight(paddingRight string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingRight)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetPaddingRight sets the PaddingRight property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingright
func (m *MultiLine) SetPaddingRight(paddingRight string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingRight)
	return MultiLineFromJSObject(p, ba.ctx)
}

// PaddingRightInPixels returns the PaddingRightInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingrightinpixels
func (m *MultiLine) PaddingRightInPixels(paddingRightInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingRightInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetPaddingRightInPixels sets the PaddingRightInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingrightinpixels
func (m *MultiLine) SetPaddingRightInPixels(paddingRightInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingRightInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// PaddingTop returns the PaddingTop property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingtop
func (m *MultiLine) PaddingTop(paddingTop string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingTop)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetPaddingTop sets the PaddingTop property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingtop
func (m *MultiLine) SetPaddingTop(paddingTop string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingTop)
	return MultiLineFromJSObject(p, ba.ctx)
}

// PaddingTopInPixels returns the PaddingTopInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingtopinpixels
func (m *MultiLine) PaddingTopInPixels(paddingTopInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingTopInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetPaddingTopInPixels sets the PaddingTopInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#paddingtopinpixels
func (m *MultiLine) SetPaddingTopInPixels(paddingTopInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(paddingTopInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// Parent returns the Parent property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#parent
func (m *MultiLine) Parent(parent *Container) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(parent.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetParent sets the Parent property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#parent
func (m *MultiLine) SetParent(parent *Container) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(parent.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// Rotation returns the Rotation property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#rotation
func (m *MultiLine) Rotation(rotation float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(rotation)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetRotation sets the Rotation property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#rotation
func (m *MultiLine) SetRotation(rotation float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(rotation)
	return MultiLineFromJSObject(p, ba.ctx)
}

// ScaleX returns the ScaleX property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#scalex
func (m *MultiLine) ScaleX(scaleX float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(scaleX)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetScaleX sets the ScaleX property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#scalex
func (m *MultiLine) SetScaleX(scaleX float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(scaleX)
	return MultiLineFromJSObject(p, ba.ctx)
}

// ScaleY returns the ScaleY property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#scaley
func (m *MultiLine) ScaleY(scaleY float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(scaleY)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetScaleY sets the ScaleY property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#scaley
func (m *MultiLine) SetScaleY(scaleY float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(scaleY)
	return MultiLineFromJSObject(p, ba.ctx)
}

// ShadowBlur returns the ShadowBlur property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#shadowblur
func (m *MultiLine) ShadowBlur(shadowBlur float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(shadowBlur)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetShadowBlur sets the ShadowBlur property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#shadowblur
func (m *MultiLine) SetShadowBlur(shadowBlur float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(shadowBlur)
	return MultiLineFromJSObject(p, ba.ctx)
}

// ShadowColor returns the ShadowColor property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#shadowcolor
func (m *MultiLine) ShadowColor(shadowColor string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(shadowColor)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetShadowColor sets the ShadowColor property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#shadowcolor
func (m *MultiLine) SetShadowColor(shadowColor string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(shadowColor)
	return MultiLineFromJSObject(p, ba.ctx)
}

// ShadowOffsetX returns the ShadowOffsetX property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#shadowoffsetx
func (m *MultiLine) ShadowOffsetX(shadowOffsetX float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(shadowOffsetX)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetShadowOffsetX sets the ShadowOffsetX property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#shadowoffsetx
func (m *MultiLine) SetShadowOffsetX(shadowOffsetX float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(shadowOffsetX)
	return MultiLineFromJSObject(p, ba.ctx)
}

// ShadowOffsetY returns the ShadowOffsetY property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#shadowoffsety
func (m *MultiLine) ShadowOffsetY(shadowOffsetY float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(shadowOffsetY)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetShadowOffsetY sets the ShadowOffsetY property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#shadowoffsety
func (m *MultiLine) SetShadowOffsetY(shadowOffsetY float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(shadowOffsetY)
	return MultiLineFromJSObject(p, ba.ctx)
}

// Style returns the Style property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#style
func (m *MultiLine) Style(style *Style) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(style.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetStyle sets the Style property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#style
func (m *MultiLine) SetStyle(style *Style) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(style.JSObject())
	return MultiLineFromJSObject(p, ba.ctx)
}

// Top returns the Top property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#top
func (m *MultiLine) Top(top string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(top)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetTop sets the Top property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#top
func (m *MultiLine) SetTop(top string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(top)
	return MultiLineFromJSObject(p, ba.ctx)
}

// TopInPixels returns the TopInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#topinpixels
func (m *MultiLine) TopInPixels(topInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(topInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetTopInPixels sets the TopInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#topinpixels
func (m *MultiLine) SetTopInPixels(topInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(topInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// TransformCenterX returns the TransformCenterX property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#transformcenterx
func (m *MultiLine) TransformCenterX(transformCenterX float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(transformCenterX)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetTransformCenterX sets the TransformCenterX property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#transformcenterx
func (m *MultiLine) SetTransformCenterX(transformCenterX float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(transformCenterX)
	return MultiLineFromJSObject(p, ba.ctx)
}

// TransformCenterY returns the TransformCenterY property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#transformcentery
func (m *MultiLine) TransformCenterY(transformCenterY float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(transformCenterY)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetTransformCenterY sets the TransformCenterY property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#transformcentery
func (m *MultiLine) SetTransformCenterY(transformCenterY float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(transformCenterY)
	return MultiLineFromJSObject(p, ba.ctx)
}

// TypeName returns the TypeName property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#typename
func (m *MultiLine) TypeName(typeName string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(typeName)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetTypeName sets the TypeName property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#typename
func (m *MultiLine) SetTypeName(typeName string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(typeName)
	return MultiLineFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#uniqueid
func (m *MultiLine) UniqueId(uniqueId float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(uniqueId)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#uniqueid
func (m *MultiLine) SetUniqueId(uniqueId float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(uniqueId)
	return MultiLineFromJSObject(p, ba.ctx)
}

// UseBitmapCache returns the UseBitmapCache property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#usebitmapcache
func (m *MultiLine) UseBitmapCache(useBitmapCache bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(useBitmapCache)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetUseBitmapCache sets the UseBitmapCache property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#usebitmapcache
func (m *MultiLine) SetUseBitmapCache(useBitmapCache bool) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(useBitmapCache)
	return MultiLineFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_BOTTOM returns the VERTICAL_ALIGNMENT_BOTTOM property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#vertical_alignment_bottom
func (m *MultiLine) VERTICAL_ALIGNMENT_BOTTOM(VERTICAL_ALIGNMENT_BOTTOM float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(VERTICAL_ALIGNMENT_BOTTOM)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_BOTTOM sets the VERTICAL_ALIGNMENT_BOTTOM property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#vertical_alignment_bottom
func (m *MultiLine) SetVERTICAL_ALIGNMENT_BOTTOM(VERTICAL_ALIGNMENT_BOTTOM float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(VERTICAL_ALIGNMENT_BOTTOM)
	return MultiLineFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_CENTER returns the VERTICAL_ALIGNMENT_CENTER property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#vertical_alignment_center
func (m *MultiLine) VERTICAL_ALIGNMENT_CENTER(VERTICAL_ALIGNMENT_CENTER float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(VERTICAL_ALIGNMENT_CENTER)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_CENTER sets the VERTICAL_ALIGNMENT_CENTER property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#vertical_alignment_center
func (m *MultiLine) SetVERTICAL_ALIGNMENT_CENTER(VERTICAL_ALIGNMENT_CENTER float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(VERTICAL_ALIGNMENT_CENTER)
	return MultiLineFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_TOP returns the VERTICAL_ALIGNMENT_TOP property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#vertical_alignment_top
func (m *MultiLine) VERTICAL_ALIGNMENT_TOP(VERTICAL_ALIGNMENT_TOP float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(VERTICAL_ALIGNMENT_TOP)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_TOP sets the VERTICAL_ALIGNMENT_TOP property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#vertical_alignment_top
func (m *MultiLine) SetVERTICAL_ALIGNMENT_TOP(VERTICAL_ALIGNMENT_TOP float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(VERTICAL_ALIGNMENT_TOP)
	return MultiLineFromJSObject(p, ba.ctx)
}

// VerticalAlignment returns the VerticalAlignment property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#verticalalignment
func (m *MultiLine) VerticalAlignment(verticalAlignment float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(verticalAlignment)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetVerticalAlignment sets the VerticalAlignment property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#verticalalignment
func (m *MultiLine) SetVerticalAlignment(verticalAlignment float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(verticalAlignment)
	return MultiLineFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#width
func (m *MultiLine) Width(width string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(width)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#width
func (m *MultiLine) SetWidth(width string) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(width)
	return MultiLineFromJSObject(p, ba.ctx)
}

// WidthInPixels returns the WidthInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#widthinpixels
func (m *MultiLine) WidthInPixels(widthInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(widthInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetWidthInPixels sets the WidthInPixels property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#widthinpixels
func (m *MultiLine) SetWidthInPixels(widthInPixels float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(widthInPixels)
	return MultiLineFromJSObject(p, ba.ctx)
}

// ZIndex returns the ZIndex property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#zindex
func (m *MultiLine) ZIndex(zIndex float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(zIndex)
	return MultiLineFromJSObject(p, ba.ctx)
}

// SetZIndex sets the ZIndex property of class MultiLine.
//
// https://doc.babylonjs.com/api/classes/babylon.multiline#zindex
func (m *MultiLine) SetZIndex(zIndex float64) *MultiLine {
	p := ba.ctx.Get("MultiLine").New(zIndex)
	return MultiLineFromJSObject(p, ba.ctx)
}

*/
