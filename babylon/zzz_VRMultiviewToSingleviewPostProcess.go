// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// VRMultiviewToSingleviewPostProcess represents a babylon.js VRMultiviewToSingleviewPostProcess.
// VRMultiviewToSingleview used to convert multiview texture arrays to standard textures for scenarios such as webVR
// This will not be used for webXR as it supports displaying texture arrays directly
type VRMultiviewToSingleviewPostProcess struct{ *PostProcess }

// JSObject returns the underlying js.Value.
func (v *VRMultiviewToSingleviewPostProcess) JSObject() js.Value { return v.p }

// VRMultiviewToSingleviewPostProcess returns a VRMultiviewToSingleviewPostProcess JavaScript class.
func (ba *Babylon) VRMultiviewToSingleviewPostProcess() *VRMultiviewToSingleviewPostProcess {
	p := ba.ctx.Get("VRMultiviewToSingleviewPostProcess")
	return VRMultiviewToSingleviewPostProcessFromJSObject(p)
}

// VRMultiviewToSingleviewPostProcessFromJSObject returns a wrapped VRMultiviewToSingleviewPostProcess JavaScript class.
func VRMultiviewToSingleviewPostProcessFromJSObject(p js.Value) *VRMultiviewToSingleviewPostProcess {
	return &VRMultiviewToSingleviewPostProcess{PostProcessFromJSObject(p)}
}

// NewVRMultiviewToSingleviewPostProcess returns a new VRMultiviewToSingleviewPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrmultiviewtosingleviewpostprocess
func (ba *Babylon) NewVRMultiviewToSingleviewPostProcess(name string, camera *Camera, scaleFactor float64) *VRMultiviewToSingleviewPostProcess {
	p := ba.ctx.Get("VRMultiviewToSingleviewPostProcess").New(name, camera.JSObject(), scaleFactor)
	return VRMultiviewToSingleviewPostProcessFromJSObject(p)
}

// TODO: methods
