// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CylinderParticleEmitter represents a babylon.js CylinderParticleEmitter.
// Particle emitter emitting particles from the inside of a cylinder.
// It emits the particles alongside the cylinder radius. The emission direction might be randomized.
type CylinderParticleEmitter struct{ p js.Value }

// JSObject returns the underlying js.Value.
func (c *CylinderParticleEmitter) JSObject() js.Value { return c.p }

// CylinderParticleEmitter returns a CylinderParticleEmitter JavaScript class.
func (b *Babylon) CylinderParticleEmitter() *CylinderParticleEmitter {
	p := b.ctx.Get("CylinderParticleEmitter")
	return CylinderParticleEmitterFromJSObject(p)
}

// CylinderParticleEmitterFromJSObject returns a wrapped CylinderParticleEmitter JavaScript class.
func CylinderParticleEmitterFromJSObject(p js.Value) *CylinderParticleEmitter {
	return &CylinderParticleEmitter{p: p}
}

// NewCylinderParticleEmitterOpts contains optional parameters for NewCylinderParticleEmitter.
type NewCylinderParticleEmitterOpts struct {
	Radius *float64

	Height *float64

	RadiusRange *float64

	DirectionRandomizer *float64
}

// NewCylinderParticleEmitter returns a new CylinderParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.cylinderparticleemitter
func (b *Babylon) NewCylinderParticleEmitter(opts *NewCylinderParticleEmitterOpts) *CylinderParticleEmitter {
	if opts == nil {
		opts = &NewCylinderParticleEmitterOpts{}
	}

	p := b.ctx.Get("CylinderParticleEmitter").New(opts.Radius, opts.Height, opts.RadiusRange, opts.DirectionRandomizer)
	return CylinderParticleEmitterFromJSObject(p)
}

// TODO: methods
