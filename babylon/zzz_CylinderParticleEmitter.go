// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CylinderParticleEmitter represents a babylon.js CylinderParticleEmitter.
// Particle emitter emitting particles from the inside of a cylinder.
// It emits the particles alongside the cylinder radius. The emission direction might be randomized.
type CylinderParticleEmitter struct{}

// JSObject returns the underlying js.Value.
func (c *CylinderParticleEmitter) JSObject() js.Value { return c.p }

// CylinderParticleEmitter returns a CylinderParticleEmitter JavaScript class.
func (b *Babylon) CylinderParticleEmitter() *CylinderParticleEmitter {
	p := b.ctx.Get("CylinderParticleEmitter")
	return CylinderParticleEmitterFromJSObject(p)
}

// CylinderParticleEmitterFromJSObject returns a wrapped CylinderParticleEmitter JavaScript class.
func CylinderParticleEmitterFromJSObject(p js.Value) *CylinderParticleEmitter {
	return &CylinderParticleEmitter{p: p}
}

// NewCylinderParticleEmitter returns a new CylinderParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.cylinderparticleemitter
func (b *Babylon) NewCylinderParticleEmitter(todo parameters) *CylinderParticleEmitter {
	p := b.ctx.Get("CylinderParticleEmitter").New(todo)
	return CylinderParticleEmitterFromJSObject(p)
}

// TODO: methods
