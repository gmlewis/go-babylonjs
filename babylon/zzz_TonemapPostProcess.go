// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TonemapPostProcess represents a babylon.js TonemapPostProcess.
// Defines a post process to apply tone mapping
type TonemapPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (t *TonemapPostProcess) JSObject() js.Value { return t.p }

// TonemapPostProcess returns a TonemapPostProcess JavaScript class.
func (ba *Babylon) TonemapPostProcess() *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess")
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// TonemapPostProcessFromJSObject returns a wrapped TonemapPostProcess JavaScript class.
func TonemapPostProcessFromJSObject(p js.Value, ctx js.Value) *TonemapPostProcess {
	return &TonemapPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// NewTonemapPostProcessOpts contains optional parameters for NewTonemapPostProcess.
type NewTonemapPostProcessOpts struct {
	SamplingMode  *float64
	Engine        *Engine
	TextureFormat *float64
}

// NewTonemapPostProcess returns a new TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess
func (ba *Babylon) NewTonemapPostProcess(name string, _operator *TonemappingOperator, exposureAdjustment float64, camera *Camera, opts *NewTonemapPostProcessOpts) *TonemapPostProcess {
	if opts == nil {
		opts = &NewTonemapPostProcessOpts{}
	}

	args := make([]interface{}, 0, 4+3)

	args = append(args, name)
	args = append(args, _operator.JSObject())
	args = append(args, exposureAdjustment)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.TextureFormat == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureFormat)
	}

	p := ba.ctx.Get("TonemapPostProcess").New(args...)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// TonemapPostProcessActivateOpts contains optional parameters for TonemapPostProcess.Activate.
type TonemapPostProcessActivateOpts struct {
	SourceTexture     *InternalTexture
	ForceDepthStencil *bool
}

// Activate calls the Activate method on the TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#activate
func (t *TonemapPostProcess) Activate(camera *Camera, opts *TonemapPostProcessActivateOpts) *InternalTexture {
	if opts == nil {
		opts = &TonemapPostProcessActivateOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, camera.JSObject())

	if opts.SourceTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.SourceTexture.JSObject())
	}
	if opts.ForceDepthStencil == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDepthStencil)
	}

	retVal := t.p.Call("activate", args...)
	return InternalTextureFromJSObject(retVal, t.ctx)
}

// Apply calls the Apply method on the TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#apply
func (t *TonemapPostProcess) Apply() *Effect {

	args := make([]interface{}, 0, 0+0)

	retVal := t.p.Call("apply", args...)
	return EffectFromJSObject(retVal, t.ctx)
}

// TonemapPostProcessDisposeOpts contains optional parameters for TonemapPostProcess.Dispose.
type TonemapPostProcessDisposeOpts struct {
	Camera *Camera
}

// Dispose calls the Dispose method on the TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#dispose
func (t *TonemapPostProcess) Dispose(opts *TonemapPostProcessDisposeOpts) {
	if opts == nil {
		opts = &TonemapPostProcessDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}

	t.p.Call("dispose", args...)
}

// GetCamera calls the GetCamera method on the TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#getcamera
func (t *TonemapPostProcess) GetCamera() *Camera {

	args := make([]interface{}, 0, 0+0)

	retVal := t.p.Call("getCamera", args...)
	return CameraFromJSObject(retVal, t.ctx)
}

// GetClassName calls the GetClassName method on the TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#getclassname
func (t *TonemapPostProcess) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := t.p.Call("getClassName", args...)
	return retVal.String()
}

// GetEffect calls the GetEffect method on the TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#geteffect
func (t *TonemapPostProcess) GetEffect() *Effect {

	args := make([]interface{}, 0, 0+0)

	retVal := t.p.Call("getEffect", args...)
	return EffectFromJSObject(retVal, t.ctx)
}

// GetEffectName calls the GetEffectName method on the TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#geteffectname
func (t *TonemapPostProcess) GetEffectName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := t.p.Call("getEffectName", args...)
	return retVal.String()
}

// GetEngine calls the GetEngine method on the TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#getengine
func (t *TonemapPostProcess) GetEngine() *Engine {

	args := make([]interface{}, 0, 0+0)

	retVal := t.p.Call("getEngine", args...)
	return EngineFromJSObject(retVal, t.ctx)
}

// IsReady calls the IsReady method on the TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#isready
func (t *TonemapPostProcess) IsReady() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := t.p.Call("isReady", args...)
	return retVal.Bool()
}

// IsReusable calls the IsReusable method on the TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#isreusable
func (t *TonemapPostProcess) IsReusable() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := t.p.Call("isReusable", args...)
	return retVal.Bool()
}

// MarkTextureDirty calls the MarkTextureDirty method on the TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#marktexturedirty
func (t *TonemapPostProcess) MarkTextureDirty() {

	args := make([]interface{}, 0, 0+0)

	t.p.Call("markTextureDirty", args...)
}

// ShareOutputWith calls the ShareOutputWith method on the TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#shareoutputwith
func (t *TonemapPostProcess) ShareOutputWith(postProcess *PostProcess) *PostProcess {

	args := make([]interface{}, 0, 1+0)

	args = append(args, postProcess.JSObject())

	retVal := t.p.Call("shareOutputWith", args...)
	return PostProcessFromJSObject(retVal, t.ctx)
}

// TonemapPostProcessUpdateEffectOpts contains optional parameters for TonemapPostProcess.UpdateEffect.
type TonemapPostProcessUpdateEffectOpts struct {
	Defines         *string
	Uniforms        *string
	Samplers        *string
	IndexParameters *interface{}
	OnCompiled      *func()
	OnError         *func()
}

// UpdateEffect calls the UpdateEffect method on the TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#updateeffect
func (t *TonemapPostProcess) UpdateEffect(opts *TonemapPostProcessUpdateEffectOpts) {
	if opts == nil {
		opts = &TonemapPostProcessUpdateEffectOpts{}
	}

	args := make([]interface{}, 0, 0+6)

	if opts.Defines == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Defines)
	}
	if opts.Uniforms == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Uniforms)
	}
	if opts.Samplers == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Samplers)
	}
	if opts.IndexParameters == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.IndexParameters)
	}
	if opts.OnCompiled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnCompiled)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}

	t.p.Call("updateEffect", args...)
}

// UseOwnOutput calls the UseOwnOutput method on the TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#useownoutput
func (t *TonemapPostProcess) UseOwnOutput() {

	args := make([]interface{}, 0, 0+0)

	t.p.Call("useOwnOutput", args...)
}

/*

// AdaptScaleToCurrentViewport returns the AdaptScaleToCurrentViewport property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#adaptscaletocurrentviewport
func (t *TonemapPostProcess) AdaptScaleToCurrentViewport(adaptScaleToCurrentViewport bool) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(adaptScaleToCurrentViewport)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetAdaptScaleToCurrentViewport sets the AdaptScaleToCurrentViewport property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#adaptscaletocurrentviewport
func (t *TonemapPostProcess) SetAdaptScaleToCurrentViewport(adaptScaleToCurrentViewport bool) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(adaptScaleToCurrentViewport)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// AlphaConstants returns the AlphaConstants property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#alphaconstants
func (t *TonemapPostProcess) AlphaConstants(alphaConstants *Color4) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(alphaConstants.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetAlphaConstants sets the AlphaConstants property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#alphaconstants
func (t *TonemapPostProcess) SetAlphaConstants(alphaConstants *Color4) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(alphaConstants.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// AlphaMode returns the AlphaMode property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#alphamode
func (t *TonemapPostProcess) AlphaMode(alphaMode float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(alphaMode)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetAlphaMode sets the AlphaMode property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#alphamode
func (t *TonemapPostProcess) SetAlphaMode(alphaMode float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(alphaMode)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// AlwaysForcePOT returns the AlwaysForcePOT property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#alwaysforcepot
func (t *TonemapPostProcess) AlwaysForcePOT(alwaysForcePOT bool) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(alwaysForcePOT)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetAlwaysForcePOT sets the AlwaysForcePOT property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#alwaysforcepot
func (t *TonemapPostProcess) SetAlwaysForcePOT(alwaysForcePOT bool) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(alwaysForcePOT)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// Animations returns the Animations property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#animations
func (t *TonemapPostProcess) Animations(animations *Animation) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(animations.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#animations
func (t *TonemapPostProcess) SetAnimations(animations *Animation) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(animations.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// AspectRatio returns the AspectRatio property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#aspectratio
func (t *TonemapPostProcess) AspectRatio(aspectRatio float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(aspectRatio)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetAspectRatio sets the AspectRatio property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#aspectratio
func (t *TonemapPostProcess) SetAspectRatio(aspectRatio float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(aspectRatio)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// AutoClear returns the AutoClear property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#autoclear
func (t *TonemapPostProcess) AutoClear(autoClear bool) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(autoClear)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetAutoClear sets the AutoClear property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#autoclear
func (t *TonemapPostProcess) SetAutoClear(autoClear bool) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(autoClear)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// ClearColor returns the ClearColor property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#clearcolor
func (t *TonemapPostProcess) ClearColor(clearColor *Color4) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(clearColor.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetClearColor sets the ClearColor property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#clearcolor
func (t *TonemapPostProcess) SetClearColor(clearColor *Color4) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(clearColor.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// EnablePixelPerfectMode returns the EnablePixelPerfectMode property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#enablepixelperfectmode
func (t *TonemapPostProcess) EnablePixelPerfectMode(enablePixelPerfectMode bool) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(enablePixelPerfectMode)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetEnablePixelPerfectMode sets the EnablePixelPerfectMode property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#enablepixelperfectmode
func (t *TonemapPostProcess) SetEnablePixelPerfectMode(enablePixelPerfectMode bool) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(enablePixelPerfectMode)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// ExposureAdjustment returns the ExposureAdjustment property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#exposureadjustment
func (t *TonemapPostProcess) ExposureAdjustment(exposureAdjustment float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(exposureAdjustment)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetExposureAdjustment sets the ExposureAdjustment property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#exposureadjustment
func (t *TonemapPostProcess) SetExposureAdjustment(exposureAdjustment float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(exposureAdjustment)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// ForceFullscreenViewport returns the ForceFullscreenViewport property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#forcefullscreenviewport
func (t *TonemapPostProcess) ForceFullscreenViewport(forceFullscreenViewport bool) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(forceFullscreenViewport)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetForceFullscreenViewport sets the ForceFullscreenViewport property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#forcefullscreenviewport
func (t *TonemapPostProcess) SetForceFullscreenViewport(forceFullscreenViewport bool) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(forceFullscreenViewport)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// Height returns the Height property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#height
func (t *TonemapPostProcess) Height(height float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(height)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetHeight sets the Height property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#height
func (t *TonemapPostProcess) SetHeight(height float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(height)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// InputTexture returns the InputTexture property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#inputtexture
func (t *TonemapPostProcess) InputTexture(inputTexture *InternalTexture) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(inputTexture.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetInputTexture sets the InputTexture property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#inputtexture
func (t *TonemapPostProcess) SetInputTexture(inputTexture *InternalTexture) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(inputTexture.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#inspectablecustomproperties
func (t *TonemapPostProcess) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(inspectableCustomProperties.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#inspectablecustomproperties
func (t *TonemapPostProcess) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(inspectableCustomProperties.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// IsSupported returns the IsSupported property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#issupported
func (t *TonemapPostProcess) IsSupported(isSupported bool) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(isSupported)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetIsSupported sets the IsSupported property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#issupported
func (t *TonemapPostProcess) SetIsSupported(isSupported bool) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(isSupported)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#name
func (t *TonemapPostProcess) Name(name string) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(name)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#name
func (t *TonemapPostProcess) SetName(name string) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(name)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// OnActivate returns the OnActivate property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onactivate
func (t *TonemapPostProcess) OnActivate(onActivate func()) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onActivate)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetOnActivate sets the OnActivate property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onactivate
func (t *TonemapPostProcess) SetOnActivate(onActivate func()) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onActivate)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// OnActivateObservable returns the OnActivateObservable property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onactivateobservable
func (t *TonemapPostProcess) OnActivateObservable(onActivateObservable *Observable) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onActivateObservable.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetOnActivateObservable sets the OnActivateObservable property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onactivateobservable
func (t *TonemapPostProcess) SetOnActivateObservable(onActivateObservable *Observable) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onActivateObservable.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// OnAfterRender returns the OnAfterRender property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onafterrender
func (t *TonemapPostProcess) OnAfterRender(onAfterRender func()) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onAfterRender)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetOnAfterRender sets the OnAfterRender property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onafterrender
func (t *TonemapPostProcess) SetOnAfterRender(onAfterRender func()) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onAfterRender)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// OnAfterRenderObservable returns the OnAfterRenderObservable property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onafterrenderobservable
func (t *TonemapPostProcess) OnAfterRenderObservable(onAfterRenderObservable *Observable) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onAfterRenderObservable.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetOnAfterRenderObservable sets the OnAfterRenderObservable property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onafterrenderobservable
func (t *TonemapPostProcess) SetOnAfterRenderObservable(onAfterRenderObservable *Observable) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onAfterRenderObservable.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// OnApply returns the OnApply property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onapply
func (t *TonemapPostProcess) OnApply(onApply func()) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onApply)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetOnApply sets the OnApply property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onapply
func (t *TonemapPostProcess) SetOnApply(onApply func()) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onApply)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// OnApplyObservable returns the OnApplyObservable property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onapplyobservable
func (t *TonemapPostProcess) OnApplyObservable(onApplyObservable *Observable) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onApplyObservable.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetOnApplyObservable sets the OnApplyObservable property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onapplyobservable
func (t *TonemapPostProcess) SetOnApplyObservable(onApplyObservable *Observable) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onApplyObservable.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// OnBeforeRender returns the OnBeforeRender property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onbeforerender
func (t *TonemapPostProcess) OnBeforeRender(onBeforeRender func()) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onBeforeRender)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetOnBeforeRender sets the OnBeforeRender property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onbeforerender
func (t *TonemapPostProcess) SetOnBeforeRender(onBeforeRender func()) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onBeforeRender)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// OnBeforeRenderObservable returns the OnBeforeRenderObservable property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onbeforerenderobservable
func (t *TonemapPostProcess) OnBeforeRenderObservable(onBeforeRenderObservable *Observable) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onBeforeRenderObservable.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetOnBeforeRenderObservable sets the OnBeforeRenderObservable property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onbeforerenderobservable
func (t *TonemapPostProcess) SetOnBeforeRenderObservable(onBeforeRenderObservable *Observable) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onBeforeRenderObservable.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// OnSizeChanged returns the OnSizeChanged property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onsizechanged
func (t *TonemapPostProcess) OnSizeChanged(onSizeChanged func()) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onSizeChanged)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetOnSizeChanged sets the OnSizeChanged property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onsizechanged
func (t *TonemapPostProcess) SetOnSizeChanged(onSizeChanged func()) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onSizeChanged)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// OnSizeChangedObservable returns the OnSizeChangedObservable property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onsizechangedobservable
func (t *TonemapPostProcess) OnSizeChangedObservable(onSizeChangedObservable *Observable) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onSizeChangedObservable.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetOnSizeChangedObservable sets the OnSizeChangedObservable property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#onsizechangedobservable
func (t *TonemapPostProcess) SetOnSizeChangedObservable(onSizeChangedObservable *Observable) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(onSizeChangedObservable.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// RenderTargetSamplingMode returns the RenderTargetSamplingMode property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#rendertargetsamplingmode
func (t *TonemapPostProcess) RenderTargetSamplingMode(renderTargetSamplingMode float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(renderTargetSamplingMode)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetRenderTargetSamplingMode sets the RenderTargetSamplingMode property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#rendertargetsamplingmode
func (t *TonemapPostProcess) SetRenderTargetSamplingMode(renderTargetSamplingMode float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(renderTargetSamplingMode)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// Samples returns the Samples property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#samples
func (t *TonemapPostProcess) Samples(samples float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(samples)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetSamples sets the Samples property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#samples
func (t *TonemapPostProcess) SetSamples(samples float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(samples)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// ScaleMode returns the ScaleMode property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#scalemode
func (t *TonemapPostProcess) ScaleMode(scaleMode float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(scaleMode)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetScaleMode sets the ScaleMode property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#scalemode
func (t *TonemapPostProcess) SetScaleMode(scaleMode float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(scaleMode)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// TexelSize returns the TexelSize property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#texelsize
func (t *TonemapPostProcess) TexelSize(texelSize *Vector2) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(texelSize.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetTexelSize sets the TexelSize property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#texelsize
func (t *TonemapPostProcess) SetTexelSize(texelSize *Vector2) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(texelSize.JSObject())
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#uniqueid
func (t *TonemapPostProcess) UniqueId(uniqueId float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(uniqueId)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#uniqueid
func (t *TonemapPostProcess) SetUniqueId(uniqueId float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(uniqueId)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#width
func (t *TonemapPostProcess) Width(width float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(width)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#width
func (t *TonemapPostProcess) SetWidth(width float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(width)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

*/
