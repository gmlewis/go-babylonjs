// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TonemapPostProcess represents a babylon.js TonemapPostProcess.
// Defines a post process to apply tone mapping
type TonemapPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (t *TonemapPostProcess) JSObject() js.Value { return t.p }

// TonemapPostProcess returns a TonemapPostProcess JavaScript class.
func (ba *Babylon) TonemapPostProcess() *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess")
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// TonemapPostProcessFromJSObject returns a wrapped TonemapPostProcess JavaScript class.
func TonemapPostProcessFromJSObject(p js.Value, ctx js.Value) *TonemapPostProcess {
	return &TonemapPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// TonemapPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func TonemapPostProcessArrayToJSArray(array []*TonemapPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewTonemapPostProcessOpts contains optional parameters for NewTonemapPostProcess.
type NewTonemapPostProcessOpts struct {
	SamplingMode  *float64
	Engine        *Engine
	TextureFormat *float64
}

// NewTonemapPostProcess returns a new TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess
func (ba *Babylon) NewTonemapPostProcess(name string, _operator js.Value, exposureAdjustment float64, camera *Camera, opts *NewTonemapPostProcessOpts) *TonemapPostProcess {
	if opts == nil {
		opts = &NewTonemapPostProcessOpts{}
	}

	args := make([]interface{}, 0, 4+3)

	args = append(args, name)
	args = append(args, _operator)
	args = append(args, exposureAdjustment)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.TextureFormat == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureFormat)
	}

	p := ba.ctx.Get("TonemapPostProcess").New(args...)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

/*

// ExposureAdjustment returns the ExposureAdjustment property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#exposureadjustment
func (t *TonemapPostProcess) ExposureAdjustment(exposureAdjustment float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(exposureAdjustment)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

// SetExposureAdjustment sets the ExposureAdjustment property of class TonemapPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess#exposureadjustment
func (t *TonemapPostProcess) SetExposureAdjustment(exposureAdjustment float64) *TonemapPostProcess {
	p := ba.ctx.Get("TonemapPostProcess").New(exposureAdjustment)
	return TonemapPostProcessFromJSObject(p, ba.ctx)
}

*/
