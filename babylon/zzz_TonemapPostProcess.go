// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TonemapPostProcess represents a babylon.js TonemapPostProcess.
// Defines a post process to apply tone mapping
type TonemapPostProcess struct{ *PostProcess }

// JSObject returns the underlying js.Value.
func (t *TonemapPostProcess) JSObject() js.Value { return t.p }

// TonemapPostProcess returns a TonemapPostProcess JavaScript class.
func (b *Babylon) TonemapPostProcess() *TonemapPostProcess {
	p := b.ctx.Get("TonemapPostProcess")
	return TonemapPostProcessFromJSObject(p)
}

// TonemapPostProcessFromJSObject returns a wrapped TonemapPostProcess JavaScript class.
func TonemapPostProcessFromJSObject(p js.Value) *TonemapPostProcess {
	return &TonemapPostProcess{PostProcessFromJSObject(p)}
}

// NewTonemapPostProcessOpts contains optional parameters for NewTonemapPostProcess.
type NewTonemapPostProcessOpts struct {
	SamplingMode *float64

	Engine *Engine

	TextureFormat *float64
}

// NewTonemapPostProcess returns a new TonemapPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.tonemappostprocess
func (b *Babylon) NewTonemapPostProcess(name string, _operator *TonemappingOperator, exposureAdjustment float64, camera *Camera, opts *NewTonemapPostProcessOpts) *TonemapPostProcess {
	if opts == nil {
		opts = &NewTonemapPostProcessOpts{}
	}

	p := b.ctx.Get("TonemapPostProcess").New(name, _operator.JSObject(), exposureAdjustment, camera.JSObject(), opts.SamplingMode, opts.Engine.JSObject(), opts.TextureFormat)
	return TonemapPostProcessFromJSObject(p)
}

// TODO: methods
