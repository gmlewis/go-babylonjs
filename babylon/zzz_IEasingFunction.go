// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IEasingFunction represents a babylon.js IEasingFunction.
// This represents the main contract an easing function should follow.
// Easing functions are used throughout the animation system.
//
// See: http://doc.babylonjs.com/babylon101/animations#easing-functions
type IEasingFunction struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IEasingFunction) JSObject() js.Value { return i.p }

// IEasingFunction returns a IEasingFunction JavaScript class.
func (ba *Babylon) IEasingFunction() *IEasingFunction {
	p := ba.ctx.Get("IEasingFunction")
	return IEasingFunctionFromJSObject(p, ba.ctx)
}

// IEasingFunctionFromJSObject returns a wrapped IEasingFunction JavaScript class.
func IEasingFunctionFromJSObject(p js.Value, ctx js.Value) *IEasingFunction {
	return &IEasingFunction{p: p, ctx: ctx}
}

// IEasingFunctionArrayToJSArray returns a JavaScript Array for the wrapped array.
func IEasingFunctionArrayToJSArray(array []*IEasingFunction) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Ease calls the Ease method on the IEasingFunction object.
//
// https://doc.babylonjs.com/api/classes/babylon.ieasingfunction#ease
func (i *IEasingFunction) Ease(gradient float64) float64 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := i.p.Call("ease", args...)
	return retVal.Float()
}
