// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// StarfieldProceduralTexture represents a babylon.js StarfieldProceduralTexture.
//
type StarfieldProceduralTexture struct{ *ProceduralTexture }

// JSObject returns the underlying js.Value.
func (s *StarfieldProceduralTexture) JSObject() js.Value { return s.p }

// StarfieldProceduralTexture returns a StarfieldProceduralTexture JavaScript class.
func (ba *Babylon) StarfieldProceduralTexture() *StarfieldProceduralTexture {
	p := ba.ctx.Get("StarfieldProceduralTexture")
	return StarfieldProceduralTextureFromJSObject(p)
}

// StarfieldProceduralTextureFromJSObject returns a wrapped StarfieldProceduralTexture JavaScript class.
func StarfieldProceduralTextureFromJSObject(p js.Value) *StarfieldProceduralTexture {
	return &StarfieldProceduralTexture{ProceduralTextureFromJSObject(p)}
}

// NewStarfieldProceduralTextureOpts contains optional parameters for NewStarfieldProceduralTexture.
type NewStarfieldProceduralTextureOpts struct {
	FallbackTexture *Texture

	GenerateMipMaps *JSBool
}

// NewStarfieldProceduralTexture returns a new StarfieldProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture
func (ba *Babylon) NewStarfieldProceduralTexture(name string, size float64, scene *Scene, opts *NewStarfieldProceduralTextureOpts) *StarfieldProceduralTexture {
	if opts == nil {
		opts = &NewStarfieldProceduralTextureOpts{}
	}

	p := ba.ctx.Get("StarfieldProceduralTexture").New(name, size, scene.JSObject(), opts.FallbackTexture.JSObject(), opts.GenerateMipMaps)
	return StarfieldProceduralTextureFromJSObject(p)
}

// TODO: methods
