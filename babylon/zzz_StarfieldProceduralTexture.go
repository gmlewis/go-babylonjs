// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// StarfieldProceduralTexture represents a babylon.js StarfieldProceduralTexture.
//
type StarfieldProceduralTexture struct {
	*ProceduralTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *StarfieldProceduralTexture) JSObject() js.Value { return s.p }

// StarfieldProceduralTexture returns a StarfieldProceduralTexture JavaScript class.
func (ba *Babylon) StarfieldProceduralTexture() *StarfieldProceduralTexture {
	p := ba.ctx.Get("StarfieldProceduralTexture")
	return StarfieldProceduralTextureFromJSObject(p, ba.ctx)
}

// StarfieldProceduralTextureFromJSObject returns a wrapped StarfieldProceduralTexture JavaScript class.
func StarfieldProceduralTextureFromJSObject(p js.Value, ctx js.Value) *StarfieldProceduralTexture {
	return &StarfieldProceduralTexture{ProceduralTexture: ProceduralTextureFromJSObject(p, ctx), ctx: ctx}
}

// StarfieldProceduralTextureArrayToJSArray returns a JavaScript Array for the wrapped array.
func StarfieldProceduralTextureArrayToJSArray(array []*StarfieldProceduralTexture) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewStarfieldProceduralTextureOpts contains optional parameters for NewStarfieldProceduralTexture.
type NewStarfieldProceduralTextureOpts struct {
	FallbackTexture *Texture
	GenerateMipMaps *bool
}

// NewStarfieldProceduralTexture returns a new StarfieldProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#constructor
func (ba *Babylon) NewStarfieldProceduralTexture(name string, size float64, scene *Scene, opts *NewStarfieldProceduralTextureOpts) *StarfieldProceduralTexture {
	if opts == nil {
		opts = &NewStarfieldProceduralTextureOpts{}
	}

	args := make([]interface{}, 0, 3+2)

	args = append(args, name)
	args = append(args, size)
	args = append(args, scene.JSObject())

	if opts.FallbackTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.FallbackTexture.JSObject())
	}
	if opts.GenerateMipMaps == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateMipMaps)
	}

	p := ba.ctx.Get("StarfieldProceduralTexture").New(args...)
	return StarfieldProceduralTextureFromJSObject(p, ba.ctx)
}

// Parse calls the Parse method on the StarfieldProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#parse
func (s *StarfieldProceduralTexture) Parse(parsedTexture JSObject, scene *Scene, rootUrl string) *StarfieldProceduralTexture {

	args := make([]interface{}, 0, 3+0)

	if parsedTexture == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, parsedTexture.JSObject())
	}

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	args = append(args, rootUrl)

	retVal := s.p.Call("Parse", args...)
	return StarfieldProceduralTextureFromJSObject(retVal, s.ctx)
}

// Serialize calls the Serialize method on the StarfieldProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#serialize
func (s *StarfieldProceduralTexture) Serialize() js.Value {

	retVal := s.p.Call("serialize")
	return retVal
}

// UpdateShaderUniforms calls the UpdateShaderUniforms method on the StarfieldProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#updateshaderuniforms
func (s *StarfieldProceduralTexture) UpdateShaderUniforms() {

	s.p.Call("updateShaderUniforms")
}

// Alpha returns the Alpha property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#alpha
func (s *StarfieldProceduralTexture) Alpha() float64 {
	retVal := s.p.Get("alpha")
	return retVal.Float()
}

// SetAlpha sets the Alpha property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#alpha
func (s *StarfieldProceduralTexture) SetAlpha(alpha float64) *StarfieldProceduralTexture {
	s.p.Set("alpha", alpha)
	return s
}

// Beta returns the Beta property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#beta
func (s *StarfieldProceduralTexture) Beta() float64 {
	retVal := s.p.Get("beta")
	return retVal.Float()
}

// SetBeta sets the Beta property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#beta
func (s *StarfieldProceduralTexture) SetBeta(beta float64) *StarfieldProceduralTexture {
	s.p.Set("beta", beta)
	return s
}

// Brightness returns the Brightness property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#brightness
func (s *StarfieldProceduralTexture) Brightness() float64 {
	retVal := s.p.Get("brightness")
	return retVal.Float()
}

// SetBrightness sets the Brightness property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#brightness
func (s *StarfieldProceduralTexture) SetBrightness(brightness float64) *StarfieldProceduralTexture {
	s.p.Set("brightness", brightness)
	return s
}

// Darkmatter returns the Darkmatter property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#darkmatter
func (s *StarfieldProceduralTexture) Darkmatter() float64 {
	retVal := s.p.Get("darkmatter")
	return retVal.Float()
}

// SetDarkmatter sets the Darkmatter property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#darkmatter
func (s *StarfieldProceduralTexture) SetDarkmatter(darkmatter float64) *StarfieldProceduralTexture {
	s.p.Set("darkmatter", darkmatter)
	return s
}

// Distfading returns the Distfading property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#distfading
func (s *StarfieldProceduralTexture) Distfading() float64 {
	retVal := s.p.Get("distfading")
	return retVal.Float()
}

// SetDistfading sets the Distfading property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#distfading
func (s *StarfieldProceduralTexture) SetDistfading(distfading float64) *StarfieldProceduralTexture {
	s.p.Set("distfading", distfading)
	return s
}

// Formuparam returns the Formuparam property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#formuparam
func (s *StarfieldProceduralTexture) Formuparam() float64 {
	retVal := s.p.Get("formuparam")
	return retVal.Float()
}

// SetFormuparam sets the Formuparam property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#formuparam
func (s *StarfieldProceduralTexture) SetFormuparam(formuparam float64) *StarfieldProceduralTexture {
	s.p.Set("formuparam", formuparam)
	return s
}

// Saturation returns the Saturation property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#saturation
func (s *StarfieldProceduralTexture) Saturation() float64 {
	retVal := s.p.Get("saturation")
	return retVal.Float()
}

// SetSaturation sets the Saturation property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#saturation
func (s *StarfieldProceduralTexture) SetSaturation(saturation float64) *StarfieldProceduralTexture {
	s.p.Set("saturation", saturation)
	return s
}

// Stepsize returns the Stepsize property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#stepsize
func (s *StarfieldProceduralTexture) Stepsize() float64 {
	retVal := s.p.Get("stepsize")
	return retVal.Float()
}

// SetStepsize sets the Stepsize property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#stepsize
func (s *StarfieldProceduralTexture) SetStepsize(stepsize float64) *StarfieldProceduralTexture {
	s.p.Set("stepsize", stepsize)
	return s
}

// Tile returns the Tile property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#tile
func (s *StarfieldProceduralTexture) Tile() float64 {
	retVal := s.p.Get("tile")
	return retVal.Float()
}

// SetTile sets the Tile property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#tile
func (s *StarfieldProceduralTexture) SetTile(tile float64) *StarfieldProceduralTexture {
	s.p.Set("tile", tile)
	return s
}

// Time returns the Time property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#time
func (s *StarfieldProceduralTexture) Time() float64 {
	retVal := s.p.Get("time")
	return retVal.Float()
}

// SetTime sets the Time property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#time
func (s *StarfieldProceduralTexture) SetTime(time float64) *StarfieldProceduralTexture {
	s.p.Set("time", time)
	return s
}

// Zoom returns the Zoom property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#zoom
func (s *StarfieldProceduralTexture) Zoom() float64 {
	retVal := s.p.Get("zoom")
	return retVal.Float()
}

// SetZoom sets the Zoom property of class StarfieldProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.starfieldproceduraltexture#zoom
func (s *StarfieldProceduralTexture) SetZoom(zoom float64) *StarfieldProceduralTexture {
	s.p.Set("zoom", zoom)
	return s
}
