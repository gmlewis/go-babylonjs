// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// VirtualJoystick represents a babylon.js VirtualJoystick.
// Class used to define virtual joystick (used in touch mode)
type VirtualJoystick struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *VirtualJoystick) JSObject() js.Value { return v.p }

// VirtualJoystick returns a VirtualJoystick JavaScript class.
func (ba *Babylon) VirtualJoystick() *VirtualJoystick {
	p := ba.ctx.Get("VirtualJoystick")
	return VirtualJoystickFromJSObject(p, ba.ctx)
}

// VirtualJoystickFromJSObject returns a wrapped VirtualJoystick JavaScript class.
func VirtualJoystickFromJSObject(p js.Value, ctx js.Value) *VirtualJoystick {
	return &VirtualJoystick{p: p, ctx: ctx}
}

// VirtualJoystickArrayToJSArray returns a JavaScript Array for the wrapped array.
func VirtualJoystickArrayToJSArray(array []*VirtualJoystick) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewVirtualJoystickOpts contains optional parameters for NewVirtualJoystick.
type NewVirtualJoystickOpts struct {
	LeftJoystick *bool
}

// NewVirtualJoystick returns a new VirtualJoystick object.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#constructor
func (ba *Babylon) NewVirtualJoystick(opts *NewVirtualJoystickOpts) *VirtualJoystick {
	if opts == nil {
		opts = &NewVirtualJoystickOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.LeftJoystick == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.LeftJoystick)
	}

	p := ba.ctx.Get("VirtualJoystick").New(args...)
	return VirtualJoystickFromJSObject(p, ba.ctx)
}

// ReleaseCanvas calls the ReleaseCanvas method on the VirtualJoystick object.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#releasecanvas
func (v *VirtualJoystick) ReleaseCanvas() {

	v.p.Call("releaseCanvas")
}

// SetActionOnTouch calls the SetActionOnTouch method on the VirtualJoystick object.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#setactionontouch
func (v *VirtualJoystick) SetActionOnTouch(action JSFunc) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(action))

	v.p.Call("setActionOnTouch", args...)
}

// SetAxisForLeftRight calls the SetAxisForLeftRight method on the VirtualJoystick object.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#setaxisforleftright
func (v *VirtualJoystick) SetAxisForLeftRight(axis js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, axis)

	v.p.Call("setAxisForLeftRight", args...)
}

// SetAxisForUpDown calls the SetAxisForUpDown method on the VirtualJoystick object.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#setaxisforupdown
func (v *VirtualJoystick) SetAxisForUpDown(axis js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, axis)

	v.p.Call("setAxisForUpDown", args...)
}

// SetJoystickColor calls the SetJoystickColor method on the VirtualJoystick object.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#setjoystickcolor
func (v *VirtualJoystick) SetJoystickColor(newColor string) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, newColor)

	v.p.Call("setJoystickColor", args...)
}

// SetJoystickSensibility calls the SetJoystickSensibility method on the VirtualJoystick object.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#setjoysticksensibility
func (v *VirtualJoystick) SetJoystickSensibility(newJoystickSensibility float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, newJoystickSensibility)

	v.p.Call("setJoystickSensibility", args...)
}

// Canvas returns the Canvas property of class VirtualJoystick.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#canvas
func (v *VirtualJoystick) Canvas() js.Value {
	retVal := v.p.Get("Canvas")
	return retVal
}

// SetCanvas sets the Canvas property of class VirtualJoystick.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#canvas
func (v *VirtualJoystick) SetCanvas(Canvas js.Value) *VirtualJoystick {
	v.p.Set("Canvas", Canvas)
	return v
}

// DeltaPosition returns the DeltaPosition property of class VirtualJoystick.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#deltaposition
func (v *VirtualJoystick) DeltaPosition() *Vector3 {
	retVal := v.p.Get("deltaPosition")
	return Vector3FromJSObject(retVal, v.ctx)
}

// SetDeltaPosition sets the DeltaPosition property of class VirtualJoystick.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#deltaposition
func (v *VirtualJoystick) SetDeltaPosition(deltaPosition *Vector3) *VirtualJoystick {
	v.p.Set("deltaPosition", deltaPosition.JSObject())
	return v
}

// Pressed returns the Pressed property of class VirtualJoystick.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#pressed
func (v *VirtualJoystick) Pressed() bool {
	retVal := v.p.Get("pressed")
	return retVal.Bool()
}

// SetPressed sets the Pressed property of class VirtualJoystick.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#pressed
func (v *VirtualJoystick) SetPressed(pressed bool) *VirtualJoystick {
	v.p.Set("pressed", pressed)
	return v
}

// ReverseLeftRight returns the ReverseLeftRight property of class VirtualJoystick.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#reverseleftright
func (v *VirtualJoystick) ReverseLeftRight() bool {
	retVal := v.p.Get("reverseLeftRight")
	return retVal.Bool()
}

// SetReverseLeftRight sets the ReverseLeftRight property of class VirtualJoystick.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#reverseleftright
func (v *VirtualJoystick) SetReverseLeftRight(reverseLeftRight bool) *VirtualJoystick {
	v.p.Set("reverseLeftRight", reverseLeftRight)
	return v
}

// ReverseUpDown returns the ReverseUpDown property of class VirtualJoystick.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#reverseupdown
func (v *VirtualJoystick) ReverseUpDown() bool {
	retVal := v.p.Get("reverseUpDown")
	return retVal.Bool()
}

// SetReverseUpDown sets the ReverseUpDown property of class VirtualJoystick.
//
// https://doc.babylonjs.com/api/classes/babylon.virtualjoystick#reverseupdown
func (v *VirtualJoystick) SetReverseUpDown(reverseUpDown bool) *VirtualJoystick {
	v.p.Set("reverseUpDown", reverseUpDown)
	return v
}
