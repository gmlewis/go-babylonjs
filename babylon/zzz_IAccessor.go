// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IAccessor represents a babylon.js IAccessor.
// Loader interface with additional members.
type IAccessor struct {
	*IAccessor
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IAccessor) JSObject() js.Value { return i.p }

// IAccessor returns a IAccessor JavaScript class.
func (ba *Babylon) IAccessor() *IAccessor {
	p := ba.ctx.Get("IAccessor")
	return IAccessorFromJSObject(p, ba.ctx)
}

// IAccessorFromJSObject returns a wrapped IAccessor JavaScript class.
func IAccessorFromJSObject(p js.Value, ctx js.Value) *IAccessor {
	return &IAccessor{IAccessor: IAccessorFromJSObject(p, ctx), ctx: ctx}
}

// IAccessorArrayToJSArray returns a JavaScript Array for the wrapped array.
func IAccessorArrayToJSArray(array []*IAccessor) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// BufferView returns the BufferView property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#bufferview
func (i *IAccessor) BufferView(bufferView float64) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(bufferView)
	return IAccessorFromJSObject(p, ba.ctx)
}

// SetBufferView sets the BufferView property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#bufferview
func (i *IAccessor) SetBufferView(bufferView float64) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(bufferView)
	return IAccessorFromJSObject(p, ba.ctx)
}

// ByteOffset returns the ByteOffset property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#byteoffset
func (i *IAccessor) ByteOffset(byteOffset float64) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(byteOffset)
	return IAccessorFromJSObject(p, ba.ctx)
}

// SetByteOffset sets the ByteOffset property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#byteoffset
func (i *IAccessor) SetByteOffset(byteOffset float64) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(byteOffset)
	return IAccessorFromJSObject(p, ba.ctx)
}

// ComponentType returns the ComponentType property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#componenttype
func (i *IAccessor) ComponentType(componentType *AccessorComponentType) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(componentType.JSObject())
	return IAccessorFromJSObject(p, ba.ctx)
}

// SetComponentType sets the ComponentType property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#componenttype
func (i *IAccessor) SetComponentType(componentType *AccessorComponentType) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(componentType.JSObject())
	return IAccessorFromJSObject(p, ba.ctx)
}

// Count returns the Count property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#count
func (i *IAccessor) Count(count float64) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(count)
	return IAccessorFromJSObject(p, ba.ctx)
}

// SetCount sets the Count property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#count
func (i *IAccessor) SetCount(count float64) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(count)
	return IAccessorFromJSObject(p, ba.ctx)
}

// Extensions returns the Extensions property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#extensions
func (i *IAccessor) Extensions(extensions js.Value) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(extensions)
	return IAccessorFromJSObject(p, ba.ctx)
}

// SetExtensions sets the Extensions property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#extensions
func (i *IAccessor) SetExtensions(extensions js.Value) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(extensions)
	return IAccessorFromJSObject(p, ba.ctx)
}

// Extras returns the Extras property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#extras
func (i *IAccessor) Extras(extras interface{}) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(extras)
	return IAccessorFromJSObject(p, ba.ctx)
}

// SetExtras sets the Extras property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#extras
func (i *IAccessor) SetExtras(extras interface{}) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(extras)
	return IAccessorFromJSObject(p, ba.ctx)
}

// Index returns the Index property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#index
func (i *IAccessor) Index(index float64) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(index)
	return IAccessorFromJSObject(p, ba.ctx)
}

// SetIndex sets the Index property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#index
func (i *IAccessor) SetIndex(index float64) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(index)
	return IAccessorFromJSObject(p, ba.ctx)
}

// Max returns the Max property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#max
func (i *IAccessor) Max(max float64) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(max)
	return IAccessorFromJSObject(p, ba.ctx)
}

// SetMax sets the Max property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#max
func (i *IAccessor) SetMax(max float64) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(max)
	return IAccessorFromJSObject(p, ba.ctx)
}

// Min returns the Min property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#min
func (i *IAccessor) Min(min float64) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(min)
	return IAccessorFromJSObject(p, ba.ctx)
}

// SetMin sets the Min property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#min
func (i *IAccessor) SetMin(min float64) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(min)
	return IAccessorFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#name
func (i *IAccessor) Name(name string) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(name)
	return IAccessorFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#name
func (i *IAccessor) SetName(name string) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(name)
	return IAccessorFromJSObject(p, ba.ctx)
}

// Normalized returns the Normalized property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#normalized
func (i *IAccessor) Normalized(normalized bool) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(normalized)
	return IAccessorFromJSObject(p, ba.ctx)
}

// SetNormalized sets the Normalized property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#normalized
func (i *IAccessor) SetNormalized(normalized bool) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(normalized)
	return IAccessorFromJSObject(p, ba.ctx)
}

// Sparse returns the Sparse property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#sparse
func (i *IAccessor) Sparse(sparse *IAccessorSparse) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(sparse.JSObject())
	return IAccessorFromJSObject(p, ba.ctx)
}

// SetSparse sets the Sparse property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#sparse
func (i *IAccessor) SetSparse(sparse *IAccessorSparse) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(sparse.JSObject())
	return IAccessorFromJSObject(p, ba.ctx)
}

// Type returns the Type property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#type
func (i *IAccessor) Type(jsType *AccessorType) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(jsType.JSObject())
	return IAccessorFromJSObject(p, ba.ctx)
}

// SetType sets the Type property of class IAccessor.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessor#type
func (i *IAccessor) SetType(jsType *AccessorType) *IAccessor {
	p := ba.ctx.Get("IAccessor").New(jsType.JSObject())
	return IAccessorFromJSObject(p, ba.ctx)
}

*/
