// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IAccessor represents a babylon.js IAccessor.
// Loader interface with additional members.
type IAccessor struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IAccessor) JSObject() js.Value { return i.p }

// IAccessor returns a IAccessor JavaScript class.
func (ba *Babylon) IAccessor() *IAccessor {
	p := ba.ctx.Get("IAccessor")
	return IAccessorFromJSObject(p, ba.ctx)
}

// IAccessorFromJSObject returns a wrapped IAccessor JavaScript class.
func IAccessorFromJSObject(p js.Value, ctx js.Value) *IAccessor {
	return &IAccessor{p: p, ctx: ctx}
}

// IAccessorArrayToJSArray returns a JavaScript Array for the wrapped array.
func IAccessorArrayToJSArray(array []*IAccessor) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}
