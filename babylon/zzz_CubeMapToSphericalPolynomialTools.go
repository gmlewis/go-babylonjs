// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CubeMapToSphericalPolynomialTools represents a babylon.js CubeMapToSphericalPolynomialTools.
// Helper class dealing with the extraction of spherical polynomial dataArray
// from a cube map.
type CubeMapToSphericalPolynomialTools struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *CubeMapToSphericalPolynomialTools) JSObject() js.Value { return c.p }

// CubeMapToSphericalPolynomialTools returns a CubeMapToSphericalPolynomialTools JavaScript class.
func (ba *Babylon) CubeMapToSphericalPolynomialTools() *CubeMapToSphericalPolynomialTools {
	p := ba.ctx.Get("CubeMapToSphericalPolynomialTools")
	return CubeMapToSphericalPolynomialToolsFromJSObject(p, ba.ctx)
}

// CubeMapToSphericalPolynomialToolsFromJSObject returns a wrapped CubeMapToSphericalPolynomialTools JavaScript class.
func CubeMapToSphericalPolynomialToolsFromJSObject(p js.Value, ctx js.Value) *CubeMapToSphericalPolynomialTools {
	return &CubeMapToSphericalPolynomialTools{p: p, ctx: ctx}
}

// CubeMapToSphericalPolynomialToolsArrayToJSArray returns a JavaScript Array for the wrapped array.
func CubeMapToSphericalPolynomialToolsArrayToJSArray(array []*CubeMapToSphericalPolynomialTools) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// ConvertCubeMapTextureToSphericalPolynomial calls the ConvertCubeMapTextureToSphericalPolynomial method on the CubeMapToSphericalPolynomialTools object.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemaptosphericalpolynomialtools#convertcubemaptexturetosphericalpolynomial
func (c *CubeMapToSphericalPolynomialTools) ConvertCubeMapTextureToSphericalPolynomial(texture *BaseTexture) *SphericalPolynomial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	retVal := c.p.Call("ConvertCubeMapTextureToSphericalPolynomial", args...)
	return SphericalPolynomialFromJSObject(retVal, c.ctx)
}

// ConvertCubeMapToSphericalPolynomial calls the ConvertCubeMapToSphericalPolynomial method on the CubeMapToSphericalPolynomialTools object.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemaptosphericalpolynomialtools#convertcubemaptosphericalpolynomial
func (c *CubeMapToSphericalPolynomialTools) ConvertCubeMapToSphericalPolynomial(cubeInfo js.Value) *SphericalPolynomial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, cubeInfo)

	retVal := c.p.Call("ConvertCubeMapToSphericalPolynomial", args...)
	return SphericalPolynomialFromJSObject(retVal, c.ctx)
}

/*

 */
