// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CubeMapToSphericalPolynomialTools represents a babylon.js CubeMapToSphericalPolynomialTools.
// Helper class dealing with the extraction of spherical polynomial dataArray
// from a cube map.
type CubeMapToSphericalPolynomialTools struct{}

// JSObject returns the underlying js.Value.
func (c *CubeMapToSphericalPolynomialTools) JSObject() js.Value { return c.p }

// CubeMapToSphericalPolynomialTools returns a CubeMapToSphericalPolynomialTools JavaScript class.
func (b *Babylon) CubeMapToSphericalPolynomialTools() *CubeMapToSphericalPolynomialTools {
	p := b.ctx.Get("CubeMapToSphericalPolynomialTools")
	return CubeMapToSphericalPolynomialToolsFromJSObject(p)
}

// CubeMapToSphericalPolynomialToolsFromJSObject returns a wrapped CubeMapToSphericalPolynomialTools JavaScript class.
func CubeMapToSphericalPolynomialToolsFromJSObject(p js.Value) *CubeMapToSphericalPolynomialTools {
	return &CubeMapToSphericalPolynomialTools{p: p}
}

// NewCubeMapToSphericalPolynomialTools returns a new CubeMapToSphericalPolynomialTools object.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemaptosphericalpolynomialtools
func (b *Babylon) NewCubeMapToSphericalPolynomialTools(todo parameters) *CubeMapToSphericalPolynomialTools {
	p := b.ctx.Get("CubeMapToSphericalPolynomialTools").New(todo)
	return CubeMapToSphericalPolynomialToolsFromJSObject(p)
}

// TODO: methods
