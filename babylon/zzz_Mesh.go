// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Mesh represents a babylon.js Mesh.
// Class used to represent renderable models
type Mesh struct{ *AbstractMesh }

// JSObject returns the underlying js.Value.
func (m *Mesh) JSObject() js.Value { return m.p }

// Mesh returns a Mesh JavaScript class.
func (b *Babylon) Mesh() *Mesh {
	p := b.ctx.Get("Mesh")
	return MeshFromJSObject(p)
}

// MeshFromJSObject returns a wrapped Mesh JavaScript class.
func MeshFromJSObject(p js.Value) *Mesh {
	return &Mesh{AbstractMeshFromJSObject(p)}
}

// NewMeshOpts contains optional parameters for NewMesh.
type NewMeshOpts struct {
	Scene *Scene

	Parent *Node

	Source *Mesh

	DoNotCloneChildren *bool

	ClonePhysicsImpostor *bool
}

// NewMesh returns a new Mesh object.
//
// https://doc.babylonjs.com/api/classes/babylon.mesh
func (b *Babylon) NewMesh(name string, opts *NewMeshOpts) *Mesh {
	if opts == nil {
		opts = &NewMeshOpts{}
	}

	p := b.ctx.Get("Mesh").New(name, opts.Scene.JSObject(), opts.Parent.JSObject(), opts.Source.JSObject(), opts.DoNotCloneChildren.JSObject(), opts.ClonePhysicsImpostor.JSObject())
	return MeshFromJSObject(p)
}

// TODO: methods
