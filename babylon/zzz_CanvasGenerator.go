// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CanvasGenerator represents a babylon.js CanvasGenerator.
// Helper class used to generate a canvas to manipulate images
type CanvasGenerator struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *CanvasGenerator) JSObject() js.Value { return c.p }

// CanvasGenerator returns a CanvasGenerator JavaScript class.
func (ba *Babylon) CanvasGenerator() *CanvasGenerator {
	p := ba.ctx.Get("CanvasGenerator")
	return CanvasGeneratorFromJSObject(p, ba.ctx)
}

// CanvasGeneratorFromJSObject returns a wrapped CanvasGenerator JavaScript class.
func CanvasGeneratorFromJSObject(p js.Value, ctx js.Value) *CanvasGenerator {
	return &CanvasGenerator{p: p, ctx: ctx}
}

// CreateCanvas calls the CreateCanvas method on the CanvasGenerator object.
//
// https://doc.babylonjs.com/api/classes/babylon.canvasgenerator#createcanvas
func (c *CanvasGenerator) CreateCanvas(width float64, height float64) js.Value {

	args := make([]interface{}, 0, 2+0)

	args = append(args, width)
	args = append(args, height)

	retVal := c.p.Call("CreateCanvas", args...)
	return retVal
}

/*

 */
