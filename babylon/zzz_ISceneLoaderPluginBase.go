// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ISceneLoaderPluginBase represents a babylon.js ISceneLoaderPluginBase.
// Interface used to define the base of ISceneLoaderPlugin and ISceneLoaderPluginAsync
type ISceneLoaderPluginBase struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ISceneLoaderPluginBase) JSObject() js.Value { return i.p }

// ISceneLoaderPluginBase returns a ISceneLoaderPluginBase JavaScript class.
func (ba *Babylon) ISceneLoaderPluginBase() *ISceneLoaderPluginBase {
	p := ba.ctx.Get("ISceneLoaderPluginBase")
	return ISceneLoaderPluginBaseFromJSObject(p, ba.ctx)
}

// ISceneLoaderPluginBaseFromJSObject returns a wrapped ISceneLoaderPluginBase JavaScript class.
func ISceneLoaderPluginBaseFromJSObject(p js.Value, ctx js.Value) *ISceneLoaderPluginBase {
	return &ISceneLoaderPluginBase{p: p, ctx: ctx}
}

// ISceneLoaderPluginBaseArrayToJSArray returns a JavaScript Array for the wrapped array.
func ISceneLoaderPluginBaseArrayToJSArray(array []*ISceneLoaderPluginBase) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// CanDirectLoad calls the CanDirectLoad method on the ISceneLoaderPluginBase object.
//
// https://doc.babylonjs.com/api/classes/babylon.isceneloaderpluginbase#candirectload
func (i *ISceneLoaderPluginBase) CanDirectLoad(data string) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, data)

	retVal := i.p.Call("canDirectLoad", args...)
	return retVal.Bool()
}

// DirectLoad calls the DirectLoad method on the ISceneLoaderPluginBase object.
//
// https://doc.babylonjs.com/api/classes/babylon.isceneloaderpluginbase#directload
func (i *ISceneLoaderPluginBase) DirectLoad(scene *Scene, data string) interface{} {

	args := make([]interface{}, 0, 2+0)

	args = append(args, scene.JSObject())
	args = append(args, data)

	retVal := i.p.Call("directLoad", args...)
	return retVal
}

// ISceneLoaderPluginBaseReadFileOpts contains optional parameters for ISceneLoaderPluginBase.ReadFile.
type ISceneLoaderPluginBaseReadFileOpts struct {
	OnProgress     func()
	UseArrayBuffer *bool
	OnError        func()
}

// ReadFile calls the ReadFile method on the ISceneLoaderPluginBase object.
//
// https://doc.babylonjs.com/api/classes/babylon.isceneloaderpluginbase#readfile
func (i *ISceneLoaderPluginBase) ReadFile(scene *Scene, file js.Value, onSuccess func(), opts *ISceneLoaderPluginBaseReadFileOpts) *IFileRequest {
	if opts == nil {
		opts = &ISceneLoaderPluginBaseReadFileOpts{}
	}

	args := make([]interface{}, 0, 3+3)

	args = append(args, scene.JSObject())
	args = append(args, file)
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { onSuccess(); return nil }))

	if opts.OnProgress == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnProgress)
	}
	if opts.UseArrayBuffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseArrayBuffer)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}

	retVal := i.p.Call("readFile", args...)
	return IFileRequestFromJSObject(retVal, i.ctx)
}

// ISceneLoaderPluginBaseRequestFileOpts contains optional parameters for ISceneLoaderPluginBase.RequestFile.
type ISceneLoaderPluginBaseRequestFileOpts struct {
	OnProgress     func()
	UseArrayBuffer *bool
	OnError        func()
}

// RequestFile calls the RequestFile method on the ISceneLoaderPluginBase object.
//
// https://doc.babylonjs.com/api/classes/babylon.isceneloaderpluginbase#requestfile
func (i *ISceneLoaderPluginBase) RequestFile(scene *Scene, url string, onSuccess func(), opts *ISceneLoaderPluginBaseRequestFileOpts) *IFileRequest {
	if opts == nil {
		opts = &ISceneLoaderPluginBaseRequestFileOpts{}
	}

	args := make([]interface{}, 0, 3+3)

	args = append(args, scene.JSObject())
	args = append(args, url)
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { onSuccess(); return nil }))

	if opts.OnProgress == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnProgress)
	}
	if opts.UseArrayBuffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseArrayBuffer)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}

	retVal := i.p.Call("requestFile", args...)
	return IFileRequestFromJSObject(retVal, i.ctx)
}

// ISceneLoaderPluginBaseRewriteRootURLOpts contains optional parameters for ISceneLoaderPluginBase.RewriteRootURL.
type ISceneLoaderPluginBaseRewriteRootURLOpts struct {
	ResponseURL *string
}

// RewriteRootURL calls the RewriteRootURL method on the ISceneLoaderPluginBase object.
//
// https://doc.babylonjs.com/api/classes/babylon.isceneloaderpluginbase#rewriterooturl
func (i *ISceneLoaderPluginBase) RewriteRootURL(rootUrl string, opts *ISceneLoaderPluginBaseRewriteRootURLOpts) string {
	if opts == nil {
		opts = &ISceneLoaderPluginBaseRewriteRootURLOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, rootUrl)

	if opts.ResponseURL == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ResponseURL)
	}

	retVal := i.p.Call("rewriteRootURL", args...)
	return retVal.String()
}

// Extensions returns the Extensions property of class ISceneLoaderPluginBase.
//
// https://doc.babylonjs.com/api/classes/babylon.isceneloaderpluginbase#extensions
func (i *ISceneLoaderPluginBase) Extensions() string {
	retVal := i.p.Get("extensions")
	return retVal.String()
}

// SetExtensions sets the Extensions property of class ISceneLoaderPluginBase.
//
// https://doc.babylonjs.com/api/classes/babylon.isceneloaderpluginbase#extensions
func (i *ISceneLoaderPluginBase) SetExtensions(extensions string) *ISceneLoaderPluginBase {
	i.p.Set("extensions", extensions)
	return i
}

// Name returns the Name property of class ISceneLoaderPluginBase.
//
// https://doc.babylonjs.com/api/classes/babylon.isceneloaderpluginbase#name
func (i *ISceneLoaderPluginBase) Name() string {
	retVal := i.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class ISceneLoaderPluginBase.
//
// https://doc.babylonjs.com/api/classes/babylon.isceneloaderpluginbase#name
func (i *ISceneLoaderPluginBase) SetName(name string) *ISceneLoaderPluginBase {
	i.p.Set("name", name)
	return i
}
