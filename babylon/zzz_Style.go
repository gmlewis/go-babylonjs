// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Style represents a babylon.js Style.
// Define a style used by control to automatically setup properties based on a template.
// Only support font related properties so far
type Style struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *Style) JSObject() js.Value { return s.p }

// Style returns a Style JavaScript class.
func (gui *GUI) Style() *Style {
	p := gui.ctx.Get("Style")
	return StyleFromJSObject(p, gui.ctx)
}

// StyleFromJSObject returns a wrapped Style JavaScript class.
func StyleFromJSObject(p js.Value, ctx js.Value) *Style {
	return &Style{p: p, ctx: ctx}
}

// StyleArrayToJSArray returns a JavaScript Array for the wrapped array.
func StyleArrayToJSArray(array []*Style) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewStyle returns a new Style object.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.style
func (gui *GUI) NewStyle(host *AdvancedDynamicTexture) *Style {

	args := make([]interface{}, 0, 1+0)

	args = append(args, host.JSObject())

	p := gui.ctx.Get("Style").New(args...)
	return StyleFromJSObject(p, gui.ctx)
}

// Dispose calls the Dispose method on the Style object.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.style#dispose
func (s *Style) Dispose() {

	s.p.Call("dispose")
}

// FontFamily returns the FontFamily property of class Style.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.style#fontfamily
func (s *Style) FontFamily() string {
	retVal := s.p.Get("fontFamily")
	return retVal.String()
}

// SetFontFamily sets the FontFamily property of class Style.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.style#fontfamily
func (s *Style) SetFontFamily(fontFamily string) *Style {
	s.p.Set("fontFamily", fontFamily)
	return s
}

// FontSize returns the FontSize property of class Style.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.style#fontsize
func (s *Style) FontSize() string {
	retVal := s.p.Get("fontSize")
	return retVal.String()
}

// SetFontSize sets the FontSize property of class Style.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.style#fontsize
func (s *Style) SetFontSize(fontSize string) *Style {
	s.p.Set("fontSize", fontSize)
	return s
}

// FontStyle returns the FontStyle property of class Style.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.style#fontstyle
func (s *Style) FontStyle() string {
	retVal := s.p.Get("fontStyle")
	return retVal.String()
}

// SetFontStyle sets the FontStyle property of class Style.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.style#fontstyle
func (s *Style) SetFontStyle(fontStyle string) *Style {
	s.p.Set("fontStyle", fontStyle)
	return s
}

// FontWeight returns the FontWeight property of class Style.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.style#fontweight
func (s *Style) FontWeight() string {
	retVal := s.p.Get("fontWeight")
	return retVal.String()
}

// SetFontWeight sets the FontWeight property of class Style.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.style#fontweight
func (s *Style) SetFontWeight(fontWeight string) *Style {
	s.p.Set("fontWeight", fontWeight)
	return s
}

// OnChangedObservable returns the OnChangedObservable property of class Style.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.style#onchangedobservable
func (s *Style) OnChangedObservable() *Observable {
	retVal := s.p.Get("onChangedObservable")
	return ObservableFromJSObject(retVal, s.ctx)
}

// SetOnChangedObservable sets the OnChangedObservable property of class Style.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.style#onchangedobservable
func (s *Style) SetOnChangedObservable(onChangedObservable *Observable) *Style {
	s.p.Set("onChangedObservable", onChangedObservable.JSObject())
	return s
}
