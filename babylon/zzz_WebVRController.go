// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// WebVRController represents a babylon.js WebVRController.
// Defines the WebVRController object that represents controllers tracked in 3D space
type WebVRController struct {
	*PoseEnabledController
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (w *WebVRController) JSObject() js.Value { return w.p }

// WebVRController returns a WebVRController JavaScript class.
func (ba *Babylon) WebVRController() *WebVRController {
	p := ba.ctx.Get("WebVRController")
	return WebVRControllerFromJSObject(p, ba.ctx)
}

// WebVRControllerFromJSObject returns a wrapped WebVRController JavaScript class.
func WebVRControllerFromJSObject(p js.Value, ctx js.Value) *WebVRController {
	return &WebVRController{PoseEnabledController: PoseEnabledControllerFromJSObject(p, ctx), ctx: ctx}
}

// WebVRControllerArrayToJSArray returns a JavaScript Array for the wrapped array.
func WebVRControllerArrayToJSArray(array []*WebVRController) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewWebVRController returns a new WebVRController object.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#constructor
func (ba *Babylon) NewWebVRController(vrGamepad JSObject) *WebVRController {

	args := make([]interface{}, 0, 1+0)

	args = append(args, vrGamepad.JSObject())

	p := ba.ctx.Get("WebVRController").New(args...)
	return WebVRControllerFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the WebVRController object.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#dispose
func (w *WebVRController) Dispose() {

	w.p.Call("dispose")
}

// WebVRControllerInitControllerMeshOpts contains optional parameters for WebVRController.InitControllerMesh.
type WebVRControllerInitControllerMeshOpts struct {
	MeshLoaded JSFunc
}

// InitControllerMesh calls the InitControllerMesh method on the WebVRController object.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#initcontrollermesh
func (w *WebVRController) InitControllerMesh(scene *Scene, opts *WebVRControllerInitControllerMeshOpts) {
	if opts == nil {
		opts = &WebVRControllerInitControllerMeshOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	if opts.MeshLoaded == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(opts.MeshLoaded) /* never freed! */)
	}

	w.p.Call("initControllerMesh", args...)
}

// OnButtonStateChange calls the OnButtonStateChange method on the WebVRController object.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#onbuttonstatechange
func (w *WebVRController) OnButtonStateChange(callback JSFunc) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(callback))

	w.p.Call("onButtonStateChange", args...)
}

// Update calls the Update method on the WebVRController object.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#update
func (w *WebVRController) Update() {

	w.p.Call("update")
}

// DefaultModel returns the DefaultModel property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#defaultmodel
func (w *WebVRController) DefaultModel() *AbstractMesh {
	retVal := w.p.Get("defaultModel")
	return AbstractMeshFromJSObject(retVal, w.ctx)
}

// SetDefaultModel sets the DefaultModel property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#defaultmodel
func (w *WebVRController) SetDefaultModel(defaultModel *AbstractMesh) *WebVRController {
	w.p.Set("defaultModel", defaultModel.JSObject())
	return w
}

// Hand returns the Hand property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#hand
func (w *WebVRController) Hand() string {
	retVal := w.p.Get("hand")
	return retVal.String()
}

// SetHand sets the Hand property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#hand
func (w *WebVRController) SetHand(hand string) *WebVRController {
	w.p.Set("hand", hand)
	return w
}

// OnMainButtonStateChangedObservable returns the OnMainButtonStateChangedObservable property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#onmainbuttonstatechangedobservable
func (w *WebVRController) OnMainButtonStateChangedObservable() *Observable {
	retVal := w.p.Get("onMainButtonStateChangedObservable")
	return ObservableFromJSObject(retVal, w.ctx)
}

// SetOnMainButtonStateChangedObservable sets the OnMainButtonStateChangedObservable property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#onmainbuttonstatechangedobservable
func (w *WebVRController) SetOnMainButtonStateChangedObservable(onMainButtonStateChangedObservable *Observable) *WebVRController {
	w.p.Set("onMainButtonStateChangedObservable", onMainButtonStateChangedObservable.JSObject())
	return w
}

// OnPadStateChangedObservable returns the OnPadStateChangedObservable property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#onpadstatechangedobservable
func (w *WebVRController) OnPadStateChangedObservable() *Observable {
	retVal := w.p.Get("onPadStateChangedObservable")
	return ObservableFromJSObject(retVal, w.ctx)
}

// SetOnPadStateChangedObservable sets the OnPadStateChangedObservable property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#onpadstatechangedobservable
func (w *WebVRController) SetOnPadStateChangedObservable(onPadStateChangedObservable *Observable) *WebVRController {
	w.p.Set("onPadStateChangedObservable", onPadStateChangedObservable.JSObject())
	return w
}

// OnPadValuesChangedObservable returns the OnPadValuesChangedObservable property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#onpadvalueschangedobservable
func (w *WebVRController) OnPadValuesChangedObservable() *Observable {
	retVal := w.p.Get("onPadValuesChangedObservable")
	return ObservableFromJSObject(retVal, w.ctx)
}

// SetOnPadValuesChangedObservable sets the OnPadValuesChangedObservable property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#onpadvalueschangedobservable
func (w *WebVRController) SetOnPadValuesChangedObservable(onPadValuesChangedObservable *Observable) *WebVRController {
	w.p.Set("onPadValuesChangedObservable", onPadValuesChangedObservable.JSObject())
	return w
}

// OnSecondaryButtonStateChangedObservable returns the OnSecondaryButtonStateChangedObservable property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#onsecondarybuttonstatechangedobservable
func (w *WebVRController) OnSecondaryButtonStateChangedObservable() *Observable {
	retVal := w.p.Get("onSecondaryButtonStateChangedObservable")
	return ObservableFromJSObject(retVal, w.ctx)
}

// SetOnSecondaryButtonStateChangedObservable sets the OnSecondaryButtonStateChangedObservable property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#onsecondarybuttonstatechangedobservable
func (w *WebVRController) SetOnSecondaryButtonStateChangedObservable(onSecondaryButtonStateChangedObservable *Observable) *WebVRController {
	w.p.Set("onSecondaryButtonStateChangedObservable", onSecondaryButtonStateChangedObservable.JSObject())
	return w
}

// OnTriggerStateChangedObservable returns the OnTriggerStateChangedObservable property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#ontriggerstatechangedobservable
func (w *WebVRController) OnTriggerStateChangedObservable() *Observable {
	retVal := w.p.Get("onTriggerStateChangedObservable")
	return ObservableFromJSObject(retVal, w.ctx)
}

// SetOnTriggerStateChangedObservable sets the OnTriggerStateChangedObservable property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#ontriggerstatechangedobservable
func (w *WebVRController) SetOnTriggerStateChangedObservable(onTriggerStateChangedObservable *Observable) *WebVRController {
	w.p.Set("onTriggerStateChangedObservable", onTriggerStateChangedObservable.JSObject())
	return w
}

// Pad returns the Pad property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#pad
func (w *WebVRController) Pad() *StickValues {
	retVal := w.p.Get("pad")
	return StickValuesFromJSObject(retVal, w.ctx)
}

// SetPad sets the Pad property of class WebVRController.
//
// https://doc.babylonjs.com/api/classes/babylon.webvrcontroller#pad
func (w *WebVRController) SetPad(pad *StickValues) *WebVRController {
	w.p.Set("pad", pad.JSObject())
	return w
}
