// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PhysicsVortexEventData represents a babylon.js PhysicsVortexEventData.
// Interface for vortex event data
//
// See: https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class
type PhysicsVortexEventData struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PhysicsVortexEventData) JSObject() js.Value { return p.p }

// PhysicsVortexEventData returns a PhysicsVortexEventData JavaScript class.
func (ba *Babylon) PhysicsVortexEventData() *PhysicsVortexEventData {
	p := ba.ctx.Get("PhysicsVortexEventData")
	return PhysicsVortexEventDataFromJSObject(p, ba.ctx)
}

// PhysicsVortexEventDataFromJSObject returns a wrapped PhysicsVortexEventData JavaScript class.
func PhysicsVortexEventDataFromJSObject(p js.Value, ctx js.Value) *PhysicsVortexEventData {
	return &PhysicsVortexEventData{p: p, ctx: ctx}
}

// PhysicsVortexEventDataArrayToJSArray returns a JavaScript Array for the wrapped array.
func PhysicsVortexEventDataArrayToJSArray(array []*PhysicsVortexEventData) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Cylinder returns the Cylinder property of class PhysicsVortexEventData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsvortexeventdata#cylinder
func (p *PhysicsVortexEventData) Cylinder(cylinder *Mesh) *PhysicsVortexEventData {
	p := ba.ctx.Get("PhysicsVortexEventData").New(cylinder.JSObject())
	return PhysicsVortexEventDataFromJSObject(p, ba.ctx)
}

// SetCylinder sets the Cylinder property of class PhysicsVortexEventData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsvortexeventdata#cylinder
func (p *PhysicsVortexEventData) SetCylinder(cylinder *Mesh) *PhysicsVortexEventData {
	p := ba.ctx.Get("PhysicsVortexEventData").New(cylinder.JSObject())
	return PhysicsVortexEventDataFromJSObject(p, ba.ctx)
}

*/
