// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// AnimationGroup represents a babylon.js AnimationGroup.
// Use this class to create coordinated animations on multiple targets
type AnimationGroup struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *AnimationGroup) JSObject() js.Value { return a.p }

// AnimationGroup returns a AnimationGroup JavaScript class.
func (ba *Babylon) AnimationGroup() *AnimationGroup {
	p := ba.ctx.Get("AnimationGroup")
	return AnimationGroupFromJSObject(p, ba.ctx)
}

// AnimationGroupFromJSObject returns a wrapped AnimationGroup JavaScript class.
func AnimationGroupFromJSObject(p js.Value, ctx js.Value) *AnimationGroup {
	return &AnimationGroup{p: p, ctx: ctx}
}

// AnimationGroupArrayToJSArray returns a JavaScript Array for the wrapped array.
func AnimationGroupArrayToJSArray(array []*AnimationGroup) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewAnimationGroupOpts contains optional parameters for NewAnimationGroup.
type NewAnimationGroupOpts struct {
	Scene *Scene
}

// NewAnimationGroup returns a new AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#constructor
func (ba *Babylon) NewAnimationGroup(name string, opts *NewAnimationGroupOpts) *AnimationGroup {
	if opts == nil {
		opts = &NewAnimationGroupOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, name)

	if opts.Scene == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scene.JSObject())
	}

	p := ba.ctx.Get("AnimationGroup").New(args...)
	return AnimationGroupFromJSObject(p, ba.ctx)
}

// AddTargetedAnimation calls the AddTargetedAnimation method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#addtargetedanimation
func (a *AnimationGroup) AddTargetedAnimation(animation *Animation, target JSObject) *TargetedAnimation {

	args := make([]interface{}, 0, 2+0)

	if animation == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, animation.JSObject())
	}

	if target == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, target.JSObject())
	}

	retVal := a.p.Call("addTargetedAnimation", args...)
	return TargetedAnimationFromJSObject(retVal, a.ctx)
}

// AnimationGroupCloneOpts contains optional parameters for AnimationGroup.Clone.
type AnimationGroupCloneOpts struct {
	TargetConverter JSFunc
}

// Clone calls the Clone method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#clone
func (a *AnimationGroup) Clone(newName string, opts *AnimationGroupCloneOpts) *AnimationGroup {
	if opts == nil {
		opts = &AnimationGroupCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, newName)

	if opts.TargetConverter == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(opts.TargetConverter) /* never freed! */)
	}

	retVal := a.p.Call("clone", args...)
	return AnimationGroupFromJSObject(retVal, a.ctx)
}

// Dispose calls the Dispose method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#dispose
func (a *AnimationGroup) Dispose() {

	a.p.Call("dispose")
}

// GetClassName calls the GetClassName method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#getclassname
func (a *AnimationGroup) GetClassName() string {

	retVal := a.p.Call("getClassName")
	return retVal.String()
}

// GoToFrame calls the GoToFrame method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#gotoframe
func (a *AnimationGroup) GoToFrame(frame float64) *AnimationGroup {

	args := make([]interface{}, 0, 1+0)

	args = append(args, frame)

	retVal := a.p.Call("goToFrame", args...)
	return AnimationGroupFromJSObject(retVal, a.ctx)
}

// AnimationGroupNormalizeOpts contains optional parameters for AnimationGroup.Normalize.
type AnimationGroupNormalizeOpts struct {
	BeginFrame *float64
	EndFrame   *float64
}

// Normalize calls the Normalize method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#normalize
func (a *AnimationGroup) Normalize(opts *AnimationGroupNormalizeOpts) *AnimationGroup {
	if opts == nil {
		opts = &AnimationGroupNormalizeOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.BeginFrame == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.BeginFrame)
	}
	if opts.EndFrame == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.EndFrame)
	}

	retVal := a.p.Call("normalize", args...)
	return AnimationGroupFromJSObject(retVal, a.ctx)
}

// Parse calls the Parse method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#parse
func (a *AnimationGroup) Parse(parsedAnimationGroup JSObject, scene *Scene) *AnimationGroup {

	args := make([]interface{}, 0, 2+0)

	if parsedAnimationGroup == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, parsedAnimationGroup.JSObject())
	}

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	retVal := a.p.Call("Parse", args...)
	return AnimationGroupFromJSObject(retVal, a.ctx)
}

// Pause calls the Pause method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#pause
func (a *AnimationGroup) Pause() *AnimationGroup {

	retVal := a.p.Call("pause")
	return AnimationGroupFromJSObject(retVal, a.ctx)
}

// AnimationGroupPlayOpts contains optional parameters for AnimationGroup.Play.
type AnimationGroupPlayOpts struct {
	Loop *bool
}

// Play calls the Play method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#play
func (a *AnimationGroup) Play(opts *AnimationGroupPlayOpts) *AnimationGroup {
	if opts == nil {
		opts = &AnimationGroupPlayOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Loop == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Loop)
	}

	retVal := a.p.Call("play", args...)
	return AnimationGroupFromJSObject(retVal, a.ctx)
}

// Reset calls the Reset method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#reset
func (a *AnimationGroup) Reset() *AnimationGroup {

	retVal := a.p.Call("reset")
	return AnimationGroupFromJSObject(retVal, a.ctx)
}

// Restart calls the Restart method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#restart
func (a *AnimationGroup) Restart() *AnimationGroup {

	retVal := a.p.Call("restart")
	return AnimationGroupFromJSObject(retVal, a.ctx)
}

// Serialize calls the Serialize method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#serialize
func (a *AnimationGroup) Serialize() js.Value {

	retVal := a.p.Call("serialize")
	return retVal
}

// SetWeightForAllAnimatables calls the SetWeightForAllAnimatables method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#setweightforallanimatables
func (a *AnimationGroup) SetWeightForAllAnimatables(weight float64) *AnimationGroup {

	args := make([]interface{}, 0, 1+0)

	args = append(args, weight)

	retVal := a.p.Call("setWeightForAllAnimatables", args...)
	return AnimationGroupFromJSObject(retVal, a.ctx)
}

// AnimationGroupStartOpts contains optional parameters for AnimationGroup.Start.
type AnimationGroupStartOpts struct {
	Loop       *bool
	SpeedRatio *float64
	From       *float64
	To         *float64
}

// Start calls the Start method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#start
func (a *AnimationGroup) Start(opts *AnimationGroupStartOpts) *AnimationGroup {
	if opts == nil {
		opts = &AnimationGroupStartOpts{}
	}

	args := make([]interface{}, 0, 0+4)

	if opts.Loop == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Loop)
	}
	if opts.SpeedRatio == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SpeedRatio)
	}
	if opts.From == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.From)
	}
	if opts.To == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.To)
	}

	retVal := a.p.Call("start", args...)
	return AnimationGroupFromJSObject(retVal, a.ctx)
}

// Stop calls the Stop method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#stop
func (a *AnimationGroup) Stop() *AnimationGroup {

	retVal := a.p.Call("stop")
	return AnimationGroupFromJSObject(retVal, a.ctx)
}

// SyncAllAnimationsWith calls the SyncAllAnimationsWith method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#syncallanimationswith
func (a *AnimationGroup) SyncAllAnimationsWith(root *Animatable) *AnimationGroup {

	args := make([]interface{}, 0, 1+0)

	if root == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, root.JSObject())
	}

	retVal := a.p.Call("syncAllAnimationsWith", args...)
	return AnimationGroupFromJSObject(retVal, a.ctx)
}

// AnimationGroupToStringOpts contains optional parameters for AnimationGroup.ToString.
type AnimationGroupToStringOpts struct {
	FullDetails *bool
}

// ToString calls the ToString method on the AnimationGroup object.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#tostring
func (a *AnimationGroup) ToString(opts *AnimationGroupToStringOpts) string {
	if opts == nil {
		opts = &AnimationGroupToStringOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.FullDetails == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FullDetails)
	}

	retVal := a.p.Call("toString", args...)
	return retVal.String()
}

// Animatables returns the Animatables property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#animatables
func (a *AnimationGroup) Animatables() []*Animatable {
	retVal := a.p.Get("animatables")
	result := []*Animatable{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, AnimatableFromJSObject(retVal.Index(ri), a.ctx))
	}
	return result
}

// SetAnimatables sets the Animatables property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#animatables
func (a *AnimationGroup) SetAnimatables(animatables []*Animatable) *AnimationGroup {
	a.p.Set("animatables", animatables)
	return a
}

// From returns the From property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#from
func (a *AnimationGroup) From() float64 {
	retVal := a.p.Get("from")
	return retVal.Float()
}

// SetFrom sets the From property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#from
func (a *AnimationGroup) SetFrom(from float64) *AnimationGroup {
	a.p.Set("from", from)
	return a
}

// IsPlaying returns the IsPlaying property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#isplaying
func (a *AnimationGroup) IsPlaying() bool {
	retVal := a.p.Get("isPlaying")
	return retVal.Bool()
}

// SetIsPlaying sets the IsPlaying property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#isplaying
func (a *AnimationGroup) SetIsPlaying(isPlaying bool) *AnimationGroup {
	a.p.Set("isPlaying", isPlaying)
	return a
}

// IsStarted returns the IsStarted property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#isstarted
func (a *AnimationGroup) IsStarted() bool {
	retVal := a.p.Get("isStarted")
	return retVal.Bool()
}

// SetIsStarted sets the IsStarted property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#isstarted
func (a *AnimationGroup) SetIsStarted(isStarted bool) *AnimationGroup {
	a.p.Set("isStarted", isStarted)
	return a
}

// LoopAnimation returns the LoopAnimation property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#loopanimation
func (a *AnimationGroup) LoopAnimation() bool {
	retVal := a.p.Get("loopAnimation")
	return retVal.Bool()
}

// SetLoopAnimation sets the LoopAnimation property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#loopanimation
func (a *AnimationGroup) SetLoopAnimation(loopAnimation bool) *AnimationGroup {
	a.p.Set("loopAnimation", loopAnimation)
	return a
}

// Name returns the Name property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#name
func (a *AnimationGroup) Name() string {
	retVal := a.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#name
func (a *AnimationGroup) SetName(name string) *AnimationGroup {
	a.p.Set("name", name)
	return a
}

// OnAnimationEndObservable returns the OnAnimationEndObservable property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#onanimationendobservable
func (a *AnimationGroup) OnAnimationEndObservable() *Observable {
	retVal := a.p.Get("onAnimationEndObservable")
	return ObservableFromJSObject(retVal, a.ctx)
}

// SetOnAnimationEndObservable sets the OnAnimationEndObservable property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#onanimationendobservable
func (a *AnimationGroup) SetOnAnimationEndObservable(onAnimationEndObservable *Observable) *AnimationGroup {
	a.p.Set("onAnimationEndObservable", onAnimationEndObservable.JSObject())
	return a
}

// OnAnimationGroupEndObservable returns the OnAnimationGroupEndObservable property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#onanimationgroupendobservable
func (a *AnimationGroup) OnAnimationGroupEndObservable() *Observable {
	retVal := a.p.Get("onAnimationGroupEndObservable")
	return ObservableFromJSObject(retVal, a.ctx)
}

// SetOnAnimationGroupEndObservable sets the OnAnimationGroupEndObservable property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#onanimationgroupendobservable
func (a *AnimationGroup) SetOnAnimationGroupEndObservable(onAnimationGroupEndObservable *Observable) *AnimationGroup {
	a.p.Set("onAnimationGroupEndObservable", onAnimationGroupEndObservable.JSObject())
	return a
}

// OnAnimationGroupLoopObservable returns the OnAnimationGroupLoopObservable property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#onanimationgrouploopobservable
func (a *AnimationGroup) OnAnimationGroupLoopObservable() *Observable {
	retVal := a.p.Get("onAnimationGroupLoopObservable")
	return ObservableFromJSObject(retVal, a.ctx)
}

// SetOnAnimationGroupLoopObservable sets the OnAnimationGroupLoopObservable property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#onanimationgrouploopobservable
func (a *AnimationGroup) SetOnAnimationGroupLoopObservable(onAnimationGroupLoopObservable *Observable) *AnimationGroup {
	a.p.Set("onAnimationGroupLoopObservable", onAnimationGroupLoopObservable.JSObject())
	return a
}

// OnAnimationGroupPauseObservable returns the OnAnimationGroupPauseObservable property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#onanimationgrouppauseobservable
func (a *AnimationGroup) OnAnimationGroupPauseObservable() *Observable {
	retVal := a.p.Get("onAnimationGroupPauseObservable")
	return ObservableFromJSObject(retVal, a.ctx)
}

// SetOnAnimationGroupPauseObservable sets the OnAnimationGroupPauseObservable property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#onanimationgrouppauseobservable
func (a *AnimationGroup) SetOnAnimationGroupPauseObservable(onAnimationGroupPauseObservable *Observable) *AnimationGroup {
	a.p.Set("onAnimationGroupPauseObservable", onAnimationGroupPauseObservable.JSObject())
	return a
}

// OnAnimationGroupPlayObservable returns the OnAnimationGroupPlayObservable property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#onanimationgroupplayobservable
func (a *AnimationGroup) OnAnimationGroupPlayObservable() *Observable {
	retVal := a.p.Get("onAnimationGroupPlayObservable")
	return ObservableFromJSObject(retVal, a.ctx)
}

// SetOnAnimationGroupPlayObservable sets the OnAnimationGroupPlayObservable property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#onanimationgroupplayobservable
func (a *AnimationGroup) SetOnAnimationGroupPlayObservable(onAnimationGroupPlayObservable *Observable) *AnimationGroup {
	a.p.Set("onAnimationGroupPlayObservable", onAnimationGroupPlayObservable.JSObject())
	return a
}

// OnAnimationLoopObservable returns the OnAnimationLoopObservable property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#onanimationloopobservable
func (a *AnimationGroup) OnAnimationLoopObservable() *Observable {
	retVal := a.p.Get("onAnimationLoopObservable")
	return ObservableFromJSObject(retVal, a.ctx)
}

// SetOnAnimationLoopObservable sets the OnAnimationLoopObservable property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#onanimationloopobservable
func (a *AnimationGroup) SetOnAnimationLoopObservable(onAnimationLoopObservable *Observable) *AnimationGroup {
	a.p.Set("onAnimationLoopObservable", onAnimationLoopObservable.JSObject())
	return a
}

// SpeedRatio returns the SpeedRatio property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#speedratio
func (a *AnimationGroup) SpeedRatio() float64 {
	retVal := a.p.Get("speedRatio")
	return retVal.Float()
}

// SetSpeedRatio sets the SpeedRatio property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#speedratio
func (a *AnimationGroup) SetSpeedRatio(speedRatio float64) *AnimationGroup {
	a.p.Set("speedRatio", speedRatio)
	return a
}

// TargetedAnimations returns the TargetedAnimations property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#targetedanimations
func (a *AnimationGroup) TargetedAnimations() []*TargetedAnimation {
	retVal := a.p.Get("targetedAnimations")
	result := []*TargetedAnimation{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, TargetedAnimationFromJSObject(retVal.Index(ri), a.ctx))
	}
	return result
}

// SetTargetedAnimations sets the TargetedAnimations property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#targetedanimations
func (a *AnimationGroup) SetTargetedAnimations(targetedAnimations []*TargetedAnimation) *AnimationGroup {
	a.p.Set("targetedAnimations", targetedAnimations)
	return a
}

// To returns the To property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#to
func (a *AnimationGroup) To() float64 {
	retVal := a.p.Get("to")
	return retVal.Float()
}

// SetTo sets the To property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#to
func (a *AnimationGroup) SetTo(to float64) *AnimationGroup {
	a.p.Set("to", to)
	return a
}

// UniqueId returns the UniqueId property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#uniqueid
func (a *AnimationGroup) UniqueId() float64 {
	retVal := a.p.Get("uniqueId")
	return retVal.Float()
}

// SetUniqueId sets the UniqueId property of class AnimationGroup.
//
// https://doc.babylonjs.com/api/classes/babylon.animationgroup#uniqueid
func (a *AnimationGroup) SetUniqueId(uniqueId float64) *AnimationGroup {
	a.p.Set("uniqueId", uniqueId)
	return a
}
