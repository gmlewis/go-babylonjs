// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// LightBlock represents a babylon.js LightBlock.
// Block used to add light in the fragment shader
type LightBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (l *LightBlock) JSObject() js.Value { return l.p }

// LightBlock returns a LightBlock JavaScript class.
func (ba *Babylon) LightBlock() *LightBlock {
	p := ba.ctx.Get("LightBlock")
	return LightBlockFromJSObject(p, ba.ctx)
}

// LightBlockFromJSObject returns a wrapped LightBlock JavaScript class.
func LightBlockFromJSObject(p js.Value, ctx js.Value) *LightBlock {
	return &LightBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// LightBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func LightBlockArrayToJSArray(array []*LightBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewLightBlock returns a new LightBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock
func (ba *Babylon) NewLightBlock(name string) *LightBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("LightBlock").New(args...)
	return LightBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the LightBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#autoconfigure
func (l *LightBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	if material == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, material.JSObject())
	}

	l.p.Call("autoConfigure", args...)
}

// LightBlockBindOpts contains optional parameters for LightBlock.Bind.
type LightBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the LightBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#bind
func (l *LightBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *LightBlockBindOpts) {
	if opts == nil {
		opts = &LightBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	if effect == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, effect.JSObject())
	}

	if nodeMaterial == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, nodeMaterial.JSObject())
	}

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	l.p.Call("bind", args...)
}

// GetClassName calls the GetClassName method on the LightBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#getclassname
func (l *LightBlock) GetClassName() string {

	retVal := l.p.Call("getClassName")
	return retVal.String()
}

// PrepareDefines calls the PrepareDefines method on the LightBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#preparedefines
func (l *LightBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value) {

	args := make([]interface{}, 0, 3+0)

	if mesh == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, mesh.JSObject())
	}

	if nodeMaterial == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, nodeMaterial.JSObject())
	}

	args = append(args, defines)

	l.p.Call("prepareDefines", args...)
}

// Serialize calls the Serialize method on the LightBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#serialize
func (l *LightBlock) Serialize() js.Value {

	retVal := l.p.Call("serialize")
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the LightBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#updateuniformsandsamples
func (l *LightBlock) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers []string) {

	args := make([]interface{}, 0, 4+0)

	if state == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, state.JSObject())
	}

	if nodeMaterial == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, nodeMaterial.JSObject())
	}

	args = append(args, defines)

	args = append(args, uniformBuffers)

	l.p.Call("updateUniformsAndSamples", args...)
}

// _deserialize calls the _deserialize method on the LightBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#_deserialize
func (l *LightBlock) _deserialize(serializationObject JSObject, scene *Scene, rootUrl string) {

	args := make([]interface{}, 0, 3+0)

	if serializationObject == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, serializationObject.JSObject())
	}

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	args = append(args, rootUrl)

	l.p.Call("_deserialize", args...)
}

// CameraPosition returns the CameraPosition property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#cameraposition
func (l *LightBlock) CameraPosition() *NodeMaterialConnectionPoint {
	retVal := l.p.Get("cameraPosition")
	return NodeMaterialConnectionPointFromJSObject(retVal, l.ctx)
}

// SetCameraPosition sets the CameraPosition property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#cameraposition
func (l *LightBlock) SetCameraPosition(cameraPosition *NodeMaterialConnectionPoint) *LightBlock {
	l.p.Set("cameraPosition", cameraPosition.JSObject())
	return l
}

// DiffuseColor returns the DiffuseColor property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#diffusecolor
func (l *LightBlock) DiffuseColor() *NodeMaterialConnectionPoint {
	retVal := l.p.Get("diffuseColor")
	return NodeMaterialConnectionPointFromJSObject(retVal, l.ctx)
}

// SetDiffuseColor sets the DiffuseColor property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#diffusecolor
func (l *LightBlock) SetDiffuseColor(diffuseColor *NodeMaterialConnectionPoint) *LightBlock {
	l.p.Set("diffuseColor", diffuseColor.JSObject())
	return l
}

// DiffuseOutput returns the DiffuseOutput property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#diffuseoutput
func (l *LightBlock) DiffuseOutput() *NodeMaterialConnectionPoint {
	retVal := l.p.Get("diffuseOutput")
	return NodeMaterialConnectionPointFromJSObject(retVal, l.ctx)
}

// SetDiffuseOutput sets the DiffuseOutput property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#diffuseoutput
func (l *LightBlock) SetDiffuseOutput(diffuseOutput *NodeMaterialConnectionPoint) *LightBlock {
	l.p.Set("diffuseOutput", diffuseOutput.JSObject())
	return l
}

// GlossPower returns the GlossPower property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#glosspower
func (l *LightBlock) GlossPower() *NodeMaterialConnectionPoint {
	retVal := l.p.Get("glossPower")
	return NodeMaterialConnectionPointFromJSObject(retVal, l.ctx)
}

// SetGlossPower sets the GlossPower property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#glosspower
func (l *LightBlock) SetGlossPower(glossPower *NodeMaterialConnectionPoint) *LightBlock {
	l.p.Set("glossPower", glossPower.JSObject())
	return l
}

// Glossiness returns the Glossiness property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#glossiness
func (l *LightBlock) Glossiness() *NodeMaterialConnectionPoint {
	retVal := l.p.Get("glossiness")
	return NodeMaterialConnectionPointFromJSObject(retVal, l.ctx)
}

// SetGlossiness sets the Glossiness property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#glossiness
func (l *LightBlock) SetGlossiness(glossiness *NodeMaterialConnectionPoint) *LightBlock {
	l.p.Set("glossiness", glossiness.JSObject())
	return l
}

// Light returns the Light property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#light
func (l *LightBlock) Light() *Light {
	retVal := l.p.Get("light")
	return LightFromJSObject(retVal, l.ctx)
}

// SetLight sets the Light property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#light
func (l *LightBlock) SetLight(light *Light) *LightBlock {
	l.p.Set("light", light.JSObject())
	return l
}

// SpecularColor returns the SpecularColor property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#specularcolor
func (l *LightBlock) SpecularColor() *NodeMaterialConnectionPoint {
	retVal := l.p.Get("specularColor")
	return NodeMaterialConnectionPointFromJSObject(retVal, l.ctx)
}

// SetSpecularColor sets the SpecularColor property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#specularcolor
func (l *LightBlock) SetSpecularColor(specularColor *NodeMaterialConnectionPoint) *LightBlock {
	l.p.Set("specularColor", specularColor.JSObject())
	return l
}

// SpecularOutput returns the SpecularOutput property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#specularoutput
func (l *LightBlock) SpecularOutput() *NodeMaterialConnectionPoint {
	retVal := l.p.Get("specularOutput")
	return NodeMaterialConnectionPointFromJSObject(retVal, l.ctx)
}

// SetSpecularOutput sets the SpecularOutput property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#specularoutput
func (l *LightBlock) SetSpecularOutput(specularOutput *NodeMaterialConnectionPoint) *LightBlock {
	l.p.Set("specularOutput", specularOutput.JSObject())
	return l
}

// WorldNormal returns the WorldNormal property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#worldnormal
func (l *LightBlock) WorldNormal() *NodeMaterialConnectionPoint {
	retVal := l.p.Get("worldNormal")
	return NodeMaterialConnectionPointFromJSObject(retVal, l.ctx)
}

// SetWorldNormal sets the WorldNormal property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#worldnormal
func (l *LightBlock) SetWorldNormal(worldNormal *NodeMaterialConnectionPoint) *LightBlock {
	l.p.Set("worldNormal", worldNormal.JSObject())
	return l
}

// WorldPosition returns the WorldPosition property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#worldposition
func (l *LightBlock) WorldPosition() *NodeMaterialConnectionPoint {
	retVal := l.p.Get("worldPosition")
	return NodeMaterialConnectionPointFromJSObject(retVal, l.ctx)
}

// SetWorldPosition sets the WorldPosition property of class LightBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lightblock#worldposition
func (l *LightBlock) SetWorldPosition(worldPosition *NodeMaterialConnectionPoint) *LightBlock {
	l.p.Set("worldPosition", worldPosition.JSObject())
	return l
}
