// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Rectangle represents a babylon.js Rectangle.
// Class used to create rectangle container
type Rectangle struct {
	*Container
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *Rectangle) JSObject() js.Value { return r.p }

// Rectangle returns a Rectangle JavaScript class.
func (ba *Babylon) Rectangle() *Rectangle {
	p := ba.ctx.Get("Rectangle")
	return RectangleFromJSObject(p, ba.ctx)
}

// RectangleFromJSObject returns a wrapped Rectangle JavaScript class.
func RectangleFromJSObject(p js.Value, ctx js.Value) *Rectangle {
	return &Rectangle{Container: ContainerFromJSObject(p, ctx), ctx: ctx}
}

// RectangleArrayToJSArray returns a JavaScript Array for the wrapped array.
func RectangleArrayToJSArray(array []*Rectangle) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewRectangleOpts contains optional parameters for NewRectangle.
type NewRectangleOpts struct {
	Name *string
}

// NewRectangle returns a new Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle
func (ba *Babylon) NewRectangle(opts *NewRectangleOpts) *Rectangle {
	if opts == nil {
		opts = &NewRectangleOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}

	p := ba.ctx.Get("Rectangle").New(args...)
	return RectangleFromJSObject(p, ba.ctx)
}

// AddControl calls the AddControl method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#addcontrol
func (r *Rectangle) AddControl(control *Control) *Container {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := r.p.Call("addControl", args...)
	return ContainerFromJSObject(retVal, r.ctx)
}

// ClearControls calls the ClearControls method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#clearcontrols
func (r *Rectangle) ClearControls() *Container {

	retVal := r.p.Call("clearControls")
	return ContainerFromJSObject(retVal, r.ctx)
}

// Contains calls the Contains method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#contains
func (r *Rectangle) Contains(x float64, y float64) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, x)
	args = append(args, y)

	retVal := r.p.Call("contains", args...)
	return retVal.Bool()
}

// ContainsControl calls the ContainsControl method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#containscontrol
func (r *Rectangle) ContainsControl(control *Control) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := r.p.Call("containsControl", args...)
	return retVal.Bool()
}

// Dispose calls the Dispose method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#dispose
func (r *Rectangle) Dispose() {

	r.p.Call("dispose")
}

// GetAscendantOfClass calls the GetAscendantOfClass method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#getascendantofclass
func (r *Rectangle) GetAscendantOfClass(className string) *Control {

	args := make([]interface{}, 0, 1+0)

	args = append(args, className)

	retVal := r.p.Call("getAscendantOfClass", args...)
	return ControlFromJSObject(retVal, r.ctx)
}

// GetChildByName calls the GetChildByName method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#getchildbyname
func (r *Rectangle) GetChildByName(name string) *Control {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := r.p.Call("getChildByName", args...)
	return ControlFromJSObject(retVal, r.ctx)
}

// GetChildByType calls the GetChildByType method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#getchildbytype
func (r *Rectangle) GetChildByType(name string, jsType string) *Control {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, jsType)

	retVal := r.p.Call("getChildByType", args...)
	return ControlFromJSObject(retVal, r.ctx)
}

// GetClassName calls the GetClassName method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#getclassname
func (r *Rectangle) GetClassName() string {

	retVal := r.p.Call("getClassName")
	return retVal.String()
}

// RectangleGetDescendantsOpts contains optional parameters for Rectangle.GetDescendants.
type RectangleGetDescendantsOpts struct {
	DirectDescendantsOnly *bool
	Predicate             func()
}

// GetDescendants calls the GetDescendants method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#getdescendants
func (r *Rectangle) GetDescendants(opts *RectangleGetDescendantsOpts) *Control {
	if opts == nil {
		opts = &RectangleGetDescendantsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := r.p.Call("getDescendants", args...)
	return ControlFromJSObject(retVal, r.ctx)
}

// RectangleGetDescendantsToRefOpts contains optional parameters for Rectangle.GetDescendantsToRef.
type RectangleGetDescendantsToRefOpts struct {
	DirectDescendantsOnly *bool
	Predicate             func()
}

// GetDescendantsToRef calls the GetDescendantsToRef method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#getdescendantstoref
func (r *Rectangle) GetDescendantsToRef(results *Control, opts *RectangleGetDescendantsToRefOpts) {
	if opts == nil {
		opts = &RectangleGetDescendantsToRefOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, results.JSObject())

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	r.p.Call("getDescendantsToRef", args...)
}

// GetLocalCoordinates calls the GetLocalCoordinates method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#getlocalcoordinates
func (r *Rectangle) GetLocalCoordinates(globalCoordinates *Vector2) *Vector2 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, globalCoordinates.JSObject())

	retVal := r.p.Call("getLocalCoordinates", args...)
	return Vector2FromJSObject(retVal, r.ctx)
}

// GetLocalCoordinatesToRef calls the GetLocalCoordinatesToRef method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#getlocalcoordinatestoref
func (r *Rectangle) GetLocalCoordinatesToRef(globalCoordinates *Vector2, result *Vector2) *Control {

	args := make([]interface{}, 0, 2+0)

	args = append(args, globalCoordinates.JSObject())
	args = append(args, result.JSObject())

	retVal := r.p.Call("getLocalCoordinatesToRef", args...)
	return ControlFromJSObject(retVal, r.ctx)
}

// GetParentLocalCoordinates calls the GetParentLocalCoordinates method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#getparentlocalcoordinates
func (r *Rectangle) GetParentLocalCoordinates(globalCoordinates *Vector2) *Vector2 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, globalCoordinates.JSObject())

	retVal := r.p.Call("getParentLocalCoordinates", args...)
	return Vector2FromJSObject(retVal, r.ctx)
}

// IsAscendant calls the IsAscendant method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#isascendant
func (r *Rectangle) IsAscendant(container *Control) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, container.JSObject())

	retVal := r.p.Call("isAscendant", args...)
	return retVal.Bool()
}

// LinkWithMesh calls the LinkWithMesh method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#linkwithmesh
func (r *Rectangle) LinkWithMesh(mesh *AbstractMesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	r.p.Call("linkWithMesh", args...)
}

// MoveToVector3 calls the MoveToVector3 method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#movetovector3
func (r *Rectangle) MoveToVector3(position *Vector3, scene *Scene) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	r.p.Call("moveToVector3", args...)
}

// RemoveControl calls the RemoveControl method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#removecontrol
func (r *Rectangle) RemoveControl(control *Control) *Container {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := r.p.Call("removeControl", args...)
	return ContainerFromJSObject(retVal, r.ctx)
}

// _flagDescendantsAsMatrixDirty calls the _flagDescendantsAsMatrixDirty method on the Rectangle object.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#_flagdescendantsasmatrixdirty
func (r *Rectangle) _flagDescendantsAsMatrixDirty() {

	r.p.Call("_flagDescendantsAsMatrixDirty")
}

/*

// AdaptHeightToChildren returns the AdaptHeightToChildren property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#adaptheighttochildren
func (r *Rectangle) AdaptHeightToChildren(adaptHeightToChildren bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(adaptHeightToChildren)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetAdaptHeightToChildren sets the AdaptHeightToChildren property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#adaptheighttochildren
func (r *Rectangle) SetAdaptHeightToChildren(adaptHeightToChildren bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(adaptHeightToChildren)
	return RectangleFromJSObject(p, ba.ctx)
}

// AdaptWidthToChildren returns the AdaptWidthToChildren property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#adaptwidthtochildren
func (r *Rectangle) AdaptWidthToChildren(adaptWidthToChildren bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(adaptWidthToChildren)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetAdaptWidthToChildren sets the AdaptWidthToChildren property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#adaptwidthtochildren
func (r *Rectangle) SetAdaptWidthToChildren(adaptWidthToChildren bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(adaptWidthToChildren)
	return RectangleFromJSObject(p, ba.ctx)
}

// AllowAlphaInheritance returns the AllowAlphaInheritance property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#allowalphainheritance
func (r *Rectangle) AllowAlphaInheritance(AllowAlphaInheritance bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(AllowAlphaInheritance)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetAllowAlphaInheritance sets the AllowAlphaInheritance property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#allowalphainheritance
func (r *Rectangle) SetAllowAlphaInheritance(AllowAlphaInheritance bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(AllowAlphaInheritance)
	return RectangleFromJSObject(p, ba.ctx)
}

// Alpha returns the Alpha property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#alpha
func (r *Rectangle) Alpha(alpha float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(alpha)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetAlpha sets the Alpha property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#alpha
func (r *Rectangle) SetAlpha(alpha float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(alpha)
	return RectangleFromJSObject(p, ba.ctx)
}

// Background returns the Background property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#background
func (r *Rectangle) Background(background string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(background)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetBackground sets the Background property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#background
func (r *Rectangle) SetBackground(background string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(background)
	return RectangleFromJSObject(p, ba.ctx)
}

// CenterX returns the CenterX property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#centerx
func (r *Rectangle) CenterX(centerX float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(centerX)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetCenterX sets the CenterX property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#centerx
func (r *Rectangle) SetCenterX(centerX float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(centerX)
	return RectangleFromJSObject(p, ba.ctx)
}

// CenterY returns the CenterY property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#centery
func (r *Rectangle) CenterY(centerY float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(centerY)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetCenterY sets the CenterY property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#centery
func (r *Rectangle) SetCenterY(centerY float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(centerY)
	return RectangleFromJSObject(p, ba.ctx)
}

// Children returns the Children property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#children
func (r *Rectangle) Children(children *Control) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(children.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// SetChildren sets the Children property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#children
func (r *Rectangle) SetChildren(children *Control) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(children.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// ClipChildren returns the ClipChildren property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#clipchildren
func (r *Rectangle) ClipChildren(clipChildren bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(clipChildren)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetClipChildren sets the ClipChildren property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#clipchildren
func (r *Rectangle) SetClipChildren(clipChildren bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(clipChildren)
	return RectangleFromJSObject(p, ba.ctx)
}

// ClipContent returns the ClipContent property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#clipcontent
func (r *Rectangle) ClipContent(clipContent bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(clipContent)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetClipContent sets the ClipContent property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#clipcontent
func (r *Rectangle) SetClipContent(clipContent bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(clipContent)
	return RectangleFromJSObject(p, ba.ctx)
}

// Color returns the Color property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#color
func (r *Rectangle) Color(color string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(color)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetColor sets the Color property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#color
func (r *Rectangle) SetColor(color string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(color)
	return RectangleFromJSObject(p, ba.ctx)
}

// CornerRadius returns the CornerRadius property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#cornerradius
func (r *Rectangle) CornerRadius(cornerRadius float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(cornerRadius)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetCornerRadius sets the CornerRadius property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#cornerradius
func (r *Rectangle) SetCornerRadius(cornerRadius float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(cornerRadius)
	return RectangleFromJSObject(p, ba.ctx)
}

// DisabledColor returns the DisabledColor property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#disabledcolor
func (r *Rectangle) DisabledColor(disabledColor string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(disabledColor)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetDisabledColor sets the DisabledColor property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#disabledcolor
func (r *Rectangle) SetDisabledColor(disabledColor string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(disabledColor)
	return RectangleFromJSObject(p, ba.ctx)
}

// FontFamily returns the FontFamily property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#fontfamily
func (r *Rectangle) FontFamily(fontFamily string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(fontFamily)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetFontFamily sets the FontFamily property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#fontfamily
func (r *Rectangle) SetFontFamily(fontFamily string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(fontFamily)
	return RectangleFromJSObject(p, ba.ctx)
}

// FontOffset returns the FontOffset property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#fontoffset
func (r *Rectangle) FontOffset(fontOffset js.Value) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(fontOffset)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetFontOffset sets the FontOffset property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#fontoffset
func (r *Rectangle) SetFontOffset(fontOffset js.Value) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(fontOffset)
	return RectangleFromJSObject(p, ba.ctx)
}

// FontSize returns the FontSize property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#fontsize
func (r *Rectangle) FontSize(fontSize string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(fontSize)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetFontSize sets the FontSize property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#fontsize
func (r *Rectangle) SetFontSize(fontSize string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(fontSize)
	return RectangleFromJSObject(p, ba.ctx)
}

// FontSizeInPixels returns the FontSizeInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#fontsizeinpixels
func (r *Rectangle) FontSizeInPixels(fontSizeInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(fontSizeInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetFontSizeInPixels sets the FontSizeInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#fontsizeinpixels
func (r *Rectangle) SetFontSizeInPixels(fontSizeInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(fontSizeInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// FontStyle returns the FontStyle property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#fontstyle
func (r *Rectangle) FontStyle(fontStyle string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(fontStyle)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetFontStyle sets the FontStyle property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#fontstyle
func (r *Rectangle) SetFontStyle(fontStyle string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(fontStyle)
	return RectangleFromJSObject(p, ba.ctx)
}

// FontWeight returns the FontWeight property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#fontweight
func (r *Rectangle) FontWeight(fontWeight string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(fontWeight)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetFontWeight sets the FontWeight property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#fontweight
func (r *Rectangle) SetFontWeight(fontWeight string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(fontWeight)
	return RectangleFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_CENTER returns the HORIZONTAL_ALIGNMENT_CENTER property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#horizontal_alignment_center
func (r *Rectangle) HORIZONTAL_ALIGNMENT_CENTER(HORIZONTAL_ALIGNMENT_CENTER float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(HORIZONTAL_ALIGNMENT_CENTER)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_CENTER sets the HORIZONTAL_ALIGNMENT_CENTER property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#horizontal_alignment_center
func (r *Rectangle) SetHORIZONTAL_ALIGNMENT_CENTER(HORIZONTAL_ALIGNMENT_CENTER float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(HORIZONTAL_ALIGNMENT_CENTER)
	return RectangleFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_LEFT returns the HORIZONTAL_ALIGNMENT_LEFT property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#horizontal_alignment_left
func (r *Rectangle) HORIZONTAL_ALIGNMENT_LEFT(HORIZONTAL_ALIGNMENT_LEFT float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(HORIZONTAL_ALIGNMENT_LEFT)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_LEFT sets the HORIZONTAL_ALIGNMENT_LEFT property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#horizontal_alignment_left
func (r *Rectangle) SetHORIZONTAL_ALIGNMENT_LEFT(HORIZONTAL_ALIGNMENT_LEFT float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(HORIZONTAL_ALIGNMENT_LEFT)
	return RectangleFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_RIGHT returns the HORIZONTAL_ALIGNMENT_RIGHT property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#horizontal_alignment_right
func (r *Rectangle) HORIZONTAL_ALIGNMENT_RIGHT(HORIZONTAL_ALIGNMENT_RIGHT float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(HORIZONTAL_ALIGNMENT_RIGHT)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_RIGHT sets the HORIZONTAL_ALIGNMENT_RIGHT property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#horizontal_alignment_right
func (r *Rectangle) SetHORIZONTAL_ALIGNMENT_RIGHT(HORIZONTAL_ALIGNMENT_RIGHT float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(HORIZONTAL_ALIGNMENT_RIGHT)
	return RectangleFromJSObject(p, ba.ctx)
}

// Height returns the Height property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#height
func (r *Rectangle) Height(height string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(height)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetHeight sets the Height property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#height
func (r *Rectangle) SetHeight(height string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(height)
	return RectangleFromJSObject(p, ba.ctx)
}

// HeightInPixels returns the HeightInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#heightinpixels
func (r *Rectangle) HeightInPixels(heightInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(heightInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetHeightInPixels sets the HeightInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#heightinpixels
func (r *Rectangle) SetHeightInPixels(heightInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(heightInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// HorizontalAlignment returns the HorizontalAlignment property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#horizontalalignment
func (r *Rectangle) HorizontalAlignment(horizontalAlignment float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(horizontalAlignment)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetHorizontalAlignment sets the HorizontalAlignment property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#horizontalalignment
func (r *Rectangle) SetHorizontalAlignment(horizontalAlignment float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(horizontalAlignment)
	return RectangleFromJSObject(p, ba.ctx)
}

// Host returns the Host property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#host
func (r *Rectangle) Host(host *AdvancedDynamicTexture) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(host.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// SetHost sets the Host property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#host
func (r *Rectangle) SetHost(host *AdvancedDynamicTexture) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(host.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// HoverCursor returns the HoverCursor property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#hovercursor
func (r *Rectangle) HoverCursor(hoverCursor string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(hoverCursor)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetHoverCursor sets the HoverCursor property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#hovercursor
func (r *Rectangle) SetHoverCursor(hoverCursor string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(hoverCursor)
	return RectangleFromJSObject(p, ba.ctx)
}

// IsDirty returns the IsDirty property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#isdirty
func (r *Rectangle) IsDirty(isDirty bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(isDirty)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetIsDirty sets the IsDirty property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#isdirty
func (r *Rectangle) SetIsDirty(isDirty bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(isDirty)
	return RectangleFromJSObject(p, ba.ctx)
}

// IsEnabled returns the IsEnabled property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#isenabled
func (r *Rectangle) IsEnabled(isEnabled bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(isEnabled)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetIsEnabled sets the IsEnabled property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#isenabled
func (r *Rectangle) SetIsEnabled(isEnabled bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(isEnabled)
	return RectangleFromJSObject(p, ba.ctx)
}

// IsFocusInvisible returns the IsFocusInvisible property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#isfocusinvisible
func (r *Rectangle) IsFocusInvisible(isFocusInvisible bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(isFocusInvisible)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetIsFocusInvisible sets the IsFocusInvisible property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#isfocusinvisible
func (r *Rectangle) SetIsFocusInvisible(isFocusInvisible bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(isFocusInvisible)
	return RectangleFromJSObject(p, ba.ctx)
}

// IsHighlighted returns the IsHighlighted property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#ishighlighted
func (r *Rectangle) IsHighlighted(isHighlighted bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(isHighlighted)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetIsHighlighted sets the IsHighlighted property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#ishighlighted
func (r *Rectangle) SetIsHighlighted(isHighlighted bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(isHighlighted)
	return RectangleFromJSObject(p, ba.ctx)
}

// IsHitTestVisible returns the IsHitTestVisible property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#ishittestvisible
func (r *Rectangle) IsHitTestVisible(isHitTestVisible bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(isHitTestVisible)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetIsHitTestVisible sets the IsHitTestVisible property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#ishittestvisible
func (r *Rectangle) SetIsHitTestVisible(isHitTestVisible bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(isHitTestVisible)
	return RectangleFromJSObject(p, ba.ctx)
}

// IsPointerBlocker returns the IsPointerBlocker property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#ispointerblocker
func (r *Rectangle) IsPointerBlocker(isPointerBlocker bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(isPointerBlocker)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetIsPointerBlocker sets the IsPointerBlocker property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#ispointerblocker
func (r *Rectangle) SetIsPointerBlocker(isPointerBlocker bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(isPointerBlocker)
	return RectangleFromJSObject(p, ba.ctx)
}

// IsVisible returns the IsVisible property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#isvisible
func (r *Rectangle) IsVisible(isVisible bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(isVisible)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetIsVisible sets the IsVisible property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#isvisible
func (r *Rectangle) SetIsVisible(isVisible bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(isVisible)
	return RectangleFromJSObject(p, ba.ctx)
}

// Left returns the Left property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#left
func (r *Rectangle) Left(left string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(left)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#left
func (r *Rectangle) SetLeft(left string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(left)
	return RectangleFromJSObject(p, ba.ctx)
}

// LeftInPixels returns the LeftInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#leftinpixels
func (r *Rectangle) LeftInPixels(leftInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(leftInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetLeftInPixels sets the LeftInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#leftinpixels
func (r *Rectangle) SetLeftInPixels(leftInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(leftInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// LinkOffsetX returns the LinkOffsetX property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#linkoffsetx
func (r *Rectangle) LinkOffsetX(linkOffsetX string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(linkOffsetX)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetLinkOffsetX sets the LinkOffsetX property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#linkoffsetx
func (r *Rectangle) SetLinkOffsetX(linkOffsetX string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(linkOffsetX)
	return RectangleFromJSObject(p, ba.ctx)
}

// LinkOffsetXInPixels returns the LinkOffsetXInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#linkoffsetxinpixels
func (r *Rectangle) LinkOffsetXInPixels(linkOffsetXInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(linkOffsetXInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetLinkOffsetXInPixels sets the LinkOffsetXInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#linkoffsetxinpixels
func (r *Rectangle) SetLinkOffsetXInPixels(linkOffsetXInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(linkOffsetXInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// LinkOffsetY returns the LinkOffsetY property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#linkoffsety
func (r *Rectangle) LinkOffsetY(linkOffsetY string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(linkOffsetY)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetLinkOffsetY sets the LinkOffsetY property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#linkoffsety
func (r *Rectangle) SetLinkOffsetY(linkOffsetY string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(linkOffsetY)
	return RectangleFromJSObject(p, ba.ctx)
}

// LinkOffsetYInPixels returns the LinkOffsetYInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#linkoffsetyinpixels
func (r *Rectangle) LinkOffsetYInPixels(linkOffsetYInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(linkOffsetYInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetLinkOffsetYInPixels sets the LinkOffsetYInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#linkoffsetyinpixels
func (r *Rectangle) SetLinkOffsetYInPixels(linkOffsetYInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(linkOffsetYInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// LinkedMesh returns the LinkedMesh property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#linkedmesh
func (r *Rectangle) LinkedMesh(linkedMesh *AbstractMesh) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(linkedMesh.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// SetLinkedMesh sets the LinkedMesh property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#linkedmesh
func (r *Rectangle) SetLinkedMesh(linkedMesh *AbstractMesh) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(linkedMesh.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// LogLayoutCycleErrors returns the LogLayoutCycleErrors property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#loglayoutcycleerrors
func (r *Rectangle) LogLayoutCycleErrors(logLayoutCycleErrors bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(logLayoutCycleErrors)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetLogLayoutCycleErrors sets the LogLayoutCycleErrors property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#loglayoutcycleerrors
func (r *Rectangle) SetLogLayoutCycleErrors(logLayoutCycleErrors bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(logLayoutCycleErrors)
	return RectangleFromJSObject(p, ba.ctx)
}

// MaxLayoutCycle returns the MaxLayoutCycle property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#maxlayoutcycle
func (r *Rectangle) MaxLayoutCycle(maxLayoutCycle float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(maxLayoutCycle)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetMaxLayoutCycle sets the MaxLayoutCycle property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#maxlayoutcycle
func (r *Rectangle) SetMaxLayoutCycle(maxLayoutCycle float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(maxLayoutCycle)
	return RectangleFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#metadata
func (r *Rectangle) Metadata(metadata interface{}) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(metadata)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#metadata
func (r *Rectangle) SetMetadata(metadata interface{}) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(metadata)
	return RectangleFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#name
func (r *Rectangle) Name(name string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(name)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#name
func (r *Rectangle) SetName(name string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(name)
	return RectangleFromJSObject(p, ba.ctx)
}

// NotRenderable returns the NotRenderable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#notrenderable
func (r *Rectangle) NotRenderable(notRenderable bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(notRenderable)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetNotRenderable sets the NotRenderable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#notrenderable
func (r *Rectangle) SetNotRenderable(notRenderable bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(notRenderable)
	return RectangleFromJSObject(p, ba.ctx)
}

// OnAfterDrawObservable returns the OnAfterDrawObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onafterdrawobservable
func (r *Rectangle) OnAfterDrawObservable(onAfterDrawObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onAfterDrawObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// SetOnAfterDrawObservable sets the OnAfterDrawObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onafterdrawobservable
func (r *Rectangle) SetOnAfterDrawObservable(onAfterDrawObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onAfterDrawObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// OnBeforeDrawObservable returns the OnBeforeDrawObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onbeforedrawobservable
func (r *Rectangle) OnBeforeDrawObservable(onBeforeDrawObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onBeforeDrawObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// SetOnBeforeDrawObservable sets the OnBeforeDrawObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onbeforedrawobservable
func (r *Rectangle) SetOnBeforeDrawObservable(onBeforeDrawObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onBeforeDrawObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// OnDirtyObservable returns the OnDirtyObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#ondirtyobservable
func (r *Rectangle) OnDirtyObservable(onDirtyObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onDirtyObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// SetOnDirtyObservable sets the OnDirtyObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#ondirtyobservable
func (r *Rectangle) SetOnDirtyObservable(onDirtyObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onDirtyObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// OnPointerClickObservable returns the OnPointerClickObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onpointerclickobservable
func (r *Rectangle) OnPointerClickObservable(onPointerClickObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onPointerClickObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// SetOnPointerClickObservable sets the OnPointerClickObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onpointerclickobservable
func (r *Rectangle) SetOnPointerClickObservable(onPointerClickObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onPointerClickObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// OnPointerDownObservable returns the OnPointerDownObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onpointerdownobservable
func (r *Rectangle) OnPointerDownObservable(onPointerDownObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onPointerDownObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// SetOnPointerDownObservable sets the OnPointerDownObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onpointerdownobservable
func (r *Rectangle) SetOnPointerDownObservable(onPointerDownObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onPointerDownObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// OnPointerEnterObservable returns the OnPointerEnterObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onpointerenterobservable
func (r *Rectangle) OnPointerEnterObservable(onPointerEnterObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onPointerEnterObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// SetOnPointerEnterObservable sets the OnPointerEnterObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onpointerenterobservable
func (r *Rectangle) SetOnPointerEnterObservable(onPointerEnterObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onPointerEnterObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// OnPointerMoveObservable returns the OnPointerMoveObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onpointermoveobservable
func (r *Rectangle) OnPointerMoveObservable(onPointerMoveObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onPointerMoveObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// SetOnPointerMoveObservable sets the OnPointerMoveObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onpointermoveobservable
func (r *Rectangle) SetOnPointerMoveObservable(onPointerMoveObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onPointerMoveObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// OnPointerOutObservable returns the OnPointerOutObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onpointeroutobservable
func (r *Rectangle) OnPointerOutObservable(onPointerOutObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onPointerOutObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// SetOnPointerOutObservable sets the OnPointerOutObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onpointeroutobservable
func (r *Rectangle) SetOnPointerOutObservable(onPointerOutObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onPointerOutObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// OnPointerUpObservable returns the OnPointerUpObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onpointerupobservable
func (r *Rectangle) OnPointerUpObservable(onPointerUpObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onPointerUpObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// SetOnPointerUpObservable sets the OnPointerUpObservable property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#onpointerupobservable
func (r *Rectangle) SetOnPointerUpObservable(onPointerUpObservable *Observable) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(onPointerUpObservable.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// PaddingBottom returns the PaddingBottom property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingbottom
func (r *Rectangle) PaddingBottom(paddingBottom string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingBottom)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetPaddingBottom sets the PaddingBottom property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingbottom
func (r *Rectangle) SetPaddingBottom(paddingBottom string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingBottom)
	return RectangleFromJSObject(p, ba.ctx)
}

// PaddingBottomInPixels returns the PaddingBottomInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingbottominpixels
func (r *Rectangle) PaddingBottomInPixels(paddingBottomInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingBottomInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetPaddingBottomInPixels sets the PaddingBottomInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingbottominpixels
func (r *Rectangle) SetPaddingBottomInPixels(paddingBottomInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingBottomInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// PaddingLeft returns the PaddingLeft property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingleft
func (r *Rectangle) PaddingLeft(paddingLeft string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingLeft)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetPaddingLeft sets the PaddingLeft property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingleft
func (r *Rectangle) SetPaddingLeft(paddingLeft string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingLeft)
	return RectangleFromJSObject(p, ba.ctx)
}

// PaddingLeftInPixels returns the PaddingLeftInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingleftinpixels
func (r *Rectangle) PaddingLeftInPixels(paddingLeftInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingLeftInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetPaddingLeftInPixels sets the PaddingLeftInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingleftinpixels
func (r *Rectangle) SetPaddingLeftInPixels(paddingLeftInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingLeftInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// PaddingRight returns the PaddingRight property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingright
func (r *Rectangle) PaddingRight(paddingRight string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingRight)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetPaddingRight sets the PaddingRight property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingright
func (r *Rectangle) SetPaddingRight(paddingRight string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingRight)
	return RectangleFromJSObject(p, ba.ctx)
}

// PaddingRightInPixels returns the PaddingRightInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingrightinpixels
func (r *Rectangle) PaddingRightInPixels(paddingRightInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingRightInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetPaddingRightInPixels sets the PaddingRightInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingrightinpixels
func (r *Rectangle) SetPaddingRightInPixels(paddingRightInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingRightInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// PaddingTop returns the PaddingTop property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingtop
func (r *Rectangle) PaddingTop(paddingTop string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingTop)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetPaddingTop sets the PaddingTop property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingtop
func (r *Rectangle) SetPaddingTop(paddingTop string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingTop)
	return RectangleFromJSObject(p, ba.ctx)
}

// PaddingTopInPixels returns the PaddingTopInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingtopinpixels
func (r *Rectangle) PaddingTopInPixels(paddingTopInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingTopInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetPaddingTopInPixels sets the PaddingTopInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#paddingtopinpixels
func (r *Rectangle) SetPaddingTopInPixels(paddingTopInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(paddingTopInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// Parent returns the Parent property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#parent
func (r *Rectangle) Parent(parent *Container) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(parent.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// SetParent sets the Parent property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#parent
func (r *Rectangle) SetParent(parent *Container) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(parent.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// Rotation returns the Rotation property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#rotation
func (r *Rectangle) Rotation(rotation float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(rotation)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetRotation sets the Rotation property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#rotation
func (r *Rectangle) SetRotation(rotation float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(rotation)
	return RectangleFromJSObject(p, ba.ctx)
}

// ScaleX returns the ScaleX property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#scalex
func (r *Rectangle) ScaleX(scaleX float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(scaleX)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetScaleX sets the ScaleX property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#scalex
func (r *Rectangle) SetScaleX(scaleX float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(scaleX)
	return RectangleFromJSObject(p, ba.ctx)
}

// ScaleY returns the ScaleY property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#scaley
func (r *Rectangle) ScaleY(scaleY float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(scaleY)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetScaleY sets the ScaleY property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#scaley
func (r *Rectangle) SetScaleY(scaleY float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(scaleY)
	return RectangleFromJSObject(p, ba.ctx)
}

// ShadowBlur returns the ShadowBlur property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#shadowblur
func (r *Rectangle) ShadowBlur(shadowBlur float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(shadowBlur)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetShadowBlur sets the ShadowBlur property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#shadowblur
func (r *Rectangle) SetShadowBlur(shadowBlur float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(shadowBlur)
	return RectangleFromJSObject(p, ba.ctx)
}

// ShadowColor returns the ShadowColor property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#shadowcolor
func (r *Rectangle) ShadowColor(shadowColor string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(shadowColor)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetShadowColor sets the ShadowColor property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#shadowcolor
func (r *Rectangle) SetShadowColor(shadowColor string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(shadowColor)
	return RectangleFromJSObject(p, ba.ctx)
}

// ShadowOffsetX returns the ShadowOffsetX property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#shadowoffsetx
func (r *Rectangle) ShadowOffsetX(shadowOffsetX float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(shadowOffsetX)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetShadowOffsetX sets the ShadowOffsetX property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#shadowoffsetx
func (r *Rectangle) SetShadowOffsetX(shadowOffsetX float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(shadowOffsetX)
	return RectangleFromJSObject(p, ba.ctx)
}

// ShadowOffsetY returns the ShadowOffsetY property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#shadowoffsety
func (r *Rectangle) ShadowOffsetY(shadowOffsetY float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(shadowOffsetY)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetShadowOffsetY sets the ShadowOffsetY property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#shadowoffsety
func (r *Rectangle) SetShadowOffsetY(shadowOffsetY float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(shadowOffsetY)
	return RectangleFromJSObject(p, ba.ctx)
}

// Style returns the Style property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#style
func (r *Rectangle) Style(style *Style) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(style.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// SetStyle sets the Style property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#style
func (r *Rectangle) SetStyle(style *Style) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(style.JSObject())
	return RectangleFromJSObject(p, ba.ctx)
}

// Thickness returns the Thickness property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#thickness
func (r *Rectangle) Thickness(thickness float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(thickness)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetThickness sets the Thickness property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#thickness
func (r *Rectangle) SetThickness(thickness float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(thickness)
	return RectangleFromJSObject(p, ba.ctx)
}

// Top returns the Top property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#top
func (r *Rectangle) Top(top string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(top)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetTop sets the Top property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#top
func (r *Rectangle) SetTop(top string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(top)
	return RectangleFromJSObject(p, ba.ctx)
}

// TopInPixels returns the TopInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#topinpixels
func (r *Rectangle) TopInPixels(topInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(topInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetTopInPixels sets the TopInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#topinpixels
func (r *Rectangle) SetTopInPixels(topInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(topInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// TransformCenterX returns the TransformCenterX property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#transformcenterx
func (r *Rectangle) TransformCenterX(transformCenterX float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(transformCenterX)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetTransformCenterX sets the TransformCenterX property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#transformcenterx
func (r *Rectangle) SetTransformCenterX(transformCenterX float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(transformCenterX)
	return RectangleFromJSObject(p, ba.ctx)
}

// TransformCenterY returns the TransformCenterY property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#transformcentery
func (r *Rectangle) TransformCenterY(transformCenterY float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(transformCenterY)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetTransformCenterY sets the TransformCenterY property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#transformcentery
func (r *Rectangle) SetTransformCenterY(transformCenterY float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(transformCenterY)
	return RectangleFromJSObject(p, ba.ctx)
}

// TypeName returns the TypeName property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#typename
func (r *Rectangle) TypeName(typeName string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(typeName)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetTypeName sets the TypeName property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#typename
func (r *Rectangle) SetTypeName(typeName string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(typeName)
	return RectangleFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#uniqueid
func (r *Rectangle) UniqueId(uniqueId float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(uniqueId)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#uniqueid
func (r *Rectangle) SetUniqueId(uniqueId float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(uniqueId)
	return RectangleFromJSObject(p, ba.ctx)
}

// UseBitmapCache returns the UseBitmapCache property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#usebitmapcache
func (r *Rectangle) UseBitmapCache(useBitmapCache bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(useBitmapCache)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetUseBitmapCache sets the UseBitmapCache property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#usebitmapcache
func (r *Rectangle) SetUseBitmapCache(useBitmapCache bool) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(useBitmapCache)
	return RectangleFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_BOTTOM returns the VERTICAL_ALIGNMENT_BOTTOM property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#vertical_alignment_bottom
func (r *Rectangle) VERTICAL_ALIGNMENT_BOTTOM(VERTICAL_ALIGNMENT_BOTTOM float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(VERTICAL_ALIGNMENT_BOTTOM)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_BOTTOM sets the VERTICAL_ALIGNMENT_BOTTOM property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#vertical_alignment_bottom
func (r *Rectangle) SetVERTICAL_ALIGNMENT_BOTTOM(VERTICAL_ALIGNMENT_BOTTOM float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(VERTICAL_ALIGNMENT_BOTTOM)
	return RectangleFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_CENTER returns the VERTICAL_ALIGNMENT_CENTER property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#vertical_alignment_center
func (r *Rectangle) VERTICAL_ALIGNMENT_CENTER(VERTICAL_ALIGNMENT_CENTER float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(VERTICAL_ALIGNMENT_CENTER)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_CENTER sets the VERTICAL_ALIGNMENT_CENTER property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#vertical_alignment_center
func (r *Rectangle) SetVERTICAL_ALIGNMENT_CENTER(VERTICAL_ALIGNMENT_CENTER float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(VERTICAL_ALIGNMENT_CENTER)
	return RectangleFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_TOP returns the VERTICAL_ALIGNMENT_TOP property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#vertical_alignment_top
func (r *Rectangle) VERTICAL_ALIGNMENT_TOP(VERTICAL_ALIGNMENT_TOP float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(VERTICAL_ALIGNMENT_TOP)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_TOP sets the VERTICAL_ALIGNMENT_TOP property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#vertical_alignment_top
func (r *Rectangle) SetVERTICAL_ALIGNMENT_TOP(VERTICAL_ALIGNMENT_TOP float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(VERTICAL_ALIGNMENT_TOP)
	return RectangleFromJSObject(p, ba.ctx)
}

// VerticalAlignment returns the VerticalAlignment property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#verticalalignment
func (r *Rectangle) VerticalAlignment(verticalAlignment float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(verticalAlignment)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetVerticalAlignment sets the VerticalAlignment property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#verticalalignment
func (r *Rectangle) SetVerticalAlignment(verticalAlignment float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(verticalAlignment)
	return RectangleFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#width
func (r *Rectangle) Width(width string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(width)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#width
func (r *Rectangle) SetWidth(width string) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(width)
	return RectangleFromJSObject(p, ba.ctx)
}

// WidthInPixels returns the WidthInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#widthinpixels
func (r *Rectangle) WidthInPixels(widthInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(widthInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetWidthInPixels sets the WidthInPixels property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#widthinpixels
func (r *Rectangle) SetWidthInPixels(widthInPixels float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(widthInPixels)
	return RectangleFromJSObject(p, ba.ctx)
}

// ZIndex returns the ZIndex property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#zindex
func (r *Rectangle) ZIndex(zIndex float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(zIndex)
	return RectangleFromJSObject(p, ba.ctx)
}

// SetZIndex sets the ZIndex property of class Rectangle.
//
// https://doc.babylonjs.com/api/classes/babylon.rectangle#zindex
func (r *Rectangle) SetZIndex(zIndex float64) *Rectangle {
	p := ba.ctx.Get("Rectangle").New(zIndex)
	return RectangleFromJSObject(p, ba.ctx)
}

*/
