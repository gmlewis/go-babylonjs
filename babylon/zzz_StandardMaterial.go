// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// StandardMaterial represents a babylon.js StandardMaterial.
// This is the default material used in Babylon. It is the best trade off between quality
// and performances.
//
// See: http://doc.babylonjs.com/babylon101/materials
type StandardMaterial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *StandardMaterial) JSObject() js.Value { return s.p }

// StandardMaterial returns a StandardMaterial JavaScript class.
func (ba *Babylon) StandardMaterial() *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial")
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// StandardMaterialFromJSObject returns a wrapped StandardMaterial JavaScript class.
func StandardMaterialFromJSObject(p js.Value, ctx js.Value) *StandardMaterial {
	return &StandardMaterial{p: p, ctx: ctx}
}

// StandardMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func StandardMaterialArrayToJSArray(array []*StandardMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewStandardMaterial returns a new StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial
func (ba *Babylon) NewStandardMaterial(name string, scene *Scene) *StandardMaterial {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("StandardMaterial").New(args...)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// BindForSubMesh calls the BindForSubMesh method on the StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#bindforsubmesh
func (s *StandardMaterial) BindForSubMesh(world *Matrix, mesh *Mesh, subMesh *SubMesh) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, world.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	s.p.Call("bindForSubMesh", args...)
}

// BuildUniformLayout calls the BuildUniformLayout method on the StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#builduniformlayout
func (s *StandardMaterial) BuildUniformLayout() {

	s.p.Call("buildUniformLayout")
}

// Clone calls the Clone method on the StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#clone
func (s *StandardMaterial) Clone(name string) *StandardMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := s.p.Call("clone", args...)
	return StandardMaterialFromJSObject(retVal, s.ctx)
}

// StandardMaterialDisposeOpts contains optional parameters for StandardMaterial.Dispose.
type StandardMaterialDisposeOpts struct {
	ForceDisposeEffect   *bool
	ForceDisposeTextures *bool
}

// Dispose calls the Dispose method on the StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#dispose
func (s *StandardMaterial) Dispose(opts *StandardMaterialDisposeOpts) {
	if opts == nil {
		opts = &StandardMaterialDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.ForceDisposeEffect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeEffect)
	}
	if opts.ForceDisposeTextures == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeTextures)
	}

	s.p.Call("dispose", args...)
}

// GetActiveTextures calls the GetActiveTextures method on the StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#getactivetextures
func (s *StandardMaterial) GetActiveTextures() *BaseTexture {

	retVal := s.p.Call("getActiveTextures")
	return BaseTextureFromJSObject(retVal, s.ctx)
}

// GetAlphaTestTexture calls the GetAlphaTestTexture method on the StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#getalphatesttexture
func (s *StandardMaterial) GetAlphaTestTexture() *BaseTexture {

	retVal := s.p.Call("getAlphaTestTexture")
	return BaseTextureFromJSObject(retVal, s.ctx)
}

// GetAnimatables calls the GetAnimatables method on the StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#getanimatables
func (s *StandardMaterial) GetAnimatables() *IAnimatable {

	retVal := s.p.Call("getAnimatables")
	return IAnimatableFromJSObject(retVal, s.ctx)
}

// GetClassName calls the GetClassName method on the StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#getclassname
func (s *StandardMaterial) GetClassName() string {

	retVal := s.p.Call("getClassName")
	return retVal.String()
}

// HasTexture calls the HasTexture method on the StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#hastexture
func (s *StandardMaterial) HasTexture(texture *BaseTexture) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	retVal := s.p.Call("hasTexture", args...)
	return retVal.Bool()
}

// StandardMaterialIsReadyForSubMeshOpts contains optional parameters for StandardMaterial.IsReadyForSubMesh.
type StandardMaterialIsReadyForSubMeshOpts struct {
	UseInstances *bool
}

// IsReadyForSubMesh calls the IsReadyForSubMesh method on the StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#isreadyforsubmesh
func (s *StandardMaterial) IsReadyForSubMesh(mesh *AbstractMesh, subMesh *SubMesh, opts *StandardMaterialIsReadyForSubMeshOpts) bool {
	if opts == nil {
		opts = &StandardMaterialIsReadyForSubMeshOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := s.p.Call("isReadyForSubMesh", args...)
	return retVal.Bool()
}

// NeedAlphaBlending calls the NeedAlphaBlending method on the StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#needalphablending
func (s *StandardMaterial) NeedAlphaBlending() bool {

	retVal := s.p.Call("needAlphaBlending")
	return retVal.Bool()
}

// NeedAlphaTesting calls the NeedAlphaTesting method on the StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#needalphatesting
func (s *StandardMaterial) NeedAlphaTesting() bool {

	retVal := s.p.Call("needAlphaTesting")
	return retVal.Bool()
}

// Parse calls the Parse method on the StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#parse
func (s *StandardMaterial) Parse(source interface{}, scene *Scene, rootUrl string) *StandardMaterial {

	args := make([]interface{}, 0, 3+0)

	args = append(args, source)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := s.p.Call("Parse", args...)
	return StandardMaterialFromJSObject(retVal, s.ctx)
}

// Serialize calls the Serialize method on the StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#serialize
func (s *StandardMaterial) Serialize() interface{} {

	retVal := s.p.Call("serialize")
	return retVal
}

// Unbind calls the Unbind method on the StandardMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#unbind
func (s *StandardMaterial) Unbind() {

	s.p.Call("unbind")
}

/*

// AlphaCutOff returns the AlphaCutOff property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#alphacutoff
func (s *StandardMaterial) AlphaCutOff(alphaCutOff float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(alphaCutOff)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetAlphaCutOff sets the AlphaCutOff property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#alphacutoff
func (s *StandardMaterial) SetAlphaCutOff(alphaCutOff float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(alphaCutOff)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// AmbientColor returns the AmbientColor property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#ambientcolor
func (s *StandardMaterial) AmbientColor(ambientColor *Color3) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(ambientColor.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetAmbientColor sets the AmbientColor property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#ambientcolor
func (s *StandardMaterial) SetAmbientColor(ambientColor *Color3) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(ambientColor.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// AmbientTexture returns the AmbientTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#ambienttexture
func (s *StandardMaterial) AmbientTexture(ambientTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(ambientTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetAmbientTexture sets the AmbientTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#ambienttexture
func (s *StandardMaterial) SetAmbientTexture(ambientTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(ambientTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// AmbientTextureEnabled returns the AmbientTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#ambienttextureenabled
func (s *StandardMaterial) AmbientTextureEnabled(AmbientTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(AmbientTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetAmbientTextureEnabled sets the AmbientTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#ambienttextureenabled
func (s *StandardMaterial) SetAmbientTextureEnabled(AmbientTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(AmbientTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// BumpTexture returns the BumpTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#bumptexture
func (s *StandardMaterial) BumpTexture(bumpTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(bumpTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetBumpTexture sets the BumpTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#bumptexture
func (s *StandardMaterial) SetBumpTexture(bumpTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(bumpTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// BumpTextureEnabled returns the BumpTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#bumptextureenabled
func (s *StandardMaterial) BumpTextureEnabled(BumpTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(BumpTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetBumpTextureEnabled sets the BumpTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#bumptextureenabled
func (s *StandardMaterial) SetBumpTextureEnabled(BumpTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(BumpTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// CameraColorCurves returns the CameraColorCurves property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#cameracolorcurves
func (s *StandardMaterial) CameraColorCurves(cameraColorCurves *ColorCurves) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(cameraColorCurves.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetCameraColorCurves sets the CameraColorCurves property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#cameracolorcurves
func (s *StandardMaterial) SetCameraColorCurves(cameraColorCurves *ColorCurves) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(cameraColorCurves.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// CameraColorCurvesEnabled returns the CameraColorCurvesEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#cameracolorcurvesenabled
func (s *StandardMaterial) CameraColorCurvesEnabled(cameraColorCurvesEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(cameraColorCurvesEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetCameraColorCurvesEnabled sets the CameraColorCurvesEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#cameracolorcurvesenabled
func (s *StandardMaterial) SetCameraColorCurvesEnabled(cameraColorCurvesEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(cameraColorCurvesEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// CameraColorGradingEnabled returns the CameraColorGradingEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#cameracolorgradingenabled
func (s *StandardMaterial) CameraColorGradingEnabled(cameraColorGradingEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(cameraColorGradingEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetCameraColorGradingEnabled sets the CameraColorGradingEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#cameracolorgradingenabled
func (s *StandardMaterial) SetCameraColorGradingEnabled(cameraColorGradingEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(cameraColorGradingEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// CameraColorGradingTexture returns the CameraColorGradingTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#cameracolorgradingtexture
func (s *StandardMaterial) CameraColorGradingTexture(cameraColorGradingTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(cameraColorGradingTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetCameraColorGradingTexture sets the CameraColorGradingTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#cameracolorgradingtexture
func (s *StandardMaterial) SetCameraColorGradingTexture(cameraColorGradingTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(cameraColorGradingTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// CameraContrast returns the CameraContrast property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#cameracontrast
func (s *StandardMaterial) CameraContrast(cameraContrast float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(cameraContrast)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetCameraContrast sets the CameraContrast property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#cameracontrast
func (s *StandardMaterial) SetCameraContrast(cameraContrast float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(cameraContrast)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// CameraExposure returns the CameraExposure property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#cameraexposure
func (s *StandardMaterial) CameraExposure(cameraExposure float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(cameraExposure)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetCameraExposure sets the CameraExposure property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#cameraexposure
func (s *StandardMaterial) SetCameraExposure(cameraExposure float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(cameraExposure)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// CameraToneMappingEnabled returns the CameraToneMappingEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#cameratonemappingenabled
func (s *StandardMaterial) CameraToneMappingEnabled(cameraToneMappingEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(cameraToneMappingEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetCameraToneMappingEnabled sets the CameraToneMappingEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#cameratonemappingenabled
func (s *StandardMaterial) SetCameraToneMappingEnabled(cameraToneMappingEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(cameraToneMappingEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// ColorGradingTextureEnabled returns the ColorGradingTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#colorgradingtextureenabled
func (s *StandardMaterial) ColorGradingTextureEnabled(ColorGradingTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(ColorGradingTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetColorGradingTextureEnabled sets the ColorGradingTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#colorgradingtextureenabled
func (s *StandardMaterial) SetColorGradingTextureEnabled(ColorGradingTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(ColorGradingTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// CustomShaderNameResolve returns the CustomShaderNameResolve property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#customshadernameresolve
func (s *StandardMaterial) CustomShaderNameResolve(customShaderNameResolve func()) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {customShaderNameResolve(); return nil}))
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetCustomShaderNameResolve sets the CustomShaderNameResolve property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#customshadernameresolve
func (s *StandardMaterial) SetCustomShaderNameResolve(customShaderNameResolve func()) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {customShaderNameResolve(); return nil}))
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// DiffuseColor returns the DiffuseColor property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#diffusecolor
func (s *StandardMaterial) DiffuseColor(diffuseColor *Color3) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(diffuseColor.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseColor sets the DiffuseColor property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#diffusecolor
func (s *StandardMaterial) SetDiffuseColor(diffuseColor *Color3) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(diffuseColor.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// DiffuseFresnelParameters returns the DiffuseFresnelParameters property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#diffusefresnelparameters
func (s *StandardMaterial) DiffuseFresnelParameters(diffuseFresnelParameters *FresnelParameters) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(diffuseFresnelParameters.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseFresnelParameters sets the DiffuseFresnelParameters property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#diffusefresnelparameters
func (s *StandardMaterial) SetDiffuseFresnelParameters(diffuseFresnelParameters *FresnelParameters) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(diffuseFresnelParameters.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTexture returns the DiffuseTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#diffusetexture
func (s *StandardMaterial) DiffuseTexture(diffuseTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(diffuseTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTexture sets the DiffuseTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#diffusetexture
func (s *StandardMaterial) SetDiffuseTexture(diffuseTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(diffuseTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTextureEnabled returns the DiffuseTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#diffusetextureenabled
func (s *StandardMaterial) DiffuseTextureEnabled(DiffuseTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(DiffuseTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTextureEnabled sets the DiffuseTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#diffusetextureenabled
func (s *StandardMaterial) SetDiffuseTextureEnabled(DiffuseTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(DiffuseTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// DisableLighting returns the DisableLighting property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#disablelighting
func (s *StandardMaterial) DisableLighting(disableLighting bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(disableLighting)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetDisableLighting sets the DisableLighting property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#disablelighting
func (s *StandardMaterial) SetDisableLighting(disableLighting bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(disableLighting)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// EmissiveColor returns the EmissiveColor property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#emissivecolor
func (s *StandardMaterial) EmissiveColor(emissiveColor *Color3) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(emissiveColor.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetEmissiveColor sets the EmissiveColor property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#emissivecolor
func (s *StandardMaterial) SetEmissiveColor(emissiveColor *Color3) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(emissiveColor.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// EmissiveFresnelParameters returns the EmissiveFresnelParameters property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#emissivefresnelparameters
func (s *StandardMaterial) EmissiveFresnelParameters(emissiveFresnelParameters *FresnelParameters) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(emissiveFresnelParameters.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetEmissiveFresnelParameters sets the EmissiveFresnelParameters property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#emissivefresnelparameters
func (s *StandardMaterial) SetEmissiveFresnelParameters(emissiveFresnelParameters *FresnelParameters) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(emissiveFresnelParameters.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// EmissiveTexture returns the EmissiveTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#emissivetexture
func (s *StandardMaterial) EmissiveTexture(emissiveTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(emissiveTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetEmissiveTexture sets the EmissiveTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#emissivetexture
func (s *StandardMaterial) SetEmissiveTexture(emissiveTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(emissiveTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// EmissiveTextureEnabled returns the EmissiveTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#emissivetextureenabled
func (s *StandardMaterial) EmissiveTextureEnabled(EmissiveTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(EmissiveTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetEmissiveTextureEnabled sets the EmissiveTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#emissivetextureenabled
func (s *StandardMaterial) SetEmissiveTextureEnabled(EmissiveTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(EmissiveTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// FresnelEnabled returns the FresnelEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#fresnelenabled
func (s *StandardMaterial) FresnelEnabled(FresnelEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(FresnelEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetFresnelEnabled sets the FresnelEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#fresnelenabled
func (s *StandardMaterial) SetFresnelEnabled(FresnelEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(FresnelEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// HasRenderTargetTextures returns the HasRenderTargetTextures property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#hasrendertargettextures
func (s *StandardMaterial) HasRenderTargetTextures(hasRenderTargetTextures bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(hasRenderTargetTextures)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetHasRenderTargetTextures sets the HasRenderTargetTextures property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#hasrendertargettextures
func (s *StandardMaterial) SetHasRenderTargetTextures(hasRenderTargetTextures bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(hasRenderTargetTextures)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// ImageProcessingConfiguration returns the ImageProcessingConfiguration property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#imageprocessingconfiguration
func (s *StandardMaterial) ImageProcessingConfiguration(imageProcessingConfiguration *ImageProcessingConfiguration) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(imageProcessingConfiguration.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetImageProcessingConfiguration sets the ImageProcessingConfiguration property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#imageprocessingconfiguration
func (s *StandardMaterial) SetImageProcessingConfiguration(imageProcessingConfiguration *ImageProcessingConfiguration) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(imageProcessingConfiguration.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// IndexOfRefraction returns the IndexOfRefraction property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#indexofrefraction
func (s *StandardMaterial) IndexOfRefraction(indexOfRefraction float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(indexOfRefraction)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetIndexOfRefraction sets the IndexOfRefraction property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#indexofrefraction
func (s *StandardMaterial) SetIndexOfRefraction(indexOfRefraction float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(indexOfRefraction)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// InvertNormalMapX returns the InvertNormalMapX property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#invertnormalmapx
func (s *StandardMaterial) InvertNormalMapX(invertNormalMapX bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(invertNormalMapX)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetInvertNormalMapX sets the InvertNormalMapX property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#invertnormalmapx
func (s *StandardMaterial) SetInvertNormalMapX(invertNormalMapX bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(invertNormalMapX)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// InvertNormalMapY returns the InvertNormalMapY property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#invertnormalmapy
func (s *StandardMaterial) InvertNormalMapY(invertNormalMapY bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(invertNormalMapY)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetInvertNormalMapY sets the InvertNormalMapY property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#invertnormalmapy
func (s *StandardMaterial) SetInvertNormalMapY(invertNormalMapY bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(invertNormalMapY)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// InvertRefractionY returns the InvertRefractionY property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#invertrefractiony
func (s *StandardMaterial) InvertRefractionY(invertRefractionY bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(invertRefractionY)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetInvertRefractionY sets the InvertRefractionY property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#invertrefractiony
func (s *StandardMaterial) SetInvertRefractionY(invertRefractionY bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(invertRefractionY)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// LightmapTexture returns the LightmapTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#lightmaptexture
func (s *StandardMaterial) LightmapTexture(lightmapTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(lightmapTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetLightmapTexture sets the LightmapTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#lightmaptexture
func (s *StandardMaterial) SetLightmapTexture(lightmapTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(lightmapTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// LightmapTextureEnabled returns the LightmapTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#lightmaptextureenabled
func (s *StandardMaterial) LightmapTextureEnabled(LightmapTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(LightmapTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetLightmapTextureEnabled sets the LightmapTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#lightmaptextureenabled
func (s *StandardMaterial) SetLightmapTextureEnabled(LightmapTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(LightmapTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// LinkEmissiveWithDiffuse returns the LinkEmissiveWithDiffuse property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#linkemissivewithdiffuse
func (s *StandardMaterial) LinkEmissiveWithDiffuse(linkEmissiveWithDiffuse bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(linkEmissiveWithDiffuse)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetLinkEmissiveWithDiffuse sets the LinkEmissiveWithDiffuse property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#linkemissivewithdiffuse
func (s *StandardMaterial) SetLinkEmissiveWithDiffuse(linkEmissiveWithDiffuse bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(linkEmissiveWithDiffuse)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// MaxSimultaneousLights returns the MaxSimultaneousLights property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#maxsimultaneouslights
func (s *StandardMaterial) MaxSimultaneousLights(maxSimultaneousLights float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(maxSimultaneousLights)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetMaxSimultaneousLights sets the MaxSimultaneousLights property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#maxsimultaneouslights
func (s *StandardMaterial) SetMaxSimultaneousLights(maxSimultaneousLights float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(maxSimultaneousLights)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// OpacityFresnelParameters returns the OpacityFresnelParameters property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#opacityfresnelparameters
func (s *StandardMaterial) OpacityFresnelParameters(opacityFresnelParameters *FresnelParameters) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(opacityFresnelParameters.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetOpacityFresnelParameters sets the OpacityFresnelParameters property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#opacityfresnelparameters
func (s *StandardMaterial) SetOpacityFresnelParameters(opacityFresnelParameters *FresnelParameters) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(opacityFresnelParameters.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// OpacityTexture returns the OpacityTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#opacitytexture
func (s *StandardMaterial) OpacityTexture(opacityTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(opacityTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetOpacityTexture sets the OpacityTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#opacitytexture
func (s *StandardMaterial) SetOpacityTexture(opacityTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(opacityTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// OpacityTextureEnabled returns the OpacityTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#opacitytextureenabled
func (s *StandardMaterial) OpacityTextureEnabled(OpacityTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(OpacityTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetOpacityTextureEnabled sets the OpacityTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#opacitytextureenabled
func (s *StandardMaterial) SetOpacityTextureEnabled(OpacityTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(OpacityTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// ParallaxScaleBias returns the ParallaxScaleBias property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#parallaxscalebias
func (s *StandardMaterial) ParallaxScaleBias(parallaxScaleBias float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(parallaxScaleBias)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetParallaxScaleBias sets the ParallaxScaleBias property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#parallaxscalebias
func (s *StandardMaterial) SetParallaxScaleBias(parallaxScaleBias float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(parallaxScaleBias)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// ReflectionFresnelParameters returns the ReflectionFresnelParameters property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#reflectionfresnelparameters
func (s *StandardMaterial) ReflectionFresnelParameters(reflectionFresnelParameters *FresnelParameters) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(reflectionFresnelParameters.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetReflectionFresnelParameters sets the ReflectionFresnelParameters property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#reflectionfresnelparameters
func (s *StandardMaterial) SetReflectionFresnelParameters(reflectionFresnelParameters *FresnelParameters) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(reflectionFresnelParameters.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// ReflectionTexture returns the ReflectionTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#reflectiontexture
func (s *StandardMaterial) ReflectionTexture(reflectionTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(reflectionTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetReflectionTexture sets the ReflectionTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#reflectiontexture
func (s *StandardMaterial) SetReflectionTexture(reflectionTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(reflectionTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// ReflectionTextureEnabled returns the ReflectionTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#reflectiontextureenabled
func (s *StandardMaterial) ReflectionTextureEnabled(ReflectionTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(ReflectionTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetReflectionTextureEnabled sets the ReflectionTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#reflectiontextureenabled
func (s *StandardMaterial) SetReflectionTextureEnabled(ReflectionTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(ReflectionTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// RefractionFresnelParameters returns the RefractionFresnelParameters property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#refractionfresnelparameters
func (s *StandardMaterial) RefractionFresnelParameters(refractionFresnelParameters *FresnelParameters) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(refractionFresnelParameters.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetRefractionFresnelParameters sets the RefractionFresnelParameters property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#refractionfresnelparameters
func (s *StandardMaterial) SetRefractionFresnelParameters(refractionFresnelParameters *FresnelParameters) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(refractionFresnelParameters.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// RefractionTexture returns the RefractionTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#refractiontexture
func (s *StandardMaterial) RefractionTexture(refractionTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(refractionTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetRefractionTexture sets the RefractionTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#refractiontexture
func (s *StandardMaterial) SetRefractionTexture(refractionTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(refractionTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// RefractionTextureEnabled returns the RefractionTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#refractiontextureenabled
func (s *StandardMaterial) RefractionTextureEnabled(RefractionTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(RefractionTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetRefractionTextureEnabled sets the RefractionTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#refractiontextureenabled
func (s *StandardMaterial) SetRefractionTextureEnabled(RefractionTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(RefractionTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// Roughness returns the Roughness property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#roughness
func (s *StandardMaterial) Roughness(roughness float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(roughness)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetRoughness sets the Roughness property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#roughness
func (s *StandardMaterial) SetRoughness(roughness float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(roughness)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SpecularColor returns the SpecularColor property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#specularcolor
func (s *StandardMaterial) SpecularColor(specularColor *Color3) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(specularColor.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetSpecularColor sets the SpecularColor property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#specularcolor
func (s *StandardMaterial) SetSpecularColor(specularColor *Color3) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(specularColor.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SpecularPower returns the SpecularPower property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#specularpower
func (s *StandardMaterial) SpecularPower(specularPower float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(specularPower)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetSpecularPower sets the SpecularPower property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#specularpower
func (s *StandardMaterial) SetSpecularPower(specularPower float64) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(specularPower)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SpecularTexture returns the SpecularTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#speculartexture
func (s *StandardMaterial) SpecularTexture(specularTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(specularTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetSpecularTexture sets the SpecularTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#speculartexture
func (s *StandardMaterial) SetSpecularTexture(specularTexture *BaseTexture) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(specularTexture.JSObject())
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SpecularTextureEnabled returns the SpecularTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#speculartextureenabled
func (s *StandardMaterial) SpecularTextureEnabled(SpecularTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(SpecularTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetSpecularTextureEnabled sets the SpecularTextureEnabled property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#speculartextureenabled
func (s *StandardMaterial) SetSpecularTextureEnabled(SpecularTextureEnabled bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(SpecularTextureEnabled)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// TwoSidedLighting returns the TwoSidedLighting property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#twosidedlighting
func (s *StandardMaterial) TwoSidedLighting(twoSidedLighting bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(twoSidedLighting)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetTwoSidedLighting sets the TwoSidedLighting property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#twosidedlighting
func (s *StandardMaterial) SetTwoSidedLighting(twoSidedLighting bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(twoSidedLighting)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// UseAlphaFromDiffuseTexture returns the UseAlphaFromDiffuseTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#usealphafromdiffusetexture
func (s *StandardMaterial) UseAlphaFromDiffuseTexture(useAlphaFromDiffuseTexture bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useAlphaFromDiffuseTexture)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetUseAlphaFromDiffuseTexture sets the UseAlphaFromDiffuseTexture property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#usealphafromdiffusetexture
func (s *StandardMaterial) SetUseAlphaFromDiffuseTexture(useAlphaFromDiffuseTexture bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useAlphaFromDiffuseTexture)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// UseEmissiveAsIllumination returns the UseEmissiveAsIllumination property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#useemissiveasillumination
func (s *StandardMaterial) UseEmissiveAsIllumination(useEmissiveAsIllumination bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useEmissiveAsIllumination)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetUseEmissiveAsIllumination sets the UseEmissiveAsIllumination property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#useemissiveasillumination
func (s *StandardMaterial) SetUseEmissiveAsIllumination(useEmissiveAsIllumination bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useEmissiveAsIllumination)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// UseGlossinessFromSpecularMapAlpha returns the UseGlossinessFromSpecularMapAlpha property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#useglossinessfromspecularmapalpha
func (s *StandardMaterial) UseGlossinessFromSpecularMapAlpha(useGlossinessFromSpecularMapAlpha bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useGlossinessFromSpecularMapAlpha)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetUseGlossinessFromSpecularMapAlpha sets the UseGlossinessFromSpecularMapAlpha property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#useglossinessfromspecularmapalpha
func (s *StandardMaterial) SetUseGlossinessFromSpecularMapAlpha(useGlossinessFromSpecularMapAlpha bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useGlossinessFromSpecularMapAlpha)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// UseLightmapAsShadowmap returns the UseLightmapAsShadowmap property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#uselightmapasshadowmap
func (s *StandardMaterial) UseLightmapAsShadowmap(useLightmapAsShadowmap bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useLightmapAsShadowmap)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetUseLightmapAsShadowmap sets the UseLightmapAsShadowmap property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#uselightmapasshadowmap
func (s *StandardMaterial) SetUseLightmapAsShadowmap(useLightmapAsShadowmap bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useLightmapAsShadowmap)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// UseLogarithmicDepth returns the UseLogarithmicDepth property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#uselogarithmicdepth
func (s *StandardMaterial) UseLogarithmicDepth(useLogarithmicDepth bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useLogarithmicDepth)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetUseLogarithmicDepth sets the UseLogarithmicDepth property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#uselogarithmicdepth
func (s *StandardMaterial) SetUseLogarithmicDepth(useLogarithmicDepth bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useLogarithmicDepth)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// UseObjectSpaceNormalMap returns the UseObjectSpaceNormalMap property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#useobjectspacenormalmap
func (s *StandardMaterial) UseObjectSpaceNormalMap(useObjectSpaceNormalMap bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useObjectSpaceNormalMap)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetUseObjectSpaceNormalMap sets the UseObjectSpaceNormalMap property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#useobjectspacenormalmap
func (s *StandardMaterial) SetUseObjectSpaceNormalMap(useObjectSpaceNormalMap bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useObjectSpaceNormalMap)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// UseParallax returns the UseParallax property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#useparallax
func (s *StandardMaterial) UseParallax(useParallax bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useParallax)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetUseParallax sets the UseParallax property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#useparallax
func (s *StandardMaterial) SetUseParallax(useParallax bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useParallax)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// UseParallaxOcclusion returns the UseParallaxOcclusion property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#useparallaxocclusion
func (s *StandardMaterial) UseParallaxOcclusion(useParallaxOcclusion bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useParallaxOcclusion)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetUseParallaxOcclusion sets the UseParallaxOcclusion property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#useparallaxocclusion
func (s *StandardMaterial) SetUseParallaxOcclusion(useParallaxOcclusion bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useParallaxOcclusion)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// UseReflectionFresnelFromSpecular returns the UseReflectionFresnelFromSpecular property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#usereflectionfresnelfromspecular
func (s *StandardMaterial) UseReflectionFresnelFromSpecular(useReflectionFresnelFromSpecular bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useReflectionFresnelFromSpecular)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetUseReflectionFresnelFromSpecular sets the UseReflectionFresnelFromSpecular property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#usereflectionfresnelfromspecular
func (s *StandardMaterial) SetUseReflectionFresnelFromSpecular(useReflectionFresnelFromSpecular bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useReflectionFresnelFromSpecular)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// UseReflectionOverAlpha returns the UseReflectionOverAlpha property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#usereflectionoveralpha
func (s *StandardMaterial) UseReflectionOverAlpha(useReflectionOverAlpha bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useReflectionOverAlpha)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetUseReflectionOverAlpha sets the UseReflectionOverAlpha property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#usereflectionoveralpha
func (s *StandardMaterial) SetUseReflectionOverAlpha(useReflectionOverAlpha bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useReflectionOverAlpha)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// UseSpecularOverAlpha returns the UseSpecularOverAlpha property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#usespecularoveralpha
func (s *StandardMaterial) UseSpecularOverAlpha(useSpecularOverAlpha bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useSpecularOverAlpha)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

// SetUseSpecularOverAlpha sets the UseSpecularOverAlpha property of class StandardMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.standardmaterial#usespecularoveralpha
func (s *StandardMaterial) SetUseSpecularOverAlpha(useSpecularOverAlpha bool) *StandardMaterial {
	p := ba.ctx.Get("StandardMaterial").New(useSpecularOverAlpha)
	return StandardMaterialFromJSObject(p, ba.ctx)
}

*/
