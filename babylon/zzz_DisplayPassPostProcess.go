// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DisplayPassPostProcess represents a babylon.js DisplayPassPostProcess.
// DisplayPassPostProcess which produces an output the same as it&#39;s input
type DisplayPassPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DisplayPassPostProcess) JSObject() js.Value { return d.p }

// DisplayPassPostProcess returns a DisplayPassPostProcess JavaScript class.
func (ba *Babylon) DisplayPassPostProcess() *DisplayPassPostProcess {
	p := ba.ctx.Get("DisplayPassPostProcess")
	return DisplayPassPostProcessFromJSObject(p, ba.ctx)
}

// DisplayPassPostProcessFromJSObject returns a wrapped DisplayPassPostProcess JavaScript class.
func DisplayPassPostProcessFromJSObject(p js.Value, ctx js.Value) *DisplayPassPostProcess {
	return &DisplayPassPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// DisplayPassPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func DisplayPassPostProcessArrayToJSArray(array []*DisplayPassPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDisplayPassPostProcessOpts contains optional parameters for NewDisplayPassPostProcess.
type NewDisplayPassPostProcessOpts struct {
	SamplingMode *float64
	Engine       *Engine
	Reusable     *bool
}

// NewDisplayPassPostProcess returns a new DisplayPassPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.displaypasspostprocess#constructor
func (ba *Babylon) NewDisplayPassPostProcess(name string, options float64, camera *Camera, opts *NewDisplayPassPostProcessOpts) *DisplayPassPostProcess {
	if opts == nil {
		opts = &NewDisplayPassPostProcessOpts{}
	}

	args := make([]interface{}, 0, 3+3)

	args = append(args, name)
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}

	p := ba.ctx.Get("DisplayPassPostProcess").New(args...)
	return DisplayPassPostProcessFromJSObject(p, ba.ctx)
}
