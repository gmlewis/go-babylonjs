// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SetParentAction represents a babylon.js SetParentAction.
// This defines an action responsible to set the parent property of the target once triggered.
//
// See: http://doc.babylonjs.com/how_to/how_to_use_actions
type SetParentAction struct{ *Action }

// JSObject returns the underlying js.Value.
func (s *SetParentAction) JSObject() js.Value { return s.p }

// SetParentAction returns a SetParentAction JavaScript class.
func (ba *Babylon) SetParentAction() *SetParentAction {
	p := ba.ctx.Get("SetParentAction")
	return SetParentActionFromJSObject(p)
}

// SetParentActionFromJSObject returns a wrapped SetParentAction JavaScript class.
func SetParentActionFromJSObject(p js.Value) *SetParentAction {
	return &SetParentAction{ActionFromJSObject(p)}
}

// NewSetParentActionOpts contains optional parameters for NewSetParentAction.
type NewSetParentActionOpts struct {
	Condition *Condition
}

// NewSetParentAction returns a new SetParentAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.setparentaction
func (ba *Babylon) NewSetParentAction(triggerOptions interface{}, target interface{}, parent interface{}, opts *NewSetParentActionOpts) *SetParentAction {
	if opts == nil {
		opts = &NewSetParentActionOpts{}
	}

	p := ba.ctx.Get("SetParentAction").New(triggerOptions, target, parent, opts.Condition.JSObject())
	return SetParentActionFromJSObject(p)
}

// TODO: methods
