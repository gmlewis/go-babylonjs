// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// VolumeBasedPanel represents a babylon.js VolumeBasedPanel.
// Abstract class used to create a container panel deployed on the surface of a volume
type VolumeBasedPanel struct {
	*Container3D
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *VolumeBasedPanel) JSObject() js.Value { return v.p }

// VolumeBasedPanel returns a VolumeBasedPanel JavaScript class.
func (ba *Babylon) VolumeBasedPanel() *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel")
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// VolumeBasedPanelFromJSObject returns a wrapped VolumeBasedPanel JavaScript class.
func VolumeBasedPanelFromJSObject(p js.Value, ctx js.Value) *VolumeBasedPanel {
	return &VolumeBasedPanel{Container3D: Container3DFromJSObject(p, ctx), ctx: ctx}
}

// VolumeBasedPanelArrayToJSArray returns a JavaScript Array for the wrapped array.
func VolumeBasedPanelArrayToJSArray(array []*VolumeBasedPanel) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewVolumeBasedPanel returns a new VolumeBasedPanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel
func (ba *Babylon) NewVolumeBasedPanel() *VolumeBasedPanel {

	args := make([]interface{}, 0, 0+0)

	p := ba.ctx.Get("VolumeBasedPanel").New(args...)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

/*

// Columns returns the Columns property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#columns
func (v *VolumeBasedPanel) Columns(columns int) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(columns)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetColumns sets the Columns property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#columns
func (v *VolumeBasedPanel) SetColumns(columns int) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(columns)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// Margin returns the Margin property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#margin
func (v *VolumeBasedPanel) Margin(margin float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(margin)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetMargin sets the Margin property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#margin
func (v *VolumeBasedPanel) SetMargin(margin float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(margin)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// Orientation returns the Orientation property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#orientation
func (v *VolumeBasedPanel) Orientation(orientation float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(orientation)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetOrientation sets the Orientation property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#orientation
func (v *VolumeBasedPanel) SetOrientation(orientation float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(orientation)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// Rows returns the Rows property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#rows
func (v *VolumeBasedPanel) Rows(rows int) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(rows)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetRows sets the Rows property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#rows
func (v *VolumeBasedPanel) SetRows(rows int) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(rows)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

*/
