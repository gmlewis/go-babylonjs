// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// VolumeBasedPanel represents a babylon.js VolumeBasedPanel.
// Abstract class used to create a container panel deployed on the surface of a volume
type VolumeBasedPanel struct {
	*Container3D
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *VolumeBasedPanel) JSObject() js.Value { return v.p }

// VolumeBasedPanel returns a VolumeBasedPanel JavaScript class.
func (ba *Babylon) VolumeBasedPanel() *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel")
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// VolumeBasedPanelFromJSObject returns a wrapped VolumeBasedPanel JavaScript class.
func VolumeBasedPanelFromJSObject(p js.Value, ctx js.Value) *VolumeBasedPanel {
	return &VolumeBasedPanel{Container3D: Container3DFromJSObject(p, ctx), ctx: ctx}
}

// VolumeBasedPanelArrayToJSArray returns a JavaScript Array for the wrapped array.
func VolumeBasedPanelArrayToJSArray(array []*VolumeBasedPanel) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewVolumeBasedPanel returns a new VolumeBasedPanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel
func (ba *Babylon) NewVolumeBasedPanel() *VolumeBasedPanel {

	args := make([]interface{}, 0, 0+0)

	p := ba.ctx.Get("VolumeBasedPanel").New(args...)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// AddBehavior calls the AddBehavior method on the VolumeBasedPanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#addbehavior
func (v *VolumeBasedPanel) AddBehavior(behavior js.Value) *Control3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, behavior)

	retVal := v.p.Call("addBehavior", args...)
	return Control3DFromJSObject(retVal, v.ctx)
}

// AddControl calls the AddControl method on the VolumeBasedPanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#addcontrol
func (v *VolumeBasedPanel) AddControl(control *Control3D) *Container3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := v.p.Call("addControl", args...)
	return Container3DFromJSObject(retVal, v.ctx)
}

// ContainsControl calls the ContainsControl method on the VolumeBasedPanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#containscontrol
func (v *VolumeBasedPanel) ContainsControl(control *Control3D) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := v.p.Call("containsControl", args...)
	return retVal.Bool()
}

// Dispose calls the Dispose method on the VolumeBasedPanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#dispose
func (v *VolumeBasedPanel) Dispose() {

	v.p.Call("dispose")
}

// GetBehaviorByName calls the GetBehaviorByName method on the VolumeBasedPanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#getbehaviorbyname
func (v *VolumeBasedPanel) GetBehaviorByName(name string) js.Value {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := v.p.Call("getBehaviorByName", args...)
	return retVal
}

// GetClassName calls the GetClassName method on the VolumeBasedPanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#getclassname
func (v *VolumeBasedPanel) GetClassName() string {

	retVal := v.p.Call("getClassName")
	return retVal.String()
}

// LinkToTransformNode calls the LinkToTransformNode method on the VolumeBasedPanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#linktotransformnode
func (v *VolumeBasedPanel) LinkToTransformNode(node *TransformNode) *Control3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, node.JSObject())

	retVal := v.p.Call("linkToTransformNode", args...)
	return Control3DFromJSObject(retVal, v.ctx)
}

// RemoveBehavior calls the RemoveBehavior method on the VolumeBasedPanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#removebehavior
func (v *VolumeBasedPanel) RemoveBehavior(behavior js.Value) *Control3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, behavior)

	retVal := v.p.Call("removeBehavior", args...)
	return Control3DFromJSObject(retVal, v.ctx)
}

// RemoveControl calls the RemoveControl method on the VolumeBasedPanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#removecontrol
func (v *VolumeBasedPanel) RemoveControl(control *Control3D) *Container3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := v.p.Call("removeControl", args...)
	return Container3DFromJSObject(retVal, v.ctx)
}

// UpdateLayout calls the UpdateLayout method on the VolumeBasedPanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#updatelayout
func (v *VolumeBasedPanel) UpdateLayout() *Container3D {

	retVal := v.p.Call("updateLayout")
	return Container3DFromJSObject(retVal, v.ctx)
}

/*

// Behaviors returns the Behaviors property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#behaviors
func (v *VolumeBasedPanel) Behaviors(behaviors js.Value) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(behaviors)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetBehaviors sets the Behaviors property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#behaviors
func (v *VolumeBasedPanel) SetBehaviors(behaviors js.Value) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(behaviors)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// BlockLayout returns the BlockLayout property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#blocklayout
func (v *VolumeBasedPanel) BlockLayout(blockLayout bool) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(blockLayout)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetBlockLayout sets the BlockLayout property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#blocklayout
func (v *VolumeBasedPanel) SetBlockLayout(blockLayout bool) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(blockLayout)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// Children returns the Children property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#children
func (v *VolumeBasedPanel) Children(children []*Control3D) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(children)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetChildren sets the Children property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#children
func (v *VolumeBasedPanel) SetChildren(children []*Control3D) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(children)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// Columns returns the Columns property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#columns
func (v *VolumeBasedPanel) Columns(columns int) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(columns)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetColumns sets the Columns property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#columns
func (v *VolumeBasedPanel) SetColumns(columns int) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(columns)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// FACEFORWARDREVERSED_ORIENTATION returns the FACEFORWARDREVERSED_ORIENTATION property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#faceforwardreversed_orientation
func (v *VolumeBasedPanel) FACEFORWARDREVERSED_ORIENTATION(FACEFORWARDREVERSED_ORIENTATION float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(FACEFORWARDREVERSED_ORIENTATION)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetFACEFORWARDREVERSED_ORIENTATION sets the FACEFORWARDREVERSED_ORIENTATION property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#faceforwardreversed_orientation
func (v *VolumeBasedPanel) SetFACEFORWARDREVERSED_ORIENTATION(FACEFORWARDREVERSED_ORIENTATION float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(FACEFORWARDREVERSED_ORIENTATION)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// FACEFORWARD_ORIENTATION returns the FACEFORWARD_ORIENTATION property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#faceforward_orientation
func (v *VolumeBasedPanel) FACEFORWARD_ORIENTATION(FACEFORWARD_ORIENTATION float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(FACEFORWARD_ORIENTATION)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetFACEFORWARD_ORIENTATION sets the FACEFORWARD_ORIENTATION property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#faceforward_orientation
func (v *VolumeBasedPanel) SetFACEFORWARD_ORIENTATION(FACEFORWARD_ORIENTATION float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(FACEFORWARD_ORIENTATION)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// FACEORIGINREVERSED_ORIENTATION returns the FACEORIGINREVERSED_ORIENTATION property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#faceoriginreversed_orientation
func (v *VolumeBasedPanel) FACEORIGINREVERSED_ORIENTATION(FACEORIGINREVERSED_ORIENTATION float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(FACEORIGINREVERSED_ORIENTATION)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetFACEORIGINREVERSED_ORIENTATION sets the FACEORIGINREVERSED_ORIENTATION property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#faceoriginreversed_orientation
func (v *VolumeBasedPanel) SetFACEORIGINREVERSED_ORIENTATION(FACEORIGINREVERSED_ORIENTATION float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(FACEORIGINREVERSED_ORIENTATION)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// FACEORIGIN_ORIENTATION returns the FACEORIGIN_ORIENTATION property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#faceorigin_orientation
func (v *VolumeBasedPanel) FACEORIGIN_ORIENTATION(FACEORIGIN_ORIENTATION float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(FACEORIGIN_ORIENTATION)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetFACEORIGIN_ORIENTATION sets the FACEORIGIN_ORIENTATION property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#faceorigin_orientation
func (v *VolumeBasedPanel) SetFACEORIGIN_ORIENTATION(FACEORIGIN_ORIENTATION float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(FACEORIGIN_ORIENTATION)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// IsVisible returns the IsVisible property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#isvisible
func (v *VolumeBasedPanel) IsVisible(isVisible bool) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(isVisible)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetIsVisible sets the IsVisible property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#isvisible
func (v *VolumeBasedPanel) SetIsVisible(isVisible bool) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(isVisible)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// Margin returns the Margin property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#margin
func (v *VolumeBasedPanel) Margin(margin float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(margin)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetMargin sets the Margin property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#margin
func (v *VolumeBasedPanel) SetMargin(margin float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(margin)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// Mesh returns the Mesh property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#mesh
func (v *VolumeBasedPanel) Mesh(mesh *AbstractMesh) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(mesh.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetMesh sets the Mesh property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#mesh
func (v *VolumeBasedPanel) SetMesh(mesh *AbstractMesh) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(mesh.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#name
func (v *VolumeBasedPanel) Name(name string) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(name)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#name
func (v *VolumeBasedPanel) SetName(name string) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(name)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// Node returns the Node property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#node
func (v *VolumeBasedPanel) Node(node *TransformNode) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(node.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetNode sets the Node property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#node
func (v *VolumeBasedPanel) SetNode(node *TransformNode) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(node.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// OnPointerClickObservable returns the OnPointerClickObservable property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#onpointerclickobservable
func (v *VolumeBasedPanel) OnPointerClickObservable(onPointerClickObservable *Observable) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(onPointerClickObservable.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetOnPointerClickObservable sets the OnPointerClickObservable property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#onpointerclickobservable
func (v *VolumeBasedPanel) SetOnPointerClickObservable(onPointerClickObservable *Observable) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(onPointerClickObservable.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// OnPointerDownObservable returns the OnPointerDownObservable property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#onpointerdownobservable
func (v *VolumeBasedPanel) OnPointerDownObservable(onPointerDownObservable *Observable) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(onPointerDownObservable.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetOnPointerDownObservable sets the OnPointerDownObservable property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#onpointerdownobservable
func (v *VolumeBasedPanel) SetOnPointerDownObservable(onPointerDownObservable *Observable) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(onPointerDownObservable.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// OnPointerEnterObservable returns the OnPointerEnterObservable property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#onpointerenterobservable
func (v *VolumeBasedPanel) OnPointerEnterObservable(onPointerEnterObservable *Observable) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(onPointerEnterObservable.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetOnPointerEnterObservable sets the OnPointerEnterObservable property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#onpointerenterobservable
func (v *VolumeBasedPanel) SetOnPointerEnterObservable(onPointerEnterObservable *Observable) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(onPointerEnterObservable.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// OnPointerMoveObservable returns the OnPointerMoveObservable property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#onpointermoveobservable
func (v *VolumeBasedPanel) OnPointerMoveObservable(onPointerMoveObservable *Observable) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(onPointerMoveObservable.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetOnPointerMoveObservable sets the OnPointerMoveObservable property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#onpointermoveobservable
func (v *VolumeBasedPanel) SetOnPointerMoveObservable(onPointerMoveObservable *Observable) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(onPointerMoveObservable.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// OnPointerOutObservable returns the OnPointerOutObservable property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#onpointeroutobservable
func (v *VolumeBasedPanel) OnPointerOutObservable(onPointerOutObservable *Observable) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(onPointerOutObservable.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetOnPointerOutObservable sets the OnPointerOutObservable property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#onpointeroutobservable
func (v *VolumeBasedPanel) SetOnPointerOutObservable(onPointerOutObservable *Observable) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(onPointerOutObservable.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// OnPointerUpObservable returns the OnPointerUpObservable property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#onpointerupobservable
func (v *VolumeBasedPanel) OnPointerUpObservable(onPointerUpObservable *Observable) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(onPointerUpObservable.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetOnPointerUpObservable sets the OnPointerUpObservable property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#onpointerupobservable
func (v *VolumeBasedPanel) SetOnPointerUpObservable(onPointerUpObservable *Observable) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(onPointerUpObservable.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// Orientation returns the Orientation property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#orientation
func (v *VolumeBasedPanel) Orientation(orientation float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(orientation)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetOrientation sets the Orientation property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#orientation
func (v *VolumeBasedPanel) SetOrientation(orientation float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(orientation)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// Parent returns the Parent property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#parent
func (v *VolumeBasedPanel) Parent(parent *Container3D) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(parent.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetParent sets the Parent property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#parent
func (v *VolumeBasedPanel) SetParent(parent *Container3D) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(parent.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// PointerDownAnimation returns the PointerDownAnimation property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#pointerdownanimation
func (v *VolumeBasedPanel) PointerDownAnimation(pointerDownAnimation func()) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerDownAnimation(); return nil}))
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetPointerDownAnimation sets the PointerDownAnimation property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#pointerdownanimation
func (v *VolumeBasedPanel) SetPointerDownAnimation(pointerDownAnimation func()) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerDownAnimation(); return nil}))
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// PointerEnterAnimation returns the PointerEnterAnimation property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#pointerenteranimation
func (v *VolumeBasedPanel) PointerEnterAnimation(pointerEnterAnimation func()) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerEnterAnimation(); return nil}))
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetPointerEnterAnimation sets the PointerEnterAnimation property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#pointerenteranimation
func (v *VolumeBasedPanel) SetPointerEnterAnimation(pointerEnterAnimation func()) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerEnterAnimation(); return nil}))
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// PointerOutAnimation returns the PointerOutAnimation property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#pointeroutanimation
func (v *VolumeBasedPanel) PointerOutAnimation(pointerOutAnimation func()) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerOutAnimation(); return nil}))
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetPointerOutAnimation sets the PointerOutAnimation property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#pointeroutanimation
func (v *VolumeBasedPanel) SetPointerOutAnimation(pointerOutAnimation func()) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerOutAnimation(); return nil}))
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// PointerUpAnimation returns the PointerUpAnimation property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#pointerupanimation
func (v *VolumeBasedPanel) PointerUpAnimation(pointerUpAnimation func()) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerUpAnimation(); return nil}))
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetPointerUpAnimation sets the PointerUpAnimation property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#pointerupanimation
func (v *VolumeBasedPanel) SetPointerUpAnimation(pointerUpAnimation func()) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerUpAnimation(); return nil}))
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// Position returns the Position property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#position
func (v *VolumeBasedPanel) Position(position *Vector3) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(position.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetPosition sets the Position property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#position
func (v *VolumeBasedPanel) SetPosition(position *Vector3) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(position.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// Rows returns the Rows property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#rows
func (v *VolumeBasedPanel) Rows(rows int) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(rows)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetRows sets the Rows property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#rows
func (v *VolumeBasedPanel) SetRows(rows int) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(rows)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// Scaling returns the Scaling property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#scaling
func (v *VolumeBasedPanel) Scaling(scaling *Vector3) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(scaling.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetScaling sets the Scaling property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#scaling
func (v *VolumeBasedPanel) SetScaling(scaling *Vector3) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(scaling.JSObject())
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// TypeName returns the TypeName property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#typename
func (v *VolumeBasedPanel) TypeName(typeName string) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(typeName)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetTypeName sets the TypeName property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#typename
func (v *VolumeBasedPanel) SetTypeName(typeName string) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(typeName)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// UNSET_ORIENTATION returns the UNSET_ORIENTATION property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#unset_orientation
func (v *VolumeBasedPanel) UNSET_ORIENTATION(UNSET_ORIENTATION float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(UNSET_ORIENTATION)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

// SetUNSET_ORIENTATION sets the UNSET_ORIENTATION property of class VolumeBasedPanel.
//
// https://doc.babylonjs.com/api/classes/babylon.volumebasedpanel#unset_orientation
func (v *VolumeBasedPanel) SetUNSET_ORIENTATION(UNSET_ORIENTATION float64) *VolumeBasedPanel {
	p := ba.ctx.Get("VolumeBasedPanel").New(UNSET_ORIENTATION)
	return VolumeBasedPanelFromJSObject(p, ba.ctx)
}

*/
