// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BloomMergePostProcess represents a babylon.js BloomMergePostProcess.
// The BloomMergePostProcess merges blurred images with the original based on the values of the circle of confusion.
type BloomMergePostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BloomMergePostProcess) JSObject() js.Value { return b.p }

// BloomMergePostProcess returns a BloomMergePostProcess JavaScript class.
func (ba *Babylon) BloomMergePostProcess() *BloomMergePostProcess {
	p := ba.ctx.Get("BloomMergePostProcess")
	return BloomMergePostProcessFromJSObject(p, ba.ctx)
}

// BloomMergePostProcessFromJSObject returns a wrapped BloomMergePostProcess JavaScript class.
func BloomMergePostProcessFromJSObject(p js.Value, ctx js.Value) *BloomMergePostProcess {
	return &BloomMergePostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// BloomMergePostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func BloomMergePostProcessArrayToJSArray(array []*BloomMergePostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewBloomMergePostProcessOpts contains optional parameters for NewBloomMergePostProcess.
type NewBloomMergePostProcessOpts struct {
	SamplingMode     *float64
	Engine           *Engine
	Reusable         *bool
	TextureType      *float64
	BlockCompilation *bool
}

// NewBloomMergePostProcess returns a new BloomMergePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.bloommergepostprocess
func (ba *Babylon) NewBloomMergePostProcess(name string, originalFromInput *PostProcess, blurred *PostProcess, weight float64, options float64, camera *Camera, opts *NewBloomMergePostProcessOpts) *BloomMergePostProcess {
	if opts == nil {
		opts = &NewBloomMergePostProcessOpts{}
	}

	args := make([]interface{}, 0, 6+5)

	args = append(args, name)
	args = append(args, originalFromInput.JSObject())
	args = append(args, blurred.JSObject())
	args = append(args, weight)
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}
	if opts.BlockCompilation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.BlockCompilation)
	}

	p := ba.ctx.Get("BloomMergePostProcess").New(args...)
	return BloomMergePostProcessFromJSObject(p, ba.ctx)
}

// Weight returns the Weight property of class BloomMergePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.bloommergepostprocess#weight
func (b *BloomMergePostProcess) Weight() float64 {
	retVal := b.p.Get("weight")
	return retVal.Float()
}

// SetWeight sets the Weight property of class BloomMergePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.bloommergepostprocess#weight
func (b *BloomMergePostProcess) SetWeight(weight float64) *BloomMergePostProcess {
	b.p.Set("weight", weight)
	return b
}
