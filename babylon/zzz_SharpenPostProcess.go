// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SharpenPostProcess represents a babylon.js SharpenPostProcess.
// The SharpenPostProcess applies a sharpen kernel to every pixel
// See <a href="http://en.wikipedia.org/wiki/Kernel_(image_processing)">http://en.wikipedia.org/wiki/Kernel_(image_processing)</a>
type SharpenPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SharpenPostProcess) JSObject() js.Value { return s.p }

// SharpenPostProcess returns a SharpenPostProcess JavaScript class.
func (ba *Babylon) SharpenPostProcess() *SharpenPostProcess {
	p := ba.ctx.Get("SharpenPostProcess")
	return SharpenPostProcessFromJSObject(p, ba.ctx)
}

// SharpenPostProcessFromJSObject returns a wrapped SharpenPostProcess JavaScript class.
func SharpenPostProcessFromJSObject(p js.Value, ctx js.Value) *SharpenPostProcess {
	return &SharpenPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// SharpenPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func SharpenPostProcessArrayToJSArray(array []*SharpenPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewSharpenPostProcessOpts contains optional parameters for NewSharpenPostProcess.
type NewSharpenPostProcessOpts struct {
	SamplingMode     *float64
	Engine           *Engine
	Reusable         *bool
	TextureType      *float64
	BlockCompilation *bool
}

// NewSharpenPostProcess returns a new SharpenPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.sharpenpostprocess
func (ba *Babylon) NewSharpenPostProcess(name string, options float64, camera *Camera, opts *NewSharpenPostProcessOpts) *SharpenPostProcess {
	if opts == nil {
		opts = &NewSharpenPostProcessOpts{}
	}

	args := make([]interface{}, 0, 3+5)

	args = append(args, name)
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}
	if opts.BlockCompilation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.BlockCompilation)
	}

	p := ba.ctx.Get("SharpenPostProcess").New(args...)
	return SharpenPostProcessFromJSObject(p, ba.ctx)
}

// ColorAmount returns the ColorAmount property of class SharpenPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.sharpenpostprocess#coloramount
func (s *SharpenPostProcess) ColorAmount() float64 {
	retVal := s.p.Get("colorAmount")
	return retVal.Float()
}

// SetColorAmount sets the ColorAmount property of class SharpenPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.sharpenpostprocess#coloramount
func (s *SharpenPostProcess) SetColorAmount(colorAmount float64) *SharpenPostProcess {
	s.p.Set("colorAmount", colorAmount)
	return s
}

// EdgeAmount returns the EdgeAmount property of class SharpenPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.sharpenpostprocess#edgeamount
func (s *SharpenPostProcess) EdgeAmount() float64 {
	retVal := s.p.Get("edgeAmount")
	return retVal.Float()
}

// SetEdgeAmount sets the EdgeAmount property of class SharpenPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.sharpenpostprocess#edgeamount
func (s *SharpenPostProcess) SetEdgeAmount(edgeAmount float64) *SharpenPostProcess {
	s.p.Set("edgeAmount", edgeAmount)
	return s
}
