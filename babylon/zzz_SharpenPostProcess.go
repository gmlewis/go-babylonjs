// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SharpenPostProcess represents a babylon.js SharpenPostProcess.
// The SharpenPostProcess applies a sharpen kernel to every pixel
// See &lt;a href=&#34;http://en.wikipedia.org/wiki/Kernel_(image_processing)&#34;&gt;http://en.wikipedia.org/wiki/Kernel_(image_processing)&lt;/a&gt;
type SharpenPostProcess struct{ *PostProcess }

// JSObject returns the underlying js.Value.
func (s *SharpenPostProcess) JSObject() js.Value { return s.p }

// SharpenPostProcess returns a SharpenPostProcess JavaScript class.
func (b *Babylon) SharpenPostProcess() *SharpenPostProcess {
	p := b.ctx.Get("SharpenPostProcess")
	return SharpenPostProcessFromJSObject(p)
}

// SharpenPostProcessFromJSObject returns a wrapped SharpenPostProcess JavaScript class.
func SharpenPostProcessFromJSObject(p js.Value) *SharpenPostProcess {
	return &SharpenPostProcess{PostProcessFromJSObject(p)}
}

// NewSharpenPostProcessOpts contains optional parameters for NewSharpenPostProcess.
type NewSharpenPostProcessOpts struct {
	SamplingMode *float64

	Engine *Engine

	Reusable *bool

	TextureType *float64

	BlockCompilation *bool
}

// NewSharpenPostProcess returns a new SharpenPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.sharpenpostprocess
func (b *Babylon) NewSharpenPostProcess(name string, options float64, camera *Camera, opts *NewSharpenPostProcessOpts) *SharpenPostProcess {
	if opts == nil {
		opts = &NewSharpenPostProcessOpts{}
	}

	p := b.ctx.Get("SharpenPostProcess").New(name, options, camera.JSObject(), opts.SamplingMode, opts.Engine.JSObject(), opts.Reusable.JSObject(), opts.TextureType, opts.BlockCompilation.JSObject())
	return SharpenPostProcessFromJSObject(p)
}

// TODO: methods
