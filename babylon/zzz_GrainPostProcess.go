// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// GrainPostProcess represents a babylon.js GrainPostProcess.
// The GrainPostProcess adds noise to the image at mid luminance levels
type GrainPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (g *GrainPostProcess) JSObject() js.Value { return g.p }

// GrainPostProcess returns a GrainPostProcess JavaScript class.
func (ba *Babylon) GrainPostProcess() *GrainPostProcess {
	p := ba.ctx.Get("GrainPostProcess")
	return GrainPostProcessFromJSObject(p, ba.ctx)
}

// GrainPostProcessFromJSObject returns a wrapped GrainPostProcess JavaScript class.
func GrainPostProcessFromJSObject(p js.Value, ctx js.Value) *GrainPostProcess {
	return &GrainPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// GrainPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func GrainPostProcessArrayToJSArray(array []*GrainPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewGrainPostProcessOpts contains optional parameters for NewGrainPostProcess.
type NewGrainPostProcessOpts struct {
	SamplingMode     *float64
	Engine           *Engine
	Reusable         *bool
	TextureType      *float64
	BlockCompilation *bool
}

// NewGrainPostProcess returns a new GrainPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.grainpostprocess
func (ba *Babylon) NewGrainPostProcess(name string, options float64, camera *Camera, opts *NewGrainPostProcessOpts) *GrainPostProcess {
	if opts == nil {
		opts = &NewGrainPostProcessOpts{}
	}

	args := make([]interface{}, 0, 3+5)

	args = append(args, name)
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}
	if opts.BlockCompilation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.BlockCompilation)
	}

	p := ba.ctx.Get("GrainPostProcess").New(args...)
	return GrainPostProcessFromJSObject(p, ba.ctx)
}

/*

// Animated returns the Animated property of class GrainPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.grainpostprocess#animated
func (g *GrainPostProcess) Animated(animated bool) *GrainPostProcess {
	p := ba.ctx.Get("GrainPostProcess").New(animated)
	return GrainPostProcessFromJSObject(p, ba.ctx)
}

// SetAnimated sets the Animated property of class GrainPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.grainpostprocess#animated
func (g *GrainPostProcess) SetAnimated(animated bool) *GrainPostProcess {
	p := ba.ctx.Get("GrainPostProcess").New(animated)
	return GrainPostProcessFromJSObject(p, ba.ctx)
}

// Intensity returns the Intensity property of class GrainPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.grainpostprocess#intensity
func (g *GrainPostProcess) Intensity(intensity float64) *GrainPostProcess {
	p := ba.ctx.Get("GrainPostProcess").New(intensity)
	return GrainPostProcessFromJSObject(p, ba.ctx)
}

// SetIntensity sets the Intensity property of class GrainPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.grainpostprocess#intensity
func (g *GrainPostProcess) SetIntensity(intensity float64) *GrainPostProcess {
	p := ba.ctx.Get("GrainPostProcess").New(intensity)
	return GrainPostProcessFromJSObject(p, ba.ctx)
}

*/
