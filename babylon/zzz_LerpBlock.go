// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// LerpBlock represents a babylon.js LerpBlock.
// Block used to lerp between 2 values
type LerpBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (l *LerpBlock) JSObject() js.Value { return l.p }

// LerpBlock returns a LerpBlock JavaScript class.
func (ba *Babylon) LerpBlock() *LerpBlock {
	p := ba.ctx.Get("LerpBlock")
	return LerpBlockFromJSObject(p, ba.ctx)
}

// LerpBlockFromJSObject returns a wrapped LerpBlock JavaScript class.
func LerpBlockFromJSObject(p js.Value, ctx js.Value) *LerpBlock {
	return &LerpBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// LerpBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func LerpBlockArrayToJSArray(array []*LerpBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewLerpBlock returns a new LerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.lerpblock#constructor
func (ba *Babylon) NewLerpBlock(name string) *LerpBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("LerpBlock").New(args...)
	return LerpBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the LerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.lerpblock#getclassname
func (l *LerpBlock) GetClassName() string {

	retVal := l.p.Call("getClassName")
	return retVal.String()
}

// Gradient returns the Gradient property of class LerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lerpblock#gradient
func (l *LerpBlock) Gradient() *NodeMaterialConnectionPoint {
	retVal := l.p.Get("gradient")
	return NodeMaterialConnectionPointFromJSObject(retVal, l.ctx)
}

// SetGradient sets the Gradient property of class LerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lerpblock#gradient
func (l *LerpBlock) SetGradient(gradient *NodeMaterialConnectionPoint) *LerpBlock {
	l.p.Set("gradient", gradient.JSObject())
	return l
}

// Left returns the Left property of class LerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lerpblock#left
func (l *LerpBlock) Left() *NodeMaterialConnectionPoint {
	retVal := l.p.Get("left")
	return NodeMaterialConnectionPointFromJSObject(retVal, l.ctx)
}

// SetLeft sets the Left property of class LerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lerpblock#left
func (l *LerpBlock) SetLeft(left *NodeMaterialConnectionPoint) *LerpBlock {
	l.p.Set("left", left.JSObject())
	return l
}

// Output returns the Output property of class LerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lerpblock#output
func (l *LerpBlock) Output() *NodeMaterialConnectionPoint {
	retVal := l.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, l.ctx)
}

// SetOutput sets the Output property of class LerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lerpblock#output
func (l *LerpBlock) SetOutput(output *NodeMaterialConnectionPoint) *LerpBlock {
	l.p.Set("output", output.JSObject())
	return l
}

// Right returns the Right property of class LerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lerpblock#right
func (l *LerpBlock) Right() *NodeMaterialConnectionPoint {
	retVal := l.p.Get("right")
	return NodeMaterialConnectionPointFromJSObject(retVal, l.ctx)
}

// SetRight sets the Right property of class LerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.lerpblock#right
func (l *LerpBlock) SetRight(right *NodeMaterialConnectionPoint) *LerpBlock {
	l.p.Set("right", right.JSObject())
	return l
}
