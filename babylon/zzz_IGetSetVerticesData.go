// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IGetSetVerticesData represents a babylon.js IGetSetVerticesData.
// Define an interface for all classes that will get and set the data on vertices
type IGetSetVerticesData struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IGetSetVerticesData) JSObject() js.Value { return i.p }

// IGetSetVerticesData returns a IGetSetVerticesData JavaScript class.
func (ba *Babylon) IGetSetVerticesData() *IGetSetVerticesData {
	p := ba.ctx.Get("IGetSetVerticesData")
	return IGetSetVerticesDataFromJSObject(p, ba.ctx)
}

// IGetSetVerticesDataFromJSObject returns a wrapped IGetSetVerticesData JavaScript class.
func IGetSetVerticesDataFromJSObject(p js.Value, ctx js.Value) *IGetSetVerticesData {
	return &IGetSetVerticesData{p: p, ctx: ctx}
}

// IGetSetVerticesDataArrayToJSArray returns a JavaScript Array for the wrapped array.
func IGetSetVerticesDataArrayToJSArray(array []*IGetSetVerticesData) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// IGetSetVerticesDataGetIndicesOpts contains optional parameters for IGetSetVerticesData.GetIndices.
type IGetSetVerticesDataGetIndicesOpts struct {
	CopyWhenShared *bool
	ForceCopy      *bool
}

// GetIndices calls the GetIndices method on the IGetSetVerticesData object.
//
// https://doc.babylonjs.com/api/classes/babylon.igetsetverticesdata#getindices
func (i *IGetSetVerticesData) GetIndices(opts *IGetSetVerticesDataGetIndicesOpts) js.Value {
	if opts == nil {
		opts = &IGetSetVerticesDataGetIndicesOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.CopyWhenShared == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CopyWhenShared)
	}
	if opts.ForceCopy == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceCopy)
	}

	retVal := i.p.Call("getIndices", args...)
	return retVal
}

// IGetSetVerticesDataGetVerticesDataOpts contains optional parameters for IGetSetVerticesData.GetVerticesData.
type IGetSetVerticesDataGetVerticesDataOpts struct {
	CopyWhenShared *bool
	ForceCopy      *bool
}

// GetVerticesData calls the GetVerticesData method on the IGetSetVerticesData object.
//
// https://doc.babylonjs.com/api/classes/babylon.igetsetverticesdata#getverticesdata
func (i *IGetSetVerticesData) GetVerticesData(kind string, opts *IGetSetVerticesDataGetVerticesDataOpts) js.Value {
	if opts == nil {
		opts = &IGetSetVerticesDataGetVerticesDataOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, kind)

	if opts.CopyWhenShared == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CopyWhenShared)
	}
	if opts.ForceCopy == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceCopy)
	}

	retVal := i.p.Call("getVerticesData", args...)
	return retVal
}

// IsVerticesDataPresent calls the IsVerticesDataPresent method on the IGetSetVerticesData object.
//
// https://doc.babylonjs.com/api/classes/babylon.igetsetverticesdata#isverticesdatapresent
func (i *IGetSetVerticesData) IsVerticesDataPresent(kind string) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, kind)

	retVal := i.p.Call("isVerticesDataPresent", args...)
	return retVal.Bool()
}

// IGetSetVerticesDataSetIndicesOpts contains optional parameters for IGetSetVerticesData.SetIndices.
type IGetSetVerticesDataSetIndicesOpts struct {
	Updatable *bool
}

// SetIndices calls the SetIndices method on the IGetSetVerticesData object.
//
// https://doc.babylonjs.com/api/classes/babylon.igetsetverticesdata#setindices
func (i *IGetSetVerticesData) SetIndices(indices js.Value, totalVertices float64, opts *IGetSetVerticesDataSetIndicesOpts) {
	if opts == nil {
		opts = &IGetSetVerticesDataSetIndicesOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, indices)
	args = append(args, totalVertices)

	if opts.Updatable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Updatable)
	}

	i.p.Call("setIndices", args...)
}

// SetVerticesData calls the SetVerticesData method on the IGetSetVerticesData object.
//
// https://doc.babylonjs.com/api/classes/babylon.igetsetverticesdata#setverticesdata
func (i *IGetSetVerticesData) SetVerticesData(kind string, data js.Value, updatable bool) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, kind)
	args = append(args, data)
	args = append(args, updatable)

	i.p.Call("setVerticesData", args...)
}

// IGetSetVerticesDataUpdateVerticesDataOpts contains optional parameters for IGetSetVerticesData.UpdateVerticesData.
type IGetSetVerticesDataUpdateVerticesDataOpts struct {
	UpdateExtends *bool
	MakeItUnique  *bool
}

// UpdateVerticesData calls the UpdateVerticesData method on the IGetSetVerticesData object.
//
// https://doc.babylonjs.com/api/classes/babylon.igetsetverticesdata#updateverticesdata
func (i *IGetSetVerticesData) UpdateVerticesData(kind string, data js.Value, opts *IGetSetVerticesDataUpdateVerticesDataOpts) {
	if opts == nil {
		opts = &IGetSetVerticesDataUpdateVerticesDataOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, kind)
	args = append(args, data)

	if opts.UpdateExtends == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UpdateExtends)
	}
	if opts.MakeItUnique == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.MakeItUnique)
	}

	i.p.Call("updateVerticesData", args...)
}
