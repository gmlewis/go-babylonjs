// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ValueAndUnit represents a babylon.js ValueAndUnit.
// Class used to specific a value and its associated unit
type ValueAndUnit struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *ValueAndUnit) JSObject() js.Value { return v.p }

// ValueAndUnit returns a ValueAndUnit JavaScript class.
func (ba *Babylon) ValueAndUnit() *ValueAndUnit {
	p := ba.ctx.Get("ValueAndUnit")
	return ValueAndUnitFromJSObject(p, ba.ctx)
}

// ValueAndUnitFromJSObject returns a wrapped ValueAndUnit JavaScript class.
func ValueAndUnitFromJSObject(p js.Value, ctx js.Value) *ValueAndUnit {
	return &ValueAndUnit{p: p, ctx: ctx}
}

// ValueAndUnitArrayToJSArray returns a JavaScript Array for the wrapped array.
func ValueAndUnitArrayToJSArray(array []*ValueAndUnit) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewValueAndUnitOpts contains optional parameters for NewValueAndUnit.
type NewValueAndUnitOpts struct {
	Unit                 *float64
	NegativeValueAllowed *bool
}

// NewValueAndUnit returns a new ValueAndUnit object.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit
func (ba *Babylon) NewValueAndUnit(value float64, opts *NewValueAndUnitOpts) *ValueAndUnit {
	if opts == nil {
		opts = &NewValueAndUnitOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, value)

	if opts.Unit == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Unit)
	}
	if opts.NegativeValueAllowed == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NegativeValueAllowed)
	}

	p := ba.ctx.Get("ValueAndUnit").New(args...)
	return ValueAndUnitFromJSObject(p, ba.ctx)
}

// FromString calls the FromString method on the ValueAndUnit object.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#fromstring
func (v *ValueAndUnit) FromString(source string) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, source)

	retVal := v.p.Call("fromString", args...)
	return retVal.Bool()
}

// GetValue calls the GetValue method on the ValueAndUnit object.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#getvalue
func (v *ValueAndUnit) GetValue(host *AdvancedDynamicTexture) float64 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, host.JSObject())

	retVal := v.p.Call("getValue", args...)
	return retVal.Float()
}

// GetValueInPixel calls the GetValueInPixel method on the ValueAndUnit object.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#getvalueinpixel
func (v *ValueAndUnit) GetValueInPixel(host *AdvancedDynamicTexture, refValue float64) float64 {

	args := make([]interface{}, 0, 2+0)

	args = append(args, host.JSObject())
	args = append(args, refValue)

	retVal := v.p.Call("getValueInPixel", args...)
	return retVal.Float()
}

// ValueAndUnitToStringOpts contains optional parameters for ValueAndUnit.ToString.
type ValueAndUnitToStringOpts struct {
	Decimals *float64
}

// ToString calls the ToString method on the ValueAndUnit object.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#tostring
func (v *ValueAndUnit) ToString(host *AdvancedDynamicTexture, opts *ValueAndUnitToStringOpts) string {
	if opts == nil {
		opts = &ValueAndUnitToStringOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, host.JSObject())

	if opts.Decimals == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Decimals)
	}

	retVal := v.p.Call("toString", args...)
	return retVal.String()
}

// ValueAndUnitUpdateInPlaceOpts contains optional parameters for ValueAndUnit.UpdateInPlace.
type ValueAndUnitUpdateInPlaceOpts struct {
	Unit *float64
}

// UpdateInPlace calls the UpdateInPlace method on the ValueAndUnit object.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#updateinplace
func (v *ValueAndUnit) UpdateInPlace(value float64, opts *ValueAndUnitUpdateInPlaceOpts) *ValueAndUnit {
	if opts == nil {
		opts = &ValueAndUnitUpdateInPlaceOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, value)

	if opts.Unit == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Unit)
	}

	retVal := v.p.Call("updateInPlace", args...)
	return ValueAndUnitFromJSObject(retVal, v.ctx)
}

// IgnoreAdaptiveScaling returns the IgnoreAdaptiveScaling property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#ignoreadaptivescaling
func (v *ValueAndUnit) IgnoreAdaptiveScaling() bool {
	retVal := v.p.Get("ignoreAdaptiveScaling")
	return retVal.Bool()
}

// SetIgnoreAdaptiveScaling sets the IgnoreAdaptiveScaling property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#ignoreadaptivescaling
func (v *ValueAndUnit) SetIgnoreAdaptiveScaling(ignoreAdaptiveScaling bool) *ValueAndUnit {
	v.p.Set("ignoreAdaptiveScaling", ignoreAdaptiveScaling)
	return v
}

// InternalValue returns the InternalValue property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#internalvalue
func (v *ValueAndUnit) InternalValue() float64 {
	retVal := v.p.Get("internalValue")
	return retVal.Float()
}

// SetInternalValue sets the InternalValue property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#internalvalue
func (v *ValueAndUnit) SetInternalValue(internalValue float64) *ValueAndUnit {
	v.p.Set("internalValue", internalValue)
	return v
}

// IsPercentage returns the IsPercentage property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#ispercentage
func (v *ValueAndUnit) IsPercentage() bool {
	retVal := v.p.Get("isPercentage")
	return retVal.Bool()
}

// SetIsPercentage sets the IsPercentage property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#ispercentage
func (v *ValueAndUnit) SetIsPercentage(isPercentage bool) *ValueAndUnit {
	v.p.Set("isPercentage", isPercentage)
	return v
}

// IsPixel returns the IsPixel property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#ispixel
func (v *ValueAndUnit) IsPixel() bool {
	retVal := v.p.Get("isPixel")
	return retVal.Bool()
}

// SetIsPixel sets the IsPixel property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#ispixel
func (v *ValueAndUnit) SetIsPixel(isPixel bool) *ValueAndUnit {
	v.p.Set("isPixel", isPixel)
	return v
}

// NegativeValueAllowed returns the NegativeValueAllowed property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#negativevalueallowed
func (v *ValueAndUnit) NegativeValueAllowed() bool {
	retVal := v.p.Get("negativeValueAllowed")
	return retVal.Bool()
}

// SetNegativeValueAllowed sets the NegativeValueAllowed property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#negativevalueallowed
func (v *ValueAndUnit) SetNegativeValueAllowed(negativeValueAllowed bool) *ValueAndUnit {
	v.p.Set("negativeValueAllowed", negativeValueAllowed)
	return v
}

// UNITMODE_PERCENTAGE returns the UNITMODE_PERCENTAGE property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#unitmode_percentage
func (v *ValueAndUnit) UNITMODE_PERCENTAGE() float64 {
	retVal := v.p.Get("UNITMODE_PERCENTAGE")
	return retVal.Float()
}

// SetUNITMODE_PERCENTAGE sets the UNITMODE_PERCENTAGE property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#unitmode_percentage
func (v *ValueAndUnit) SetUNITMODE_PERCENTAGE(UNITMODE_PERCENTAGE float64) *ValueAndUnit {
	v.p.Set("UNITMODE_PERCENTAGE", UNITMODE_PERCENTAGE)
	return v
}

// UNITMODE_PIXEL returns the UNITMODE_PIXEL property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#unitmode_pixel
func (v *ValueAndUnit) UNITMODE_PIXEL() float64 {
	retVal := v.p.Get("UNITMODE_PIXEL")
	return retVal.Float()
}

// SetUNITMODE_PIXEL sets the UNITMODE_PIXEL property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#unitmode_pixel
func (v *ValueAndUnit) SetUNITMODE_PIXEL(UNITMODE_PIXEL float64) *ValueAndUnit {
	v.p.Set("UNITMODE_PIXEL", UNITMODE_PIXEL)
	return v
}

// Unit returns the Unit property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#unit
func (v *ValueAndUnit) Unit() float64 {
	retVal := v.p.Get("unit")
	return retVal.Float()
}

// SetUnit sets the Unit property of class ValueAndUnit.
//
// https://doc.babylonjs.com/api/classes/babylon.valueandunit#unit
func (v *ValueAndUnit) SetUnit(unit float64) *ValueAndUnit {
	v.p.Set("unit", unit)
	return v
}
