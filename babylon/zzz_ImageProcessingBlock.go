// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ImageProcessingBlock represents a babylon.js ImageProcessingBlock.
// Block used to add image processing support to fragment shader
type ImageProcessingBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ImageProcessingBlock) JSObject() js.Value { return i.p }

// ImageProcessingBlock returns a ImageProcessingBlock JavaScript class.
func (ba *Babylon) ImageProcessingBlock() *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock")
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// ImageProcessingBlockFromJSObject returns a wrapped ImageProcessingBlock JavaScript class.
func ImageProcessingBlockFromJSObject(p js.Value, ctx js.Value) *ImageProcessingBlock {
	return &ImageProcessingBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// ImageProcessingBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func ImageProcessingBlockArrayToJSArray(array []*ImageProcessingBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewImageProcessingBlock returns a new ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock
func (ba *Babylon) NewImageProcessingBlock(name string) *ImageProcessingBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("ImageProcessingBlock").New(args...)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#autoconfigure
func (i *ImageProcessingBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	i.p.Call("autoConfigure", args...)
}

// ImageProcessingBlockBindOpts contains optional parameters for ImageProcessingBlock.Bind.
type ImageProcessingBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#bind
func (i *ImageProcessingBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *ImageProcessingBlockBindOpts) {
	if opts == nil {
		opts = &ImageProcessingBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	i.p.Call("bind", args...)
}

// Build calls the Build method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#build
func (i *ImageProcessingBlock) Build(state *NodeMaterialBuildState, activeBlocks *NodeMaterialBlock) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, state.JSObject())
	args = append(args, activeBlocks.JSObject())

	retVal := i.p.Call("build", args...)
	return retVal.Bool()
}

// ImageProcessingBlockCloneOpts contains optional parameters for ImageProcessingBlock.Clone.
type ImageProcessingBlockCloneOpts struct {
	RootUrl *string
}

// Clone calls the Clone method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#clone
func (i *ImageProcessingBlock) Clone(scene *Scene, opts *ImageProcessingBlockCloneOpts) *NodeMaterialBlock {
	if opts == nil {
		opts = &ImageProcessingBlockCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := i.p.Call("clone", args...)
	return NodeMaterialBlockFromJSObject(retVal, i.ctx)
}

// ImageProcessingBlockConnectToOpts contains optional parameters for ImageProcessingBlock.ConnectTo.
type ImageProcessingBlockConnectToOpts struct {
	Options js.Value
}

// ConnectTo calls the ConnectTo method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#connectto
func (i *ImageProcessingBlock) ConnectTo(other *NodeMaterialBlock, opts *ImageProcessingBlockConnectToOpts) *ImageProcessingBlock {
	if opts == nil {
		opts = &ImageProcessingBlockConnectToOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, other.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := i.p.Call("connectTo", args...)
	return ImageProcessingBlockFromJSObject(retVal, i.ctx)
}

// Dispose calls the Dispose method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#dispose
func (i *ImageProcessingBlock) Dispose() {

	i.p.Call("dispose")
}

// GetClassName calls the GetClassName method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#getclassname
func (i *ImageProcessingBlock) GetClassName() string {

	retVal := i.p.Call("getClassName")
	return retVal.String()
}

// ImageProcessingBlockGetFirstAvailableInputOpts contains optional parameters for ImageProcessingBlock.GetFirstAvailableInput.
type ImageProcessingBlockGetFirstAvailableInputOpts struct {
	ForOutput *NodeMaterialConnectionPoint
}

// GetFirstAvailableInput calls the GetFirstAvailableInput method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#getfirstavailableinput
func (i *ImageProcessingBlock) GetFirstAvailableInput(opts *ImageProcessingBlockGetFirstAvailableInputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &ImageProcessingBlockGetFirstAvailableInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForOutput == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForOutput.JSObject())
	}

	retVal := i.p.Call("getFirstAvailableInput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, i.ctx)
}

// ImageProcessingBlockGetFirstAvailableOutputOpts contains optional parameters for ImageProcessingBlock.GetFirstAvailableOutput.
type ImageProcessingBlockGetFirstAvailableOutputOpts struct {
	ForBlock *NodeMaterialBlock
}

// GetFirstAvailableOutput calls the GetFirstAvailableOutput method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#getfirstavailableoutput
func (i *ImageProcessingBlock) GetFirstAvailableOutput(opts *ImageProcessingBlockGetFirstAvailableOutputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &ImageProcessingBlockGetFirstAvailableOutputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForBlock == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForBlock.JSObject())
	}

	retVal := i.p.Call("getFirstAvailableOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, i.ctx)
}

// GetInputByName calls the GetInputByName method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#getinputbyname
func (i *ImageProcessingBlock) GetInputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := i.p.Call("getInputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, i.ctx)
}

// GetOutputByName calls the GetOutputByName method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#getoutputbyname
func (i *ImageProcessingBlock) GetOutputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := i.p.Call("getOutputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, i.ctx)
}

// GetSiblingOutput calls the GetSiblingOutput method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#getsiblingoutput
func (i *ImageProcessingBlock) GetSiblingOutput(current *NodeMaterialConnectionPoint) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, current.JSObject())

	retVal := i.p.Call("getSiblingOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, i.ctx)
}

// Initialize calls the Initialize method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#initialize
func (i *ImageProcessingBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	i.p.Call("initialize", args...)
}

// ImageProcessingBlockInitializeDefinesOpts contains optional parameters for ImageProcessingBlock.InitializeDefines.
type ImageProcessingBlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#initializedefines
func (i *ImageProcessingBlock) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *ImageProcessingBlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &ImageProcessingBlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	i.p.Call("initializeDefines", args...)
}

// IsReady calls the IsReady method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#isready
func (i *ImageProcessingBlock) IsReady(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value) bool {

	args := make([]interface{}, 0, 3+0)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	retVal := i.p.Call("isReady", args...)
	return retVal.Bool()
}

// PrepareDefines calls the PrepareDefines method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#preparedefines
func (i *ImageProcessingBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	i.p.Call("prepareDefines", args...)
}

// ProvideFallbacks calls the ProvideFallbacks method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#providefallbacks
func (i *ImageProcessingBlock) ProvideFallbacks(mesh *AbstractMesh, fallbacks *EffectFallbacks) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, fallbacks.JSObject())

	i.p.Call("provideFallbacks", args...)
}

// ImageProcessingBlockRegisterInputOpts contains optional parameters for ImageProcessingBlock.RegisterInput.
type ImageProcessingBlockRegisterInputOpts struct {
	IsOptional *bool
	Target     js.Value
}

// RegisterInput calls the RegisterInput method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#registerinput
func (i *ImageProcessingBlock) RegisterInput(name string, jsType js.Value, opts *ImageProcessingBlockRegisterInputOpts) *ImageProcessingBlock {
	if opts == nil {
		opts = &ImageProcessingBlockRegisterInputOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, jsType)

	if opts.IsOptional == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsOptional)
	}
	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := i.p.Call("registerInput", args...)
	return ImageProcessingBlockFromJSObject(retVal, i.ctx)
}

// ImageProcessingBlockRegisterOutputOpts contains optional parameters for ImageProcessingBlock.RegisterOutput.
type ImageProcessingBlockRegisterOutputOpts struct {
	Target js.Value
}

// RegisterOutput calls the RegisterOutput method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#registeroutput
func (i *ImageProcessingBlock) RegisterOutput(name string, jsType js.Value, opts *ImageProcessingBlockRegisterOutputOpts) *ImageProcessingBlock {
	if opts == nil {
		opts = &ImageProcessingBlockRegisterOutputOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, jsType)

	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := i.p.Call("registerOutput", args...)
	return ImageProcessingBlockFromJSObject(retVal, i.ctx)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#replacerepeatablecontent
func (i *ImageProcessingBlock) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	i.p.Call("replaceRepeatableContent", args...)
}

// Serialize calls the Serialize method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#serialize
func (i *ImageProcessingBlock) Serialize() interface{} {

	retVal := i.p.Call("serialize")
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the ImageProcessingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#updateuniformsandsamples
func (i *ImageProcessingBlock) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers string) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, state.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)
	args = append(args, uniformBuffers)

	i.p.Call("updateUniformsAndSamples", args...)
}

/*

// BuildId returns the BuildId property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#buildid
func (i *ImageProcessingBlock) BuildId(buildId float64) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(buildId)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// SetBuildId sets the BuildId property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#buildid
func (i *ImageProcessingBlock) SetBuildId(buildId float64) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(buildId)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// Color returns the Color property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#color
func (i *ImageProcessingBlock) Color(color *NodeMaterialConnectionPoint) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(color.JSObject())
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// SetColor sets the Color property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#color
func (i *ImageProcessingBlock) SetColor(color *NodeMaterialConnectionPoint) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(color.JSObject())
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// Comments returns the Comments property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#comments
func (i *ImageProcessingBlock) Comments(comments string) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(comments)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// SetComments sets the Comments property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#comments
func (i *ImageProcessingBlock) SetComments(comments string) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(comments)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#inputs
func (i *ImageProcessingBlock) Inputs(inputs *NodeMaterialConnectionPoint) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(inputs.JSObject())
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#inputs
func (i *ImageProcessingBlock) SetInputs(inputs *NodeMaterialConnectionPoint) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(inputs.JSObject())
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// IsFinalMerger returns the IsFinalMerger property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#isfinalmerger
func (i *ImageProcessingBlock) IsFinalMerger(isFinalMerger bool) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(isFinalMerger)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// SetIsFinalMerger sets the IsFinalMerger property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#isfinalmerger
func (i *ImageProcessingBlock) SetIsFinalMerger(isFinalMerger bool) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(isFinalMerger)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// IsInput returns the IsInput property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#isinput
func (i *ImageProcessingBlock) IsInput(isInput bool) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(isInput)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// SetIsInput sets the IsInput property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#isinput
func (i *ImageProcessingBlock) SetIsInput(isInput bool) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(isInput)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// IsUnique returns the IsUnique property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#isunique
func (i *ImageProcessingBlock) IsUnique(isUnique bool) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(isUnique)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// SetIsUnique sets the IsUnique property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#isunique
func (i *ImageProcessingBlock) SetIsUnique(isUnique bool) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(isUnique)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#name
func (i *ImageProcessingBlock) Name(name string) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(name)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#name
func (i *ImageProcessingBlock) SetName(name string) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(name)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#output
func (i *ImageProcessingBlock) Output(output *NodeMaterialConnectionPoint) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(output.JSObject())
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#output
func (i *ImageProcessingBlock) SetOutput(output *NodeMaterialConnectionPoint) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(output.JSObject())
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// Outputs returns the Outputs property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#outputs
func (i *ImageProcessingBlock) Outputs(outputs *NodeMaterialConnectionPoint) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(outputs.JSObject())
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// SetOutputs sets the Outputs property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#outputs
func (i *ImageProcessingBlock) SetOutputs(outputs *NodeMaterialConnectionPoint) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(outputs.JSObject())
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#target
func (i *ImageProcessingBlock) Target(target js.Value) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(target)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#target
func (i *ImageProcessingBlock) SetTarget(target js.Value) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(target)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#uniqueid
func (i *ImageProcessingBlock) UniqueId(uniqueId float64) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(uniqueId)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class ImageProcessingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.imageprocessingblock#uniqueid
func (i *ImageProcessingBlock) SetUniqueId(uniqueId float64) *ImageProcessingBlock {
	p := ba.ctx.Get("ImageProcessingBlock").New(uniqueId)
	return ImageProcessingBlockFromJSObject(p, ba.ctx)
}

*/
