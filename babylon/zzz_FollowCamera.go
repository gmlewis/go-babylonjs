// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FollowCamera represents a babylon.js FollowCamera.
// A follow camera takes a mesh as a target and follows it as it moves. Both a free camera version followCamera and
// an arc rotate version arcFollowCamera are available.
//
// See: http://doc.babylonjs.com/features/cameras#follow-camera
type FollowCamera struct {
	*TargetCamera
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FollowCamera) JSObject() js.Value { return f.p }

// FollowCamera returns a FollowCamera JavaScript class.
func (ba *Babylon) FollowCamera() *FollowCamera {
	p := ba.ctx.Get("FollowCamera")
	return FollowCameraFromJSObject(p, ba.ctx)
}

// FollowCameraFromJSObject returns a wrapped FollowCamera JavaScript class.
func FollowCameraFromJSObject(p js.Value, ctx js.Value) *FollowCamera {
	return &FollowCamera{TargetCamera: TargetCameraFromJSObject(p, ctx), ctx: ctx}
}

// FollowCameraArrayToJSArray returns a JavaScript Array for the wrapped array.
func FollowCameraArrayToJSArray(array []*FollowCamera) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewFollowCameraOpts contains optional parameters for NewFollowCamera.
type NewFollowCameraOpts struct {
	LockedTarget *AbstractMesh
}

// NewFollowCamera returns a new FollowCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera
func (ba *Babylon) NewFollowCamera(name string, position *Vector3, scene *Scene, opts *NewFollowCameraOpts) *FollowCamera {
	if opts == nil {
		opts = &NewFollowCameraOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, name)
	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	if opts.LockedTarget == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.LockedTarget.JSObject())
	}

	p := ba.ctx.Get("FollowCamera").New(args...)
	return FollowCameraFromJSObject(p, ba.ctx)
}

// AttachControl calls the AttachControl method on the FollowCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#attachcontrol
func (f *FollowCamera) AttachControl(element js.Value, noPreventDefault bool) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, element)

	args = append(args, noPreventDefault)

	f.p.Call("attachControl", args...)
}

// DetachControl calls the DetachControl method on the FollowCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#detachcontrol
func (f *FollowCamera) DetachControl(element js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, element)

	f.p.Call("detachControl", args...)
}

// GetClassName calls the GetClassName method on the FollowCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#getclassname
func (f *FollowCamera) GetClassName() string {

	retVal := f.p.Call("getClassName")
	return retVal.String()
}

// CameraAcceleration returns the CameraAcceleration property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#cameraacceleration
func (f *FollowCamera) CameraAcceleration() float64 {
	retVal := f.p.Get("cameraAcceleration")
	return retVal.Float()
}

// SetCameraAcceleration sets the CameraAcceleration property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#cameraacceleration
func (f *FollowCamera) SetCameraAcceleration(cameraAcceleration float64) *FollowCamera {
	f.p.Set("cameraAcceleration", cameraAcceleration)
	return f
}

// HeightOffset returns the HeightOffset property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#heightoffset
func (f *FollowCamera) HeightOffset() float64 {
	retVal := f.p.Get("heightOffset")
	return retVal.Float()
}

// SetHeightOffset sets the HeightOffset property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#heightoffset
func (f *FollowCamera) SetHeightOffset(heightOffset float64) *FollowCamera {
	f.p.Set("heightOffset", heightOffset)
	return f
}

// Inputs returns the Inputs property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#inputs
func (f *FollowCamera) Inputs() *FollowCameraInputsManager {
	retVal := f.p.Get("inputs")
	return FollowCameraInputsManagerFromJSObject(retVal, f.ctx)
}

// SetInputs sets the Inputs property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#inputs
func (f *FollowCamera) SetInputs(inputs *FollowCameraInputsManager) *FollowCamera {
	f.p.Set("inputs", inputs.JSObject())
	return f
}

// LockedTarget returns the LockedTarget property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#lockedtarget
func (f *FollowCamera) LockedTarget() *AbstractMesh {
	retVal := f.p.Get("lockedTarget")
	return AbstractMeshFromJSObject(retVal, f.ctx)
}

// SetLockedTarget sets the LockedTarget property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#lockedtarget
func (f *FollowCamera) SetLockedTarget(lockedTarget *AbstractMesh) *FollowCamera {
	f.p.Set("lockedTarget", lockedTarget.JSObject())
	return f
}

// LowerHeightOffsetLimit returns the LowerHeightOffsetLimit property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#lowerheightoffsetlimit
func (f *FollowCamera) LowerHeightOffsetLimit() float64 {
	retVal := f.p.Get("lowerHeightOffsetLimit")
	return retVal.Float()
}

// SetLowerHeightOffsetLimit sets the LowerHeightOffsetLimit property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#lowerheightoffsetlimit
func (f *FollowCamera) SetLowerHeightOffsetLimit(lowerHeightOffsetLimit float64) *FollowCamera {
	f.p.Set("lowerHeightOffsetLimit", lowerHeightOffsetLimit)
	return f
}

// LowerRadiusLimit returns the LowerRadiusLimit property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#lowerradiuslimit
func (f *FollowCamera) LowerRadiusLimit() float64 {
	retVal := f.p.Get("lowerRadiusLimit")
	return retVal.Float()
}

// SetLowerRadiusLimit sets the LowerRadiusLimit property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#lowerradiuslimit
func (f *FollowCamera) SetLowerRadiusLimit(lowerRadiusLimit float64) *FollowCamera {
	f.p.Set("lowerRadiusLimit", lowerRadiusLimit)
	return f
}

// LowerRotationOffsetLimit returns the LowerRotationOffsetLimit property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#lowerrotationoffsetlimit
func (f *FollowCamera) LowerRotationOffsetLimit() float64 {
	retVal := f.p.Get("lowerRotationOffsetLimit")
	return retVal.Float()
}

// SetLowerRotationOffsetLimit sets the LowerRotationOffsetLimit property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#lowerrotationoffsetlimit
func (f *FollowCamera) SetLowerRotationOffsetLimit(lowerRotationOffsetLimit float64) *FollowCamera {
	f.p.Set("lowerRotationOffsetLimit", lowerRotationOffsetLimit)
	return f
}

// MaxCameraSpeed returns the MaxCameraSpeed property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#maxcameraspeed
func (f *FollowCamera) MaxCameraSpeed() float64 {
	retVal := f.p.Get("maxCameraSpeed")
	return retVal.Float()
}

// SetMaxCameraSpeed sets the MaxCameraSpeed property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#maxcameraspeed
func (f *FollowCamera) SetMaxCameraSpeed(maxCameraSpeed float64) *FollowCamera {
	f.p.Set("maxCameraSpeed", maxCameraSpeed)
	return f
}

// Radius returns the Radius property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#radius
func (f *FollowCamera) Radius() float64 {
	retVal := f.p.Get("radius")
	return retVal.Float()
}

// SetRadius sets the Radius property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#radius
func (f *FollowCamera) SetRadius(radius float64) *FollowCamera {
	f.p.Set("radius", radius)
	return f
}

// RotationOffset returns the RotationOffset property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#rotationoffset
func (f *FollowCamera) RotationOffset() float64 {
	retVal := f.p.Get("rotationOffset")
	return retVal.Float()
}

// SetRotationOffset sets the RotationOffset property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#rotationoffset
func (f *FollowCamera) SetRotationOffset(rotationOffset float64) *FollowCamera {
	f.p.Set("rotationOffset", rotationOffset)
	return f
}

// UpperHeightOffsetLimit returns the UpperHeightOffsetLimit property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#upperheightoffsetlimit
func (f *FollowCamera) UpperHeightOffsetLimit() float64 {
	retVal := f.p.Get("upperHeightOffsetLimit")
	return retVal.Float()
}

// SetUpperHeightOffsetLimit sets the UpperHeightOffsetLimit property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#upperheightoffsetlimit
func (f *FollowCamera) SetUpperHeightOffsetLimit(upperHeightOffsetLimit float64) *FollowCamera {
	f.p.Set("upperHeightOffsetLimit", upperHeightOffsetLimit)
	return f
}

// UpperRadiusLimit returns the UpperRadiusLimit property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#upperradiuslimit
func (f *FollowCamera) UpperRadiusLimit() float64 {
	retVal := f.p.Get("upperRadiusLimit")
	return retVal.Float()
}

// SetUpperRadiusLimit sets the UpperRadiusLimit property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#upperradiuslimit
func (f *FollowCamera) SetUpperRadiusLimit(upperRadiusLimit float64) *FollowCamera {
	f.p.Set("upperRadiusLimit", upperRadiusLimit)
	return f
}

// UpperRotationOffsetLimit returns the UpperRotationOffsetLimit property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#upperrotationoffsetlimit
func (f *FollowCamera) UpperRotationOffsetLimit() float64 {
	retVal := f.p.Get("upperRotationOffsetLimit")
	return retVal.Float()
}

// SetUpperRotationOffsetLimit sets the UpperRotationOffsetLimit property of class FollowCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.followcamera#upperrotationoffsetlimit
func (f *FollowCamera) SetUpperRotationOffsetLimit(upperRotationOffsetLimit float64) *FollowCamera {
	f.p.Set("upperRotationOffsetLimit", upperRotationOffsetLimit)
	return f
}
