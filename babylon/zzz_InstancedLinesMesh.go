// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// InstancedLinesMesh represents a babylon.js InstancedLinesMesh.
// Creates an instance based on a source LinesMesh
type InstancedLinesMesh struct {
	*InstancedMesh
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *InstancedLinesMesh) JSObject() js.Value { return i.p }

// InstancedLinesMesh returns a InstancedLinesMesh JavaScript class.
func (ba *Babylon) InstancedLinesMesh() *InstancedLinesMesh {
	p := ba.ctx.Get("InstancedLinesMesh")
	return InstancedLinesMeshFromJSObject(p, ba.ctx)
}

// InstancedLinesMeshFromJSObject returns a wrapped InstancedLinesMesh JavaScript class.
func InstancedLinesMeshFromJSObject(p js.Value, ctx js.Value) *InstancedLinesMesh {
	return &InstancedLinesMesh{InstancedMesh: InstancedMeshFromJSObject(p, ctx), ctx: ctx}
}

// InstancedLinesMeshArrayToJSArray returns a JavaScript Array for the wrapped array.
func InstancedLinesMeshArrayToJSArray(array []*InstancedLinesMesh) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewInstancedLinesMesh returns a new InstancedLinesMesh object.
//
// https://doc.babylonjs.com/api/classes/babylon.instancedlinesmesh#constructor
func (ba *Babylon) NewInstancedLinesMesh(name string, source *LinesMesh) *InstancedLinesMesh {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, source.JSObject())

	p := ba.ctx.Get("InstancedLinesMesh").New(args...)
	return InstancedLinesMeshFromJSObject(p, ba.ctx)
}

// InstancedLinesMeshEnableEdgesRenderingOpts contains optional parameters for InstancedLinesMesh.EnableEdgesRendering.
type InstancedLinesMeshEnableEdgesRenderingOpts struct {
	Epsilon                       *float64
	CheckVerticesInsteadOfIndices *bool
}

// EnableEdgesRendering calls the EnableEdgesRendering method on the InstancedLinesMesh object.
//
// https://doc.babylonjs.com/api/classes/babylon.instancedlinesmesh#enableedgesrendering
func (i *InstancedLinesMesh) EnableEdgesRendering(opts *InstancedLinesMeshEnableEdgesRenderingOpts) *InstancedLinesMesh {
	if opts == nil {
		opts = &InstancedLinesMeshEnableEdgesRenderingOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Epsilon == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Epsilon)
	}
	if opts.CheckVerticesInsteadOfIndices == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CheckVerticesInsteadOfIndices)
	}

	retVal := i.p.Call("enableEdgesRendering", args...)
	return InstancedLinesMeshFromJSObject(retVal, i.ctx)
}

// GetClassName calls the GetClassName method on the InstancedLinesMesh object.
//
// https://doc.babylonjs.com/api/classes/babylon.instancedlinesmesh#getclassname
func (i *InstancedLinesMesh) GetClassName() string {

	retVal := i.p.Call("getClassName")
	return retVal.String()
}

// IntersectionThreshold returns the IntersectionThreshold property of class InstancedLinesMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.instancedlinesmesh#intersectionthreshold
func (i *InstancedLinesMesh) IntersectionThreshold() float64 {
	retVal := i.p.Get("intersectionThreshold")
	return retVal.Float()
}

// SetIntersectionThreshold sets the IntersectionThreshold property of class InstancedLinesMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.instancedlinesmesh#intersectionthreshold
func (i *InstancedLinesMesh) SetIntersectionThreshold(intersectionThreshold float64) *InstancedLinesMesh {
	i.p.Set("intersectionThreshold", intersectionThreshold)
	return i
}
