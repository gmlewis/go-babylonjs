// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ColorGradingTexture represents a babylon.js ColorGradingTexture.
// This represents a color grading texture. This acts as a lookup table LUT, useful during post process
// It can help converting any input color in a desired output one. This can then be used to create effects
// from sepia, black and white to sixties or futuristic rendering...
//
// The only supported format is currently 3dl.
// More information on LUT: &lt;a href=&#34;https://en.wikipedia.org/wiki/3D_lookup_table&#34;&gt;https://en.wikipedia.org/wiki/3D_lookup_table&lt;/a&gt;
type ColorGradingTexture struct {
	*BaseTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *ColorGradingTexture) JSObject() js.Value { return c.p }

// ColorGradingTexture returns a ColorGradingTexture JavaScript class.
func (ba *Babylon) ColorGradingTexture() *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture")
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// ColorGradingTextureFromJSObject returns a wrapped ColorGradingTexture JavaScript class.
func ColorGradingTextureFromJSObject(p js.Value, ctx js.Value) *ColorGradingTexture {
	return &ColorGradingTexture{BaseTexture: BaseTextureFromJSObject(p, ctx), ctx: ctx}
}

// ColorGradingTextureArrayToJSArray returns a JavaScript Array for the wrapped array.
func ColorGradingTextureArrayToJSArray(array []*ColorGradingTexture) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewColorGradingTexture returns a new ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture
func (ba *Babylon) NewColorGradingTexture(url string, scene *Scene) *ColorGradingTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, url)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("ColorGradingTexture").New(args...)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// Clone calls the Clone method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#clone
func (c *ColorGradingTexture) Clone() *ColorGradingTexture {

	retVal := c.p.Call("clone")
	return ColorGradingTextureFromJSObject(retVal, c.ctx)
}

// DelayLoad calls the DelayLoad method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#delayload
func (c *ColorGradingTexture) DelayLoad() {

	c.p.Call("delayLoad")
}

// Dispose calls the Dispose method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#dispose
func (c *ColorGradingTexture) Dispose() {

	c.p.Call("dispose")
}

// GetBaseSize calls the GetBaseSize method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#getbasesize
func (c *ColorGradingTexture) GetBaseSize() js.Value {

	retVal := c.p.Call("getBaseSize")
	return retVal
}

// GetClassName calls the GetClassName method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#getclassname
func (c *ColorGradingTexture) GetClassName() string {

	retVal := c.p.Call("getClassName")
	return retVal.String()
}

// GetInternalTexture calls the GetInternalTexture method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#getinternaltexture
func (c *ColorGradingTexture) GetInternalTexture() *InternalTexture {

	retVal := c.p.Call("getInternalTexture")
	return InternalTextureFromJSObject(retVal, c.ctx)
}

// GetReflectionTextureMatrix calls the GetReflectionTextureMatrix method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#getreflectiontexturematrix
func (c *ColorGradingTexture) GetReflectionTextureMatrix() *Matrix {

	retVal := c.p.Call("getReflectionTextureMatrix")
	return MatrixFromJSObject(retVal, c.ctx)
}

// GetScene calls the GetScene method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#getscene
func (c *ColorGradingTexture) GetScene() *Scene {

	retVal := c.p.Call("getScene")
	return SceneFromJSObject(retVal, c.ctx)
}

// GetSize calls the GetSize method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#getsize
func (c *ColorGradingTexture) GetSize() js.Value {

	retVal := c.p.Call("getSize")
	return retVal
}

// GetTextureMatrix calls the GetTextureMatrix method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#gettexturematrix
func (c *ColorGradingTexture) GetTextureMatrix() *Matrix {

	retVal := c.p.Call("getTextureMatrix")
	return MatrixFromJSObject(retVal, c.ctx)
}

// IsReady calls the IsReady method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#isready
func (c *ColorGradingTexture) IsReady() bool {

	retVal := c.p.Call("isReady")
	return retVal.Bool()
}

// IsReadyOrNotBlocking calls the IsReadyOrNotBlocking method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#isreadyornotblocking
func (c *ColorGradingTexture) IsReadyOrNotBlocking() bool {

	retVal := c.p.Call("isReadyOrNotBlocking")
	return retVal.Bool()
}

// Parse calls the Parse method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#parse
func (c *ColorGradingTexture) Parse(parsedTexture interface{}, scene *Scene) *ColorGradingTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, parsedTexture)
	args = append(args, scene.JSObject())

	retVal := c.p.Call("Parse", args...)
	return ColorGradingTextureFromJSObject(retVal, c.ctx)
}

// ColorGradingTextureReadPixelsOpts contains optional parameters for ColorGradingTexture.ReadPixels.
type ColorGradingTextureReadPixelsOpts struct {
	FaceIndex *float64
	Level     *float64
	Buffer    js.Value
}

// ReadPixels calls the ReadPixels method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#readpixels
func (c *ColorGradingTexture) ReadPixels(opts *ColorGradingTextureReadPixelsOpts) js.Value {
	if opts == nil {
		opts = &ColorGradingTextureReadPixelsOpts{}
	}

	args := make([]interface{}, 0, 0+3)

	if opts.FaceIndex == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FaceIndex)
	}
	if opts.Level == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Level)
	}
	if opts.Buffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Buffer)
	}

	retVal := c.p.Call("readPixels", args...)
	return retVal
}

// ReleaseInternalTexture calls the ReleaseInternalTexture method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#releaseinternaltexture
func (c *ColorGradingTexture) ReleaseInternalTexture() {

	c.p.Call("releaseInternalTexture")
}

// Scale calls the Scale method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#scale
func (c *ColorGradingTexture) Scale(ratio float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, ratio)

	c.p.Call("scale", args...)
}

// Serialize calls the Serialize method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#serialize
func (c *ColorGradingTexture) Serialize() interface{} {

	retVal := c.p.Call("serialize")
	return retVal
}

// ToString calls the ToString method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#tostring
func (c *ColorGradingTexture) ToString() string {

	retVal := c.p.Call("toString")
	return retVal.String()
}

// UpdateSamplingMode calls the UpdateSamplingMode method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#updatesamplingmode
func (c *ColorGradingTexture) UpdateSamplingMode(samplingMode float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, samplingMode)

	c.p.Call("updateSamplingMode", args...)
}

// WhenAllReady calls the WhenAllReady method on the ColorGradingTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#whenallready
func (c *ColorGradingTexture) WhenAllReady(textures *BaseTexture, callback func()) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, textures.JSObject())
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { callback(); return nil }))

	c.p.Call("WhenAllReady", args...)
}

/*

// Animations returns the Animations property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#animations
func (c *ColorGradingTexture) Animations(animations *Animation) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(animations.JSObject())
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#animations
func (c *ColorGradingTexture) SetAnimations(animations *Animation) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(animations.JSObject())
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// AnisotropicFilteringLevel returns the AnisotropicFilteringLevel property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#anisotropicfilteringlevel
func (c *ColorGradingTexture) AnisotropicFilteringLevel(anisotropicFilteringLevel float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(anisotropicFilteringLevel)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetAnisotropicFilteringLevel sets the AnisotropicFilteringLevel property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#anisotropicfilteringlevel
func (c *ColorGradingTexture) SetAnisotropicFilteringLevel(anisotropicFilteringLevel float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(anisotropicFilteringLevel)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// CanRescale returns the CanRescale property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#canrescale
func (c *ColorGradingTexture) CanRescale(canRescale bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(canRescale)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetCanRescale sets the CanRescale property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#canrescale
func (c *ColorGradingTexture) SetCanRescale(canRescale bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(canRescale)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// CoordinatesIndex returns the CoordinatesIndex property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#coordinatesindex
func (c *ColorGradingTexture) CoordinatesIndex(coordinatesIndex float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(coordinatesIndex)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetCoordinatesIndex sets the CoordinatesIndex property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#coordinatesindex
func (c *ColorGradingTexture) SetCoordinatesIndex(coordinatesIndex float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(coordinatesIndex)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// CoordinatesMode returns the CoordinatesMode property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#coordinatesmode
func (c *ColorGradingTexture) CoordinatesMode(coordinatesMode float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(coordinatesMode)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetCoordinatesMode sets the CoordinatesMode property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#coordinatesmode
func (c *ColorGradingTexture) SetCoordinatesMode(coordinatesMode float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(coordinatesMode)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// DEFAULT_ANISOTROPIC_FILTERING_LEVEL returns the DEFAULT_ANISOTROPIC_FILTERING_LEVEL property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#default_anisotropic_filtering_level
func (c *ColorGradingTexture) DEFAULT_ANISOTROPIC_FILTERING_LEVEL(DEFAULT_ANISOTROPIC_FILTERING_LEVEL float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(DEFAULT_ANISOTROPIC_FILTERING_LEVEL)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetDEFAULT_ANISOTROPIC_FILTERING_LEVEL sets the DEFAULT_ANISOTROPIC_FILTERING_LEVEL property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#default_anisotropic_filtering_level
func (c *ColorGradingTexture) SetDEFAULT_ANISOTROPIC_FILTERING_LEVEL(DEFAULT_ANISOTROPIC_FILTERING_LEVEL float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(DEFAULT_ANISOTROPIC_FILTERING_LEVEL)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// DelayLoadState returns the DelayLoadState property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#delayloadstate
func (c *ColorGradingTexture) DelayLoadState(delayLoadState float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(delayLoadState)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetDelayLoadState sets the DelayLoadState property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#delayloadstate
func (c *ColorGradingTexture) SetDelayLoadState(delayLoadState float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(delayLoadState)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// GammaSpace returns the GammaSpace property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#gammaspace
func (c *ColorGradingTexture) GammaSpace(gammaSpace bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(gammaSpace)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetGammaSpace sets the GammaSpace property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#gammaspace
func (c *ColorGradingTexture) SetGammaSpace(gammaSpace bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(gammaSpace)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// GetAlphaFromRGB returns the GetAlphaFromRGB property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#getalphafromrgb
func (c *ColorGradingTexture) GetAlphaFromRGB(getAlphaFromRGB bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(getAlphaFromRGB)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetGetAlphaFromRGB sets the GetAlphaFromRGB property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#getalphafromrgb
func (c *ColorGradingTexture) SetGetAlphaFromRGB(getAlphaFromRGB bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(getAlphaFromRGB)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// HasAlpha returns the HasAlpha property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#hasalpha
func (c *ColorGradingTexture) HasAlpha(hasAlpha bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(hasAlpha)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetHasAlpha sets the HasAlpha property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#hasalpha
func (c *ColorGradingTexture) SetHasAlpha(hasAlpha bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(hasAlpha)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// InvertZ returns the InvertZ property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#invertz
func (c *ColorGradingTexture) InvertZ(invertZ bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(invertZ)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetInvertZ sets the InvertZ property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#invertz
func (c *ColorGradingTexture) SetInvertZ(invertZ bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(invertZ)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// IrradianceTexture returns the IrradianceTexture property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#irradiancetexture
func (c *ColorGradingTexture) IrradianceTexture(irradianceTexture *BaseTexture) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(irradianceTexture.JSObject())
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetIrradianceTexture sets the IrradianceTexture property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#irradiancetexture
func (c *ColorGradingTexture) SetIrradianceTexture(irradianceTexture *BaseTexture) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(irradianceTexture.JSObject())
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// Is2DArray returns the Is2DArray property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#is2darray
func (c *ColorGradingTexture) Is2DArray(is2DArray bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(is2DArray)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetIs2DArray sets the Is2DArray property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#is2darray
func (c *ColorGradingTexture) SetIs2DArray(is2DArray bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(is2DArray)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// Is3D returns the Is3D property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#is3d
func (c *ColorGradingTexture) Is3D(is3D bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(is3D)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetIs3D sets the Is3D property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#is3d
func (c *ColorGradingTexture) SetIs3D(is3D bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(is3D)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// IsBlocking returns the IsBlocking property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#isblocking
func (c *ColorGradingTexture) IsBlocking(isBlocking bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(isBlocking)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetIsBlocking sets the IsBlocking property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#isblocking
func (c *ColorGradingTexture) SetIsBlocking(isBlocking bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(isBlocking)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// IsCube returns the IsCube property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#iscube
func (c *ColorGradingTexture) IsCube(isCube bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(isCube)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetIsCube sets the IsCube property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#iscube
func (c *ColorGradingTexture) SetIsCube(isCube bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(isCube)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// IsRGBD returns the IsRGBD property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#isrgbd
func (c *ColorGradingTexture) IsRGBD(isRGBD bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(isRGBD)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetIsRGBD sets the IsRGBD property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#isrgbd
func (c *ColorGradingTexture) SetIsRGBD(isRGBD bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(isRGBD)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// IsRenderTarget returns the IsRenderTarget property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#isrendertarget
func (c *ColorGradingTexture) IsRenderTarget(isRenderTarget bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(isRenderTarget)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetIsRenderTarget sets the IsRenderTarget property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#isrendertarget
func (c *ColorGradingTexture) SetIsRenderTarget(isRenderTarget bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(isRenderTarget)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// Level returns the Level property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#level
func (c *ColorGradingTexture) Level(level float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(level)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetLevel sets the Level property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#level
func (c *ColorGradingTexture) SetLevel(level float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(level)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// LinearSpecularLOD returns the LinearSpecularLOD property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#linearspecularlod
func (c *ColorGradingTexture) LinearSpecularLOD(linearSpecularLOD bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(linearSpecularLOD)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetLinearSpecularLOD sets the LinearSpecularLOD property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#linearspecularlod
func (c *ColorGradingTexture) SetLinearSpecularLOD(linearSpecularLOD bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(linearSpecularLOD)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// LodGenerationOffset returns the LodGenerationOffset property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#lodgenerationoffset
func (c *ColorGradingTexture) LodGenerationOffset(lodGenerationOffset float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(lodGenerationOffset)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetLodGenerationOffset sets the LodGenerationOffset property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#lodgenerationoffset
func (c *ColorGradingTexture) SetLodGenerationOffset(lodGenerationOffset float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(lodGenerationOffset)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// LodGenerationScale returns the LodGenerationScale property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#lodgenerationscale
func (c *ColorGradingTexture) LodGenerationScale(lodGenerationScale float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(lodGenerationScale)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetLodGenerationScale sets the LodGenerationScale property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#lodgenerationscale
func (c *ColorGradingTexture) SetLodGenerationScale(lodGenerationScale float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(lodGenerationScale)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#metadata
func (c *ColorGradingTexture) Metadata(metadata interface{}) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(metadata)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#metadata
func (c *ColorGradingTexture) SetMetadata(metadata interface{}) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(metadata)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#name
func (c *ColorGradingTexture) Name(name string) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(name)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#name
func (c *ColorGradingTexture) SetName(name string) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(name)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// NoMipmap returns the NoMipmap property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#nomipmap
func (c *ColorGradingTexture) NoMipmap(noMipmap bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(noMipmap)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetNoMipmap sets the NoMipmap property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#nomipmap
func (c *ColorGradingTexture) SetNoMipmap(noMipmap bool) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(noMipmap)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#ondispose
func (c *ColorGradingTexture) OnDispose(onDispose func()) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#ondispose
func (c *ColorGradingTexture) SetOnDispose(onDispose func()) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#ondisposeobservable
func (c *ColorGradingTexture) OnDisposeObservable(onDisposeObservable *Observable) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(onDisposeObservable.JSObject())
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#ondisposeobservable
func (c *ColorGradingTexture) SetOnDisposeObservable(onDisposeObservable *Observable) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(onDisposeObservable.JSObject())
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#reserveddatastore
func (c *ColorGradingTexture) ReservedDataStore(reservedDataStore interface{}) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(reservedDataStore)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#reserveddatastore
func (c *ColorGradingTexture) SetReservedDataStore(reservedDataStore interface{}) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(reservedDataStore)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SphericalPolynomial returns the SphericalPolynomial property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#sphericalpolynomial
func (c *ColorGradingTexture) SphericalPolynomial(sphericalPolynomial *SphericalPolynomial) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(sphericalPolynomial.JSObject())
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetSphericalPolynomial sets the SphericalPolynomial property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#sphericalpolynomial
func (c *ColorGradingTexture) SetSphericalPolynomial(sphericalPolynomial *SphericalPolynomial) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(sphericalPolynomial.JSObject())
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// TextureFormat returns the TextureFormat property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#textureformat
func (c *ColorGradingTexture) TextureFormat(textureFormat float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(textureFormat)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetTextureFormat sets the TextureFormat property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#textureformat
func (c *ColorGradingTexture) SetTextureFormat(textureFormat float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(textureFormat)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// TextureType returns the TextureType property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#texturetype
func (c *ColorGradingTexture) TextureType(textureType float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(textureType)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetTextureType sets the TextureType property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#texturetype
func (c *ColorGradingTexture) SetTextureType(textureType float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(textureType)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// Uid returns the Uid property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#uid
func (c *ColorGradingTexture) Uid(uid string) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(uid)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetUid sets the Uid property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#uid
func (c *ColorGradingTexture) SetUid(uid string) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(uid)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#uniqueid
func (c *ColorGradingTexture) UniqueId(uniqueId float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(uniqueId)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#uniqueid
func (c *ColorGradingTexture) SetUniqueId(uniqueId float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(uniqueId)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// Url returns the Url property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#url
func (c *ColorGradingTexture) Url(url string) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(url)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetUrl sets the Url property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#url
func (c *ColorGradingTexture) SetUrl(url string) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(url)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// WrapR returns the WrapR property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#wrapr
func (c *ColorGradingTexture) WrapR(wrapR float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(wrapR)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetWrapR sets the WrapR property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#wrapr
func (c *ColorGradingTexture) SetWrapR(wrapR float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(wrapR)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// WrapU returns the WrapU property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#wrapu
func (c *ColorGradingTexture) WrapU(wrapU float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(wrapU)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetWrapU sets the WrapU property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#wrapu
func (c *ColorGradingTexture) SetWrapU(wrapU float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(wrapU)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// WrapV returns the WrapV property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#wrapv
func (c *ColorGradingTexture) WrapV(wrapV float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(wrapV)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

// SetWrapV sets the WrapV property of class ColorGradingTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.colorgradingtexture#wrapv
func (c *ColorGradingTexture) SetWrapV(wrapV float64) *ColorGradingTexture {
	p := ba.ctx.Get("ColorGradingTexture").New(wrapV)
	return ColorGradingTextureFromJSObject(p, ba.ctx)
}

*/
