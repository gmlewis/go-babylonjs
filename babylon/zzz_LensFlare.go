// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// LensFlare represents a babylon.js LensFlare.
// This represents one of the lens effect in a <code>lensFlareSystem</code>.
// It controls one of the indiviual texture used in the effect.
//
// See: http://doc.babylonjs.com/how_to/how_to_use_lens_flares
type LensFlare struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (l *LensFlare) JSObject() js.Value { return l.p }

// LensFlare returns a LensFlare JavaScript class.
func (ba *Babylon) LensFlare() *LensFlare {
	p := ba.ctx.Get("LensFlare")
	return LensFlareFromJSObject(p, ba.ctx)
}

// LensFlareFromJSObject returns a wrapped LensFlare JavaScript class.
func LensFlareFromJSObject(p js.Value, ctx js.Value) *LensFlare {
	return &LensFlare{p: p, ctx: ctx}
}

// LensFlareArrayToJSArray returns a JavaScript Array for the wrapped array.
func LensFlareArrayToJSArray(array []*LensFlare) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewLensFlare returns a new LensFlare object.
//
// https://doc.babylonjs.com/api/classes/babylon.lensflare
func (ba *Babylon) NewLensFlare(size float64, position float64, color *Color3, imgUrl string, system *LensFlareSystem) *LensFlare {

	args := make([]interface{}, 0, 5+0)

	args = append(args, size)
	args = append(args, position)
	args = append(args, color.JSObject())
	args = append(args, imgUrl)
	args = append(args, system.JSObject())

	p := ba.ctx.Get("LensFlare").New(args...)
	return LensFlareFromJSObject(p, ba.ctx)
}

// AddFlare calls the AddFlare method on the LensFlare object.
//
// https://doc.babylonjs.com/api/classes/babylon.lensflare#addflare
func (l *LensFlare) AddFlare(size float64, position float64, color *Color3, imgUrl string, system *LensFlareSystem) *LensFlare {

	args := make([]interface{}, 0, 5+0)

	args = append(args, size)
	args = append(args, position)
	args = append(args, color.JSObject())
	args = append(args, imgUrl)
	args = append(args, system.JSObject())

	retVal := l.p.Call("AddFlare", args...)
	return LensFlareFromJSObject(retVal, l.ctx)
}

// Dispose calls the Dispose method on the LensFlare object.
//
// https://doc.babylonjs.com/api/classes/babylon.lensflare#dispose
func (l *LensFlare) Dispose() {

	l.p.Call("dispose")
}

// AlphaMode returns the AlphaMode property of class LensFlare.
//
// https://doc.babylonjs.com/api/classes/babylon.lensflare#alphamode
func (l *LensFlare) AlphaMode() float64 {
	retVal := l.p.Get("alphaMode")
	return retVal.Float()
}

// SetAlphaMode sets the AlphaMode property of class LensFlare.
//
// https://doc.babylonjs.com/api/classes/babylon.lensflare#alphamode
func (l *LensFlare) SetAlphaMode(alphaMode float64) *LensFlare {
	l.p.Set("alphaMode", alphaMode)
	return l
}

// Color returns the Color property of class LensFlare.
//
// https://doc.babylonjs.com/api/classes/babylon.lensflare#color
func (l *LensFlare) Color() *Color3 {
	retVal := l.p.Get("color")
	return Color3FromJSObject(retVal, l.ctx)
}

// SetColor sets the Color property of class LensFlare.
//
// https://doc.babylonjs.com/api/classes/babylon.lensflare#color
func (l *LensFlare) SetColor(color *Color3) *LensFlare {
	l.p.Set("color", color.JSObject())
	return l
}

// Position returns the Position property of class LensFlare.
//
// https://doc.babylonjs.com/api/classes/babylon.lensflare#position
func (l *LensFlare) Position() float64 {
	retVal := l.p.Get("position")
	return retVal.Float()
}

// SetPosition sets the Position property of class LensFlare.
//
// https://doc.babylonjs.com/api/classes/babylon.lensflare#position
func (l *LensFlare) SetPosition(position float64) *LensFlare {
	l.p.Set("position", position)
	return l
}

// Size returns the Size property of class LensFlare.
//
// https://doc.babylonjs.com/api/classes/babylon.lensflare#size
func (l *LensFlare) Size() float64 {
	retVal := l.p.Get("size")
	return retVal.Float()
}

// SetSize sets the Size property of class LensFlare.
//
// https://doc.babylonjs.com/api/classes/babylon.lensflare#size
func (l *LensFlare) SetSize(size float64) *LensFlare {
	l.p.Set("size", size)
	return l
}

// Texture returns the Texture property of class LensFlare.
//
// https://doc.babylonjs.com/api/classes/babylon.lensflare#texture
func (l *LensFlare) Texture() *Texture {
	retVal := l.p.Get("texture")
	return TextureFromJSObject(retVal, l.ctx)
}

// SetTexture sets the Texture property of class LensFlare.
//
// https://doc.babylonjs.com/api/classes/babylon.lensflare#texture
func (l *LensFlare) SetTexture(texture *Texture) *LensFlare {
	l.p.Set("texture", texture.JSObject())
	return l
}
