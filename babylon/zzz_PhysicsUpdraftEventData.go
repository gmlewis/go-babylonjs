// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PhysicsUpdraftEventData represents a babylon.js PhysicsUpdraftEventData.
// Interface for updraft event data
//
// See: https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class
type PhysicsUpdraftEventData struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PhysicsUpdraftEventData) JSObject() js.Value { return p.p }

// PhysicsUpdraftEventData returns a PhysicsUpdraftEventData JavaScript class.
func (ba *Babylon) PhysicsUpdraftEventData() *PhysicsUpdraftEventData {
	p := ba.ctx.Get("PhysicsUpdraftEventData")
	return PhysicsUpdraftEventDataFromJSObject(p, ba.ctx)
}

// PhysicsUpdraftEventDataFromJSObject returns a wrapped PhysicsUpdraftEventData JavaScript class.
func PhysicsUpdraftEventDataFromJSObject(p js.Value, ctx js.Value) *PhysicsUpdraftEventData {
	return &PhysicsUpdraftEventData{p: p, ctx: ctx}
}

// PhysicsUpdraftEventDataArrayToJSArray returns a JavaScript Array for the wrapped array.
func PhysicsUpdraftEventDataArrayToJSArray(array []*PhysicsUpdraftEventData) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Cylinder returns the Cylinder property of class PhysicsUpdraftEventData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsupdrafteventdata#cylinder
func (p *PhysicsUpdraftEventData) Cylinder(cylinder *Mesh) *PhysicsUpdraftEventData {
	p := ba.ctx.Get("PhysicsUpdraftEventData").New(cylinder.JSObject())
	return PhysicsUpdraftEventDataFromJSObject(p, ba.ctx)
}

// SetCylinder sets the Cylinder property of class PhysicsUpdraftEventData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsupdrafteventdata#cylinder
func (p *PhysicsUpdraftEventData) SetCylinder(cylinder *Mesh) *PhysicsUpdraftEventData {
	p := ba.ctx.Get("PhysicsUpdraftEventData").New(cylinder.JSObject())
	return PhysicsUpdraftEventDataFromJSObject(p, ba.ctx)
}

*/
