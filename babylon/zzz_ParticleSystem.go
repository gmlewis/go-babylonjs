// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ParticleSystem represents a babylon.js ParticleSystem.
// This represents a particle system in Babylon.
// Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.
// Particles can take different shapes while emitted like box, sphere, cone or you can write your custom function.
//
// See: https://doc.babylonjs.com/babylon101/particles
type ParticleSystem struct {
	*BaseParticleSystem
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *ParticleSystem) JSObject() js.Value { return p.p }

// ParticleSystem returns a ParticleSystem JavaScript class.
func (ba *Babylon) ParticleSystem() *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem")
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// ParticleSystemFromJSObject returns a wrapped ParticleSystem JavaScript class.
func ParticleSystemFromJSObject(p js.Value, ctx js.Value) *ParticleSystem {
	return &ParticleSystem{BaseParticleSystem: BaseParticleSystemFromJSObject(p, ctx), ctx: ctx}
}

// ParticleSystemArrayToJSArray returns a JavaScript Array for the wrapped array.
func ParticleSystemArrayToJSArray(array []*ParticleSystem) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewParticleSystemOpts contains optional parameters for NewParticleSystem.
type NewParticleSystemOpts struct {
	CustomEffect            *Effect
	IsAnimationSheetEnabled *bool
	Epsilon                 *float64
}

// NewParticleSystem returns a new ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem
func (ba *Babylon) NewParticleSystem(name string, capacity float64, scene *Scene, opts *NewParticleSystemOpts) *ParticleSystem {
	if opts == nil {
		opts = &NewParticleSystemOpts{}
	}

	args := make([]interface{}, 0, 3+3)

	args = append(args, name)
	args = append(args, capacity)
	args = append(args, scene.JSObject())

	if opts.CustomEffect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.CustomEffect.JSObject())
	}
	if opts.IsAnimationSheetEnabled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsAnimationSheetEnabled)
	}
	if opts.Epsilon == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Epsilon)
	}

	p := ba.ctx.Get("ParticleSystem").New(args...)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// AddAlphaRemapGradient calls the AddAlphaRemapGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#addalpharemapgradient
func (p *ParticleSystem) AddAlphaRemapGradient(gradient float64, min float64, max float64) *IParticleSystem {

	args := make([]interface{}, 0, 3+0)

	args = append(args, gradient)
	args = append(args, min)
	args = append(args, max)

	retVal := p.p.Call("addAlphaRemapGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// ParticleSystemAddAngularSpeedGradientOpts contains optional parameters for ParticleSystem.AddAngularSpeedGradient.
type ParticleSystemAddAngularSpeedGradientOpts struct {
	Factor2 *float64
}

// AddAngularSpeedGradient calls the AddAngularSpeedGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#addangularspeedgradient
func (p *ParticleSystem) AddAngularSpeedGradient(gradient float64, factor float64, opts *ParticleSystemAddAngularSpeedGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &ParticleSystemAddAngularSpeedGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)
	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := p.p.Call("addAngularSpeedGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// ParticleSystemAddColorGradientOpts contains optional parameters for ParticleSystem.AddColorGradient.
type ParticleSystemAddColorGradientOpts struct {
	Color2 *Color4
}

// AddColorGradient calls the AddColorGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#addcolorgradient
func (p *ParticleSystem) AddColorGradient(gradient float64, color1 *Color4, opts *ParticleSystemAddColorGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &ParticleSystemAddColorGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)
	args = append(args, color1.JSObject())

	if opts.Color2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Color2.JSObject())
	}

	retVal := p.p.Call("addColorGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// AddColorRemapGradient calls the AddColorRemapGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#addcolorremapgradient
func (p *ParticleSystem) AddColorRemapGradient(gradient float64, min float64, max float64) *IParticleSystem {

	args := make([]interface{}, 0, 3+0)

	args = append(args, gradient)
	args = append(args, min)
	args = append(args, max)

	retVal := p.p.Call("addColorRemapGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// ParticleSystemAddDragGradientOpts contains optional parameters for ParticleSystem.AddDragGradient.
type ParticleSystemAddDragGradientOpts struct {
	Factor2 *float64
}

// AddDragGradient calls the AddDragGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#adddraggradient
func (p *ParticleSystem) AddDragGradient(gradient float64, factor float64, opts *ParticleSystemAddDragGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &ParticleSystemAddDragGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)
	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := p.p.Call("addDragGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// ParticleSystemAddEmitRateGradientOpts contains optional parameters for ParticleSystem.AddEmitRateGradient.
type ParticleSystemAddEmitRateGradientOpts struct {
	Factor2 *float64
}

// AddEmitRateGradient calls the AddEmitRateGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#addemitrategradient
func (p *ParticleSystem) AddEmitRateGradient(gradient float64, factor float64, opts *ParticleSystemAddEmitRateGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &ParticleSystemAddEmitRateGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)
	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := p.p.Call("addEmitRateGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// ParticleSystemAddLifeTimeGradientOpts contains optional parameters for ParticleSystem.AddLifeTimeGradient.
type ParticleSystemAddLifeTimeGradientOpts struct {
	Factor2 *float64
}

// AddLifeTimeGradient calls the AddLifeTimeGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#addlifetimegradient
func (p *ParticleSystem) AddLifeTimeGradient(gradient float64, factor float64, opts *ParticleSystemAddLifeTimeGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &ParticleSystemAddLifeTimeGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)
	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := p.p.Call("addLifeTimeGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// ParticleSystemAddLimitVelocityGradientOpts contains optional parameters for ParticleSystem.AddLimitVelocityGradient.
type ParticleSystemAddLimitVelocityGradientOpts struct {
	Factor2 *float64
}

// AddLimitVelocityGradient calls the AddLimitVelocityGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#addlimitvelocitygradient
func (p *ParticleSystem) AddLimitVelocityGradient(gradient float64, factor float64, opts *ParticleSystemAddLimitVelocityGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &ParticleSystemAddLimitVelocityGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)
	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := p.p.Call("addLimitVelocityGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// AddRampGradient calls the AddRampGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#addrampgradient
func (p *ParticleSystem) AddRampGradient(gradient float64, color *Color3) *ParticleSystem {

	args := make([]interface{}, 0, 2+0)

	args = append(args, gradient)
	args = append(args, color.JSObject())

	retVal := p.p.Call("addRampGradient", args...)
	return ParticleSystemFromJSObject(retVal, p.ctx)
}

// ParticleSystemAddSizeGradientOpts contains optional parameters for ParticleSystem.AddSizeGradient.
type ParticleSystemAddSizeGradientOpts struct {
	Factor2 *float64
}

// AddSizeGradient calls the AddSizeGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#addsizegradient
func (p *ParticleSystem) AddSizeGradient(gradient float64, factor float64, opts *ParticleSystemAddSizeGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &ParticleSystemAddSizeGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)
	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := p.p.Call("addSizeGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// ParticleSystemAddStartSizeGradientOpts contains optional parameters for ParticleSystem.AddStartSizeGradient.
type ParticleSystemAddStartSizeGradientOpts struct {
	Factor2 *float64
}

// AddStartSizeGradient calls the AddStartSizeGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#addstartsizegradient
func (p *ParticleSystem) AddStartSizeGradient(gradient float64, factor float64, opts *ParticleSystemAddStartSizeGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &ParticleSystemAddStartSizeGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)
	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := p.p.Call("addStartSizeGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// ParticleSystemAddVelocityGradientOpts contains optional parameters for ParticleSystem.AddVelocityGradient.
type ParticleSystemAddVelocityGradientOpts struct {
	Factor2 *float64
}

// AddVelocityGradient calls the AddVelocityGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#addvelocitygradient
func (p *ParticleSystem) AddVelocityGradient(gradient float64, factor float64, opts *ParticleSystemAddVelocityGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &ParticleSystemAddVelocityGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)
	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := p.p.Call("addVelocityGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// ParticleSystemAnimateOpts contains optional parameters for ParticleSystem.Animate.
type ParticleSystemAnimateOpts struct {
	PreWarmOnly *bool
}

// Animate calls the Animate method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#animate
func (p *ParticleSystem) Animate(opts *ParticleSystemAnimateOpts) {
	if opts == nil {
		opts = &ParticleSystemAnimateOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.PreWarmOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.PreWarmOnly)
	}

	p.p.Call("animate", args...)
}

// Clone calls the Clone method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#clone
func (p *ParticleSystem) Clone(name string, newEmitter interface{}) *ParticleSystem {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, newEmitter)

	retVal := p.p.Call("clone", args...)
	return ParticleSystemFromJSObject(retVal, p.ctx)
}

// CreateBoxEmitter calls the CreateBoxEmitter method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#createboxemitter
func (p *ParticleSystem) CreateBoxEmitter(direction1 *Vector3, direction2 *Vector3, minEmitBox *Vector3, maxEmitBox *Vector3) *BoxParticleEmitter {

	args := make([]interface{}, 0, 4+0)

	args = append(args, direction1.JSObject())
	args = append(args, direction2.JSObject())
	args = append(args, minEmitBox.JSObject())
	args = append(args, maxEmitBox.JSObject())

	retVal := p.p.Call("createBoxEmitter", args...)
	return BoxParticleEmitterFromJSObject(retVal, p.ctx)
}

// ParticleSystemCreateConeEmitterOpts contains optional parameters for ParticleSystem.CreateConeEmitter.
type ParticleSystemCreateConeEmitterOpts struct {
	Radius *float64
	Angle  *float64
}

// CreateConeEmitter calls the CreateConeEmitter method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#createconeemitter
func (p *ParticleSystem) CreateConeEmitter(opts *ParticleSystemCreateConeEmitterOpts) *ConeParticleEmitter {
	if opts == nil {
		opts = &ParticleSystemCreateConeEmitterOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Radius == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Radius)
	}
	if opts.Angle == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Angle)
	}

	retVal := p.p.Call("createConeEmitter", args...)
	return ConeParticleEmitterFromJSObject(retVal, p.ctx)
}

// ParticleSystemCreateCylinderEmitterOpts contains optional parameters for ParticleSystem.CreateCylinderEmitter.
type ParticleSystemCreateCylinderEmitterOpts struct {
	Radius              *float64
	Height              *float64
	RadiusRange         *float64
	DirectionRandomizer *float64
}

// CreateCylinderEmitter calls the CreateCylinderEmitter method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#createcylinderemitter
func (p *ParticleSystem) CreateCylinderEmitter(opts *ParticleSystemCreateCylinderEmitterOpts) *CylinderParticleEmitter {
	if opts == nil {
		opts = &ParticleSystemCreateCylinderEmitterOpts{}
	}

	args := make([]interface{}, 0, 0+4)

	if opts.Radius == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Radius)
	}
	if opts.Height == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Height)
	}
	if opts.RadiusRange == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RadiusRange)
	}
	if opts.DirectionRandomizer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectionRandomizer)
	}

	retVal := p.p.Call("createCylinderEmitter", args...)
	return CylinderParticleEmitterFromJSObject(retVal, p.ctx)
}

// ParticleSystemCreateDirectedCylinderEmitterOpts contains optional parameters for ParticleSystem.CreateDirectedCylinderEmitter.
type ParticleSystemCreateDirectedCylinderEmitterOpts struct {
	Radius      *float64
	Height      *float64
	RadiusRange *float64
	Direction1  *Vector3
	Direction2  *Vector3
}

// CreateDirectedCylinderEmitter calls the CreateDirectedCylinderEmitter method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#createdirectedcylinderemitter
func (p *ParticleSystem) CreateDirectedCylinderEmitter(opts *ParticleSystemCreateDirectedCylinderEmitterOpts) *CylinderDirectedParticleEmitter {
	if opts == nil {
		opts = &ParticleSystemCreateDirectedCylinderEmitterOpts{}
	}

	args := make([]interface{}, 0, 0+5)

	if opts.Radius == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Radius)
	}
	if opts.Height == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Height)
	}
	if opts.RadiusRange == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RadiusRange)
	}
	if opts.Direction1 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Direction1.JSObject())
	}
	if opts.Direction2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Direction2.JSObject())
	}

	retVal := p.p.Call("createDirectedCylinderEmitter", args...)
	return CylinderDirectedParticleEmitterFromJSObject(retVal, p.ctx)
}

// ParticleSystemCreateDirectedSphereEmitterOpts contains optional parameters for ParticleSystem.CreateDirectedSphereEmitter.
type ParticleSystemCreateDirectedSphereEmitterOpts struct {
	Radius     *float64
	Direction1 *Vector3
	Direction2 *Vector3
}

// CreateDirectedSphereEmitter calls the CreateDirectedSphereEmitter method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#createdirectedsphereemitter
func (p *ParticleSystem) CreateDirectedSphereEmitter(opts *ParticleSystemCreateDirectedSphereEmitterOpts) *SphereDirectedParticleEmitter {
	if opts == nil {
		opts = &ParticleSystemCreateDirectedSphereEmitterOpts{}
	}

	args := make([]interface{}, 0, 0+3)

	if opts.Radius == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Radius)
	}
	if opts.Direction1 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Direction1.JSObject())
	}
	if opts.Direction2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Direction2.JSObject())
	}

	retVal := p.p.Call("createDirectedSphereEmitter", args...)
	return SphereDirectedParticleEmitterFromJSObject(retVal, p.ctx)
}

// ParticleSystemCreateHemisphericEmitterOpts contains optional parameters for ParticleSystem.CreateHemisphericEmitter.
type ParticleSystemCreateHemisphericEmitterOpts struct {
	Radius      *float64
	RadiusRange *float64
}

// CreateHemisphericEmitter calls the CreateHemisphericEmitter method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#createhemisphericemitter
func (p *ParticleSystem) CreateHemisphericEmitter(opts *ParticleSystemCreateHemisphericEmitterOpts) *HemisphericParticleEmitter {
	if opts == nil {
		opts = &ParticleSystemCreateHemisphericEmitterOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Radius == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Radius)
	}
	if opts.RadiusRange == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RadiusRange)
	}

	retVal := p.p.Call("createHemisphericEmitter", args...)
	return HemisphericParticleEmitterFromJSObject(retVal, p.ctx)
}

// CreatePointEmitter calls the CreatePointEmitter method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#createpointemitter
func (p *ParticleSystem) CreatePointEmitter(direction1 *Vector3, direction2 *Vector3) *PointParticleEmitter {

	args := make([]interface{}, 0, 2+0)

	args = append(args, direction1.JSObject())
	args = append(args, direction2.JSObject())

	retVal := p.p.Call("createPointEmitter", args...)
	return PointParticleEmitterFromJSObject(retVal, p.ctx)
}

// ParticleSystemCreateSphereEmitterOpts contains optional parameters for ParticleSystem.CreateSphereEmitter.
type ParticleSystemCreateSphereEmitterOpts struct {
	Radius      *float64
	RadiusRange *float64
}

// CreateSphereEmitter calls the CreateSphereEmitter method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#createsphereemitter
func (p *ParticleSystem) CreateSphereEmitter(opts *ParticleSystemCreateSphereEmitterOpts) *SphereParticleEmitter {
	if opts == nil {
		opts = &ParticleSystemCreateSphereEmitterOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Radius == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Radius)
	}
	if opts.RadiusRange == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RadiusRange)
	}

	retVal := p.p.Call("createSphereEmitter", args...)
	return SphereParticleEmitterFromJSObject(retVal, p.ctx)
}

// ParticleSystemDisposeOpts contains optional parameters for ParticleSystem.Dispose.
type ParticleSystemDisposeOpts struct {
	DisposeTexture *bool
}

// Dispose calls the Dispose method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#dispose
func (p *ParticleSystem) Dispose(opts *ParticleSystemDisposeOpts) {
	if opts == nil {
		opts = &ParticleSystemDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.DisposeTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DisposeTexture)
	}

	p.p.Call("dispose", args...)
}

// GetAlphaRemapGradients calls the GetAlphaRemapGradients method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#getalpharemapgradients
func (p *ParticleSystem) GetAlphaRemapGradients() []*FactorGradient {

	retVal := p.p.Call("getAlphaRemapGradients")
	return retVal
}

// GetAngularSpeedGradients calls the GetAngularSpeedGradients method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#getangularspeedgradients
func (p *ParticleSystem) GetAngularSpeedGradients() []*FactorGradient {

	retVal := p.p.Call("getAngularSpeedGradients")
	return retVal
}

// GetCapacity calls the GetCapacity method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#getcapacity
func (p *ParticleSystem) GetCapacity() float64 {

	retVal := p.p.Call("getCapacity")
	return retVal.Float()
}

// GetClassName calls the GetClassName method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#getclassname
func (p *ParticleSystem) GetClassName() string {

	retVal := p.p.Call("getClassName")
	return retVal.String()
}

// GetColorGradients calls the GetColorGradients method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#getcolorgradients
func (p *ParticleSystem) GetColorGradients() []*ColorGradient {

	retVal := p.p.Call("getColorGradients")
	return retVal
}

// GetColorRemapGradients calls the GetColorRemapGradients method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#getcolorremapgradients
func (p *ParticleSystem) GetColorRemapGradients() []*FactorGradient {

	retVal := p.p.Call("getColorRemapGradients")
	return retVal
}

// GetDragGradients calls the GetDragGradients method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#getdraggradients
func (p *ParticleSystem) GetDragGradients() []*FactorGradient {

	retVal := p.p.Call("getDragGradients")
	return retVal
}

// GetEmitRateGradients calls the GetEmitRateGradients method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#getemitrategradients
func (p *ParticleSystem) GetEmitRateGradients() []*FactorGradient {

	retVal := p.p.Call("getEmitRateGradients")
	return retVal
}

// GetLifeTimeGradients calls the GetLifeTimeGradients method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#getlifetimegradients
func (p *ParticleSystem) GetLifeTimeGradients() []*FactorGradient {

	retVal := p.p.Call("getLifeTimeGradients")
	return retVal
}

// GetLimitVelocityGradients calls the GetLimitVelocityGradients method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#getlimitvelocitygradients
func (p *ParticleSystem) GetLimitVelocityGradients() []*FactorGradient {

	retVal := p.p.Call("getLimitVelocityGradients")
	return retVal
}

// GetRampGradients calls the GetRampGradients method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#getrampgradients
func (p *ParticleSystem) GetRampGradients() []*Color3Gradient {

	retVal := p.p.Call("getRampGradients")
	return retVal
}

// GetScene calls the GetScene method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#getscene
func (p *ParticleSystem) GetScene() *Scene {

	retVal := p.p.Call("getScene")
	return SceneFromJSObject(retVal, p.ctx)
}

// GetSizeGradients calls the GetSizeGradients method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#getsizegradients
func (p *ParticleSystem) GetSizeGradients() []*FactorGradient {

	retVal := p.p.Call("getSizeGradients")
	return retVal
}

// GetStartSizeGradients calls the GetStartSizeGradients method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#getstartsizegradients
func (p *ParticleSystem) GetStartSizeGradients() []*FactorGradient {

	retVal := p.p.Call("getStartSizeGradients")
	return retVal
}

// GetVelocityGradients calls the GetVelocityGradients method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#getvelocitygradients
func (p *ParticleSystem) GetVelocityGradients() []*FactorGradient {

	retVal := p.p.Call("getVelocityGradients")
	return retVal
}

// IsAlive calls the IsAlive method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#isalive
func (p *ParticleSystem) IsAlive() bool {

	retVal := p.p.Call("isAlive")
	return retVal.Bool()
}

// IsReady calls the IsReady method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#isready
func (p *ParticleSystem) IsReady() bool {

	retVal := p.p.Call("isReady")
	return retVal.Bool()
}

// IsStarted calls the IsStarted method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#isstarted
func (p *ParticleSystem) IsStarted() bool {

	retVal := p.p.Call("isStarted")
	return retVal.Bool()
}

// ParticleSystemParseOpts contains optional parameters for ParticleSystem.Parse.
type ParticleSystemParseOpts struct {
	DoNotStart *bool
}

// Parse calls the Parse method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#parse
func (p *ParticleSystem) Parse(parsedParticleSystem interface{}, scene *Scene, rootUrl string, opts *ParticleSystemParseOpts) *ParticleSystem {
	if opts == nil {
		opts = &ParticleSystemParseOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, parsedParticleSystem)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	if opts.DoNotStart == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DoNotStart)
	}

	retVal := p.p.Call("Parse", args...)
	return ParticleSystemFromJSObject(retVal, p.ctx)
}

// Rebuild calls the Rebuild method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#rebuild
func (p *ParticleSystem) Rebuild() {

	p.p.Call("rebuild")
}

// RemoveAlphaRemapGradient calls the RemoveAlphaRemapGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#removealpharemapgradient
func (p *ParticleSystem) RemoveAlphaRemapGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := p.p.Call("removeAlphaRemapGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// RemoveAngularSpeedGradient calls the RemoveAngularSpeedGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#removeangularspeedgradient
func (p *ParticleSystem) RemoveAngularSpeedGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := p.p.Call("removeAngularSpeedGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// RemoveColorGradient calls the RemoveColorGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#removecolorgradient
func (p *ParticleSystem) RemoveColorGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := p.p.Call("removeColorGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// RemoveColorRemapGradient calls the RemoveColorRemapGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#removecolorremapgradient
func (p *ParticleSystem) RemoveColorRemapGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := p.p.Call("removeColorRemapGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// RemoveDragGradient calls the RemoveDragGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#removedraggradient
func (p *ParticleSystem) RemoveDragGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := p.p.Call("removeDragGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// RemoveEmitRateGradient calls the RemoveEmitRateGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#removeemitrategradient
func (p *ParticleSystem) RemoveEmitRateGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := p.p.Call("removeEmitRateGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// RemoveLifeTimeGradient calls the RemoveLifeTimeGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#removelifetimegradient
func (p *ParticleSystem) RemoveLifeTimeGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := p.p.Call("removeLifeTimeGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// RemoveLimitVelocityGradient calls the RemoveLimitVelocityGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#removelimitvelocitygradient
func (p *ParticleSystem) RemoveLimitVelocityGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := p.p.Call("removeLimitVelocityGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// RemoveRampGradient calls the RemoveRampGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#removerampgradient
func (p *ParticleSystem) RemoveRampGradient(gradient float64) *ParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := p.p.Call("removeRampGradient", args...)
	return ParticleSystemFromJSObject(retVal, p.ctx)
}

// RemoveSizeGradient calls the RemoveSizeGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#removesizegradient
func (p *ParticleSystem) RemoveSizeGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := p.p.Call("removeSizeGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// RemoveStartSizeGradient calls the RemoveStartSizeGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#removestartsizegradient
func (p *ParticleSystem) RemoveStartSizeGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := p.p.Call("removeStartSizeGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// RemoveVelocityGradient calls the RemoveVelocityGradient method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#removevelocitygradient
func (p *ParticleSystem) RemoveVelocityGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := p.p.Call("removeVelocityGradient", args...)
	return IParticleSystemFromJSObject(retVal, p.ctx)
}

// Render calls the Render method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#render
func (p *ParticleSystem) Render() float64 {

	retVal := p.p.Call("render")
	return retVal.Float()
}

// Reset calls the Reset method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#reset
func (p *ParticleSystem) Reset() {

	p.p.Call("reset")
}

// Serialize calls the Serialize method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#serialize
func (p *ParticleSystem) Serialize() interface{} {

	retVal := p.p.Call("serialize")
	return retVal
}

// ParticleSystemStartOpts contains optional parameters for ParticleSystem.Start.
type ParticleSystemStartOpts struct {
	Delay *float64
}

// Start calls the Start method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#start
func (p *ParticleSystem) Start(opts *ParticleSystemStartOpts) {
	if opts == nil {
		opts = &ParticleSystemStartOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Delay == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Delay)
	}

	p.p.Call("start", args...)
}

// ParticleSystemStopOpts contains optional parameters for ParticleSystem.Stop.
type ParticleSystemStopOpts struct {
	StopSubEmitters *bool
}

// Stop calls the Stop method on the ParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#stop
func (p *ParticleSystem) Stop(opts *ParticleSystemStopOpts) {
	if opts == nil {
		opts = &ParticleSystemStopOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.StopSubEmitters == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.StopSubEmitters)
	}

	p.p.Call("stop", args...)
}

/*

// ActiveSubSystems returns the ActiveSubSystems property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#activesubsystems
func (p *ParticleSystem) ActiveSubSystems(activeSubSystems []*ParticleSystem) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(activeSubSystems)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetActiveSubSystems sets the ActiveSubSystems property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#activesubsystems
func (p *ParticleSystem) SetActiveSubSystems(activeSubSystems []*ParticleSystem) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(activeSubSystems)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// Animations returns the Animations property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#animations
func (p *ParticleSystem) Animations(animations *Animation) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(animations.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#animations
func (p *ParticleSystem) SetAnimations(animations *Animation) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(animations.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// BILLBOARDMODE_ALL returns the BILLBOARDMODE_ALL property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#billboardmode_all
func (p *ParticleSystem) BILLBOARDMODE_ALL(BILLBOARDMODE_ALL float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BILLBOARDMODE_ALL)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetBILLBOARDMODE_ALL sets the BILLBOARDMODE_ALL property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#billboardmode_all
func (p *ParticleSystem) SetBILLBOARDMODE_ALL(BILLBOARDMODE_ALL float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BILLBOARDMODE_ALL)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// BILLBOARDMODE_STRETCHED returns the BILLBOARDMODE_STRETCHED property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#billboardmode_stretched
func (p *ParticleSystem) BILLBOARDMODE_STRETCHED(BILLBOARDMODE_STRETCHED float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BILLBOARDMODE_STRETCHED)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetBILLBOARDMODE_STRETCHED sets the BILLBOARDMODE_STRETCHED property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#billboardmode_stretched
func (p *ParticleSystem) SetBILLBOARDMODE_STRETCHED(BILLBOARDMODE_STRETCHED float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BILLBOARDMODE_STRETCHED)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// BILLBOARDMODE_Y returns the BILLBOARDMODE_Y property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#billboardmode_y
func (p *ParticleSystem) BILLBOARDMODE_Y(BILLBOARDMODE_Y float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BILLBOARDMODE_Y)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetBILLBOARDMODE_Y sets the BILLBOARDMODE_Y property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#billboardmode_y
func (p *ParticleSystem) SetBILLBOARDMODE_Y(BILLBOARDMODE_Y float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BILLBOARDMODE_Y)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// BLENDMODE_ADD returns the BLENDMODE_ADD property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#blendmode_add
func (p *ParticleSystem) BLENDMODE_ADD(BLENDMODE_ADD float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BLENDMODE_ADD)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetBLENDMODE_ADD sets the BLENDMODE_ADD property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#blendmode_add
func (p *ParticleSystem) SetBLENDMODE_ADD(BLENDMODE_ADD float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BLENDMODE_ADD)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// BLENDMODE_MULTIPLY returns the BLENDMODE_MULTIPLY property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#blendmode_multiply
func (p *ParticleSystem) BLENDMODE_MULTIPLY(BLENDMODE_MULTIPLY float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BLENDMODE_MULTIPLY)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetBLENDMODE_MULTIPLY sets the BLENDMODE_MULTIPLY property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#blendmode_multiply
func (p *ParticleSystem) SetBLENDMODE_MULTIPLY(BLENDMODE_MULTIPLY float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BLENDMODE_MULTIPLY)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// BLENDMODE_MULTIPLYADD returns the BLENDMODE_MULTIPLYADD property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#blendmode_multiplyadd
func (p *ParticleSystem) BLENDMODE_MULTIPLYADD(BLENDMODE_MULTIPLYADD float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BLENDMODE_MULTIPLYADD)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetBLENDMODE_MULTIPLYADD sets the BLENDMODE_MULTIPLYADD property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#blendmode_multiplyadd
func (p *ParticleSystem) SetBLENDMODE_MULTIPLYADD(BLENDMODE_MULTIPLYADD float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BLENDMODE_MULTIPLYADD)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// BLENDMODE_ONEONE returns the BLENDMODE_ONEONE property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#blendmode_oneone
func (p *ParticleSystem) BLENDMODE_ONEONE(BLENDMODE_ONEONE float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BLENDMODE_ONEONE)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetBLENDMODE_ONEONE sets the BLENDMODE_ONEONE property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#blendmode_oneone
func (p *ParticleSystem) SetBLENDMODE_ONEONE(BLENDMODE_ONEONE float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BLENDMODE_ONEONE)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// BLENDMODE_STANDARD returns the BLENDMODE_STANDARD property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#blendmode_standard
func (p *ParticleSystem) BLENDMODE_STANDARD(BLENDMODE_STANDARD float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BLENDMODE_STANDARD)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetBLENDMODE_STANDARD sets the BLENDMODE_STANDARD property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#blendmode_standard
func (p *ParticleSystem) SetBLENDMODE_STANDARD(BLENDMODE_STANDARD float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(BLENDMODE_STANDARD)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// BeginAnimationFrom returns the BeginAnimationFrom property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#beginanimationfrom
func (p *ParticleSystem) BeginAnimationFrom(beginAnimationFrom float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(beginAnimationFrom)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetBeginAnimationFrom sets the BeginAnimationFrom property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#beginanimationfrom
func (p *ParticleSystem) SetBeginAnimationFrom(beginAnimationFrom float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(beginAnimationFrom)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// BeginAnimationLoop returns the BeginAnimationLoop property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#beginanimationloop
func (p *ParticleSystem) BeginAnimationLoop(beginAnimationLoop bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(beginAnimationLoop)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetBeginAnimationLoop sets the BeginAnimationLoop property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#beginanimationloop
func (p *ParticleSystem) SetBeginAnimationLoop(beginAnimationLoop bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(beginAnimationLoop)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// BeginAnimationOnStart returns the BeginAnimationOnStart property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#beginanimationonstart
func (p *ParticleSystem) BeginAnimationOnStart(beginAnimationOnStart bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(beginAnimationOnStart)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetBeginAnimationOnStart sets the BeginAnimationOnStart property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#beginanimationonstart
func (p *ParticleSystem) SetBeginAnimationOnStart(beginAnimationOnStart bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(beginAnimationOnStart)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// BeginAnimationTo returns the BeginAnimationTo property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#beginanimationto
func (p *ParticleSystem) BeginAnimationTo(beginAnimationTo float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(beginAnimationTo)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetBeginAnimationTo sets the BeginAnimationTo property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#beginanimationto
func (p *ParticleSystem) SetBeginAnimationTo(beginAnimationTo float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(beginAnimationTo)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// BillboardMode returns the BillboardMode property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#billboardmode
func (p *ParticleSystem) BillboardMode(billboardMode float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(billboardMode)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetBillboardMode sets the BillboardMode property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#billboardmode
func (p *ParticleSystem) SetBillboardMode(billboardMode float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(billboardMode)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// BlendMode returns the BlendMode property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#blendmode
func (p *ParticleSystem) BlendMode(blendMode float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(blendMode)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetBlendMode sets the BlendMode property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#blendmode
func (p *ParticleSystem) SetBlendMode(blendMode float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(blendMode)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// Color1 returns the Color1 property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#color1
func (p *ParticleSystem) Color1(color1 *Color4) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(color1.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetColor1 sets the Color1 property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#color1
func (p *ParticleSystem) SetColor1(color1 *Color4) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(color1.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// Color2 returns the Color2 property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#color2
func (p *ParticleSystem) Color2(color2 *Color4) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(color2.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetColor2 sets the Color2 property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#color2
func (p *ParticleSystem) SetColor2(color2 *Color4) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(color2.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// ColorDead returns the ColorDead property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#colordead
func (p *ParticleSystem) ColorDead(colorDead *Color4) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(colorDead.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetColorDead sets the ColorDead property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#colordead
func (p *ParticleSystem) SetColorDead(colorDead *Color4) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(colorDead.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// CustomShader returns the CustomShader property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#customshader
func (p *ParticleSystem) CustomShader(customShader interface{}) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(customShader)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetCustomShader sets the CustomShader property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#customshader
func (p *ParticleSystem) SetCustomShader(customShader interface{}) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(customShader)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// Direction1 returns the Direction1 property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#direction1
func (p *ParticleSystem) Direction1(direction1 *Vector3) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(direction1.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetDirection1 sets the Direction1 property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#direction1
func (p *ParticleSystem) SetDirection1(direction1 *Vector3) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(direction1.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// Direction2 returns the Direction2 property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#direction2
func (p *ParticleSystem) Direction2(direction2 *Vector3) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(direction2.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetDirection2 sets the Direction2 property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#direction2
func (p *ParticleSystem) SetDirection2(direction2 *Vector3) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(direction2.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// DisposeOnStop returns the DisposeOnStop property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#disposeonstop
func (p *ParticleSystem) DisposeOnStop(disposeOnStop bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(disposeOnStop)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetDisposeOnStop sets the DisposeOnStop property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#disposeonstop
func (p *ParticleSystem) SetDisposeOnStop(disposeOnStop bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(disposeOnStop)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// EmitRate returns the EmitRate property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#emitrate
func (p *ParticleSystem) EmitRate(emitRate float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(emitRate)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetEmitRate sets the EmitRate property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#emitrate
func (p *ParticleSystem) SetEmitRate(emitRate float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(emitRate)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// Emitter returns the Emitter property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#emitter
func (p *ParticleSystem) Emitter(emitter *AbstractMesh) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(emitter.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetEmitter sets the Emitter property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#emitter
func (p *ParticleSystem) SetEmitter(emitter *AbstractMesh) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(emitter.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// EndSpriteCellID returns the EndSpriteCellID property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#endspritecellid
func (p *ParticleSystem) EndSpriteCellID(endSpriteCellID float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(endSpriteCellID)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetEndSpriteCellID sets the EndSpriteCellID property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#endspritecellid
func (p *ParticleSystem) SetEndSpriteCellID(endSpriteCellID float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(endSpriteCellID)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// ForceDepthWrite returns the ForceDepthWrite property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#forcedepthwrite
func (p *ParticleSystem) ForceDepthWrite(forceDepthWrite bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(forceDepthWrite)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetForceDepthWrite sets the ForceDepthWrite property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#forcedepthwrite
func (p *ParticleSystem) SetForceDepthWrite(forceDepthWrite bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(forceDepthWrite)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// Gravity returns the Gravity property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#gravity
func (p *ParticleSystem) Gravity(gravity *Vector3) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(gravity.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetGravity sets the Gravity property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#gravity
func (p *ParticleSystem) SetGravity(gravity *Vector3) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(gravity.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// Id returns the Id property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#id
func (p *ParticleSystem) Id(id string) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(id)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetId sets the Id property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#id
func (p *ParticleSystem) SetId(id string) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(id)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// ImageProcessingConfiguration returns the ImageProcessingConfiguration property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#imageprocessingconfiguration
func (p *ParticleSystem) ImageProcessingConfiguration(imageProcessingConfiguration *ImageProcessingConfiguration) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(imageProcessingConfiguration.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetImageProcessingConfiguration sets the ImageProcessingConfiguration property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#imageprocessingconfiguration
func (p *ParticleSystem) SetImageProcessingConfiguration(imageProcessingConfiguration *ImageProcessingConfiguration) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(imageProcessingConfiguration.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// IsAnimationSheetEnabled returns the IsAnimationSheetEnabled property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#isanimationsheetenabled
func (p *ParticleSystem) IsAnimationSheetEnabled(isAnimationSheetEnabled bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(isAnimationSheetEnabled)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetIsAnimationSheetEnabled sets the IsAnimationSheetEnabled property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#isanimationsheetenabled
func (p *ParticleSystem) SetIsAnimationSheetEnabled(isAnimationSheetEnabled bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(isAnimationSheetEnabled)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// IsBillboardBased returns the IsBillboardBased property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#isbillboardbased
func (p *ParticleSystem) IsBillboardBased(isBillboardBased bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(isBillboardBased)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetIsBillboardBased sets the IsBillboardBased property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#isbillboardbased
func (p *ParticleSystem) SetIsBillboardBased(isBillboardBased bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(isBillboardBased)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// LayerMask returns the LayerMask property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#layermask
func (p *ParticleSystem) LayerMask(layerMask float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(layerMask)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetLayerMask sets the LayerMask property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#layermask
func (p *ParticleSystem) SetLayerMask(layerMask float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(layerMask)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// LimitVelocityDamping returns the LimitVelocityDamping property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#limitvelocitydamping
func (p *ParticleSystem) LimitVelocityDamping(limitVelocityDamping float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(limitVelocityDamping)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetLimitVelocityDamping sets the LimitVelocityDamping property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#limitvelocitydamping
func (p *ParticleSystem) SetLimitVelocityDamping(limitVelocityDamping float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(limitVelocityDamping)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// ManualEmitCount returns the ManualEmitCount property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#manualemitcount
func (p *ParticleSystem) ManualEmitCount(manualEmitCount float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(manualEmitCount)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetManualEmitCount sets the ManualEmitCount property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#manualemitcount
func (p *ParticleSystem) SetManualEmitCount(manualEmitCount float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(manualEmitCount)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MaxAngularSpeed returns the MaxAngularSpeed property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxangularspeed
func (p *ParticleSystem) MaxAngularSpeed(maxAngularSpeed float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxAngularSpeed)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMaxAngularSpeed sets the MaxAngularSpeed property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxangularspeed
func (p *ParticleSystem) SetMaxAngularSpeed(maxAngularSpeed float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxAngularSpeed)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MaxEmitBox returns the MaxEmitBox property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxemitbox
func (p *ParticleSystem) MaxEmitBox(maxEmitBox *Vector3) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxEmitBox.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMaxEmitBox sets the MaxEmitBox property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxemitbox
func (p *ParticleSystem) SetMaxEmitBox(maxEmitBox *Vector3) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxEmitBox.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MaxEmitPower returns the MaxEmitPower property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxemitpower
func (p *ParticleSystem) MaxEmitPower(maxEmitPower float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxEmitPower)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMaxEmitPower sets the MaxEmitPower property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxemitpower
func (p *ParticleSystem) SetMaxEmitPower(maxEmitPower float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxEmitPower)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MaxInitialRotation returns the MaxInitialRotation property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxinitialrotation
func (p *ParticleSystem) MaxInitialRotation(maxInitialRotation float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxInitialRotation)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMaxInitialRotation sets the MaxInitialRotation property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxinitialrotation
func (p *ParticleSystem) SetMaxInitialRotation(maxInitialRotation float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxInitialRotation)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MaxLifeTime returns the MaxLifeTime property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxlifetime
func (p *ParticleSystem) MaxLifeTime(maxLifeTime float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxLifeTime)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMaxLifeTime sets the MaxLifeTime property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxlifetime
func (p *ParticleSystem) SetMaxLifeTime(maxLifeTime float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxLifeTime)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MaxScaleX returns the MaxScaleX property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxscalex
func (p *ParticleSystem) MaxScaleX(maxScaleX float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxScaleX)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMaxScaleX sets the MaxScaleX property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxscalex
func (p *ParticleSystem) SetMaxScaleX(maxScaleX float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxScaleX)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MaxScaleY returns the MaxScaleY property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxscaley
func (p *ParticleSystem) MaxScaleY(maxScaleY float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxScaleY)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMaxScaleY sets the MaxScaleY property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxscaley
func (p *ParticleSystem) SetMaxScaleY(maxScaleY float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxScaleY)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MaxSize returns the MaxSize property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxsize
func (p *ParticleSystem) MaxSize(maxSize float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxSize)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMaxSize sets the MaxSize property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#maxsize
func (p *ParticleSystem) SetMaxSize(maxSize float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(maxSize)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MinAngularSpeed returns the MinAngularSpeed property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#minangularspeed
func (p *ParticleSystem) MinAngularSpeed(minAngularSpeed float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minAngularSpeed)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMinAngularSpeed sets the MinAngularSpeed property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#minangularspeed
func (p *ParticleSystem) SetMinAngularSpeed(minAngularSpeed float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minAngularSpeed)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MinEmitBox returns the MinEmitBox property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#minemitbox
func (p *ParticleSystem) MinEmitBox(minEmitBox *Vector3) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minEmitBox.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMinEmitBox sets the MinEmitBox property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#minemitbox
func (p *ParticleSystem) SetMinEmitBox(minEmitBox *Vector3) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minEmitBox.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MinEmitPower returns the MinEmitPower property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#minemitpower
func (p *ParticleSystem) MinEmitPower(minEmitPower float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minEmitPower)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMinEmitPower sets the MinEmitPower property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#minemitpower
func (p *ParticleSystem) SetMinEmitPower(minEmitPower float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minEmitPower)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MinInitialRotation returns the MinInitialRotation property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#mininitialrotation
func (p *ParticleSystem) MinInitialRotation(minInitialRotation float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minInitialRotation)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMinInitialRotation sets the MinInitialRotation property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#mininitialrotation
func (p *ParticleSystem) SetMinInitialRotation(minInitialRotation float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minInitialRotation)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MinLifeTime returns the MinLifeTime property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#minlifetime
func (p *ParticleSystem) MinLifeTime(minLifeTime float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minLifeTime)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMinLifeTime sets the MinLifeTime property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#minlifetime
func (p *ParticleSystem) SetMinLifeTime(minLifeTime float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minLifeTime)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MinScaleX returns the MinScaleX property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#minscalex
func (p *ParticleSystem) MinScaleX(minScaleX float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minScaleX)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMinScaleX sets the MinScaleX property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#minscalex
func (p *ParticleSystem) SetMinScaleX(minScaleX float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minScaleX)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MinScaleY returns the MinScaleY property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#minscaley
func (p *ParticleSystem) MinScaleY(minScaleY float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minScaleY)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMinScaleY sets the MinScaleY property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#minscaley
func (p *ParticleSystem) SetMinScaleY(minScaleY float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minScaleY)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// MinSize returns the MinSize property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#minsize
func (p *ParticleSystem) MinSize(minSize float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minSize)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetMinSize sets the MinSize property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#minsize
func (p *ParticleSystem) SetMinSize(minSize float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(minSize)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#name
func (p *ParticleSystem) Name(name string) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(name)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#name
func (p *ParticleSystem) SetName(name string) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(name)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// NoiseStrength returns the NoiseStrength property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#noisestrength
func (p *ParticleSystem) NoiseStrength(noiseStrength *Vector3) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(noiseStrength.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetNoiseStrength sets the NoiseStrength property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#noisestrength
func (p *ParticleSystem) SetNoiseStrength(noiseStrength *Vector3) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(noiseStrength.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// NoiseTexture returns the NoiseTexture property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#noisetexture
func (p *ParticleSystem) NoiseTexture(noiseTexture *ProceduralTexture) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(noiseTexture.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetNoiseTexture sets the NoiseTexture property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#noisetexture
func (p *ParticleSystem) SetNoiseTexture(noiseTexture *ProceduralTexture) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(noiseTexture.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// OnAnimationEnd returns the OnAnimationEnd property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#onanimationend
func (p *ParticleSystem) OnAnimationEnd(onAnimationEnd func()) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onAnimationEnd(); return nil}))
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetOnAnimationEnd sets the OnAnimationEnd property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#onanimationend
func (p *ParticleSystem) SetOnAnimationEnd(onAnimationEnd func()) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onAnimationEnd(); return nil}))
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#ondispose
func (p *ParticleSystem) OnDispose(onDispose func()) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#ondispose
func (p *ParticleSystem) SetOnDispose(onDispose func()) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#ondisposeobservable
func (p *ParticleSystem) OnDisposeObservable(onDisposeObservable *Observable) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(onDisposeObservable.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#ondisposeobservable
func (p *ParticleSystem) SetOnDisposeObservable(onDisposeObservable *Observable) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(onDisposeObservable.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// ParticleEmitterType returns the ParticleEmitterType property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#particleemittertype
func (p *ParticleSystem) ParticleEmitterType(particleEmitterType *IParticleEmitterType) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(particleEmitterType.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetParticleEmitterType sets the ParticleEmitterType property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#particleemittertype
func (p *ParticleSystem) SetParticleEmitterType(particleEmitterType *IParticleEmitterType) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(particleEmitterType.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// ParticleTexture returns the ParticleTexture property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#particletexture
func (p *ParticleSystem) ParticleTexture(particleTexture *Texture) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(particleTexture.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetParticleTexture sets the ParticleTexture property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#particletexture
func (p *ParticleSystem) SetParticleTexture(particleTexture *Texture) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(particleTexture.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// Particles returns the Particles property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#particles
func (p *ParticleSystem) Particles(particles *Particle) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(particles.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetParticles sets the Particles property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#particles
func (p *ParticleSystem) SetParticles(particles *Particle) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(particles.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// PreWarmCycles returns the PreWarmCycles property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#prewarmcycles
func (p *ParticleSystem) PreWarmCycles(preWarmCycles float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(preWarmCycles)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetPreWarmCycles sets the PreWarmCycles property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#prewarmcycles
func (p *ParticleSystem) SetPreWarmCycles(preWarmCycles float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(preWarmCycles)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// PreWarmStepOffset returns the PreWarmStepOffset property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#prewarmstepoffset
func (p *ParticleSystem) PreWarmStepOffset(preWarmStepOffset float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(preWarmStepOffset)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetPreWarmStepOffset sets the PreWarmStepOffset property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#prewarmstepoffset
func (p *ParticleSystem) SetPreWarmStepOffset(preWarmStepOffset float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(preWarmStepOffset)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// PreventAutoStart returns the PreventAutoStart property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#preventautostart
func (p *ParticleSystem) PreventAutoStart(preventAutoStart bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(preventAutoStart)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetPreventAutoStart sets the PreventAutoStart property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#preventautostart
func (p *ParticleSystem) SetPreventAutoStart(preventAutoStart bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(preventAutoStart)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// RecycleParticle returns the RecycleParticle property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#recycleparticle
func (p *ParticleSystem) RecycleParticle(recycleParticle func()) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {recycleParticle(); return nil}))
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetRecycleParticle sets the RecycleParticle property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#recycleparticle
func (p *ParticleSystem) SetRecycleParticle(recycleParticle func()) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {recycleParticle(); return nil}))
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// RenderingGroupId returns the RenderingGroupId property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#renderinggroupid
func (p *ParticleSystem) RenderingGroupId(renderingGroupId float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(renderingGroupId)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetRenderingGroupId sets the RenderingGroupId property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#renderinggroupid
func (p *ParticleSystem) SetRenderingGroupId(renderingGroupId float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(renderingGroupId)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SpriteCellChangeSpeed returns the SpriteCellChangeSpeed property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#spritecellchangespeed
func (p *ParticleSystem) SpriteCellChangeSpeed(spriteCellChangeSpeed float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(spriteCellChangeSpeed)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetSpriteCellChangeSpeed sets the SpriteCellChangeSpeed property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#spritecellchangespeed
func (p *ParticleSystem) SetSpriteCellChangeSpeed(spriteCellChangeSpeed float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(spriteCellChangeSpeed)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SpriteCellHeight returns the SpriteCellHeight property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#spritecellheight
func (p *ParticleSystem) SpriteCellHeight(spriteCellHeight float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(spriteCellHeight)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetSpriteCellHeight sets the SpriteCellHeight property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#spritecellheight
func (p *ParticleSystem) SetSpriteCellHeight(spriteCellHeight float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(spriteCellHeight)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SpriteCellWidth returns the SpriteCellWidth property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#spritecellwidth
func (p *ParticleSystem) SpriteCellWidth(spriteCellWidth float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(spriteCellWidth)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetSpriteCellWidth sets the SpriteCellWidth property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#spritecellwidth
func (p *ParticleSystem) SetSpriteCellWidth(spriteCellWidth float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(spriteCellWidth)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SpriteRandomStartCell returns the SpriteRandomStartCell property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#spriterandomstartcell
func (p *ParticleSystem) SpriteRandomStartCell(spriteRandomStartCell bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(spriteRandomStartCell)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetSpriteRandomStartCell sets the SpriteRandomStartCell property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#spriterandomstartcell
func (p *ParticleSystem) SetSpriteRandomStartCell(spriteRandomStartCell bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(spriteRandomStartCell)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// StartDelay returns the StartDelay property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#startdelay
func (p *ParticleSystem) StartDelay(startDelay float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(startDelay)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetStartDelay sets the StartDelay property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#startdelay
func (p *ParticleSystem) SetStartDelay(startDelay float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(startDelay)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// StartDirectionFunction returns the StartDirectionFunction property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#startdirectionfunction
func (p *ParticleSystem) StartDirectionFunction(startDirectionFunction func()) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {startDirectionFunction(); return nil}))
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetStartDirectionFunction sets the StartDirectionFunction property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#startdirectionfunction
func (p *ParticleSystem) SetStartDirectionFunction(startDirectionFunction func()) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {startDirectionFunction(); return nil}))
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// StartPositionFunction returns the StartPositionFunction property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#startpositionfunction
func (p *ParticleSystem) StartPositionFunction(startPositionFunction func()) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {startPositionFunction(); return nil}))
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetStartPositionFunction sets the StartPositionFunction property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#startpositionfunction
func (p *ParticleSystem) SetStartPositionFunction(startPositionFunction func()) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {startPositionFunction(); return nil}))
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// StartSpriteCellID returns the StartSpriteCellID property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#startspritecellid
func (p *ParticleSystem) StartSpriteCellID(startSpriteCellID float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(startSpriteCellID)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetStartSpriteCellID sets the StartSpriteCellID property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#startspritecellid
func (p *ParticleSystem) SetStartSpriteCellID(startSpriteCellID float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(startSpriteCellID)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SubEmitters returns the SubEmitters property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#subemitters
func (p *ParticleSystem) SubEmitters(subEmitters []*ParticleSystem) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(subEmitters)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetSubEmitters sets the SubEmitters property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#subemitters
func (p *ParticleSystem) SetSubEmitters(subEmitters []*ParticleSystem) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(subEmitters)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// TargetStopDuration returns the TargetStopDuration property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#targetstopduration
func (p *ParticleSystem) TargetStopDuration(targetStopDuration float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(targetStopDuration)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetTargetStopDuration sets the TargetStopDuration property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#targetstopduration
func (p *ParticleSystem) SetTargetStopDuration(targetStopDuration float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(targetStopDuration)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// TextureMask returns the TextureMask property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#texturemask
func (p *ParticleSystem) TextureMask(textureMask *Color4) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(textureMask.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetTextureMask sets the TextureMask property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#texturemask
func (p *ParticleSystem) SetTextureMask(textureMask *Color4) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(textureMask.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// TranslationPivot returns the TranslationPivot property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#translationpivot
func (p *ParticleSystem) TranslationPivot(translationPivot *Vector2) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(translationPivot.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetTranslationPivot sets the TranslationPivot property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#translationpivot
func (p *ParticleSystem) SetTranslationPivot(translationPivot *Vector2) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(translationPivot.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// UpdateFunction returns the UpdateFunction property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#updatefunction
func (p *ParticleSystem) UpdateFunction(updateFunction func()) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {updateFunction(); return nil}))
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetUpdateFunction sets the UpdateFunction property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#updatefunction
func (p *ParticleSystem) SetUpdateFunction(updateFunction func()) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {updateFunction(); return nil}))
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// UpdateSpeed returns the UpdateSpeed property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#updatespeed
func (p *ParticleSystem) UpdateSpeed(updateSpeed float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(updateSpeed)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetUpdateSpeed sets the UpdateSpeed property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#updatespeed
func (p *ParticleSystem) SetUpdateSpeed(updateSpeed float64) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(updateSpeed)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// UseRampGradients returns the UseRampGradients property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#userampgradients
func (p *ParticleSystem) UseRampGradients(useRampGradients bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(useRampGradients)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetUseRampGradients sets the UseRampGradients property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#userampgradients
func (p *ParticleSystem) SetUseRampGradients(useRampGradients bool) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(useRampGradients)
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// WorldOffset returns the WorldOffset property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#worldoffset
func (p *ParticleSystem) WorldOffset(worldOffset *Vector3) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(worldOffset.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

// SetWorldOffset sets the WorldOffset property of class ParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesystem#worldoffset
func (p *ParticleSystem) SetWorldOffset(worldOffset *Vector3) *ParticleSystem {
	p := ba.ctx.Get("ParticleSystem").New(worldOffset.JSObject())
	return ParticleSystemFromJSObject(p, ba.ctx)
}

*/
