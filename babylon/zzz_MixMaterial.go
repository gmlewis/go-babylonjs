// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MixMaterial represents a babylon.js MixMaterial.
//
type MixMaterial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MixMaterial) JSObject() js.Value { return m.p }

// MixMaterial returns a MixMaterial JavaScript class.
func (ba *Babylon) MixMaterial() *MixMaterial {
	p := ba.ctx.Get("MixMaterial")
	return MixMaterialFromJSObject(p, ba.ctx)
}

// MixMaterialFromJSObject returns a wrapped MixMaterial JavaScript class.
func MixMaterialFromJSObject(p js.Value, ctx js.Value) *MixMaterial {
	return &MixMaterial{p: p, ctx: ctx}
}

// MixMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func MixMaterialArrayToJSArray(array []*MixMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewMixMaterial returns a new MixMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial
func (ba *Babylon) NewMixMaterial(name string, scene *Scene) *MixMaterial {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("MixMaterial").New(args...)
	return MixMaterialFromJSObject(p, ba.ctx)
}

// BindForSubMesh calls the BindForSubMesh method on the MixMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#bindforsubmesh
func (m *MixMaterial) BindForSubMesh(world *Matrix, mesh *Mesh, subMesh *SubMesh) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, world.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	m.p.Call("bindForSubMesh", args...)
}

// Clone calls the Clone method on the MixMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#clone
func (m *MixMaterial) Clone(name string) *MixMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := m.p.Call("clone", args...)
	return MixMaterialFromJSObject(retVal, m.ctx)
}

// MixMaterialDisposeOpts contains optional parameters for MixMaterial.Dispose.
type MixMaterialDisposeOpts struct {
	ForceDisposeEffect *bool
}

// Dispose calls the Dispose method on the MixMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#dispose
func (m *MixMaterial) Dispose(opts *MixMaterialDisposeOpts) {
	if opts == nil {
		opts = &MixMaterialDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForceDisposeEffect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeEffect)
	}

	m.p.Call("dispose", args...)
}

// GetActiveTextures calls the GetActiveTextures method on the MixMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#getactivetextures
func (m *MixMaterial) GetActiveTextures() *BaseTexture {

	retVal := m.p.Call("getActiveTextures")
	return BaseTextureFromJSObject(retVal, m.ctx)
}

// GetAlphaTestTexture calls the GetAlphaTestTexture method on the MixMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#getalphatesttexture
func (m *MixMaterial) GetAlphaTestTexture() *BaseTexture {

	retVal := m.p.Call("getAlphaTestTexture")
	return BaseTextureFromJSObject(retVal, m.ctx)
}

// GetAnimatables calls the GetAnimatables method on the MixMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#getanimatables
func (m *MixMaterial) GetAnimatables() *IAnimatable {

	retVal := m.p.Call("getAnimatables")
	return IAnimatableFromJSObject(retVal, m.ctx)
}

// GetClassName calls the GetClassName method on the MixMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#getclassname
func (m *MixMaterial) GetClassName() string {

	retVal := m.p.Call("getClassName")
	return retVal.String()
}

// HasTexture calls the HasTexture method on the MixMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#hastexture
func (m *MixMaterial) HasTexture(texture *BaseTexture) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	retVal := m.p.Call("hasTexture", args...)
	return retVal.Bool()
}

// MixMaterialIsReadyForSubMeshOpts contains optional parameters for MixMaterial.IsReadyForSubMesh.
type MixMaterialIsReadyForSubMeshOpts struct {
	UseInstances *bool
}

// IsReadyForSubMesh calls the IsReadyForSubMesh method on the MixMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#isreadyforsubmesh
func (m *MixMaterial) IsReadyForSubMesh(mesh *AbstractMesh, subMesh *SubMesh, opts *MixMaterialIsReadyForSubMeshOpts) bool {
	if opts == nil {
		opts = &MixMaterialIsReadyForSubMeshOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := m.p.Call("isReadyForSubMesh", args...)
	return retVal.Bool()
}

// NeedAlphaBlending calls the NeedAlphaBlending method on the MixMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#needalphablending
func (m *MixMaterial) NeedAlphaBlending() bool {

	retVal := m.p.Call("needAlphaBlending")
	return retVal.Bool()
}

// NeedAlphaTesting calls the NeedAlphaTesting method on the MixMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#needalphatesting
func (m *MixMaterial) NeedAlphaTesting() bool {

	retVal := m.p.Call("needAlphaTesting")
	return retVal.Bool()
}

// Parse calls the Parse method on the MixMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#parse
func (m *MixMaterial) Parse(source interface{}, scene *Scene, rootUrl string) *MixMaterial {

	args := make([]interface{}, 0, 3+0)

	args = append(args, source)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := m.p.Call("Parse", args...)
	return MixMaterialFromJSObject(retVal, m.ctx)
}

// Serialize calls the Serialize method on the MixMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#serialize
func (m *MixMaterial) Serialize() interface{} {

	retVal := m.p.Call("serialize")
	return retVal
}

/*

// DiffuseColor returns the DiffuseColor property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusecolor
func (m *MixMaterial) DiffuseColor(diffuseColor *Color3) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseColor.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseColor sets the DiffuseColor property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusecolor
func (m *MixMaterial) SetDiffuseColor(diffuseColor *Color3) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseColor.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTexture1 returns the DiffuseTexture1 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture1
func (m *MixMaterial) DiffuseTexture1(diffuseTexture1 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture1.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTexture1 sets the DiffuseTexture1 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture1
func (m *MixMaterial) SetDiffuseTexture1(diffuseTexture1 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture1.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTexture2 returns the DiffuseTexture2 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture2
func (m *MixMaterial) DiffuseTexture2(diffuseTexture2 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture2.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTexture2 sets the DiffuseTexture2 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture2
func (m *MixMaterial) SetDiffuseTexture2(diffuseTexture2 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture2.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTexture3 returns the DiffuseTexture3 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture3
func (m *MixMaterial) DiffuseTexture3(diffuseTexture3 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture3.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTexture3 sets the DiffuseTexture3 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture3
func (m *MixMaterial) SetDiffuseTexture3(diffuseTexture3 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture3.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTexture4 returns the DiffuseTexture4 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture4
func (m *MixMaterial) DiffuseTexture4(diffuseTexture4 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture4.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTexture4 sets the DiffuseTexture4 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture4
func (m *MixMaterial) SetDiffuseTexture4(diffuseTexture4 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture4.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTexture5 returns the DiffuseTexture5 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture5
func (m *MixMaterial) DiffuseTexture5(diffuseTexture5 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture5.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTexture5 sets the DiffuseTexture5 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture5
func (m *MixMaterial) SetDiffuseTexture5(diffuseTexture5 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture5.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTexture6 returns the DiffuseTexture6 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture6
func (m *MixMaterial) DiffuseTexture6(diffuseTexture6 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture6.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTexture6 sets the DiffuseTexture6 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture6
func (m *MixMaterial) SetDiffuseTexture6(diffuseTexture6 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture6.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTexture7 returns the DiffuseTexture7 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture7
func (m *MixMaterial) DiffuseTexture7(diffuseTexture7 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture7.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTexture7 sets the DiffuseTexture7 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture7
func (m *MixMaterial) SetDiffuseTexture7(diffuseTexture7 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture7.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTexture8 returns the DiffuseTexture8 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture8
func (m *MixMaterial) DiffuseTexture8(diffuseTexture8 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture8.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTexture8 sets the DiffuseTexture8 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#diffusetexture8
func (m *MixMaterial) SetDiffuseTexture8(diffuseTexture8 *Texture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(diffuseTexture8.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// DisableLighting returns the DisableLighting property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#disablelighting
func (m *MixMaterial) DisableLighting(disableLighting bool) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(disableLighting)
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SetDisableLighting sets the DisableLighting property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#disablelighting
func (m *MixMaterial) SetDisableLighting(disableLighting bool) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(disableLighting)
	return MixMaterialFromJSObject(p, ba.ctx)
}

// MaxSimultaneousLights returns the MaxSimultaneousLights property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#maxsimultaneouslights
func (m *MixMaterial) MaxSimultaneousLights(maxSimultaneousLights float64) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(maxSimultaneousLights)
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SetMaxSimultaneousLights sets the MaxSimultaneousLights property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#maxsimultaneouslights
func (m *MixMaterial) SetMaxSimultaneousLights(maxSimultaneousLights float64) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(maxSimultaneousLights)
	return MixMaterialFromJSObject(p, ba.ctx)
}

// MixTexture1 returns the MixTexture1 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#mixtexture1
func (m *MixMaterial) MixTexture1(mixTexture1 *BaseTexture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(mixTexture1.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SetMixTexture1 sets the MixTexture1 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#mixtexture1
func (m *MixMaterial) SetMixTexture1(mixTexture1 *BaseTexture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(mixTexture1.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// MixTexture2 returns the MixTexture2 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#mixtexture2
func (m *MixMaterial) MixTexture2(mixTexture2 *BaseTexture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(mixTexture2.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SetMixTexture2 sets the MixTexture2 property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#mixtexture2
func (m *MixMaterial) SetMixTexture2(mixTexture2 *BaseTexture) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(mixTexture2.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SpecularColor returns the SpecularColor property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#specularcolor
func (m *MixMaterial) SpecularColor(specularColor *Color3) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(specularColor.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SetSpecularColor sets the SpecularColor property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#specularcolor
func (m *MixMaterial) SetSpecularColor(specularColor *Color3) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(specularColor.JSObject())
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SpecularPower returns the SpecularPower property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#specularpower
func (m *MixMaterial) SpecularPower(specularPower float64) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(specularPower)
	return MixMaterialFromJSObject(p, ba.ctx)
}

// SetSpecularPower sets the SpecularPower property of class MixMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.mixmaterial#specularpower
func (m *MixMaterial) SetSpecularPower(specularPower float64) *MixMaterial {
	p := ba.ctx.Get("MixMaterial").New(specularPower)
	return MixMaterialFromJSObject(p, ba.ctx)
}

*/
