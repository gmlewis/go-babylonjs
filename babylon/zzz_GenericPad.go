// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// GenericPad represents a babylon.js GenericPad.
// Represents a generic gamepad
type GenericPad struct {
	*Gamepad
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (g *GenericPad) JSObject() js.Value { return g.p }

// GenericPad returns a GenericPad JavaScript class.
func (ba *Babylon) GenericPad() *GenericPad {
	p := ba.ctx.Get("GenericPad")
	return GenericPadFromJSObject(p, ba.ctx)
}

// GenericPadFromJSObject returns a wrapped GenericPad JavaScript class.
func GenericPadFromJSObject(p js.Value, ctx js.Value) *GenericPad {
	return &GenericPad{Gamepad: GamepadFromJSObject(p, ctx), ctx: ctx}
}

// GenericPadArrayToJSArray returns a JavaScript Array for the wrapped array.
func GenericPadArrayToJSArray(array []*GenericPad) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewGenericPad returns a new GenericPad object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericpad
func (ba *Babylon) NewGenericPad(id string, index float64, browserGamepad JSObject) *GenericPad {

	args := make([]interface{}, 0, 3+0)

	args = append(args, id)
	args = append(args, index)
	args = append(args, browserGamepad.JSObject())

	p := ba.ctx.Get("GenericPad").New(args...)
	return GenericPadFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the GenericPad object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericpad#dispose
func (g *GenericPad) Dispose() {

	g.p.Call("dispose")
}

// Onbuttondown calls the Onbuttondown method on the GenericPad object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericpad#onbuttondown
func (g *GenericPad) Onbuttondown(callback JSFunc) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(callback))

	g.p.Call("onbuttondown", args...)
}

// Onbuttonup calls the Onbuttonup method on the GenericPad object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericpad#onbuttonup
func (g *GenericPad) Onbuttonup(callback JSFunc) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(callback))

	g.p.Call("onbuttonup", args...)
}

// Update calls the Update method on the GenericPad object.
//
// https://doc.babylonjs.com/api/classes/babylon.genericpad#update
func (g *GenericPad) Update() {

	g.p.Call("update")
}

// OnButtonDownObservable returns the OnButtonDownObservable property of class GenericPad.
//
// https://doc.babylonjs.com/api/classes/babylon.genericpad#onbuttondownobservable
func (g *GenericPad) OnButtonDownObservable() *Observable {
	retVal := g.p.Get("onButtonDownObservable")
	return ObservableFromJSObject(retVal, g.ctx)
}

// SetOnButtonDownObservable sets the OnButtonDownObservable property of class GenericPad.
//
// https://doc.babylonjs.com/api/classes/babylon.genericpad#onbuttondownobservable
func (g *GenericPad) SetOnButtonDownObservable(onButtonDownObservable *Observable) *GenericPad {
	g.p.Set("onButtonDownObservable", onButtonDownObservable.JSObject())
	return g
}

// OnButtonUpObservable returns the OnButtonUpObservable property of class GenericPad.
//
// https://doc.babylonjs.com/api/classes/babylon.genericpad#onbuttonupobservable
func (g *GenericPad) OnButtonUpObservable() *Observable {
	retVal := g.p.Get("onButtonUpObservable")
	return ObservableFromJSObject(retVal, g.ctx)
}

// SetOnButtonUpObservable sets the OnButtonUpObservable property of class GenericPad.
//
// https://doc.babylonjs.com/api/classes/babylon.genericpad#onbuttonupobservable
func (g *GenericPad) SetOnButtonUpObservable(onButtonUpObservable *Observable) *GenericPad {
	g.p.Set("onButtonUpObservable", onButtonUpObservable.JSObject())
	return g
}
