// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FxaaPostProcess represents a babylon.js FxaaPostProcess.
// Fxaa post process
//
// See: https://doc.babylonjs.com/how_to/how_to_use_postprocesses#fxaa
type FxaaPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FxaaPostProcess) JSObject() js.Value { return f.p }

// FxaaPostProcess returns a FxaaPostProcess JavaScript class.
func (ba *Babylon) FxaaPostProcess() *FxaaPostProcess {
	p := ba.ctx.Get("FxaaPostProcess")
	return FxaaPostProcessFromJSObject(p, ba.ctx)
}

// FxaaPostProcessFromJSObject returns a wrapped FxaaPostProcess JavaScript class.
func FxaaPostProcessFromJSObject(p js.Value, ctx js.Value) *FxaaPostProcess {
	return &FxaaPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// FxaaPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func FxaaPostProcessArrayToJSArray(array []*FxaaPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewFxaaPostProcessOpts contains optional parameters for NewFxaaPostProcess.
type NewFxaaPostProcessOpts struct {
	Camera       *Camera
	SamplingMode *float64
	Engine       *Engine
	Reusable     *bool
	TextureType  *float64
}

// NewFxaaPostProcess returns a new FxaaPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.fxaapostprocess
func (ba *Babylon) NewFxaaPostProcess(name string, options float64, opts *NewFxaaPostProcessOpts) *FxaaPostProcess {
	if opts == nil {
		opts = &NewFxaaPostProcessOpts{}
	}

	args := make([]interface{}, 0, 2+5)

	args = append(args, name)
	args = append(args, options)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}

	p := ba.ctx.Get("FxaaPostProcess").New(args...)
	return FxaaPostProcessFromJSObject(p, ba.ctx)
}

/*

 */
