// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RuntimeAnimation represents a babylon.js RuntimeAnimation.
// Defines a runtime animation
type RuntimeAnimation struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RuntimeAnimation) JSObject() js.Value { return r.p }

// RuntimeAnimation returns a RuntimeAnimation JavaScript class.
func (ba *Babylon) RuntimeAnimation() *RuntimeAnimation {
	p := ba.ctx.Get("RuntimeAnimation")
	return RuntimeAnimationFromJSObject(p, ba.ctx)
}

// RuntimeAnimationFromJSObject returns a wrapped RuntimeAnimation JavaScript class.
func RuntimeAnimationFromJSObject(p js.Value, ctx js.Value) *RuntimeAnimation {
	return &RuntimeAnimation{p: p, ctx: ctx}
}

// RuntimeAnimationArrayToJSArray returns a JavaScript Array for the wrapped array.
func RuntimeAnimationArrayToJSArray(array []*RuntimeAnimation) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewRuntimeAnimation returns a new RuntimeAnimation object.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#constructor
func (ba *Babylon) NewRuntimeAnimation(target JSObject, animation *Animation, scene *Scene, host *Animatable) *RuntimeAnimation {

	args := make([]interface{}, 0, 4+0)

	args = append(args, target.JSObject())
	args = append(args, animation.JSObject())
	args = append(args, scene.JSObject())
	args = append(args, host.JSObject())

	p := ba.ctx.Get("RuntimeAnimation").New(args...)
	return RuntimeAnimationFromJSObject(p, ba.ctx)
}

// RuntimeAnimationAnimateOpts contains optional parameters for RuntimeAnimation.Animate.
type RuntimeAnimationAnimateOpts struct {
	Weight *float64
}

// Animate calls the Animate method on the RuntimeAnimation object.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#animate
func (r *RuntimeAnimation) Animate(delay float64, from float64, to float64, loop bool, speedRatio float64, opts *RuntimeAnimationAnimateOpts) bool {
	if opts == nil {
		opts = &RuntimeAnimationAnimateOpts{}
	}

	args := make([]interface{}, 0, 5+1)

	args = append(args, delay)

	args = append(args, from)

	args = append(args, to)

	args = append(args, loop)

	args = append(args, speedRatio)

	if opts.Weight == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Weight)
	}

	retVal := r.p.Call("animate", args...)
	return retVal.Bool()
}

// Dispose calls the Dispose method on the RuntimeAnimation object.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#dispose
func (r *RuntimeAnimation) Dispose() {

	r.p.Call("dispose")
}

// GoToFrame calls the GoToFrame method on the RuntimeAnimation object.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#gotoframe
func (r *RuntimeAnimation) GoToFrame(frame float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, frame)

	r.p.Call("goToFrame", args...)
}

// IsStopped calls the IsStopped method on the RuntimeAnimation object.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#isstopped
func (r *RuntimeAnimation) IsStopped() bool {

	retVal := r.p.Call("isStopped")
	return retVal.Bool()
}

// RuntimeAnimationResetOpts contains optional parameters for RuntimeAnimation.Reset.
type RuntimeAnimationResetOpts struct {
	RestoreOriginal *bool
}

// Reset calls the Reset method on the RuntimeAnimation object.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#reset
func (r *RuntimeAnimation) Reset(opts *RuntimeAnimationResetOpts) {
	if opts == nil {
		opts = &RuntimeAnimationResetOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.RestoreOriginal == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RestoreOriginal)
	}

	r.p.Call("reset", args...)
}

// SetValue calls the SetValue method on the RuntimeAnimation object.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#setvalue
func (r *RuntimeAnimation) SetValue(currentValue JSObject, weight float64) {

	args := make([]interface{}, 0, 2+0)

	if currentValue == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, currentValue.JSObject())
	}

	args = append(args, weight)

	r.p.Call("setValue", args...)
}

// Animation returns the Animation property of class RuntimeAnimation.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#animation
func (r *RuntimeAnimation) Animation() *Animation {
	retVal := r.p.Get("animation")
	return AnimationFromJSObject(retVal, r.ctx)
}

// SetAnimation sets the Animation property of class RuntimeAnimation.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#animation
func (r *RuntimeAnimation) SetAnimation(animation *Animation) *RuntimeAnimation {
	r.p.Set("animation", animation.JSObject())
	return r
}

// CurrentFrame returns the CurrentFrame property of class RuntimeAnimation.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#currentframe
func (r *RuntimeAnimation) CurrentFrame() float64 {
	retVal := r.p.Get("currentFrame")
	return retVal.Float()
}

// SetCurrentFrame sets the CurrentFrame property of class RuntimeAnimation.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#currentframe
func (r *RuntimeAnimation) SetCurrentFrame(currentFrame float64) *RuntimeAnimation {
	r.p.Set("currentFrame", currentFrame)
	return r
}

// CurrentValue returns the CurrentValue property of class RuntimeAnimation.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#currentvalue
func (r *RuntimeAnimation) CurrentValue() js.Value {
	retVal := r.p.Get("currentValue")
	return retVal
}

// SetCurrentValue sets the CurrentValue property of class RuntimeAnimation.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#currentvalue
func (r *RuntimeAnimation) SetCurrentValue(currentValue JSObject) *RuntimeAnimation {
	r.p.Set("currentValue", currentValue.JSObject())
	return r
}

// Target returns the Target property of class RuntimeAnimation.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#target
func (r *RuntimeAnimation) Target() js.Value {
	retVal := r.p.Get("target")
	return retVal
}

// SetTarget sets the Target property of class RuntimeAnimation.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#target
func (r *RuntimeAnimation) SetTarget(target JSObject) *RuntimeAnimation {
	r.p.Set("target", target.JSObject())
	return r
}

// TargetPath returns the TargetPath property of class RuntimeAnimation.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#targetpath
func (r *RuntimeAnimation) TargetPath() string {
	retVal := r.p.Get("targetPath")
	return retVal.String()
}

// SetTargetPath sets the TargetPath property of class RuntimeAnimation.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#targetpath
func (r *RuntimeAnimation) SetTargetPath(targetPath string) *RuntimeAnimation {
	r.p.Set("targetPath", targetPath)
	return r
}

// Weight returns the Weight property of class RuntimeAnimation.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#weight
func (r *RuntimeAnimation) Weight() float64 {
	retVal := r.p.Get("weight")
	return retVal.Float()
}

// SetWeight sets the Weight property of class RuntimeAnimation.
//
// https://doc.babylonjs.com/api/classes/babylon.runtimeanimation#weight
func (r *RuntimeAnimation) SetWeight(weight float64) *RuntimeAnimation {
	r.p.Set("weight", weight)
	return r
}
