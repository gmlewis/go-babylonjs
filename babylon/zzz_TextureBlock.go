// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TextureBlock represents a babylon.js TextureBlock.
// Block used to read a texture from a sampler
type TextureBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (t *TextureBlock) JSObject() js.Value { return t.p }

// TextureBlock returns a TextureBlock JavaScript class.
func (ba *Babylon) TextureBlock() *TextureBlock {
	p := ba.ctx.Get("TextureBlock")
	return TextureBlockFromJSObject(p, ba.ctx)
}

// TextureBlockFromJSObject returns a wrapped TextureBlock JavaScript class.
func TextureBlockFromJSObject(p js.Value, ctx js.Value) *TextureBlock {
	return &TextureBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// TextureBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func TextureBlockArrayToJSArray(array []*TextureBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewTextureBlock returns a new TextureBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock
func (ba *Babylon) NewTextureBlock(name string) *TextureBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("TextureBlock").New(args...)
	return TextureBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the TextureBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#autoconfigure
func (t *TextureBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	t.p.Call("autoConfigure", args...)
}

// TextureBlockBindOpts contains optional parameters for TextureBlock.Bind.
type TextureBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the TextureBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#bind
func (t *TextureBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *TextureBlockBindOpts) {
	if opts == nil {
		opts = &TextureBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	t.p.Call("bind", args...)
}

// GetClassName calls the GetClassName method on the TextureBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#getclassname
func (t *TextureBlock) GetClassName() string {

	retVal := t.p.Call("getClassName")
	return retVal.String()
}

// TextureBlockInitializeDefinesOpts contains optional parameters for TextureBlock.InitializeDefines.
type TextureBlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the TextureBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#initializedefines
func (t *TextureBlock) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *TextureBlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &TextureBlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	t.p.Call("initializeDefines", args...)
}

// IsReady calls the IsReady method on the TextureBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#isready
func (t *TextureBlock) IsReady() bool {

	retVal := t.p.Call("isReady")
	return retVal.Bool()
}

// PrepareDefines calls the PrepareDefines method on the TextureBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#preparedefines
func (t *TextureBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	t.p.Call("prepareDefines", args...)
}

// Serialize calls the Serialize method on the TextureBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#serialize
func (t *TextureBlock) Serialize() interface{} {

	retVal := t.p.Call("serialize")
	return retVal
}

// _deserialize calls the _deserialize method on the TextureBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#_deserialize
func (t *TextureBlock) _deserialize(serializationObject interface{}, scene *Scene, rootUrl string) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, serializationObject)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	t.p.Call("_deserialize", args...)
}

/*

// A returns the A property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#a
func (t *TextureBlock) A(a *NodeMaterialConnectionPoint) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(a.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

// SetA sets the A property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#a
func (t *TextureBlock) SetA(a *NodeMaterialConnectionPoint) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(a.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

// B returns the B property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#b
func (t *TextureBlock) B(b *NodeMaterialConnectionPoint) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(b.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

// SetB sets the B property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#b
func (t *TextureBlock) SetB(b *NodeMaterialConnectionPoint) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(b.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

// G returns the G property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#g
func (t *TextureBlock) G(g *NodeMaterialConnectionPoint) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(g.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

// SetG sets the G property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#g
func (t *TextureBlock) SetG(g *NodeMaterialConnectionPoint) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(g.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

// R returns the R property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#r
func (t *TextureBlock) R(r *NodeMaterialConnectionPoint) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(r.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

// SetR sets the R property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#r
func (t *TextureBlock) SetR(r *NodeMaterialConnectionPoint) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(r.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

// Rgb returns the Rgb property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#rgb
func (t *TextureBlock) Rgb(rgb *NodeMaterialConnectionPoint) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(rgb.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

// SetRgb sets the Rgb property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#rgb
func (t *TextureBlock) SetRgb(rgb *NodeMaterialConnectionPoint) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(rgb.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

// Rgba returns the Rgba property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#rgba
func (t *TextureBlock) Rgba(rgba *NodeMaterialConnectionPoint) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(rgba.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

// SetRgba sets the Rgba property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#rgba
func (t *TextureBlock) SetRgba(rgba *NodeMaterialConnectionPoint) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(rgba.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#target
func (t *TextureBlock) Target(target js.Value) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(target)
	return TextureBlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#target
func (t *TextureBlock) SetTarget(target js.Value) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(target)
	return TextureBlockFromJSObject(p, ba.ctx)
}

// Texture returns the Texture property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#texture
func (t *TextureBlock) Texture(texture *Texture) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(texture.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

// SetTexture sets the Texture property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#texture
func (t *TextureBlock) SetTexture(texture *Texture) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(texture.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

// Uv returns the Uv property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#uv
func (t *TextureBlock) Uv(uv *NodeMaterialConnectionPoint) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(uv.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

// SetUv sets the Uv property of class TextureBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textureblock#uv
func (t *TextureBlock) SetUv(uv *NodeMaterialConnectionPoint) *TextureBlock {
	p := ba.ctx.Get("TextureBlock").New(uv.JSObject())
	return TextureBlockFromJSObject(p, ba.ctx)
}

*/
