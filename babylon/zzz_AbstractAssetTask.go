// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// AbstractAssetTask represents a babylon.js AbstractAssetTask.
// Define an abstract asset task used with a AssetsManager class to load assets into a scene
type AbstractAssetTask struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *AbstractAssetTask) JSObject() js.Value { return a.p }

// AbstractAssetTask returns a AbstractAssetTask JavaScript class.
func (ba *Babylon) AbstractAssetTask() *AbstractAssetTask {
	p := ba.ctx.Get("AbstractAssetTask")
	return AbstractAssetTaskFromJSObject(p, ba.ctx)
}

// AbstractAssetTaskFromJSObject returns a wrapped AbstractAssetTask JavaScript class.
func AbstractAssetTaskFromJSObject(p js.Value, ctx js.Value) *AbstractAssetTask {
	return &AbstractAssetTask{p: p, ctx: ctx}
}

// AbstractAssetTaskArrayToJSArray returns a JavaScript Array for the wrapped array.
func AbstractAssetTaskArrayToJSArray(array []*AbstractAssetTask) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewAbstractAssetTask returns a new AbstractAssetTask object.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask
func (ba *Babylon) NewAbstractAssetTask(name string) *AbstractAssetTask {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("AbstractAssetTask").New(args...)
	return AbstractAssetTaskFromJSObject(p, ba.ctx)
}

// Reset calls the Reset method on the AbstractAssetTask object.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask#reset
func (a *AbstractAssetTask) Reset() {

	a.p.Call("reset")
}

// Run calls the Run method on the AbstractAssetTask object.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask#run
func (a *AbstractAssetTask) Run(scene *Scene, onSuccess JSFunc, onError JSFunc) {

	args := make([]interface{}, 0, 3+0)

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	args = append(args, js.FuncOf(onSuccess))

	args = append(args, js.FuncOf(onError))

	a.p.Call("run", args...)
}

// RunTask calls the RunTask method on the AbstractAssetTask object.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask#runtask
func (a *AbstractAssetTask) RunTask(scene *Scene, onSuccess JSFunc, onError JSFunc) {

	args := make([]interface{}, 0, 3+0)

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	args = append(args, js.FuncOf(onSuccess))

	args = append(args, js.FuncOf(onError))

	a.p.Call("runTask", args...)
}

// ErrorObject returns the ErrorObject property of class AbstractAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask#errorobject
func (a *AbstractAssetTask) ErrorObject() js.Value {
	retVal := a.p.Get("errorObject")
	return retVal
}

// SetErrorObject sets the ErrorObject property of class AbstractAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask#errorobject
func (a *AbstractAssetTask) SetErrorObject(errorObject js.Value) *AbstractAssetTask {
	a.p.Set("errorObject", errorObject)
	return a
}

// IsCompleted returns the IsCompleted property of class AbstractAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask#iscompleted
func (a *AbstractAssetTask) IsCompleted() bool {
	retVal := a.p.Get("isCompleted")
	return retVal.Bool()
}

// SetIsCompleted sets the IsCompleted property of class AbstractAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask#iscompleted
func (a *AbstractAssetTask) SetIsCompleted(isCompleted bool) *AbstractAssetTask {
	a.p.Set("isCompleted", isCompleted)
	return a
}

// Name returns the Name property of class AbstractAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask#name
func (a *AbstractAssetTask) Name() string {
	retVal := a.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class AbstractAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask#name
func (a *AbstractAssetTask) SetName(name string) *AbstractAssetTask {
	a.p.Set("name", name)
	return a
}

// OnError returns the OnError property of class AbstractAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask#onerror
func (a *AbstractAssetTask) OnError() js.Value {
	retVal := a.p.Get("onError")
	return retVal
}

// SetOnError sets the OnError property of class AbstractAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask#onerror
func (a *AbstractAssetTask) SetOnError(onError JSFunc) *AbstractAssetTask {
	a.p.Set("onError", js.FuncOf(onError))
	return a
}

// OnSuccess returns the OnSuccess property of class AbstractAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask#onsuccess
func (a *AbstractAssetTask) OnSuccess() js.Value {
	retVal := a.p.Get("onSuccess")
	return retVal
}

// SetOnSuccess sets the OnSuccess property of class AbstractAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask#onsuccess
func (a *AbstractAssetTask) SetOnSuccess(onSuccess JSFunc) *AbstractAssetTask {
	a.p.Set("onSuccess", js.FuncOf(onSuccess))
	return a
}

// TaskState returns the TaskState property of class AbstractAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask#taskstate
func (a *AbstractAssetTask) TaskState() js.Value {
	retVal := a.p.Get("taskState")
	return retVal
}

// SetTaskState sets the TaskState property of class AbstractAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.abstractassettask#taskstate
func (a *AbstractAssetTask) SetTaskState(taskState js.Value) *AbstractAssetTask {
	a.p.Set("taskState", taskState)
	return a
}
