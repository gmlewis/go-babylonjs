// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PhysicsGravitationalFieldEvent represents a babylon.js PhysicsGravitationalFieldEvent.
// Represents a gravitational field event
type PhysicsGravitationalFieldEvent struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PhysicsGravitationalFieldEvent) JSObject() js.Value { return p.p }

// PhysicsGravitationalFieldEvent returns a PhysicsGravitationalFieldEvent JavaScript class.
func (ba *Babylon) PhysicsGravitationalFieldEvent() *PhysicsGravitationalFieldEvent {
	p := ba.ctx.Get("PhysicsGravitationalFieldEvent")
	return PhysicsGravitationalFieldEventFromJSObject(p, ba.ctx)
}

// PhysicsGravitationalFieldEventFromJSObject returns a wrapped PhysicsGravitationalFieldEvent JavaScript class.
func PhysicsGravitationalFieldEventFromJSObject(p js.Value, ctx js.Value) *PhysicsGravitationalFieldEvent {
	return &PhysicsGravitationalFieldEvent{p: p, ctx: ctx}
}

// NewPhysicsGravitationalFieldEvent returns a new PhysicsGravitationalFieldEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsgravitationalfieldevent
func (ba *Babylon) NewPhysicsGravitationalFieldEvent(_physicsHelper *PhysicsHelper, _scene *Scene, _origin *Vector3, _options *PhysicsRadialExplosionEventOptions) *PhysicsGravitationalFieldEvent {

	args := make([]interface{}, 0, 4+0)

	args = append(args, _physicsHelper.JSObject())
	args = append(args, _scene.JSObject())
	args = append(args, _origin.JSObject())
	args = append(args, _options.JSObject())

	p := ba.ctx.Get("PhysicsGravitationalFieldEvent").New(args...)
	return PhysicsGravitationalFieldEventFromJSObject(p, ba.ctx)
}

// Disable calls the Disable method on the PhysicsGravitationalFieldEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsgravitationalfieldevent#disable
func (p *PhysicsGravitationalFieldEvent) Disable() {

	args := make([]interface{}, 0, 0+0)

	p.p.Call("disable", args...)
}

// PhysicsGravitationalFieldEventDisposeOpts contains optional parameters for PhysicsGravitationalFieldEvent.Dispose.
type PhysicsGravitationalFieldEventDisposeOpts struct {
	Force *bool
}

// Dispose calls the Dispose method on the PhysicsGravitationalFieldEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsgravitationalfieldevent#dispose
func (p *PhysicsGravitationalFieldEvent) Dispose(opts *PhysicsGravitationalFieldEventDisposeOpts) {
	if opts == nil {
		opts = &PhysicsGravitationalFieldEventDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Force == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Force)
	}

	p.p.Call("dispose", args...)
}

// Enable calls the Enable method on the PhysicsGravitationalFieldEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsgravitationalfieldevent#enable
func (p *PhysicsGravitationalFieldEvent) Enable() {

	args := make([]interface{}, 0, 0+0)

	p.p.Call("enable", args...)
}

// GetData calls the GetData method on the PhysicsGravitationalFieldEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsgravitationalfieldevent#getdata
func (p *PhysicsGravitationalFieldEvent) GetData() *PhysicsGravitationalFieldEventData {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("getData", args...)
	return PhysicsGravitationalFieldEventDataFromJSObject(retVal, p.ctx)
}

/*

 */
