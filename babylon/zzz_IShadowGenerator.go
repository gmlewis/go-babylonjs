// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IShadowGenerator represents a babylon.js IShadowGenerator.
// Interface to implement to create a shadow generator compatible with BJS.
type IShadowGenerator struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IShadowGenerator) JSObject() js.Value { return i.p }

// IShadowGenerator returns a IShadowGenerator JavaScript class.
func (ba *Babylon) IShadowGenerator() *IShadowGenerator {
	p := ba.ctx.Get("IShadowGenerator")
	return IShadowGeneratorFromJSObject(p, ba.ctx)
}

// IShadowGeneratorFromJSObject returns a wrapped IShadowGenerator JavaScript class.
func IShadowGeneratorFromJSObject(p js.Value, ctx js.Value) *IShadowGenerator {
	return &IShadowGenerator{p: p, ctx: ctx}
}

// IShadowGeneratorArrayToJSArray returns a JavaScript Array for the wrapped array.
func IShadowGeneratorArrayToJSArray(array []*IShadowGenerator) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// BindShadowLight calls the BindShadowLight method on the IShadowGenerator object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowgenerator#bindshadowlight
func (i *IShadowGenerator) BindShadowLight(lightIndex string, effect *Effect) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, lightIndex)
	args = append(args, effect.JSObject())

	i.p.Call("bindShadowLight", args...)
}

// Dispose calls the Dispose method on the IShadowGenerator object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowgenerator#dispose
func (i *IShadowGenerator) Dispose() {

	i.p.Call("dispose")
}

// IShadowGeneratorForceCompilationOpts contains optional parameters for IShadowGenerator.ForceCompilation.
type IShadowGeneratorForceCompilationOpts struct {
	OnCompiled *func()
	Options    js.Value
}

// ForceCompilation calls the ForceCompilation method on the IShadowGenerator object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowgenerator#forcecompilation
func (i *IShadowGenerator) ForceCompilation(opts *IShadowGeneratorForceCompilationOpts) {
	if opts == nil {
		opts = &IShadowGeneratorForceCompilationOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.OnCompiled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnCompiled)
	}
	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	i.p.Call("forceCompilation", args...)
}

// IShadowGeneratorForceCompilationAsyncOpts contains optional parameters for IShadowGenerator.ForceCompilationAsync.
type IShadowGeneratorForceCompilationAsyncOpts struct {
	Options js.Value
}

// ForceCompilationAsync calls the ForceCompilationAsync method on the IShadowGenerator object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowgenerator#forcecompilationasync
func (i *IShadowGenerator) ForceCompilationAsync(opts *IShadowGeneratorForceCompilationAsyncOpts) *Promise {
	if opts == nil {
		opts = &IShadowGeneratorForceCompilationAsyncOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := i.p.Call("forceCompilationAsync", args...)
	return PromiseFromJSObject(retVal, i.ctx)
}

// GetShadowMap calls the GetShadowMap method on the IShadowGenerator object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowgenerator#getshadowmap
func (i *IShadowGenerator) GetShadowMap() *RenderTargetTexture {

	retVal := i.p.Call("getShadowMap")
	return RenderTargetTextureFromJSObject(retVal, i.ctx)
}

// GetShadowMapForRendering calls the GetShadowMapForRendering method on the IShadowGenerator object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowgenerator#getshadowmapforrendering
func (i *IShadowGenerator) GetShadowMapForRendering() *RenderTargetTexture {

	retVal := i.p.Call("getShadowMapForRendering")
	return RenderTargetTextureFromJSObject(retVal, i.ctx)
}

// GetTransformMatrix calls the GetTransformMatrix method on the IShadowGenerator object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowgenerator#gettransformmatrix
func (i *IShadowGenerator) GetTransformMatrix() *Matrix {

	retVal := i.p.Call("getTransformMatrix")
	return MatrixFromJSObject(retVal, i.ctx)
}

// IsReady calls the IsReady method on the IShadowGenerator object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowgenerator#isready
func (i *IShadowGenerator) IsReady(subMesh *SubMesh, useInstances bool) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, subMesh.JSObject())
	args = append(args, useInstances)

	retVal := i.p.Call("isReady", args...)
	return retVal.Bool()
}

// PrepareDefines calls the PrepareDefines method on the IShadowGenerator object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowgenerator#preparedefines
func (i *IShadowGenerator) PrepareDefines(defines *MaterialDefines, lightIndex float64) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, defines.JSObject())
	args = append(args, lightIndex)

	i.p.Call("prepareDefines", args...)
}

// RecreateShadowMap calls the RecreateShadowMap method on the IShadowGenerator object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowgenerator#recreateshadowmap
func (i *IShadowGenerator) RecreateShadowMap() {

	i.p.Call("recreateShadowMap")
}

// Serialize calls the Serialize method on the IShadowGenerator object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowgenerator#serialize
func (i *IShadowGenerator) Serialize() interface{} {

	retVal := i.p.Call("serialize")
	return retVal
}

/*

 */
