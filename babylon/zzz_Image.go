// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Image represents a babylon.js Image.
// Class used to create 2D images
type Image struct {
	*Control
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *Image) JSObject() js.Value { return i.p }

// Image returns a Image JavaScript class.
func (ba *Babylon) Image() *Image {
	p := ba.ctx.Get("Image")
	return ImageFromJSObject(p, ba.ctx)
}

// ImageFromJSObject returns a wrapped Image JavaScript class.
func ImageFromJSObject(p js.Value, ctx js.Value) *Image {
	return &Image{Control: ControlFromJSObject(p, ctx), ctx: ctx}
}

// ImageArrayToJSArray returns a JavaScript Array for the wrapped array.
func ImageArrayToJSArray(array []*Image) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewImageOpts contains optional parameters for NewImage.
type NewImageOpts struct {
	Name *string
	Url  *string
}

// NewImage returns a new Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image
func (ba *Babylon) NewImage(opts *NewImageOpts) *Image {
	if opts == nil {
		opts = &NewImageOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}
	if opts.Url == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Url)
	}

	p := ba.ctx.Get("Image").New(args...)
	return ImageFromJSObject(p, ba.ctx)
}

// Contains calls the Contains method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#contains
func (i *Image) Contains(x float64, y float64) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, x)
	args = append(args, y)

	retVal := i.p.Call("contains", args...)
	return retVal.Bool()
}

// Dispose calls the Dispose method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#dispose
func (i *Image) Dispose() {

	i.p.Call("dispose")
}

// GetAscendantOfClass calls the GetAscendantOfClass method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#getascendantofclass
func (i *Image) GetAscendantOfClass(className string) *Control {

	args := make([]interface{}, 0, 1+0)

	args = append(args, className)

	retVal := i.p.Call("getAscendantOfClass", args...)
	return ControlFromJSObject(retVal, i.ctx)
}

// GetClassName calls the GetClassName method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#getclassname
func (i *Image) GetClassName() string {

	retVal := i.p.Call("getClassName")
	return retVal.String()
}

// ImageGetDescendantsOpts contains optional parameters for Image.GetDescendants.
type ImageGetDescendantsOpts struct {
	DirectDescendantsOnly *bool
	Predicate             func()
}

// GetDescendants calls the GetDescendants method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#getdescendants
func (i *Image) GetDescendants(opts *ImageGetDescendantsOpts) *Control {
	if opts == nil {
		opts = &ImageGetDescendantsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := i.p.Call("getDescendants", args...)
	return ControlFromJSObject(retVal, i.ctx)
}

// ImageGetDescendantsToRefOpts contains optional parameters for Image.GetDescendantsToRef.
type ImageGetDescendantsToRefOpts struct {
	DirectDescendantsOnly *bool
	Predicate             func()
}

// GetDescendantsToRef calls the GetDescendantsToRef method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#getdescendantstoref
func (i *Image) GetDescendantsToRef(results *Control, opts *ImageGetDescendantsToRefOpts) {
	if opts == nil {
		opts = &ImageGetDescendantsToRefOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, results.JSObject())

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	i.p.Call("getDescendantsToRef", args...)
}

// GetLocalCoordinates calls the GetLocalCoordinates method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#getlocalcoordinates
func (i *Image) GetLocalCoordinates(globalCoordinates *Vector2) *Vector2 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, globalCoordinates.JSObject())

	retVal := i.p.Call("getLocalCoordinates", args...)
	return Vector2FromJSObject(retVal, i.ctx)
}

// GetLocalCoordinatesToRef calls the GetLocalCoordinatesToRef method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#getlocalcoordinatestoref
func (i *Image) GetLocalCoordinatesToRef(globalCoordinates *Vector2, result *Vector2) *Control {

	args := make([]interface{}, 0, 2+0)

	args = append(args, globalCoordinates.JSObject())
	args = append(args, result.JSObject())

	retVal := i.p.Call("getLocalCoordinatesToRef", args...)
	return ControlFromJSObject(retVal, i.ctx)
}

// GetParentLocalCoordinates calls the GetParentLocalCoordinates method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#getparentlocalcoordinates
func (i *Image) GetParentLocalCoordinates(globalCoordinates *Vector2) *Vector2 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, globalCoordinates.JSObject())

	retVal := i.p.Call("getParentLocalCoordinates", args...)
	return Vector2FromJSObject(retVal, i.ctx)
}

// IsAscendant calls the IsAscendant method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#isascendant
func (i *Image) IsAscendant(container *Control) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, container.JSObject())

	retVal := i.p.Call("isAscendant", args...)
	return retVal.Bool()
}

// LinkWithMesh calls the LinkWithMesh method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#linkwithmesh
func (i *Image) LinkWithMesh(mesh *AbstractMesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	i.p.Call("linkWithMesh", args...)
}

// MoveToVector3 calls the MoveToVector3 method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#movetovector3
func (i *Image) MoveToVector3(position *Vector3, scene *Scene) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	i.p.Call("moveToVector3", args...)
}

// SynchronizeSizeWithContent calls the SynchronizeSizeWithContent method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#synchronizesizewithcontent
func (i *Image) SynchronizeSizeWithContent() {

	i.p.Call("synchronizeSizeWithContent")
}

// _draw calls the _draw method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#_draw
func (i *Image) _draw(context js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, context)

	i.p.Call("_draw", args...)
}

/*

// AllowAlphaInheritance returns the AllowAlphaInheritance property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#allowalphainheritance
func (i *Image) AllowAlphaInheritance(AllowAlphaInheritance bool) *Image {
	p := ba.ctx.Get("Image").New(AllowAlphaInheritance)
	return ImageFromJSObject(p, ba.ctx)
}

// SetAllowAlphaInheritance sets the AllowAlphaInheritance property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#allowalphainheritance
func (i *Image) SetAllowAlphaInheritance(AllowAlphaInheritance bool) *Image {
	p := ba.ctx.Get("Image").New(AllowAlphaInheritance)
	return ImageFromJSObject(p, ba.ctx)
}

// Alpha returns the Alpha property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#alpha
func (i *Image) Alpha(alpha float64) *Image {
	p := ba.ctx.Get("Image").New(alpha)
	return ImageFromJSObject(p, ba.ctx)
}

// SetAlpha sets the Alpha property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#alpha
func (i *Image) SetAlpha(alpha float64) *Image {
	p := ba.ctx.Get("Image").New(alpha)
	return ImageFromJSObject(p, ba.ctx)
}

// AutoScale returns the AutoScale property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#autoscale
func (i *Image) AutoScale(autoScale bool) *Image {
	p := ba.ctx.Get("Image").New(autoScale)
	return ImageFromJSObject(p, ba.ctx)
}

// SetAutoScale sets the AutoScale property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#autoscale
func (i *Image) SetAutoScale(autoScale bool) *Image {
	p := ba.ctx.Get("Image").New(autoScale)
	return ImageFromJSObject(p, ba.ctx)
}

// CellHeight returns the CellHeight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#cellheight
func (i *Image) CellHeight(cellHeight float64) *Image {
	p := ba.ctx.Get("Image").New(cellHeight)
	return ImageFromJSObject(p, ba.ctx)
}

// SetCellHeight sets the CellHeight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#cellheight
func (i *Image) SetCellHeight(cellHeight float64) *Image {
	p := ba.ctx.Get("Image").New(cellHeight)
	return ImageFromJSObject(p, ba.ctx)
}

// CellId returns the CellId property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#cellid
func (i *Image) CellId(cellId float64) *Image {
	p := ba.ctx.Get("Image").New(cellId)
	return ImageFromJSObject(p, ba.ctx)
}

// SetCellId sets the CellId property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#cellid
func (i *Image) SetCellId(cellId float64) *Image {
	p := ba.ctx.Get("Image").New(cellId)
	return ImageFromJSObject(p, ba.ctx)
}

// CellWidth returns the CellWidth property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#cellwidth
func (i *Image) CellWidth(cellWidth float64) *Image {
	p := ba.ctx.Get("Image").New(cellWidth)
	return ImageFromJSObject(p, ba.ctx)
}

// SetCellWidth sets the CellWidth property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#cellwidth
func (i *Image) SetCellWidth(cellWidth float64) *Image {
	p := ba.ctx.Get("Image").New(cellWidth)
	return ImageFromJSObject(p, ba.ctx)
}

// CenterX returns the CenterX property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#centerx
func (i *Image) CenterX(centerX float64) *Image {
	p := ba.ctx.Get("Image").New(centerX)
	return ImageFromJSObject(p, ba.ctx)
}

// SetCenterX sets the CenterX property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#centerx
func (i *Image) SetCenterX(centerX float64) *Image {
	p := ba.ctx.Get("Image").New(centerX)
	return ImageFromJSObject(p, ba.ctx)
}

// CenterY returns the CenterY property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#centery
func (i *Image) CenterY(centerY float64) *Image {
	p := ba.ctx.Get("Image").New(centerY)
	return ImageFromJSObject(p, ba.ctx)
}

// SetCenterY sets the CenterY property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#centery
func (i *Image) SetCenterY(centerY float64) *Image {
	p := ba.ctx.Get("Image").New(centerY)
	return ImageFromJSObject(p, ba.ctx)
}

// ClipChildren returns the ClipChildren property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#clipchildren
func (i *Image) ClipChildren(clipChildren bool) *Image {
	p := ba.ctx.Get("Image").New(clipChildren)
	return ImageFromJSObject(p, ba.ctx)
}

// SetClipChildren sets the ClipChildren property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#clipchildren
func (i *Image) SetClipChildren(clipChildren bool) *Image {
	p := ba.ctx.Get("Image").New(clipChildren)
	return ImageFromJSObject(p, ba.ctx)
}

// ClipContent returns the ClipContent property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#clipcontent
func (i *Image) ClipContent(clipContent bool) *Image {
	p := ba.ctx.Get("Image").New(clipContent)
	return ImageFromJSObject(p, ba.ctx)
}

// SetClipContent sets the ClipContent property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#clipcontent
func (i *Image) SetClipContent(clipContent bool) *Image {
	p := ba.ctx.Get("Image").New(clipContent)
	return ImageFromJSObject(p, ba.ctx)
}

// Color returns the Color property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#color
func (i *Image) Color(color string) *Image {
	p := ba.ctx.Get("Image").New(color)
	return ImageFromJSObject(p, ba.ctx)
}

// SetColor sets the Color property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#color
func (i *Image) SetColor(color string) *Image {
	p := ba.ctx.Get("Image").New(color)
	return ImageFromJSObject(p, ba.ctx)
}

// DetectPointerOnOpaqueOnly returns the DetectPointerOnOpaqueOnly property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#detectpointeronopaqueonly
func (i *Image) DetectPointerOnOpaqueOnly(detectPointerOnOpaqueOnly bool) *Image {
	p := ba.ctx.Get("Image").New(detectPointerOnOpaqueOnly)
	return ImageFromJSObject(p, ba.ctx)
}

// SetDetectPointerOnOpaqueOnly sets the DetectPointerOnOpaqueOnly property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#detectpointeronopaqueonly
func (i *Image) SetDetectPointerOnOpaqueOnly(detectPointerOnOpaqueOnly bool) *Image {
	p := ba.ctx.Get("Image").New(detectPointerOnOpaqueOnly)
	return ImageFromJSObject(p, ba.ctx)
}

// DisabledColor returns the DisabledColor property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#disabledcolor
func (i *Image) DisabledColor(disabledColor string) *Image {
	p := ba.ctx.Get("Image").New(disabledColor)
	return ImageFromJSObject(p, ba.ctx)
}

// SetDisabledColor sets the DisabledColor property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#disabledcolor
func (i *Image) SetDisabledColor(disabledColor string) *Image {
	p := ba.ctx.Get("Image").New(disabledColor)
	return ImageFromJSObject(p, ba.ctx)
}

// DomImage returns the DomImage property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#domimage
func (i *Image) DomImage(domImage js.Value) *Image {
	p := ba.ctx.Get("Image").New(domImage)
	return ImageFromJSObject(p, ba.ctx)
}

// SetDomImage sets the DomImage property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#domimage
func (i *Image) SetDomImage(domImage js.Value) *Image {
	p := ba.ctx.Get("Image").New(domImage)
	return ImageFromJSObject(p, ba.ctx)
}

// FontFamily returns the FontFamily property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#fontfamily
func (i *Image) FontFamily(fontFamily string) *Image {
	p := ba.ctx.Get("Image").New(fontFamily)
	return ImageFromJSObject(p, ba.ctx)
}

// SetFontFamily sets the FontFamily property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#fontfamily
func (i *Image) SetFontFamily(fontFamily string) *Image {
	p := ba.ctx.Get("Image").New(fontFamily)
	return ImageFromJSObject(p, ba.ctx)
}

// FontOffset returns the FontOffset property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#fontoffset
func (i *Image) FontOffset(fontOffset js.Value) *Image {
	p := ba.ctx.Get("Image").New(fontOffset)
	return ImageFromJSObject(p, ba.ctx)
}

// SetFontOffset sets the FontOffset property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#fontoffset
func (i *Image) SetFontOffset(fontOffset js.Value) *Image {
	p := ba.ctx.Get("Image").New(fontOffset)
	return ImageFromJSObject(p, ba.ctx)
}

// FontSize returns the FontSize property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#fontsize
func (i *Image) FontSize(fontSize string) *Image {
	p := ba.ctx.Get("Image").New(fontSize)
	return ImageFromJSObject(p, ba.ctx)
}

// SetFontSize sets the FontSize property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#fontsize
func (i *Image) SetFontSize(fontSize string) *Image {
	p := ba.ctx.Get("Image").New(fontSize)
	return ImageFromJSObject(p, ba.ctx)
}

// FontSizeInPixels returns the FontSizeInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#fontsizeinpixels
func (i *Image) FontSizeInPixels(fontSizeInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(fontSizeInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// SetFontSizeInPixels sets the FontSizeInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#fontsizeinpixels
func (i *Image) SetFontSizeInPixels(fontSizeInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(fontSizeInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// FontStyle returns the FontStyle property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#fontstyle
func (i *Image) FontStyle(fontStyle string) *Image {
	p := ba.ctx.Get("Image").New(fontStyle)
	return ImageFromJSObject(p, ba.ctx)
}

// SetFontStyle sets the FontStyle property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#fontstyle
func (i *Image) SetFontStyle(fontStyle string) *Image {
	p := ba.ctx.Get("Image").New(fontStyle)
	return ImageFromJSObject(p, ba.ctx)
}

// FontWeight returns the FontWeight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#fontweight
func (i *Image) FontWeight(fontWeight string) *Image {
	p := ba.ctx.Get("Image").New(fontWeight)
	return ImageFromJSObject(p, ba.ctx)
}

// SetFontWeight sets the FontWeight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#fontweight
func (i *Image) SetFontWeight(fontWeight string) *Image {
	p := ba.ctx.Get("Image").New(fontWeight)
	return ImageFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_CENTER returns the HORIZONTAL_ALIGNMENT_CENTER property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#horizontal_alignment_center
func (i *Image) HORIZONTAL_ALIGNMENT_CENTER(HORIZONTAL_ALIGNMENT_CENTER float64) *Image {
	p := ba.ctx.Get("Image").New(HORIZONTAL_ALIGNMENT_CENTER)
	return ImageFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_CENTER sets the HORIZONTAL_ALIGNMENT_CENTER property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#horizontal_alignment_center
func (i *Image) SetHORIZONTAL_ALIGNMENT_CENTER(HORIZONTAL_ALIGNMENT_CENTER float64) *Image {
	p := ba.ctx.Get("Image").New(HORIZONTAL_ALIGNMENT_CENTER)
	return ImageFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_LEFT returns the HORIZONTAL_ALIGNMENT_LEFT property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#horizontal_alignment_left
func (i *Image) HORIZONTAL_ALIGNMENT_LEFT(HORIZONTAL_ALIGNMENT_LEFT float64) *Image {
	p := ba.ctx.Get("Image").New(HORIZONTAL_ALIGNMENT_LEFT)
	return ImageFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_LEFT sets the HORIZONTAL_ALIGNMENT_LEFT property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#horizontal_alignment_left
func (i *Image) SetHORIZONTAL_ALIGNMENT_LEFT(HORIZONTAL_ALIGNMENT_LEFT float64) *Image {
	p := ba.ctx.Get("Image").New(HORIZONTAL_ALIGNMENT_LEFT)
	return ImageFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_RIGHT returns the HORIZONTAL_ALIGNMENT_RIGHT property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#horizontal_alignment_right
func (i *Image) HORIZONTAL_ALIGNMENT_RIGHT(HORIZONTAL_ALIGNMENT_RIGHT float64) *Image {
	p := ba.ctx.Get("Image").New(HORIZONTAL_ALIGNMENT_RIGHT)
	return ImageFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_RIGHT sets the HORIZONTAL_ALIGNMENT_RIGHT property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#horizontal_alignment_right
func (i *Image) SetHORIZONTAL_ALIGNMENT_RIGHT(HORIZONTAL_ALIGNMENT_RIGHT float64) *Image {
	p := ba.ctx.Get("Image").New(HORIZONTAL_ALIGNMENT_RIGHT)
	return ImageFromJSObject(p, ba.ctx)
}

// Height returns the Height property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#height
func (i *Image) Height(height string) *Image {
	p := ba.ctx.Get("Image").New(height)
	return ImageFromJSObject(p, ba.ctx)
}

// SetHeight sets the Height property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#height
func (i *Image) SetHeight(height string) *Image {
	p := ba.ctx.Get("Image").New(height)
	return ImageFromJSObject(p, ba.ctx)
}

// HeightInPixels returns the HeightInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#heightinpixels
func (i *Image) HeightInPixels(heightInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(heightInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// SetHeightInPixels sets the HeightInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#heightinpixels
func (i *Image) SetHeightInPixels(heightInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(heightInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// HorizontalAlignment returns the HorizontalAlignment property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#horizontalalignment
func (i *Image) HorizontalAlignment(horizontalAlignment float64) *Image {
	p := ba.ctx.Get("Image").New(horizontalAlignment)
	return ImageFromJSObject(p, ba.ctx)
}

// SetHorizontalAlignment sets the HorizontalAlignment property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#horizontalalignment
func (i *Image) SetHorizontalAlignment(horizontalAlignment float64) *Image {
	p := ba.ctx.Get("Image").New(horizontalAlignment)
	return ImageFromJSObject(p, ba.ctx)
}

// Host returns the Host property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#host
func (i *Image) Host(host *AdvancedDynamicTexture) *Image {
	p := ba.ctx.Get("Image").New(host.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetHost sets the Host property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#host
func (i *Image) SetHost(host *AdvancedDynamicTexture) *Image {
	p := ba.ctx.Get("Image").New(host.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// HoverCursor returns the HoverCursor property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#hovercursor
func (i *Image) HoverCursor(hoverCursor string) *Image {
	p := ba.ctx.Get("Image").New(hoverCursor)
	return ImageFromJSObject(p, ba.ctx)
}

// SetHoverCursor sets the HoverCursor property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#hovercursor
func (i *Image) SetHoverCursor(hoverCursor string) *Image {
	p := ba.ctx.Get("Image").New(hoverCursor)
	return ImageFromJSObject(p, ba.ctx)
}

// IsDirty returns the IsDirty property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#isdirty
func (i *Image) IsDirty(isDirty bool) *Image {
	p := ba.ctx.Get("Image").New(isDirty)
	return ImageFromJSObject(p, ba.ctx)
}

// SetIsDirty sets the IsDirty property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#isdirty
func (i *Image) SetIsDirty(isDirty bool) *Image {
	p := ba.ctx.Get("Image").New(isDirty)
	return ImageFromJSObject(p, ba.ctx)
}

// IsEnabled returns the IsEnabled property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#isenabled
func (i *Image) IsEnabled(isEnabled bool) *Image {
	p := ba.ctx.Get("Image").New(isEnabled)
	return ImageFromJSObject(p, ba.ctx)
}

// SetIsEnabled sets the IsEnabled property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#isenabled
func (i *Image) SetIsEnabled(isEnabled bool) *Image {
	p := ba.ctx.Get("Image").New(isEnabled)
	return ImageFromJSObject(p, ba.ctx)
}

// IsFocusInvisible returns the IsFocusInvisible property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#isfocusinvisible
func (i *Image) IsFocusInvisible(isFocusInvisible bool) *Image {
	p := ba.ctx.Get("Image").New(isFocusInvisible)
	return ImageFromJSObject(p, ba.ctx)
}

// SetIsFocusInvisible sets the IsFocusInvisible property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#isfocusinvisible
func (i *Image) SetIsFocusInvisible(isFocusInvisible bool) *Image {
	p := ba.ctx.Get("Image").New(isFocusInvisible)
	return ImageFromJSObject(p, ba.ctx)
}

// IsHighlighted returns the IsHighlighted property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#ishighlighted
func (i *Image) IsHighlighted(isHighlighted bool) *Image {
	p := ba.ctx.Get("Image").New(isHighlighted)
	return ImageFromJSObject(p, ba.ctx)
}

// SetIsHighlighted sets the IsHighlighted property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#ishighlighted
func (i *Image) SetIsHighlighted(isHighlighted bool) *Image {
	p := ba.ctx.Get("Image").New(isHighlighted)
	return ImageFromJSObject(p, ba.ctx)
}

// IsHitTestVisible returns the IsHitTestVisible property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#ishittestvisible
func (i *Image) IsHitTestVisible(isHitTestVisible bool) *Image {
	p := ba.ctx.Get("Image").New(isHitTestVisible)
	return ImageFromJSObject(p, ba.ctx)
}

// SetIsHitTestVisible sets the IsHitTestVisible property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#ishittestvisible
func (i *Image) SetIsHitTestVisible(isHitTestVisible bool) *Image {
	p := ba.ctx.Get("Image").New(isHitTestVisible)
	return ImageFromJSObject(p, ba.ctx)
}

// IsLoaded returns the IsLoaded property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#isloaded
func (i *Image) IsLoaded(isLoaded bool) *Image {
	p := ba.ctx.Get("Image").New(isLoaded)
	return ImageFromJSObject(p, ba.ctx)
}

// SetIsLoaded sets the IsLoaded property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#isloaded
func (i *Image) SetIsLoaded(isLoaded bool) *Image {
	p := ba.ctx.Get("Image").New(isLoaded)
	return ImageFromJSObject(p, ba.ctx)
}

// IsPointerBlocker returns the IsPointerBlocker property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#ispointerblocker
func (i *Image) IsPointerBlocker(isPointerBlocker bool) *Image {
	p := ba.ctx.Get("Image").New(isPointerBlocker)
	return ImageFromJSObject(p, ba.ctx)
}

// SetIsPointerBlocker sets the IsPointerBlocker property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#ispointerblocker
func (i *Image) SetIsPointerBlocker(isPointerBlocker bool) *Image {
	p := ba.ctx.Get("Image").New(isPointerBlocker)
	return ImageFromJSObject(p, ba.ctx)
}

// IsVisible returns the IsVisible property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#isvisible
func (i *Image) IsVisible(isVisible bool) *Image {
	p := ba.ctx.Get("Image").New(isVisible)
	return ImageFromJSObject(p, ba.ctx)
}

// SetIsVisible sets the IsVisible property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#isvisible
func (i *Image) SetIsVisible(isVisible bool) *Image {
	p := ba.ctx.Get("Image").New(isVisible)
	return ImageFromJSObject(p, ba.ctx)
}

// Left returns the Left property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#left
func (i *Image) Left(left string) *Image {
	p := ba.ctx.Get("Image").New(left)
	return ImageFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#left
func (i *Image) SetLeft(left string) *Image {
	p := ba.ctx.Get("Image").New(left)
	return ImageFromJSObject(p, ba.ctx)
}

// LeftInPixels returns the LeftInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#leftinpixels
func (i *Image) LeftInPixels(leftInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(leftInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// SetLeftInPixels sets the LeftInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#leftinpixels
func (i *Image) SetLeftInPixels(leftInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(leftInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// LinkOffsetX returns the LinkOffsetX property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#linkoffsetx
func (i *Image) LinkOffsetX(linkOffsetX string) *Image {
	p := ba.ctx.Get("Image").New(linkOffsetX)
	return ImageFromJSObject(p, ba.ctx)
}

// SetLinkOffsetX sets the LinkOffsetX property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#linkoffsetx
func (i *Image) SetLinkOffsetX(linkOffsetX string) *Image {
	p := ba.ctx.Get("Image").New(linkOffsetX)
	return ImageFromJSObject(p, ba.ctx)
}

// LinkOffsetXInPixels returns the LinkOffsetXInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#linkoffsetxinpixels
func (i *Image) LinkOffsetXInPixels(linkOffsetXInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(linkOffsetXInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// SetLinkOffsetXInPixels sets the LinkOffsetXInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#linkoffsetxinpixels
func (i *Image) SetLinkOffsetXInPixels(linkOffsetXInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(linkOffsetXInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// LinkOffsetY returns the LinkOffsetY property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#linkoffsety
func (i *Image) LinkOffsetY(linkOffsetY string) *Image {
	p := ba.ctx.Get("Image").New(linkOffsetY)
	return ImageFromJSObject(p, ba.ctx)
}

// SetLinkOffsetY sets the LinkOffsetY property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#linkoffsety
func (i *Image) SetLinkOffsetY(linkOffsetY string) *Image {
	p := ba.ctx.Get("Image").New(linkOffsetY)
	return ImageFromJSObject(p, ba.ctx)
}

// LinkOffsetYInPixels returns the LinkOffsetYInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#linkoffsetyinpixels
func (i *Image) LinkOffsetYInPixels(linkOffsetYInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(linkOffsetYInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// SetLinkOffsetYInPixels sets the LinkOffsetYInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#linkoffsetyinpixels
func (i *Image) SetLinkOffsetYInPixels(linkOffsetYInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(linkOffsetYInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// LinkedMesh returns the LinkedMesh property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#linkedmesh
func (i *Image) LinkedMesh(linkedMesh *AbstractMesh) *Image {
	p := ba.ctx.Get("Image").New(linkedMesh.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetLinkedMesh sets the LinkedMesh property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#linkedmesh
func (i *Image) SetLinkedMesh(linkedMesh *AbstractMesh) *Image {
	p := ba.ctx.Get("Image").New(linkedMesh.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#metadata
func (i *Image) Metadata(metadata interface{}) *Image {
	p := ba.ctx.Get("Image").New(metadata)
	return ImageFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#metadata
func (i *Image) SetMetadata(metadata interface{}) *Image {
	p := ba.ctx.Get("Image").New(metadata)
	return ImageFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#name
func (i *Image) Name(name string) *Image {
	p := ba.ctx.Get("Image").New(name)
	return ImageFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#name
func (i *Image) SetName(name string) *Image {
	p := ba.ctx.Get("Image").New(name)
	return ImageFromJSObject(p, ba.ctx)
}

// NotRenderable returns the NotRenderable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#notrenderable
func (i *Image) NotRenderable(notRenderable bool) *Image {
	p := ba.ctx.Get("Image").New(notRenderable)
	return ImageFromJSObject(p, ba.ctx)
}

// SetNotRenderable sets the NotRenderable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#notrenderable
func (i *Image) SetNotRenderable(notRenderable bool) *Image {
	p := ba.ctx.Get("Image").New(notRenderable)
	return ImageFromJSObject(p, ba.ctx)
}

// OnAfterDrawObservable returns the OnAfterDrawObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onafterdrawobservable
func (i *Image) OnAfterDrawObservable(onAfterDrawObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onAfterDrawObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetOnAfterDrawObservable sets the OnAfterDrawObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onafterdrawobservable
func (i *Image) SetOnAfterDrawObservable(onAfterDrawObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onAfterDrawObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// OnBeforeDrawObservable returns the OnBeforeDrawObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onbeforedrawobservable
func (i *Image) OnBeforeDrawObservable(onBeforeDrawObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onBeforeDrawObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetOnBeforeDrawObservable sets the OnBeforeDrawObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onbeforedrawobservable
func (i *Image) SetOnBeforeDrawObservable(onBeforeDrawObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onBeforeDrawObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// OnDirtyObservable returns the OnDirtyObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#ondirtyobservable
func (i *Image) OnDirtyObservable(onDirtyObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onDirtyObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetOnDirtyObservable sets the OnDirtyObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#ondirtyobservable
func (i *Image) SetOnDirtyObservable(onDirtyObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onDirtyObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// OnImageLoadedObservable returns the OnImageLoadedObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onimageloadedobservable
func (i *Image) OnImageLoadedObservable(onImageLoadedObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onImageLoadedObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetOnImageLoadedObservable sets the OnImageLoadedObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onimageloadedobservable
func (i *Image) SetOnImageLoadedObservable(onImageLoadedObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onImageLoadedObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// OnPointerClickObservable returns the OnPointerClickObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onpointerclickobservable
func (i *Image) OnPointerClickObservable(onPointerClickObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onPointerClickObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetOnPointerClickObservable sets the OnPointerClickObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onpointerclickobservable
func (i *Image) SetOnPointerClickObservable(onPointerClickObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onPointerClickObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// OnPointerDownObservable returns the OnPointerDownObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onpointerdownobservable
func (i *Image) OnPointerDownObservable(onPointerDownObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onPointerDownObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetOnPointerDownObservable sets the OnPointerDownObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onpointerdownobservable
func (i *Image) SetOnPointerDownObservable(onPointerDownObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onPointerDownObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// OnPointerEnterObservable returns the OnPointerEnterObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onpointerenterobservable
func (i *Image) OnPointerEnterObservable(onPointerEnterObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onPointerEnterObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetOnPointerEnterObservable sets the OnPointerEnterObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onpointerenterobservable
func (i *Image) SetOnPointerEnterObservable(onPointerEnterObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onPointerEnterObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// OnPointerMoveObservable returns the OnPointerMoveObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onpointermoveobservable
func (i *Image) OnPointerMoveObservable(onPointerMoveObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onPointerMoveObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetOnPointerMoveObservable sets the OnPointerMoveObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onpointermoveobservable
func (i *Image) SetOnPointerMoveObservable(onPointerMoveObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onPointerMoveObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// OnPointerOutObservable returns the OnPointerOutObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onpointeroutobservable
func (i *Image) OnPointerOutObservable(onPointerOutObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onPointerOutObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetOnPointerOutObservable sets the OnPointerOutObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onpointeroutobservable
func (i *Image) SetOnPointerOutObservable(onPointerOutObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onPointerOutObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// OnPointerUpObservable returns the OnPointerUpObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onpointerupobservable
func (i *Image) OnPointerUpObservable(onPointerUpObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onPointerUpObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetOnPointerUpObservable sets the OnPointerUpObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onpointerupobservable
func (i *Image) SetOnPointerUpObservable(onPointerUpObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onPointerUpObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// OnSVGAttributesComputedObservable returns the OnSVGAttributesComputedObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onsvgattributescomputedobservable
func (i *Image) OnSVGAttributesComputedObservable(onSVGAttributesComputedObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onSVGAttributesComputedObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetOnSVGAttributesComputedObservable sets the OnSVGAttributesComputedObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onsvgattributescomputedobservable
func (i *Image) SetOnSVGAttributesComputedObservable(onSVGAttributesComputedObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onSVGAttributesComputedObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// PaddingBottom returns the PaddingBottom property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingbottom
func (i *Image) PaddingBottom(paddingBottom string) *Image {
	p := ba.ctx.Get("Image").New(paddingBottom)
	return ImageFromJSObject(p, ba.ctx)
}

// SetPaddingBottom sets the PaddingBottom property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingbottom
func (i *Image) SetPaddingBottom(paddingBottom string) *Image {
	p := ba.ctx.Get("Image").New(paddingBottom)
	return ImageFromJSObject(p, ba.ctx)
}

// PaddingBottomInPixels returns the PaddingBottomInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingbottominpixels
func (i *Image) PaddingBottomInPixels(paddingBottomInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(paddingBottomInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// SetPaddingBottomInPixels sets the PaddingBottomInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingbottominpixels
func (i *Image) SetPaddingBottomInPixels(paddingBottomInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(paddingBottomInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// PaddingLeft returns the PaddingLeft property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingleft
func (i *Image) PaddingLeft(paddingLeft string) *Image {
	p := ba.ctx.Get("Image").New(paddingLeft)
	return ImageFromJSObject(p, ba.ctx)
}

// SetPaddingLeft sets the PaddingLeft property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingleft
func (i *Image) SetPaddingLeft(paddingLeft string) *Image {
	p := ba.ctx.Get("Image").New(paddingLeft)
	return ImageFromJSObject(p, ba.ctx)
}

// PaddingLeftInPixels returns the PaddingLeftInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingleftinpixels
func (i *Image) PaddingLeftInPixels(paddingLeftInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(paddingLeftInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// SetPaddingLeftInPixels sets the PaddingLeftInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingleftinpixels
func (i *Image) SetPaddingLeftInPixels(paddingLeftInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(paddingLeftInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// PaddingRight returns the PaddingRight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingright
func (i *Image) PaddingRight(paddingRight string) *Image {
	p := ba.ctx.Get("Image").New(paddingRight)
	return ImageFromJSObject(p, ba.ctx)
}

// SetPaddingRight sets the PaddingRight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingright
func (i *Image) SetPaddingRight(paddingRight string) *Image {
	p := ba.ctx.Get("Image").New(paddingRight)
	return ImageFromJSObject(p, ba.ctx)
}

// PaddingRightInPixels returns the PaddingRightInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingrightinpixels
func (i *Image) PaddingRightInPixels(paddingRightInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(paddingRightInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// SetPaddingRightInPixels sets the PaddingRightInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingrightinpixels
func (i *Image) SetPaddingRightInPixels(paddingRightInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(paddingRightInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// PaddingTop returns the PaddingTop property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingtop
func (i *Image) PaddingTop(paddingTop string) *Image {
	p := ba.ctx.Get("Image").New(paddingTop)
	return ImageFromJSObject(p, ba.ctx)
}

// SetPaddingTop sets the PaddingTop property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingtop
func (i *Image) SetPaddingTop(paddingTop string) *Image {
	p := ba.ctx.Get("Image").New(paddingTop)
	return ImageFromJSObject(p, ba.ctx)
}

// PaddingTopInPixels returns the PaddingTopInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingtopinpixels
func (i *Image) PaddingTopInPixels(paddingTopInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(paddingTopInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// SetPaddingTopInPixels sets the PaddingTopInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#paddingtopinpixels
func (i *Image) SetPaddingTopInPixels(paddingTopInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(paddingTopInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// Parent returns the Parent property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#parent
func (i *Image) Parent(parent *Container) *Image {
	p := ba.ctx.Get("Image").New(parent.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetParent sets the Parent property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#parent
func (i *Image) SetParent(parent *Container) *Image {
	p := ba.ctx.Get("Image").New(parent.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// PopulateNinePatchSlicesFromImage returns the PopulateNinePatchSlicesFromImage property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#populateninepatchslicesfromimage
func (i *Image) PopulateNinePatchSlicesFromImage(populateNinePatchSlicesFromImage bool) *Image {
	p := ba.ctx.Get("Image").New(populateNinePatchSlicesFromImage)
	return ImageFromJSObject(p, ba.ctx)
}

// SetPopulateNinePatchSlicesFromImage sets the PopulateNinePatchSlicesFromImage property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#populateninepatchslicesfromimage
func (i *Image) SetPopulateNinePatchSlicesFromImage(populateNinePatchSlicesFromImage bool) *Image {
	p := ba.ctx.Get("Image").New(populateNinePatchSlicesFromImage)
	return ImageFromJSObject(p, ba.ctx)
}

// Rotation returns the Rotation property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#rotation
func (i *Image) Rotation(rotation float64) *Image {
	p := ba.ctx.Get("Image").New(rotation)
	return ImageFromJSObject(p, ba.ctx)
}

// SetRotation sets the Rotation property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#rotation
func (i *Image) SetRotation(rotation float64) *Image {
	p := ba.ctx.Get("Image").New(rotation)
	return ImageFromJSObject(p, ba.ctx)
}

// STRETCH_EXTEND returns the STRETCH_EXTEND property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_extend
func (i *Image) STRETCH_EXTEND(STRETCH_EXTEND float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_EXTEND)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSTRETCH_EXTEND sets the STRETCH_EXTEND property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_extend
func (i *Image) SetSTRETCH_EXTEND(STRETCH_EXTEND float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_EXTEND)
	return ImageFromJSObject(p, ba.ctx)
}

// STRETCH_FILL returns the STRETCH_FILL property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_fill
func (i *Image) STRETCH_FILL(STRETCH_FILL float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_FILL)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSTRETCH_FILL sets the STRETCH_FILL property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_fill
func (i *Image) SetSTRETCH_FILL(STRETCH_FILL float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_FILL)
	return ImageFromJSObject(p, ba.ctx)
}

// STRETCH_NINE_PATCH returns the STRETCH_NINE_PATCH property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_nine_patch
func (i *Image) STRETCH_NINE_PATCH(STRETCH_NINE_PATCH float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_NINE_PATCH)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSTRETCH_NINE_PATCH sets the STRETCH_NINE_PATCH property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_nine_patch
func (i *Image) SetSTRETCH_NINE_PATCH(STRETCH_NINE_PATCH float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_NINE_PATCH)
	return ImageFromJSObject(p, ba.ctx)
}

// STRETCH_NONE returns the STRETCH_NONE property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_none
func (i *Image) STRETCH_NONE(STRETCH_NONE float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_NONE)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSTRETCH_NONE sets the STRETCH_NONE property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_none
func (i *Image) SetSTRETCH_NONE(STRETCH_NONE float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_NONE)
	return ImageFromJSObject(p, ba.ctx)
}

// STRETCH_UNIFORM returns the STRETCH_UNIFORM property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_uniform
func (i *Image) STRETCH_UNIFORM(STRETCH_UNIFORM float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_UNIFORM)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSTRETCH_UNIFORM sets the STRETCH_UNIFORM property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_uniform
func (i *Image) SetSTRETCH_UNIFORM(STRETCH_UNIFORM float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_UNIFORM)
	return ImageFromJSObject(p, ba.ctx)
}

// ScaleX returns the ScaleX property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#scalex
func (i *Image) ScaleX(scaleX float64) *Image {
	p := ba.ctx.Get("Image").New(scaleX)
	return ImageFromJSObject(p, ba.ctx)
}

// SetScaleX sets the ScaleX property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#scalex
func (i *Image) SetScaleX(scaleX float64) *Image {
	p := ba.ctx.Get("Image").New(scaleX)
	return ImageFromJSObject(p, ba.ctx)
}

// ScaleY returns the ScaleY property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#scaley
func (i *Image) ScaleY(scaleY float64) *Image {
	p := ba.ctx.Get("Image").New(scaleY)
	return ImageFromJSObject(p, ba.ctx)
}

// SetScaleY sets the ScaleY property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#scaley
func (i *Image) SetScaleY(scaleY float64) *Image {
	p := ba.ctx.Get("Image").New(scaleY)
	return ImageFromJSObject(p, ba.ctx)
}

// ShadowBlur returns the ShadowBlur property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#shadowblur
func (i *Image) ShadowBlur(shadowBlur float64) *Image {
	p := ba.ctx.Get("Image").New(shadowBlur)
	return ImageFromJSObject(p, ba.ctx)
}

// SetShadowBlur sets the ShadowBlur property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#shadowblur
func (i *Image) SetShadowBlur(shadowBlur float64) *Image {
	p := ba.ctx.Get("Image").New(shadowBlur)
	return ImageFromJSObject(p, ba.ctx)
}

// ShadowColor returns the ShadowColor property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#shadowcolor
func (i *Image) ShadowColor(shadowColor string) *Image {
	p := ba.ctx.Get("Image").New(shadowColor)
	return ImageFromJSObject(p, ba.ctx)
}

// SetShadowColor sets the ShadowColor property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#shadowcolor
func (i *Image) SetShadowColor(shadowColor string) *Image {
	p := ba.ctx.Get("Image").New(shadowColor)
	return ImageFromJSObject(p, ba.ctx)
}

// ShadowOffsetX returns the ShadowOffsetX property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#shadowoffsetx
func (i *Image) ShadowOffsetX(shadowOffsetX float64) *Image {
	p := ba.ctx.Get("Image").New(shadowOffsetX)
	return ImageFromJSObject(p, ba.ctx)
}

// SetShadowOffsetX sets the ShadowOffsetX property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#shadowoffsetx
func (i *Image) SetShadowOffsetX(shadowOffsetX float64) *Image {
	p := ba.ctx.Get("Image").New(shadowOffsetX)
	return ImageFromJSObject(p, ba.ctx)
}

// ShadowOffsetY returns the ShadowOffsetY property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#shadowoffsety
func (i *Image) ShadowOffsetY(shadowOffsetY float64) *Image {
	p := ba.ctx.Get("Image").New(shadowOffsetY)
	return ImageFromJSObject(p, ba.ctx)
}

// SetShadowOffsetY sets the ShadowOffsetY property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#shadowoffsety
func (i *Image) SetShadowOffsetY(shadowOffsetY float64) *Image {
	p := ba.ctx.Get("Image").New(shadowOffsetY)
	return ImageFromJSObject(p, ba.ctx)
}

// SliceBottom returns the SliceBottom property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#slicebottom
func (i *Image) SliceBottom(sliceBottom float64) *Image {
	p := ba.ctx.Get("Image").New(sliceBottom)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSliceBottom sets the SliceBottom property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#slicebottom
func (i *Image) SetSliceBottom(sliceBottom float64) *Image {
	p := ba.ctx.Get("Image").New(sliceBottom)
	return ImageFromJSObject(p, ba.ctx)
}

// SliceLeft returns the SliceLeft property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sliceleft
func (i *Image) SliceLeft(sliceLeft float64) *Image {
	p := ba.ctx.Get("Image").New(sliceLeft)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSliceLeft sets the SliceLeft property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sliceleft
func (i *Image) SetSliceLeft(sliceLeft float64) *Image {
	p := ba.ctx.Get("Image").New(sliceLeft)
	return ImageFromJSObject(p, ba.ctx)
}

// SliceRight returns the SliceRight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sliceright
func (i *Image) SliceRight(sliceRight float64) *Image {
	p := ba.ctx.Get("Image").New(sliceRight)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSliceRight sets the SliceRight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sliceright
func (i *Image) SetSliceRight(sliceRight float64) *Image {
	p := ba.ctx.Get("Image").New(sliceRight)
	return ImageFromJSObject(p, ba.ctx)
}

// SliceTop returns the SliceTop property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#slicetop
func (i *Image) SliceTop(sliceTop float64) *Image {
	p := ba.ctx.Get("Image").New(sliceTop)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSliceTop sets the SliceTop property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#slicetop
func (i *Image) SetSliceTop(sliceTop float64) *Image {
	p := ba.ctx.Get("Image").New(sliceTop)
	return ImageFromJSObject(p, ba.ctx)
}

// Source returns the Source property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#source
func (i *Image) Source(source string) *Image {
	p := ba.ctx.Get("Image").New(source)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSource sets the Source property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#source
func (i *Image) SetSource(source string) *Image {
	p := ba.ctx.Get("Image").New(source)
	return ImageFromJSObject(p, ba.ctx)
}

// SourceHeight returns the SourceHeight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourceheight
func (i *Image) SourceHeight(sourceHeight float64) *Image {
	p := ba.ctx.Get("Image").New(sourceHeight)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSourceHeight sets the SourceHeight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourceheight
func (i *Image) SetSourceHeight(sourceHeight float64) *Image {
	p := ba.ctx.Get("Image").New(sourceHeight)
	return ImageFromJSObject(p, ba.ctx)
}

// SourceLeft returns the SourceLeft property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourceleft
func (i *Image) SourceLeft(sourceLeft float64) *Image {
	p := ba.ctx.Get("Image").New(sourceLeft)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSourceLeft sets the SourceLeft property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourceleft
func (i *Image) SetSourceLeft(sourceLeft float64) *Image {
	p := ba.ctx.Get("Image").New(sourceLeft)
	return ImageFromJSObject(p, ba.ctx)
}

// SourceTop returns the SourceTop property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourcetop
func (i *Image) SourceTop(sourceTop float64) *Image {
	p := ba.ctx.Get("Image").New(sourceTop)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSourceTop sets the SourceTop property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourcetop
func (i *Image) SetSourceTop(sourceTop float64) *Image {
	p := ba.ctx.Get("Image").New(sourceTop)
	return ImageFromJSObject(p, ba.ctx)
}

// SourceWidth returns the SourceWidth property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourcewidth
func (i *Image) SourceWidth(sourceWidth float64) *Image {
	p := ba.ctx.Get("Image").New(sourceWidth)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSourceWidth sets the SourceWidth property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourcewidth
func (i *Image) SetSourceWidth(sourceWidth float64) *Image {
	p := ba.ctx.Get("Image").New(sourceWidth)
	return ImageFromJSObject(p, ba.ctx)
}

// Stretch returns the Stretch property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch
func (i *Image) Stretch(stretch float64) *Image {
	p := ba.ctx.Get("Image").New(stretch)
	return ImageFromJSObject(p, ba.ctx)
}

// SetStretch sets the Stretch property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch
func (i *Image) SetStretch(stretch float64) *Image {
	p := ba.ctx.Get("Image").New(stretch)
	return ImageFromJSObject(p, ba.ctx)
}

// Style returns the Style property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#style
func (i *Image) Style(style *Style) *Image {
	p := ba.ctx.Get("Image").New(style.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetStyle sets the Style property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#style
func (i *Image) SetStyle(style *Style) *Image {
	p := ba.ctx.Get("Image").New(style.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// Top returns the Top property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#top
func (i *Image) Top(top string) *Image {
	p := ba.ctx.Get("Image").New(top)
	return ImageFromJSObject(p, ba.ctx)
}

// SetTop sets the Top property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#top
func (i *Image) SetTop(top string) *Image {
	p := ba.ctx.Get("Image").New(top)
	return ImageFromJSObject(p, ba.ctx)
}

// TopInPixels returns the TopInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#topinpixels
func (i *Image) TopInPixels(topInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(topInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// SetTopInPixels sets the TopInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#topinpixels
func (i *Image) SetTopInPixels(topInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(topInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// TransformCenterX returns the TransformCenterX property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#transformcenterx
func (i *Image) TransformCenterX(transformCenterX float64) *Image {
	p := ba.ctx.Get("Image").New(transformCenterX)
	return ImageFromJSObject(p, ba.ctx)
}

// SetTransformCenterX sets the TransformCenterX property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#transformcenterx
func (i *Image) SetTransformCenterX(transformCenterX float64) *Image {
	p := ba.ctx.Get("Image").New(transformCenterX)
	return ImageFromJSObject(p, ba.ctx)
}

// TransformCenterY returns the TransformCenterY property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#transformcentery
func (i *Image) TransformCenterY(transformCenterY float64) *Image {
	p := ba.ctx.Get("Image").New(transformCenterY)
	return ImageFromJSObject(p, ba.ctx)
}

// SetTransformCenterY sets the TransformCenterY property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#transformcentery
func (i *Image) SetTransformCenterY(transformCenterY float64) *Image {
	p := ba.ctx.Get("Image").New(transformCenterY)
	return ImageFromJSObject(p, ba.ctx)
}

// TypeName returns the TypeName property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#typename
func (i *Image) TypeName(typeName string) *Image {
	p := ba.ctx.Get("Image").New(typeName)
	return ImageFromJSObject(p, ba.ctx)
}

// SetTypeName sets the TypeName property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#typename
func (i *Image) SetTypeName(typeName string) *Image {
	p := ba.ctx.Get("Image").New(typeName)
	return ImageFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#uniqueid
func (i *Image) UniqueId(uniqueId float64) *Image {
	p := ba.ctx.Get("Image").New(uniqueId)
	return ImageFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#uniqueid
func (i *Image) SetUniqueId(uniqueId float64) *Image {
	p := ba.ctx.Get("Image").New(uniqueId)
	return ImageFromJSObject(p, ba.ctx)
}

// UseBitmapCache returns the UseBitmapCache property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#usebitmapcache
func (i *Image) UseBitmapCache(useBitmapCache bool) *Image {
	p := ba.ctx.Get("Image").New(useBitmapCache)
	return ImageFromJSObject(p, ba.ctx)
}

// SetUseBitmapCache sets the UseBitmapCache property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#usebitmapcache
func (i *Image) SetUseBitmapCache(useBitmapCache bool) *Image {
	p := ba.ctx.Get("Image").New(useBitmapCache)
	return ImageFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_BOTTOM returns the VERTICAL_ALIGNMENT_BOTTOM property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#vertical_alignment_bottom
func (i *Image) VERTICAL_ALIGNMENT_BOTTOM(VERTICAL_ALIGNMENT_BOTTOM float64) *Image {
	p := ba.ctx.Get("Image").New(VERTICAL_ALIGNMENT_BOTTOM)
	return ImageFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_BOTTOM sets the VERTICAL_ALIGNMENT_BOTTOM property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#vertical_alignment_bottom
func (i *Image) SetVERTICAL_ALIGNMENT_BOTTOM(VERTICAL_ALIGNMENT_BOTTOM float64) *Image {
	p := ba.ctx.Get("Image").New(VERTICAL_ALIGNMENT_BOTTOM)
	return ImageFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_CENTER returns the VERTICAL_ALIGNMENT_CENTER property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#vertical_alignment_center
func (i *Image) VERTICAL_ALIGNMENT_CENTER(VERTICAL_ALIGNMENT_CENTER float64) *Image {
	p := ba.ctx.Get("Image").New(VERTICAL_ALIGNMENT_CENTER)
	return ImageFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_CENTER sets the VERTICAL_ALIGNMENT_CENTER property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#vertical_alignment_center
func (i *Image) SetVERTICAL_ALIGNMENT_CENTER(VERTICAL_ALIGNMENT_CENTER float64) *Image {
	p := ba.ctx.Get("Image").New(VERTICAL_ALIGNMENT_CENTER)
	return ImageFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_TOP returns the VERTICAL_ALIGNMENT_TOP property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#vertical_alignment_top
func (i *Image) VERTICAL_ALIGNMENT_TOP(VERTICAL_ALIGNMENT_TOP float64) *Image {
	p := ba.ctx.Get("Image").New(VERTICAL_ALIGNMENT_TOP)
	return ImageFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_TOP sets the VERTICAL_ALIGNMENT_TOP property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#vertical_alignment_top
func (i *Image) SetVERTICAL_ALIGNMENT_TOP(VERTICAL_ALIGNMENT_TOP float64) *Image {
	p := ba.ctx.Get("Image").New(VERTICAL_ALIGNMENT_TOP)
	return ImageFromJSObject(p, ba.ctx)
}

// VerticalAlignment returns the VerticalAlignment property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#verticalalignment
func (i *Image) VerticalAlignment(verticalAlignment float64) *Image {
	p := ba.ctx.Get("Image").New(verticalAlignment)
	return ImageFromJSObject(p, ba.ctx)
}

// SetVerticalAlignment sets the VerticalAlignment property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#verticalalignment
func (i *Image) SetVerticalAlignment(verticalAlignment float64) *Image {
	p := ba.ctx.Get("Image").New(verticalAlignment)
	return ImageFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#width
func (i *Image) Width(width string) *Image {
	p := ba.ctx.Get("Image").New(width)
	return ImageFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#width
func (i *Image) SetWidth(width string) *Image {
	p := ba.ctx.Get("Image").New(width)
	return ImageFromJSObject(p, ba.ctx)
}

// WidthInPixels returns the WidthInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#widthinpixels
func (i *Image) WidthInPixels(widthInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(widthInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// SetWidthInPixels sets the WidthInPixels property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#widthinpixels
func (i *Image) SetWidthInPixels(widthInPixels float64) *Image {
	p := ba.ctx.Get("Image").New(widthInPixels)
	return ImageFromJSObject(p, ba.ctx)
}

// ZIndex returns the ZIndex property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#zindex
func (i *Image) ZIndex(zIndex float64) *Image {
	p := ba.ctx.Get("Image").New(zIndex)
	return ImageFromJSObject(p, ba.ctx)
}

// SetZIndex sets the ZIndex property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#zindex
func (i *Image) SetZIndex(zIndex float64) *Image {
	p := ba.ctx.Get("Image").New(zIndex)
	return ImageFromJSObject(p, ba.ctx)
}

*/
