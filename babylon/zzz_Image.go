// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Image represents a babylon.js Image.
// Class used to create 2D images
type Image struct {
	*Control
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *Image) JSObject() js.Value { return i.p }

// Image returns a Image JavaScript class.
func (ba *Babylon) Image() *Image {
	p := ba.ctx.Get("Image")
	return ImageFromJSObject(p, ba.ctx)
}

// ImageFromJSObject returns a wrapped Image JavaScript class.
func ImageFromJSObject(p js.Value, ctx js.Value) *Image {
	return &Image{Control: ControlFromJSObject(p, ctx), ctx: ctx}
}

// ImageArrayToJSArray returns a JavaScript Array for the wrapped array.
func ImageArrayToJSArray(array []*Image) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewImageOpts contains optional parameters for NewImage.
type NewImageOpts struct {
	Name *string
	Url  *string
}

// NewImage returns a new Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image
func (ba *Babylon) NewImage(opts *NewImageOpts) *Image {
	if opts == nil {
		opts = &NewImageOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}
	if opts.Url == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Url)
	}

	p := ba.ctx.Get("Image").New(args...)
	return ImageFromJSObject(p, ba.ctx)
}

// Contains calls the Contains method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#contains
func (i *Image) Contains(x float64, y float64) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, x)
	args = append(args, y)

	retVal := i.p.Call("contains", args...)
	return retVal.Bool()
}

// Dispose calls the Dispose method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#dispose
func (i *Image) Dispose() {

	i.p.Call("dispose")
}

// SynchronizeSizeWithContent calls the SynchronizeSizeWithContent method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#synchronizesizewithcontent
func (i *Image) SynchronizeSizeWithContent() {

	i.p.Call("synchronizeSizeWithContent")
}

// _draw calls the _draw method on the Image object.
//
// https://doc.babylonjs.com/api/classes/babylon.image#_draw
func (i *Image) _draw(context js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, context)

	i.p.Call("_draw", args...)
}

/*

// AutoScale returns the AutoScale property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#autoscale
func (i *Image) AutoScale(autoScale bool) *Image {
	p := ba.ctx.Get("Image").New(autoScale)
	return ImageFromJSObject(p, ba.ctx)
}

// SetAutoScale sets the AutoScale property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#autoscale
func (i *Image) SetAutoScale(autoScale bool) *Image {
	p := ba.ctx.Get("Image").New(autoScale)
	return ImageFromJSObject(p, ba.ctx)
}

// CellHeight returns the CellHeight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#cellheight
func (i *Image) CellHeight(cellHeight float64) *Image {
	p := ba.ctx.Get("Image").New(cellHeight)
	return ImageFromJSObject(p, ba.ctx)
}

// SetCellHeight sets the CellHeight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#cellheight
func (i *Image) SetCellHeight(cellHeight float64) *Image {
	p := ba.ctx.Get("Image").New(cellHeight)
	return ImageFromJSObject(p, ba.ctx)
}

// CellId returns the CellId property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#cellid
func (i *Image) CellId(cellId float64) *Image {
	p := ba.ctx.Get("Image").New(cellId)
	return ImageFromJSObject(p, ba.ctx)
}

// SetCellId sets the CellId property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#cellid
func (i *Image) SetCellId(cellId float64) *Image {
	p := ba.ctx.Get("Image").New(cellId)
	return ImageFromJSObject(p, ba.ctx)
}

// CellWidth returns the CellWidth property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#cellwidth
func (i *Image) CellWidth(cellWidth float64) *Image {
	p := ba.ctx.Get("Image").New(cellWidth)
	return ImageFromJSObject(p, ba.ctx)
}

// SetCellWidth sets the CellWidth property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#cellwidth
func (i *Image) SetCellWidth(cellWidth float64) *Image {
	p := ba.ctx.Get("Image").New(cellWidth)
	return ImageFromJSObject(p, ba.ctx)
}

// DetectPointerOnOpaqueOnly returns the DetectPointerOnOpaqueOnly property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#detectpointeronopaqueonly
func (i *Image) DetectPointerOnOpaqueOnly(detectPointerOnOpaqueOnly bool) *Image {
	p := ba.ctx.Get("Image").New(detectPointerOnOpaqueOnly)
	return ImageFromJSObject(p, ba.ctx)
}

// SetDetectPointerOnOpaqueOnly sets the DetectPointerOnOpaqueOnly property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#detectpointeronopaqueonly
func (i *Image) SetDetectPointerOnOpaqueOnly(detectPointerOnOpaqueOnly bool) *Image {
	p := ba.ctx.Get("Image").New(detectPointerOnOpaqueOnly)
	return ImageFromJSObject(p, ba.ctx)
}

// DomImage returns the DomImage property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#domimage
func (i *Image) DomImage(domImage js.Value) *Image {
	p := ba.ctx.Get("Image").New(domImage)
	return ImageFromJSObject(p, ba.ctx)
}

// SetDomImage sets the DomImage property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#domimage
func (i *Image) SetDomImage(domImage js.Value) *Image {
	p := ba.ctx.Get("Image").New(domImage)
	return ImageFromJSObject(p, ba.ctx)
}

// IsLoaded returns the IsLoaded property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#isloaded
func (i *Image) IsLoaded(isLoaded bool) *Image {
	p := ba.ctx.Get("Image").New(isLoaded)
	return ImageFromJSObject(p, ba.ctx)
}

// SetIsLoaded sets the IsLoaded property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#isloaded
func (i *Image) SetIsLoaded(isLoaded bool) *Image {
	p := ba.ctx.Get("Image").New(isLoaded)
	return ImageFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#name
func (i *Image) Name(name string) *Image {
	p := ba.ctx.Get("Image").New(name)
	return ImageFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#name
func (i *Image) SetName(name string) *Image {
	p := ba.ctx.Get("Image").New(name)
	return ImageFromJSObject(p, ba.ctx)
}

// OnImageLoadedObservable returns the OnImageLoadedObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onimageloadedobservable
func (i *Image) OnImageLoadedObservable(onImageLoadedObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onImageLoadedObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetOnImageLoadedObservable sets the OnImageLoadedObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onimageloadedobservable
func (i *Image) SetOnImageLoadedObservable(onImageLoadedObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onImageLoadedObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// OnSVGAttributesComputedObservable returns the OnSVGAttributesComputedObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onsvgattributescomputedobservable
func (i *Image) OnSVGAttributesComputedObservable(onSVGAttributesComputedObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onSVGAttributesComputedObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// SetOnSVGAttributesComputedObservable sets the OnSVGAttributesComputedObservable property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#onsvgattributescomputedobservable
func (i *Image) SetOnSVGAttributesComputedObservable(onSVGAttributesComputedObservable *Observable) *Image {
	p := ba.ctx.Get("Image").New(onSVGAttributesComputedObservable.JSObject())
	return ImageFromJSObject(p, ba.ctx)
}

// PopulateNinePatchSlicesFromImage returns the PopulateNinePatchSlicesFromImage property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#populateninepatchslicesfromimage
func (i *Image) PopulateNinePatchSlicesFromImage(populateNinePatchSlicesFromImage bool) *Image {
	p := ba.ctx.Get("Image").New(populateNinePatchSlicesFromImage)
	return ImageFromJSObject(p, ba.ctx)
}

// SetPopulateNinePatchSlicesFromImage sets the PopulateNinePatchSlicesFromImage property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#populateninepatchslicesfromimage
func (i *Image) SetPopulateNinePatchSlicesFromImage(populateNinePatchSlicesFromImage bool) *Image {
	p := ba.ctx.Get("Image").New(populateNinePatchSlicesFromImage)
	return ImageFromJSObject(p, ba.ctx)
}

// STRETCH_EXTEND returns the STRETCH_EXTEND property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_extend
func (i *Image) STRETCH_EXTEND(STRETCH_EXTEND float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_EXTEND)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSTRETCH_EXTEND sets the STRETCH_EXTEND property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_extend
func (i *Image) SetSTRETCH_EXTEND(STRETCH_EXTEND float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_EXTEND)
	return ImageFromJSObject(p, ba.ctx)
}

// STRETCH_FILL returns the STRETCH_FILL property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_fill
func (i *Image) STRETCH_FILL(STRETCH_FILL float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_FILL)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSTRETCH_FILL sets the STRETCH_FILL property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_fill
func (i *Image) SetSTRETCH_FILL(STRETCH_FILL float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_FILL)
	return ImageFromJSObject(p, ba.ctx)
}

// STRETCH_NINE_PATCH returns the STRETCH_NINE_PATCH property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_nine_patch
func (i *Image) STRETCH_NINE_PATCH(STRETCH_NINE_PATCH float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_NINE_PATCH)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSTRETCH_NINE_PATCH sets the STRETCH_NINE_PATCH property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_nine_patch
func (i *Image) SetSTRETCH_NINE_PATCH(STRETCH_NINE_PATCH float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_NINE_PATCH)
	return ImageFromJSObject(p, ba.ctx)
}

// STRETCH_NONE returns the STRETCH_NONE property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_none
func (i *Image) STRETCH_NONE(STRETCH_NONE float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_NONE)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSTRETCH_NONE sets the STRETCH_NONE property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_none
func (i *Image) SetSTRETCH_NONE(STRETCH_NONE float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_NONE)
	return ImageFromJSObject(p, ba.ctx)
}

// STRETCH_UNIFORM returns the STRETCH_UNIFORM property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_uniform
func (i *Image) STRETCH_UNIFORM(STRETCH_UNIFORM float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_UNIFORM)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSTRETCH_UNIFORM sets the STRETCH_UNIFORM property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch_uniform
func (i *Image) SetSTRETCH_UNIFORM(STRETCH_UNIFORM float64) *Image {
	p := ba.ctx.Get("Image").New(STRETCH_UNIFORM)
	return ImageFromJSObject(p, ba.ctx)
}

// SliceBottom returns the SliceBottom property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#slicebottom
func (i *Image) SliceBottom(sliceBottom float64) *Image {
	p := ba.ctx.Get("Image").New(sliceBottom)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSliceBottom sets the SliceBottom property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#slicebottom
func (i *Image) SetSliceBottom(sliceBottom float64) *Image {
	p := ba.ctx.Get("Image").New(sliceBottom)
	return ImageFromJSObject(p, ba.ctx)
}

// SliceLeft returns the SliceLeft property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sliceleft
func (i *Image) SliceLeft(sliceLeft float64) *Image {
	p := ba.ctx.Get("Image").New(sliceLeft)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSliceLeft sets the SliceLeft property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sliceleft
func (i *Image) SetSliceLeft(sliceLeft float64) *Image {
	p := ba.ctx.Get("Image").New(sliceLeft)
	return ImageFromJSObject(p, ba.ctx)
}

// SliceRight returns the SliceRight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sliceright
func (i *Image) SliceRight(sliceRight float64) *Image {
	p := ba.ctx.Get("Image").New(sliceRight)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSliceRight sets the SliceRight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sliceright
func (i *Image) SetSliceRight(sliceRight float64) *Image {
	p := ba.ctx.Get("Image").New(sliceRight)
	return ImageFromJSObject(p, ba.ctx)
}

// SliceTop returns the SliceTop property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#slicetop
func (i *Image) SliceTop(sliceTop float64) *Image {
	p := ba.ctx.Get("Image").New(sliceTop)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSliceTop sets the SliceTop property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#slicetop
func (i *Image) SetSliceTop(sliceTop float64) *Image {
	p := ba.ctx.Get("Image").New(sliceTop)
	return ImageFromJSObject(p, ba.ctx)
}

// Source returns the Source property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#source
func (i *Image) Source(source string) *Image {
	p := ba.ctx.Get("Image").New(source)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSource sets the Source property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#source
func (i *Image) SetSource(source string) *Image {
	p := ba.ctx.Get("Image").New(source)
	return ImageFromJSObject(p, ba.ctx)
}

// SourceHeight returns the SourceHeight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourceheight
func (i *Image) SourceHeight(sourceHeight float64) *Image {
	p := ba.ctx.Get("Image").New(sourceHeight)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSourceHeight sets the SourceHeight property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourceheight
func (i *Image) SetSourceHeight(sourceHeight float64) *Image {
	p := ba.ctx.Get("Image").New(sourceHeight)
	return ImageFromJSObject(p, ba.ctx)
}

// SourceLeft returns the SourceLeft property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourceleft
func (i *Image) SourceLeft(sourceLeft float64) *Image {
	p := ba.ctx.Get("Image").New(sourceLeft)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSourceLeft sets the SourceLeft property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourceleft
func (i *Image) SetSourceLeft(sourceLeft float64) *Image {
	p := ba.ctx.Get("Image").New(sourceLeft)
	return ImageFromJSObject(p, ba.ctx)
}

// SourceTop returns the SourceTop property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourcetop
func (i *Image) SourceTop(sourceTop float64) *Image {
	p := ba.ctx.Get("Image").New(sourceTop)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSourceTop sets the SourceTop property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourcetop
func (i *Image) SetSourceTop(sourceTop float64) *Image {
	p := ba.ctx.Get("Image").New(sourceTop)
	return ImageFromJSObject(p, ba.ctx)
}

// SourceWidth returns the SourceWidth property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourcewidth
func (i *Image) SourceWidth(sourceWidth float64) *Image {
	p := ba.ctx.Get("Image").New(sourceWidth)
	return ImageFromJSObject(p, ba.ctx)
}

// SetSourceWidth sets the SourceWidth property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#sourcewidth
func (i *Image) SetSourceWidth(sourceWidth float64) *Image {
	p := ba.ctx.Get("Image").New(sourceWidth)
	return ImageFromJSObject(p, ba.ctx)
}

// Stretch returns the Stretch property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch
func (i *Image) Stretch(stretch float64) *Image {
	p := ba.ctx.Get("Image").New(stretch)
	return ImageFromJSObject(p, ba.ctx)
}

// SetStretch sets the Stretch property of class Image.
//
// https://doc.babylonjs.com/api/classes/babylon.image#stretch
func (i *Image) SetStretch(stretch float64) *Image {
	p := ba.ctx.Get("Image").New(stretch)
	return ImageFromJSObject(p, ba.ctx)
}

*/
