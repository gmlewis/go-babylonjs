// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// EffectRenderer represents a babylon.js EffectRenderer.
// Helper class to render one or more effects
type EffectRenderer struct{ p js.Value }

// JSObject returns the underlying js.Value.
func (e *EffectRenderer) JSObject() js.Value { return e.p }

// EffectRenderer returns a EffectRenderer JavaScript class.
func (ba *Babylon) EffectRenderer() *EffectRenderer {
	p := ba.ctx.Get("EffectRenderer")
	return EffectRendererFromJSObject(p)
}

// EffectRendererFromJSObject returns a wrapped EffectRenderer JavaScript class.
func EffectRendererFromJSObject(p js.Value) *EffectRenderer {
	return &EffectRenderer{p: p}
}

// NewEffectRendererOpts contains optional parameters for NewEffectRenderer.
type NewEffectRendererOpts struct {
	Options *JSValue
}

// NewEffectRenderer returns a new EffectRenderer object.
//
// https://doc.babylonjs.com/api/classes/babylon.effectrenderer
func (ba *Babylon) NewEffectRenderer(engine *ThinEngine, opts *NewEffectRendererOpts) *EffectRenderer {
	if opts == nil {
		opts = &NewEffectRendererOpts{}
	}

	p := ba.ctx.Get("EffectRenderer").New(engine.JSObject(), opts.Options.JSObject())
	return EffectRendererFromJSObject(p)
}

// TODO: methods
