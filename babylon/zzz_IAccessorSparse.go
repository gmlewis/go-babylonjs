// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IAccessorSparse represents a babylon.js IAccessorSparse.
// Sparse storage of attributes that deviate from their initialization value
type IAccessorSparse struct {
	*IProperty
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IAccessorSparse) JSObject() js.Value { return i.p }

// IAccessorSparse returns a IAccessorSparse JavaScript class.
func (ba *Babylon) IAccessorSparse() *IAccessorSparse {
	p := ba.ctx.Get("IAccessorSparse")
	return IAccessorSparseFromJSObject(p, ba.ctx)
}

// IAccessorSparseFromJSObject returns a wrapped IAccessorSparse JavaScript class.
func IAccessorSparseFromJSObject(p js.Value, ctx js.Value) *IAccessorSparse {
	return &IAccessorSparse{IProperty: IPropertyFromJSObject(p, ctx), ctx: ctx}
}

// IAccessorSparseArrayToJSArray returns a JavaScript Array for the wrapped array.
func IAccessorSparseArrayToJSArray(array []*IAccessorSparse) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Count returns the Count property of class IAccessorSparse.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessorsparse#count
func (i *IAccessorSparse) Count() float64 {
	retVal := i.p.Get("count")
	return retVal.Float()
}

// SetCount sets the Count property of class IAccessorSparse.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessorsparse#count
func (i *IAccessorSparse) SetCount(count float64) *IAccessorSparse {
	i.p.Set("count", count)
	return i
}

// Indices returns the Indices property of class IAccessorSparse.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessorsparse#indices
func (i *IAccessorSparse) Indices() *IAccessorSparseIndices {
	retVal := i.p.Get("indices")
	return IAccessorSparseIndicesFromJSObject(retVal, i.ctx)
}

// SetIndices sets the Indices property of class IAccessorSparse.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessorsparse#indices
func (i *IAccessorSparse) SetIndices(indices *IAccessorSparseIndices) *IAccessorSparse {
	i.p.Set("indices", indices.JSObject())
	return i
}

// Values returns the Values property of class IAccessorSparse.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessorsparse#values
func (i *IAccessorSparse) Values() *IAccessorSparseValues {
	retVal := i.p.Get("values")
	return IAccessorSparseValuesFromJSObject(retVal, i.ctx)
}

// SetValues sets the Values property of class IAccessorSparse.
//
// https://doc.babylonjs.com/api/classes/babylon.iaccessorsparse#values
func (i *IAccessorSparse) SetValues(values *IAccessorSparseValues) *IAccessorSparse {
	i.p.Set("values", values.JSObject())
	return i
}
