// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MarbleProceduralTexture represents a babylon.js MarbleProceduralTexture.
//
type MarbleProceduralTexture struct{ *ProceduralTexture }

// JSObject returns the underlying js.Value.
func (m *MarbleProceduralTexture) JSObject() js.Value { return m.p }

// MarbleProceduralTexture returns a MarbleProceduralTexture JavaScript class.
func (ba *Babylon) MarbleProceduralTexture() *MarbleProceduralTexture {
	p := ba.ctx.Get("MarbleProceduralTexture")
	return MarbleProceduralTextureFromJSObject(p)
}

// MarbleProceduralTextureFromJSObject returns a wrapped MarbleProceduralTexture JavaScript class.
func MarbleProceduralTextureFromJSObject(p js.Value) *MarbleProceduralTexture {
	return &MarbleProceduralTexture{ProceduralTextureFromJSObject(p)}
}

// NewMarbleProceduralTextureOpts contains optional parameters for NewMarbleProceduralTexture.
type NewMarbleProceduralTextureOpts struct {
	FallbackTexture *Texture

	GenerateMipMaps *JSBool
}

// NewMarbleProceduralTexture returns a new MarbleProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.marbleproceduraltexture
func (ba *Babylon) NewMarbleProceduralTexture(name string, size float64, scene *Scene, opts *NewMarbleProceduralTextureOpts) *MarbleProceduralTexture {
	if opts == nil {
		opts = &NewMarbleProceduralTextureOpts{}
	}

	p := ba.ctx.Get("MarbleProceduralTexture").New(name, size, scene.JSObject(), opts.FallbackTexture.JSObject(), opts.GenerateMipMaps)
	return MarbleProceduralTextureFromJSObject(p)
}

// TODO: methods
