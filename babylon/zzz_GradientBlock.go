// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// GradientBlock represents a babylon.js GradientBlock.
// Block used to return a color from a gradient based on an input value between 0 and 1
type GradientBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (g *GradientBlock) JSObject() js.Value { return g.p }

// GradientBlock returns a GradientBlock JavaScript class.
func (ba *Babylon) GradientBlock() *GradientBlock {
	p := ba.ctx.Get("GradientBlock")
	return GradientBlockFromJSObject(p, ba.ctx)
}

// GradientBlockFromJSObject returns a wrapped GradientBlock JavaScript class.
func GradientBlockFromJSObject(p js.Value, ctx js.Value) *GradientBlock {
	return &GradientBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// GradientBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func GradientBlockArrayToJSArray(array []*GradientBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewGradientBlock returns a new GradientBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientblock
func (ba *Babylon) NewGradientBlock(name string) *GradientBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("GradientBlock").New(args...)
	return GradientBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the GradientBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientblock#getclassname
func (g *GradientBlock) GetClassName() string {

	retVal := g.p.Call("getClassName")
	return retVal.String()
}

// Serialize calls the Serialize method on the GradientBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientblock#serialize
func (g *GradientBlock) Serialize() interface{} {

	retVal := g.p.Call("serialize")
	return retVal
}

// _deserialize calls the _deserialize method on the GradientBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientblock#_deserialize
func (g *GradientBlock) _deserialize(serializationObject interface{}, scene *Scene, rootUrl string) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, serializationObject)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	g.p.Call("_deserialize", args...)
}

/*

// ColorSteps returns the ColorSteps property of class GradientBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientblock#colorsteps
func (g *GradientBlock) ColorSteps(colorSteps *GradientBlockColorStep) *GradientBlock {
	p := ba.ctx.Get("GradientBlock").New(colorSteps.JSObject())
	return GradientBlockFromJSObject(p, ba.ctx)
}

// SetColorSteps sets the ColorSteps property of class GradientBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientblock#colorsteps
func (g *GradientBlock) SetColorSteps(colorSteps *GradientBlockColorStep) *GradientBlock {
	p := ba.ctx.Get("GradientBlock").New(colorSteps.JSObject())
	return GradientBlockFromJSObject(p, ba.ctx)
}

// Gradient returns the Gradient property of class GradientBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientblock#gradient
func (g *GradientBlock) Gradient(gradient *NodeMaterialConnectionPoint) *GradientBlock {
	p := ba.ctx.Get("GradientBlock").New(gradient.JSObject())
	return GradientBlockFromJSObject(p, ba.ctx)
}

// SetGradient sets the Gradient property of class GradientBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientblock#gradient
func (g *GradientBlock) SetGradient(gradient *NodeMaterialConnectionPoint) *GradientBlock {
	p := ba.ctx.Get("GradientBlock").New(gradient.JSObject())
	return GradientBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class GradientBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientblock#output
func (g *GradientBlock) Output(output *NodeMaterialConnectionPoint) *GradientBlock {
	p := ba.ctx.Get("GradientBlock").New(output.JSObject())
	return GradientBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class GradientBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientblock#output
func (g *GradientBlock) SetOutput(output *NodeMaterialConnectionPoint) *GradientBlock {
	p := ba.ctx.Get("GradientBlock").New(output.JSObject())
	return GradientBlockFromJSObject(p, ba.ctx)
}

*/
