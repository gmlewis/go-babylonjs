// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IShaderMaterialOptions represents a babylon.js IShaderMaterialOptions.
// Defines the options associated with the creation of a shader material.
type IShaderMaterialOptions struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IShaderMaterialOptions) JSObject() js.Value { return i.p }

// IShaderMaterialOptions returns a IShaderMaterialOptions JavaScript class.
func (ba *Babylon) IShaderMaterialOptions() *IShaderMaterialOptions {
	p := ba.ctx.Get("IShaderMaterialOptions")
	return IShaderMaterialOptionsFromJSObject(p, ba.ctx)
}

// IShaderMaterialOptionsFromJSObject returns a wrapped IShaderMaterialOptions JavaScript class.
func IShaderMaterialOptionsFromJSObject(p js.Value, ctx js.Value) *IShaderMaterialOptions {
	return &IShaderMaterialOptions{p: p, ctx: ctx}
}

// IShaderMaterialOptionsArrayToJSArray returns a JavaScript Array for the wrapped array.
func IShaderMaterialOptionsArrayToJSArray(array []*IShaderMaterialOptions) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Attributes returns the Attributes property of class IShaderMaterialOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadermaterialoptions#attributes
func (i *IShaderMaterialOptions) Attributes() []string {
	retVal := i.p.Get("attributes")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetAttributes sets the Attributes property of class IShaderMaterialOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadermaterialoptions#attributes
func (i *IShaderMaterialOptions) SetAttributes(attributes []string) *IShaderMaterialOptions {
	i.p.Set("attributes", attributes)
	return i
}

// Defines returns the Defines property of class IShaderMaterialOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadermaterialoptions#defines
func (i *IShaderMaterialOptions) Defines() []string {
	retVal := i.p.Get("defines")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetDefines sets the Defines property of class IShaderMaterialOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadermaterialoptions#defines
func (i *IShaderMaterialOptions) SetDefines(defines []string) *IShaderMaterialOptions {
	i.p.Set("defines", defines)
	return i
}

// NeedAlphaBlending returns the NeedAlphaBlending property of class IShaderMaterialOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadermaterialoptions#needalphablending
func (i *IShaderMaterialOptions) NeedAlphaBlending() bool {
	retVal := i.p.Get("needAlphaBlending")
	return retVal.Bool()
}

// SetNeedAlphaBlending sets the NeedAlphaBlending property of class IShaderMaterialOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadermaterialoptions#needalphablending
func (i *IShaderMaterialOptions) SetNeedAlphaBlending(needAlphaBlending bool) *IShaderMaterialOptions {
	i.p.Set("needAlphaBlending", needAlphaBlending)
	return i
}

// NeedAlphaTesting returns the NeedAlphaTesting property of class IShaderMaterialOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadermaterialoptions#needalphatesting
func (i *IShaderMaterialOptions) NeedAlphaTesting() bool {
	retVal := i.p.Get("needAlphaTesting")
	return retVal.Bool()
}

// SetNeedAlphaTesting sets the NeedAlphaTesting property of class IShaderMaterialOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadermaterialoptions#needalphatesting
func (i *IShaderMaterialOptions) SetNeedAlphaTesting(needAlphaTesting bool) *IShaderMaterialOptions {
	i.p.Set("needAlphaTesting", needAlphaTesting)
	return i
}

// Samplers returns the Samplers property of class IShaderMaterialOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadermaterialoptions#samplers
func (i *IShaderMaterialOptions) Samplers() []string {
	retVal := i.p.Get("samplers")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetSamplers sets the Samplers property of class IShaderMaterialOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadermaterialoptions#samplers
func (i *IShaderMaterialOptions) SetSamplers(samplers []string) *IShaderMaterialOptions {
	i.p.Set("samplers", samplers)
	return i
}

// UniformBuffers returns the UniformBuffers property of class IShaderMaterialOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadermaterialoptions#uniformbuffers
func (i *IShaderMaterialOptions) UniformBuffers() []string {
	retVal := i.p.Get("uniformBuffers")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetUniformBuffers sets the UniformBuffers property of class IShaderMaterialOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadermaterialoptions#uniformbuffers
func (i *IShaderMaterialOptions) SetUniformBuffers(uniformBuffers []string) *IShaderMaterialOptions {
	i.p.Set("uniformBuffers", uniformBuffers)
	return i
}

// Uniforms returns the Uniforms property of class IShaderMaterialOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadermaterialoptions#uniforms
func (i *IShaderMaterialOptions) Uniforms() []string {
	retVal := i.p.Get("uniforms")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetUniforms sets the Uniforms property of class IShaderMaterialOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadermaterialoptions#uniforms
func (i *IShaderMaterialOptions) SetUniforms(uniforms []string) *IShaderMaterialOptions {
	i.p.Set("uniforms", uniforms)
	return i
}
