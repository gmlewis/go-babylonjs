// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IDracoCompressionConfiguration represents a babylon.js IDracoCompressionConfiguration.
// Configuration for Draco compression
type IDracoCompressionConfiguration struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IDracoCompressionConfiguration) JSObject() js.Value { return i.p }

// IDracoCompressionConfiguration returns a IDracoCompressionConfiguration JavaScript class.
func (ba *Babylon) IDracoCompressionConfiguration() *IDracoCompressionConfiguration {
	p := ba.ctx.Get("IDracoCompressionConfiguration")
	return IDracoCompressionConfigurationFromJSObject(p, ba.ctx)
}

// IDracoCompressionConfigurationFromJSObject returns a wrapped IDracoCompressionConfiguration JavaScript class.
func IDracoCompressionConfigurationFromJSObject(p js.Value, ctx js.Value) *IDracoCompressionConfiguration {
	return &IDracoCompressionConfiguration{p: p, ctx: ctx}
}

// IDracoCompressionConfigurationArrayToJSArray returns a JavaScript Array for the wrapped array.
func IDracoCompressionConfigurationArrayToJSArray(array []*IDracoCompressionConfiguration) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Decoder returns the Decoder property of class IDracoCompressionConfiguration.
//
// https://doc.babylonjs.com/api/classes/babylon.idracocompressionconfiguration#decoder
func (i *IDracoCompressionConfiguration) Decoder() js.Value {
	retVal := i.p.Get("decoder")
	return retVal
}

// SetDecoder sets the Decoder property of class IDracoCompressionConfiguration.
//
// https://doc.babylonjs.com/api/classes/babylon.idracocompressionconfiguration#decoder
func (i *IDracoCompressionConfiguration) SetDecoder(decoder js.Value) *IDracoCompressionConfiguration {
	i.p.Set("decoder", decoder)
	return i
}
