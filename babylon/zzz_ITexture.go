// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ITexture represents a babylon.js ITexture.
// Loader interface with additional members.
type ITexture struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ITexture) JSObject() js.Value { return i.p }

// ITexture returns a ITexture JavaScript class.
func (ba *Babylon) ITexture() *ITexture {
	p := ba.ctx.Get("ITexture")
	return ITextureFromJSObject(p, ba.ctx)
}

// ITextureFromJSObject returns a wrapped ITexture JavaScript class.
func ITextureFromJSObject(p js.Value, ctx js.Value) *ITexture {
	return &ITexture{p: p, ctx: ctx}
}

// ITextureArrayToJSArray returns a JavaScript Array for the wrapped array.
func ITextureArrayToJSArray(array []*ITexture) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}
