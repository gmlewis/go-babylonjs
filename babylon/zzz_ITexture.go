// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ITexture represents a babylon.js ITexture.
// Loader interface with additional members.
type ITexture struct {
	*ITexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ITexture) JSObject() js.Value { return i.p }

// ITexture returns a ITexture JavaScript class.
func (ba *Babylon) ITexture() *ITexture {
	p := ba.ctx.Get("ITexture")
	return ITextureFromJSObject(p, ba.ctx)
}

// ITextureFromJSObject returns a wrapped ITexture JavaScript class.
func ITextureFromJSObject(p js.Value, ctx js.Value) *ITexture {
	return &ITexture{ITexture: ITextureFromJSObject(p, ctx), ctx: ctx}
}

// ITextureArrayToJSArray returns a JavaScript Array for the wrapped array.
func ITextureArrayToJSArray(array []*ITexture) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Extensions returns the Extensions property of class ITexture.
//
// https://doc.babylonjs.com/api/classes/babylon.itexture#extensions
func (i *ITexture) Extensions(extensions js.Value) *ITexture {
	p := ba.ctx.Get("ITexture").New(extensions)
	return ITextureFromJSObject(p, ba.ctx)
}

// SetExtensions sets the Extensions property of class ITexture.
//
// https://doc.babylonjs.com/api/classes/babylon.itexture#extensions
func (i *ITexture) SetExtensions(extensions js.Value) *ITexture {
	p := ba.ctx.Get("ITexture").New(extensions)
	return ITextureFromJSObject(p, ba.ctx)
}

// Extras returns the Extras property of class ITexture.
//
// https://doc.babylonjs.com/api/classes/babylon.itexture#extras
func (i *ITexture) Extras(extras interface{}) *ITexture {
	p := ba.ctx.Get("ITexture").New(extras)
	return ITextureFromJSObject(p, ba.ctx)
}

// SetExtras sets the Extras property of class ITexture.
//
// https://doc.babylonjs.com/api/classes/babylon.itexture#extras
func (i *ITexture) SetExtras(extras interface{}) *ITexture {
	p := ba.ctx.Get("ITexture").New(extras)
	return ITextureFromJSObject(p, ba.ctx)
}

// Index returns the Index property of class ITexture.
//
// https://doc.babylonjs.com/api/classes/babylon.itexture#index
func (i *ITexture) Index(index float64) *ITexture {
	p := ba.ctx.Get("ITexture").New(index)
	return ITextureFromJSObject(p, ba.ctx)
}

// SetIndex sets the Index property of class ITexture.
//
// https://doc.babylonjs.com/api/classes/babylon.itexture#index
func (i *ITexture) SetIndex(index float64) *ITexture {
	p := ba.ctx.Get("ITexture").New(index)
	return ITextureFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class ITexture.
//
// https://doc.babylonjs.com/api/classes/babylon.itexture#name
func (i *ITexture) Name(name string) *ITexture {
	p := ba.ctx.Get("ITexture").New(name)
	return ITextureFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class ITexture.
//
// https://doc.babylonjs.com/api/classes/babylon.itexture#name
func (i *ITexture) SetName(name string) *ITexture {
	p := ba.ctx.Get("ITexture").New(name)
	return ITextureFromJSObject(p, ba.ctx)
}

// Sampler returns the Sampler property of class ITexture.
//
// https://doc.babylonjs.com/api/classes/babylon.itexture#sampler
func (i *ITexture) Sampler(sampler float64) *ITexture {
	p := ba.ctx.Get("ITexture").New(sampler)
	return ITextureFromJSObject(p, ba.ctx)
}

// SetSampler sets the Sampler property of class ITexture.
//
// https://doc.babylonjs.com/api/classes/babylon.itexture#sampler
func (i *ITexture) SetSampler(sampler float64) *ITexture {
	p := ba.ctx.Get("ITexture").New(sampler)
	return ITextureFromJSObject(p, ba.ctx)
}

// Source returns the Source property of class ITexture.
//
// https://doc.babylonjs.com/api/classes/babylon.itexture#source
func (i *ITexture) Source(source float64) *ITexture {
	p := ba.ctx.Get("ITexture").New(source)
	return ITextureFromJSObject(p, ba.ctx)
}

// SetSource sets the Source property of class ITexture.
//
// https://doc.babylonjs.com/api/classes/babylon.itexture#source
func (i *ITexture) SetSource(source float64) *ITexture {
	p := ba.ctx.Get("ITexture").New(source)
	return ITextureFromJSObject(p, ba.ctx)
}

*/
