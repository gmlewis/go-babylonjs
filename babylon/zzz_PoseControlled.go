// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PoseControlled represents a babylon.js PoseControlled.
// Interface representing a pose controlled object in Babylon.
// A pose controlled object has both regular pose values as well as pose values
// from an external device such as a VR head mounted display
type PoseControlled struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PoseControlled) JSObject() js.Value { return p.p }

// PoseControlled returns a PoseControlled JavaScript class.
func (ba *Babylon) PoseControlled() *PoseControlled {
	p := ba.ctx.Get("PoseControlled")
	return PoseControlledFromJSObject(p, ba.ctx)
}

// PoseControlledFromJSObject returns a wrapped PoseControlled JavaScript class.
func PoseControlledFromJSObject(p js.Value, ctx js.Value) *PoseControlled {
	return &PoseControlled{p: p, ctx: ctx}
}

// PoseControlledArrayToJSArray returns a JavaScript Array for the wrapped array.
func PoseControlledArrayToJSArray(array []*PoseControlled) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// UpdateFromDevice calls the UpdateFromDevice method on the PoseControlled object.
//
// https://doc.babylonjs.com/api/classes/babylon.posecontrolled#updatefromdevice
func (p *PoseControlled) UpdateFromDevice(poseData js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, poseData)

	p.p.Call("updateFromDevice", args...)
}

/*

// DevicePosition returns the DevicePosition property of class PoseControlled.
//
// https://doc.babylonjs.com/api/classes/babylon.posecontrolled#deviceposition
func (p *PoseControlled) DevicePosition(devicePosition *Vector3) *PoseControlled {
	p := ba.ctx.Get("PoseControlled").New(devicePosition.JSObject())
	return PoseControlledFromJSObject(p, ba.ctx)
}

// SetDevicePosition sets the DevicePosition property of class PoseControlled.
//
// https://doc.babylonjs.com/api/classes/babylon.posecontrolled#deviceposition
func (p *PoseControlled) SetDevicePosition(devicePosition *Vector3) *PoseControlled {
	p := ba.ctx.Get("PoseControlled").New(devicePosition.JSObject())
	return PoseControlledFromJSObject(p, ba.ctx)
}

// DeviceRotationQuaternion returns the DeviceRotationQuaternion property of class PoseControlled.
//
// https://doc.babylonjs.com/api/classes/babylon.posecontrolled#devicerotationquaternion
func (p *PoseControlled) DeviceRotationQuaternion(deviceRotationQuaternion *Quaternion) *PoseControlled {
	p := ba.ctx.Get("PoseControlled").New(deviceRotationQuaternion.JSObject())
	return PoseControlledFromJSObject(p, ba.ctx)
}

// SetDeviceRotationQuaternion sets the DeviceRotationQuaternion property of class PoseControlled.
//
// https://doc.babylonjs.com/api/classes/babylon.posecontrolled#devicerotationquaternion
func (p *PoseControlled) SetDeviceRotationQuaternion(deviceRotationQuaternion *Quaternion) *PoseControlled {
	p := ba.ctx.Get("PoseControlled").New(deviceRotationQuaternion.JSObject())
	return PoseControlledFromJSObject(p, ba.ctx)
}

// DeviceScaleFactor returns the DeviceScaleFactor property of class PoseControlled.
//
// https://doc.babylonjs.com/api/classes/babylon.posecontrolled#devicescalefactor
func (p *PoseControlled) DeviceScaleFactor(deviceScaleFactor float64) *PoseControlled {
	p := ba.ctx.Get("PoseControlled").New(deviceScaleFactor)
	return PoseControlledFromJSObject(p, ba.ctx)
}

// SetDeviceScaleFactor sets the DeviceScaleFactor property of class PoseControlled.
//
// https://doc.babylonjs.com/api/classes/babylon.posecontrolled#devicescalefactor
func (p *PoseControlled) SetDeviceScaleFactor(deviceScaleFactor float64) *PoseControlled {
	p := ba.ctx.Get("PoseControlled").New(deviceScaleFactor)
	return PoseControlledFromJSObject(p, ba.ctx)
}

// Position returns the Position property of class PoseControlled.
//
// https://doc.babylonjs.com/api/classes/babylon.posecontrolled#position
func (p *PoseControlled) Position(position *Vector3) *PoseControlled {
	p := ba.ctx.Get("PoseControlled").New(position.JSObject())
	return PoseControlledFromJSObject(p, ba.ctx)
}

// SetPosition sets the Position property of class PoseControlled.
//
// https://doc.babylonjs.com/api/classes/babylon.posecontrolled#position
func (p *PoseControlled) SetPosition(position *Vector3) *PoseControlled {
	p := ba.ctx.Get("PoseControlled").New(position.JSObject())
	return PoseControlledFromJSObject(p, ba.ctx)
}

// RawPose returns the RawPose property of class PoseControlled.
//
// https://doc.babylonjs.com/api/classes/babylon.posecontrolled#rawpose
func (p *PoseControlled) RawPose(rawPose js.Value) *PoseControlled {
	p := ba.ctx.Get("PoseControlled").New(rawPose)
	return PoseControlledFromJSObject(p, ba.ctx)
}

// SetRawPose sets the RawPose property of class PoseControlled.
//
// https://doc.babylonjs.com/api/classes/babylon.posecontrolled#rawpose
func (p *PoseControlled) SetRawPose(rawPose js.Value) *PoseControlled {
	p := ba.ctx.Get("PoseControlled").New(rawPose)
	return PoseControlledFromJSObject(p, ba.ctx)
}

// RotationQuaternion returns the RotationQuaternion property of class PoseControlled.
//
// https://doc.babylonjs.com/api/classes/babylon.posecontrolled#rotationquaternion
func (p *PoseControlled) RotationQuaternion(rotationQuaternion *Quaternion) *PoseControlled {
	p := ba.ctx.Get("PoseControlled").New(rotationQuaternion.JSObject())
	return PoseControlledFromJSObject(p, ba.ctx)
}

// SetRotationQuaternion sets the RotationQuaternion property of class PoseControlled.
//
// https://doc.babylonjs.com/api/classes/babylon.posecontrolled#rotationquaternion
func (p *PoseControlled) SetRotationQuaternion(rotationQuaternion *Quaternion) *PoseControlled {
	p := ba.ctx.Get("PoseControlled").New(rotationQuaternion.JSObject())
	return PoseControlledFromJSObject(p, ba.ctx)
}

*/
