// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DigitalRainPostProcess represents a babylon.js DigitalRainPostProcess.
// DigitalRainPostProcess helps rendering everithing in digital rain.
//
// Simmply add it to your scene and let the nerd that lives in you have fun.
// Example usage: var pp = new DigitalRainPostProcess(&quot;digitalRain&quot;, &quot;20px Monospace&quot;, camera);
type DigitalRainPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DigitalRainPostProcess) JSObject() js.Value { return d.p }

// DigitalRainPostProcess returns a DigitalRainPostProcess JavaScript class.
func (ba *Babylon) DigitalRainPostProcess() *DigitalRainPostProcess {
	p := ba.ctx.Get("DigitalRainPostProcess")
	return DigitalRainPostProcessFromJSObject(p, ba.ctx)
}

// DigitalRainPostProcessFromJSObject returns a wrapped DigitalRainPostProcess JavaScript class.
func DigitalRainPostProcessFromJSObject(p js.Value, ctx js.Value) *DigitalRainPostProcess {
	return &DigitalRainPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// DigitalRainPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func DigitalRainPostProcessArrayToJSArray(array []*DigitalRainPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDigitalRainPostProcessOpts contains optional parameters for NewDigitalRainPostProcess.
type NewDigitalRainPostProcessOpts struct {
	Options *string
}

// NewDigitalRainPostProcess returns a new DigitalRainPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainpostprocess
func (ba *Babylon) NewDigitalRainPostProcess(name string, camera *Camera, opts *NewDigitalRainPostProcessOpts) *DigitalRainPostProcess {
	if opts == nil {
		opts = &NewDigitalRainPostProcessOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, camera.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Options)
	}

	p := ba.ctx.Get("DigitalRainPostProcess").New(args...)
	return DigitalRainPostProcessFromJSObject(p, ba.ctx)
}

/*

// MixToNormal returns the MixToNormal property of class DigitalRainPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainpostprocess#mixtonormal
func (d *DigitalRainPostProcess) MixToNormal(mixToNormal float64) *DigitalRainPostProcess {
	p := ba.ctx.Get("DigitalRainPostProcess").New(mixToNormal)
	return DigitalRainPostProcessFromJSObject(p, ba.ctx)
}

// SetMixToNormal sets the MixToNormal property of class DigitalRainPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainpostprocess#mixtonormal
func (d *DigitalRainPostProcess) SetMixToNormal(mixToNormal float64) *DigitalRainPostProcess {
	p := ba.ctx.Get("DigitalRainPostProcess").New(mixToNormal)
	return DigitalRainPostProcessFromJSObject(p, ba.ctx)
}

// MixToTile returns the MixToTile property of class DigitalRainPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainpostprocess#mixtotile
func (d *DigitalRainPostProcess) MixToTile(mixToTile float64) *DigitalRainPostProcess {
	p := ba.ctx.Get("DigitalRainPostProcess").New(mixToTile)
	return DigitalRainPostProcessFromJSObject(p, ba.ctx)
}

// SetMixToTile sets the MixToTile property of class DigitalRainPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainpostprocess#mixtotile
func (d *DigitalRainPostProcess) SetMixToTile(mixToTile float64) *DigitalRainPostProcess {
	p := ba.ctx.Get("DigitalRainPostProcess").New(mixToTile)
	return DigitalRainPostProcessFromJSObject(p, ba.ctx)
}

*/
