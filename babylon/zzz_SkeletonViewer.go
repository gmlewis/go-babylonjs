// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SkeletonViewer represents a babylon.js SkeletonViewer.
// Class used to render a debug view of a given skeleton
//
// See: http://www.babylonjs-playground.com/#1BZJVJ#8
type SkeletonViewer struct{ p js.Value }

// JSObject returns the underlying js.Value.
func (s *SkeletonViewer) JSObject() js.Value { return s.p }

// SkeletonViewer returns a SkeletonViewer JavaScript class.
func (ba *Babylon) SkeletonViewer() *SkeletonViewer {
	p := ba.ctx.Get("SkeletonViewer")
	return SkeletonViewerFromJSObject(p)
}

// SkeletonViewerFromJSObject returns a wrapped SkeletonViewer JavaScript class.
func SkeletonViewerFromJSObject(p js.Value) *SkeletonViewer {
	return &SkeletonViewer{p: p}
}

// NewSkeletonViewerOpts contains optional parameters for NewSkeletonViewer.
type NewSkeletonViewerOpts struct {
	AutoUpdateBonesMatrices *JSBool

	RenderingGroupId *JSFloat64
}

// NewSkeletonViewer returns a new SkeletonViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.skeletonviewer
func (ba *Babylon) NewSkeletonViewer(skeleton *Skeleton, mesh *AbstractMesh, scene *Scene, opts *NewSkeletonViewerOpts) *SkeletonViewer {
	if opts == nil {
		opts = &NewSkeletonViewerOpts{}
	}

	p := ba.ctx.Get("SkeletonViewer").New(skeleton.JSObject(), mesh.JSObject(), scene.JSObject(), opts.AutoUpdateBonesMatrices, opts.RenderingGroupId)
	return SkeletonViewerFromJSObject(p)
}

// TODO: methods
