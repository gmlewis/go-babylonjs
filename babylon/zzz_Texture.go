// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Texture represents a babylon.js Texture.
// This represents a texture in babylon. It can be easily loaded from a network, base64 or html input.
//
// See: http://doc.babylonjs.com/babylon101/materials#texture
type Texture struct{ *BaseTexture }

// JSObject returns the underlying js.Value.
func (t *Texture) JSObject() js.Value { return t.p }

// Texture returns a Texture JavaScript class.
func (ba *Babylon) Texture() *Texture {
	p := ba.ctx.Get("Texture")
	return TextureFromJSObject(p)
}

// TextureFromJSObject returns a wrapped Texture JavaScript class.
func TextureFromJSObject(p js.Value) *Texture {
	return &Texture{BaseTextureFromJSObject(p)}
}

// NewTextureOpts contains optional parameters for NewTexture.
type NewTextureOpts struct {
	NoMipmap *JSBool

	InvertY *JSBool

	SamplingMode *JSFloat64

	OnLoad *func()

	OnError *func()

	Buffer *JSString

	DeleteBuffer *JSBool

	Format *JSFloat64

	MimeType *JSString
}

// NewTexture returns a new Texture object.
//
// https://doc.babylonjs.com/api/classes/babylon.texture
func (ba *Babylon) NewTexture(url string, sceneOrEngine *Scene, opts *NewTextureOpts) *Texture {
	if opts == nil {
		opts = &NewTextureOpts{}
	}

	p := ba.ctx.Get("Texture").New(url, sceneOrEngine.JSObject(), opts.NoMipmap.JSObject(), opts.InvertY.JSObject(), opts.SamplingMode.JSObject(), opts.OnLoad, opts.OnError, opts.Buffer.JSObject(), opts.DeleteBuffer.JSObject(), opts.Format.JSObject(), opts.MimeType.JSObject())
	return TextureFromJSObject(p)
}

// TODO: methods
