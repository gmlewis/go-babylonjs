// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ColorPicker represents a babylon.js ColorPicker.
// Class used to create color pickers
type ColorPicker struct {
	*Control
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *ColorPicker) JSObject() js.Value { return c.p }

// ColorPicker returns a ColorPicker JavaScript class.
func (ba *Babylon) ColorPicker() *ColorPicker {
	p := ba.ctx.Get("ColorPicker")
	return ColorPickerFromJSObject(p, ba.ctx)
}

// ColorPickerFromJSObject returns a wrapped ColorPicker JavaScript class.
func ColorPickerFromJSObject(p js.Value, ctx js.Value) *ColorPicker {
	return &ColorPicker{Control: ControlFromJSObject(p, ctx), ctx: ctx}
}

// NewColorPickerOpts contains optional parameters for NewColorPicker.
type NewColorPickerOpts struct {
	Name *string
}

// NewColorPicker returns a new ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker
func (ba *Babylon) NewColorPicker(opts *NewColorPickerOpts) *ColorPicker {
	if opts == nil {
		opts = &NewColorPickerOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}

	p := ba.ctx.Get("ColorPicker").New(args...)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// Contains calls the Contains method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#contains
func (c *ColorPicker) Contains(x float64, y float64) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, x)
	args = append(args, y)

	retVal := c.p.Call("contains", args...)
	return retVal.Bool()
}

// Dispose calls the Dispose method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#dispose
func (c *ColorPicker) Dispose() {

	args := make([]interface{}, 0, 0+0)

	c.p.Call("dispose", args...)
}

// GetAscendantOfClass calls the GetAscendantOfClass method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#getascendantofclass
func (c *ColorPicker) GetAscendantOfClass(className string) *Control {

	args := make([]interface{}, 0, 1+0)

	args = append(args, className)

	retVal := c.p.Call("getAscendantOfClass", args...)
	return ControlFromJSObject(retVal, c.ctx)
}

// GetClassName calls the GetClassName method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#getclassname
func (c *ColorPicker) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := c.p.Call("getClassName", args...)
	return retVal.String()
}

// ColorPickerGetDescendantsOpts contains optional parameters for ColorPicker.GetDescendants.
type ColorPickerGetDescendantsOpts struct {
	DirectDescendantsOnly *bool
	Predicate             *func()
}

// GetDescendants calls the GetDescendants method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#getdescendants
func (c *ColorPicker) GetDescendants(opts *ColorPickerGetDescendantsOpts) *Control {
	if opts == nil {
		opts = &ColorPickerGetDescendantsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := c.p.Call("getDescendants", args...)
	return ControlFromJSObject(retVal, c.ctx)
}

// ColorPickerGetDescendantsToRefOpts contains optional parameters for ColorPicker.GetDescendantsToRef.
type ColorPickerGetDescendantsToRefOpts struct {
	DirectDescendantsOnly *bool
	Predicate             *func()
}

// GetDescendantsToRef calls the GetDescendantsToRef method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#getdescendantstoref
func (c *ColorPicker) GetDescendantsToRef(results *Control, opts *ColorPickerGetDescendantsToRefOpts) {
	if opts == nil {
		opts = &ColorPickerGetDescendantsToRefOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, results.JSObject())

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	c.p.Call("getDescendantsToRef", args...)
}

// GetLocalCoordinates calls the GetLocalCoordinates method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#getlocalcoordinates
func (c *ColorPicker) GetLocalCoordinates(globalCoordinates *Vector2) *Vector2 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, globalCoordinates.JSObject())

	retVal := c.p.Call("getLocalCoordinates", args...)
	return Vector2FromJSObject(retVal, c.ctx)
}

// GetLocalCoordinatesToRef calls the GetLocalCoordinatesToRef method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#getlocalcoordinatestoref
func (c *ColorPicker) GetLocalCoordinatesToRef(globalCoordinates *Vector2, result *Vector2) *Control {

	args := make([]interface{}, 0, 2+0)

	args = append(args, globalCoordinates.JSObject())
	args = append(args, result.JSObject())

	retVal := c.p.Call("getLocalCoordinatesToRef", args...)
	return ControlFromJSObject(retVal, c.ctx)
}

// GetParentLocalCoordinates calls the GetParentLocalCoordinates method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#getparentlocalcoordinates
func (c *ColorPicker) GetParentLocalCoordinates(globalCoordinates *Vector2) *Vector2 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, globalCoordinates.JSObject())

	retVal := c.p.Call("getParentLocalCoordinates", args...)
	return Vector2FromJSObject(retVal, c.ctx)
}

// IsAscendant calls the IsAscendant method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#isascendant
func (c *ColorPicker) IsAscendant(container *Control) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, container.JSObject())

	retVal := c.p.Call("isAscendant", args...)
	return retVal.Bool()
}

// LinkWithMesh calls the LinkWithMesh method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#linkwithmesh
func (c *ColorPicker) LinkWithMesh(mesh *AbstractMesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	c.p.Call("linkWithMesh", args...)
}

// MoveToVector3 calls the MoveToVector3 method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#movetovector3
func (c *ColorPicker) MoveToVector3(position *Vector3, scene *Scene) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	c.p.Call("moveToVector3", args...)
}

// ShowPickerDialogAsync calls the ShowPickerDialogAsync method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#showpickerdialogasync
func (c *ColorPicker) ShowPickerDialogAsync(advancedTexture *AdvancedDynamicTexture, options js.Value) js.Value {

	args := make([]interface{}, 0, 2+0)

	args = append(args, advancedTexture.JSObject())
	args = append(args, options)

	retVal := c.p.Call("ShowPickerDialogAsync", args...)
	return retVal
}

// _onPointerDown calls the _onPointerDown method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#_onpointerdown
func (c *ColorPicker) _onPointerDown(target *Control, coordinates *Vector2, pointerId float64, buttonIndex float64) bool {

	args := make([]interface{}, 0, 4+0)

	args = append(args, target.JSObject())
	args = append(args, coordinates.JSObject())
	args = append(args, pointerId)
	args = append(args, buttonIndex)

	retVal := c.p.Call("_onPointerDown", args...)
	return retVal.Bool()
}

// _onPointerMove calls the _onPointerMove method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#_onpointermove
func (c *ColorPicker) _onPointerMove(target *Control, coordinates *Vector2, pointerId float64) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, target.JSObject())
	args = append(args, coordinates.JSObject())
	args = append(args, pointerId)

	c.p.Call("_onPointerMove", args...)
}

// _onPointerUp calls the _onPointerUp method on the ColorPicker object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#_onpointerup
func (c *ColorPicker) _onPointerUp(target *Control, coordinates *Vector2, pointerId float64, buttonIndex float64, notifyClick bool) {

	args := make([]interface{}, 0, 5+0)

	args = append(args, target.JSObject())
	args = append(args, coordinates.JSObject())
	args = append(args, pointerId)
	args = append(args, buttonIndex)
	args = append(args, notifyClick)

	c.p.Call("_onPointerUp", args...)
}

/*

// AllowAlphaInheritance returns the AllowAlphaInheritance property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#allowalphainheritance
func (c *ColorPicker) AllowAlphaInheritance(AllowAlphaInheritance bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(AllowAlphaInheritance)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetAllowAlphaInheritance sets the AllowAlphaInheritance property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#allowalphainheritance
func (c *ColorPicker) SetAllowAlphaInheritance(AllowAlphaInheritance bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(AllowAlphaInheritance)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// Alpha returns the Alpha property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#alpha
func (c *ColorPicker) Alpha(alpha float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(alpha)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetAlpha sets the Alpha property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#alpha
func (c *ColorPicker) SetAlpha(alpha float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(alpha)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// CenterX returns the CenterX property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#centerx
func (c *ColorPicker) CenterX(centerX float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(centerX)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetCenterX sets the CenterX property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#centerx
func (c *ColorPicker) SetCenterX(centerX float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(centerX)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// CenterY returns the CenterY property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#centery
func (c *ColorPicker) CenterY(centerY float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(centerY)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetCenterY sets the CenterY property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#centery
func (c *ColorPicker) SetCenterY(centerY float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(centerY)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// ClipChildren returns the ClipChildren property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#clipchildren
func (c *ColorPicker) ClipChildren(clipChildren bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(clipChildren)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetClipChildren sets the ClipChildren property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#clipchildren
func (c *ColorPicker) SetClipChildren(clipChildren bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(clipChildren)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// ClipContent returns the ClipContent property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#clipcontent
func (c *ColorPicker) ClipContent(clipContent bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(clipContent)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetClipContent sets the ClipContent property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#clipcontent
func (c *ColorPicker) SetClipContent(clipContent bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(clipContent)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// Color returns the Color property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#color
func (c *ColorPicker) Color(color string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(color)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetColor sets the Color property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#color
func (c *ColorPicker) SetColor(color string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(color)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// DisabledColor returns the DisabledColor property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#disabledcolor
func (c *ColorPicker) DisabledColor(disabledColor string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(disabledColor)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetDisabledColor sets the DisabledColor property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#disabledcolor
func (c *ColorPicker) SetDisabledColor(disabledColor string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(disabledColor)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// FontFamily returns the FontFamily property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#fontfamily
func (c *ColorPicker) FontFamily(fontFamily string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(fontFamily)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetFontFamily sets the FontFamily property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#fontfamily
func (c *ColorPicker) SetFontFamily(fontFamily string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(fontFamily)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// FontOffset returns the FontOffset property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#fontoffset
func (c *ColorPicker) FontOffset(fontOffset js.Value) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(fontOffset)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetFontOffset sets the FontOffset property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#fontoffset
func (c *ColorPicker) SetFontOffset(fontOffset js.Value) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(fontOffset)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// FontSize returns the FontSize property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#fontsize
func (c *ColorPicker) FontSize(fontSize string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(fontSize)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetFontSize sets the FontSize property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#fontsize
func (c *ColorPicker) SetFontSize(fontSize string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(fontSize)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// FontSizeInPixels returns the FontSizeInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#fontsizeinpixels
func (c *ColorPicker) FontSizeInPixels(fontSizeInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(fontSizeInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetFontSizeInPixels sets the FontSizeInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#fontsizeinpixels
func (c *ColorPicker) SetFontSizeInPixels(fontSizeInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(fontSizeInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// FontStyle returns the FontStyle property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#fontstyle
func (c *ColorPicker) FontStyle(fontStyle string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(fontStyle)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetFontStyle sets the FontStyle property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#fontstyle
func (c *ColorPicker) SetFontStyle(fontStyle string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(fontStyle)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// FontWeight returns the FontWeight property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#fontweight
func (c *ColorPicker) FontWeight(fontWeight string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(fontWeight)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetFontWeight sets the FontWeight property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#fontweight
func (c *ColorPicker) SetFontWeight(fontWeight string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(fontWeight)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_CENTER returns the HORIZONTAL_ALIGNMENT_CENTER property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#horizontal_alignment_center
func (c *ColorPicker) HORIZONTAL_ALIGNMENT_CENTER(HORIZONTAL_ALIGNMENT_CENTER float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(HORIZONTAL_ALIGNMENT_CENTER)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_CENTER sets the HORIZONTAL_ALIGNMENT_CENTER property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#horizontal_alignment_center
func (c *ColorPicker) SetHORIZONTAL_ALIGNMENT_CENTER(HORIZONTAL_ALIGNMENT_CENTER float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(HORIZONTAL_ALIGNMENT_CENTER)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_LEFT returns the HORIZONTAL_ALIGNMENT_LEFT property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#horizontal_alignment_left
func (c *ColorPicker) HORIZONTAL_ALIGNMENT_LEFT(HORIZONTAL_ALIGNMENT_LEFT float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(HORIZONTAL_ALIGNMENT_LEFT)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_LEFT sets the HORIZONTAL_ALIGNMENT_LEFT property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#horizontal_alignment_left
func (c *ColorPicker) SetHORIZONTAL_ALIGNMENT_LEFT(HORIZONTAL_ALIGNMENT_LEFT float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(HORIZONTAL_ALIGNMENT_LEFT)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_RIGHT returns the HORIZONTAL_ALIGNMENT_RIGHT property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#horizontal_alignment_right
func (c *ColorPicker) HORIZONTAL_ALIGNMENT_RIGHT(HORIZONTAL_ALIGNMENT_RIGHT float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(HORIZONTAL_ALIGNMENT_RIGHT)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_RIGHT sets the HORIZONTAL_ALIGNMENT_RIGHT property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#horizontal_alignment_right
func (c *ColorPicker) SetHORIZONTAL_ALIGNMENT_RIGHT(HORIZONTAL_ALIGNMENT_RIGHT float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(HORIZONTAL_ALIGNMENT_RIGHT)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// Height returns the Height property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#height
func (c *ColorPicker) Height(height string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(height)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetHeight sets the Height property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#height
func (c *ColorPicker) SetHeight(height string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(height)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// HeightInPixels returns the HeightInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#heightinpixels
func (c *ColorPicker) HeightInPixels(heightInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(heightInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetHeightInPixels sets the HeightInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#heightinpixels
func (c *ColorPicker) SetHeightInPixels(heightInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(heightInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// HorizontalAlignment returns the HorizontalAlignment property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#horizontalalignment
func (c *ColorPicker) HorizontalAlignment(horizontalAlignment float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(horizontalAlignment)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetHorizontalAlignment sets the HorizontalAlignment property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#horizontalalignment
func (c *ColorPicker) SetHorizontalAlignment(horizontalAlignment float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(horizontalAlignment)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// Host returns the Host property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#host
func (c *ColorPicker) Host(host *AdvancedDynamicTexture) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(host.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetHost sets the Host property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#host
func (c *ColorPicker) SetHost(host *AdvancedDynamicTexture) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(host.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// HoverCursor returns the HoverCursor property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#hovercursor
func (c *ColorPicker) HoverCursor(hoverCursor string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(hoverCursor)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetHoverCursor sets the HoverCursor property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#hovercursor
func (c *ColorPicker) SetHoverCursor(hoverCursor string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(hoverCursor)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// IsDirty returns the IsDirty property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#isdirty
func (c *ColorPicker) IsDirty(isDirty bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(isDirty)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetIsDirty sets the IsDirty property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#isdirty
func (c *ColorPicker) SetIsDirty(isDirty bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(isDirty)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// IsEnabled returns the IsEnabled property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#isenabled
func (c *ColorPicker) IsEnabled(isEnabled bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(isEnabled)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetIsEnabled sets the IsEnabled property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#isenabled
func (c *ColorPicker) SetIsEnabled(isEnabled bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(isEnabled)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// IsFocusInvisible returns the IsFocusInvisible property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#isfocusinvisible
func (c *ColorPicker) IsFocusInvisible(isFocusInvisible bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(isFocusInvisible)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetIsFocusInvisible sets the IsFocusInvisible property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#isfocusinvisible
func (c *ColorPicker) SetIsFocusInvisible(isFocusInvisible bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(isFocusInvisible)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// IsHighlighted returns the IsHighlighted property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#ishighlighted
func (c *ColorPicker) IsHighlighted(isHighlighted bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(isHighlighted)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetIsHighlighted sets the IsHighlighted property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#ishighlighted
func (c *ColorPicker) SetIsHighlighted(isHighlighted bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(isHighlighted)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// IsHitTestVisible returns the IsHitTestVisible property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#ishittestvisible
func (c *ColorPicker) IsHitTestVisible(isHitTestVisible bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(isHitTestVisible)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetIsHitTestVisible sets the IsHitTestVisible property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#ishittestvisible
func (c *ColorPicker) SetIsHitTestVisible(isHitTestVisible bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(isHitTestVisible)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// IsPointerBlocker returns the IsPointerBlocker property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#ispointerblocker
func (c *ColorPicker) IsPointerBlocker(isPointerBlocker bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(isPointerBlocker)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetIsPointerBlocker sets the IsPointerBlocker property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#ispointerblocker
func (c *ColorPicker) SetIsPointerBlocker(isPointerBlocker bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(isPointerBlocker)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// IsVisible returns the IsVisible property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#isvisible
func (c *ColorPicker) IsVisible(isVisible bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(isVisible)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetIsVisible sets the IsVisible property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#isvisible
func (c *ColorPicker) SetIsVisible(isVisible bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(isVisible)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// Left returns the Left property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#left
func (c *ColorPicker) Left(left string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(left)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#left
func (c *ColorPicker) SetLeft(left string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(left)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// LeftInPixels returns the LeftInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#leftinpixels
func (c *ColorPicker) LeftInPixels(leftInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(leftInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetLeftInPixels sets the LeftInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#leftinpixels
func (c *ColorPicker) SetLeftInPixels(leftInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(leftInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// LinkOffsetX returns the LinkOffsetX property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#linkoffsetx
func (c *ColorPicker) LinkOffsetX(linkOffsetX string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(linkOffsetX)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetLinkOffsetX sets the LinkOffsetX property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#linkoffsetx
func (c *ColorPicker) SetLinkOffsetX(linkOffsetX string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(linkOffsetX)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// LinkOffsetXInPixels returns the LinkOffsetXInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#linkoffsetxinpixels
func (c *ColorPicker) LinkOffsetXInPixels(linkOffsetXInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(linkOffsetXInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetLinkOffsetXInPixels sets the LinkOffsetXInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#linkoffsetxinpixels
func (c *ColorPicker) SetLinkOffsetXInPixels(linkOffsetXInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(linkOffsetXInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// LinkOffsetY returns the LinkOffsetY property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#linkoffsety
func (c *ColorPicker) LinkOffsetY(linkOffsetY string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(linkOffsetY)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetLinkOffsetY sets the LinkOffsetY property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#linkoffsety
func (c *ColorPicker) SetLinkOffsetY(linkOffsetY string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(linkOffsetY)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// LinkOffsetYInPixels returns the LinkOffsetYInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#linkoffsetyinpixels
func (c *ColorPicker) LinkOffsetYInPixels(linkOffsetYInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(linkOffsetYInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetLinkOffsetYInPixels sets the LinkOffsetYInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#linkoffsetyinpixels
func (c *ColorPicker) SetLinkOffsetYInPixels(linkOffsetYInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(linkOffsetYInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// LinkedMesh returns the LinkedMesh property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#linkedmesh
func (c *ColorPicker) LinkedMesh(linkedMesh *AbstractMesh) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(linkedMesh.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetLinkedMesh sets the LinkedMesh property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#linkedmesh
func (c *ColorPicker) SetLinkedMesh(linkedMesh *AbstractMesh) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(linkedMesh.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#metadata
func (c *ColorPicker) Metadata(metadata interface{}) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(metadata)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#metadata
func (c *ColorPicker) SetMetadata(metadata interface{}) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(metadata)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#name
func (c *ColorPicker) Name(name string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(name)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#name
func (c *ColorPicker) SetName(name string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(name)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// NotRenderable returns the NotRenderable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#notrenderable
func (c *ColorPicker) NotRenderable(notRenderable bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(notRenderable)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetNotRenderable sets the NotRenderable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#notrenderable
func (c *ColorPicker) SetNotRenderable(notRenderable bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(notRenderable)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// OnAfterDrawObservable returns the OnAfterDrawObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onafterdrawobservable
func (c *ColorPicker) OnAfterDrawObservable(onAfterDrawObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onAfterDrawObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetOnAfterDrawObservable sets the OnAfterDrawObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onafterdrawobservable
func (c *ColorPicker) SetOnAfterDrawObservable(onAfterDrawObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onAfterDrawObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// OnBeforeDrawObservable returns the OnBeforeDrawObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onbeforedrawobservable
func (c *ColorPicker) OnBeforeDrawObservable(onBeforeDrawObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onBeforeDrawObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetOnBeforeDrawObservable sets the OnBeforeDrawObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onbeforedrawobservable
func (c *ColorPicker) SetOnBeforeDrawObservable(onBeforeDrawObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onBeforeDrawObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// OnDirtyObservable returns the OnDirtyObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#ondirtyobservable
func (c *ColorPicker) OnDirtyObservable(onDirtyObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onDirtyObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetOnDirtyObservable sets the OnDirtyObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#ondirtyobservable
func (c *ColorPicker) SetOnDirtyObservable(onDirtyObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onDirtyObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// OnPointerClickObservable returns the OnPointerClickObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onpointerclickobservable
func (c *ColorPicker) OnPointerClickObservable(onPointerClickObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onPointerClickObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetOnPointerClickObservable sets the OnPointerClickObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onpointerclickobservable
func (c *ColorPicker) SetOnPointerClickObservable(onPointerClickObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onPointerClickObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// OnPointerDownObservable returns the OnPointerDownObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onpointerdownobservable
func (c *ColorPicker) OnPointerDownObservable(onPointerDownObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onPointerDownObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetOnPointerDownObservable sets the OnPointerDownObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onpointerdownobservable
func (c *ColorPicker) SetOnPointerDownObservable(onPointerDownObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onPointerDownObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// OnPointerEnterObservable returns the OnPointerEnterObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onpointerenterobservable
func (c *ColorPicker) OnPointerEnterObservable(onPointerEnterObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onPointerEnterObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetOnPointerEnterObservable sets the OnPointerEnterObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onpointerenterobservable
func (c *ColorPicker) SetOnPointerEnterObservable(onPointerEnterObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onPointerEnterObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// OnPointerMoveObservable returns the OnPointerMoveObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onpointermoveobservable
func (c *ColorPicker) OnPointerMoveObservable(onPointerMoveObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onPointerMoveObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetOnPointerMoveObservable sets the OnPointerMoveObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onpointermoveobservable
func (c *ColorPicker) SetOnPointerMoveObservable(onPointerMoveObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onPointerMoveObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// OnPointerOutObservable returns the OnPointerOutObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onpointeroutobservable
func (c *ColorPicker) OnPointerOutObservable(onPointerOutObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onPointerOutObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetOnPointerOutObservable sets the OnPointerOutObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onpointeroutobservable
func (c *ColorPicker) SetOnPointerOutObservable(onPointerOutObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onPointerOutObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// OnPointerUpObservable returns the OnPointerUpObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onpointerupobservable
func (c *ColorPicker) OnPointerUpObservable(onPointerUpObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onPointerUpObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetOnPointerUpObservable sets the OnPointerUpObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onpointerupobservable
func (c *ColorPicker) SetOnPointerUpObservable(onPointerUpObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onPointerUpObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// OnValueChangedObservable returns the OnValueChangedObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onvaluechangedobservable
func (c *ColorPicker) OnValueChangedObservable(onValueChangedObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onValueChangedObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetOnValueChangedObservable sets the OnValueChangedObservable property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#onvaluechangedobservable
func (c *ColorPicker) SetOnValueChangedObservable(onValueChangedObservable *Observable) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(onValueChangedObservable.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// PaddingBottom returns the PaddingBottom property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingbottom
func (c *ColorPicker) PaddingBottom(paddingBottom string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingBottom)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetPaddingBottom sets the PaddingBottom property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingbottom
func (c *ColorPicker) SetPaddingBottom(paddingBottom string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingBottom)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// PaddingBottomInPixels returns the PaddingBottomInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingbottominpixels
func (c *ColorPicker) PaddingBottomInPixels(paddingBottomInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingBottomInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetPaddingBottomInPixels sets the PaddingBottomInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingbottominpixels
func (c *ColorPicker) SetPaddingBottomInPixels(paddingBottomInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingBottomInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// PaddingLeft returns the PaddingLeft property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingleft
func (c *ColorPicker) PaddingLeft(paddingLeft string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingLeft)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetPaddingLeft sets the PaddingLeft property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingleft
func (c *ColorPicker) SetPaddingLeft(paddingLeft string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingLeft)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// PaddingLeftInPixels returns the PaddingLeftInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingleftinpixels
func (c *ColorPicker) PaddingLeftInPixels(paddingLeftInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingLeftInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetPaddingLeftInPixels sets the PaddingLeftInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingleftinpixels
func (c *ColorPicker) SetPaddingLeftInPixels(paddingLeftInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingLeftInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// PaddingRight returns the PaddingRight property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingright
func (c *ColorPicker) PaddingRight(paddingRight string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingRight)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetPaddingRight sets the PaddingRight property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingright
func (c *ColorPicker) SetPaddingRight(paddingRight string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingRight)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// PaddingRightInPixels returns the PaddingRightInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingrightinpixels
func (c *ColorPicker) PaddingRightInPixels(paddingRightInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingRightInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetPaddingRightInPixels sets the PaddingRightInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingrightinpixels
func (c *ColorPicker) SetPaddingRightInPixels(paddingRightInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingRightInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// PaddingTop returns the PaddingTop property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingtop
func (c *ColorPicker) PaddingTop(paddingTop string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingTop)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetPaddingTop sets the PaddingTop property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingtop
func (c *ColorPicker) SetPaddingTop(paddingTop string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingTop)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// PaddingTopInPixels returns the PaddingTopInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingtopinpixels
func (c *ColorPicker) PaddingTopInPixels(paddingTopInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingTopInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetPaddingTopInPixels sets the PaddingTopInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#paddingtopinpixels
func (c *ColorPicker) SetPaddingTopInPixels(paddingTopInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(paddingTopInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// Parent returns the Parent property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#parent
func (c *ColorPicker) Parent(parent *Container) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(parent.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetParent sets the Parent property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#parent
func (c *ColorPicker) SetParent(parent *Container) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(parent.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// Rotation returns the Rotation property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#rotation
func (c *ColorPicker) Rotation(rotation float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(rotation)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetRotation sets the Rotation property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#rotation
func (c *ColorPicker) SetRotation(rotation float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(rotation)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// ScaleX returns the ScaleX property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#scalex
func (c *ColorPicker) ScaleX(scaleX float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(scaleX)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetScaleX sets the ScaleX property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#scalex
func (c *ColorPicker) SetScaleX(scaleX float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(scaleX)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// ScaleY returns the ScaleY property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#scaley
func (c *ColorPicker) ScaleY(scaleY float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(scaleY)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetScaleY sets the ScaleY property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#scaley
func (c *ColorPicker) SetScaleY(scaleY float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(scaleY)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// ShadowBlur returns the ShadowBlur property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#shadowblur
func (c *ColorPicker) ShadowBlur(shadowBlur float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(shadowBlur)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetShadowBlur sets the ShadowBlur property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#shadowblur
func (c *ColorPicker) SetShadowBlur(shadowBlur float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(shadowBlur)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// ShadowColor returns the ShadowColor property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#shadowcolor
func (c *ColorPicker) ShadowColor(shadowColor string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(shadowColor)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetShadowColor sets the ShadowColor property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#shadowcolor
func (c *ColorPicker) SetShadowColor(shadowColor string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(shadowColor)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// ShadowOffsetX returns the ShadowOffsetX property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#shadowoffsetx
func (c *ColorPicker) ShadowOffsetX(shadowOffsetX float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(shadowOffsetX)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetShadowOffsetX sets the ShadowOffsetX property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#shadowoffsetx
func (c *ColorPicker) SetShadowOffsetX(shadowOffsetX float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(shadowOffsetX)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// ShadowOffsetY returns the ShadowOffsetY property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#shadowoffsety
func (c *ColorPicker) ShadowOffsetY(shadowOffsetY float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(shadowOffsetY)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetShadowOffsetY sets the ShadowOffsetY property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#shadowoffsety
func (c *ColorPicker) SetShadowOffsetY(shadowOffsetY float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(shadowOffsetY)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// Size returns the Size property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#size
func (c *ColorPicker) Size(size string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(size)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetSize sets the Size property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#size
func (c *ColorPicker) SetSize(size string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(size)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// Style returns the Style property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#style
func (c *ColorPicker) Style(style *Style) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(style.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetStyle sets the Style property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#style
func (c *ColorPicker) SetStyle(style *Style) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(style.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// Top returns the Top property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#top
func (c *ColorPicker) Top(top string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(top)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetTop sets the Top property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#top
func (c *ColorPicker) SetTop(top string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(top)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// TopInPixels returns the TopInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#topinpixels
func (c *ColorPicker) TopInPixels(topInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(topInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetTopInPixels sets the TopInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#topinpixels
func (c *ColorPicker) SetTopInPixels(topInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(topInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// TransformCenterX returns the TransformCenterX property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#transformcenterx
func (c *ColorPicker) TransformCenterX(transformCenterX float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(transformCenterX)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetTransformCenterX sets the TransformCenterX property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#transformcenterx
func (c *ColorPicker) SetTransformCenterX(transformCenterX float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(transformCenterX)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// TransformCenterY returns the TransformCenterY property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#transformcentery
func (c *ColorPicker) TransformCenterY(transformCenterY float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(transformCenterY)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetTransformCenterY sets the TransformCenterY property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#transformcentery
func (c *ColorPicker) SetTransformCenterY(transformCenterY float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(transformCenterY)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// TypeName returns the TypeName property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#typename
func (c *ColorPicker) TypeName(typeName string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(typeName)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetTypeName sets the TypeName property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#typename
func (c *ColorPicker) SetTypeName(typeName string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(typeName)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#uniqueid
func (c *ColorPicker) UniqueId(uniqueId float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(uniqueId)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#uniqueid
func (c *ColorPicker) SetUniqueId(uniqueId float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(uniqueId)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// UseBitmapCache returns the UseBitmapCache property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#usebitmapcache
func (c *ColorPicker) UseBitmapCache(useBitmapCache bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(useBitmapCache)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetUseBitmapCache sets the UseBitmapCache property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#usebitmapcache
func (c *ColorPicker) SetUseBitmapCache(useBitmapCache bool) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(useBitmapCache)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_BOTTOM returns the VERTICAL_ALIGNMENT_BOTTOM property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#vertical_alignment_bottom
func (c *ColorPicker) VERTICAL_ALIGNMENT_BOTTOM(VERTICAL_ALIGNMENT_BOTTOM float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(VERTICAL_ALIGNMENT_BOTTOM)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_BOTTOM sets the VERTICAL_ALIGNMENT_BOTTOM property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#vertical_alignment_bottom
func (c *ColorPicker) SetVERTICAL_ALIGNMENT_BOTTOM(VERTICAL_ALIGNMENT_BOTTOM float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(VERTICAL_ALIGNMENT_BOTTOM)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_CENTER returns the VERTICAL_ALIGNMENT_CENTER property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#vertical_alignment_center
func (c *ColorPicker) VERTICAL_ALIGNMENT_CENTER(VERTICAL_ALIGNMENT_CENTER float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(VERTICAL_ALIGNMENT_CENTER)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_CENTER sets the VERTICAL_ALIGNMENT_CENTER property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#vertical_alignment_center
func (c *ColorPicker) SetVERTICAL_ALIGNMENT_CENTER(VERTICAL_ALIGNMENT_CENTER float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(VERTICAL_ALIGNMENT_CENTER)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_TOP returns the VERTICAL_ALIGNMENT_TOP property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#vertical_alignment_top
func (c *ColorPicker) VERTICAL_ALIGNMENT_TOP(VERTICAL_ALIGNMENT_TOP float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(VERTICAL_ALIGNMENT_TOP)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_TOP sets the VERTICAL_ALIGNMENT_TOP property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#vertical_alignment_top
func (c *ColorPicker) SetVERTICAL_ALIGNMENT_TOP(VERTICAL_ALIGNMENT_TOP float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(VERTICAL_ALIGNMENT_TOP)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// Value returns the Value property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#value
func (c *ColorPicker) Value(value *Color3) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(value.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetValue sets the Value property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#value
func (c *ColorPicker) SetValue(value *Color3) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(value.JSObject())
	return ColorPickerFromJSObject(p, ba.ctx)
}

// VerticalAlignment returns the VerticalAlignment property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#verticalalignment
func (c *ColorPicker) VerticalAlignment(verticalAlignment float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(verticalAlignment)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetVerticalAlignment sets the VerticalAlignment property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#verticalalignment
func (c *ColorPicker) SetVerticalAlignment(verticalAlignment float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(verticalAlignment)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#width
func (c *ColorPicker) Width(width string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(width)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#width
func (c *ColorPicker) SetWidth(width string) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(width)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// WidthInPixels returns the WidthInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#widthinpixels
func (c *ColorPicker) WidthInPixels(widthInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(widthInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetWidthInPixels sets the WidthInPixels property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#widthinpixels
func (c *ColorPicker) SetWidthInPixels(widthInPixels float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(widthInPixels)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// ZIndex returns the ZIndex property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#zindex
func (c *ColorPicker) ZIndex(zIndex float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(zIndex)
	return ColorPickerFromJSObject(p, ba.ctx)
}

// SetZIndex sets the ZIndex property of class ColorPicker.
//
// https://doc.babylonjs.com/api/classes/babylon.colorpicker#zindex
func (c *ColorPicker) SetZIndex(zIndex float64) *ColorPicker {
	p := ba.ctx.Get("ColorPicker").New(zIndex)
	return ColorPickerFromJSObject(p, ba.ctx)
}

*/
