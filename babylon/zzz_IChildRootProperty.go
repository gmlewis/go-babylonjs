// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IChildRootProperty represents a babylon.js IChildRootProperty.
// glTF Child of Root Property
type IChildRootProperty struct {
	*IProperty
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IChildRootProperty) JSObject() js.Value { return i.p }

// IChildRootProperty returns a IChildRootProperty JavaScript class.
func (ba *Babylon) IChildRootProperty() *IChildRootProperty {
	p := ba.ctx.Get("IChildRootProperty")
	return IChildRootPropertyFromJSObject(p, ba.ctx)
}

// IChildRootPropertyFromJSObject returns a wrapped IChildRootProperty JavaScript class.
func IChildRootPropertyFromJSObject(p js.Value, ctx js.Value) *IChildRootProperty {
	return &IChildRootProperty{IProperty: IPropertyFromJSObject(p, ctx), ctx: ctx}
}

// IChildRootPropertyArrayToJSArray returns a JavaScript Array for the wrapped array.
func IChildRootPropertyArrayToJSArray(array []*IChildRootProperty) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Name returns the Name property of class IChildRootProperty.
//
// https://doc.babylonjs.com/api/classes/babylon.ichildrootproperty#name
func (i *IChildRootProperty) Name(name string) *IChildRootProperty {
	p := ba.ctx.Get("IChildRootProperty").New(name)
	return IChildRootPropertyFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class IChildRootProperty.
//
// https://doc.babylonjs.com/api/classes/babylon.ichildrootproperty#name
func (i *IChildRootProperty) SetName(name string) *IChildRootProperty {
	p := ba.ctx.Get("IChildRootProperty").New(name)
	return IChildRootPropertyFromJSObject(p, ba.ctx)
}

*/
