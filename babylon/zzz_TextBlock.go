// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TextBlock represents a babylon.js TextBlock.
// Class used to create text block control
type TextBlock struct {
	*Control
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (t *TextBlock) JSObject() js.Value { return t.p }

// TextBlock returns a TextBlock JavaScript class.
func (ba *Babylon) TextBlock() *TextBlock {
	p := ba.ctx.Get("TextBlock")
	return TextBlockFromJSObject(p, ba.ctx)
}

// TextBlockFromJSObject returns a wrapped TextBlock JavaScript class.
func TextBlockFromJSObject(p js.Value, ctx js.Value) *TextBlock {
	return &TextBlock{Control: ControlFromJSObject(p, ctx), ctx: ctx}
}

// TextBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func TextBlockArrayToJSArray(array []*TextBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewTextBlockOpts contains optional parameters for NewTextBlock.
type NewTextBlockOpts struct {
	Name *string
	Text *string
}

// NewTextBlock returns a new TextBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock
func (ba *Babylon) NewTextBlock(opts *NewTextBlockOpts) *TextBlock {
	if opts == nil {
		opts = &NewTextBlockOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}
	if opts.Text == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Text)
	}

	p := ba.ctx.Get("TextBlock").New(args...)
	return TextBlockFromJSObject(p, ba.ctx)
}

// ComputeExpectedHeight calls the ComputeExpectedHeight method on the TextBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#computeexpectedheight
func (t *TextBlock) ComputeExpectedHeight() float64 {

	retVal := t.p.Call("computeExpectedHeight")
	return retVal.Float()
}

// Dispose calls the Dispose method on the TextBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#dispose
func (t *TextBlock) Dispose() {

	t.p.Call("dispose")
}

/*

// LineSpacing returns the LineSpacing property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#linespacing
func (t *TextBlock) LineSpacing(lineSpacing string) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(lineSpacing)
	return TextBlockFromJSObject(p, ba.ctx)
}

// SetLineSpacing sets the LineSpacing property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#linespacing
func (t *TextBlock) SetLineSpacing(lineSpacing string) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(lineSpacing)
	return TextBlockFromJSObject(p, ba.ctx)
}

// Lines returns the Lines property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#lines
func (t *TextBlock) Lines(lines interface{}) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(lines)
	return TextBlockFromJSObject(p, ba.ctx)
}

// SetLines sets the Lines property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#lines
func (t *TextBlock) SetLines(lines interface{}) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(lines)
	return TextBlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#name
func (t *TextBlock) Name(name string) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(name)
	return TextBlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#name
func (t *TextBlock) SetName(name string) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(name)
	return TextBlockFromJSObject(p, ba.ctx)
}

// OnLinesReadyObservable returns the OnLinesReadyObservable property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#onlinesreadyobservable
func (t *TextBlock) OnLinesReadyObservable(onLinesReadyObservable *Observable) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(onLinesReadyObservable.JSObject())
	return TextBlockFromJSObject(p, ba.ctx)
}

// SetOnLinesReadyObservable sets the OnLinesReadyObservable property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#onlinesreadyobservable
func (t *TextBlock) SetOnLinesReadyObservable(onLinesReadyObservable *Observable) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(onLinesReadyObservable.JSObject())
	return TextBlockFromJSObject(p, ba.ctx)
}

// OnTextChangedObservable returns the OnTextChangedObservable property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#ontextchangedobservable
func (t *TextBlock) OnTextChangedObservable(onTextChangedObservable *Observable) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(onTextChangedObservable.JSObject())
	return TextBlockFromJSObject(p, ba.ctx)
}

// SetOnTextChangedObservable sets the OnTextChangedObservable property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#ontextchangedobservable
func (t *TextBlock) SetOnTextChangedObservable(onTextChangedObservable *Observable) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(onTextChangedObservable.JSObject())
	return TextBlockFromJSObject(p, ba.ctx)
}

// OutlineColor returns the OutlineColor property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#outlinecolor
func (t *TextBlock) OutlineColor(outlineColor string) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(outlineColor)
	return TextBlockFromJSObject(p, ba.ctx)
}

// SetOutlineColor sets the OutlineColor property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#outlinecolor
func (t *TextBlock) SetOutlineColor(outlineColor string) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(outlineColor)
	return TextBlockFromJSObject(p, ba.ctx)
}

// OutlineWidth returns the OutlineWidth property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#outlinewidth
func (t *TextBlock) OutlineWidth(outlineWidth float64) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(outlineWidth)
	return TextBlockFromJSObject(p, ba.ctx)
}

// SetOutlineWidth sets the OutlineWidth property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#outlinewidth
func (t *TextBlock) SetOutlineWidth(outlineWidth float64) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(outlineWidth)
	return TextBlockFromJSObject(p, ba.ctx)
}

// ResizeToFit returns the ResizeToFit property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#resizetofit
func (t *TextBlock) ResizeToFit(resizeToFit bool) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(resizeToFit)
	return TextBlockFromJSObject(p, ba.ctx)
}

// SetResizeToFit sets the ResizeToFit property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#resizetofit
func (t *TextBlock) SetResizeToFit(resizeToFit bool) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(resizeToFit)
	return TextBlockFromJSObject(p, ba.ctx)
}

// Text returns the Text property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#text
func (t *TextBlock) Text(text string) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(text)
	return TextBlockFromJSObject(p, ba.ctx)
}

// SetText sets the Text property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#text
func (t *TextBlock) SetText(text string) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(text)
	return TextBlockFromJSObject(p, ba.ctx)
}

// TextHorizontalAlignment returns the TextHorizontalAlignment property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#texthorizontalalignment
func (t *TextBlock) TextHorizontalAlignment(textHorizontalAlignment float64) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(textHorizontalAlignment)
	return TextBlockFromJSObject(p, ba.ctx)
}

// SetTextHorizontalAlignment sets the TextHorizontalAlignment property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#texthorizontalalignment
func (t *TextBlock) SetTextHorizontalAlignment(textHorizontalAlignment float64) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(textHorizontalAlignment)
	return TextBlockFromJSObject(p, ba.ctx)
}

// TextVerticalAlignment returns the TextVerticalAlignment property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#textverticalalignment
func (t *TextBlock) TextVerticalAlignment(textVerticalAlignment float64) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(textVerticalAlignment)
	return TextBlockFromJSObject(p, ba.ctx)
}

// SetTextVerticalAlignment sets the TextVerticalAlignment property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#textverticalalignment
func (t *TextBlock) SetTextVerticalAlignment(textVerticalAlignment float64) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(textVerticalAlignment)
	return TextBlockFromJSObject(p, ba.ctx)
}

// TextWrapping returns the TextWrapping property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#textwrapping
func (t *TextBlock) TextWrapping(textWrapping *TextWrapping) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(textWrapping.JSObject())
	return TextBlockFromJSObject(p, ba.ctx)
}

// SetTextWrapping sets the TextWrapping property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.textblock#textwrapping
func (t *TextBlock) SetTextWrapping(textWrapping *TextWrapping) *TextBlock {
	p := ba.ctx.Get("TextBlock").New(textWrapping.JSObject())
	return TextBlockFromJSObject(p, ba.ctx)
}

*/
