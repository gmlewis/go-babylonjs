// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TextBlock represents a babylon.js TextBlock.
// Class used to create text block control
type TextBlock struct {
	*Control
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (t *TextBlock) JSObject() js.Value { return t.p }

// TextBlock returns a TextBlock JavaScript class.
func (gui *GUI) TextBlock() *TextBlock {
	p := gui.ctx.Get("TextBlock")
	return TextBlockFromJSObject(p, gui.ctx)
}

// TextBlockFromJSObject returns a wrapped TextBlock JavaScript class.
func TextBlockFromJSObject(p js.Value, ctx js.Value) *TextBlock {
	return &TextBlock{Control: ControlFromJSObject(p, ctx), ctx: ctx}
}

// TextBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func TextBlockArrayToJSArray(array []*TextBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewTextBlock returns a new TextBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#constructor
func (gui *GUI) NewTextBlock(name string, text string) *TextBlock {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, text)

	p := gui.ctx.Get("TextBlock").New(args...)
	return TextBlockFromJSObject(p, gui.ctx)
}

// ComputeExpectedHeight calls the ComputeExpectedHeight method on the TextBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#computeexpectedheight
func (t *TextBlock) ComputeExpectedHeight() float64 {

	retVal := t.p.Call("computeExpectedHeight")
	return retVal.Float()
}

// Dispose calls the Dispose method on the TextBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#dispose
func (t *TextBlock) Dispose() {

	t.p.Call("dispose")
}

// LineSpacing returns the LineSpacing property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#linespacing
func (t *TextBlock) LineSpacing() string {
	retVal := t.p.Get("lineSpacing")
	return retVal.String()
}

// SetLineSpacing sets the LineSpacing property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#linespacing
func (t *TextBlock) SetLineSpacing(lineSpacing string) *TextBlock {
	t.p.Set("lineSpacing", lineSpacing)
	return t
}

// Lines returns the Lines property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#lines
func (t *TextBlock) Lines() js.Value {
	retVal := t.p.Get("lines")
	return retVal
}

// SetLines sets the Lines property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#lines
func (t *TextBlock) SetLines(lines JSObject) *TextBlock {
	t.p.Set("lines", lines.JSObject())
	return t
}

// Name returns the Name property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#name
func (t *TextBlock) Name() string {
	retVal := t.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#name
func (t *TextBlock) SetName(name string) *TextBlock {
	t.p.Set("name", name)
	return t
}

// OnLinesReadyObservable returns the OnLinesReadyObservable property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#onlinesreadyobservable
func (t *TextBlock) OnLinesReadyObservable() *Observable {
	retVal := t.p.Get("onLinesReadyObservable")
	return ObservableFromJSObject(retVal, t.ctx)
}

// SetOnLinesReadyObservable sets the OnLinesReadyObservable property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#onlinesreadyobservable
func (t *TextBlock) SetOnLinesReadyObservable(onLinesReadyObservable *Observable) *TextBlock {
	t.p.Set("onLinesReadyObservable", onLinesReadyObservable.JSObject())
	return t
}

// OnTextChangedObservable returns the OnTextChangedObservable property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#ontextchangedobservable
func (t *TextBlock) OnTextChangedObservable() *Observable {
	retVal := t.p.Get("onTextChangedObservable")
	return ObservableFromJSObject(retVal, t.ctx)
}

// SetOnTextChangedObservable sets the OnTextChangedObservable property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#ontextchangedobservable
func (t *TextBlock) SetOnTextChangedObservable(onTextChangedObservable *Observable) *TextBlock {
	t.p.Set("onTextChangedObservable", onTextChangedObservable.JSObject())
	return t
}

// OutlineColor returns the OutlineColor property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#outlinecolor
func (t *TextBlock) OutlineColor() string {
	retVal := t.p.Get("outlineColor")
	return retVal.String()
}

// SetOutlineColor sets the OutlineColor property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#outlinecolor
func (t *TextBlock) SetOutlineColor(outlineColor string) *TextBlock {
	t.p.Set("outlineColor", outlineColor)
	return t
}

// OutlineWidth returns the OutlineWidth property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#outlinewidth
func (t *TextBlock) OutlineWidth() float64 {
	retVal := t.p.Get("outlineWidth")
	return retVal.Float()
}

// SetOutlineWidth sets the OutlineWidth property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#outlinewidth
func (t *TextBlock) SetOutlineWidth(outlineWidth float64) *TextBlock {
	t.p.Set("outlineWidth", outlineWidth)
	return t
}

// ResizeToFit returns the ResizeToFit property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#resizetofit
func (t *TextBlock) ResizeToFit() bool {
	retVal := t.p.Get("resizeToFit")
	return retVal.Bool()
}

// SetResizeToFit sets the ResizeToFit property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#resizetofit
func (t *TextBlock) SetResizeToFit(resizeToFit bool) *TextBlock {
	t.p.Set("resizeToFit", resizeToFit)
	return t
}

// Text returns the Text property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#text
func (t *TextBlock) Text() string {
	retVal := t.p.Get("text")
	return retVal.String()
}

// SetText sets the Text property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#text
func (t *TextBlock) SetText(text string) *TextBlock {
	t.p.Set("text", text)
	return t
}

// TextHorizontalAlignment returns the TextHorizontalAlignment property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#texthorizontalalignment
func (t *TextBlock) TextHorizontalAlignment() float64 {
	retVal := t.p.Get("textHorizontalAlignment")
	return retVal.Float()
}

// SetTextHorizontalAlignment sets the TextHorizontalAlignment property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#texthorizontalalignment
func (t *TextBlock) SetTextHorizontalAlignment(textHorizontalAlignment float64) *TextBlock {
	t.p.Set("textHorizontalAlignment", textHorizontalAlignment)
	return t
}

// TextVerticalAlignment returns the TextVerticalAlignment property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#textverticalalignment
func (t *TextBlock) TextVerticalAlignment() float64 {
	retVal := t.p.Get("textVerticalAlignment")
	return retVal.Float()
}

// SetTextVerticalAlignment sets the TextVerticalAlignment property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#textverticalalignment
func (t *TextBlock) SetTextVerticalAlignment(textVerticalAlignment float64) *TextBlock {
	t.p.Set("textVerticalAlignment", textVerticalAlignment)
	return t
}

// TextWrapping returns the TextWrapping property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#textwrapping
func (t *TextBlock) TextWrapping() js.Value {
	retVal := t.p.Get("textWrapping")
	return retVal
}

// SetTextWrapping sets the TextWrapping property of class TextBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.textblock#textwrapping
func (t *TextBlock) SetTextWrapping(textWrapping js.Value) *TextBlock {
	t.p.Set("textWrapping", textWrapping)
	return t
}
