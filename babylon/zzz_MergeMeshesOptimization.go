// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MergeMeshesOptimization represents a babylon.js MergeMeshesOptimization.
// Defines an optimization used to merge meshes with compatible materials
//
// See: http://doc.babylonjs.com/how_to/how_to_use_sceneoptimizer
type MergeMeshesOptimization struct {
	*SceneOptimization
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MergeMeshesOptimization) JSObject() js.Value { return m.p }

// MergeMeshesOptimization returns a MergeMeshesOptimization JavaScript class.
func (ba *Babylon) MergeMeshesOptimization() *MergeMeshesOptimization {
	p := ba.ctx.Get("MergeMeshesOptimization")
	return MergeMeshesOptimizationFromJSObject(p, ba.ctx)
}

// MergeMeshesOptimizationFromJSObject returns a wrapped MergeMeshesOptimization JavaScript class.
func MergeMeshesOptimizationFromJSObject(p js.Value, ctx js.Value) *MergeMeshesOptimization {
	return &MergeMeshesOptimization{SceneOptimization: SceneOptimizationFromJSObject(p, ctx), ctx: ctx}
}

// MergeMeshesOptimizationArrayToJSArray returns a JavaScript Array for the wrapped array.
func MergeMeshesOptimizationArrayToJSArray(array []*MergeMeshesOptimization) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewMergeMeshesOptimizationOpts contains optional parameters for NewMergeMeshesOptimization.
type NewMergeMeshesOptimizationOpts struct {
	Priority *float64
}

// NewMergeMeshesOptimization returns a new MergeMeshesOptimization object.
//
// https://doc.babylonjs.com/api/classes/babylon.mergemeshesoptimization
func (ba *Babylon) NewMergeMeshesOptimization(opts *NewMergeMeshesOptimizationOpts) *MergeMeshesOptimization {
	if opts == nil {
		opts = &NewMergeMeshesOptimizationOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Priority == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Priority)
	}

	p := ba.ctx.Get("MergeMeshesOptimization").New(args...)
	return MergeMeshesOptimizationFromJSObject(p, ba.ctx)
}

// MergeMeshesOptimizationApplyOpts contains optional parameters for MergeMeshesOptimization.Apply.
type MergeMeshesOptimizationApplyOpts struct {
	UpdateSelectionTree *bool
}

// Apply calls the Apply method on the MergeMeshesOptimization object.
//
// https://doc.babylonjs.com/api/classes/babylon.mergemeshesoptimization#apply
func (m *MergeMeshesOptimization) Apply(scene *Scene, optimizer *SceneOptimizer, opts *MergeMeshesOptimizationApplyOpts) bool {
	if opts == nil {
		opts = &MergeMeshesOptimizationApplyOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	if optimizer == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, optimizer.JSObject())
	}

	if opts.UpdateSelectionTree == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UpdateSelectionTree)
	}

	retVal := m.p.Call("apply", args...)
	return retVal.Bool()
}

// GetDescription calls the GetDescription method on the MergeMeshesOptimization object.
//
// https://doc.babylonjs.com/api/classes/babylon.mergemeshesoptimization#getdescription
func (m *MergeMeshesOptimization) GetDescription() string {

	retVal := m.p.Call("getDescription")
	return retVal.String()
}

// UpdateSelectionTree returns the UpdateSelectionTree property of class MergeMeshesOptimization.
//
// https://doc.babylonjs.com/api/classes/babylon.mergemeshesoptimization#updateselectiontree
func (m *MergeMeshesOptimization) UpdateSelectionTree() bool {
	retVal := m.p.Get("UpdateSelectionTree")
	return retVal.Bool()
}

// SetUpdateSelectionTree sets the UpdateSelectionTree property of class MergeMeshesOptimization.
//
// https://doc.babylonjs.com/api/classes/babylon.mergemeshesoptimization#updateselectiontree
func (m *MergeMeshesOptimization) SetUpdateSelectionTree(UpdateSelectionTree bool) *MergeMeshesOptimization {
	m.p.Set("UpdateSelectionTree", UpdateSelectionTree)
	return m
}
