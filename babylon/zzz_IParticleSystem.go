// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IParticleSystem represents a babylon.js IParticleSystem.
// Interface representing a particle system in Babylon.js.
// This groups the common functionalities that needs to be implemented in order to create a particle system.
// A particle system represents a way to manage particles from their emission to their animation and rendering.
type IParticleSystem struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IParticleSystem) JSObject() js.Value { return i.p }

// IParticleSystem returns a IParticleSystem JavaScript class.
func (ba *Babylon) IParticleSystem() *IParticleSystem {
	p := ba.ctx.Get("IParticleSystem")
	return IParticleSystemFromJSObject(p, ba.ctx)
}

// IParticleSystemFromJSObject returns a wrapped IParticleSystem JavaScript class.
func IParticleSystemFromJSObject(p js.Value, ctx js.Value) *IParticleSystem {
	return &IParticleSystem{p: p, ctx: ctx}
}

// IParticleSystemArrayToJSArray returns a JavaScript Array for the wrapped array.
func IParticleSystemArrayToJSArray(array []*IParticleSystem) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// AddAlphaRemapGradient calls the AddAlphaRemapGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#addalpharemapgradient
func (i *IParticleSystem) AddAlphaRemapGradient(gradient float64, min float64, max float64) *IParticleSystem {

	args := make([]interface{}, 0, 3+0)

	args = append(args, gradient)

	args = append(args, min)

	args = append(args, max)

	retVal := i.p.Call("addAlphaRemapGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// IParticleSystemAddAngularSpeedGradientOpts contains optional parameters for IParticleSystem.AddAngularSpeedGradient.
type IParticleSystemAddAngularSpeedGradientOpts struct {
	Factor2 *float64
}

// AddAngularSpeedGradient calls the AddAngularSpeedGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#addangularspeedgradient
func (i *IParticleSystem) AddAngularSpeedGradient(gradient float64, factor float64, opts *IParticleSystemAddAngularSpeedGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &IParticleSystemAddAngularSpeedGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)

	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := i.p.Call("addAngularSpeedGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// IParticleSystemAddColorGradientOpts contains optional parameters for IParticleSystem.AddColorGradient.
type IParticleSystemAddColorGradientOpts struct {
	Color2 *Color4
}

// AddColorGradient calls the AddColorGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#addcolorgradient
func (i *IParticleSystem) AddColorGradient(gradient float64, color1 *Color4, opts *IParticleSystemAddColorGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &IParticleSystemAddColorGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)

	if color1 == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, color1.JSObject())
	}

	if opts.Color2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Color2.JSObject())
	}

	retVal := i.p.Call("addColorGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// AddColorRemapGradient calls the AddColorRemapGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#addcolorremapgradient
func (i *IParticleSystem) AddColorRemapGradient(gradient float64, min float64, max float64) *IParticleSystem {

	args := make([]interface{}, 0, 3+0)

	args = append(args, gradient)

	args = append(args, min)

	args = append(args, max)

	retVal := i.p.Call("addColorRemapGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// IParticleSystemAddDragGradientOpts contains optional parameters for IParticleSystem.AddDragGradient.
type IParticleSystemAddDragGradientOpts struct {
	Factor2 *float64
}

// AddDragGradient calls the AddDragGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#adddraggradient
func (i *IParticleSystem) AddDragGradient(gradient float64, factor float64, opts *IParticleSystemAddDragGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &IParticleSystemAddDragGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)

	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := i.p.Call("addDragGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// IParticleSystemAddEmitRateGradientOpts contains optional parameters for IParticleSystem.AddEmitRateGradient.
type IParticleSystemAddEmitRateGradientOpts struct {
	Factor2 *float64
}

// AddEmitRateGradient calls the AddEmitRateGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#addemitrategradient
func (i *IParticleSystem) AddEmitRateGradient(gradient float64, factor float64, opts *IParticleSystemAddEmitRateGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &IParticleSystemAddEmitRateGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)

	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := i.p.Call("addEmitRateGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// IParticleSystemAddLifeTimeGradientOpts contains optional parameters for IParticleSystem.AddLifeTimeGradient.
type IParticleSystemAddLifeTimeGradientOpts struct {
	Factor2 *float64
}

// AddLifeTimeGradient calls the AddLifeTimeGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#addlifetimegradient
func (i *IParticleSystem) AddLifeTimeGradient(gradient float64, factor float64, opts *IParticleSystemAddLifeTimeGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &IParticleSystemAddLifeTimeGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)

	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := i.p.Call("addLifeTimeGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// IParticleSystemAddLimitVelocityGradientOpts contains optional parameters for IParticleSystem.AddLimitVelocityGradient.
type IParticleSystemAddLimitVelocityGradientOpts struct {
	Factor2 *float64
}

// AddLimitVelocityGradient calls the AddLimitVelocityGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#addlimitvelocitygradient
func (i *IParticleSystem) AddLimitVelocityGradient(gradient float64, factor float64, opts *IParticleSystemAddLimitVelocityGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &IParticleSystemAddLimitVelocityGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)

	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := i.p.Call("addLimitVelocityGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// AddRampGradient calls the AddRampGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#addrampgradient
func (i *IParticleSystem) AddRampGradient(gradient float64, color *Color3) *IParticleSystem {

	args := make([]interface{}, 0, 2+0)

	args = append(args, gradient)

	if color == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, color.JSObject())
	}

	retVal := i.p.Call("addRampGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// IParticleSystemAddSizeGradientOpts contains optional parameters for IParticleSystem.AddSizeGradient.
type IParticleSystemAddSizeGradientOpts struct {
	Factor2 *float64
}

// AddSizeGradient calls the AddSizeGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#addsizegradient
func (i *IParticleSystem) AddSizeGradient(gradient float64, factor float64, opts *IParticleSystemAddSizeGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &IParticleSystemAddSizeGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)

	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := i.p.Call("addSizeGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// IParticleSystemAddStartSizeGradientOpts contains optional parameters for IParticleSystem.AddStartSizeGradient.
type IParticleSystemAddStartSizeGradientOpts struct {
	Factor2 *float64
}

// AddStartSizeGradient calls the AddStartSizeGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#addstartsizegradient
func (i *IParticleSystem) AddStartSizeGradient(gradient float64, factor float64, opts *IParticleSystemAddStartSizeGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &IParticleSystemAddStartSizeGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)

	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := i.p.Call("addStartSizeGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// IParticleSystemAddVelocityGradientOpts contains optional parameters for IParticleSystem.AddVelocityGradient.
type IParticleSystemAddVelocityGradientOpts struct {
	Factor2 *float64
}

// AddVelocityGradient calls the AddVelocityGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#addvelocitygradient
func (i *IParticleSystem) AddVelocityGradient(gradient float64, factor float64, opts *IParticleSystemAddVelocityGradientOpts) *IParticleSystem {
	if opts == nil {
		opts = &IParticleSystemAddVelocityGradientOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, gradient)

	args = append(args, factor)

	if opts.Factor2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Factor2)
	}

	retVal := i.p.Call("addVelocityGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// Animate calls the Animate method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#animate
func (i *IParticleSystem) Animate() {

	i.p.Call("animate")
}

// Clone calls the Clone method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#clone
func (i *IParticleSystem) Clone(name string, newEmitter JSObject) *IParticleSystem {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)

	if newEmitter == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, newEmitter.JSObject())
	}

	retVal := i.p.Call("clone", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// CreateBoxEmitter calls the CreateBoxEmitter method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#createboxemitter
func (i *IParticleSystem) CreateBoxEmitter(direction1 *Vector3, direction2 *Vector3, minEmitBox *Vector3, maxEmitBox *Vector3) *BoxParticleEmitter {

	args := make([]interface{}, 0, 4+0)

	if direction1 == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, direction1.JSObject())
	}

	if direction2 == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, direction2.JSObject())
	}

	if minEmitBox == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, minEmitBox.JSObject())
	}

	if maxEmitBox == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, maxEmitBox.JSObject())
	}

	retVal := i.p.Call("createBoxEmitter", args...)
	return BoxParticleEmitterFromJSObject(retVal, i.ctx)
}

// CreateConeEmitter calls the CreateConeEmitter method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#createconeemitter
func (i *IParticleSystem) CreateConeEmitter(radius float64, angle float64) *ConeParticleEmitter {

	args := make([]interface{}, 0, 2+0)

	args = append(args, radius)

	args = append(args, angle)

	retVal := i.p.Call("createConeEmitter", args...)
	return ConeParticleEmitterFromJSObject(retVal, i.ctx)
}

// CreateCylinderEmitter calls the CreateCylinderEmitter method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#createcylinderemitter
func (i *IParticleSystem) CreateCylinderEmitter(radius float64, height float64, radiusRange float64, directionRandomizer float64) *CylinderParticleEmitter {

	args := make([]interface{}, 0, 4+0)

	args = append(args, radius)

	args = append(args, height)

	args = append(args, radiusRange)

	args = append(args, directionRandomizer)

	retVal := i.p.Call("createCylinderEmitter", args...)
	return CylinderParticleEmitterFromJSObject(retVal, i.ctx)
}

// CreateDirectedCylinderEmitter calls the CreateDirectedCylinderEmitter method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#createdirectedcylinderemitter
func (i *IParticleSystem) CreateDirectedCylinderEmitter(radius float64, height float64, radiusRange float64, direction1 *Vector3, direction2 *Vector3) *SphereDirectedParticleEmitter {

	args := make([]interface{}, 0, 5+0)

	args = append(args, radius)

	args = append(args, height)

	args = append(args, radiusRange)

	if direction1 == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, direction1.JSObject())
	}

	if direction2 == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, direction2.JSObject())
	}

	retVal := i.p.Call("createDirectedCylinderEmitter", args...)
	return SphereDirectedParticleEmitterFromJSObject(retVal, i.ctx)
}

// CreateDirectedSphereEmitter calls the CreateDirectedSphereEmitter method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#createdirectedsphereemitter
func (i *IParticleSystem) CreateDirectedSphereEmitter(radius float64, direction1 *Vector3, direction2 *Vector3) *SphereDirectedParticleEmitter {

	args := make([]interface{}, 0, 3+0)

	args = append(args, radius)

	if direction1 == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, direction1.JSObject())
	}

	if direction2 == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, direction2.JSObject())
	}

	retVal := i.p.Call("createDirectedSphereEmitter", args...)
	return SphereDirectedParticleEmitterFromJSObject(retVal, i.ctx)
}

// CreateHemisphericEmitter calls the CreateHemisphericEmitter method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#createhemisphericemitter
func (i *IParticleSystem) CreateHemisphericEmitter(radius float64, radiusRange float64) *HemisphericParticleEmitter {

	args := make([]interface{}, 0, 2+0)

	args = append(args, radius)

	args = append(args, radiusRange)

	retVal := i.p.Call("createHemisphericEmitter", args...)
	return HemisphericParticleEmitterFromJSObject(retVal, i.ctx)
}

// CreatePointEmitter calls the CreatePointEmitter method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#createpointemitter
func (i *IParticleSystem) CreatePointEmitter(direction1 *Vector3, direction2 *Vector3) *PointParticleEmitter {

	args := make([]interface{}, 0, 2+0)

	if direction1 == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, direction1.JSObject())
	}

	if direction2 == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, direction2.JSObject())
	}

	retVal := i.p.Call("createPointEmitter", args...)
	return PointParticleEmitterFromJSObject(retVal, i.ctx)
}

// CreateSphereEmitter calls the CreateSphereEmitter method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#createsphereemitter
func (i *IParticleSystem) CreateSphereEmitter(radius float64, radiusRange float64) *SphereParticleEmitter {

	args := make([]interface{}, 0, 2+0)

	args = append(args, radius)

	args = append(args, radiusRange)

	retVal := i.p.Call("createSphereEmitter", args...)
	return SphereParticleEmitterFromJSObject(retVal, i.ctx)
}

// IParticleSystemDisposeOpts contains optional parameters for IParticleSystem.Dispose.
type IParticleSystemDisposeOpts struct {
	DisposeTexture *bool
}

// Dispose calls the Dispose method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#dispose
func (i *IParticleSystem) Dispose(opts *IParticleSystemDisposeOpts) {
	if opts == nil {
		opts = &IParticleSystemDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.DisposeTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DisposeTexture)
	}

	i.p.Call("dispose", args...)
}

// GetAlphaRemapGradients calls the GetAlphaRemapGradients method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#getalpharemapgradients
func (i *IParticleSystem) GetAlphaRemapGradients() []*FactorGradient {

	retVal := i.p.Call("getAlphaRemapGradients")
	result := []*FactorGradient{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, FactorGradientFromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// GetAngularSpeedGradients calls the GetAngularSpeedGradients method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#getangularspeedgradients
func (i *IParticleSystem) GetAngularSpeedGradients() []*FactorGradient {

	retVal := i.p.Call("getAngularSpeedGradients")
	result := []*FactorGradient{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, FactorGradientFromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// GetCapacity calls the GetCapacity method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#getcapacity
func (i *IParticleSystem) GetCapacity() float64 {

	retVal := i.p.Call("getCapacity")
	return retVal.Float()
}

// GetColorGradients calls the GetColorGradients method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#getcolorgradients
func (i *IParticleSystem) GetColorGradients() []*ColorGradient {

	retVal := i.p.Call("getColorGradients")
	result := []*ColorGradient{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, ColorGradientFromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// GetColorRemapGradients calls the GetColorRemapGradients method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#getcolorremapgradients
func (i *IParticleSystem) GetColorRemapGradients() []*FactorGradient {

	retVal := i.p.Call("getColorRemapGradients")
	result := []*FactorGradient{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, FactorGradientFromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// GetDragGradients calls the GetDragGradients method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#getdraggradients
func (i *IParticleSystem) GetDragGradients() []*FactorGradient {

	retVal := i.p.Call("getDragGradients")
	result := []*FactorGradient{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, FactorGradientFromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// GetEmitRateGradients calls the GetEmitRateGradients method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#getemitrategradients
func (i *IParticleSystem) GetEmitRateGradients() []*FactorGradient {

	retVal := i.p.Call("getEmitRateGradients")
	result := []*FactorGradient{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, FactorGradientFromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// GetLifeTimeGradients calls the GetLifeTimeGradients method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#getlifetimegradients
func (i *IParticleSystem) GetLifeTimeGradients() []*FactorGradient {

	retVal := i.p.Call("getLifeTimeGradients")
	result := []*FactorGradient{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, FactorGradientFromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// GetLimitVelocityGradients calls the GetLimitVelocityGradients method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#getlimitvelocitygradients
func (i *IParticleSystem) GetLimitVelocityGradients() []*FactorGradient {

	retVal := i.p.Call("getLimitVelocityGradients")
	result := []*FactorGradient{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, FactorGradientFromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// GetRampGradients calls the GetRampGradients method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#getrampgradients
func (i *IParticleSystem) GetRampGradients() []*Color3Gradient {

	retVal := i.p.Call("getRampGradients")
	result := []*Color3Gradient{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, Color3GradientFromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// GetScene calls the GetScene method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#getscene
func (i *IParticleSystem) GetScene() *Scene {

	retVal := i.p.Call("getScene")
	return SceneFromJSObject(retVal, i.ctx)
}

// GetSizeGradients calls the GetSizeGradients method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#getsizegradients
func (i *IParticleSystem) GetSizeGradients() []*FactorGradient {

	retVal := i.p.Call("getSizeGradients")
	result := []*FactorGradient{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, FactorGradientFromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// GetStartSizeGradients calls the GetStartSizeGradients method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#getstartsizegradients
func (i *IParticleSystem) GetStartSizeGradients() []*FactorGradient {

	retVal := i.p.Call("getStartSizeGradients")
	result := []*FactorGradient{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, FactorGradientFromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// GetVelocityGradients calls the GetVelocityGradients method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#getvelocitygradients
func (i *IParticleSystem) GetVelocityGradients() []*FactorGradient {

	retVal := i.p.Call("getVelocityGradients")
	result := []*FactorGradient{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, FactorGradientFromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// IsReady calls the IsReady method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#isready
func (i *IParticleSystem) IsReady() bool {

	retVal := i.p.Call("isReady")
	return retVal.Bool()
}

// IsStarted calls the IsStarted method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#isstarted
func (i *IParticleSystem) IsStarted() bool {

	retVal := i.p.Call("isStarted")
	return retVal.Bool()
}

// Rebuild calls the Rebuild method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#rebuild
func (i *IParticleSystem) Rebuild() {

	i.p.Call("rebuild")
}

// RemoveAngularSpeedGradient calls the RemoveAngularSpeedGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#removeangularspeedgradient
func (i *IParticleSystem) RemoveAngularSpeedGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := i.p.Call("removeAngularSpeedGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// RemoveColorGradient calls the RemoveColorGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#removecolorgradient
func (i *IParticleSystem) RemoveColorGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := i.p.Call("removeColorGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// RemoveDragGradient calls the RemoveDragGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#removedraggradient
func (i *IParticleSystem) RemoveDragGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := i.p.Call("removeDragGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// RemoveEmitRateGradient calls the RemoveEmitRateGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#removeemitrategradient
func (i *IParticleSystem) RemoveEmitRateGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := i.p.Call("removeEmitRateGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// RemoveLifeTimeGradient calls the RemoveLifeTimeGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#removelifetimegradient
func (i *IParticleSystem) RemoveLifeTimeGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := i.p.Call("removeLifeTimeGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// RemoveLimitVelocityGradient calls the RemoveLimitVelocityGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#removelimitvelocitygradient
func (i *IParticleSystem) RemoveLimitVelocityGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := i.p.Call("removeLimitVelocityGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// RemoveSizeGradient calls the RemoveSizeGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#removesizegradient
func (i *IParticleSystem) RemoveSizeGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := i.p.Call("removeSizeGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// RemoveStartSizeGradient calls the RemoveStartSizeGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#removestartsizegradient
func (i *IParticleSystem) RemoveStartSizeGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := i.p.Call("removeStartSizeGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// RemoveVelocityGradient calls the RemoveVelocityGradient method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#removevelocitygradient
func (i *IParticleSystem) RemoveVelocityGradient(gradient float64) *IParticleSystem {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := i.p.Call("removeVelocityGradient", args...)
	return IParticleSystemFromJSObject(retVal, i.ctx)
}

// Render calls the Render method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#render
func (i *IParticleSystem) Render() float64 {

	retVal := i.p.Call("render")
	return retVal.Float()
}

// Reset calls the Reset method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#reset
func (i *IParticleSystem) Reset() {

	i.p.Call("reset")
}

// Serialize calls the Serialize method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#serialize
func (i *IParticleSystem) Serialize() js.Value {

	retVal := i.p.Call("serialize")
	return retVal
}

// IParticleSystemStartOpts contains optional parameters for IParticleSystem.Start.
type IParticleSystemStartOpts struct {
	Delay *float64
}

// Start calls the Start method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#start
func (i *IParticleSystem) Start(opts *IParticleSystemStartOpts) {
	if opts == nil {
		opts = &IParticleSystemStartOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Delay == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Delay)
	}

	i.p.Call("start", args...)
}

// Stop calls the Stop method on the IParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#stop
func (i *IParticleSystem) Stop() {

	i.p.Call("stop")
}

// Animations returns the Animations property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#animations
func (i *IParticleSystem) Animations() []*Animation {
	retVal := i.p.Get("animations")
	result := []*Animation{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, AnimationFromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// SetAnimations sets the Animations property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#animations
func (i *IParticleSystem) SetAnimations(animations []*Animation) *IParticleSystem {
	i.p.Set("animations", animations)
	return i
}

// BeginAnimationFrom returns the BeginAnimationFrom property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#beginanimationfrom
func (i *IParticleSystem) BeginAnimationFrom() float64 {
	retVal := i.p.Get("beginAnimationFrom")
	return retVal.Float()
}

// SetBeginAnimationFrom sets the BeginAnimationFrom property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#beginanimationfrom
func (i *IParticleSystem) SetBeginAnimationFrom(beginAnimationFrom float64) *IParticleSystem {
	i.p.Set("beginAnimationFrom", beginAnimationFrom)
	return i
}

// BeginAnimationLoop returns the BeginAnimationLoop property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#beginanimationloop
func (i *IParticleSystem) BeginAnimationLoop() bool {
	retVal := i.p.Get("beginAnimationLoop")
	return retVal.Bool()
}

// SetBeginAnimationLoop sets the BeginAnimationLoop property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#beginanimationloop
func (i *IParticleSystem) SetBeginAnimationLoop(beginAnimationLoop bool) *IParticleSystem {
	i.p.Set("beginAnimationLoop", beginAnimationLoop)
	return i
}

// BeginAnimationOnStart returns the BeginAnimationOnStart property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#beginanimationonstart
func (i *IParticleSystem) BeginAnimationOnStart() bool {
	retVal := i.p.Get("beginAnimationOnStart")
	return retVal.Bool()
}

// SetBeginAnimationOnStart sets the BeginAnimationOnStart property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#beginanimationonstart
func (i *IParticleSystem) SetBeginAnimationOnStart(beginAnimationOnStart bool) *IParticleSystem {
	i.p.Set("beginAnimationOnStart", beginAnimationOnStart)
	return i
}

// BeginAnimationTo returns the BeginAnimationTo property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#beginanimationto
func (i *IParticleSystem) BeginAnimationTo() float64 {
	retVal := i.p.Get("beginAnimationTo")
	return retVal.Float()
}

// SetBeginAnimationTo sets the BeginAnimationTo property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#beginanimationto
func (i *IParticleSystem) SetBeginAnimationTo(beginAnimationTo float64) *IParticleSystem {
	i.p.Set("beginAnimationTo", beginAnimationTo)
	return i
}

// BillboardMode returns the BillboardMode property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#billboardmode
func (i *IParticleSystem) BillboardMode() float64 {
	retVal := i.p.Get("billboardMode")
	return retVal.Float()
}

// SetBillboardMode sets the BillboardMode property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#billboardmode
func (i *IParticleSystem) SetBillboardMode(billboardMode float64) *IParticleSystem {
	i.p.Set("billboardMode", billboardMode)
	return i
}

// BlendMode returns the BlendMode property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#blendmode
func (i *IParticleSystem) BlendMode() float64 {
	retVal := i.p.Get("blendMode")
	return retVal.Float()
}

// SetBlendMode sets the BlendMode property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#blendmode
func (i *IParticleSystem) SetBlendMode(blendMode float64) *IParticleSystem {
	i.p.Set("blendMode", blendMode)
	return i
}

// Color1 returns the Color1 property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#color1
func (i *IParticleSystem) Color1() *Color4 {
	retVal := i.p.Get("color1")
	return Color4FromJSObject(retVal, i.ctx)
}

// SetColor1 sets the Color1 property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#color1
func (i *IParticleSystem) SetColor1(color1 *Color4) *IParticleSystem {
	i.p.Set("color1", color1.JSObject())
	return i
}

// Color2 returns the Color2 property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#color2
func (i *IParticleSystem) Color2() *Color4 {
	retVal := i.p.Get("color2")
	return Color4FromJSObject(retVal, i.ctx)
}

// SetColor2 sets the Color2 property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#color2
func (i *IParticleSystem) SetColor2(color2 *Color4) *IParticleSystem {
	i.p.Set("color2", color2.JSObject())
	return i
}

// ColorDead returns the ColorDead property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#colordead
func (i *IParticleSystem) ColorDead() *Color4 {
	retVal := i.p.Get("colorDead")
	return Color4FromJSObject(retVal, i.ctx)
}

// SetColorDead sets the ColorDead property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#colordead
func (i *IParticleSystem) SetColorDead(colorDead *Color4) *IParticleSystem {
	i.p.Set("colorDead", colorDead.JSObject())
	return i
}

// DisposeOnStop returns the DisposeOnStop property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#disposeonstop
func (i *IParticleSystem) DisposeOnStop() bool {
	retVal := i.p.Get("disposeOnStop")
	return retVal.Bool()
}

// SetDisposeOnStop sets the DisposeOnStop property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#disposeonstop
func (i *IParticleSystem) SetDisposeOnStop(disposeOnStop bool) *IParticleSystem {
	i.p.Set("disposeOnStop", disposeOnStop)
	return i
}

// EmitRate returns the EmitRate property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#emitrate
func (i *IParticleSystem) EmitRate() float64 {
	retVal := i.p.Get("emitRate")
	return retVal.Float()
}

// SetEmitRate sets the EmitRate property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#emitrate
func (i *IParticleSystem) SetEmitRate(emitRate float64) *IParticleSystem {
	i.p.Set("emitRate", emitRate)
	return i
}

// Emitter returns the Emitter property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#emitter
func (i *IParticleSystem) Emitter() *AbstractMesh {
	retVal := i.p.Get("emitter")
	return AbstractMeshFromJSObject(retVal, i.ctx)
}

// SetEmitter sets the Emitter property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#emitter
func (i *IParticleSystem) SetEmitter(emitter *AbstractMesh) *IParticleSystem {
	i.p.Set("emitter", emitter.JSObject())
	return i
}

// EndSpriteCellID returns the EndSpriteCellID property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#endspritecellid
func (i *IParticleSystem) EndSpriteCellID() float64 {
	retVal := i.p.Get("endSpriteCellID")
	return retVal.Float()
}

// SetEndSpriteCellID sets the EndSpriteCellID property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#endspritecellid
func (i *IParticleSystem) SetEndSpriteCellID(endSpriteCellID float64) *IParticleSystem {
	i.p.Set("endSpriteCellID", endSpriteCellID)
	return i
}

// Gravity returns the Gravity property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#gravity
func (i *IParticleSystem) Gravity() *Vector3 {
	retVal := i.p.Get("gravity")
	return Vector3FromJSObject(retVal, i.ctx)
}

// SetGravity sets the Gravity property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#gravity
func (i *IParticleSystem) SetGravity(gravity *Vector3) *IParticleSystem {
	i.p.Set("gravity", gravity.JSObject())
	return i
}

// Id returns the Id property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#id
func (i *IParticleSystem) Id() string {
	retVal := i.p.Get("id")
	return retVal.String()
}

// SetId sets the Id property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#id
func (i *IParticleSystem) SetId(id string) *IParticleSystem {
	i.p.Set("id", id)
	return i
}

// IsAnimationSheetEnabled returns the IsAnimationSheetEnabled property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#isanimationsheetenabled
func (i *IParticleSystem) IsAnimationSheetEnabled() bool {
	retVal := i.p.Get("isAnimationSheetEnabled")
	return retVal.Bool()
}

// SetIsAnimationSheetEnabled sets the IsAnimationSheetEnabled property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#isanimationsheetenabled
func (i *IParticleSystem) SetIsAnimationSheetEnabled(isAnimationSheetEnabled bool) *IParticleSystem {
	i.p.Set("isAnimationSheetEnabled", isAnimationSheetEnabled)
	return i
}

// IsBillboardBased returns the IsBillboardBased property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#isbillboardbased
func (i *IParticleSystem) IsBillboardBased() bool {
	retVal := i.p.Get("isBillboardBased")
	return retVal.Bool()
}

// SetIsBillboardBased sets the IsBillboardBased property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#isbillboardbased
func (i *IParticleSystem) SetIsBillboardBased(isBillboardBased bool) *IParticleSystem {
	i.p.Set("isBillboardBased", isBillboardBased)
	return i
}

// LayerMask returns the LayerMask property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#layermask
func (i *IParticleSystem) LayerMask() float64 {
	retVal := i.p.Get("layerMask")
	return retVal.Float()
}

// SetLayerMask sets the LayerMask property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#layermask
func (i *IParticleSystem) SetLayerMask(layerMask float64) *IParticleSystem {
	i.p.Set("layerMask", layerMask)
	return i
}

// LimitVelocityDamping returns the LimitVelocityDamping property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#limitvelocitydamping
func (i *IParticleSystem) LimitVelocityDamping() float64 {
	retVal := i.p.Get("limitVelocityDamping")
	return retVal.Float()
}

// SetLimitVelocityDamping sets the LimitVelocityDamping property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#limitvelocitydamping
func (i *IParticleSystem) SetLimitVelocityDamping(limitVelocityDamping float64) *IParticleSystem {
	i.p.Set("limitVelocityDamping", limitVelocityDamping)
	return i
}

// MaxAngularSpeed returns the MaxAngularSpeed property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#maxangularspeed
func (i *IParticleSystem) MaxAngularSpeed() float64 {
	retVal := i.p.Get("maxAngularSpeed")
	return retVal.Float()
}

// SetMaxAngularSpeed sets the MaxAngularSpeed property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#maxangularspeed
func (i *IParticleSystem) SetMaxAngularSpeed(maxAngularSpeed float64) *IParticleSystem {
	i.p.Set("maxAngularSpeed", maxAngularSpeed)
	return i
}

// MaxEmitPower returns the MaxEmitPower property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#maxemitpower
func (i *IParticleSystem) MaxEmitPower() float64 {
	retVal := i.p.Get("maxEmitPower")
	return retVal.Float()
}

// SetMaxEmitPower sets the MaxEmitPower property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#maxemitpower
func (i *IParticleSystem) SetMaxEmitPower(maxEmitPower float64) *IParticleSystem {
	i.p.Set("maxEmitPower", maxEmitPower)
	return i
}

// MaxInitialRotation returns the MaxInitialRotation property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#maxinitialrotation
func (i *IParticleSystem) MaxInitialRotation() float64 {
	retVal := i.p.Get("maxInitialRotation")
	return retVal.Float()
}

// SetMaxInitialRotation sets the MaxInitialRotation property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#maxinitialrotation
func (i *IParticleSystem) SetMaxInitialRotation(maxInitialRotation float64) *IParticleSystem {
	i.p.Set("maxInitialRotation", maxInitialRotation)
	return i
}

// MaxLifeTime returns the MaxLifeTime property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#maxlifetime
func (i *IParticleSystem) MaxLifeTime() float64 {
	retVal := i.p.Get("maxLifeTime")
	return retVal.Float()
}

// SetMaxLifeTime sets the MaxLifeTime property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#maxlifetime
func (i *IParticleSystem) SetMaxLifeTime(maxLifeTime float64) *IParticleSystem {
	i.p.Set("maxLifeTime", maxLifeTime)
	return i
}

// MaxScaleX returns the MaxScaleX property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#maxscalex
func (i *IParticleSystem) MaxScaleX() float64 {
	retVal := i.p.Get("maxScaleX")
	return retVal.Float()
}

// SetMaxScaleX sets the MaxScaleX property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#maxscalex
func (i *IParticleSystem) SetMaxScaleX(maxScaleX float64) *IParticleSystem {
	i.p.Set("maxScaleX", maxScaleX)
	return i
}

// MaxScaleY returns the MaxScaleY property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#maxscaley
func (i *IParticleSystem) MaxScaleY() float64 {
	retVal := i.p.Get("maxScaleY")
	return retVal.Float()
}

// SetMaxScaleY sets the MaxScaleY property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#maxscaley
func (i *IParticleSystem) SetMaxScaleY(maxScaleY float64) *IParticleSystem {
	i.p.Set("maxScaleY", maxScaleY)
	return i
}

// MaxSize returns the MaxSize property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#maxsize
func (i *IParticleSystem) MaxSize() float64 {
	retVal := i.p.Get("maxSize")
	return retVal.Float()
}

// SetMaxSize sets the MaxSize property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#maxsize
func (i *IParticleSystem) SetMaxSize(maxSize float64) *IParticleSystem {
	i.p.Set("maxSize", maxSize)
	return i
}

// MinAngularSpeed returns the MinAngularSpeed property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#minangularspeed
func (i *IParticleSystem) MinAngularSpeed() float64 {
	retVal := i.p.Get("minAngularSpeed")
	return retVal.Float()
}

// SetMinAngularSpeed sets the MinAngularSpeed property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#minangularspeed
func (i *IParticleSystem) SetMinAngularSpeed(minAngularSpeed float64) *IParticleSystem {
	i.p.Set("minAngularSpeed", minAngularSpeed)
	return i
}

// MinEmitPower returns the MinEmitPower property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#minemitpower
func (i *IParticleSystem) MinEmitPower() float64 {
	retVal := i.p.Get("minEmitPower")
	return retVal.Float()
}

// SetMinEmitPower sets the MinEmitPower property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#minemitpower
func (i *IParticleSystem) SetMinEmitPower(minEmitPower float64) *IParticleSystem {
	i.p.Set("minEmitPower", minEmitPower)
	return i
}

// MinInitialRotation returns the MinInitialRotation property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#mininitialrotation
func (i *IParticleSystem) MinInitialRotation() float64 {
	retVal := i.p.Get("minInitialRotation")
	return retVal.Float()
}

// SetMinInitialRotation sets the MinInitialRotation property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#mininitialrotation
func (i *IParticleSystem) SetMinInitialRotation(minInitialRotation float64) *IParticleSystem {
	i.p.Set("minInitialRotation", minInitialRotation)
	return i
}

// MinLifeTime returns the MinLifeTime property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#minlifetime
func (i *IParticleSystem) MinLifeTime() float64 {
	retVal := i.p.Get("minLifeTime")
	return retVal.Float()
}

// SetMinLifeTime sets the MinLifeTime property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#minlifetime
func (i *IParticleSystem) SetMinLifeTime(minLifeTime float64) *IParticleSystem {
	i.p.Set("minLifeTime", minLifeTime)
	return i
}

// MinScaleX returns the MinScaleX property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#minscalex
func (i *IParticleSystem) MinScaleX() float64 {
	retVal := i.p.Get("minScaleX")
	return retVal.Float()
}

// SetMinScaleX sets the MinScaleX property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#minscalex
func (i *IParticleSystem) SetMinScaleX(minScaleX float64) *IParticleSystem {
	i.p.Set("minScaleX", minScaleX)
	return i
}

// MinScaleY returns the MinScaleY property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#minscaley
func (i *IParticleSystem) MinScaleY() float64 {
	retVal := i.p.Get("minScaleY")
	return retVal.Float()
}

// SetMinScaleY sets the MinScaleY property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#minscaley
func (i *IParticleSystem) SetMinScaleY(minScaleY float64) *IParticleSystem {
	i.p.Set("minScaleY", minScaleY)
	return i
}

// MinSize returns the MinSize property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#minsize
func (i *IParticleSystem) MinSize() float64 {
	retVal := i.p.Get("minSize")
	return retVal.Float()
}

// SetMinSize sets the MinSize property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#minsize
func (i *IParticleSystem) SetMinSize(minSize float64) *IParticleSystem {
	i.p.Set("minSize", minSize)
	return i
}

// Name returns the Name property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#name
func (i *IParticleSystem) Name() string {
	retVal := i.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#name
func (i *IParticleSystem) SetName(name string) *IParticleSystem {
	i.p.Set("name", name)
	return i
}

// NoiseStrength returns the NoiseStrength property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#noisestrength
func (i *IParticleSystem) NoiseStrength() *Vector3 {
	retVal := i.p.Get("noiseStrength")
	return Vector3FromJSObject(retVal, i.ctx)
}

// SetNoiseStrength sets the NoiseStrength property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#noisestrength
func (i *IParticleSystem) SetNoiseStrength(noiseStrength *Vector3) *IParticleSystem {
	i.p.Set("noiseStrength", noiseStrength.JSObject())
	return i
}

// NoiseTexture returns the NoiseTexture property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#noisetexture
func (i *IParticleSystem) NoiseTexture() *BaseTexture {
	retVal := i.p.Get("noiseTexture")
	return BaseTextureFromJSObject(retVal, i.ctx)
}

// SetNoiseTexture sets the NoiseTexture property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#noisetexture
func (i *IParticleSystem) SetNoiseTexture(noiseTexture *BaseTexture) *IParticleSystem {
	i.p.Set("noiseTexture", noiseTexture.JSObject())
	return i
}

// ParticleEmitterType returns the ParticleEmitterType property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#particleemittertype
func (i *IParticleSystem) ParticleEmitterType() *IParticleEmitterType {
	retVal := i.p.Get("particleEmitterType")
	return IParticleEmitterTypeFromJSObject(retVal, i.ctx)
}

// SetParticleEmitterType sets the ParticleEmitterType property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#particleemittertype
func (i *IParticleSystem) SetParticleEmitterType(particleEmitterType *IParticleEmitterType) *IParticleSystem {
	i.p.Set("particleEmitterType", particleEmitterType.JSObject())
	return i
}

// ParticleTexture returns the ParticleTexture property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#particletexture
func (i *IParticleSystem) ParticleTexture() *Texture {
	retVal := i.p.Get("particleTexture")
	return TextureFromJSObject(retVal, i.ctx)
}

// SetParticleTexture sets the ParticleTexture property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#particletexture
func (i *IParticleSystem) SetParticleTexture(particleTexture *Texture) *IParticleSystem {
	i.p.Set("particleTexture", particleTexture.JSObject())
	return i
}

// PreWarmCycles returns the PreWarmCycles property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#prewarmcycles
func (i *IParticleSystem) PreWarmCycles() float64 {
	retVal := i.p.Get("preWarmCycles")
	return retVal.Float()
}

// SetPreWarmCycles sets the PreWarmCycles property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#prewarmcycles
func (i *IParticleSystem) SetPreWarmCycles(preWarmCycles float64) *IParticleSystem {
	i.p.Set("preWarmCycles", preWarmCycles)
	return i
}

// PreWarmStepOffset returns the PreWarmStepOffset property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#prewarmstepoffset
func (i *IParticleSystem) PreWarmStepOffset() float64 {
	retVal := i.p.Get("preWarmStepOffset")
	return retVal.Float()
}

// SetPreWarmStepOffset sets the PreWarmStepOffset property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#prewarmstepoffset
func (i *IParticleSystem) SetPreWarmStepOffset(preWarmStepOffset float64) *IParticleSystem {
	i.p.Set("preWarmStepOffset", preWarmStepOffset)
	return i
}

// RenderingGroupId returns the RenderingGroupId property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#renderinggroupid
func (i *IParticleSystem) RenderingGroupId() float64 {
	retVal := i.p.Get("renderingGroupId")
	return retVal.Float()
}

// SetRenderingGroupId sets the RenderingGroupId property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#renderinggroupid
func (i *IParticleSystem) SetRenderingGroupId(renderingGroupId float64) *IParticleSystem {
	i.p.Set("renderingGroupId", renderingGroupId)
	return i
}

// SpriteCellChangeSpeed returns the SpriteCellChangeSpeed property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#spritecellchangespeed
func (i *IParticleSystem) SpriteCellChangeSpeed() float64 {
	retVal := i.p.Get("spriteCellChangeSpeed")
	return retVal.Float()
}

// SetSpriteCellChangeSpeed sets the SpriteCellChangeSpeed property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#spritecellchangespeed
func (i *IParticleSystem) SetSpriteCellChangeSpeed(spriteCellChangeSpeed float64) *IParticleSystem {
	i.p.Set("spriteCellChangeSpeed", spriteCellChangeSpeed)
	return i
}

// SpriteCellHeight returns the SpriteCellHeight property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#spritecellheight
func (i *IParticleSystem) SpriteCellHeight() float64 {
	retVal := i.p.Get("spriteCellHeight")
	return retVal.Float()
}

// SetSpriteCellHeight sets the SpriteCellHeight property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#spritecellheight
func (i *IParticleSystem) SetSpriteCellHeight(spriteCellHeight float64) *IParticleSystem {
	i.p.Set("spriteCellHeight", spriteCellHeight)
	return i
}

// SpriteCellWidth returns the SpriteCellWidth property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#spritecellwidth
func (i *IParticleSystem) SpriteCellWidth() float64 {
	retVal := i.p.Get("spriteCellWidth")
	return retVal.Float()
}

// SetSpriteCellWidth sets the SpriteCellWidth property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#spritecellwidth
func (i *IParticleSystem) SetSpriteCellWidth(spriteCellWidth float64) *IParticleSystem {
	i.p.Set("spriteCellWidth", spriteCellWidth)
	return i
}

// SpriteRandomStartCell returns the SpriteRandomStartCell property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#spriterandomstartcell
func (i *IParticleSystem) SpriteRandomStartCell() bool {
	retVal := i.p.Get("spriteRandomStartCell")
	return retVal.Bool()
}

// SetSpriteRandomStartCell sets the SpriteRandomStartCell property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#spriterandomstartcell
func (i *IParticleSystem) SetSpriteRandomStartCell(spriteRandomStartCell bool) *IParticleSystem {
	i.p.Set("spriteRandomStartCell", spriteRandomStartCell)
	return i
}

// StartDelay returns the StartDelay property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#startdelay
func (i *IParticleSystem) StartDelay() float64 {
	retVal := i.p.Get("startDelay")
	return retVal.Float()
}

// SetStartDelay sets the StartDelay property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#startdelay
func (i *IParticleSystem) SetStartDelay(startDelay float64) *IParticleSystem {
	i.p.Set("startDelay", startDelay)
	return i
}

// StartSpriteCellID returns the StartSpriteCellID property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#startspritecellid
func (i *IParticleSystem) StartSpriteCellID() float64 {
	retVal := i.p.Get("startSpriteCellID")
	return retVal.Float()
}

// SetStartSpriteCellID sets the StartSpriteCellID property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#startspritecellid
func (i *IParticleSystem) SetStartSpriteCellID(startSpriteCellID float64) *IParticleSystem {
	i.p.Set("startSpriteCellID", startSpriteCellID)
	return i
}

// TargetStopDuration returns the TargetStopDuration property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#targetstopduration
func (i *IParticleSystem) TargetStopDuration() float64 {
	retVal := i.p.Get("targetStopDuration")
	return retVal.Float()
}

// SetTargetStopDuration sets the TargetStopDuration property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#targetstopduration
func (i *IParticleSystem) SetTargetStopDuration(targetStopDuration float64) *IParticleSystem {
	i.p.Set("targetStopDuration", targetStopDuration)
	return i
}

// TranslationPivot returns the TranslationPivot property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#translationpivot
func (i *IParticleSystem) TranslationPivot() *Vector2 {
	retVal := i.p.Get("translationPivot")
	return Vector2FromJSObject(retVal, i.ctx)
}

// SetTranslationPivot sets the TranslationPivot property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#translationpivot
func (i *IParticleSystem) SetTranslationPivot(translationPivot *Vector2) *IParticleSystem {
	i.p.Set("translationPivot", translationPivot.JSObject())
	return i
}

// UpdateSpeed returns the UpdateSpeed property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#updatespeed
func (i *IParticleSystem) UpdateSpeed() float64 {
	retVal := i.p.Get("updateSpeed")
	return retVal.Float()
}

// SetUpdateSpeed sets the UpdateSpeed property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#updatespeed
func (i *IParticleSystem) SetUpdateSpeed(updateSpeed float64) *IParticleSystem {
	i.p.Set("updateSpeed", updateSpeed)
	return i
}

// UseRampGradients returns the UseRampGradients property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#userampgradients
func (i *IParticleSystem) UseRampGradients() bool {
	retVal := i.p.Get("useRampGradients")
	return retVal.Bool()
}

// SetUseRampGradients sets the UseRampGradients property of class IParticleSystem.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticlesystem#userampgradients
func (i *IParticleSystem) SetUseRampGradients(useRampGradients bool) *IParticleSystem {
	i.p.Set("useRampGradients", useRampGradients)
	return i
}
