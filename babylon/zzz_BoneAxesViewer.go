// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BoneAxesViewer represents a babylon.js BoneAxesViewer.
// The BoneAxesViewer will attach 3 axes to a specific bone of a specific mesh
//
// See: https://www.babylonjs-playground.com/#0DE8F4#8
type BoneAxesViewer struct {
	*AxesViewer
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BoneAxesViewer) JSObject() js.Value { return b.p }

// BoneAxesViewer returns a BoneAxesViewer JavaScript class.
func (ba *Babylon) BoneAxesViewer() *BoneAxesViewer {
	p := ba.ctx.Get("BoneAxesViewer")
	return BoneAxesViewerFromJSObject(p, ba.ctx)
}

// BoneAxesViewerFromJSObject returns a wrapped BoneAxesViewer JavaScript class.
func BoneAxesViewerFromJSObject(p js.Value, ctx js.Value) *BoneAxesViewer {
	return &BoneAxesViewer{AxesViewer: AxesViewerFromJSObject(p, ctx), ctx: ctx}
}

// BoneAxesViewerArrayToJSArray returns a JavaScript Array for the wrapped array.
func BoneAxesViewerArrayToJSArray(array []*BoneAxesViewer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewBoneAxesViewerOpts contains optional parameters for NewBoneAxesViewer.
type NewBoneAxesViewerOpts struct {
	ScaleLines *float64
}

// NewBoneAxesViewer returns a new BoneAxesViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer
func (ba *Babylon) NewBoneAxesViewer(scene *Scene, bone *Bone, mesh *Mesh, opts *NewBoneAxesViewerOpts) *BoneAxesViewer {
	if opts == nil {
		opts = &NewBoneAxesViewerOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, scene.JSObject())
	args = append(args, bone.JSObject())
	args = append(args, mesh.JSObject())

	if opts.ScaleLines == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ScaleLines)
	}

	p := ba.ctx.Get("BoneAxesViewer").New(args...)
	return BoneAxesViewerFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the BoneAxesViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer#dispose
func (b *BoneAxesViewer) Dispose() {

	b.p.Call("dispose")
}

// Update calls the Update method on the BoneAxesViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer#update
func (b *BoneAxesViewer) Update() {

	b.p.Call("update")
}

// Bone returns the Bone property of class BoneAxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer#bone
func (b *BoneAxesViewer) Bone() *Bone {
	retVal := b.p.Get("bone")
	return BoneFromJSObject(retVal, b.ctx)
}

// SetBone sets the Bone property of class BoneAxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer#bone
func (b *BoneAxesViewer) SetBone(bone *Bone) *BoneAxesViewer {
	b.p.Set("bone", bone.JSObject())
	return b
}

// Mesh returns the Mesh property of class BoneAxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer#mesh
func (b *BoneAxesViewer) Mesh() *Mesh {
	retVal := b.p.Get("mesh")
	return MeshFromJSObject(retVal, b.ctx)
}

// SetMesh sets the Mesh property of class BoneAxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer#mesh
func (b *BoneAxesViewer) SetMesh(mesh *Mesh) *BoneAxesViewer {
	b.p.Set("mesh", mesh.JSObject())
	return b
}

// Pos returns the Pos property of class BoneAxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer#pos
func (b *BoneAxesViewer) Pos() *Vector3 {
	retVal := b.p.Get("pos")
	return Vector3FromJSObject(retVal, b.ctx)
}

// SetPos sets the Pos property of class BoneAxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer#pos
func (b *BoneAxesViewer) SetPos(pos *Vector3) *BoneAxesViewer {
	b.p.Set("pos", pos.JSObject())
	return b
}

// Xaxis returns the Xaxis property of class BoneAxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer#xaxis
func (b *BoneAxesViewer) Xaxis() *Vector3 {
	retVal := b.p.Get("xaxis")
	return Vector3FromJSObject(retVal, b.ctx)
}

// SetXaxis sets the Xaxis property of class BoneAxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer#xaxis
func (b *BoneAxesViewer) SetXaxis(xaxis *Vector3) *BoneAxesViewer {
	b.p.Set("xaxis", xaxis.JSObject())
	return b
}

// Yaxis returns the Yaxis property of class BoneAxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer#yaxis
func (b *BoneAxesViewer) Yaxis() *Vector3 {
	retVal := b.p.Get("yaxis")
	return Vector3FromJSObject(retVal, b.ctx)
}

// SetYaxis sets the Yaxis property of class BoneAxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer#yaxis
func (b *BoneAxesViewer) SetYaxis(yaxis *Vector3) *BoneAxesViewer {
	b.p.Set("yaxis", yaxis.JSObject())
	return b
}

// Zaxis returns the Zaxis property of class BoneAxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer#zaxis
func (b *BoneAxesViewer) Zaxis() *Vector3 {
	retVal := b.p.Get("zaxis")
	return Vector3FromJSObject(retVal, b.ctx)
}

// SetZaxis sets the Zaxis property of class BoneAxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer#zaxis
func (b *BoneAxesViewer) SetZaxis(zaxis *Vector3) *BoneAxesViewer {
	b.p.Set("zaxis", zaxis.JSObject())
	return b
}
