// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BoneAxesViewer represents a babylon.js BoneAxesViewer.
// The BoneAxesViewer will attach 3 axes to a specific bone of a specific mesh
//
// See: https://www.babylonjs-playground.com/#0DE8F4#8
type BoneAxesViewer struct{ *AxesViewer }

// JSObject returns the underlying js.Value.
func (b *BoneAxesViewer) JSObject() js.Value { return b.p }

// BoneAxesViewer returns a BoneAxesViewer JavaScript class.
func (ba *Babylon) BoneAxesViewer() *BoneAxesViewer {
	p := ba.ctx.Get("BoneAxesViewer")
	return BoneAxesViewerFromJSObject(p)
}

// BoneAxesViewerFromJSObject returns a wrapped BoneAxesViewer JavaScript class.
func BoneAxesViewerFromJSObject(p js.Value) *BoneAxesViewer {
	return &BoneAxesViewer{AxesViewerFromJSObject(p)}
}

// NewBoneAxesViewerOpts contains optional parameters for NewBoneAxesViewer.
type NewBoneAxesViewerOpts struct {
	ScaleLines *JSFloat64
}

// NewBoneAxesViewer returns a new BoneAxesViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.boneaxesviewer
func (ba *Babylon) NewBoneAxesViewer(scene *Scene, bone *Bone, mesh *Mesh, opts *NewBoneAxesViewerOpts) *BoneAxesViewer {
	if opts == nil {
		opts = &NewBoneAxesViewerOpts{}
	}

	p := ba.ctx.Get("BoneAxesViewer").New(scene.JSObject(), bone.JSObject(), mesh.JSObject(), opts.ScaleLines.JSObject())
	return BoneAxesViewerFromJSObject(p)
}

// TODO: methods
