// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CubeTextureAssetTask represents a babylon.js CubeTextureAssetTask.
// Define a task used by AssetsManager to load cube textures
type CubeTextureAssetTask struct{ *AbstractAssetTask }

// JSObject returns the underlying js.Value.
func (c *CubeTextureAssetTask) JSObject() js.Value { return c.p }

// CubeTextureAssetTask returns a CubeTextureAssetTask JavaScript class.
func (ba *Babylon) CubeTextureAssetTask() *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask")
	return CubeTextureAssetTaskFromJSObject(p)
}

// CubeTextureAssetTaskFromJSObject returns a wrapped CubeTextureAssetTask JavaScript class.
func CubeTextureAssetTaskFromJSObject(p js.Value) *CubeTextureAssetTask {
	return &CubeTextureAssetTask{AbstractAssetTaskFromJSObject(p)}
}

// NewCubeTextureAssetTaskOpts contains optional parameters for NewCubeTextureAssetTask.
type NewCubeTextureAssetTaskOpts struct {
	Extensions *JSString

	NoMipmap *JSBool

	Files *JSString
}

// NewCubeTextureAssetTask returns a new CubeTextureAssetTask object.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask
func (ba *Babylon) NewCubeTextureAssetTask(name string, url string, opts *NewCubeTextureAssetTaskOpts) *CubeTextureAssetTask {
	if opts == nil {
		opts = &NewCubeTextureAssetTaskOpts{}
	}

	p := ba.ctx.Get("CubeTextureAssetTask").New(name, url, opts.Extensions.JSObject(), opts.NoMipmap.JSObject(), opts.Files.JSObject())
	return CubeTextureAssetTaskFromJSObject(p)
}

// TODO: methods
