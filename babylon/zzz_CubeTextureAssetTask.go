// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CubeTextureAssetTask represents a babylon.js CubeTextureAssetTask.
// Define a task used by AssetsManager to load cube textures
type CubeTextureAssetTask struct {
	*AbstractAssetTask
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *CubeTextureAssetTask) JSObject() js.Value { return c.p }

// CubeTextureAssetTask returns a CubeTextureAssetTask JavaScript class.
func (ba *Babylon) CubeTextureAssetTask() *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask")
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// CubeTextureAssetTaskFromJSObject returns a wrapped CubeTextureAssetTask JavaScript class.
func CubeTextureAssetTaskFromJSObject(p js.Value, ctx js.Value) *CubeTextureAssetTask {
	return &CubeTextureAssetTask{AbstractAssetTask: AbstractAssetTaskFromJSObject(p, ctx), ctx: ctx}
}

// CubeTextureAssetTaskArrayToJSArray returns a JavaScript Array for the wrapped array.
func CubeTextureAssetTaskArrayToJSArray(array []*CubeTextureAssetTask) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewCubeTextureAssetTaskOpts contains optional parameters for NewCubeTextureAssetTask.
type NewCubeTextureAssetTaskOpts struct {
	Extensions *string
	NoMipmap   *bool
	Files      *string
}

// NewCubeTextureAssetTask returns a new CubeTextureAssetTask object.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask
func (ba *Babylon) NewCubeTextureAssetTask(name string, url string, opts *NewCubeTextureAssetTaskOpts) *CubeTextureAssetTask {
	if opts == nil {
		opts = &NewCubeTextureAssetTaskOpts{}
	}

	args := make([]interface{}, 0, 2+3)

	args = append(args, name)
	args = append(args, url)

	if opts.Extensions == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Extensions)
	}
	if opts.NoMipmap == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoMipmap)
	}
	if opts.Files == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Files)
	}

	p := ba.ctx.Get("CubeTextureAssetTask").New(args...)
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// RunTask calls the RunTask method on the CubeTextureAssetTask object.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#runtask
func (c *CubeTextureAssetTask) RunTask(scene *Scene, onSuccess func(), onError func()) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, scene.JSObject())
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { onSuccess(); return nil }))
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { onError(); return nil }))

	c.p.Call("runTask", args...)
}

/*

// Extensions returns the Extensions property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#extensions
func (c *CubeTextureAssetTask) Extensions(extensions string) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(extensions)
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// SetExtensions sets the Extensions property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#extensions
func (c *CubeTextureAssetTask) SetExtensions(extensions string) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(extensions)
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// Files returns the Files property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#files
func (c *CubeTextureAssetTask) Files(files string) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(files)
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// SetFiles sets the Files property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#files
func (c *CubeTextureAssetTask) SetFiles(files string) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(files)
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#name
func (c *CubeTextureAssetTask) Name(name string) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(name)
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#name
func (c *CubeTextureAssetTask) SetName(name string) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(name)
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// NoMipmap returns the NoMipmap property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#nomipmap
func (c *CubeTextureAssetTask) NoMipmap(noMipmap bool) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(noMipmap)
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// SetNoMipmap sets the NoMipmap property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#nomipmap
func (c *CubeTextureAssetTask) SetNoMipmap(noMipmap bool) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(noMipmap)
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// OnError returns the OnError property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#onerror
func (c *CubeTextureAssetTask) OnError(onError func()) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onError(); return nil}))
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// SetOnError sets the OnError property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#onerror
func (c *CubeTextureAssetTask) SetOnError(onError func()) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onError(); return nil}))
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// OnSuccess returns the OnSuccess property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#onsuccess
func (c *CubeTextureAssetTask) OnSuccess(onSuccess func()) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onSuccess(); return nil}))
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// SetOnSuccess sets the OnSuccess property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#onsuccess
func (c *CubeTextureAssetTask) SetOnSuccess(onSuccess func()) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onSuccess(); return nil}))
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// Texture returns the Texture property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#texture
func (c *CubeTextureAssetTask) Texture(texture *CubeTexture) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(texture.JSObject())
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// SetTexture sets the Texture property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#texture
func (c *CubeTextureAssetTask) SetTexture(texture *CubeTexture) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(texture.JSObject())
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// Url returns the Url property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#url
func (c *CubeTextureAssetTask) Url(url string) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(url)
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// SetUrl sets the Url property of class CubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetextureassettask#url
func (c *CubeTextureAssetTask) SetUrl(url string) *CubeTextureAssetTask {
	p := ba.ctx.Get("CubeTextureAssetTask").New(url)
	return CubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

*/
