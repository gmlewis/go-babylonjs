// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MirrorTexture represents a babylon.js MirrorTexture.
// Mirror texture can be used to simulate the view from a mirror in a scene.
// It will dynamically be rendered every frame to adapt to the camera point of view.
// You can then easily use it as a reflectionTexture on a flat surface.
// In case the surface is not a plane, please consider relying on reflection probes.
//
// See: https://doc.babylonjs.com/how_to/reflect#mirrors
type MirrorTexture struct {
	*RenderTargetTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MirrorTexture) JSObject() js.Value { return m.p }

// MirrorTexture returns a MirrorTexture JavaScript class.
func (ba *Babylon) MirrorTexture() *MirrorTexture {
	p := ba.ctx.Get("MirrorTexture")
	return MirrorTextureFromJSObject(p, ba.ctx)
}

// MirrorTextureFromJSObject returns a wrapped MirrorTexture JavaScript class.
func MirrorTextureFromJSObject(p js.Value, ctx js.Value) *MirrorTexture {
	return &MirrorTexture{RenderTargetTexture: RenderTargetTextureFromJSObject(p, ctx), ctx: ctx}
}

// MirrorTextureArrayToJSArray returns a JavaScript Array for the wrapped array.
func MirrorTextureArrayToJSArray(array []*MirrorTexture) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewMirrorTextureOpts contains optional parameters for NewMirrorTexture.
type NewMirrorTextureOpts struct {
	GenerateMipMaps     *bool
	Type                *float64
	SamplingMode        *float64
	GenerateDepthBuffer *bool
}

// NewMirrorTexture returns a new MirrorTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture
func (ba *Babylon) NewMirrorTexture(name string, size float64, scene *Scene, opts *NewMirrorTextureOpts) *MirrorTexture {
	if opts == nil {
		opts = &NewMirrorTextureOpts{}
	}

	args := make([]interface{}, 0, 3+4)

	args = append(args, name)
	args = append(args, size)
	args = append(args, scene.JSObject())

	if opts.GenerateMipMaps == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateMipMaps)
	}
	if opts.Type == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Type)
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.GenerateDepthBuffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateDepthBuffer)
	}

	p := ba.ctx.Get("MirrorTexture").New(args...)
	return MirrorTextureFromJSObject(p, ba.ctx)
}

// Clone calls the Clone method on the MirrorTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture#clone
func (m *MirrorTexture) Clone() *MirrorTexture {

	retVal := m.p.Call("clone")
	return MirrorTextureFromJSObject(retVal, m.ctx)
}

// Dispose calls the Dispose method on the MirrorTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture#dispose
func (m *MirrorTexture) Dispose() {

	m.p.Call("dispose")
}

// Serialize calls the Serialize method on the MirrorTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture#serialize
func (m *MirrorTexture) Serialize() interface{} {

	retVal := m.p.Call("serialize")
	return retVal
}

// AdaptiveBlurKernel returns the AdaptiveBlurKernel property of class MirrorTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture#adaptiveblurkernel
func (m *MirrorTexture) AdaptiveBlurKernel() float64 {
	retVal := m.p.Get("adaptiveBlurKernel")
	return retVal.Float()
}

// SetAdaptiveBlurKernel sets the AdaptiveBlurKernel property of class MirrorTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture#adaptiveblurkernel
func (m *MirrorTexture) SetAdaptiveBlurKernel(adaptiveBlurKernel float64) *MirrorTexture {
	m.p.Set("adaptiveBlurKernel", adaptiveBlurKernel)
	return m
}

// BlurKernel returns the BlurKernel property of class MirrorTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture#blurkernel
func (m *MirrorTexture) BlurKernel() float64 {
	retVal := m.p.Get("blurKernel")
	return retVal.Float()
}

// SetBlurKernel sets the BlurKernel property of class MirrorTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture#blurkernel
func (m *MirrorTexture) SetBlurKernel(blurKernel float64) *MirrorTexture {
	m.p.Set("blurKernel", blurKernel)
	return m
}

// BlurKernelX returns the BlurKernelX property of class MirrorTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture#blurkernelx
func (m *MirrorTexture) BlurKernelX() float64 {
	retVal := m.p.Get("blurKernelX")
	return retVal.Float()
}

// SetBlurKernelX sets the BlurKernelX property of class MirrorTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture#blurkernelx
func (m *MirrorTexture) SetBlurKernelX(blurKernelX float64) *MirrorTexture {
	m.p.Set("blurKernelX", blurKernelX)
	return m
}

// BlurKernelY returns the BlurKernelY property of class MirrorTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture#blurkernely
func (m *MirrorTexture) BlurKernelY() float64 {
	retVal := m.p.Get("blurKernelY")
	return retVal.Float()
}

// SetBlurKernelY sets the BlurKernelY property of class MirrorTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture#blurkernely
func (m *MirrorTexture) SetBlurKernelY(blurKernelY float64) *MirrorTexture {
	m.p.Set("blurKernelY", blurKernelY)
	return m
}

// BlurRatio returns the BlurRatio property of class MirrorTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture#blurratio
func (m *MirrorTexture) BlurRatio() float64 {
	retVal := m.p.Get("blurRatio")
	return retVal.Float()
}

// SetBlurRatio sets the BlurRatio property of class MirrorTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture#blurratio
func (m *MirrorTexture) SetBlurRatio(blurRatio float64) *MirrorTexture {
	m.p.Set("blurRatio", blurRatio)
	return m
}

// MirrorPlane returns the MirrorPlane property of class MirrorTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture#mirrorplane
func (m *MirrorTexture) MirrorPlane() *Plane {
	retVal := m.p.Get("mirrorPlane")
	return PlaneFromJSObject(retVal, m.ctx)
}

// SetMirrorPlane sets the MirrorPlane property of class MirrorTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture#mirrorplane
func (m *MirrorTexture) SetMirrorPlane(mirrorPlane *Plane) *MirrorTexture {
	m.p.Set("mirrorPlane", mirrorPlane.JSObject())
	return m
}
