// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MirrorTexture represents a babylon.js MirrorTexture.
// Mirror texture can be used to simulate the view from a mirror in a scene.
// It will dynamically be rendered every frame to adapt to the camera point of view.
// You can then easily use it as a reflectionTexture on a flat surface.
// In case the surface is not a plane, please consider relying on reflection probes.
//
// See: https://doc.babylonjs.com/how_to/reflect#mirrors
type MirrorTexture struct{ *RenderTargetTexture }

// JSObject returns the underlying js.Value.
func (m *MirrorTexture) JSObject() js.Value { return m.p }

// MirrorTexture returns a MirrorTexture JavaScript class.
func (ba *Babylon) MirrorTexture() *MirrorTexture {
	p := ba.ctx.Get("MirrorTexture")
	return MirrorTextureFromJSObject(p)
}

// MirrorTextureFromJSObject returns a wrapped MirrorTexture JavaScript class.
func MirrorTextureFromJSObject(p js.Value) *MirrorTexture {
	return &MirrorTexture{RenderTargetTextureFromJSObject(p)}
}

// NewMirrorTextureOpts contains optional parameters for NewMirrorTexture.
type NewMirrorTextureOpts struct {
	GenerateMipMaps *JSBool

	Type *JSFloat64

	SamplingMode *JSFloat64

	GenerateDepthBuffer *JSBool
}

// NewMirrorTexture returns a new MirrorTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.mirrortexture
func (ba *Babylon) NewMirrorTexture(name string, size float64, scene *Scene, opts *NewMirrorTextureOpts) *MirrorTexture {
	if opts == nil {
		opts = &NewMirrorTextureOpts{}
	}

	p := ba.ctx.Get("MirrorTexture").New(name, size, scene.JSObject(), opts.GenerateMipMaps, opts.Type, opts.SamplingMode, opts.GenerateDepthBuffer)
	return MirrorTextureFromJSObject(p)
}

// TODO: methods
