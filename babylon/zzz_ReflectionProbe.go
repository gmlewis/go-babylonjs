// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ReflectionProbe represents a babylon.js ReflectionProbe.
// Class used to generate realtime reflection / refraction cube textures
//
// See: http://doc.babylonjs.com/how_to/how_to_use_reflection_probes
type ReflectionProbe struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *ReflectionProbe) JSObject() js.Value { return r.p }

// ReflectionProbe returns a ReflectionProbe JavaScript class.
func (ba *Babylon) ReflectionProbe() *ReflectionProbe {
	p := ba.ctx.Get("ReflectionProbe")
	return ReflectionProbeFromJSObject(p, ba.ctx)
}

// ReflectionProbeFromJSObject returns a wrapped ReflectionProbe JavaScript class.
func ReflectionProbeFromJSObject(p js.Value, ctx js.Value) *ReflectionProbe {
	return &ReflectionProbe{p: p, ctx: ctx}
}

// ReflectionProbeArrayToJSArray returns a JavaScript Array for the wrapped array.
func ReflectionProbeArrayToJSArray(array []*ReflectionProbe) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewReflectionProbeOpts contains optional parameters for NewReflectionProbe.
type NewReflectionProbeOpts struct {
	GenerateMipMaps *bool
	UseFloat        *bool
}

// NewReflectionProbe returns a new ReflectionProbe object.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe
func (ba *Babylon) NewReflectionProbe(name string, size float64, scene *Scene, opts *NewReflectionProbeOpts) *ReflectionProbe {
	if opts == nil {
		opts = &NewReflectionProbeOpts{}
	}

	args := make([]interface{}, 0, 3+2)

	args = append(args, name)
	args = append(args, size)
	args = append(args, scene.JSObject())

	if opts.GenerateMipMaps == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateMipMaps)
	}
	if opts.UseFloat == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseFloat)
	}

	p := ba.ctx.Get("ReflectionProbe").New(args...)
	return ReflectionProbeFromJSObject(p, ba.ctx)
}

// AttachToMesh calls the AttachToMesh method on the ReflectionProbe object.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#attachtomesh
func (r *ReflectionProbe) AttachToMesh(mesh *AbstractMesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	r.p.Call("attachToMesh", args...)
}

// Dispose calls the Dispose method on the ReflectionProbe object.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#dispose
func (r *ReflectionProbe) Dispose() {

	r.p.Call("dispose")
}

// GetClassName calls the GetClassName method on the ReflectionProbe object.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#getclassname
func (r *ReflectionProbe) GetClassName() string {

	retVal := r.p.Call("getClassName")
	return retVal.String()
}

// GetScene calls the GetScene method on the ReflectionProbe object.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#getscene
func (r *ReflectionProbe) GetScene() *Scene {

	retVal := r.p.Call("getScene")
	return SceneFromJSObject(retVal, r.ctx)
}

// Parse calls the Parse method on the ReflectionProbe object.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#parse
func (r *ReflectionProbe) Parse(parsedReflectionProbe interface{}, scene *Scene, rootUrl string) *ReflectionProbe {

	args := make([]interface{}, 0, 3+0)

	args = append(args, parsedReflectionProbe)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := r.p.Call("Parse", args...)
	return ReflectionProbeFromJSObject(retVal, r.ctx)
}

// Serialize calls the Serialize method on the ReflectionProbe object.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#serialize
func (r *ReflectionProbe) Serialize() interface{} {

	retVal := r.p.Call("serialize")
	return retVal
}

// SetRenderingAutoClearDepthStencil calls the SetRenderingAutoClearDepthStencil method on the ReflectionProbe object.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#setrenderingautocleardepthstencil
func (r *ReflectionProbe) SetRenderingAutoClearDepthStencil(renderingGroupId float64, autoClearDepthStencil bool) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, renderingGroupId)
	args = append(args, autoClearDepthStencil)

	r.p.Call("setRenderingAutoClearDepthStencil", args...)
}

// ReflectionProbeToStringOpts contains optional parameters for ReflectionProbe.ToString.
type ReflectionProbeToStringOpts struct {
	FullDetails *bool
}

// ToString calls the ToString method on the ReflectionProbe object.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#tostring
func (r *ReflectionProbe) ToString(opts *ReflectionProbeToStringOpts) string {
	if opts == nil {
		opts = &ReflectionProbeToStringOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.FullDetails == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FullDetails)
	}

	retVal := r.p.Call("toString", args...)
	return retVal.String()
}

// CubeTexture returns the CubeTexture property of class ReflectionProbe.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#cubetexture
func (r *ReflectionProbe) CubeTexture() *RenderTargetTexture {
	retVal := r.p.Get("cubeTexture")
	return RenderTargetTextureFromJSObject(retVal, r.ctx)
}

// SetCubeTexture sets the CubeTexture property of class ReflectionProbe.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#cubetexture
func (r *ReflectionProbe) SetCubeTexture(cubeTexture *RenderTargetTexture) *ReflectionProbe {
	r.p.Set("cubeTexture", cubeTexture.JSObject())
	return r
}

// Name returns the Name property of class ReflectionProbe.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#name
func (r *ReflectionProbe) Name() string {
	retVal := r.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class ReflectionProbe.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#name
func (r *ReflectionProbe) SetName(name string) *ReflectionProbe {
	r.p.Set("name", name)
	return r
}

// Position returns the Position property of class ReflectionProbe.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#position
func (r *ReflectionProbe) Position() *Vector3 {
	retVal := r.p.Get("position")
	return Vector3FromJSObject(retVal, r.ctx)
}

// SetPosition sets the Position property of class ReflectionProbe.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#position
func (r *ReflectionProbe) SetPosition(position *Vector3) *ReflectionProbe {
	r.p.Set("position", position.JSObject())
	return r
}

// RefreshRate returns the RefreshRate property of class ReflectionProbe.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#refreshrate
func (r *ReflectionProbe) RefreshRate() float64 {
	retVal := r.p.Get("refreshRate")
	return retVal.Float()
}

// SetRefreshRate sets the RefreshRate property of class ReflectionProbe.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#refreshrate
func (r *ReflectionProbe) SetRefreshRate(refreshRate float64) *ReflectionProbe {
	r.p.Set("refreshRate", refreshRate)
	return r
}

// RenderList returns the RenderList property of class ReflectionProbe.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#renderlist
func (r *ReflectionProbe) RenderList() *AbstractMesh {
	retVal := r.p.Get("renderList")
	return AbstractMeshFromJSObject(retVal, r.ctx)
}

// SetRenderList sets the RenderList property of class ReflectionProbe.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#renderlist
func (r *ReflectionProbe) SetRenderList(renderList *AbstractMesh) *ReflectionProbe {
	r.p.Set("renderList", renderList.JSObject())
	return r
}

// Samples returns the Samples property of class ReflectionProbe.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#samples
func (r *ReflectionProbe) Samples() float64 {
	retVal := r.p.Get("samples")
	return retVal.Float()
}

// SetSamples sets the Samples property of class ReflectionProbe.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectionprobe#samples
func (r *ReflectionProbe) SetSamples(samples float64) *ReflectionProbe {
	r.p.Set("samples", samples)
	return r
}
