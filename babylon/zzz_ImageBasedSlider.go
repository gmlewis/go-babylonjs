// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ImageBasedSlider represents a babylon.js ImageBasedSlider.
// Class used to create slider controls based on images
type ImageBasedSlider struct {
	*BaseSlider
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ImageBasedSlider) JSObject() js.Value { return i.p }

// ImageBasedSlider returns a ImageBasedSlider JavaScript class.
func (ba *Babylon) ImageBasedSlider() *ImageBasedSlider {
	p := ba.ctx.Get("ImageBasedSlider")
	return ImageBasedSliderFromJSObject(p, ba.ctx)
}

// ImageBasedSliderFromJSObject returns a wrapped ImageBasedSlider JavaScript class.
func ImageBasedSliderFromJSObject(p js.Value, ctx js.Value) *ImageBasedSlider {
	return &ImageBasedSlider{BaseSlider: BaseSliderFromJSObject(p, ctx), ctx: ctx}
}

// ImageBasedSliderArrayToJSArray returns a JavaScript Array for the wrapped array.
func ImageBasedSliderArrayToJSArray(array []*ImageBasedSlider) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewImageBasedSliderOpts contains optional parameters for NewImageBasedSlider.
type NewImageBasedSliderOpts struct {
	Name *string
}

// NewImageBasedSlider returns a new ImageBasedSlider object.
//
// https://doc.babylonjs.com/api/classes/babylon.imagebasedslider
func (ba *Babylon) NewImageBasedSlider(opts *NewImageBasedSliderOpts) *ImageBasedSlider {
	if opts == nil {
		opts = &NewImageBasedSliderOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}

	p := ba.ctx.Get("ImageBasedSlider").New(args...)
	return ImageBasedSliderFromJSObject(p, ba.ctx)
}

// ImageBasedSlider_drawOpts contains optional parameters for ImageBasedSlider._draw.
type ImageBasedSlider_drawOpts struct {
	InvalidatedRectangle *Measure
}

// _draw calls the _draw method on the ImageBasedSlider object.
//
// https://doc.babylonjs.com/api/classes/babylon.imagebasedslider#_draw
func (i *ImageBasedSlider) _draw(context js.Value, opts *ImageBasedSlider_drawOpts) {
	if opts == nil {
		opts = &ImageBasedSlider_drawOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, context)

	if opts.InvalidatedRectangle == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.InvalidatedRectangle.JSObject())
	}

	i.p.Call("_draw", args...)
}

/*

// BackgroundImage returns the BackgroundImage property of class ImageBasedSlider.
//
// https://doc.babylonjs.com/api/classes/babylon.imagebasedslider#backgroundimage
func (i *ImageBasedSlider) BackgroundImage(backgroundImage *Image) *ImageBasedSlider {
	p := ba.ctx.Get("ImageBasedSlider").New(backgroundImage.JSObject())
	return ImageBasedSliderFromJSObject(p, ba.ctx)
}

// SetBackgroundImage sets the BackgroundImage property of class ImageBasedSlider.
//
// https://doc.babylonjs.com/api/classes/babylon.imagebasedslider#backgroundimage
func (i *ImageBasedSlider) SetBackgroundImage(backgroundImage *Image) *ImageBasedSlider {
	p := ba.ctx.Get("ImageBasedSlider").New(backgroundImage.JSObject())
	return ImageBasedSliderFromJSObject(p, ba.ctx)
}

// DisplayThumb returns the DisplayThumb property of class ImageBasedSlider.
//
// https://doc.babylonjs.com/api/classes/babylon.imagebasedslider#displaythumb
func (i *ImageBasedSlider) DisplayThumb(displayThumb bool) *ImageBasedSlider {
	p := ba.ctx.Get("ImageBasedSlider").New(displayThumb)
	return ImageBasedSliderFromJSObject(p, ba.ctx)
}

// SetDisplayThumb sets the DisplayThumb property of class ImageBasedSlider.
//
// https://doc.babylonjs.com/api/classes/babylon.imagebasedslider#displaythumb
func (i *ImageBasedSlider) SetDisplayThumb(displayThumb bool) *ImageBasedSlider {
	p := ba.ctx.Get("ImageBasedSlider").New(displayThumb)
	return ImageBasedSliderFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class ImageBasedSlider.
//
// https://doc.babylonjs.com/api/classes/babylon.imagebasedslider#name
func (i *ImageBasedSlider) Name(name string) *ImageBasedSlider {
	p := ba.ctx.Get("ImageBasedSlider").New(name)
	return ImageBasedSliderFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class ImageBasedSlider.
//
// https://doc.babylonjs.com/api/classes/babylon.imagebasedslider#name
func (i *ImageBasedSlider) SetName(name string) *ImageBasedSlider {
	p := ba.ctx.Get("ImageBasedSlider").New(name)
	return ImageBasedSliderFromJSObject(p, ba.ctx)
}

// ThumbImage returns the ThumbImage property of class ImageBasedSlider.
//
// https://doc.babylonjs.com/api/classes/babylon.imagebasedslider#thumbimage
func (i *ImageBasedSlider) ThumbImage(thumbImage *Image) *ImageBasedSlider {
	p := ba.ctx.Get("ImageBasedSlider").New(thumbImage.JSObject())
	return ImageBasedSliderFromJSObject(p, ba.ctx)
}

// SetThumbImage sets the ThumbImage property of class ImageBasedSlider.
//
// https://doc.babylonjs.com/api/classes/babylon.imagebasedslider#thumbimage
func (i *ImageBasedSlider) SetThumbImage(thumbImage *Image) *ImageBasedSlider {
	p := ba.ctx.Get("ImageBasedSlider").New(thumbImage.JSObject())
	return ImageBasedSliderFromJSObject(p, ba.ctx)
}

// ValueBarImage returns the ValueBarImage property of class ImageBasedSlider.
//
// https://doc.babylonjs.com/api/classes/babylon.imagebasedslider#valuebarimage
func (i *ImageBasedSlider) ValueBarImage(valueBarImage *Image) *ImageBasedSlider {
	p := ba.ctx.Get("ImageBasedSlider").New(valueBarImage.JSObject())
	return ImageBasedSliderFromJSObject(p, ba.ctx)
}

// SetValueBarImage sets the ValueBarImage property of class ImageBasedSlider.
//
// https://doc.babylonjs.com/api/classes/babylon.imagebasedslider#valuebarimage
func (i *ImageBasedSlider) SetValueBarImage(valueBarImage *Image) *ImageBasedSlider {
	p := ba.ctx.Get("ImageBasedSlider").New(valueBarImage.JSObject())
	return ImageBasedSliderFromJSObject(p, ba.ctx)
}

*/
