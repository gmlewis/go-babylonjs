// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Container3D represents a babylon.js Container3D.
// Class used to create containers for controls
type Container3D struct {
	*Control3D
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *Container3D) JSObject() js.Value { return c.p }

// Container3D returns a Container3D JavaScript class.
func (ba *Babylon) Container3D() *Container3D {
	p := ba.ctx.Get("Container3D")
	return Container3DFromJSObject(p, ba.ctx)
}

// Container3DFromJSObject returns a wrapped Container3D JavaScript class.
func Container3DFromJSObject(p js.Value, ctx js.Value) *Container3D {
	return &Container3D{Control3D: Control3DFromJSObject(p, ctx), ctx: ctx}
}

// NewContainer3DOpts contains optional parameters for NewContainer3D.
type NewContainer3DOpts struct {
	Name *JSString
}

// NewContainer3D returns a new Container3D object.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d
func (ba *Babylon) NewContainer3D(opts *NewContainer3DOpts) *Container3D {
	if opts == nil {
		opts = &NewContainer3DOpts{}
	}

	p := ba.ctx.Get("Container3D").New(opts.Name.JSObject())
	return Container3DFromJSObject(p, ba.ctx)
}

// TODO: methods
