// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Container3D represents a babylon.js Container3D.
// Class used to create containers for controls
type Container3D struct {
	*Control3D
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *Container3D) JSObject() js.Value { return c.p }

// Container3D returns a Container3D JavaScript class.
func (gui *GUI) Container3D() *Container3D {
	p := gui.ctx.Get("Container3D")
	return Container3DFromJSObject(p, gui.ctx)
}

// Container3DFromJSObject returns a wrapped Container3D JavaScript class.
func Container3DFromJSObject(p js.Value, ctx js.Value) *Container3D {
	return &Container3D{Control3D: Control3DFromJSObject(p, ctx), ctx: ctx}
}

// Container3DArrayToJSArray returns a JavaScript Array for the wrapped array.
func Container3DArrayToJSArray(array []*Container3D) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewContainer3DOpts contains optional parameters for NewContainer3D.
type NewContainer3DOpts struct {
	Name *string
}

// NewContainer3D returns a new Container3D object.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d
func (gui *GUI) NewContainer3D(opts *NewContainer3DOpts) *Container3D {
	if opts == nil {
		opts = &NewContainer3DOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}

	p := gui.ctx.Get("Container3D").New(args...)
	return Container3DFromJSObject(p, gui.ctx)
}

// AddControl calls the AddControl method on the Container3D object.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#addcontrol
func (c *Container3D) AddControl(control *Control3D) *Container3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := c.p.Call("addControl", args...)
	return Container3DFromJSObject(retVal, c.ctx)
}

// ContainsControl calls the ContainsControl method on the Container3D object.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#containscontrol
func (c *Container3D) ContainsControl(control *Control3D) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := c.p.Call("containsControl", args...)
	return retVal.Bool()
}

// Dispose calls the Dispose method on the Container3D object.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#dispose
func (c *Container3D) Dispose() {

	c.p.Call("dispose")
}

// RemoveControl calls the RemoveControl method on the Container3D object.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#removecontrol
func (c *Container3D) RemoveControl(control *Control3D) *Container3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := c.p.Call("removeControl", args...)
	return Container3DFromJSObject(retVal, c.ctx)
}

// UpdateLayout calls the UpdateLayout method on the Container3D object.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#updatelayout
func (c *Container3D) UpdateLayout() *Container3D {

	retVal := c.p.Call("updateLayout")
	return Container3DFromJSObject(retVal, c.ctx)
}

// BlockLayout returns the BlockLayout property of class Container3D.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#blocklayout
func (c *Container3D) BlockLayout() bool {
	retVal := c.p.Get("blockLayout")
	return retVal.Bool()
}

// SetBlockLayout sets the BlockLayout property of class Container3D.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#blocklayout
func (c *Container3D) SetBlockLayout(blockLayout bool) *Container3D {
	c.p.Set("blockLayout", blockLayout)
	return c
}

// Children returns the Children property of class Container3D.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#children
func (c *Container3D) Children() []*Control3D {
	retVal := c.p.Get("children")
	result := []*Control3D{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, Control3DFromJSObject(retVal.Index(ri), c.ctx))
	}
	return result
}

// SetChildren sets the Children property of class Container3D.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#children
func (c *Container3D) SetChildren(children []*Control3D) *Container3D {
	c.p.Set("children", children)
	return c
}

// FACEFORWARDREVERSED_ORIENTATION returns the FACEFORWARDREVERSED_ORIENTATION property of class Container3D.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#faceforwardreversed_orientation
func (c *Container3D) FACEFORWARDREVERSED_ORIENTATION() float64 {
	retVal := c.p.Get("FACEFORWARDREVERSED_ORIENTATION")
	return retVal.Float()
}

// SetFACEFORWARDREVERSED_ORIENTATION sets the FACEFORWARDREVERSED_ORIENTATION property of class Container3D.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#faceforwardreversed_orientation
func (c *Container3D) SetFACEFORWARDREVERSED_ORIENTATION(FACEFORWARDREVERSED_ORIENTATION float64) *Container3D {
	c.p.Set("FACEFORWARDREVERSED_ORIENTATION", FACEFORWARDREVERSED_ORIENTATION)
	return c
}

// FACEFORWARD_ORIENTATION returns the FACEFORWARD_ORIENTATION property of class Container3D.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#faceforward_orientation
func (c *Container3D) FACEFORWARD_ORIENTATION() float64 {
	retVal := c.p.Get("FACEFORWARD_ORIENTATION")
	return retVal.Float()
}

// SetFACEFORWARD_ORIENTATION sets the FACEFORWARD_ORIENTATION property of class Container3D.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#faceforward_orientation
func (c *Container3D) SetFACEFORWARD_ORIENTATION(FACEFORWARD_ORIENTATION float64) *Container3D {
	c.p.Set("FACEFORWARD_ORIENTATION", FACEFORWARD_ORIENTATION)
	return c
}

// FACEORIGINREVERSED_ORIENTATION returns the FACEORIGINREVERSED_ORIENTATION property of class Container3D.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#faceoriginreversed_orientation
func (c *Container3D) FACEORIGINREVERSED_ORIENTATION() float64 {
	retVal := c.p.Get("FACEORIGINREVERSED_ORIENTATION")
	return retVal.Float()
}

// SetFACEORIGINREVERSED_ORIENTATION sets the FACEORIGINREVERSED_ORIENTATION property of class Container3D.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#faceoriginreversed_orientation
func (c *Container3D) SetFACEORIGINREVERSED_ORIENTATION(FACEORIGINREVERSED_ORIENTATION float64) *Container3D {
	c.p.Set("FACEORIGINREVERSED_ORIENTATION", FACEORIGINREVERSED_ORIENTATION)
	return c
}

// FACEORIGIN_ORIENTATION returns the FACEORIGIN_ORIENTATION property of class Container3D.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#faceorigin_orientation
func (c *Container3D) FACEORIGIN_ORIENTATION() float64 {
	retVal := c.p.Get("FACEORIGIN_ORIENTATION")
	return retVal.Float()
}

// SetFACEORIGIN_ORIENTATION sets the FACEORIGIN_ORIENTATION property of class Container3D.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#faceorigin_orientation
func (c *Container3D) SetFACEORIGIN_ORIENTATION(FACEORIGIN_ORIENTATION float64) *Container3D {
	c.p.Set("FACEORIGIN_ORIENTATION", FACEORIGIN_ORIENTATION)
	return c
}

// UNSET_ORIENTATION returns the UNSET_ORIENTATION property of class Container3D.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#unset_orientation
func (c *Container3D) UNSET_ORIENTATION() float64 {
	retVal := c.p.Get("UNSET_ORIENTATION")
	return retVal.Float()
}

// SetUNSET_ORIENTATION sets the UNSET_ORIENTATION property of class Container3D.
//
// https://doc.babylonjs.com/api/classes/babylon.container3d#unset_orientation
func (c *Container3D) SetUNSET_ORIENTATION(UNSET_ORIENTATION float64) *Container3D {
	c.p.Set("UNSET_ORIENTATION", UNSET_ORIENTATION)
	return c
}
