// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PhysicsAffectedImpostorWithData represents a babylon.js PhysicsAffectedImpostorWithData.
// Interface for an affected physics impostor
//
// See: https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class
type PhysicsAffectedImpostorWithData struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PhysicsAffectedImpostorWithData) JSObject() js.Value { return p.p }

// PhysicsAffectedImpostorWithData returns a PhysicsAffectedImpostorWithData JavaScript class.
func (ba *Babylon) PhysicsAffectedImpostorWithData() *PhysicsAffectedImpostorWithData {
	p := ba.ctx.Get("PhysicsAffectedImpostorWithData")
	return PhysicsAffectedImpostorWithDataFromJSObject(p, ba.ctx)
}

// PhysicsAffectedImpostorWithDataFromJSObject returns a wrapped PhysicsAffectedImpostorWithData JavaScript class.
func PhysicsAffectedImpostorWithDataFromJSObject(p js.Value, ctx js.Value) *PhysicsAffectedImpostorWithData {
	return &PhysicsAffectedImpostorWithData{p: p, ctx: ctx}
}

// PhysicsAffectedImpostorWithDataArrayToJSArray returns a JavaScript Array for the wrapped array.
func PhysicsAffectedImpostorWithDataArrayToJSArray(array []*PhysicsAffectedImpostorWithData) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// HitData returns the HitData property of class PhysicsAffectedImpostorWithData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsaffectedimpostorwithdata#hitdata
func (p *PhysicsAffectedImpostorWithData) HitData(hitData *PhysicsHitData) *PhysicsAffectedImpostorWithData {
	p := ba.ctx.Get("PhysicsAffectedImpostorWithData").New(hitData.JSObject())
	return PhysicsAffectedImpostorWithDataFromJSObject(p, ba.ctx)
}

// SetHitData sets the HitData property of class PhysicsAffectedImpostorWithData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsaffectedimpostorwithdata#hitdata
func (p *PhysicsAffectedImpostorWithData) SetHitData(hitData *PhysicsHitData) *PhysicsAffectedImpostorWithData {
	p := ba.ctx.Get("PhysicsAffectedImpostorWithData").New(hitData.JSObject())
	return PhysicsAffectedImpostorWithDataFromJSObject(p, ba.ctx)
}

// Impostor returns the Impostor property of class PhysicsAffectedImpostorWithData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsaffectedimpostorwithdata#impostor
func (p *PhysicsAffectedImpostorWithData) Impostor(impostor *PhysicsImpostor) *PhysicsAffectedImpostorWithData {
	p := ba.ctx.Get("PhysicsAffectedImpostorWithData").New(impostor.JSObject())
	return PhysicsAffectedImpostorWithDataFromJSObject(p, ba.ctx)
}

// SetImpostor sets the Impostor property of class PhysicsAffectedImpostorWithData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsaffectedimpostorwithdata#impostor
func (p *PhysicsAffectedImpostorWithData) SetImpostor(impostor *PhysicsImpostor) *PhysicsAffectedImpostorWithData {
	p := ba.ctx.Get("PhysicsAffectedImpostorWithData").New(impostor.JSObject())
	return PhysicsAffectedImpostorWithDataFromJSObject(p, ba.ctx)
}

*/
