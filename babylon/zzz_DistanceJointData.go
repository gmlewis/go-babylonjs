// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DistanceJointData represents a babylon.js DistanceJointData.
// Joint data for a Distance-Joint
//
// See: https://doc.babylonjs.com/how_to/using_the_physics_engine
type DistanceJointData struct {
	*PhysicsJointData
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DistanceJointData) JSObject() js.Value { return d.p }

// DistanceJointData returns a DistanceJointData JavaScript class.
func (ba *Babylon) DistanceJointData() *DistanceJointData {
	p := ba.ctx.Get("DistanceJointData")
	return DistanceJointDataFromJSObject(p, ba.ctx)
}

// DistanceJointDataFromJSObject returns a wrapped DistanceJointData JavaScript class.
func DistanceJointDataFromJSObject(p js.Value, ctx js.Value) *DistanceJointData {
	return &DistanceJointData{PhysicsJointData: PhysicsJointDataFromJSObject(p, ctx), ctx: ctx}
}

// DistanceJointDataArrayToJSArray returns a JavaScript Array for the wrapped array.
func DistanceJointDataArrayToJSArray(array []*DistanceJointData) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// MaxDistance returns the MaxDistance property of class DistanceJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.distancejointdata#maxdistance
func (d *DistanceJointData) MaxDistance() float64 {
	retVal := d.p.Get("maxDistance")
	return retVal.Float()
}

// SetMaxDistance sets the MaxDistance property of class DistanceJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.distancejointdata#maxdistance
func (d *DistanceJointData) SetMaxDistance(maxDistance float64) *DistanceJointData {
	d.p.Set("maxDistance", maxDistance)
	return d
}
