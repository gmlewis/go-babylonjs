// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// VideoRecorder represents a babylon.js VideoRecorder.
// This can help with recording videos from BabylonJS.
// This is based on the available WebRTC functionalities of the browser.
//
// See: http://doc.babylonjs.com/how_to/render_scene_on_a_video
type VideoRecorder struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *VideoRecorder) JSObject() js.Value { return v.p }

// VideoRecorder returns a VideoRecorder JavaScript class.
func (ba *Babylon) VideoRecorder() *VideoRecorder {
	p := ba.ctx.Get("VideoRecorder")
	return VideoRecorderFromJSObject(p, ba.ctx)
}

// VideoRecorderFromJSObject returns a wrapped VideoRecorder JavaScript class.
func VideoRecorderFromJSObject(p js.Value, ctx js.Value) *VideoRecorder {
	return &VideoRecorder{p: p, ctx: ctx}
}

// VideoRecorderArrayToJSArray returns a JavaScript Array for the wrapped array.
func VideoRecorderArrayToJSArray(array []*VideoRecorder) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewVideoRecorderOpts contains optional parameters for NewVideoRecorder.
type NewVideoRecorderOpts struct {
	Options js.Value
}

// NewVideoRecorder returns a new VideoRecorder object.
//
// https://doc.babylonjs.com/api/classes/babylon.videorecorder
func (ba *Babylon) NewVideoRecorder(engine *Engine, opts *NewVideoRecorderOpts) *VideoRecorder {
	if opts == nil {
		opts = &NewVideoRecorderOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, engine.JSObject())

	args = append(args, opts.Options)

	p := ba.ctx.Get("VideoRecorder").New(args...)
	return VideoRecorderFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the VideoRecorder object.
//
// https://doc.babylonjs.com/api/classes/babylon.videorecorder#dispose
func (v *VideoRecorder) Dispose() {

	v.p.Call("dispose")
}

// IsSupported calls the IsSupported method on the VideoRecorder object.
//
// https://doc.babylonjs.com/api/classes/babylon.videorecorder#issupported
func (v *VideoRecorder) IsSupported(engine *Engine) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, engine.JSObject())

	retVal := v.p.Call("IsSupported", args...)
	return retVal.Bool()
}

// VideoRecorderStartRecordingOpts contains optional parameters for VideoRecorder.StartRecording.
type VideoRecorderStartRecordingOpts struct {
	FileName    *string
	MaxDuration *float64
}

// StartRecording calls the StartRecording method on the VideoRecorder object.
//
// https://doc.babylonjs.com/api/classes/babylon.videorecorder#startrecording
func (v *VideoRecorder) StartRecording(opts *VideoRecorderStartRecordingOpts) *Promise {
	if opts == nil {
		opts = &VideoRecorderStartRecordingOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.FileName == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FileName)
	}
	if opts.MaxDuration == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.MaxDuration)
	}

	retVal := v.p.Call("startRecording", args...)
	return PromiseFromJSObject(retVal, v.ctx)
}

// StopRecording calls the StopRecording method on the VideoRecorder object.
//
// https://doc.babylonjs.com/api/classes/babylon.videorecorder#stoprecording
func (v *VideoRecorder) StopRecording() {

	v.p.Call("stopRecording")
}

// IsRecording returns the IsRecording property of class VideoRecorder.
//
// https://doc.babylonjs.com/api/classes/babylon.videorecorder#isrecording
func (v *VideoRecorder) IsRecording() bool {
	retVal := v.p.Get("isRecording")
	return retVal.Bool()
}

// SetIsRecording sets the IsRecording property of class VideoRecorder.
//
// https://doc.babylonjs.com/api/classes/babylon.videorecorder#isrecording
func (v *VideoRecorder) SetIsRecording(isRecording bool) *VideoRecorder {
	v.p.Set("isRecording", isRecording)
	return v
}
