// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PerlinNoiseProceduralTexture represents a babylon.js PerlinNoiseProceduralTexture.
//
type PerlinNoiseProceduralTexture struct {
	*ProceduralTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PerlinNoiseProceduralTexture) JSObject() js.Value { return p.p }

// PerlinNoiseProceduralTexture returns a PerlinNoiseProceduralTexture JavaScript class.
func (ba *Babylon) PerlinNoiseProceduralTexture() *PerlinNoiseProceduralTexture {
	p := ba.ctx.Get("PerlinNoiseProceduralTexture")
	return PerlinNoiseProceduralTextureFromJSObject(p, ba.ctx)
}

// PerlinNoiseProceduralTextureFromJSObject returns a wrapped PerlinNoiseProceduralTexture JavaScript class.
func PerlinNoiseProceduralTextureFromJSObject(p js.Value, ctx js.Value) *PerlinNoiseProceduralTexture {
	return &PerlinNoiseProceduralTexture{ProceduralTexture: ProceduralTextureFromJSObject(p, ctx), ctx: ctx}
}

// NewPerlinNoiseProceduralTextureOpts contains optional parameters for NewPerlinNoiseProceduralTexture.
type NewPerlinNoiseProceduralTextureOpts struct {
	FallbackTexture *Texture

	GenerateMipMaps *JSBool
}

// NewPerlinNoiseProceduralTexture returns a new PerlinNoiseProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.perlinnoiseproceduraltexture
func (ba *Babylon) NewPerlinNoiseProceduralTexture(name string, size float64, scene *Scene, opts *NewPerlinNoiseProceduralTextureOpts) *PerlinNoiseProceduralTexture {
	if opts == nil {
		opts = &NewPerlinNoiseProceduralTextureOpts{}
	}

	p := ba.ctx.Get("PerlinNoiseProceduralTexture").New(name, size, scene.JSObject(), opts.FallbackTexture.JSObject(), opts.GenerateMipMaps.JSObject())
	return PerlinNoiseProceduralTextureFromJSObject(p, ba.ctx)
}

// TODO: methods
