// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PerlinNoiseProceduralTexture represents a babylon.js PerlinNoiseProceduralTexture.
//
type PerlinNoiseProceduralTexture struct {
	*ProceduralTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PerlinNoiseProceduralTexture) JSObject() js.Value { return p.p }

// PerlinNoiseProceduralTexture returns a PerlinNoiseProceduralTexture JavaScript class.
func (ba *Babylon) PerlinNoiseProceduralTexture() *PerlinNoiseProceduralTexture {
	p := ba.ctx.Get("PerlinNoiseProceduralTexture")
	return PerlinNoiseProceduralTextureFromJSObject(p, ba.ctx)
}

// PerlinNoiseProceduralTextureFromJSObject returns a wrapped PerlinNoiseProceduralTexture JavaScript class.
func PerlinNoiseProceduralTextureFromJSObject(p js.Value, ctx js.Value) *PerlinNoiseProceduralTexture {
	return &PerlinNoiseProceduralTexture{ProceduralTexture: ProceduralTextureFromJSObject(p, ctx), ctx: ctx}
}

// PerlinNoiseProceduralTextureArrayToJSArray returns a JavaScript Array for the wrapped array.
func PerlinNoiseProceduralTextureArrayToJSArray(array []*PerlinNoiseProceduralTexture) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPerlinNoiseProceduralTextureOpts contains optional parameters for NewPerlinNoiseProceduralTexture.
type NewPerlinNoiseProceduralTextureOpts struct {
	FallbackTexture *Texture
	GenerateMipMaps *bool
}

// NewPerlinNoiseProceduralTexture returns a new PerlinNoiseProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.perlinnoiseproceduraltexture
func (ba *Babylon) NewPerlinNoiseProceduralTexture(name string, size float64, scene *Scene, opts *NewPerlinNoiseProceduralTextureOpts) *PerlinNoiseProceduralTexture {
	if opts == nil {
		opts = &NewPerlinNoiseProceduralTextureOpts{}
	}

	args := make([]interface{}, 0, 3+2)

	args = append(args, name)
	args = append(args, size)
	args = append(args, scene.JSObject())

	if opts.FallbackTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.FallbackTexture.JSObject())
	}
	if opts.GenerateMipMaps == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateMipMaps)
	}

	p := ba.ctx.Get("PerlinNoiseProceduralTexture").New(args...)
	return PerlinNoiseProceduralTextureFromJSObject(p, ba.ctx)
}

// Parse calls the Parse method on the PerlinNoiseProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.perlinnoiseproceduraltexture#parse
func (p *PerlinNoiseProceduralTexture) Parse(parsedTexture interface{}, scene *Scene, rootUrl string) *PerlinNoiseProceduralTexture {

	args := make([]interface{}, 0, 3+0)

	args = append(args, parsedTexture)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := p.p.Call("Parse", args...)
	return PerlinNoiseProceduralTextureFromJSObject(retVal, p.ctx)
}

// PerlinNoiseProceduralTextureRenderOpts contains optional parameters for PerlinNoiseProceduralTexture.Render.
type PerlinNoiseProceduralTextureRenderOpts struct {
	UseCameraPostProcess *bool
}

// Render calls the Render method on the PerlinNoiseProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.perlinnoiseproceduraltexture#render
func (p *PerlinNoiseProceduralTexture) Render(opts *PerlinNoiseProceduralTextureRenderOpts) {
	if opts == nil {
		opts = &PerlinNoiseProceduralTextureRenderOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.UseCameraPostProcess == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseCameraPostProcess)
	}

	p.p.Call("render", args...)
}

// Resize calls the Resize method on the PerlinNoiseProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.perlinnoiseproceduraltexture#resize
func (p *PerlinNoiseProceduralTexture) Resize(size interface{}, generateMipMaps interface{}) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, size)
	args = append(args, generateMipMaps)

	p.p.Call("resize", args...)
}

// Serialize calls the Serialize method on the PerlinNoiseProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.perlinnoiseproceduraltexture#serialize
func (p *PerlinNoiseProceduralTexture) Serialize() interface{} {

	retVal := p.p.Call("serialize")
	return retVal
}

// UpdateShaderUniforms calls the UpdateShaderUniforms method on the PerlinNoiseProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.perlinnoiseproceduraltexture#updateshaderuniforms
func (p *PerlinNoiseProceduralTexture) UpdateShaderUniforms() {

	p.p.Call("updateShaderUniforms")
}

// Time returns the Time property of class PerlinNoiseProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.perlinnoiseproceduraltexture#time
func (p *PerlinNoiseProceduralTexture) Time() float64 {
	retVal := p.p.Get("time")
	return retVal.Float()
}

// SetTime sets the Time property of class PerlinNoiseProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.perlinnoiseproceduraltexture#time
func (p *PerlinNoiseProceduralTexture) SetTime(time float64) *PerlinNoiseProceduralTexture {
	p.p.Set("time", time)
	return p
}

// TimeScale returns the TimeScale property of class PerlinNoiseProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.perlinnoiseproceduraltexture#timescale
func (p *PerlinNoiseProceduralTexture) TimeScale() float64 {
	retVal := p.p.Get("timeScale")
	return retVal.Float()
}

// SetTimeScale sets the TimeScale property of class PerlinNoiseProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.perlinnoiseproceduraltexture#timescale
func (p *PerlinNoiseProceduralTexture) SetTimeScale(timeScale float64) *PerlinNoiseProceduralTexture {
	p.p.Set("timeScale", timeScale)
	return p
}

// TranslationSpeed returns the TranslationSpeed property of class PerlinNoiseProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.perlinnoiseproceduraltexture#translationspeed
func (p *PerlinNoiseProceduralTexture) TranslationSpeed() float64 {
	retVal := p.p.Get("translationSpeed")
	return retVal.Float()
}

// SetTranslationSpeed sets the TranslationSpeed property of class PerlinNoiseProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.perlinnoiseproceduraltexture#translationspeed
func (p *PerlinNoiseProceduralTexture) SetTranslationSpeed(translationSpeed float64) *PerlinNoiseProceduralTexture {
	p.p.Set("translationSpeed", translationSpeed)
	return p
}
