// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// VRDeviceOrientationFreeCamera represents a babylon.js VRDeviceOrientationFreeCamera.
// Camera used to simulate VR rendering (based on FreeCamera)
//
// See: http://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras
type VRDeviceOrientationFreeCamera struct {
	*DeviceOrientationCamera
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *VRDeviceOrientationFreeCamera) JSObject() js.Value { return v.p }

// VRDeviceOrientationFreeCamera returns a VRDeviceOrientationFreeCamera JavaScript class.
func (ba *Babylon) VRDeviceOrientationFreeCamera() *VRDeviceOrientationFreeCamera {
	p := ba.ctx.Get("VRDeviceOrientationFreeCamera")
	return VRDeviceOrientationFreeCameraFromJSObject(p, ba.ctx)
}

// VRDeviceOrientationFreeCameraFromJSObject returns a wrapped VRDeviceOrientationFreeCamera JavaScript class.
func VRDeviceOrientationFreeCameraFromJSObject(p js.Value, ctx js.Value) *VRDeviceOrientationFreeCamera {
	return &VRDeviceOrientationFreeCamera{DeviceOrientationCamera: DeviceOrientationCameraFromJSObject(p, ctx), ctx: ctx}
}

// VRDeviceOrientationFreeCameraArrayToJSArray returns a JavaScript Array for the wrapped array.
func VRDeviceOrientationFreeCameraArrayToJSArray(array []*VRDeviceOrientationFreeCamera) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewVRDeviceOrientationFreeCameraOpts contains optional parameters for NewVRDeviceOrientationFreeCamera.
type NewVRDeviceOrientationFreeCameraOpts struct {
	CompensateDistortion *bool
	VrCameraMetrics      *VRCameraMetrics
}

// NewVRDeviceOrientationFreeCamera returns a new VRDeviceOrientationFreeCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationfreecamera
func (ba *Babylon) NewVRDeviceOrientationFreeCamera(name string, position *Vector3, scene *Scene, opts *NewVRDeviceOrientationFreeCameraOpts) *VRDeviceOrientationFreeCamera {
	if opts == nil {
		opts = &NewVRDeviceOrientationFreeCameraOpts{}
	}

	args := make([]interface{}, 0, 3+2)

	args = append(args, name)
	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	if opts.CompensateDistortion == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CompensateDistortion)
	}
	if opts.VrCameraMetrics == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.VrCameraMetrics.JSObject())
	}

	p := ba.ctx.Get("VRDeviceOrientationFreeCamera").New(args...)
	return VRDeviceOrientationFreeCameraFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the VRDeviceOrientationFreeCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationfreecamera#getclassname
func (v *VRDeviceOrientationFreeCamera) GetClassName() string {

	retVal := v.p.Call("getClassName")
	return retVal.String()
}

/*

 */
