// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CylinderBuilder represents a babylon.js CylinderBuilder.
// Class containing static functions to help procedurally build meshes
type CylinderBuilder struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *CylinderBuilder) JSObject() js.Value { return c.p }

// CylinderBuilder returns a CylinderBuilder JavaScript class.
func (ba *Babylon) CylinderBuilder() *CylinderBuilder {
	p := ba.ctx.Get("CylinderBuilder")
	return CylinderBuilderFromJSObject(p, ba.ctx)
}

// CylinderBuilderFromJSObject returns a wrapped CylinderBuilder JavaScript class.
func CylinderBuilderFromJSObject(p js.Value, ctx js.Value) *CylinderBuilder {
	return &CylinderBuilder{p: p, ctx: ctx}
}

// CylinderBuilderArrayToJSArray returns a JavaScript Array for the wrapped array.
func CylinderBuilderArrayToJSArray(array []*CylinderBuilder) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// CreateCylinder calls the CreateCylinder method on the CylinderBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.cylinderbuilder#createcylinder
func (c *CylinderBuilder) CreateCylinder(name string, options js.Value, scene interface{}) *Mesh {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, options)
	args = append(args, scene)

	retVal := c.p.Call("CreateCylinder", args...)
	return MeshFromJSObject(retVal, c.ctx)
}

/*

 */
