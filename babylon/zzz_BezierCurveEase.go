// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BezierCurveEase represents a babylon.js BezierCurveEase.
// Easing function with a bezier shape (see link below).
//
// See: http://cubic-bezier.com/#.17,.67,.83,.67
// See: http://doc.babylonjs.com/babylon101/animations#easing-functions
type BezierCurveEase struct {
	*EasingFunction
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BezierCurveEase) JSObject() js.Value { return b.p }

// BezierCurveEase returns a BezierCurveEase JavaScript class.
func (ba *Babylon) BezierCurveEase() *BezierCurveEase {
	p := ba.ctx.Get("BezierCurveEase")
	return BezierCurveEaseFromJSObject(p, ba.ctx)
}

// BezierCurveEaseFromJSObject returns a wrapped BezierCurveEase JavaScript class.
func BezierCurveEaseFromJSObject(p js.Value, ctx js.Value) *BezierCurveEase {
	return &BezierCurveEase{EasingFunction: EasingFunctionFromJSObject(p, ctx), ctx: ctx}
}

// BezierCurveEaseArrayToJSArray returns a JavaScript Array for the wrapped array.
func BezierCurveEaseArrayToJSArray(array []*BezierCurveEase) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewBezierCurveEaseOpts contains optional parameters for NewBezierCurveEase.
type NewBezierCurveEaseOpts struct {
	X1 *float64
	Y1 *float64
	X2 *float64
	Y2 *float64
}

// NewBezierCurveEase returns a new BezierCurveEase object.
//
// https://doc.babylonjs.com/api/classes/babylon.beziercurveease
func (ba *Babylon) NewBezierCurveEase(opts *NewBezierCurveEaseOpts) *BezierCurveEase {
	if opts == nil {
		opts = &NewBezierCurveEaseOpts{}
	}

	args := make([]interface{}, 0, 0+4)

	if opts.X1 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.X1)
	}
	if opts.Y1 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Y1)
	}
	if opts.X2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.X2)
	}
	if opts.Y2 == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Y2)
	}

	p := ba.ctx.Get("BezierCurveEase").New(args...)
	return BezierCurveEaseFromJSObject(p, ba.ctx)
}

/*

// X1 returns the X1 property of class BezierCurveEase.
//
// https://doc.babylonjs.com/api/classes/babylon.beziercurveease#x1
func (b *BezierCurveEase) X1(x1 float64) *BezierCurveEase {
	p := ba.ctx.Get("BezierCurveEase").New(x1)
	return BezierCurveEaseFromJSObject(p, ba.ctx)
}

// SetX1 sets the X1 property of class BezierCurveEase.
//
// https://doc.babylonjs.com/api/classes/babylon.beziercurveease#x1
func (b *BezierCurveEase) SetX1(x1 float64) *BezierCurveEase {
	p := ba.ctx.Get("BezierCurveEase").New(x1)
	return BezierCurveEaseFromJSObject(p, ba.ctx)
}

// X2 returns the X2 property of class BezierCurveEase.
//
// https://doc.babylonjs.com/api/classes/babylon.beziercurveease#x2
func (b *BezierCurveEase) X2(x2 float64) *BezierCurveEase {
	p := ba.ctx.Get("BezierCurveEase").New(x2)
	return BezierCurveEaseFromJSObject(p, ba.ctx)
}

// SetX2 sets the X2 property of class BezierCurveEase.
//
// https://doc.babylonjs.com/api/classes/babylon.beziercurveease#x2
func (b *BezierCurveEase) SetX2(x2 float64) *BezierCurveEase {
	p := ba.ctx.Get("BezierCurveEase").New(x2)
	return BezierCurveEaseFromJSObject(p, ba.ctx)
}

// Y1 returns the Y1 property of class BezierCurveEase.
//
// https://doc.babylonjs.com/api/classes/babylon.beziercurveease#y1
func (b *BezierCurveEase) Y1(y1 float64) *BezierCurveEase {
	p := ba.ctx.Get("BezierCurveEase").New(y1)
	return BezierCurveEaseFromJSObject(p, ba.ctx)
}

// SetY1 sets the Y1 property of class BezierCurveEase.
//
// https://doc.babylonjs.com/api/classes/babylon.beziercurveease#y1
func (b *BezierCurveEase) SetY1(y1 float64) *BezierCurveEase {
	p := ba.ctx.Get("BezierCurveEase").New(y1)
	return BezierCurveEaseFromJSObject(p, ba.ctx)
}

// Y2 returns the Y2 property of class BezierCurveEase.
//
// https://doc.babylonjs.com/api/classes/babylon.beziercurveease#y2
func (b *BezierCurveEase) Y2(y2 float64) *BezierCurveEase {
	p := ba.ctx.Get("BezierCurveEase").New(y2)
	return BezierCurveEaseFromJSObject(p, ba.ctx)
}

// SetY2 sets the Y2 property of class BezierCurveEase.
//
// https://doc.babylonjs.com/api/classes/babylon.beziercurveease#y2
func (b *BezierCurveEase) SetY2(y2 float64) *BezierCurveEase {
	p := ba.ctx.Get("BezierCurveEase").New(y2)
	return BezierCurveEaseFromJSObject(p, ba.ctx)
}

*/
