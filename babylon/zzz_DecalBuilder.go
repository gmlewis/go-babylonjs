// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DecalBuilder represents a babylon.js DecalBuilder.
// Class containing static functions to help procedurally build meshes
type DecalBuilder struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DecalBuilder) JSObject() js.Value { return d.p }

// DecalBuilder returns a DecalBuilder JavaScript class.
func (ba *Babylon) DecalBuilder() *DecalBuilder {
	p := ba.ctx.Get("DecalBuilder")
	return DecalBuilderFromJSObject(p, ba.ctx)
}

// DecalBuilderFromJSObject returns a wrapped DecalBuilder JavaScript class.
func DecalBuilderFromJSObject(p js.Value, ctx js.Value) *DecalBuilder {
	return &DecalBuilder{p: p, ctx: ctx}
}

// CreateDecal calls the CreateDecal method on the DecalBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.decalbuilder#createdecal
func (d *DecalBuilder) CreateDecal(name string, sourceMesh *AbstractMesh, options js.Value) *Mesh {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, sourceMesh.JSObject())
	args = append(args, options)

	retVal := d.p.Call("CreateDecal", args...)
	return MeshFromJSObject(retVal, d.ctx)
}

/*

 */
