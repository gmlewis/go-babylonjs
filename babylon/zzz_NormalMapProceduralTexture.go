// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// NormalMapProceduralTexture represents a babylon.js NormalMapProceduralTexture.
//
type NormalMapProceduralTexture struct{ *ProceduralTexture }

// JSObject returns the underlying js.Value.
func (n *NormalMapProceduralTexture) JSObject() js.Value { return n.p }

// NormalMapProceduralTexture returns a NormalMapProceduralTexture JavaScript class.
func (b *Babylon) NormalMapProceduralTexture() *NormalMapProceduralTexture {
	p := b.ctx.Get("NormalMapProceduralTexture")
	return NormalMapProceduralTextureFromJSObject(p)
}

// NormalMapProceduralTextureFromJSObject returns a wrapped NormalMapProceduralTexture JavaScript class.
func NormalMapProceduralTextureFromJSObject(p js.Value) *NormalMapProceduralTexture {
	return &NormalMapProceduralTexture{ProceduralTextureFromJSObject(p)}
}

// NewNormalMapProceduralTextureOpts contains optional parameters for NewNormalMapProceduralTexture.
type NewNormalMapProceduralTextureOpts struct {
	FallbackTexture *Texture

	GenerateMipMaps *bool
}

// NewNormalMapProceduralTexture returns a new NormalMapProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.normalmapproceduraltexture
func (b *Babylon) NewNormalMapProceduralTexture(name string, size float64, scene *Scene, opts *NewNormalMapProceduralTextureOpts) *NormalMapProceduralTexture {
	if opts == nil {
		opts = &NewNormalMapProceduralTextureOpts{}
	}

	p := b.ctx.Get("NormalMapProceduralTexture").New(name, size, scene.JSObject(), opts.FallbackTexture.JSObject(), opts.GenerateMipMaps.JSObject())
	return NormalMapProceduralTextureFromJSObject(p)
}

// TODO: methods
