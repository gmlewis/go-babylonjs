// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// InputText represents a babylon.js InputText.
// Class used to create input text control
type InputText struct {
	*Control
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *InputText) JSObject() js.Value { return i.p }

// InputText returns a InputText JavaScript class.
func (ba *Babylon) InputText() *InputText {
	p := ba.ctx.Get("InputText")
	return InputTextFromJSObject(p, ba.ctx)
}

// InputTextFromJSObject returns a wrapped InputText JavaScript class.
func InputTextFromJSObject(p js.Value, ctx js.Value) *InputText {
	return &InputText{Control: ControlFromJSObject(p, ctx), ctx: ctx}
}

// InputTextArrayToJSArray returns a JavaScript Array for the wrapped array.
func InputTextArrayToJSArray(array []*InputText) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewInputTextOpts contains optional parameters for NewInputText.
type NewInputTextOpts struct {
	Name *string
	Text *string
}

// NewInputText returns a new InputText object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext
func (ba *Babylon) NewInputText(opts *NewInputTextOpts) *InputText {
	if opts == nil {
		opts = &NewInputTextOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}
	if opts.Text == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Text)
	}

	p := ba.ctx.Get("InputText").New(args...)
	return InputTextFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the InputText object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#dispose
func (i *InputText) Dispose() {

	i.p.Call("dispose")
}

// KeepsFocusWith calls the KeepsFocusWith method on the InputText object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#keepsfocuswith
func (i *InputText) KeepsFocusWith() *Control {

	retVal := i.p.Call("keepsFocusWith")
	return ControlFromJSObject(retVal, i.ctx)
}

// ProcessKeyboard calls the ProcessKeyboard method on the InputText object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#processkeyboard
func (i *InputText) ProcessKeyboard(evt js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, evt)

	i.p.Call("processKeyboard", args...)
}

// InputText_drawOpts contains optional parameters for InputText._draw.
type InputText_drawOpts struct {
	InvalidatedRectangle *Measure
}

// _draw calls the _draw method on the InputText object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#_draw
func (i *InputText) _draw(context js.Value, opts *InputText_drawOpts) {
	if opts == nil {
		opts = &InputText_drawOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, context)

	if opts.InvalidatedRectangle == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.InvalidatedRectangle.JSObject())
	}

	i.p.Call("_draw", args...)
}

// _onPointerDown calls the _onPointerDown method on the InputText object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#_onpointerdown
func (i *InputText) _onPointerDown(target *Control, coordinates *Vector2, pointerId float64, buttonIndex float64) bool {

	args := make([]interface{}, 0, 4+0)

	args = append(args, target.JSObject())
	args = append(args, coordinates.JSObject())
	args = append(args, pointerId)
	args = append(args, buttonIndex)

	retVal := i.p.Call("_onPointerDown", args...)
	return retVal.Bool()
}

// _onPointerMove calls the _onPointerMove method on the InputText object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#_onpointermove
func (i *InputText) _onPointerMove(target *Control, coordinates *Vector2, pointerId float64) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, target.JSObject())
	args = append(args, coordinates.JSObject())
	args = append(args, pointerId)

	i.p.Call("_onPointerMove", args...)
}

// _onPointerUp calls the _onPointerUp method on the InputText object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#_onpointerup
func (i *InputText) _onPointerUp(target *Control, coordinates *Vector2, pointerId float64, buttonIndex float64, notifyClick bool) {

	args := make([]interface{}, 0, 5+0)

	args = append(args, target.JSObject())
	args = append(args, coordinates.JSObject())
	args = append(args, pointerId)
	args = append(args, buttonIndex)
	args = append(args, notifyClick)

	i.p.Call("_onPointerUp", args...)
}

/*

// AddKey returns the AddKey property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#addkey
func (i *InputText) AddKey(addKey bool) *InputText {
	p := ba.ctx.Get("InputText").New(addKey)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetAddKey sets the AddKey property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#addkey
func (i *InputText) SetAddKey(addKey bool) *InputText {
	p := ba.ctx.Get("InputText").New(addKey)
	return InputTextFromJSObject(p, ba.ctx)
}

// AutoStretchWidth returns the AutoStretchWidth property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#autostretchwidth
func (i *InputText) AutoStretchWidth(autoStretchWidth bool) *InputText {
	p := ba.ctx.Get("InputText").New(autoStretchWidth)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetAutoStretchWidth sets the AutoStretchWidth property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#autostretchwidth
func (i *InputText) SetAutoStretchWidth(autoStretchWidth bool) *InputText {
	p := ba.ctx.Get("InputText").New(autoStretchWidth)
	return InputTextFromJSObject(p, ba.ctx)
}

// Background returns the Background property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#background
func (i *InputText) Background(background string) *InputText {
	p := ba.ctx.Get("InputText").New(background)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetBackground sets the Background property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#background
func (i *InputText) SetBackground(background string) *InputText {
	p := ba.ctx.Get("InputText").New(background)
	return InputTextFromJSObject(p, ba.ctx)
}

// CurrentKey returns the CurrentKey property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#currentkey
func (i *InputText) CurrentKey(currentKey string) *InputText {
	p := ba.ctx.Get("InputText").New(currentKey)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetCurrentKey sets the CurrentKey property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#currentkey
func (i *InputText) SetCurrentKey(currentKey string) *InputText {
	p := ba.ctx.Get("InputText").New(currentKey)
	return InputTextFromJSObject(p, ba.ctx)
}

// DeadKey returns the DeadKey property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#deadkey
func (i *InputText) DeadKey(deadKey bool) *InputText {
	p := ba.ctx.Get("InputText").New(deadKey)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetDeadKey sets the DeadKey property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#deadkey
func (i *InputText) SetDeadKey(deadKey bool) *InputText {
	p := ba.ctx.Get("InputText").New(deadKey)
	return InputTextFromJSObject(p, ba.ctx)
}

// DisableMobilePrompt returns the DisableMobilePrompt property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#disablemobileprompt
func (i *InputText) DisableMobilePrompt(disableMobilePrompt bool) *InputText {
	p := ba.ctx.Get("InputText").New(disableMobilePrompt)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetDisableMobilePrompt sets the DisableMobilePrompt property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#disablemobileprompt
func (i *InputText) SetDisableMobilePrompt(disableMobilePrompt bool) *InputText {
	p := ba.ctx.Get("InputText").New(disableMobilePrompt)
	return InputTextFromJSObject(p, ba.ctx)
}

// FocusedBackground returns the FocusedBackground property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#focusedbackground
func (i *InputText) FocusedBackground(focusedBackground string) *InputText {
	p := ba.ctx.Get("InputText").New(focusedBackground)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetFocusedBackground sets the FocusedBackground property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#focusedbackground
func (i *InputText) SetFocusedBackground(focusedBackground string) *InputText {
	p := ba.ctx.Get("InputText").New(focusedBackground)
	return InputTextFromJSObject(p, ba.ctx)
}

// FocusedColor returns the FocusedColor property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#focusedcolor
func (i *InputText) FocusedColor(focusedColor string) *InputText {
	p := ba.ctx.Get("InputText").New(focusedColor)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetFocusedColor sets the FocusedColor property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#focusedcolor
func (i *InputText) SetFocusedColor(focusedColor string) *InputText {
	p := ba.ctx.Get("InputText").New(focusedColor)
	return InputTextFromJSObject(p, ba.ctx)
}

// HighligherOpacity returns the HighligherOpacity property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#highligheropacity
func (i *InputText) HighligherOpacity(highligherOpacity float64) *InputText {
	p := ba.ctx.Get("InputText").New(highligherOpacity)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetHighligherOpacity sets the HighligherOpacity property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#highligheropacity
func (i *InputText) SetHighligherOpacity(highligherOpacity float64) *InputText {
	p := ba.ctx.Get("InputText").New(highligherOpacity)
	return InputTextFromJSObject(p, ba.ctx)
}

// HighlightedText returns the HighlightedText property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#highlightedtext
func (i *InputText) HighlightedText(highlightedText string) *InputText {
	p := ba.ctx.Get("InputText").New(highlightedText)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetHighlightedText sets the HighlightedText property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#highlightedtext
func (i *InputText) SetHighlightedText(highlightedText string) *InputText {
	p := ba.ctx.Get("InputText").New(highlightedText)
	return InputTextFromJSObject(p, ba.ctx)
}

// Margin returns the Margin property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#margin
func (i *InputText) Margin(margin string) *InputText {
	p := ba.ctx.Get("InputText").New(margin)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetMargin sets the Margin property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#margin
func (i *InputText) SetMargin(margin string) *InputText {
	p := ba.ctx.Get("InputText").New(margin)
	return InputTextFromJSObject(p, ba.ctx)
}

// MarginInPixels returns the MarginInPixels property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#margininpixels
func (i *InputText) MarginInPixels(marginInPixels float64) *InputText {
	p := ba.ctx.Get("InputText").New(marginInPixels)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetMarginInPixels sets the MarginInPixels property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#margininpixels
func (i *InputText) SetMarginInPixels(marginInPixels float64) *InputText {
	p := ba.ctx.Get("InputText").New(marginInPixels)
	return InputTextFromJSObject(p, ba.ctx)
}

// MaxWidth returns the MaxWidth property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#maxwidth
func (i *InputText) MaxWidth(maxWidth string) *InputText {
	p := ba.ctx.Get("InputText").New(maxWidth)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetMaxWidth sets the MaxWidth property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#maxwidth
func (i *InputText) SetMaxWidth(maxWidth string) *InputText {
	p := ba.ctx.Get("InputText").New(maxWidth)
	return InputTextFromJSObject(p, ba.ctx)
}

// MaxWidthInPixels returns the MaxWidthInPixels property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#maxwidthinpixels
func (i *InputText) MaxWidthInPixels(maxWidthInPixels float64) *InputText {
	p := ba.ctx.Get("InputText").New(maxWidthInPixels)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetMaxWidthInPixels sets the MaxWidthInPixels property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#maxwidthinpixels
func (i *InputText) SetMaxWidthInPixels(maxWidthInPixels float64) *InputText {
	p := ba.ctx.Get("InputText").New(maxWidthInPixels)
	return InputTextFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#name
func (i *InputText) Name(name string) *InputText {
	p := ba.ctx.Get("InputText").New(name)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#name
func (i *InputText) SetName(name string) *InputText {
	p := ba.ctx.Get("InputText").New(name)
	return InputTextFromJSObject(p, ba.ctx)
}

// OnBeforeKeyAddObservable returns the OnBeforeKeyAddObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#onbeforekeyaddobservable
func (i *InputText) OnBeforeKeyAddObservable(onBeforeKeyAddObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onBeforeKeyAddObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// SetOnBeforeKeyAddObservable sets the OnBeforeKeyAddObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#onbeforekeyaddobservable
func (i *InputText) SetOnBeforeKeyAddObservable(onBeforeKeyAddObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onBeforeKeyAddObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// OnBlurObservable returns the OnBlurObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#onblurobservable
func (i *InputText) OnBlurObservable(onBlurObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onBlurObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// SetOnBlurObservable sets the OnBlurObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#onblurobservable
func (i *InputText) SetOnBlurObservable(onBlurObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onBlurObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// OnFocusObservable returns the OnFocusObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#onfocusobservable
func (i *InputText) OnFocusObservable(onFocusObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onFocusObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// SetOnFocusObservable sets the OnFocusObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#onfocusobservable
func (i *InputText) SetOnFocusObservable(onFocusObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onFocusObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// OnFocusSelectAll returns the OnFocusSelectAll property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#onfocusselectall
func (i *InputText) OnFocusSelectAll(onFocusSelectAll bool) *InputText {
	p := ba.ctx.Get("InputText").New(onFocusSelectAll)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetOnFocusSelectAll sets the OnFocusSelectAll property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#onfocusselectall
func (i *InputText) SetOnFocusSelectAll(onFocusSelectAll bool) *InputText {
	p := ba.ctx.Get("InputText").New(onFocusSelectAll)
	return InputTextFromJSObject(p, ba.ctx)
}

// OnKeyboardEventProcessedObservable returns the OnKeyboardEventProcessedObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#onkeyboardeventprocessedobservable
func (i *InputText) OnKeyboardEventProcessedObservable(onKeyboardEventProcessedObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onKeyboardEventProcessedObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// SetOnKeyboardEventProcessedObservable sets the OnKeyboardEventProcessedObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#onkeyboardeventprocessedobservable
func (i *InputText) SetOnKeyboardEventProcessedObservable(onKeyboardEventProcessedObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onKeyboardEventProcessedObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// OnTextChangedObservable returns the OnTextChangedObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#ontextchangedobservable
func (i *InputText) OnTextChangedObservable(onTextChangedObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onTextChangedObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// SetOnTextChangedObservable sets the OnTextChangedObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#ontextchangedobservable
func (i *InputText) SetOnTextChangedObservable(onTextChangedObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onTextChangedObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// OnTextCopyObservable returns the OnTextCopyObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#ontextcopyobservable
func (i *InputText) OnTextCopyObservable(onTextCopyObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onTextCopyObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// SetOnTextCopyObservable sets the OnTextCopyObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#ontextcopyobservable
func (i *InputText) SetOnTextCopyObservable(onTextCopyObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onTextCopyObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// OnTextCutObservable returns the OnTextCutObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#ontextcutobservable
func (i *InputText) OnTextCutObservable(onTextCutObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onTextCutObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// SetOnTextCutObservable sets the OnTextCutObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#ontextcutobservable
func (i *InputText) SetOnTextCutObservable(onTextCutObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onTextCutObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// OnTextHighlightObservable returns the OnTextHighlightObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#ontexthighlightobservable
func (i *InputText) OnTextHighlightObservable(onTextHighlightObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onTextHighlightObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// SetOnTextHighlightObservable sets the OnTextHighlightObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#ontexthighlightobservable
func (i *InputText) SetOnTextHighlightObservable(onTextHighlightObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onTextHighlightObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// OnTextPasteObservable returns the OnTextPasteObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#ontextpasteobservable
func (i *InputText) OnTextPasteObservable(onTextPasteObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onTextPasteObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// SetOnTextPasteObservable sets the OnTextPasteObservable property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#ontextpasteobservable
func (i *InputText) SetOnTextPasteObservable(onTextPasteObservable *Observable) *InputText {
	p := ba.ctx.Get("InputText").New(onTextPasteObservable.JSObject())
	return InputTextFromJSObject(p, ba.ctx)
}

// PlaceholderColor returns the PlaceholderColor property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#placeholdercolor
func (i *InputText) PlaceholderColor(placeholderColor string) *InputText {
	p := ba.ctx.Get("InputText").New(placeholderColor)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetPlaceholderColor sets the PlaceholderColor property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#placeholdercolor
func (i *InputText) SetPlaceholderColor(placeholderColor string) *InputText {
	p := ba.ctx.Get("InputText").New(placeholderColor)
	return InputTextFromJSObject(p, ba.ctx)
}

// PlaceholderText returns the PlaceholderText property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#placeholdertext
func (i *InputText) PlaceholderText(placeholderText string) *InputText {
	p := ba.ctx.Get("InputText").New(placeholderText)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetPlaceholderText sets the PlaceholderText property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#placeholdertext
func (i *InputText) SetPlaceholderText(placeholderText string) *InputText {
	p := ba.ctx.Get("InputText").New(placeholderText)
	return InputTextFromJSObject(p, ba.ctx)
}

// PromptMessage returns the PromptMessage property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#promptmessage
func (i *InputText) PromptMessage(promptMessage string) *InputText {
	p := ba.ctx.Get("InputText").New(promptMessage)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetPromptMessage sets the PromptMessage property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#promptmessage
func (i *InputText) SetPromptMessage(promptMessage string) *InputText {
	p := ba.ctx.Get("InputText").New(promptMessage)
	return InputTextFromJSObject(p, ba.ctx)
}

// Text returns the Text property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#text
func (i *InputText) Text(text string) *InputText {
	p := ba.ctx.Get("InputText").New(text)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetText sets the Text property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#text
func (i *InputText) SetText(text string) *InputText {
	p := ba.ctx.Get("InputText").New(text)
	return InputTextFromJSObject(p, ba.ctx)
}

// TextHighlightColor returns the TextHighlightColor property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#texthighlightcolor
func (i *InputText) TextHighlightColor(textHighlightColor string) *InputText {
	p := ba.ctx.Get("InputText").New(textHighlightColor)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetTextHighlightColor sets the TextHighlightColor property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#texthighlightcolor
func (i *InputText) SetTextHighlightColor(textHighlightColor string) *InputText {
	p := ba.ctx.Get("InputText").New(textHighlightColor)
	return InputTextFromJSObject(p, ba.ctx)
}

// Thickness returns the Thickness property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#thickness
func (i *InputText) Thickness(thickness float64) *InputText {
	p := ba.ctx.Get("InputText").New(thickness)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetThickness sets the Thickness property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#thickness
func (i *InputText) SetThickness(thickness float64) *InputText {
	p := ba.ctx.Get("InputText").New(thickness)
	return InputTextFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#width
func (i *InputText) Width(width string) *InputText {
	p := ba.ctx.Get("InputText").New(width)
	return InputTextFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class InputText.
//
// https://doc.babylonjs.com/api/classes/babylon.inputtext#width
func (i *InputText) SetWidth(width string) *InputText {
	p := ba.ctx.Get("InputText").New(width)
	return InputTextFromJSObject(p, ba.ctx)
}

*/
