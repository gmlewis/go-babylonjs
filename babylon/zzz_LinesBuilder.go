// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// LinesBuilder represents a babylon.js LinesBuilder.
// Class containing static functions to help procedurally build meshes
type LinesBuilder struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (l *LinesBuilder) JSObject() js.Value { return l.p }

// LinesBuilder returns a LinesBuilder JavaScript class.
func (ba *Babylon) LinesBuilder() *LinesBuilder {
	p := ba.ctx.Get("LinesBuilder")
	return LinesBuilderFromJSObject(p, ba.ctx)
}

// LinesBuilderFromJSObject returns a wrapped LinesBuilder JavaScript class.
func LinesBuilderFromJSObject(p js.Value, ctx js.Value) *LinesBuilder {
	return &LinesBuilder{p: p, ctx: ctx}
}

// LinesBuilderCreateDashedLinesOpts contains optional parameters for LinesBuilder.CreateDashedLines.
type LinesBuilderCreateDashedLinesOpts struct {
	Scene *Scene
}

// CreateDashedLines calls the CreateDashedLines method on the LinesBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.linesbuilder#createdashedlines
func (l *LinesBuilder) CreateDashedLines(name string, options js.Value, opts *LinesBuilderCreateDashedLinesOpts) *LinesMesh {
	if opts == nil {
		opts = &LinesBuilderCreateDashedLinesOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, options)

	if opts.Scene == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scene.JSObject())
	}

	retVal := l.p.Call("CreateDashedLines", args...)
	return LinesMeshFromJSObject(retVal, l.ctx)
}

// CreateLineSystem calls the CreateLineSystem method on the LinesBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.linesbuilder#createlinesystem
func (l *LinesBuilder) CreateLineSystem(name string, options js.Value, scene *Scene) *LinesMesh {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, options)
	args = append(args, scene.JSObject())

	retVal := l.p.Call("CreateLineSystem", args...)
	return LinesMeshFromJSObject(retVal, l.ctx)
}

// LinesBuilderCreateLinesOpts contains optional parameters for LinesBuilder.CreateLines.
type LinesBuilderCreateLinesOpts struct {
	Scene *Scene
}

// CreateLines calls the CreateLines method on the LinesBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.linesbuilder#createlines
func (l *LinesBuilder) CreateLines(name string, options js.Value, opts *LinesBuilderCreateLinesOpts) *LinesMesh {
	if opts == nil {
		opts = &LinesBuilderCreateLinesOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, options)

	if opts.Scene == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scene.JSObject())
	}

	retVal := l.p.Call("CreateLines", args...)
	return LinesMeshFromJSObject(retVal, l.ctx)
}

/*

 */
