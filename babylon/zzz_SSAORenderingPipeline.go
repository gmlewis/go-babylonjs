// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SSAORenderingPipeline represents a babylon.js SSAORenderingPipeline.
// Render pipeline to produce ssao effect
type SSAORenderingPipeline struct{ *PostProcessRenderPipeline }

// JSObject returns the underlying js.Value.
func (s *SSAORenderingPipeline) JSObject() js.Value { return s.p }

// SSAORenderingPipeline returns a SSAORenderingPipeline JavaScript class.
func (ba *Babylon) SSAORenderingPipeline() *SSAORenderingPipeline {
	p := ba.ctx.Get("SSAORenderingPipeline")
	return SSAORenderingPipelineFromJSObject(p)
}

// SSAORenderingPipelineFromJSObject returns a wrapped SSAORenderingPipeline JavaScript class.
func SSAORenderingPipelineFromJSObject(p js.Value) *SSAORenderingPipeline {
	return &SSAORenderingPipeline{PostProcessRenderPipelineFromJSObject(p)}
}

// NewSSAORenderingPipelineOpts contains optional parameters for NewSSAORenderingPipeline.
type NewSSAORenderingPipelineOpts struct {
	Cameras *Camera
}

// NewSSAORenderingPipeline returns a new SSAORenderingPipeline object.
//
// https://doc.babylonjs.com/api/classes/babylon.ssaorenderingpipeline
func (ba *Babylon) NewSSAORenderingPipeline(name string, scene *Scene, ratio interface{}, opts *NewSSAORenderingPipelineOpts) *SSAORenderingPipeline {
	if opts == nil {
		opts = &NewSSAORenderingPipelineOpts{}
	}

	p := ba.ctx.Get("SSAORenderingPipeline").New(name, scene.JSObject(), ratio, opts.Cameras.JSObject())
	return SSAORenderingPipelineFromJSObject(p)
}

// TODO: methods
