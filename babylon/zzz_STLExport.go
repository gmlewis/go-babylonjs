// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// STLExport represents a babylon.js STLExport.
// Class for generating STL data from a Babylon scene.
type STLExport struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *STLExport) JSObject() js.Value { return s.p }

// STLExport returns a STLExport JavaScript class.
func (ba *Babylon) STLExport() *STLExport {
	p := ba.ctx.Get("STLExport")
	return STLExportFromJSObject(p, ba.ctx)
}

// STLExportFromJSObject returns a wrapped STLExport JavaScript class.
func STLExportFromJSObject(p js.Value, ctx js.Value) *STLExport {
	return &STLExport{p: p, ctx: ctx}
}

// STLExportArrayToJSArray returns a JavaScript Array for the wrapped array.
func STLExportArrayToJSArray(array []*STLExport) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// STLExportCreateSTLOpts contains optional parameters for STLExport.CreateSTL.
type STLExportCreateSTLOpts struct {
	Download       *bool
	FileName       *string
	Binary         *bool
	IsLittleEndian *bool
}

// CreateSTL calls the CreateSTL method on the STLExport object.
//
// https://doc.babylonjs.com/api/classes/babylon.stlexport#createstl
func (s *STLExport) CreateSTL(meshes []*Mesh, opts *STLExportCreateSTLOpts) js.Value {
	if opts == nil {
		opts = &STLExportCreateSTLOpts{}
	}

	args := make([]interface{}, 0, 1+4)

	args = append(args, MeshArrayToJSArray(meshes))

	if opts.Download == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Download)
	}
	if opts.FileName == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FileName)
	}
	if opts.Binary == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Binary)
	}
	if opts.IsLittleEndian == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsLittleEndian)
	}

	retVal := s.p.Call("CreateSTL", args...)
	return retVal
}
