// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ColorCorrectionPostProcess represents a babylon.js ColorCorrectionPostProcess.
// This post-process allows the modification of rendered colors by using
// a &#39;look-up table&#39; (LUT). This effect is also called Color Grading.
//
// The object needs to be provided an url to a texture containing the color
// look-up table: the texture must be 256 pixels wide and 16 pixels high.
// Use an image editing software to tweak the LUT to match your needs.
//
// See: http://udn.epicgames.com/Three/rsrc/Three/ColorGrading/RGBTable16x1.png
// See: http://udn.epicgames.com/Three/ColorGrading.html
type ColorCorrectionPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *ColorCorrectionPostProcess) JSObject() js.Value { return c.p }

// ColorCorrectionPostProcess returns a ColorCorrectionPostProcess JavaScript class.
func (ba *Babylon) ColorCorrectionPostProcess() *ColorCorrectionPostProcess {
	p := ba.ctx.Get("ColorCorrectionPostProcess")
	return ColorCorrectionPostProcessFromJSObject(p, ba.ctx)
}

// ColorCorrectionPostProcessFromJSObject returns a wrapped ColorCorrectionPostProcess JavaScript class.
func ColorCorrectionPostProcessFromJSObject(p js.Value, ctx js.Value) *ColorCorrectionPostProcess {
	return &ColorCorrectionPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// ColorCorrectionPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func ColorCorrectionPostProcessArrayToJSArray(array []*ColorCorrectionPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewColorCorrectionPostProcessOpts contains optional parameters for NewColorCorrectionPostProcess.
type NewColorCorrectionPostProcessOpts struct {
	SamplingMode *float64
	Engine       *Engine
	Reusable     *bool
}

// NewColorCorrectionPostProcess returns a new ColorCorrectionPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorcorrectionpostprocess
func (ba *Babylon) NewColorCorrectionPostProcess(name string, colorTableUrl string, options float64, camera *Camera, opts *NewColorCorrectionPostProcessOpts) *ColorCorrectionPostProcess {
	if opts == nil {
		opts = &NewColorCorrectionPostProcessOpts{}
	}

	args := make([]interface{}, 0, 4+3)

	args = append(args, name)
	args = append(args, colorTableUrl)
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}

	p := ba.ctx.Get("ColorCorrectionPostProcess").New(args...)
	return ColorCorrectionPostProcessFromJSObject(p, ba.ctx)
}
