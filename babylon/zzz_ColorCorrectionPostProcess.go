// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ColorCorrectionPostProcess represents a babylon.js ColorCorrectionPostProcess.
// This post-process allows the modification of rendered colors by using
// a &amp;#39;look-up table&amp;#39; (LUT). This effect is also called Color Grading.
//
// For an example of a color LUT, see here:
//
// See: http://udn.epicgames.com/Three/ColorGrading.html
type ColorCorrectionPostProcess struct{ *PostProcess }

// JSObject returns the underlying js.Value.
func (c *ColorCorrectionPostProcess) JSObject() js.Value { return c.p }

// ColorCorrectionPostProcess returns a ColorCorrectionPostProcess JavaScript class.
func (ba *Babylon) ColorCorrectionPostProcess() *ColorCorrectionPostProcess {
	p := ba.ctx.Get("ColorCorrectionPostProcess")
	return ColorCorrectionPostProcessFromJSObject(p)
}

// ColorCorrectionPostProcessFromJSObject returns a wrapped ColorCorrectionPostProcess JavaScript class.
func ColorCorrectionPostProcessFromJSObject(p js.Value) *ColorCorrectionPostProcess {
	return &ColorCorrectionPostProcess{PostProcessFromJSObject(p)}
}

// NewColorCorrectionPostProcessOpts contains optional parameters for NewColorCorrectionPostProcess.
type NewColorCorrectionPostProcessOpts struct {
	SamplingMode *JSFloat64

	Engine *Engine

	Reusable *JSBool
}

// NewColorCorrectionPostProcess returns a new ColorCorrectionPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorcorrectionpostprocess
func (ba *Babylon) NewColorCorrectionPostProcess(name string, colorTableUrl string, options float64, camera *Camera, opts *NewColorCorrectionPostProcessOpts) *ColorCorrectionPostProcess {
	if opts == nil {
		opts = &NewColorCorrectionPostProcessOpts{}
	}

	p := ba.ctx.Get("ColorCorrectionPostProcess").New(name, colorTableUrl, options, camera.JSObject(), opts.SamplingMode, opts.Engine.JSObject(), opts.Reusable)
	return ColorCorrectionPostProcessFromJSObject(p)
}

// TODO: methods
