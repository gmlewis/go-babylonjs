// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Layer represents a babylon.js Layer.
// This represents a full screen 2d layer.
// This can be useful to display a picture in the  background of your scene for instance.
//
// See: https://www.babylonjs-playground.com/#08A2BS#1
type Layer struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (l *Layer) JSObject() js.Value { return l.p }

// Layer returns a Layer JavaScript class.
func (ba *Babylon) Layer() *Layer {
	p := ba.ctx.Get("Layer")
	return LayerFromJSObject(p, ba.ctx)
}

// LayerFromJSObject returns a wrapped Layer JavaScript class.
func LayerFromJSObject(p js.Value, ctx js.Value) *Layer {
	return &Layer{p: p, ctx: ctx}
}

// LayerArrayToJSArray returns a JavaScript Array for the wrapped array.
func LayerArrayToJSArray(array []*Layer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewLayerOpts contains optional parameters for NewLayer.
type NewLayerOpts struct {
	IsBackground *bool
	Color        *Color4
}

// NewLayer returns a new Layer object.
//
// https://doc.babylonjs.com/api/classes/babylon.layer
func (ba *Babylon) NewLayer(name string, imgUrl string, scene *Scene, opts *NewLayerOpts) *Layer {
	if opts == nil {
		opts = &NewLayerOpts{}
	}

	args := make([]interface{}, 0, 3+2)

	args = append(args, name)
	args = append(args, imgUrl)
	args = append(args, scene.JSObject())

	if opts.IsBackground == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsBackground)
	}
	if opts.Color == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Color.JSObject())
	}

	p := ba.ctx.Get("Layer").New(args...)
	return LayerFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the Layer object.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#dispose
func (l *Layer) Dispose() {

	l.p.Call("dispose")
}

// Render calls the Render method on the Layer object.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#render
func (l *Layer) Render() {

	l.p.Call("render")
}

// AlphaBlendingMode returns the AlphaBlendingMode property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#alphablendingmode
func (l *Layer) AlphaBlendingMode() float64 {
	retVal := l.p.Get("alphaBlendingMode")
	return retVal.Float()
}

// SetAlphaBlendingMode sets the AlphaBlendingMode property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#alphablendingmode
func (l *Layer) SetAlphaBlendingMode(alphaBlendingMode float64) *Layer {
	l.p.Set("alphaBlendingMode", alphaBlendingMode)
	return l
}

// AlphaTest returns the AlphaTest property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#alphatest
func (l *Layer) AlphaTest() bool {
	retVal := l.p.Get("alphaTest")
	return retVal.Bool()
}

// SetAlphaTest sets the AlphaTest property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#alphatest
func (l *Layer) SetAlphaTest(alphaTest bool) *Layer {
	l.p.Set("alphaTest", alphaTest)
	return l
}

// Color returns the Color property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#color
func (l *Layer) Color() *Color4 {
	retVal := l.p.Get("color")
	return Color4FromJSObject(retVal, l.ctx)
}

// SetColor sets the Color property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#color
func (l *Layer) SetColor(color *Color4) *Layer {
	l.p.Set("color", color.JSObject())
	return l
}

// IsBackground returns the IsBackground property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#isbackground
func (l *Layer) IsBackground() bool {
	retVal := l.p.Get("isBackground")
	return retVal.Bool()
}

// SetIsBackground sets the IsBackground property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#isbackground
func (l *Layer) SetIsBackground(isBackground bool) *Layer {
	l.p.Set("isBackground", isBackground)
	return l
}

// LayerMask returns the LayerMask property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#layermask
func (l *Layer) LayerMask() float64 {
	retVal := l.p.Get("layerMask")
	return retVal.Float()
}

// SetLayerMask sets the LayerMask property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#layermask
func (l *Layer) SetLayerMask(layerMask float64) *Layer {
	l.p.Set("layerMask", layerMask)
	return l
}

// Name returns the Name property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#name
func (l *Layer) Name() string {
	retVal := l.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#name
func (l *Layer) SetName(name string) *Layer {
	l.p.Set("name", name)
	return l
}

// Offset returns the Offset property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#offset
func (l *Layer) Offset() *Vector2 {
	retVal := l.p.Get("offset")
	return Vector2FromJSObject(retVal, l.ctx)
}

// SetOffset sets the Offset property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#offset
func (l *Layer) SetOffset(offset *Vector2) *Layer {
	l.p.Set("offset", offset.JSObject())
	return l
}

// OnAfterRender returns the OnAfterRender property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#onafterrender
func (l *Layer) OnAfterRender() js.Value {
	retVal := l.p.Get("onAfterRender")
	return retVal
}

// SetOnAfterRender sets the OnAfterRender property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#onafterrender
func (l *Layer) SetOnAfterRender(onAfterRender JSFunc) *Layer {
	l.p.Set("onAfterRender", js.FuncOf(onAfterRender))
	return l
}

// OnAfterRenderObservable returns the OnAfterRenderObservable property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#onafterrenderobservable
func (l *Layer) OnAfterRenderObservable() *Observable {
	retVal := l.p.Get("onAfterRenderObservable")
	return ObservableFromJSObject(retVal, l.ctx)
}

// SetOnAfterRenderObservable sets the OnAfterRenderObservable property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#onafterrenderobservable
func (l *Layer) SetOnAfterRenderObservable(onAfterRenderObservable *Observable) *Layer {
	l.p.Set("onAfterRenderObservable", onAfterRenderObservable.JSObject())
	return l
}

// OnBeforeRender returns the OnBeforeRender property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#onbeforerender
func (l *Layer) OnBeforeRender() js.Value {
	retVal := l.p.Get("onBeforeRender")
	return retVal
}

// SetOnBeforeRender sets the OnBeforeRender property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#onbeforerender
func (l *Layer) SetOnBeforeRender(onBeforeRender JSFunc) *Layer {
	l.p.Set("onBeforeRender", js.FuncOf(onBeforeRender))
	return l
}

// OnBeforeRenderObservable returns the OnBeforeRenderObservable property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#onbeforerenderobservable
func (l *Layer) OnBeforeRenderObservable() *Observable {
	retVal := l.p.Get("onBeforeRenderObservable")
	return ObservableFromJSObject(retVal, l.ctx)
}

// SetOnBeforeRenderObservable sets the OnBeforeRenderObservable property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#onbeforerenderobservable
func (l *Layer) SetOnBeforeRenderObservable(onBeforeRenderObservable *Observable) *Layer {
	l.p.Set("onBeforeRenderObservable", onBeforeRenderObservable.JSObject())
	return l
}

// OnDispose returns the OnDispose property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#ondispose
func (l *Layer) OnDispose() js.Value {
	retVal := l.p.Get("onDispose")
	return retVal
}

// SetOnDispose sets the OnDispose property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#ondispose
func (l *Layer) SetOnDispose(onDispose JSFunc) *Layer {
	l.p.Set("onDispose", js.FuncOf(onDispose))
	return l
}

// OnDisposeObservable returns the OnDisposeObservable property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#ondisposeobservable
func (l *Layer) OnDisposeObservable() *Observable {
	retVal := l.p.Get("onDisposeObservable")
	return ObservableFromJSObject(retVal, l.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#ondisposeobservable
func (l *Layer) SetOnDisposeObservable(onDisposeObservable *Observable) *Layer {
	l.p.Set("onDisposeObservable", onDisposeObservable.JSObject())
	return l
}

// RenderOnlyInRenderTargetTextures returns the RenderOnlyInRenderTargetTextures property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#renderonlyinrendertargettextures
func (l *Layer) RenderOnlyInRenderTargetTextures() bool {
	retVal := l.p.Get("renderOnlyInRenderTargetTextures")
	return retVal.Bool()
}

// SetRenderOnlyInRenderTargetTextures sets the RenderOnlyInRenderTargetTextures property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#renderonlyinrendertargettextures
func (l *Layer) SetRenderOnlyInRenderTargetTextures(renderOnlyInRenderTargetTextures bool) *Layer {
	l.p.Set("renderOnlyInRenderTargetTextures", renderOnlyInRenderTargetTextures)
	return l
}

// RenderTargetTextures returns the RenderTargetTextures property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#rendertargettextures
func (l *Layer) RenderTargetTextures() []*RenderTargetTexture {
	retVal := l.p.Get("renderTargetTextures")
	result := []*RenderTargetTexture{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, RenderTargetTextureFromJSObject(retVal.Index(ri), l.ctx))
	}
	return result
}

// SetRenderTargetTextures sets the RenderTargetTextures property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#rendertargettextures
func (l *Layer) SetRenderTargetTextures(renderTargetTextures []*RenderTargetTexture) *Layer {
	l.p.Set("renderTargetTextures", renderTargetTextures)
	return l
}

// Scale returns the Scale property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#scale
func (l *Layer) Scale() *Vector2 {
	retVal := l.p.Get("scale")
	return Vector2FromJSObject(retVal, l.ctx)
}

// SetScale sets the Scale property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#scale
func (l *Layer) SetScale(scale *Vector2) *Layer {
	l.p.Set("scale", scale.JSObject())
	return l
}

// Texture returns the Texture property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#texture
func (l *Layer) Texture() *Texture {
	retVal := l.p.Get("texture")
	return TextureFromJSObject(retVal, l.ctx)
}

// SetTexture sets the Texture property of class Layer.
//
// https://doc.babylonjs.com/api/classes/babylon.layer#texture
func (l *Layer) SetTexture(texture *Texture) *Layer {
	l.p.Set("texture", texture.JSObject())
	return l
}
