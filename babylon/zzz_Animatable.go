// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Animatable represents a babylon.js Animatable.
// Class used to store an actual running animation
type Animatable struct{ p js.Value }

// JSObject returns the underlying js.Value.
func (a *Animatable) JSObject() js.Value { return a.p }

// Animatable returns a Animatable JavaScript class.
func (ba *Babylon) Animatable() *Animatable {
	p := ba.ctx.Get("Animatable")
	return AnimatableFromJSObject(p)
}

// AnimatableFromJSObject returns a wrapped Animatable JavaScript class.
func AnimatableFromJSObject(p js.Value) *Animatable {
	return &Animatable{p: p}
}

// NewAnimatableOpts contains optional parameters for NewAnimatable.
type NewAnimatableOpts struct {
	FromFrame *JSFloat64

	ToFrame *JSFloat64

	LoopAnimation *JSBool

	SpeedRatio *JSFloat64

	OnAnimationEnd *func()

	Animations *Animation

	OnAnimationLoop *func()
}

// NewAnimatable returns a new Animatable object.
//
// https://doc.babylonjs.com/api/classes/babylon.animatable
func (ba *Babylon) NewAnimatable(scene *Scene, target interface{}, opts *NewAnimatableOpts) *Animatable {
	if opts == nil {
		opts = &NewAnimatableOpts{}
	}

	p := ba.ctx.Get("Animatable").New(scene.JSObject(), target, opts.FromFrame, opts.ToFrame, opts.LoopAnimation, opts.SpeedRatio, opts.OnAnimationEnd, opts.Animations.JSObject(), opts.OnAnimationLoop)
	return AnimatableFromJSObject(p)
}

// TODO: methods
