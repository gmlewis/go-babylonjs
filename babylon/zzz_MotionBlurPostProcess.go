// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MotionBlurPostProcess represents a babylon.js MotionBlurPostProcess.
// The Motion Blur Post Process which blurs an image based on the objects velocity in scene.
// Velocity can be affected by each object&amp;#39;s rotation, position and scale depending on the transformation speed.
// As an example, all you have to do is to create the post-process:
// var mb = new BABYLON.MotionBlurPostProcess(
// &amp;#39;mb&amp;#39;, // The name of the effect.
// scene, // The scene containing the objects to blur according to their velocity.
// 1.0, // The required width/height ratio to downsize to before computing the render pass.
// camera // The camera to apply the render pass to.
// );
// Then, all objects moving, rotating and/or scaling will be blurred depending on the transformation speed.
type MotionBlurPostProcess struct{ *PostProcess }

// JSObject returns the underlying js.Value.
func (m *MotionBlurPostProcess) JSObject() js.Value { return m.p }

// MotionBlurPostProcess returns a MotionBlurPostProcess JavaScript class.
func (b *Babylon) MotionBlurPostProcess() *MotionBlurPostProcess {
	p := b.ctx.Get("MotionBlurPostProcess")
	return MotionBlurPostProcessFromJSObject(p)
}

// MotionBlurPostProcessFromJSObject returns a wrapped MotionBlurPostProcess JavaScript class.
func MotionBlurPostProcessFromJSObject(p js.Value) *MotionBlurPostProcess {
	return &MotionBlurPostProcess{PostProcessFromJSObject(p)}
}

// NewMotionBlurPostProcess returns a new MotionBlurPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.motionblurpostprocess
func (b *Babylon) NewMotionBlurPostProcess(todo parameters) *MotionBlurPostProcess {
	p := b.ctx.Get("MotionBlurPostProcess").New(todo)
	return MotionBlurPostProcessFromJSObject(p)
}

// TODO: methods
