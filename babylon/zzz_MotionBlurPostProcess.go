// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MotionBlurPostProcess represents a babylon.js MotionBlurPostProcess.
// The Motion Blur Post Process which blurs an image based on the objects velocity in scene.
// Velocity can be affected by each object&#39;s rotation, position and scale depending on the transformation speed.
// As an example, all you have to do is to create the post-process:
// var mb = new BABYLON.MotionBlurPostProcess(
// &#39;mb&#39;, // The name of the effect.
// scene, // The scene containing the objects to blur according to their velocity.
// 1.0, // The required width/height ratio to downsize to before computing the render pass.
// camera // The camera to apply the render pass to.
// );
// Then, all objects moving, rotating and/or scaling will be blurred depending on the transformation speed.
type MotionBlurPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MotionBlurPostProcess) JSObject() js.Value { return m.p }

// MotionBlurPostProcess returns a MotionBlurPostProcess JavaScript class.
func (ba *Babylon) MotionBlurPostProcess() *MotionBlurPostProcess {
	p := ba.ctx.Get("MotionBlurPostProcess")
	return MotionBlurPostProcessFromJSObject(p, ba.ctx)
}

// MotionBlurPostProcessFromJSObject returns a wrapped MotionBlurPostProcess JavaScript class.
func MotionBlurPostProcessFromJSObject(p js.Value, ctx js.Value) *MotionBlurPostProcess {
	return &MotionBlurPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// MotionBlurPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func MotionBlurPostProcessArrayToJSArray(array []*MotionBlurPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewMotionBlurPostProcessOpts contains optional parameters for NewMotionBlurPostProcess.
type NewMotionBlurPostProcessOpts struct {
	SamplingMode     *float64
	Engine           *Engine
	Reusable         *bool
	TextureType      *float64
	BlockCompilation *bool
}

// NewMotionBlurPostProcess returns a new MotionBlurPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.motionblurpostprocess#constructor
func (ba *Babylon) NewMotionBlurPostProcess(name string, scene *Scene, options float64, camera *Camera, opts *NewMotionBlurPostProcessOpts) *MotionBlurPostProcess {
	if opts == nil {
		opts = &NewMotionBlurPostProcessOpts{}
	}

	args := make([]interface{}, 0, 4+5)

	args = append(args, name)
	args = append(args, scene.JSObject())
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}
	if opts.BlockCompilation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.BlockCompilation)
	}

	p := ba.ctx.Get("MotionBlurPostProcess").New(args...)
	return MotionBlurPostProcessFromJSObject(p, ba.ctx)
}

// MotionBlurPostProcessDisposeOpts contains optional parameters for MotionBlurPostProcess.Dispose.
type MotionBlurPostProcessDisposeOpts struct {
	Camera *Camera
}

// Dispose calls the Dispose method on the MotionBlurPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.motionblurpostprocess#dispose
func (m *MotionBlurPostProcess) Dispose(opts *MotionBlurPostProcessDisposeOpts) {
	if opts == nil {
		opts = &MotionBlurPostProcessDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}

	m.p.Call("dispose", args...)
}

// ExcludeSkinnedMesh calls the ExcludeSkinnedMesh method on the MotionBlurPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.motionblurpostprocess#excludeskinnedmesh
func (m *MotionBlurPostProcess) ExcludeSkinnedMesh(skinnedMesh *AbstractMesh) {

	args := make([]interface{}, 0, 1+0)

	if skinnedMesh == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, skinnedMesh.JSObject())
	}

	m.p.Call("excludeSkinnedMesh", args...)
}

// RemoveExcludedSkinnedMesh calls the RemoveExcludedSkinnedMesh method on the MotionBlurPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.motionblurpostprocess#removeexcludedskinnedmesh
func (m *MotionBlurPostProcess) RemoveExcludedSkinnedMesh(skinnedMesh *AbstractMesh) {

	args := make([]interface{}, 0, 1+0)

	if skinnedMesh == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, skinnedMesh.JSObject())
	}

	m.p.Call("removeExcludedSkinnedMesh", args...)
}

// MotionBlurSamples returns the MotionBlurSamples property of class MotionBlurPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.motionblurpostprocess#motionblursamples
func (m *MotionBlurPostProcess) MotionBlurSamples() float64 {
	retVal := m.p.Get("motionBlurSamples")
	return retVal.Float()
}

// SetMotionBlurSamples sets the MotionBlurSamples property of class MotionBlurPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.motionblurpostprocess#motionblursamples
func (m *MotionBlurPostProcess) SetMotionBlurSamples(motionBlurSamples float64) *MotionBlurPostProcess {
	m.p.Set("motionBlurSamples", motionBlurSamples)
	return m
}

// MotionStrength returns the MotionStrength property of class MotionBlurPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.motionblurpostprocess#motionstrength
func (m *MotionBlurPostProcess) MotionStrength() float64 {
	retVal := m.p.Get("motionStrength")
	return retVal.Float()
}

// SetMotionStrength sets the MotionStrength property of class MotionBlurPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.motionblurpostprocess#motionstrength
func (m *MotionBlurPostProcess) SetMotionStrength(motionStrength float64) *MotionBlurPostProcess {
	m.p.Set("motionStrength", motionStrength)
	return m
}
