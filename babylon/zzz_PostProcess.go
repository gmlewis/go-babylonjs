// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PostProcess represents a babylon.js PostProcess.
// PostProcess can be used to apply a shader to a texture after it has been rendered
// See <a href="https://doc.babylonjs.com/how_to/how_to_use_postprocesses">https://doc.babylonjs.com/how_to/how_to_use_postprocesses</a>
type PostProcess struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PostProcess) JSObject() js.Value { return p.p }

// PostProcess returns a PostProcess JavaScript class.
func (ba *Babylon) PostProcess() *PostProcess {
	p := ba.ctx.Get("PostProcess")
	return PostProcessFromJSObject(p, ba.ctx)
}

// PostProcessFromJSObject returns a wrapped PostProcess JavaScript class.
func PostProcessFromJSObject(p js.Value, ctx js.Value) *PostProcess {
	return &PostProcess{p: p, ctx: ctx}
}

// PostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func PostProcessArrayToJSArray(array []*PostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPostProcessOpts contains optional parameters for NewPostProcess.
type NewPostProcessOpts struct {
	SamplingMode     *float64
	Engine           *Engine
	Reusable         *bool
	Defines          *string
	TextureType      *float64
	VertexUrl        *string
	IndexParameters  *interface{}
	BlockCompilation *bool
}

// NewPostProcess returns a new PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess
func (ba *Babylon) NewPostProcess(name string, fragmentUrl string, parameters string, samplers string, options float64, camera *Camera, opts *NewPostProcessOpts) *PostProcess {
	if opts == nil {
		opts = &NewPostProcessOpts{}
	}

	args := make([]interface{}, 0, 6+8)

	args = append(args, name)
	args = append(args, fragmentUrl)
	args = append(args, parameters)
	args = append(args, samplers)
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.Defines == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Defines)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}
	if opts.VertexUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.VertexUrl)
	}
	if opts.IndexParameters == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.IndexParameters)
	}
	if opts.BlockCompilation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.BlockCompilation)
	}

	p := ba.ctx.Get("PostProcess").New(args...)
	return PostProcessFromJSObject(p, ba.ctx)
}

// PostProcessActivateOpts contains optional parameters for PostProcess.Activate.
type PostProcessActivateOpts struct {
	SourceTexture     *InternalTexture
	ForceDepthStencil *bool
}

// Activate calls the Activate method on the PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#activate
func (p *PostProcess) Activate(camera *Camera, opts *PostProcessActivateOpts) *InternalTexture {
	if opts == nil {
		opts = &PostProcessActivateOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, camera.JSObject())

	if opts.SourceTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.SourceTexture.JSObject())
	}
	if opts.ForceDepthStencil == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDepthStencil)
	}

	retVal := p.p.Call("activate", args...)
	return InternalTextureFromJSObject(retVal, p.ctx)
}

// Apply calls the Apply method on the PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#apply
func (p *PostProcess) Apply() *Effect {

	retVal := p.p.Call("apply")
	return EffectFromJSObject(retVal, p.ctx)
}

// PostProcessDisposeOpts contains optional parameters for PostProcess.Dispose.
type PostProcessDisposeOpts struct {
	Camera *Camera
}

// Dispose calls the Dispose method on the PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#dispose
func (p *PostProcess) Dispose(opts *PostProcessDisposeOpts) {
	if opts == nil {
		opts = &PostProcessDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}

	p.p.Call("dispose", args...)
}

// GetCamera calls the GetCamera method on the PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#getcamera
func (p *PostProcess) GetCamera() *Camera {

	retVal := p.p.Call("getCamera")
	return CameraFromJSObject(retVal, p.ctx)
}

// GetClassName calls the GetClassName method on the PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#getclassname
func (p *PostProcess) GetClassName() string {

	retVal := p.p.Call("getClassName")
	return retVal.String()
}

// GetEffect calls the GetEffect method on the PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#geteffect
func (p *PostProcess) GetEffect() *Effect {

	retVal := p.p.Call("getEffect")
	return EffectFromJSObject(retVal, p.ctx)
}

// GetEffectName calls the GetEffectName method on the PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#geteffectname
func (p *PostProcess) GetEffectName() string {

	retVal := p.p.Call("getEffectName")
	return retVal.String()
}

// GetEngine calls the GetEngine method on the PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#getengine
func (p *PostProcess) GetEngine() *Engine {

	retVal := p.p.Call("getEngine")
	return EngineFromJSObject(retVal, p.ctx)
}

// IsReady calls the IsReady method on the PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#isready
func (p *PostProcess) IsReady() bool {

	retVal := p.p.Call("isReady")
	return retVal.Bool()
}

// IsReusable calls the IsReusable method on the PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#isreusable
func (p *PostProcess) IsReusable() bool {

	retVal := p.p.Call("isReusable")
	return retVal.Bool()
}

// MarkTextureDirty calls the MarkTextureDirty method on the PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#marktexturedirty
func (p *PostProcess) MarkTextureDirty() {

	p.p.Call("markTextureDirty")
}

// ShareOutputWith calls the ShareOutputWith method on the PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#shareoutputwith
func (p *PostProcess) ShareOutputWith(postProcess *PostProcess) *PostProcess {

	args := make([]interface{}, 0, 1+0)

	args = append(args, postProcess.JSObject())

	retVal := p.p.Call("shareOutputWith", args...)
	return PostProcessFromJSObject(retVal, p.ctx)
}

// PostProcessUpdateEffectOpts contains optional parameters for PostProcess.UpdateEffect.
type PostProcessUpdateEffectOpts struct {
	Defines         *string
	Uniforms        *string
	Samplers        *string
	IndexParameters *interface{}
	OnCompiled      func()
	OnError         func()
}

// UpdateEffect calls the UpdateEffect method on the PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#updateeffect
func (p *PostProcess) UpdateEffect(opts *PostProcessUpdateEffectOpts) {
	if opts == nil {
		opts = &PostProcessUpdateEffectOpts{}
	}

	args := make([]interface{}, 0, 0+6)

	if opts.Defines == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Defines)
	}
	if opts.Uniforms == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Uniforms)
	}
	if opts.Samplers == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Samplers)
	}
	if opts.IndexParameters == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.IndexParameters)
	}
	if opts.OnCompiled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnCompiled)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}

	p.p.Call("updateEffect", args...)
}

// UseOwnOutput calls the UseOwnOutput method on the PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#useownoutput
func (p *PostProcess) UseOwnOutput() {

	p.p.Call("useOwnOutput")
}

// AdaptScaleToCurrentViewport returns the AdaptScaleToCurrentViewport property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#adaptscaletocurrentviewport
func (p *PostProcess) AdaptScaleToCurrentViewport() bool {
	retVal := p.p.Get("adaptScaleToCurrentViewport")
	return retVal.Bool()
}

// SetAdaptScaleToCurrentViewport sets the AdaptScaleToCurrentViewport property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#adaptscaletocurrentviewport
func (p *PostProcess) SetAdaptScaleToCurrentViewport(adaptScaleToCurrentViewport bool) *PostProcess {
	p.p.Set("adaptScaleToCurrentViewport", adaptScaleToCurrentViewport)
	return p
}

// AlphaConstants returns the AlphaConstants property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#alphaconstants
func (p *PostProcess) AlphaConstants() *Color4 {
	retVal := p.p.Get("alphaConstants")
	return Color4FromJSObject(retVal, p.ctx)
}

// SetAlphaConstants sets the AlphaConstants property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#alphaconstants
func (p *PostProcess) SetAlphaConstants(alphaConstants *Color4) *PostProcess {
	p.p.Set("alphaConstants", alphaConstants.JSObject())
	return p
}

// AlphaMode returns the AlphaMode property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#alphamode
func (p *PostProcess) AlphaMode() float64 {
	retVal := p.p.Get("alphaMode")
	return retVal.Float()
}

// SetAlphaMode sets the AlphaMode property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#alphamode
func (p *PostProcess) SetAlphaMode(alphaMode float64) *PostProcess {
	p.p.Set("alphaMode", alphaMode)
	return p
}

// AlwaysForcePOT returns the AlwaysForcePOT property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#alwaysforcepot
func (p *PostProcess) AlwaysForcePOT() bool {
	retVal := p.p.Get("alwaysForcePOT")
	return retVal.Bool()
}

// SetAlwaysForcePOT sets the AlwaysForcePOT property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#alwaysforcepot
func (p *PostProcess) SetAlwaysForcePOT(alwaysForcePOT bool) *PostProcess {
	p.p.Set("alwaysForcePOT", alwaysForcePOT)
	return p
}

// Animations returns the Animations property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#animations
func (p *PostProcess) Animations() *Animation {
	retVal := p.p.Get("animations")
	return AnimationFromJSObject(retVal, p.ctx)
}

// SetAnimations sets the Animations property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#animations
func (p *PostProcess) SetAnimations(animations *Animation) *PostProcess {
	p.p.Set("animations", animations.JSObject())
	return p
}

// AspectRatio returns the AspectRatio property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#aspectratio
func (p *PostProcess) AspectRatio() float64 {
	retVal := p.p.Get("aspectRatio")
	return retVal.Float()
}

// SetAspectRatio sets the AspectRatio property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#aspectratio
func (p *PostProcess) SetAspectRatio(aspectRatio float64) *PostProcess {
	p.p.Set("aspectRatio", aspectRatio)
	return p
}

// AutoClear returns the AutoClear property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#autoclear
func (p *PostProcess) AutoClear() bool {
	retVal := p.p.Get("autoClear")
	return retVal.Bool()
}

// SetAutoClear sets the AutoClear property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#autoclear
func (p *PostProcess) SetAutoClear(autoClear bool) *PostProcess {
	p.p.Set("autoClear", autoClear)
	return p
}

// ClearColor returns the ClearColor property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#clearcolor
func (p *PostProcess) ClearColor() *Color4 {
	retVal := p.p.Get("clearColor")
	return Color4FromJSObject(retVal, p.ctx)
}

// SetClearColor sets the ClearColor property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#clearcolor
func (p *PostProcess) SetClearColor(clearColor *Color4) *PostProcess {
	p.p.Set("clearColor", clearColor.JSObject())
	return p
}

// EnablePixelPerfectMode returns the EnablePixelPerfectMode property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#enablepixelperfectmode
func (p *PostProcess) EnablePixelPerfectMode() bool {
	retVal := p.p.Get("enablePixelPerfectMode")
	return retVal.Bool()
}

// SetEnablePixelPerfectMode sets the EnablePixelPerfectMode property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#enablepixelperfectmode
func (p *PostProcess) SetEnablePixelPerfectMode(enablePixelPerfectMode bool) *PostProcess {
	p.p.Set("enablePixelPerfectMode", enablePixelPerfectMode)
	return p
}

// ForceFullscreenViewport returns the ForceFullscreenViewport property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#forcefullscreenviewport
func (p *PostProcess) ForceFullscreenViewport() bool {
	retVal := p.p.Get("forceFullscreenViewport")
	return retVal.Bool()
}

// SetForceFullscreenViewport sets the ForceFullscreenViewport property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#forcefullscreenviewport
func (p *PostProcess) SetForceFullscreenViewport(forceFullscreenViewport bool) *PostProcess {
	p.p.Set("forceFullscreenViewport", forceFullscreenViewport)
	return p
}

// Height returns the Height property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#height
func (p *PostProcess) Height() float64 {
	retVal := p.p.Get("height")
	return retVal.Float()
}

// SetHeight sets the Height property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#height
func (p *PostProcess) SetHeight(height float64) *PostProcess {
	p.p.Set("height", height)
	return p
}

// InputTexture returns the InputTexture property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#inputtexture
func (p *PostProcess) InputTexture() *InternalTexture {
	retVal := p.p.Get("inputTexture")
	return InternalTextureFromJSObject(retVal, p.ctx)
}

// SetInputTexture sets the InputTexture property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#inputtexture
func (p *PostProcess) SetInputTexture(inputTexture *InternalTexture) *PostProcess {
	p.p.Set("inputTexture", inputTexture.JSObject())
	return p
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#inspectablecustomproperties
func (p *PostProcess) InspectableCustomProperties() *IInspectable {
	retVal := p.p.Get("inspectableCustomProperties")
	return IInspectableFromJSObject(retVal, p.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#inspectablecustomproperties
func (p *PostProcess) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *PostProcess {
	p.p.Set("inspectableCustomProperties", inspectableCustomProperties.JSObject())
	return p
}

// IsSupported returns the IsSupported property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#issupported
func (p *PostProcess) IsSupported() bool {
	retVal := p.p.Get("isSupported")
	return retVal.Bool()
}

// SetIsSupported sets the IsSupported property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#issupported
func (p *PostProcess) SetIsSupported(isSupported bool) *PostProcess {
	p.p.Set("isSupported", isSupported)
	return p
}

// Name returns the Name property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#name
func (p *PostProcess) Name() string {
	retVal := p.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#name
func (p *PostProcess) SetName(name string) *PostProcess {
	p.p.Set("name", name)
	return p
}

// OnActivate returns the OnActivate property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onactivate
func (p *PostProcess) OnActivate() js.Value {
	retVal := p.p.Get("onActivate")
	return retVal
}

// SetOnActivate sets the OnActivate property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onactivate
func (p *PostProcess) SetOnActivate(onActivate func()) *PostProcess {
	p.p.Set("onActivate", js.FuncOf(func(this js.Value, args []js.Value) interface{} { onActivate(); return nil }))
	return p
}

// OnActivateObservable returns the OnActivateObservable property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onactivateobservable
func (p *PostProcess) OnActivateObservable() *Observable {
	retVal := p.p.Get("onActivateObservable")
	return ObservableFromJSObject(retVal, p.ctx)
}

// SetOnActivateObservable sets the OnActivateObservable property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onactivateobservable
func (p *PostProcess) SetOnActivateObservable(onActivateObservable *Observable) *PostProcess {
	p.p.Set("onActivateObservable", onActivateObservable.JSObject())
	return p
}

// OnAfterRender returns the OnAfterRender property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onafterrender
func (p *PostProcess) OnAfterRender() js.Value {
	retVal := p.p.Get("onAfterRender")
	return retVal
}

// SetOnAfterRender sets the OnAfterRender property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onafterrender
func (p *PostProcess) SetOnAfterRender(onAfterRender func()) *PostProcess {
	p.p.Set("onAfterRender", js.FuncOf(func(this js.Value, args []js.Value) interface{} { onAfterRender(); return nil }))
	return p
}

// OnAfterRenderObservable returns the OnAfterRenderObservable property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onafterrenderobservable
func (p *PostProcess) OnAfterRenderObservable() *Observable {
	retVal := p.p.Get("onAfterRenderObservable")
	return ObservableFromJSObject(retVal, p.ctx)
}

// SetOnAfterRenderObservable sets the OnAfterRenderObservable property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onafterrenderobservable
func (p *PostProcess) SetOnAfterRenderObservable(onAfterRenderObservable *Observable) *PostProcess {
	p.p.Set("onAfterRenderObservable", onAfterRenderObservable.JSObject())
	return p
}

// OnApply returns the OnApply property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onapply
func (p *PostProcess) OnApply() js.Value {
	retVal := p.p.Get("onApply")
	return retVal
}

// SetOnApply sets the OnApply property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onapply
func (p *PostProcess) SetOnApply(onApply func()) *PostProcess {
	p.p.Set("onApply", js.FuncOf(func(this js.Value, args []js.Value) interface{} { onApply(); return nil }))
	return p
}

// OnApplyObservable returns the OnApplyObservable property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onapplyobservable
func (p *PostProcess) OnApplyObservable() *Observable {
	retVal := p.p.Get("onApplyObservable")
	return ObservableFromJSObject(retVal, p.ctx)
}

// SetOnApplyObservable sets the OnApplyObservable property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onapplyobservable
func (p *PostProcess) SetOnApplyObservable(onApplyObservable *Observable) *PostProcess {
	p.p.Set("onApplyObservable", onApplyObservable.JSObject())
	return p
}

// OnBeforeRender returns the OnBeforeRender property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onbeforerender
func (p *PostProcess) OnBeforeRender() js.Value {
	retVal := p.p.Get("onBeforeRender")
	return retVal
}

// SetOnBeforeRender sets the OnBeforeRender property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onbeforerender
func (p *PostProcess) SetOnBeforeRender(onBeforeRender func()) *PostProcess {
	p.p.Set("onBeforeRender", js.FuncOf(func(this js.Value, args []js.Value) interface{} { onBeforeRender(); return nil }))
	return p
}

// OnBeforeRenderObservable returns the OnBeforeRenderObservable property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onbeforerenderobservable
func (p *PostProcess) OnBeforeRenderObservable() *Observable {
	retVal := p.p.Get("onBeforeRenderObservable")
	return ObservableFromJSObject(retVal, p.ctx)
}

// SetOnBeforeRenderObservable sets the OnBeforeRenderObservable property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onbeforerenderobservable
func (p *PostProcess) SetOnBeforeRenderObservable(onBeforeRenderObservable *Observable) *PostProcess {
	p.p.Set("onBeforeRenderObservable", onBeforeRenderObservable.JSObject())
	return p
}

// OnSizeChanged returns the OnSizeChanged property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onsizechanged
func (p *PostProcess) OnSizeChanged() js.Value {
	retVal := p.p.Get("onSizeChanged")
	return retVal
}

// SetOnSizeChanged sets the OnSizeChanged property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onsizechanged
func (p *PostProcess) SetOnSizeChanged(onSizeChanged func()) *PostProcess {
	p.p.Set("onSizeChanged", js.FuncOf(func(this js.Value, args []js.Value) interface{} { onSizeChanged(); return nil }))
	return p
}

// OnSizeChangedObservable returns the OnSizeChangedObservable property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onsizechangedobservable
func (p *PostProcess) OnSizeChangedObservable() *Observable {
	retVal := p.p.Get("onSizeChangedObservable")
	return ObservableFromJSObject(retVal, p.ctx)
}

// SetOnSizeChangedObservable sets the OnSizeChangedObservable property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#onsizechangedobservable
func (p *PostProcess) SetOnSizeChangedObservable(onSizeChangedObservable *Observable) *PostProcess {
	p.p.Set("onSizeChangedObservable", onSizeChangedObservable.JSObject())
	return p
}

// RenderTargetSamplingMode returns the RenderTargetSamplingMode property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#rendertargetsamplingmode
func (p *PostProcess) RenderTargetSamplingMode() float64 {
	retVal := p.p.Get("renderTargetSamplingMode")
	return retVal.Float()
}

// SetRenderTargetSamplingMode sets the RenderTargetSamplingMode property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#rendertargetsamplingmode
func (p *PostProcess) SetRenderTargetSamplingMode(renderTargetSamplingMode float64) *PostProcess {
	p.p.Set("renderTargetSamplingMode", renderTargetSamplingMode)
	return p
}

// Samples returns the Samples property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#samples
func (p *PostProcess) Samples() float64 {
	retVal := p.p.Get("samples")
	return retVal.Float()
}

// SetSamples sets the Samples property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#samples
func (p *PostProcess) SetSamples(samples float64) *PostProcess {
	p.p.Set("samples", samples)
	return p
}

// ScaleMode returns the ScaleMode property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#scalemode
func (p *PostProcess) ScaleMode() float64 {
	retVal := p.p.Get("scaleMode")
	return retVal.Float()
}

// SetScaleMode sets the ScaleMode property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#scalemode
func (p *PostProcess) SetScaleMode(scaleMode float64) *PostProcess {
	p.p.Set("scaleMode", scaleMode)
	return p
}

// TexelSize returns the TexelSize property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#texelsize
func (p *PostProcess) TexelSize() *Vector2 {
	retVal := p.p.Get("texelSize")
	return Vector2FromJSObject(retVal, p.ctx)
}

// SetTexelSize sets the TexelSize property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#texelsize
func (p *PostProcess) SetTexelSize(texelSize *Vector2) *PostProcess {
	p.p.Set("texelSize", texelSize.JSObject())
	return p
}

// UniqueId returns the UniqueId property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#uniqueid
func (p *PostProcess) UniqueId() float64 {
	retVal := p.p.Get("uniqueId")
	return retVal.Float()
}

// SetUniqueId sets the UniqueId property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#uniqueid
func (p *PostProcess) SetUniqueId(uniqueId float64) *PostProcess {
	p.p.Set("uniqueId", uniqueId)
	return p
}

// Width returns the Width property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#width
func (p *PostProcess) Width() float64 {
	retVal := p.p.Get("width")
	return retVal.Float()
}

// SetWidth sets the Width property of class PostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess#width
func (p *PostProcess) SetWidth(width float64) *PostProcess {
	p.p.Set("width", width)
	return p
}
