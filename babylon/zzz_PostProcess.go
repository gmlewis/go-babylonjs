// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PostProcess represents a babylon.js PostProcess.
// PostProcess can be used to apply a shader to a texture after it has been rendered
// See &lt;a href=&#34;https://doc.babylonjs.com/how_to/how_to_use_postprocesses&#34;&gt;https://doc.babylonjs.com/how_to/how_to_use_postprocesses&lt;/a&gt;
type PostProcess struct{ p js.Value }

// JSObject returns the underlying js.Value.
func (p *PostProcess) JSObject() js.Value { return p.p }

// PostProcess returns a PostProcess JavaScript class.
func (ba *Babylon) PostProcess() *PostProcess {
	p := ba.ctx.Get("PostProcess")
	return PostProcessFromJSObject(p)
}

// PostProcessFromJSObject returns a wrapped PostProcess JavaScript class.
func PostProcessFromJSObject(p js.Value) *PostProcess {
	return &PostProcess{p: p}
}

// NewPostProcessOpts contains optional parameters for NewPostProcess.
type NewPostProcessOpts struct {
	SamplingMode *JSFloat64

	Engine *Engine

	Reusable *JSBool

	Defines *JSString

	TextureType *JSFloat64

	VertexUrl *JSString

	IndexParameters *interface{}

	BlockCompilation *JSBool
}

// NewPostProcess returns a new PostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocess
func (ba *Babylon) NewPostProcess(name string, fragmentUrl string, parameters string, samplers string, options float64, camera *Camera, opts *NewPostProcessOpts) *PostProcess {
	if opts == nil {
		opts = &NewPostProcessOpts{}
	}

	p := ba.ctx.Get("PostProcess").New(name, fragmentUrl, parameters, samplers, options, camera.JSObject(), opts.SamplingMode.JSObject(), opts.Engine.JSObject(), opts.Reusable.JSObject(), opts.Defines.JSObject(), opts.TextureType.JSObject(), opts.VertexUrl.JSObject(), opts.IndexParameters, opts.BlockCompilation.JSObject())
	return PostProcessFromJSObject(p)
}

// TODO: methods
