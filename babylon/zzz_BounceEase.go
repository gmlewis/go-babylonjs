// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BounceEase represents a babylon.js BounceEase.
// Easing function with a bouncing shape (see link below).
//
// See: https://easings.net/#easeInBounce
// See: http://doc.babylonjs.com/babylon101/animations#easing-functions
type BounceEase struct {
	*EasingFunction
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BounceEase) JSObject() js.Value { return b.p }

// BounceEase returns a BounceEase JavaScript class.
func (ba *Babylon) BounceEase() *BounceEase {
	p := ba.ctx.Get("BounceEase")
	return BounceEaseFromJSObject(p, ba.ctx)
}

// BounceEaseFromJSObject returns a wrapped BounceEase JavaScript class.
func BounceEaseFromJSObject(p js.Value, ctx js.Value) *BounceEase {
	return &BounceEase{EasingFunction: EasingFunctionFromJSObject(p, ctx), ctx: ctx}
}

// BounceEaseArrayToJSArray returns a JavaScript Array for the wrapped array.
func BounceEaseArrayToJSArray(array []*BounceEase) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewBounceEaseOpts contains optional parameters for NewBounceEase.
type NewBounceEaseOpts struct {
	Bounces    *float64
	Bounciness *float64
}

// NewBounceEase returns a new BounceEase object.
//
// https://doc.babylonjs.com/api/classes/babylon.bounceease
func (ba *Babylon) NewBounceEase(opts *NewBounceEaseOpts) *BounceEase {
	if opts == nil {
		opts = &NewBounceEaseOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Bounces == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Bounces)
	}
	if opts.Bounciness == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Bounciness)
	}

	p := ba.ctx.Get("BounceEase").New(args...)
	return BounceEaseFromJSObject(p, ba.ctx)
}

// Bounces returns the Bounces property of class BounceEase.
//
// https://doc.babylonjs.com/api/classes/babylon.bounceease#bounces
func (b *BounceEase) Bounces() float64 {
	retVal := b.p.Get("bounces")
	return retVal.Float()
}

// SetBounces sets the Bounces property of class BounceEase.
//
// https://doc.babylonjs.com/api/classes/babylon.bounceease#bounces
func (b *BounceEase) SetBounces(bounces float64) *BounceEase {
	b.p.Set("bounces", bounces)
	return b
}

// Bounciness returns the Bounciness property of class BounceEase.
//
// https://doc.babylonjs.com/api/classes/babylon.bounceease#bounciness
func (b *BounceEase) Bounciness() float64 {
	retVal := b.p.Get("bounciness")
	return retVal.Float()
}

// SetBounciness sets the Bounciness property of class BounceEase.
//
// https://doc.babylonjs.com/api/classes/babylon.bounceease#bounciness
func (b *BounceEase) SetBounciness(bounciness float64) *BounceEase {
	b.p.Set("bounciness", bounciness)
	return b
}
