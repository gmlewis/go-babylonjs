// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// AmmoJSPlugin represents a babylon.js AmmoJSPlugin.
// AmmoJS Physics plugin
//
// See: https://github.com/kripken/ammo.js/
type AmmoJSPlugin struct{ p js.Value }

// JSObject returns the underlying js.Value.
func (a *AmmoJSPlugin) JSObject() js.Value { return a.p }

// AmmoJSPlugin returns a AmmoJSPlugin JavaScript class.
func (b *Babylon) AmmoJSPlugin() *AmmoJSPlugin {
	p := b.ctx.Get("AmmoJSPlugin")
	return AmmoJSPluginFromJSObject(p)
}

// AmmoJSPluginFromJSObject returns a wrapped AmmoJSPlugin JavaScript class.
func AmmoJSPluginFromJSObject(p js.Value) *AmmoJSPlugin {
	return &AmmoJSPlugin{p: p}
}

// NewAmmoJSPluginOpts contains optional parameters for NewAmmoJSPlugin.
type NewAmmoJSPluginOpts struct {
	_useDeltaForWorldStep *bool

	AmmoInjection *interface{}

	OverlappingPairCache *interface{}
}

// NewAmmoJSPlugin returns a new AmmoJSPlugin object.
//
// https://doc.babylonjs.com/api/classes/babylon.ammojsplugin
func (b *Babylon) NewAmmoJSPlugin(opts *NewAmmoJSPluginOpts) *AmmoJSPlugin {
	if opts == nil {
		opts = &NewAmmoJSPluginOpts{}
	}

	p := b.ctx.Get("AmmoJSPlugin").New(opts._useDeltaForWorldStep.JSObject(), opts.AmmoInjection, opts.OverlappingPairCache)
	return AmmoJSPluginFromJSObject(p)
}

// TODO: methods
