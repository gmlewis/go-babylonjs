// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TransformBlock represents a babylon.js TransformBlock.
// Block used to transform a vector (2, 3 or 4) with a matrix. It will generate a Vector4
type TransformBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (t *TransformBlock) JSObject() js.Value { return t.p }

// TransformBlock returns a TransformBlock JavaScript class.
func (ba *Babylon) TransformBlock() *TransformBlock {
	p := ba.ctx.Get("TransformBlock")
	return TransformBlockFromJSObject(p, ba.ctx)
}

// TransformBlockFromJSObject returns a wrapped TransformBlock JavaScript class.
func TransformBlockFromJSObject(p js.Value, ctx js.Value) *TransformBlock {
	return &TransformBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// TransformBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func TransformBlockArrayToJSArray(array []*TransformBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewTransformBlock returns a new TransformBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.transformblock#constructor
func (ba *Babylon) NewTransformBlock(name string) *TransformBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("TransformBlock").New(args...)
	return TransformBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the TransformBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.transformblock#getclassname
func (t *TransformBlock) GetClassName() string {

	retVal := t.p.Call("getClassName")
	return retVal.String()
}

// Serialize calls the Serialize method on the TransformBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.transformblock#serialize
func (t *TransformBlock) Serialize() js.Value {

	retVal := t.p.Call("serialize")
	return retVal
}

// _deserialize calls the _deserialize method on the TransformBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.transformblock#_deserialize
func (t *TransformBlock) _deserialize(serializationObject JSObject, scene *Scene, rootUrl string) {

	args := make([]interface{}, 0, 3+0)

	if serializationObject == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, serializationObject.JSObject())
	}

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	args = append(args, rootUrl)

	t.p.Call("_deserialize", args...)
}

// ComplementW returns the ComplementW property of class TransformBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.transformblock#complementw
func (t *TransformBlock) ComplementW() float64 {
	retVal := t.p.Get("complementW")
	return retVal.Float()
}

// SetComplementW sets the ComplementW property of class TransformBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.transformblock#complementw
func (t *TransformBlock) SetComplementW(complementW float64) *TransformBlock {
	t.p.Set("complementW", complementW)
	return t
}

// ComplementZ returns the ComplementZ property of class TransformBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.transformblock#complementz
func (t *TransformBlock) ComplementZ() float64 {
	retVal := t.p.Get("complementZ")
	return retVal.Float()
}

// SetComplementZ sets the ComplementZ property of class TransformBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.transformblock#complementz
func (t *TransformBlock) SetComplementZ(complementZ float64) *TransformBlock {
	t.p.Set("complementZ", complementZ)
	return t
}

// Output returns the Output property of class TransformBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.transformblock#output
func (t *TransformBlock) Output() *NodeMaterialConnectionPoint {
	retVal := t.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, t.ctx)
}

// SetOutput sets the Output property of class TransformBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.transformblock#output
func (t *TransformBlock) SetOutput(output *NodeMaterialConnectionPoint) *TransformBlock {
	t.p.Set("output", output.JSObject())
	return t
}

// Transform returns the Transform property of class TransformBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.transformblock#transform
func (t *TransformBlock) Transform() *NodeMaterialConnectionPoint {
	retVal := t.p.Get("transform")
	return NodeMaterialConnectionPointFromJSObject(retVal, t.ctx)
}

// SetTransform sets the Transform property of class TransformBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.transformblock#transform
func (t *TransformBlock) SetTransform(transform *NodeMaterialConnectionPoint) *TransformBlock {
	t.p.Set("transform", transform.JSObject())
	return t
}

// Vector returns the Vector property of class TransformBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.transformblock#vector
func (t *TransformBlock) Vector() *NodeMaterialConnectionPoint {
	retVal := t.p.Get("vector")
	return NodeMaterialConnectionPointFromJSObject(retVal, t.ctx)
}

// SetVector sets the Vector property of class TransformBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.transformblock#vector
func (t *TransformBlock) SetVector(vector *NodeMaterialConnectionPoint) *TransformBlock {
	t.p.Set("vector", vector.JSObject())
	return t
}
