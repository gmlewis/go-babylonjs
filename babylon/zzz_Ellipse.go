// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Ellipse represents a babylon.js Ellipse.
// Class used to create 2D ellipse containers
type Ellipse struct {
	*Container
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *Ellipse) JSObject() js.Value { return e.p }

// Ellipse returns a Ellipse JavaScript class.
func (gui *GUI) Ellipse() *Ellipse {
	p := gui.ctx.Get("Ellipse")
	return EllipseFromJSObject(p, gui.ctx)
}

// EllipseFromJSObject returns a wrapped Ellipse JavaScript class.
func EllipseFromJSObject(p js.Value, ctx js.Value) *Ellipse {
	return &Ellipse{Container: ContainerFromJSObject(p, ctx), ctx: ctx}
}

// EllipseArrayToJSArray returns a JavaScript Array for the wrapped array.
func EllipseArrayToJSArray(array []*Ellipse) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewEllipseOpts contains optional parameters for NewEllipse.
type NewEllipseOpts struct {
	Name *string
}

// NewEllipse returns a new Ellipse object.
//
// https://doc.babylonjs.com/api/classes/babylon.ellipse
func (gui *GUI) NewEllipse(opts *NewEllipseOpts) *Ellipse {
	if opts == nil {
		opts = &NewEllipseOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}

	p := gui.ctx.Get("Ellipse").New(args...)
	return EllipseFromJSObject(p, gui.ctx)
}

// Name returns the Name property of class Ellipse.
//
// https://doc.babylonjs.com/api/classes/babylon.ellipse#name
func (e *Ellipse) Name() string {
	retVal := e.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class Ellipse.
//
// https://doc.babylonjs.com/api/classes/babylon.ellipse#name
func (e *Ellipse) SetName(name string) *Ellipse {
	e.p.Set("name", name)
	return e
}

// Thickness returns the Thickness property of class Ellipse.
//
// https://doc.babylonjs.com/api/classes/babylon.ellipse#thickness
func (e *Ellipse) Thickness() float64 {
	retVal := e.p.Get("thickness")
	return retVal.Float()
}

// SetThickness sets the Thickness property of class Ellipse.
//
// https://doc.babylonjs.com/api/classes/babylon.ellipse#thickness
func (e *Ellipse) SetThickness(thickness float64) *Ellipse {
	e.p.Set("thickness", thickness)
	return e
}
