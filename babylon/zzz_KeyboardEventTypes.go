// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// KeyboardEventTypes represents a babylon.js KeyboardEventTypes.
// Gather the list of keyboard event types as constants.
type KeyboardEventTypes struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (k *KeyboardEventTypes) JSObject() js.Value { return k.p }

// KeyboardEventTypes returns a KeyboardEventTypes JavaScript class.
func (ba *Babylon) KeyboardEventTypes() *KeyboardEventTypes {
	p := ba.ctx.Get("KeyboardEventTypes")
	return KeyboardEventTypesFromJSObject(p, ba.ctx)
}

// KeyboardEventTypesFromJSObject returns a wrapped KeyboardEventTypes JavaScript class.
func KeyboardEventTypesFromJSObject(p js.Value, ctx js.Value) *KeyboardEventTypes {
	return &KeyboardEventTypes{p: p, ctx: ctx}
}

// KeyboardEventTypesArrayToJSArray returns a JavaScript Array for the wrapped array.
func KeyboardEventTypesArrayToJSArray(array []*KeyboardEventTypes) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// KEYDOWN returns the KEYDOWN property of class KeyboardEventTypes.
//
// https://doc.babylonjs.com/api/classes/babylon.keyboardeventtypes#keydown
func (k *KeyboardEventTypes) KEYDOWN() float64 {
	retVal := k.p.Get("KEYDOWN")
	return retVal.Float()
}

// SetKEYDOWN sets the KEYDOWN property of class KeyboardEventTypes.
//
// https://doc.babylonjs.com/api/classes/babylon.keyboardeventtypes#keydown
func (k *KeyboardEventTypes) SetKEYDOWN(KEYDOWN float64) *KeyboardEventTypes {
	k.p.Set("KEYDOWN", KEYDOWN)
	return k
}

// KEYUP returns the KEYUP property of class KeyboardEventTypes.
//
// https://doc.babylonjs.com/api/classes/babylon.keyboardeventtypes#keyup
func (k *KeyboardEventTypes) KEYUP() float64 {
	retVal := k.p.Get("KEYUP")
	return retVal.Float()
}

// SetKEYUP sets the KEYUP property of class KeyboardEventTypes.
//
// https://doc.babylonjs.com/api/classes/babylon.keyboardeventtypes#keyup
func (k *KeyboardEventTypes) SetKEYUP(KEYUP float64) *KeyboardEventTypes {
	k.p.Set("KEYUP", KEYUP)
	return k
}
