// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ExecuteCodeAction represents a babylon.js ExecuteCodeAction.
// This defines an action responsible to run code (external event) once triggered.

//
// See: http://doc.babylonjs.com/how_to/how_to_use_actions
type ExecuteCodeAction struct{ *Action }

// JSObject returns the underlying js.Value.
func (e *ExecuteCodeAction) JSObject() js.Value { return e.p }

// ExecuteCodeAction returns a ExecuteCodeAction JavaScript class.
func (b *Babylon) ExecuteCodeAction() *ExecuteCodeAction {
	p := b.ctx.Get("ExecuteCodeAction")
	return ExecuteCodeActionFromJSObject(p)
}

// ExecuteCodeActionFromJSObject returns a wrapped ExecuteCodeAction JavaScript class.
func ExecuteCodeActionFromJSObject(p js.Value) *ExecuteCodeAction {
	return &ExecuteCodeAction{ActionFromJSObject(p)}
}

// NewExecuteCodeAction returns a new ExecuteCodeAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.executecodeaction
func (b *Babylon) NewExecuteCodeAction(todo parameters) *ExecuteCodeAction {
	p := b.ctx.Get("ExecuteCodeAction").New(todo)
	return ExecuteCodeActionFromJSObject(p)
}

// TODO: methods
