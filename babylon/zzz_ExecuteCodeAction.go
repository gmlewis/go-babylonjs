// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ExecuteCodeAction represents a babylon.js ExecuteCodeAction.
// This defines an action responsible to run code (external event) once triggered.
//
// See: http://doc.babylonjs.com/how_to/how_to_use_actions
type ExecuteCodeAction struct {
	*Action
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *ExecuteCodeAction) JSObject() js.Value { return e.p }

// ExecuteCodeAction returns a ExecuteCodeAction JavaScript class.
func (ba *Babylon) ExecuteCodeAction() *ExecuteCodeAction {
	p := ba.ctx.Get("ExecuteCodeAction")
	return ExecuteCodeActionFromJSObject(p, ba.ctx)
}

// ExecuteCodeActionFromJSObject returns a wrapped ExecuteCodeAction JavaScript class.
func ExecuteCodeActionFromJSObject(p js.Value, ctx js.Value) *ExecuteCodeAction {
	return &ExecuteCodeAction{Action: ActionFromJSObject(p, ctx), ctx: ctx}
}

// NewExecuteCodeActionOpts contains optional parameters for NewExecuteCodeAction.
type NewExecuteCodeActionOpts struct {
	Condition *Condition
}

// NewExecuteCodeAction returns a new ExecuteCodeAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.executecodeaction
func (ba *Babylon) NewExecuteCodeAction(triggerOptions interface{}, jsFunc func(), opts *NewExecuteCodeActionOpts) *ExecuteCodeAction {
	if opts == nil {
		opts = &NewExecuteCodeActionOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, triggerOptions)
	args = append(args, jsFunc)

	if opts.Condition == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Condition.JSObject())
	}

	p := ba.ctx.Get("ExecuteCodeAction").New(args...)
	return ExecuteCodeActionFromJSObject(p, ba.ctx)
}

// Execute calls the Execute method on the ExecuteCodeAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.executecodeaction#execute
func (e *ExecuteCodeAction) Execute(evt *ActionEvent) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, evt.JSObject())

	e.p.Call("execute", args...)
}

// GetTriggerParameter calls the GetTriggerParameter method on the ExecuteCodeAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.executecodeaction#gettriggerparameter
func (e *ExecuteCodeAction) GetTriggerParameter() interface{} {

	args := make([]interface{}, 0, 0+0)

	retVal := e.p.Call("getTriggerParameter", args...)
	return retVal
}

// Serialize calls the Serialize method on the ExecuteCodeAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.executecodeaction#serialize
func (e *ExecuteCodeAction) Serialize(parent interface{}) interface{} {

	args := make([]interface{}, 0, 1+0)

	args = append(args, parent)

	retVal := e.p.Call("serialize", args...)
	return retVal
}

// SkipToNextActiveAction calls the SkipToNextActiveAction method on the ExecuteCodeAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.executecodeaction#skiptonextactiveaction
func (e *ExecuteCodeAction) SkipToNextActiveAction() {

	args := make([]interface{}, 0, 0+0)

	e.p.Call("skipToNextActiveAction", args...)
}

// Then calls the Then method on the ExecuteCodeAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.executecodeaction#then
func (e *ExecuteCodeAction) Then(action *Action) *Action {

	args := make([]interface{}, 0, 1+0)

	args = append(args, action.JSObject())

	retVal := e.p.Call("then", args...)
	return ActionFromJSObject(retVal, e.ctx)
}

/*

// Func returns the Func property of class ExecuteCodeAction.
//
// https://doc.babylonjs.com/api/classes/babylon.executecodeaction#func
func (e *ExecuteCodeAction) Func(jsFunc func()) *ExecuteCodeAction {
	p := ba.ctx.Get("ExecuteCodeAction").New(jsFunc)
	return ExecuteCodeActionFromJSObject(p, ba.ctx)
}

// SetFunc sets the Func property of class ExecuteCodeAction.
//
// https://doc.babylonjs.com/api/classes/babylon.executecodeaction#func
func (e *ExecuteCodeAction) SetFunc(jsFunc func()) *ExecuteCodeAction {
	p := ba.ctx.Get("ExecuteCodeAction").New(jsFunc)
	return ExecuteCodeActionFromJSObject(p, ba.ctx)
}

// OnBeforeExecuteObservable returns the OnBeforeExecuteObservable property of class ExecuteCodeAction.
//
// https://doc.babylonjs.com/api/classes/babylon.executecodeaction#onbeforeexecuteobservable
func (e *ExecuteCodeAction) OnBeforeExecuteObservable(onBeforeExecuteObservable *Observable) *ExecuteCodeAction {
	p := ba.ctx.Get("ExecuteCodeAction").New(onBeforeExecuteObservable.JSObject())
	return ExecuteCodeActionFromJSObject(p, ba.ctx)
}

// SetOnBeforeExecuteObservable sets the OnBeforeExecuteObservable property of class ExecuteCodeAction.
//
// https://doc.babylonjs.com/api/classes/babylon.executecodeaction#onbeforeexecuteobservable
func (e *ExecuteCodeAction) SetOnBeforeExecuteObservable(onBeforeExecuteObservable *Observable) *ExecuteCodeAction {
	p := ba.ctx.Get("ExecuteCodeAction").New(onBeforeExecuteObservable.JSObject())
	return ExecuteCodeActionFromJSObject(p, ba.ctx)
}

// Trigger returns the Trigger property of class ExecuteCodeAction.
//
// https://doc.babylonjs.com/api/classes/babylon.executecodeaction#trigger
func (e *ExecuteCodeAction) Trigger(trigger float64) *ExecuteCodeAction {
	p := ba.ctx.Get("ExecuteCodeAction").New(trigger)
	return ExecuteCodeActionFromJSObject(p, ba.ctx)
}

// SetTrigger sets the Trigger property of class ExecuteCodeAction.
//
// https://doc.babylonjs.com/api/classes/babylon.executecodeaction#trigger
func (e *ExecuteCodeAction) SetTrigger(trigger float64) *ExecuteCodeAction {
	p := ba.ctx.Get("ExecuteCodeAction").New(trigger)
	return ExecuteCodeActionFromJSObject(p, ba.ctx)
}

// TriggerOptions returns the TriggerOptions property of class ExecuteCodeAction.
//
// https://doc.babylonjs.com/api/classes/babylon.executecodeaction#triggeroptions
func (e *ExecuteCodeAction) TriggerOptions(triggerOptions interface{}) *ExecuteCodeAction {
	p := ba.ctx.Get("ExecuteCodeAction").New(triggerOptions)
	return ExecuteCodeActionFromJSObject(p, ba.ctx)
}

// SetTriggerOptions sets the TriggerOptions property of class ExecuteCodeAction.
//
// https://doc.babylonjs.com/api/classes/babylon.executecodeaction#triggeroptions
func (e *ExecuteCodeAction) SetTriggerOptions(triggerOptions interface{}) *ExecuteCodeAction {
	p := ba.ctx.Get("ExecuteCodeAction").New(triggerOptions)
	return ExecuteCodeActionFromJSObject(p, ba.ctx)
}

*/
