// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DotBlock represents a babylon.js DotBlock.
// Block used to apply a dot product between 2 vectors
type DotBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DotBlock) JSObject() js.Value { return d.p }

// DotBlock returns a DotBlock JavaScript class.
func (ba *Babylon) DotBlock() *DotBlock {
	p := ba.ctx.Get("DotBlock")
	return DotBlockFromJSObject(p, ba.ctx)
}

// DotBlockFromJSObject returns a wrapped DotBlock JavaScript class.
func DotBlockFromJSObject(p js.Value, ctx js.Value) *DotBlock {
	return &DotBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// DotBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func DotBlockArrayToJSArray(array []*DotBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDotBlock returns a new DotBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.dotblock
func (ba *Babylon) NewDotBlock(name string) *DotBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("DotBlock").New(args...)
	return DotBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the DotBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.dotblock#getclassname
func (d *DotBlock) GetClassName() string {

	retVal := d.p.Call("getClassName")
	return retVal.String()
}

/*

// Left returns the Left property of class DotBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.dotblock#left
func (d *DotBlock) Left(left *NodeMaterialConnectionPoint) *DotBlock {
	p := ba.ctx.Get("DotBlock").New(left.JSObject())
	return DotBlockFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class DotBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.dotblock#left
func (d *DotBlock) SetLeft(left *NodeMaterialConnectionPoint) *DotBlock {
	p := ba.ctx.Get("DotBlock").New(left.JSObject())
	return DotBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class DotBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.dotblock#output
func (d *DotBlock) Output(output *NodeMaterialConnectionPoint) *DotBlock {
	p := ba.ctx.Get("DotBlock").New(output.JSObject())
	return DotBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class DotBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.dotblock#output
func (d *DotBlock) SetOutput(output *NodeMaterialConnectionPoint) *DotBlock {
	p := ba.ctx.Get("DotBlock").New(output.JSObject())
	return DotBlockFromJSObject(p, ba.ctx)
}

// Right returns the Right property of class DotBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.dotblock#right
func (d *DotBlock) Right(right *NodeMaterialConnectionPoint) *DotBlock {
	p := ba.ctx.Get("DotBlock").New(right.JSObject())
	return DotBlockFromJSObject(p, ba.ctx)
}

// SetRight sets the Right property of class DotBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.dotblock#right
func (d *DotBlock) SetRight(right *NodeMaterialConnectionPoint) *DotBlock {
	p := ba.ctx.Get("DotBlock").New(right.JSObject())
	return DotBlockFromJSObject(p, ba.ctx)
}

*/
