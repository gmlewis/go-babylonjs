// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FireMaterial represents a babylon.js FireMaterial.
//
type FireMaterial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FireMaterial) JSObject() js.Value { return f.p }

// FireMaterial returns a FireMaterial JavaScript class.
func (ba *Babylon) FireMaterial() *FireMaterial {
	p := ba.ctx.Get("FireMaterial")
	return FireMaterialFromJSObject(p, ba.ctx)
}

// FireMaterialFromJSObject returns a wrapped FireMaterial JavaScript class.
func FireMaterialFromJSObject(p js.Value, ctx js.Value) *FireMaterial {
	return &FireMaterial{p: p, ctx: ctx}
}

// FireMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func FireMaterialArrayToJSArray(array []*FireMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewFireMaterial returns a new FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial
func (ba *Babylon) NewFireMaterial(name string, scene *Scene) *FireMaterial {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("FireMaterial").New(args...)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// FireMaterialBindOpts contains optional parameters for FireMaterial.Bind.
type FireMaterialBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#bind
func (f *FireMaterial) Bind(world *Matrix, opts *FireMaterialBindOpts) {
	if opts == nil {
		opts = &FireMaterialBindOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, world.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	f.p.Call("bind", args...)
}

// BindForSubMesh calls the BindForSubMesh method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#bindforsubmesh
func (f *FireMaterial) BindForSubMesh(world *Matrix, mesh *Mesh, subMesh *SubMesh) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, world.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	f.p.Call("bindForSubMesh", args...)
}

// BindOnlyNormalMatrix calls the BindOnlyNormalMatrix method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#bindonlynormalmatrix
func (f *FireMaterial) BindOnlyNormalMatrix(normalMatrix *Matrix) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, normalMatrix.JSObject())

	f.p.Call("bindOnlyNormalMatrix", args...)
}

// BindOnlyWorldMatrix calls the BindOnlyWorldMatrix method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#bindonlyworldmatrix
func (f *FireMaterial) BindOnlyWorldMatrix(world *Matrix) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, world.JSObject())

	f.p.Call("bindOnlyWorldMatrix", args...)
}

// BindSceneUniformBuffer calls the BindSceneUniformBuffer method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#bindsceneuniformbuffer
func (f *FireMaterial) BindSceneUniformBuffer(effect *Effect, sceneUbo *UniformBuffer) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, sceneUbo.JSObject())

	f.p.Call("bindSceneUniformBuffer", args...)
}

// BindView calls the BindView method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#bindview
func (f *FireMaterial) BindView(effect *Effect) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, effect.JSObject())

	f.p.Call("bindView", args...)
}

// BindViewProjection calls the BindViewProjection method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#bindviewprojection
func (f *FireMaterial) BindViewProjection(effect *Effect) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, effect.JSObject())

	f.p.Call("bindViewProjection", args...)
}

// Clone calls the Clone method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#clone
func (f *FireMaterial) Clone(name string) *FireMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := f.p.Call("clone", args...)
	return FireMaterialFromJSObject(retVal, f.ctx)
}

// FireMaterialDisposeOpts contains optional parameters for FireMaterial.Dispose.
type FireMaterialDisposeOpts struct {
	ForceDisposeEffect *bool
}

// Dispose calls the Dispose method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#dispose
func (f *FireMaterial) Dispose(opts *FireMaterialDisposeOpts) {
	if opts == nil {
		opts = &FireMaterialDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForceDisposeEffect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeEffect)
	}

	f.p.Call("dispose", args...)
}

// FireMaterialForceCompilationOpts contains optional parameters for FireMaterial.ForceCompilation.
type FireMaterialForceCompilationOpts struct {
	OnCompiled *func()
	Options    js.Value
	OnError    *func()
}

// ForceCompilation calls the ForceCompilation method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#forcecompilation
func (f *FireMaterial) ForceCompilation(mesh *AbstractMesh, opts *FireMaterialForceCompilationOpts) {
	if opts == nil {
		opts = &FireMaterialForceCompilationOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, mesh.JSObject())

	if opts.OnCompiled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnCompiled)
	}
	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}

	f.p.Call("forceCompilation", args...)
}

// FireMaterialForceCompilationAsyncOpts contains optional parameters for FireMaterial.ForceCompilationAsync.
type FireMaterialForceCompilationAsyncOpts struct {
	Options js.Value
}

// ForceCompilationAsync calls the ForceCompilationAsync method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#forcecompilationasync
func (f *FireMaterial) ForceCompilationAsync(mesh *AbstractMesh, opts *FireMaterialForceCompilationAsyncOpts) *Promise {
	if opts == nil {
		opts = &FireMaterialForceCompilationAsyncOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, mesh.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := f.p.Call("forceCompilationAsync", args...)
	return PromiseFromJSObject(retVal, f.ctx)
}

// Freeze calls the Freeze method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#freeze
func (f *FireMaterial) Freeze() {

	f.p.Call("freeze")
}

// GetActiveTextures calls the GetActiveTextures method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#getactivetextures
func (f *FireMaterial) GetActiveTextures() *BaseTexture {

	retVal := f.p.Call("getActiveTextures")
	return BaseTextureFromJSObject(retVal, f.ctx)
}

// GetAlphaTestTexture calls the GetAlphaTestTexture method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#getalphatesttexture
func (f *FireMaterial) GetAlphaTestTexture() *BaseTexture {

	retVal := f.p.Call("getAlphaTestTexture")
	return BaseTextureFromJSObject(retVal, f.ctx)
}

// GetAnimatables calls the GetAnimatables method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#getanimatables
func (f *FireMaterial) GetAnimatables() js.Value {

	retVal := f.p.Call("getAnimatables")
	return retVal
}

// GetBindedMeshes calls the GetBindedMeshes method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#getbindedmeshes
func (f *FireMaterial) GetBindedMeshes() *AbstractMesh {

	retVal := f.p.Call("getBindedMeshes")
	return AbstractMeshFromJSObject(retVal, f.ctx)
}

// GetClassName calls the GetClassName method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#getclassname
func (f *FireMaterial) GetClassName() string {

	retVal := f.p.Call("getClassName")
	return retVal.String()
}

// GetEffect calls the GetEffect method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#geteffect
func (f *FireMaterial) GetEffect() *Effect {

	retVal := f.p.Call("getEffect")
	return EffectFromJSObject(retVal, f.ctx)
}

// GetScene calls the GetScene method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#getscene
func (f *FireMaterial) GetScene() *Scene {

	retVal := f.p.Call("getScene")
	return SceneFromJSObject(retVal, f.ctx)
}

// HasTexture calls the HasTexture method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#hastexture
func (f *FireMaterial) HasTexture(texture *BaseTexture) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	retVal := f.p.Call("hasTexture", args...)
	return retVal.Bool()
}

// FireMaterialIsReadyOpts contains optional parameters for FireMaterial.IsReady.
type FireMaterialIsReadyOpts struct {
	Mesh         *AbstractMesh
	UseInstances *bool
}

// IsReady calls the IsReady method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#isready
func (f *FireMaterial) IsReady(opts *FireMaterialIsReadyOpts) bool {
	if opts == nil {
		opts = &FireMaterialIsReadyOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}
	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := f.p.Call("isReady", args...)
	return retVal.Bool()
}

// FireMaterialIsReadyForSubMeshOpts contains optional parameters for FireMaterial.IsReadyForSubMesh.
type FireMaterialIsReadyForSubMeshOpts struct {
	UseInstances *bool
}

// IsReadyForSubMesh calls the IsReadyForSubMesh method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#isreadyforsubmesh
func (f *FireMaterial) IsReadyForSubMesh(mesh *AbstractMesh, subMesh *SubMesh, opts *FireMaterialIsReadyForSubMeshOpts) bool {
	if opts == nil {
		opts = &FireMaterialIsReadyForSubMeshOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := f.p.Call("isReadyForSubMesh", args...)
	return retVal.Bool()
}

// MarkAsDirty calls the MarkAsDirty method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#markasdirty
func (f *FireMaterial) MarkAsDirty(flag float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, flag)

	f.p.Call("markAsDirty", args...)
}

// MarkDirty calls the MarkDirty method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#markdirty
func (f *FireMaterial) MarkDirty() {

	f.p.Call("markDirty")
}

// NeedAlphaBlending calls the NeedAlphaBlending method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#needalphablending
func (f *FireMaterial) NeedAlphaBlending() bool {

	retVal := f.p.Call("needAlphaBlending")
	return retVal.Bool()
}

// NeedAlphaBlendingForMesh calls the NeedAlphaBlendingForMesh method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#needalphablendingformesh
func (f *FireMaterial) NeedAlphaBlendingForMesh(mesh *AbstractMesh) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	retVal := f.p.Call("needAlphaBlendingForMesh", args...)
	return retVal.Bool()
}

// NeedAlphaTesting calls the NeedAlphaTesting method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#needalphatesting
func (f *FireMaterial) NeedAlphaTesting() bool {

	retVal := f.p.Call("needAlphaTesting")
	return retVal.Bool()
}

// Parse calls the Parse method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#parse
func (f *FireMaterial) Parse(source interface{}, scene *Scene, rootUrl string) *FireMaterial {

	args := make([]interface{}, 0, 3+0)

	args = append(args, source)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := f.p.Call("Parse", args...)
	return FireMaterialFromJSObject(retVal, f.ctx)
}

// Serialize calls the Serialize method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#serialize
func (f *FireMaterial) Serialize() interface{} {

	retVal := f.p.Call("serialize")
	return retVal
}

// FireMaterialToStringOpts contains optional parameters for FireMaterial.ToString.
type FireMaterialToStringOpts struct {
	FullDetails *bool
}

// ToString calls the ToString method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#tostring
func (f *FireMaterial) ToString(opts *FireMaterialToStringOpts) string {
	if opts == nil {
		opts = &FireMaterialToStringOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.FullDetails == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FullDetails)
	}

	retVal := f.p.Call("toString", args...)
	return retVal.String()
}

// Unbind calls the Unbind method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#unbind
func (f *FireMaterial) Unbind() {

	f.p.Call("unbind")
}

// Unfreeze calls the Unfreeze method on the FireMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#unfreeze
func (f *FireMaterial) Unfreeze() {

	f.p.Call("unfreeze")
}

/*

// AllDirtyFlag returns the AllDirtyFlag property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#alldirtyflag
func (f *FireMaterial) AllDirtyFlag(AllDirtyFlag float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(AllDirtyFlag)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetAllDirtyFlag sets the AllDirtyFlag property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#alldirtyflag
func (f *FireMaterial) SetAllDirtyFlag(AllDirtyFlag float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(AllDirtyFlag)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// AllowShaderHotSwapping returns the AllowShaderHotSwapping property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#allowshaderhotswapping
func (f *FireMaterial) AllowShaderHotSwapping(allowShaderHotSwapping bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(allowShaderHotSwapping)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetAllowShaderHotSwapping sets the AllowShaderHotSwapping property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#allowshaderhotswapping
func (f *FireMaterial) SetAllowShaderHotSwapping(allowShaderHotSwapping bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(allowShaderHotSwapping)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// Alpha returns the Alpha property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#alpha
func (f *FireMaterial) Alpha(alpha float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(alpha)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetAlpha sets the Alpha property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#alpha
func (f *FireMaterial) SetAlpha(alpha float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(alpha)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// AlphaMode returns the AlphaMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#alphamode
func (f *FireMaterial) AlphaMode(alphaMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(alphaMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetAlphaMode sets the AlphaMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#alphamode
func (f *FireMaterial) SetAlphaMode(alphaMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(alphaMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// Animations returns the Animations property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#animations
func (f *FireMaterial) Animations(animations []*Animation) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(animations)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#animations
func (f *FireMaterial) SetAnimations(animations []*Animation) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(animations)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// AttributesDirtyFlag returns the AttributesDirtyFlag property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#attributesdirtyflag
func (f *FireMaterial) AttributesDirtyFlag(AttributesDirtyFlag float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(AttributesDirtyFlag)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetAttributesDirtyFlag sets the AttributesDirtyFlag property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#attributesdirtyflag
func (f *FireMaterial) SetAttributesDirtyFlag(AttributesDirtyFlag float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(AttributesDirtyFlag)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// BackFaceCulling returns the BackFaceCulling property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#backfaceculling
func (f *FireMaterial) BackFaceCulling(backFaceCulling bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(backFaceCulling)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetBackFaceCulling sets the BackFaceCulling property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#backfaceculling
func (f *FireMaterial) SetBackFaceCulling(backFaceCulling bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(backFaceCulling)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// CheckReadyOnEveryCall returns the CheckReadyOnEveryCall property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#checkreadyoneverycall
func (f *FireMaterial) CheckReadyOnEveryCall(checkReadyOnEveryCall bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(checkReadyOnEveryCall)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetCheckReadyOnEveryCall sets the CheckReadyOnEveryCall property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#checkreadyoneverycall
func (f *FireMaterial) SetCheckReadyOnEveryCall(checkReadyOnEveryCall bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(checkReadyOnEveryCall)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// CheckReadyOnlyOnce returns the CheckReadyOnlyOnce property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#checkreadyonlyonce
func (f *FireMaterial) CheckReadyOnlyOnce(checkReadyOnlyOnce bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(checkReadyOnlyOnce)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetCheckReadyOnlyOnce sets the CheckReadyOnlyOnce property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#checkreadyonlyonce
func (f *FireMaterial) SetCheckReadyOnlyOnce(checkReadyOnlyOnce bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(checkReadyOnlyOnce)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// ClockWiseSideOrientation returns the ClockWiseSideOrientation property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#clockwisesideorientation
func (f *FireMaterial) ClockWiseSideOrientation(ClockWiseSideOrientation float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(ClockWiseSideOrientation)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetClockWiseSideOrientation sets the ClockWiseSideOrientation property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#clockwisesideorientation
func (f *FireMaterial) SetClockWiseSideOrientation(ClockWiseSideOrientation float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(ClockWiseSideOrientation)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// CounterClockWiseSideOrientation returns the CounterClockWiseSideOrientation property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#counterclockwisesideorientation
func (f *FireMaterial) CounterClockWiseSideOrientation(CounterClockWiseSideOrientation float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(CounterClockWiseSideOrientation)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetCounterClockWiseSideOrientation sets the CounterClockWiseSideOrientation property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#counterclockwisesideorientation
func (f *FireMaterial) SetCounterClockWiseSideOrientation(CounterClockWiseSideOrientation float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(CounterClockWiseSideOrientation)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// DepthFunction returns the DepthFunction property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#depthfunction
func (f *FireMaterial) DepthFunction(depthFunction float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(depthFunction)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetDepthFunction sets the DepthFunction property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#depthfunction
func (f *FireMaterial) SetDepthFunction(depthFunction float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(depthFunction)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// DiffuseColor returns the DiffuseColor property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#diffusecolor
func (f *FireMaterial) DiffuseColor(diffuseColor *Color3) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(diffuseColor.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseColor sets the DiffuseColor property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#diffusecolor
func (f *FireMaterial) SetDiffuseColor(diffuseColor *Color3) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(diffuseColor.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTexture returns the DiffuseTexture property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#diffusetexture
func (f *FireMaterial) DiffuseTexture(diffuseTexture *BaseTexture) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(diffuseTexture.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTexture sets the DiffuseTexture property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#diffusetexture
func (f *FireMaterial) SetDiffuseTexture(diffuseTexture *BaseTexture) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(diffuseTexture.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// DisableDepthWrite returns the DisableDepthWrite property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#disabledepthwrite
func (f *FireMaterial) DisableDepthWrite(disableDepthWrite bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(disableDepthWrite)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetDisableDepthWrite sets the DisableDepthWrite property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#disabledepthwrite
func (f *FireMaterial) SetDisableDepthWrite(disableDepthWrite bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(disableDepthWrite)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// DistortionTexture returns the DistortionTexture property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#distortiontexture
func (f *FireMaterial) DistortionTexture(distortionTexture *BaseTexture) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(distortionTexture.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetDistortionTexture sets the DistortionTexture property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#distortiontexture
func (f *FireMaterial) SetDistortionTexture(distortionTexture *BaseTexture) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(distortionTexture.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// DoNotSerialize returns the DoNotSerialize property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#donotserialize
func (f *FireMaterial) DoNotSerialize(doNotSerialize bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(doNotSerialize)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetDoNotSerialize sets the DoNotSerialize property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#donotserialize
func (f *FireMaterial) SetDoNotSerialize(doNotSerialize bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(doNotSerialize)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// FillMode returns the FillMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#fillmode
func (f *FireMaterial) FillMode(fillMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(fillMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetFillMode sets the FillMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#fillmode
func (f *FireMaterial) SetFillMode(fillMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(fillMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// FogEnabled returns the FogEnabled property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#fogenabled
func (f *FireMaterial) FogEnabled(fogEnabled bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(fogEnabled)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetFogEnabled sets the FogEnabled property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#fogenabled
func (f *FireMaterial) SetFogEnabled(fogEnabled bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(fogEnabled)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// ForceDepthWrite returns the ForceDepthWrite property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#forcedepthwrite
func (f *FireMaterial) ForceDepthWrite(forceDepthWrite bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(forceDepthWrite)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetForceDepthWrite sets the ForceDepthWrite property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#forcedepthwrite
func (f *FireMaterial) SetForceDepthWrite(forceDepthWrite bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(forceDepthWrite)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// FresnelDirtyFlag returns the FresnelDirtyFlag property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#fresneldirtyflag
func (f *FireMaterial) FresnelDirtyFlag(FresnelDirtyFlag float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(FresnelDirtyFlag)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetFresnelDirtyFlag sets the FresnelDirtyFlag property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#fresneldirtyflag
func (f *FireMaterial) SetFresnelDirtyFlag(FresnelDirtyFlag float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(FresnelDirtyFlag)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// GetRenderTargetTextures returns the GetRenderTargetTextures property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#getrendertargettextures
func (f *FireMaterial) GetRenderTargetTextures(getRenderTargetTextures func()) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {getRenderTargetTextures(); return nil}))
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetGetRenderTargetTextures sets the GetRenderTargetTextures property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#getrendertargettextures
func (f *FireMaterial) SetGetRenderTargetTextures(getRenderTargetTextures func()) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {getRenderTargetTextures(); return nil}))
	return FireMaterialFromJSObject(p, ba.ctx)
}

// HasRenderTargetTextures returns the HasRenderTargetTextures property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#hasrendertargettextures
func (f *FireMaterial) HasRenderTargetTextures(hasRenderTargetTextures bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(hasRenderTargetTextures)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetHasRenderTargetTextures sets the HasRenderTargetTextures property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#hasrendertargettextures
func (f *FireMaterial) SetHasRenderTargetTextures(hasRenderTargetTextures bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(hasRenderTargetTextures)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// Id returns the Id property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#id
func (f *FireMaterial) Id(id string) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(id)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetId sets the Id property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#id
func (f *FireMaterial) SetId(id string) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(id)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#inspectablecustomproperties
func (f *FireMaterial) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(inspectableCustomProperties.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#inspectablecustomproperties
func (f *FireMaterial) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(inspectableCustomProperties.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// IsFrozen returns the IsFrozen property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#isfrozen
func (f *FireMaterial) IsFrozen(isFrozen bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(isFrozen)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetIsFrozen sets the IsFrozen property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#isfrozen
func (f *FireMaterial) SetIsFrozen(isFrozen bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(isFrozen)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// LightDirtyFlag returns the LightDirtyFlag property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#lightdirtyflag
func (f *FireMaterial) LightDirtyFlag(LightDirtyFlag float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(LightDirtyFlag)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetLightDirtyFlag sets the LightDirtyFlag property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#lightdirtyflag
func (f *FireMaterial) SetLightDirtyFlag(LightDirtyFlag float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(LightDirtyFlag)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// LineListDrawMode returns the LineListDrawMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#linelistdrawmode
func (f *FireMaterial) LineListDrawMode(LineListDrawMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(LineListDrawMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetLineListDrawMode sets the LineListDrawMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#linelistdrawmode
func (f *FireMaterial) SetLineListDrawMode(LineListDrawMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(LineListDrawMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// LineLoopDrawMode returns the LineLoopDrawMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#lineloopdrawmode
func (f *FireMaterial) LineLoopDrawMode(LineLoopDrawMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(LineLoopDrawMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetLineLoopDrawMode sets the LineLoopDrawMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#lineloopdrawmode
func (f *FireMaterial) SetLineLoopDrawMode(LineLoopDrawMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(LineLoopDrawMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// LineStripDrawMode returns the LineStripDrawMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#linestripdrawmode
func (f *FireMaterial) LineStripDrawMode(LineStripDrawMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(LineStripDrawMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetLineStripDrawMode sets the LineStripDrawMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#linestripdrawmode
func (f *FireMaterial) SetLineStripDrawMode(LineStripDrawMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(LineStripDrawMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#metadata
func (f *FireMaterial) Metadata(metadata interface{}) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(metadata)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#metadata
func (f *FireMaterial) SetMetadata(metadata interface{}) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(metadata)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// MiscDirtyFlag returns the MiscDirtyFlag property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#miscdirtyflag
func (f *FireMaterial) MiscDirtyFlag(MiscDirtyFlag float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(MiscDirtyFlag)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetMiscDirtyFlag sets the MiscDirtyFlag property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#miscdirtyflag
func (f *FireMaterial) SetMiscDirtyFlag(MiscDirtyFlag float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(MiscDirtyFlag)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#name
func (f *FireMaterial) Name(name string) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(name)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#name
func (f *FireMaterial) SetName(name string) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(name)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// NeedDepthPrePass returns the NeedDepthPrePass property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#needdepthprepass
func (f *FireMaterial) NeedDepthPrePass(needDepthPrePass bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(needDepthPrePass)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetNeedDepthPrePass sets the NeedDepthPrePass property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#needdepthprepass
func (f *FireMaterial) SetNeedDepthPrePass(needDepthPrePass bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(needDepthPrePass)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// OnBind returns the OnBind property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#onbind
func (f *FireMaterial) OnBind(onBind func()) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onBind(); return nil}))
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetOnBind sets the OnBind property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#onbind
func (f *FireMaterial) SetOnBind(onBind func()) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onBind(); return nil}))
	return FireMaterialFromJSObject(p, ba.ctx)
}

// OnBindObservable returns the OnBindObservable property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#onbindobservable
func (f *FireMaterial) OnBindObservable(onBindObservable *Observable) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(onBindObservable.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetOnBindObservable sets the OnBindObservable property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#onbindobservable
func (f *FireMaterial) SetOnBindObservable(onBindObservable *Observable) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(onBindObservable.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// OnCompiled returns the OnCompiled property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#oncompiled
func (f *FireMaterial) OnCompiled(onCompiled func()) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onCompiled(); return nil}))
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetOnCompiled sets the OnCompiled property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#oncompiled
func (f *FireMaterial) SetOnCompiled(onCompiled func()) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onCompiled(); return nil}))
	return FireMaterialFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#ondispose
func (f *FireMaterial) OnDispose(onDispose func()) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#ondispose
func (f *FireMaterial) SetOnDispose(onDispose func()) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return FireMaterialFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#ondisposeobservable
func (f *FireMaterial) OnDisposeObservable(onDisposeObservable *Observable) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(onDisposeObservable.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#ondisposeobservable
func (f *FireMaterial) SetOnDisposeObservable(onDisposeObservable *Observable) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(onDisposeObservable.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// OnError returns the OnError property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#onerror
func (f *FireMaterial) OnError(onError func()) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onError(); return nil}))
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetOnError sets the OnError property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#onerror
func (f *FireMaterial) SetOnError(onError func()) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onError(); return nil}))
	return FireMaterialFromJSObject(p, ba.ctx)
}

// OnUnBindObservable returns the OnUnBindObservable property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#onunbindobservable
func (f *FireMaterial) OnUnBindObservable(onUnBindObservable *Observable) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(onUnBindObservable.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetOnUnBindObservable sets the OnUnBindObservable property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#onunbindobservable
func (f *FireMaterial) SetOnUnBindObservable(onUnBindObservable *Observable) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(onUnBindObservable.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// OpacityTexture returns the OpacityTexture property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#opacitytexture
func (f *FireMaterial) OpacityTexture(opacityTexture *BaseTexture) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(opacityTexture.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetOpacityTexture sets the OpacityTexture property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#opacitytexture
func (f *FireMaterial) SetOpacityTexture(opacityTexture *BaseTexture) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(opacityTexture.JSObject())
	return FireMaterialFromJSObject(p, ba.ctx)
}

// PointFillMode returns the PointFillMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#pointfillmode
func (f *FireMaterial) PointFillMode(PointFillMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(PointFillMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetPointFillMode sets the PointFillMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#pointfillmode
func (f *FireMaterial) SetPointFillMode(PointFillMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(PointFillMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// PointListDrawMode returns the PointListDrawMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#pointlistdrawmode
func (f *FireMaterial) PointListDrawMode(PointListDrawMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(PointListDrawMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetPointListDrawMode sets the PointListDrawMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#pointlistdrawmode
func (f *FireMaterial) SetPointListDrawMode(PointListDrawMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(PointListDrawMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// PointSize returns the PointSize property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#pointsize
func (f *FireMaterial) PointSize(pointSize float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(pointSize)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetPointSize sets the PointSize property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#pointsize
func (f *FireMaterial) SetPointSize(pointSize float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(pointSize)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// PointsCloud returns the PointsCloud property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#pointscloud
func (f *FireMaterial) PointsCloud(pointsCloud bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(pointsCloud)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetPointsCloud sets the PointsCloud property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#pointscloud
func (f *FireMaterial) SetPointsCloud(pointsCloud bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(pointsCloud)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#reserveddatastore
func (f *FireMaterial) ReservedDataStore(reservedDataStore interface{}) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(reservedDataStore)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#reserveddatastore
func (f *FireMaterial) SetReservedDataStore(reservedDataStore interface{}) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(reservedDataStore)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SeparateCullingPass returns the SeparateCullingPass property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#separatecullingpass
func (f *FireMaterial) SeparateCullingPass(separateCullingPass bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(separateCullingPass)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetSeparateCullingPass sets the SeparateCullingPass property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#separatecullingpass
func (f *FireMaterial) SetSeparateCullingPass(separateCullingPass bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(separateCullingPass)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SideOrientation returns the SideOrientation property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#sideorientation
func (f *FireMaterial) SideOrientation(sideOrientation float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(sideOrientation)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetSideOrientation sets the SideOrientation property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#sideorientation
func (f *FireMaterial) SetSideOrientation(sideOrientation float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(sideOrientation)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// Speed returns the Speed property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#speed
func (f *FireMaterial) Speed(speed float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(speed)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetSpeed sets the Speed property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#speed
func (f *FireMaterial) SetSpeed(speed float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(speed)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// State returns the State property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#state
func (f *FireMaterial) State(state string) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(state)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetState sets the State property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#state
func (f *FireMaterial) SetState(state string) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(state)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// TextureDirtyFlag returns the TextureDirtyFlag property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#texturedirtyflag
func (f *FireMaterial) TextureDirtyFlag(TextureDirtyFlag float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(TextureDirtyFlag)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetTextureDirtyFlag sets the TextureDirtyFlag property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#texturedirtyflag
func (f *FireMaterial) SetTextureDirtyFlag(TextureDirtyFlag float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(TextureDirtyFlag)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// TriangleFanDrawMode returns the TriangleFanDrawMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#trianglefandrawmode
func (f *FireMaterial) TriangleFanDrawMode(TriangleFanDrawMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(TriangleFanDrawMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetTriangleFanDrawMode sets the TriangleFanDrawMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#trianglefandrawmode
func (f *FireMaterial) SetTriangleFanDrawMode(TriangleFanDrawMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(TriangleFanDrawMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// TriangleFillMode returns the TriangleFillMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#trianglefillmode
func (f *FireMaterial) TriangleFillMode(TriangleFillMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(TriangleFillMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetTriangleFillMode sets the TriangleFillMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#trianglefillmode
func (f *FireMaterial) SetTriangleFillMode(TriangleFillMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(TriangleFillMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// TriangleStripDrawMode returns the TriangleStripDrawMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#trianglestripdrawmode
func (f *FireMaterial) TriangleStripDrawMode(TriangleStripDrawMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(TriangleStripDrawMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetTriangleStripDrawMode sets the TriangleStripDrawMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#trianglestripdrawmode
func (f *FireMaterial) SetTriangleStripDrawMode(TriangleStripDrawMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(TriangleStripDrawMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#uniqueid
func (f *FireMaterial) UniqueId(uniqueId float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(uniqueId)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#uniqueid
func (f *FireMaterial) SetUniqueId(uniqueId float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(uniqueId)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// WireFrameFillMode returns the WireFrameFillMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#wireframefillmode
func (f *FireMaterial) WireFrameFillMode(WireFrameFillMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(WireFrameFillMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetWireFrameFillMode sets the WireFrameFillMode property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#wireframefillmode
func (f *FireMaterial) SetWireFrameFillMode(WireFrameFillMode float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(WireFrameFillMode)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// Wireframe returns the Wireframe property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#wireframe
func (f *FireMaterial) Wireframe(wireframe bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(wireframe)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetWireframe sets the Wireframe property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#wireframe
func (f *FireMaterial) SetWireframe(wireframe bool) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(wireframe)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// ZOffset returns the ZOffset property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#zoffset
func (f *FireMaterial) ZOffset(zOffset float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(zOffset)
	return FireMaterialFromJSObject(p, ba.ctx)
}

// SetZOffset sets the ZOffset property of class FireMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.firematerial#zoffset
func (f *FireMaterial) SetZOffset(zOffset float64) *FireMaterial {
	p := ba.ctx.Get("FireMaterial").New(zOffset)
	return FireMaterialFromJSObject(p, ba.ctx)
}

*/
