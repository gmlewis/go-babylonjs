// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CellMaterial represents a babylon.js CellMaterial.
//
type CellMaterial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *CellMaterial) JSObject() js.Value { return c.p }

// CellMaterial returns a CellMaterial JavaScript class.
func (ba *Babylon) CellMaterial() *CellMaterial {
	p := ba.ctx.Get("CellMaterial")
	return CellMaterialFromJSObject(p, ba.ctx)
}

// CellMaterialFromJSObject returns a wrapped CellMaterial JavaScript class.
func CellMaterialFromJSObject(p js.Value, ctx js.Value) *CellMaterial {
	return &CellMaterial{p: p, ctx: ctx}
}

// CellMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func CellMaterialArrayToJSArray(array []*CellMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewCellMaterial returns a new CellMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial
func (ba *Babylon) NewCellMaterial(name string, scene *Scene) *CellMaterial {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("CellMaterial").New(args...)
	return CellMaterialFromJSObject(p, ba.ctx)
}

// BindForSubMesh calls the BindForSubMesh method on the CellMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#bindforsubmesh
func (c *CellMaterial) BindForSubMesh(world *Matrix, mesh *Mesh, subMesh *SubMesh) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, world.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	c.p.Call("bindForSubMesh", args...)
}

// Clone calls the Clone method on the CellMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#clone
func (c *CellMaterial) Clone(name string) *CellMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := c.p.Call("clone", args...)
	return CellMaterialFromJSObject(retVal, c.ctx)
}

// CellMaterialDisposeOpts contains optional parameters for CellMaterial.Dispose.
type CellMaterialDisposeOpts struct {
	ForceDisposeEffect *bool
}

// Dispose calls the Dispose method on the CellMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#dispose
func (c *CellMaterial) Dispose(opts *CellMaterialDisposeOpts) {
	if opts == nil {
		opts = &CellMaterialDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForceDisposeEffect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeEffect)
	}

	c.p.Call("dispose", args...)
}

// GetActiveTextures calls the GetActiveTextures method on the CellMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#getactivetextures
func (c *CellMaterial) GetActiveTextures() *BaseTexture {

	retVal := c.p.Call("getActiveTextures")
	return BaseTextureFromJSObject(retVal, c.ctx)
}

// GetAlphaTestTexture calls the GetAlphaTestTexture method on the CellMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#getalphatesttexture
func (c *CellMaterial) GetAlphaTestTexture() *BaseTexture {

	retVal := c.p.Call("getAlphaTestTexture")
	return BaseTextureFromJSObject(retVal, c.ctx)
}

// GetAnimatables calls the GetAnimatables method on the CellMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#getanimatables
func (c *CellMaterial) GetAnimatables() *IAnimatable {

	retVal := c.p.Call("getAnimatables")
	return IAnimatableFromJSObject(retVal, c.ctx)
}

// GetClassName calls the GetClassName method on the CellMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#getclassname
func (c *CellMaterial) GetClassName() string {

	retVal := c.p.Call("getClassName")
	return retVal.String()
}

// HasTexture calls the HasTexture method on the CellMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#hastexture
func (c *CellMaterial) HasTexture(texture *BaseTexture) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	retVal := c.p.Call("hasTexture", args...)
	return retVal.Bool()
}

// CellMaterialIsReadyForSubMeshOpts contains optional parameters for CellMaterial.IsReadyForSubMesh.
type CellMaterialIsReadyForSubMeshOpts struct {
	UseInstances *bool
}

// IsReadyForSubMesh calls the IsReadyForSubMesh method on the CellMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#isreadyforsubmesh
func (c *CellMaterial) IsReadyForSubMesh(mesh *AbstractMesh, subMesh *SubMesh, opts *CellMaterialIsReadyForSubMeshOpts) bool {
	if opts == nil {
		opts = &CellMaterialIsReadyForSubMeshOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := c.p.Call("isReadyForSubMesh", args...)
	return retVal.Bool()
}

// NeedAlphaBlending calls the NeedAlphaBlending method on the CellMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#needalphablending
func (c *CellMaterial) NeedAlphaBlending() bool {

	retVal := c.p.Call("needAlphaBlending")
	return retVal.Bool()
}

// NeedAlphaTesting calls the NeedAlphaTesting method on the CellMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#needalphatesting
func (c *CellMaterial) NeedAlphaTesting() bool {

	retVal := c.p.Call("needAlphaTesting")
	return retVal.Bool()
}

// Parse calls the Parse method on the CellMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#parse
func (c *CellMaterial) Parse(source interface{}, scene *Scene, rootUrl string) *CellMaterial {

	args := make([]interface{}, 0, 3+0)

	args = append(args, source)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := c.p.Call("Parse", args...)
	return CellMaterialFromJSObject(retVal, c.ctx)
}

// Serialize calls the Serialize method on the CellMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#serialize
func (c *CellMaterial) Serialize() interface{} {

	retVal := c.p.Call("serialize")
	return retVal
}

// ComputeHighLevel returns the ComputeHighLevel property of class CellMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#computehighlevel
func (c *CellMaterial) ComputeHighLevel() bool {
	retVal := c.p.Get("computeHighLevel")
	return retVal.Bool()
}

// SetComputeHighLevel sets the ComputeHighLevel property of class CellMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#computehighlevel
func (c *CellMaterial) SetComputeHighLevel(computeHighLevel bool) *CellMaterial {
	c.p.Set("computeHighLevel", computeHighLevel)
	return c
}

// DiffuseColor returns the DiffuseColor property of class CellMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#diffusecolor
func (c *CellMaterial) DiffuseColor() *Color3 {
	retVal := c.p.Get("diffuseColor")
	return Color3FromJSObject(retVal, c.ctx)
}

// SetDiffuseColor sets the DiffuseColor property of class CellMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#diffusecolor
func (c *CellMaterial) SetDiffuseColor(diffuseColor *Color3) *CellMaterial {
	c.p.Set("diffuseColor", diffuseColor.JSObject())
	return c
}

// DiffuseTexture returns the DiffuseTexture property of class CellMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#diffusetexture
func (c *CellMaterial) DiffuseTexture() *BaseTexture {
	retVal := c.p.Get("diffuseTexture")
	return BaseTextureFromJSObject(retVal, c.ctx)
}

// SetDiffuseTexture sets the DiffuseTexture property of class CellMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#diffusetexture
func (c *CellMaterial) SetDiffuseTexture(diffuseTexture *BaseTexture) *CellMaterial {
	c.p.Set("diffuseTexture", diffuseTexture.JSObject())
	return c
}

// DisableLighting returns the DisableLighting property of class CellMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#disablelighting
func (c *CellMaterial) DisableLighting() bool {
	retVal := c.p.Get("disableLighting")
	return retVal.Bool()
}

// SetDisableLighting sets the DisableLighting property of class CellMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#disablelighting
func (c *CellMaterial) SetDisableLighting(disableLighting bool) *CellMaterial {
	c.p.Set("disableLighting", disableLighting)
	return c
}

// MaxSimultaneousLights returns the MaxSimultaneousLights property of class CellMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#maxsimultaneouslights
func (c *CellMaterial) MaxSimultaneousLights() float64 {
	retVal := c.p.Get("maxSimultaneousLights")
	return retVal.Float()
}

// SetMaxSimultaneousLights sets the MaxSimultaneousLights property of class CellMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#maxsimultaneouslights
func (c *CellMaterial) SetMaxSimultaneousLights(maxSimultaneousLights float64) *CellMaterial {
	c.p.Set("maxSimultaneousLights", maxSimultaneousLights)
	return c
}

// _computeHighLevel returns the _computeHighLevel property of class CellMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#_computehighlevel
func (c *CellMaterial) _computeHighLevel() bool {
	retVal := c.p.Get("_computeHighLevel")
	return retVal.Bool()
}

// Set_computeHighLevel sets the _computeHighLevel property of class CellMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.cellmaterial#_computehighlevel
func (c *CellMaterial) Set_computeHighLevel(_computeHighLevel bool) *CellMaterial {
	c.p.Set("_computeHighLevel", _computeHighLevel)
	return c
}
