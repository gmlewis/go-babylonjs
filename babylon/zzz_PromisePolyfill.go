// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PromisePolyfill represents a babylon.js PromisePolyfill.
// Helper class that provides a small promise polyfill
type PromisePolyfill struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PromisePolyfill) JSObject() js.Value { return p.p }

// PromisePolyfill returns a PromisePolyfill JavaScript class.
func (ba *Babylon) PromisePolyfill() *PromisePolyfill {
	p := ba.ctx.Get("PromisePolyfill")
	return PromisePolyfillFromJSObject(p, ba.ctx)
}

// PromisePolyfillFromJSObject returns a wrapped PromisePolyfill JavaScript class.
func PromisePolyfillFromJSObject(p js.Value, ctx js.Value) *PromisePolyfill {
	return &PromisePolyfill{p: p, ctx: ctx}
}

// PromisePolyfillApplyOpts contains optional parameters for PromisePolyfill.Apply.
type PromisePolyfillApplyOpts struct {
	Force *bool
}

// Apply calls the Apply method on the PromisePolyfill object.
//
// https://doc.babylonjs.com/api/classes/babylon.promisepolyfill#apply
func (p *PromisePolyfill) Apply(opts *PromisePolyfillApplyOpts) {
	if opts == nil {
		opts = &PromisePolyfillApplyOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Force == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Force)
	}

	p.p.Call("Apply", args...)
}

/*

 */
