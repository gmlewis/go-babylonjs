// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PostProcessRenderEffect represents a babylon.js PostProcessRenderEffect.
// This represents a set of one or more post processes in Babylon.
// A post process can be used to apply a shader to a texture after it is rendered.

//
// See: https://doc.babylonjs.com/how_to/how_to_use_postprocessrenderpipeline
type PostProcessRenderEffect struct{}

// JSObject returns the underlying js.Value.
func (p *PostProcessRenderEffect) JSObject() js.Value { return p.p }

// PostProcessRenderEffect returns a PostProcessRenderEffect JavaScript class.
func (b *Babylon) PostProcessRenderEffect() *PostProcessRenderEffect {
	p := b.ctx.Get("PostProcessRenderEffect")
	return PostProcessRenderEffectFromJSObject(p)
}

// PostProcessRenderEffectFromJSObject returns a wrapped PostProcessRenderEffect JavaScript class.
func PostProcessRenderEffectFromJSObject(p js.Value) *PostProcessRenderEffect {
	return &PostProcessRenderEffect{p: p}
}

// NewPostProcessRenderEffect returns a new PostProcessRenderEffect object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessrendereffect
func (b *Babylon) NewPostProcessRenderEffect(todo parameters) *PostProcessRenderEffect {
	p := b.ctx.Get("PostProcessRenderEffect").New(todo)
	return PostProcessRenderEffectFromJSObject(p)
}

// TODO: methods
