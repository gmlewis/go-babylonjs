// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PointLight represents a babylon.js PointLight.
// A point light is a light defined by an unique point in world space.
// The light is emitted in every direction from this point.
// A good example of a point light is a standard light bulb.
// Documentation: &lt;a href=&#34;https://doc.babylonjs.com/babylon101/lights&#34;&gt;https://doc.babylonjs.com/babylon101/lights&lt;/a&gt;
type PointLight struct {
	*ShadowLight
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PointLight) JSObject() js.Value { return p.p }

// PointLight returns a PointLight JavaScript class.
func (ba *Babylon) PointLight() *PointLight {
	p := ba.ctx.Get("PointLight")
	return PointLightFromJSObject(p, ba.ctx)
}

// PointLightFromJSObject returns a wrapped PointLight JavaScript class.
func PointLightFromJSObject(p js.Value, ctx js.Value) *PointLight {
	return &PointLight{ShadowLight: ShadowLightFromJSObject(p, ctx), ctx: ctx}
}

// NewPointLight returns a new PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight
func (ba *Babylon) NewPointLight(name string, position *Vector3, scene *Scene) *PointLight {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("PointLight").New(args...)
	return PointLightFromJSObject(p, ba.ctx)
}

// PointLightAddBehaviorOpts contains optional parameters for PointLight.AddBehavior.
type PointLightAddBehaviorOpts struct {
	AttachImmediately *Node
}

// AddBehavior calls the AddBehavior method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#addbehavior
func (p *PointLight) AddBehavior(behavior js.Value, opts *PointLightAddBehaviorOpts) *Node {
	if opts == nil {
		opts = &PointLightAddBehaviorOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, behavior)

	if opts.AttachImmediately == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.AttachImmediately.JSObject())
	}

	retVal := p.p.Call("addBehavior", args...)
	return NodeFromJSObject(retVal, p.ctx)
}

// AddNodeConstructor calls the AddNodeConstructor method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#addnodeconstructor
func (p *PointLight) AddNodeConstructor(jsType string, constructorFunc js.Value) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, jsType)
	args = append(args, constructorFunc)

	p.p.Call("AddNodeConstructor", args...)
}

// PointLightBeginAnimationOpts contains optional parameters for PointLight.BeginAnimation.
type PointLightBeginAnimationOpts struct {
	Loop           *bool
	SpeedRatio     *float64
	OnAnimationEnd *func()
}

// BeginAnimation calls the BeginAnimation method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#beginanimation
func (p *PointLight) BeginAnimation(name string, opts *PointLightBeginAnimationOpts) *Animatable {
	if opts == nil {
		opts = &PointLightBeginAnimationOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, name)

	if opts.Loop == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Loop)
	}
	if opts.SpeedRatio == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SpeedRatio)
	}
	if opts.OnAnimationEnd == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnAnimationEnd)
	}

	retVal := p.p.Call("beginAnimation", args...)
	return AnimatableFromJSObject(retVal, p.ctx)
}

// PointLightBindLightOpts contains optional parameters for PointLight.BindLight.
type PointLightBindLightOpts struct {
	UsePhysicalLightFalloff *bool
	RebuildInParallel       *bool
}

// BindLight calls the BindLight method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#bindlight
func (p *PointLight) BindLight(lightIndex float64, scene *Scene, effect *Effect, useSpecular bool, opts *PointLightBindLightOpts) {
	if opts == nil {
		opts = &PointLightBindLightOpts{}
	}

	args := make([]interface{}, 0, 4+2)

	args = append(args, lightIndex)
	args = append(args, scene.JSObject())
	args = append(args, effect.JSObject())
	args = append(args, useSpecular)

	if opts.UsePhysicalLightFalloff == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UsePhysicalLightFalloff)
	}
	if opts.RebuildInParallel == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RebuildInParallel)
	}

	p.p.Call("bindLight", args...)
}

// CanAffectMesh calls the CanAffectMesh method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#canaffectmesh
func (p *PointLight) CanAffectMesh(mesh *AbstractMesh) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	retVal := p.p.Call("canAffectMesh", args...)
	return retVal.Bool()
}

// Clone calls the Clone method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#clone
func (p *PointLight) Clone(name string) *Light {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := p.p.Call("clone", args...)
	return LightFromJSObject(retVal, p.ctx)
}

// CompareLightsPriority calls the CompareLightsPriority method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#comparelightspriority
func (p *PointLight) CompareLightsPriority(a *Light, b *Light) float64 {

	args := make([]interface{}, 0, 2+0)

	args = append(args, a.JSObject())
	args = append(args, b.JSObject())

	retVal := p.p.Call("CompareLightsPriority", args...)
	return retVal.Float()
}

// ComputeTransformedInformation calls the ComputeTransformedInformation method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#computetransformedinformation
func (p *PointLight) ComputeTransformedInformation() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("computeTransformedInformation", args...)
	return retVal.Bool()
}

// PointLightComputeWorldMatrixOpts contains optional parameters for PointLight.ComputeWorldMatrix.
type PointLightComputeWorldMatrixOpts struct {
	Force *bool
}

// ComputeWorldMatrix calls the ComputeWorldMatrix method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#computeworldmatrix
func (p *PointLight) ComputeWorldMatrix(opts *PointLightComputeWorldMatrixOpts) *Matrix {
	if opts == nil {
		opts = &PointLightComputeWorldMatrixOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Force == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Force)
	}

	retVal := p.p.Call("computeWorldMatrix", args...)
	return MatrixFromJSObject(retVal, p.ctx)
}

// PointLightConstructOpts contains optional parameters for PointLight.Construct.
type PointLightConstructOpts struct {
	Options *interface{}
}

// Construct calls the Construct method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#construct
func (p *PointLight) Construct(jsType string, name string, scene *Scene, opts *PointLightConstructOpts) func() {
	if opts == nil {
		opts = &PointLightConstructOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, jsType)
	args = append(args, name)
	args = append(args, scene.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := p.p.Call("Construct", args...)
	return retVal
}

// CreateAnimationRange calls the CreateAnimationRange method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#createanimationrange
func (p *PointLight) CreateAnimationRange(name string, from float64, to float64) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, from)
	args = append(args, to)

	p.p.Call("createAnimationRange", args...)
}

// PointLightDeleteAnimationRangeOpts contains optional parameters for PointLight.DeleteAnimationRange.
type PointLightDeleteAnimationRangeOpts struct {
	DeleteFrames *bool
}

// DeleteAnimationRange calls the DeleteAnimationRange method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#deleteanimationrange
func (p *PointLight) DeleteAnimationRange(name string, opts *PointLightDeleteAnimationRangeOpts) {
	if opts == nil {
		opts = &PointLightDeleteAnimationRangeOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, name)

	if opts.DeleteFrames == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DeleteFrames)
	}

	p.p.Call("deleteAnimationRange", args...)
}

// PointLightDisposeOpts contains optional parameters for PointLight.Dispose.
type PointLightDisposeOpts struct {
	DoNotRecurse               *bool
	DisposeMaterialAndTextures *bool
}

// Dispose calls the Dispose method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#dispose
func (p *PointLight) Dispose(opts *PointLightDisposeOpts) {
	if opts == nil {
		opts = &PointLightDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DoNotRecurse == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DoNotRecurse)
	}
	if opts.DisposeMaterialAndTextures == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DisposeMaterialAndTextures)
	}

	p.p.Call("dispose", args...)
}

// ForceProjectionMatrixCompute calls the ForceProjectionMatrixCompute method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#forceprojectionmatrixcompute
func (p *PointLight) ForceProjectionMatrixCompute() {

	args := make([]interface{}, 0, 0+0)

	p.p.Call("forceProjectionMatrixCompute", args...)
}

// GetAbsolutePosition calls the GetAbsolutePosition method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getabsoluteposition
func (p *PointLight) GetAbsolutePosition() *Vector3 {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("getAbsolutePosition", args...)
	return Vector3FromJSObject(retVal, p.ctx)
}

// GetAnimationByName calls the GetAnimationByName method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getanimationbyname
func (p *PointLight) GetAnimationByName(name string) *Animation {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := p.p.Call("getAnimationByName", args...)
	return AnimationFromJSObject(retVal, p.ctx)
}

// GetAnimationRange calls the GetAnimationRange method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getanimationrange
func (p *PointLight) GetAnimationRange(name string) *AnimationRange {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := p.p.Call("getAnimationRange", args...)
	return AnimationRangeFromJSObject(retVal, p.ctx)
}

// GetAnimationRanges calls the GetAnimationRanges method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getanimationranges
func (p *PointLight) GetAnimationRanges() *AnimationRange {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("getAnimationRanges", args...)
	return AnimationRangeFromJSObject(retVal, p.ctx)
}

// GetBehaviorByName calls the GetBehaviorByName method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getbehaviorbyname
func (p *PointLight) GetBehaviorByName(name string) *Node {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := p.p.Call("getBehaviorByName", args...)
	return NodeFromJSObject(retVal, p.ctx)
}

// PointLightGetChildMeshesOpts contains optional parameters for PointLight.GetChildMeshes.
type PointLightGetChildMeshesOpts struct {
	DirectDescendantsOnly *bool
	Predicate             *func()
}

// GetChildMeshes calls the GetChildMeshes method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getchildmeshes
func (p *PointLight) GetChildMeshes(opts *PointLightGetChildMeshesOpts) *AbstractMesh {
	if opts == nil {
		opts = &PointLightGetChildMeshesOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := p.p.Call("getChildMeshes", args...)
	return AbstractMeshFromJSObject(retVal, p.ctx)
}

// PointLightGetChildrenOpts contains optional parameters for PointLight.GetChildren.
type PointLightGetChildrenOpts struct {
	Predicate             *func()
	DirectDescendantsOnly *bool
}

// GetChildren calls the GetChildren method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getchildren
func (p *PointLight) GetChildren(opts *PointLightGetChildrenOpts) *Node {
	if opts == nil {
		opts = &PointLightGetChildrenOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}
	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}

	retVal := p.p.Call("getChildren", args...)
	return NodeFromJSObject(retVal, p.ctx)
}

// GetClassName calls the GetClassName method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getclassname
func (p *PointLight) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("getClassName", args...)
	return retVal.String()
}

// GetConstructorFromName calls the GetConstructorFromName method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getconstructorfromname
func (p *PointLight) GetConstructorFromName(jsType float64, name string, scene *Scene) func() {

	args := make([]interface{}, 0, 3+0)

	args = append(args, jsType)
	args = append(args, name)
	args = append(args, scene.JSObject())

	retVal := p.p.Call("GetConstructorFromName", args...)
	return retVal
}

// GetDepthMaxZ calls the GetDepthMaxZ method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getdepthmaxz
func (p *PointLight) GetDepthMaxZ(activeCamera *Camera) float64 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, activeCamera.JSObject())

	retVal := p.p.Call("getDepthMaxZ", args...)
	return retVal.Float()
}

// GetDepthMinZ calls the GetDepthMinZ method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getdepthminz
func (p *PointLight) GetDepthMinZ(activeCamera *Camera) float64 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, activeCamera.JSObject())

	retVal := p.p.Call("getDepthMinZ", args...)
	return retVal.Float()
}

// GetDepthScale calls the GetDepthScale method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getdepthscale
func (p *PointLight) GetDepthScale() float64 {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("getDepthScale", args...)
	return retVal.Float()
}

// PointLightGetDescendantsOpts contains optional parameters for PointLight.GetDescendants.
type PointLightGetDescendantsOpts struct {
	DirectDescendantsOnly *bool
	Predicate             *func()
}

// GetDescendants calls the GetDescendants method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getdescendants
func (p *PointLight) GetDescendants(opts *PointLightGetDescendantsOpts) *Node {
	if opts == nil {
		opts = &PointLightGetDescendantsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := p.p.Call("getDescendants", args...)
	return NodeFromJSObject(retVal, p.ctx)
}

// GetEngine calls the GetEngine method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getengine
func (p *PointLight) GetEngine() *Engine {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("getEngine", args...)
	return EngineFromJSObject(retVal, p.ctx)
}

// PointLightGetHierarchyBoundingVectorsOpts contains optional parameters for PointLight.GetHierarchyBoundingVectors.
type PointLightGetHierarchyBoundingVectorsOpts struct {
	IncludeDescendants *bool
	Predicate          *func()
}

// GetHierarchyBoundingVectors calls the GetHierarchyBoundingVectors method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#gethierarchyboundingvectors
func (p *PointLight) GetHierarchyBoundingVectors(opts *PointLightGetHierarchyBoundingVectorsOpts) js.Value {
	if opts == nil {
		opts = &PointLightGetHierarchyBoundingVectorsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.IncludeDescendants == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IncludeDescendants)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := p.p.Call("getHierarchyBoundingVectors", args...)
	return retVal
}

// GetRotation calls the GetRotation method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getrotation
func (p *PointLight) GetRotation() *Vector3 {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("getRotation", args...)
	return Vector3FromJSObject(retVal, p.ctx)
}

// GetScaledIntensity calls the GetScaledIntensity method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getscaledintensity
func (p *PointLight) GetScaledIntensity() float64 {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("getScaledIntensity", args...)
	return retVal.Float()
}

// GetScene calls the GetScene method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getscene
func (p *PointLight) GetScene() *Scene {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("getScene", args...)
	return SceneFromJSObject(retVal, p.ctx)
}

// PointLightGetShadowDirectionOpts contains optional parameters for PointLight.GetShadowDirection.
type PointLightGetShadowDirectionOpts struct {
	FaceIndex *float64
}

// GetShadowDirection calls the GetShadowDirection method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getshadowdirection
func (p *PointLight) GetShadowDirection(opts *PointLightGetShadowDirectionOpts) *Vector3 {
	if opts == nil {
		opts = &PointLightGetShadowDirectionOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.FaceIndex == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FaceIndex)
	}

	retVal := p.p.Call("getShadowDirection", args...)
	return Vector3FromJSObject(retVal, p.ctx)
}

// GetShadowGenerator calls the GetShadowGenerator method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getshadowgenerator
func (p *PointLight) GetShadowGenerator() *IShadowGenerator {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("getShadowGenerator", args...)
	return IShadowGeneratorFromJSObject(retVal, p.ctx)
}

// GetTypeID calls the GetTypeID method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#gettypeid
func (p *PointLight) GetTypeID() float64 {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("getTypeID", args...)
	return retVal.Float()
}

// GetWorldMatrix calls the GetWorldMatrix method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#getworldmatrix
func (p *PointLight) GetWorldMatrix() *Matrix {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("getWorldMatrix", args...)
	return MatrixFromJSObject(retVal, p.ctx)
}

// IsDescendantOf calls the IsDescendantOf method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#isdescendantof
func (p *PointLight) IsDescendantOf(ancestor *Node) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, ancestor.JSObject())

	retVal := p.p.Call("isDescendantOf", args...)
	return retVal.Bool()
}

// IsDisposed calls the IsDisposed method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#isdisposed
func (p *PointLight) IsDisposed() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("isDisposed", args...)
	return retVal.Bool()
}

// PointLightIsEnabledOpts contains optional parameters for PointLight.IsEnabled.
type PointLightIsEnabledOpts struct {
	CheckAncestors *bool
}

// IsEnabled calls the IsEnabled method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#isenabled
func (p *PointLight) IsEnabled(opts *PointLightIsEnabledOpts) bool {
	if opts == nil {
		opts = &PointLightIsEnabledOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.CheckAncestors == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CheckAncestors)
	}

	retVal := p.p.Call("isEnabled", args...)
	return retVal.Bool()
}

// PointLightIsReadyOpts contains optional parameters for PointLight.IsReady.
type PointLightIsReadyOpts struct {
	CompleteCheck *bool
}

// IsReady calls the IsReady method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#isready
func (p *PointLight) IsReady(opts *PointLightIsReadyOpts) bool {
	if opts == nil {
		opts = &PointLightIsReadyOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.CompleteCheck == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CompleteCheck)
	}

	retVal := p.p.Call("isReady", args...)
	return retVal.Bool()
}

// NeedCube calls the NeedCube method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#needcube
func (p *PointLight) NeedCube() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("needCube", args...)
	return retVal.Bool()
}

// NeedProjectionMatrixCompute calls the NeedProjectionMatrixCompute method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#needprojectionmatrixcompute
func (p *PointLight) NeedProjectionMatrixCompute() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("needProjectionMatrixCompute", args...)
	return retVal.Bool()
}

// Parse calls the Parse method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#parse
func (p *PointLight) Parse(parsedLight interface{}, scene *Scene) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, parsedLight)
	args = append(args, scene.JSObject())

	retVal := p.p.Call("Parse", args...)
	return LightFromJSObject(retVal, p.ctx)
}

// ParseAnimationRanges calls the ParseAnimationRanges method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#parseanimationranges
func (p *PointLight) ParseAnimationRanges(node *Node, parsedNode interface{}, scene *Scene) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, node.JSObject())
	args = append(args, parsedNode)
	args = append(args, scene.JSObject())

	p.p.Call("ParseAnimationRanges", args...)
}

// PrepareLightSpecificDefines calls the PrepareLightSpecificDefines method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#preparelightspecificdefines
func (p *PointLight) PrepareLightSpecificDefines(defines interface{}, lightIndex float64) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, defines)
	args = append(args, lightIndex)

	p.p.Call("prepareLightSpecificDefines", args...)
}

// RemoveBehavior calls the RemoveBehavior method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#removebehavior
func (p *PointLight) RemoveBehavior(behavior js.Value) *Node {

	args := make([]interface{}, 0, 1+0)

	args = append(args, behavior)

	retVal := p.p.Call("removeBehavior", args...)
	return NodeFromJSObject(retVal, p.ctx)
}

// Serialize calls the Serialize method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#serialize
func (p *PointLight) Serialize() interface{} {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("serialize", args...)
	return retVal
}

// SerializeAnimationRanges calls the SerializeAnimationRanges method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#serializeanimationranges
func (p *PointLight) SerializeAnimationRanges() interface{} {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("serializeAnimationRanges", args...)
	return retVal
}

// SetDirectionToTarget calls the SetDirectionToTarget method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#setdirectiontotarget
func (p *PointLight) SetDirectionToTarget(target *Vector3) *Vector3 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, target.JSObject())

	retVal := p.p.Call("setDirectionToTarget", args...)
	return Vector3FromJSObject(retVal, p.ctx)
}

// SetEnabled calls the SetEnabled method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#setenabled
func (p *PointLight) SetEnabled(value bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, value)

	p.p.Call("setEnabled", args...)
}

// SetShadowProjectionMatrix calls the SetShadowProjectionMatrix method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#setshadowprojectionmatrix
func (p *PointLight) SetShadowProjectionMatrix(matrix *Matrix, viewMatrix *Matrix, renderList []AbstractMesh) *IShadowLight {

	args := make([]interface{}, 0, 3+0)

	args = append(args, matrix.JSObject())
	args = append(args, viewMatrix.JSObject())
	args = append(args, renderList.JSObject())

	retVal := p.p.Call("setShadowProjectionMatrix", args...)
	return IShadowLightFromJSObject(retVal, p.ctx)
}

// PointLightToStringOpts contains optional parameters for PointLight.ToString.
type PointLightToStringOpts struct {
	FullDetails *bool
}

// ToString calls the ToString method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#tostring
func (p *PointLight) ToString(opts *PointLightToStringOpts) string {
	if opts == nil {
		opts = &PointLightToStringOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.FullDetails == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FullDetails)
	}

	retVal := p.p.Call("toString", args...)
	return retVal.String()
}

// TransferTexturesToEffect calls the TransferTexturesToEffect method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#transfertexturestoeffect
func (p *PointLight) TransferTexturesToEffect(effect *Effect, lightIndex string) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, lightIndex)

	retVal := p.p.Call("transferTexturesToEffect", args...)
	return LightFromJSObject(retVal, p.ctx)
}

// TransferToEffect calls the TransferToEffect method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#transfertoeffect
func (p *PointLight) TransferToEffect(effect *Effect, lightIndex string) *PointLight {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, lightIndex)

	retVal := p.p.Call("transferToEffect", args...)
	return PointLightFromJSObject(retVal, p.ctx)
}

// TransferToNodeMaterialEffect calls the TransferToNodeMaterialEffect method on the PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#transfertonodematerialeffect
func (p *PointLight) TransferToNodeMaterialEffect(effect *Effect, lightDataUniformName string) *PointLight {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, lightDataUniformName)

	retVal := p.p.Call("transferToNodeMaterialEffect", args...)
	return PointLightFromJSObject(retVal, p.ctx)
}

/*

// AnimationPropertiesOverride returns the AnimationPropertiesOverride property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#animationpropertiesoverride
func (p *PointLight) AnimationPropertiesOverride(animationPropertiesOverride *AnimationPropertiesOverride) *PointLight {
	p := ba.ctx.Get("PointLight").New(animationPropertiesOverride.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// SetAnimationPropertiesOverride sets the AnimationPropertiesOverride property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#animationpropertiesoverride
func (p *PointLight) SetAnimationPropertiesOverride(animationPropertiesOverride *AnimationPropertiesOverride) *PointLight {
	p := ba.ctx.Get("PointLight").New(animationPropertiesOverride.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// Animations returns the Animations property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#animations
func (p *PointLight) Animations(animations *Animation) *PointLight {
	p := ba.ctx.Get("PointLight").New(animations.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#animations
func (p *PointLight) SetAnimations(animations *Animation) *PointLight {
	p := ba.ctx.Get("PointLight").New(animations.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// Behaviors returns the Behaviors property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#behaviors
func (p *PointLight) Behaviors(behaviors js.Value) *PointLight {
	p := ba.ctx.Get("PointLight").New(behaviors)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetBehaviors sets the Behaviors property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#behaviors
func (p *PointLight) SetBehaviors(behaviors js.Value) *PointLight {
	p := ba.ctx.Get("PointLight").New(behaviors)
	return PointLightFromJSObject(p, ba.ctx)
}

// CustomProjectionMatrixBuilder returns the CustomProjectionMatrixBuilder property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#customprojectionmatrixbuilder
func (p *PointLight) CustomProjectionMatrixBuilder(customProjectionMatrixBuilder func()) *PointLight {
	p := ba.ctx.Get("PointLight").New(customProjectionMatrixBuilder)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetCustomProjectionMatrixBuilder sets the CustomProjectionMatrixBuilder property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#customprojectionmatrixbuilder
func (p *PointLight) SetCustomProjectionMatrixBuilder(customProjectionMatrixBuilder func()) *PointLight {
	p := ba.ctx.Get("PointLight").New(customProjectionMatrixBuilder)
	return PointLightFromJSObject(p, ba.ctx)
}

// Diffuse returns the Diffuse property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#diffuse
func (p *PointLight) Diffuse(diffuse *Color3) *PointLight {
	p := ba.ctx.Get("PointLight").New(diffuse.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// SetDiffuse sets the Diffuse property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#diffuse
func (p *PointLight) SetDiffuse(diffuse *Color3) *PointLight {
	p := ba.ctx.Get("PointLight").New(diffuse.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// Direction returns the Direction property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#direction
func (p *PointLight) Direction(direction *Vector3) *PointLight {
	p := ba.ctx.Get("PointLight").New(direction.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// SetDirection sets the Direction property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#direction
func (p *PointLight) SetDirection(direction *Vector3) *PointLight {
	p := ba.ctx.Get("PointLight").New(direction.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// DoNotSerialize returns the DoNotSerialize property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#donotserialize
func (p *PointLight) DoNotSerialize(doNotSerialize bool) *PointLight {
	p := ba.ctx.Get("PointLight").New(doNotSerialize)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetDoNotSerialize sets the DoNotSerialize property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#donotserialize
func (p *PointLight) SetDoNotSerialize(doNotSerialize bool) *PointLight {
	p := ba.ctx.Get("PointLight").New(doNotSerialize)
	return PointLightFromJSObject(p, ba.ctx)
}

// ExcludeWithLayerMask returns the ExcludeWithLayerMask property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#excludewithlayermask
func (p *PointLight) ExcludeWithLayerMask(excludeWithLayerMask float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(excludeWithLayerMask)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetExcludeWithLayerMask sets the ExcludeWithLayerMask property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#excludewithlayermask
func (p *PointLight) SetExcludeWithLayerMask(excludeWithLayerMask float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(excludeWithLayerMask)
	return PointLightFromJSObject(p, ba.ctx)
}

// ExcludedMeshes returns the ExcludedMeshes property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#excludedmeshes
func (p *PointLight) ExcludedMeshes(excludedMeshes *AbstractMesh) *PointLight {
	p := ba.ctx.Get("PointLight").New(excludedMeshes.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// SetExcludedMeshes sets the ExcludedMeshes property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#excludedmeshes
func (p *PointLight) SetExcludedMeshes(excludedMeshes *AbstractMesh) *PointLight {
	p := ba.ctx.Get("PointLight").New(excludedMeshes.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// FALLOFF_DEFAULT returns the FALLOFF_DEFAULT property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#falloff_default
func (p *PointLight) FALLOFF_DEFAULT(FALLOFF_DEFAULT float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(FALLOFF_DEFAULT)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_DEFAULT sets the FALLOFF_DEFAULT property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#falloff_default
func (p *PointLight) SetFALLOFF_DEFAULT(FALLOFF_DEFAULT float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(FALLOFF_DEFAULT)
	return PointLightFromJSObject(p, ba.ctx)
}

// FALLOFF_GLTF returns the FALLOFF_GLTF property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#falloff_gltf
func (p *PointLight) FALLOFF_GLTF(FALLOFF_GLTF float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(FALLOFF_GLTF)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_GLTF sets the FALLOFF_GLTF property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#falloff_gltf
func (p *PointLight) SetFALLOFF_GLTF(FALLOFF_GLTF float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(FALLOFF_GLTF)
	return PointLightFromJSObject(p, ba.ctx)
}

// FALLOFF_PHYSICAL returns the FALLOFF_PHYSICAL property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#falloff_physical
func (p *PointLight) FALLOFF_PHYSICAL(FALLOFF_PHYSICAL float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(FALLOFF_PHYSICAL)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_PHYSICAL sets the FALLOFF_PHYSICAL property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#falloff_physical
func (p *PointLight) SetFALLOFF_PHYSICAL(FALLOFF_PHYSICAL float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(FALLOFF_PHYSICAL)
	return PointLightFromJSObject(p, ba.ctx)
}

// FALLOFF_STANDARD returns the FALLOFF_STANDARD property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#falloff_standard
func (p *PointLight) FALLOFF_STANDARD(FALLOFF_STANDARD float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(FALLOFF_STANDARD)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_STANDARD sets the FALLOFF_STANDARD property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#falloff_standard
func (p *PointLight) SetFALLOFF_STANDARD(FALLOFF_STANDARD float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(FALLOFF_STANDARD)
	return PointLightFromJSObject(p, ba.ctx)
}

// FalloffType returns the FalloffType property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#fallofftype
func (p *PointLight) FalloffType(falloffType float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(falloffType)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetFalloffType sets the FalloffType property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#fallofftype
func (p *PointLight) SetFalloffType(falloffType float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(falloffType)
	return PointLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_AUTOMATIC returns the INTENSITYMODE_AUTOMATIC property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#intensitymode_automatic
func (p *PointLight) INTENSITYMODE_AUTOMATIC(INTENSITYMODE_AUTOMATIC float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(INTENSITYMODE_AUTOMATIC)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_AUTOMATIC sets the INTENSITYMODE_AUTOMATIC property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#intensitymode_automatic
func (p *PointLight) SetINTENSITYMODE_AUTOMATIC(INTENSITYMODE_AUTOMATIC float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(INTENSITYMODE_AUTOMATIC)
	return PointLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_ILLUMINANCE returns the INTENSITYMODE_ILLUMINANCE property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#intensitymode_illuminance
func (p *PointLight) INTENSITYMODE_ILLUMINANCE(INTENSITYMODE_ILLUMINANCE float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(INTENSITYMODE_ILLUMINANCE)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_ILLUMINANCE sets the INTENSITYMODE_ILLUMINANCE property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#intensitymode_illuminance
func (p *PointLight) SetINTENSITYMODE_ILLUMINANCE(INTENSITYMODE_ILLUMINANCE float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(INTENSITYMODE_ILLUMINANCE)
	return PointLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_LUMINANCE returns the INTENSITYMODE_LUMINANCE property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#intensitymode_luminance
func (p *PointLight) INTENSITYMODE_LUMINANCE(INTENSITYMODE_LUMINANCE float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(INTENSITYMODE_LUMINANCE)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_LUMINANCE sets the INTENSITYMODE_LUMINANCE property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#intensitymode_luminance
func (p *PointLight) SetINTENSITYMODE_LUMINANCE(INTENSITYMODE_LUMINANCE float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(INTENSITYMODE_LUMINANCE)
	return PointLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_LUMINOUSINTENSITY returns the INTENSITYMODE_LUMINOUSINTENSITY property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#intensitymode_luminousintensity
func (p *PointLight) INTENSITYMODE_LUMINOUSINTENSITY(INTENSITYMODE_LUMINOUSINTENSITY float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(INTENSITYMODE_LUMINOUSINTENSITY)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_LUMINOUSINTENSITY sets the INTENSITYMODE_LUMINOUSINTENSITY property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#intensitymode_luminousintensity
func (p *PointLight) SetINTENSITYMODE_LUMINOUSINTENSITY(INTENSITYMODE_LUMINOUSINTENSITY float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(INTENSITYMODE_LUMINOUSINTENSITY)
	return PointLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_LUMINOUSPOWER returns the INTENSITYMODE_LUMINOUSPOWER property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#intensitymode_luminouspower
func (p *PointLight) INTENSITYMODE_LUMINOUSPOWER(INTENSITYMODE_LUMINOUSPOWER float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(INTENSITYMODE_LUMINOUSPOWER)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_LUMINOUSPOWER sets the INTENSITYMODE_LUMINOUSPOWER property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#intensitymode_luminouspower
func (p *PointLight) SetINTENSITYMODE_LUMINOUSPOWER(INTENSITYMODE_LUMINOUSPOWER float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(INTENSITYMODE_LUMINOUSPOWER)
	return PointLightFromJSObject(p, ba.ctx)
}

// Id returns the Id property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#id
func (p *PointLight) Id(id string) *PointLight {
	p := ba.ctx.Get("PointLight").New(id)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetId sets the Id property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#id
func (p *PointLight) SetId(id string) *PointLight {
	p := ba.ctx.Get("PointLight").New(id)
	return PointLightFromJSObject(p, ba.ctx)
}

// IncludeOnlyWithLayerMask returns the IncludeOnlyWithLayerMask property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#includeonlywithlayermask
func (p *PointLight) IncludeOnlyWithLayerMask(includeOnlyWithLayerMask float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(includeOnlyWithLayerMask)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetIncludeOnlyWithLayerMask sets the IncludeOnlyWithLayerMask property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#includeonlywithlayermask
func (p *PointLight) SetIncludeOnlyWithLayerMask(includeOnlyWithLayerMask float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(includeOnlyWithLayerMask)
	return PointLightFromJSObject(p, ba.ctx)
}

// IncludedOnlyMeshes returns the IncludedOnlyMeshes property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#includedonlymeshes
func (p *PointLight) IncludedOnlyMeshes(includedOnlyMeshes *AbstractMesh) *PointLight {
	p := ba.ctx.Get("PointLight").New(includedOnlyMeshes.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// SetIncludedOnlyMeshes sets the IncludedOnlyMeshes property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#includedonlymeshes
func (p *PointLight) SetIncludedOnlyMeshes(includedOnlyMeshes *AbstractMesh) *PointLight {
	p := ba.ctx.Get("PointLight").New(includedOnlyMeshes.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#inspectablecustomproperties
func (p *PointLight) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *PointLight {
	p := ba.ctx.Get("PointLight").New(inspectableCustomProperties.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#inspectablecustomproperties
func (p *PointLight) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *PointLight {
	p := ba.ctx.Get("PointLight").New(inspectableCustomProperties.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// Intensity returns the Intensity property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#intensity
func (p *PointLight) Intensity(intensity float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(intensity)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetIntensity sets the Intensity property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#intensity
func (p *PointLight) SetIntensity(intensity float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(intensity)
	return PointLightFromJSObject(p, ba.ctx)
}

// IntensityMode returns the IntensityMode property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#intensitymode
func (p *PointLight) IntensityMode(intensityMode float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(intensityMode)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetIntensityMode sets the IntensityMode property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#intensitymode
func (p *PointLight) SetIntensityMode(intensityMode float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(intensityMode)
	return PointLightFromJSObject(p, ba.ctx)
}

// LIGHTMAP_DEFAULT returns the LIGHTMAP_DEFAULT property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lightmap_default
func (p *PointLight) LIGHTMAP_DEFAULT(LIGHTMAP_DEFAULT float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(LIGHTMAP_DEFAULT)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetLIGHTMAP_DEFAULT sets the LIGHTMAP_DEFAULT property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lightmap_default
func (p *PointLight) SetLIGHTMAP_DEFAULT(LIGHTMAP_DEFAULT float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(LIGHTMAP_DEFAULT)
	return PointLightFromJSObject(p, ba.ctx)
}

// LIGHTMAP_SHADOWSONLY returns the LIGHTMAP_SHADOWSONLY property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lightmap_shadowsonly
func (p *PointLight) LIGHTMAP_SHADOWSONLY(LIGHTMAP_SHADOWSONLY float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(LIGHTMAP_SHADOWSONLY)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetLIGHTMAP_SHADOWSONLY sets the LIGHTMAP_SHADOWSONLY property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lightmap_shadowsonly
func (p *PointLight) SetLIGHTMAP_SHADOWSONLY(LIGHTMAP_SHADOWSONLY float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(LIGHTMAP_SHADOWSONLY)
	return PointLightFromJSObject(p, ba.ctx)
}

// LIGHTMAP_SPECULAR returns the LIGHTMAP_SPECULAR property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lightmap_specular
func (p *PointLight) LIGHTMAP_SPECULAR(LIGHTMAP_SPECULAR float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(LIGHTMAP_SPECULAR)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetLIGHTMAP_SPECULAR sets the LIGHTMAP_SPECULAR property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lightmap_specular
func (p *PointLight) SetLIGHTMAP_SPECULAR(LIGHTMAP_SPECULAR float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(LIGHTMAP_SPECULAR)
	return PointLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_DIRECTIONALLIGHT returns the LIGHTTYPEID_DIRECTIONALLIGHT property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lighttypeid_directionallight
func (p *PointLight) LIGHTTYPEID_DIRECTIONALLIGHT(LIGHTTYPEID_DIRECTIONALLIGHT float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(LIGHTTYPEID_DIRECTIONALLIGHT)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_DIRECTIONALLIGHT sets the LIGHTTYPEID_DIRECTIONALLIGHT property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lighttypeid_directionallight
func (p *PointLight) SetLIGHTTYPEID_DIRECTIONALLIGHT(LIGHTTYPEID_DIRECTIONALLIGHT float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(LIGHTTYPEID_DIRECTIONALLIGHT)
	return PointLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_HEMISPHERICLIGHT returns the LIGHTTYPEID_HEMISPHERICLIGHT property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lighttypeid_hemisphericlight
func (p *PointLight) LIGHTTYPEID_HEMISPHERICLIGHT(LIGHTTYPEID_HEMISPHERICLIGHT float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(LIGHTTYPEID_HEMISPHERICLIGHT)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_HEMISPHERICLIGHT sets the LIGHTTYPEID_HEMISPHERICLIGHT property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lighttypeid_hemisphericlight
func (p *PointLight) SetLIGHTTYPEID_HEMISPHERICLIGHT(LIGHTTYPEID_HEMISPHERICLIGHT float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(LIGHTTYPEID_HEMISPHERICLIGHT)
	return PointLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_POINTLIGHT returns the LIGHTTYPEID_POINTLIGHT property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lighttypeid_pointlight
func (p *PointLight) LIGHTTYPEID_POINTLIGHT(LIGHTTYPEID_POINTLIGHT float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(LIGHTTYPEID_POINTLIGHT)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_POINTLIGHT sets the LIGHTTYPEID_POINTLIGHT property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lighttypeid_pointlight
func (p *PointLight) SetLIGHTTYPEID_POINTLIGHT(LIGHTTYPEID_POINTLIGHT float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(LIGHTTYPEID_POINTLIGHT)
	return PointLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_SPOTLIGHT returns the LIGHTTYPEID_SPOTLIGHT property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lighttypeid_spotlight
func (p *PointLight) LIGHTTYPEID_SPOTLIGHT(LIGHTTYPEID_SPOTLIGHT float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(LIGHTTYPEID_SPOTLIGHT)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_SPOTLIGHT sets the LIGHTTYPEID_SPOTLIGHT property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lighttypeid_spotlight
func (p *PointLight) SetLIGHTTYPEID_SPOTLIGHT(LIGHTTYPEID_SPOTLIGHT float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(LIGHTTYPEID_SPOTLIGHT)
	return PointLightFromJSObject(p, ba.ctx)
}

// LightmapMode returns the LightmapMode property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lightmapmode
func (p *PointLight) LightmapMode(lightmapMode float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(lightmapMode)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetLightmapMode sets the LightmapMode property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#lightmapmode
func (p *PointLight) SetLightmapMode(lightmapMode float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(lightmapMode)
	return PointLightFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#metadata
func (p *PointLight) Metadata(metadata interface{}) *PointLight {
	p := ba.ctx.Get("PointLight").New(metadata)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#metadata
func (p *PointLight) SetMetadata(metadata interface{}) *PointLight {
	p := ba.ctx.Get("PointLight").New(metadata)
	return PointLightFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#name
func (p *PointLight) Name(name string) *PointLight {
	p := ba.ctx.Get("PointLight").New(name)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#name
func (p *PointLight) SetName(name string) *PointLight {
	p := ba.ctx.Get("PointLight").New(name)
	return PointLightFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#ondispose
func (p *PointLight) OnDispose(onDispose func()) *PointLight {
	p := ba.ctx.Get("PointLight").New(onDispose)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#ondispose
func (p *PointLight) SetOnDispose(onDispose func()) *PointLight {
	p := ba.ctx.Get("PointLight").New(onDispose)
	return PointLightFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#ondisposeobservable
func (p *PointLight) OnDisposeObservable(onDisposeObservable *Observable) *PointLight {
	p := ba.ctx.Get("PointLight").New(onDisposeObservable.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#ondisposeobservable
func (p *PointLight) SetOnDisposeObservable(onDisposeObservable *Observable) *PointLight {
	p := ba.ctx.Get("PointLight").New(onDisposeObservable.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// OnReady returns the OnReady property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#onready
func (p *PointLight) OnReady(onReady func()) *PointLight {
	p := ba.ctx.Get("PointLight").New(onReady)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetOnReady sets the OnReady property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#onready
func (p *PointLight) SetOnReady(onReady func()) *PointLight {
	p := ba.ctx.Get("PointLight").New(onReady)
	return PointLightFromJSObject(p, ba.ctx)
}

// Parent returns the Parent property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#parent
func (p *PointLight) Parent(parent *Node) *PointLight {
	p := ba.ctx.Get("PointLight").New(parent.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// SetParent sets the Parent property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#parent
func (p *PointLight) SetParent(parent *Node) *PointLight {
	p := ba.ctx.Get("PointLight").New(parent.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// Position returns the Position property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#position
func (p *PointLight) Position(position *Vector3) *PointLight {
	p := ba.ctx.Get("PointLight").New(position.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// SetPosition sets the Position property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#position
func (p *PointLight) SetPosition(position *Vector3) *PointLight {
	p := ba.ctx.Get("PointLight").New(position.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// Radius returns the Radius property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#radius
func (p *PointLight) Radius(radius float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(radius)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetRadius sets the Radius property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#radius
func (p *PointLight) SetRadius(radius float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(radius)
	return PointLightFromJSObject(p, ba.ctx)
}

// Range returns the Range property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#range
func (p *PointLight) Range(range float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(range)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetRange sets the Range property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#range
func (p *PointLight) SetRange(range float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(range)
	return PointLightFromJSObject(p, ba.ctx)
}

// RenderPriority returns the RenderPriority property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#renderpriority
func (p *PointLight) RenderPriority(renderPriority float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(renderPriority)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetRenderPriority sets the RenderPriority property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#renderpriority
func (p *PointLight) SetRenderPriority(renderPriority float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(renderPriority)
	return PointLightFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#reserveddatastore
func (p *PointLight) ReservedDataStore(reservedDataStore interface{}) *PointLight {
	p := ba.ctx.Get("PointLight").New(reservedDataStore)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#reserveddatastore
func (p *PointLight) SetReservedDataStore(reservedDataStore interface{}) *PointLight {
	p := ba.ctx.Get("PointLight").New(reservedDataStore)
	return PointLightFromJSObject(p, ba.ctx)
}

// ShadowAngle returns the ShadowAngle property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#shadowangle
func (p *PointLight) ShadowAngle(shadowAngle float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(shadowAngle)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetShadowAngle sets the ShadowAngle property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#shadowangle
func (p *PointLight) SetShadowAngle(shadowAngle float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(shadowAngle)
	return PointLightFromJSObject(p, ba.ctx)
}

// ShadowEnabled returns the ShadowEnabled property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#shadowenabled
func (p *PointLight) ShadowEnabled(shadowEnabled bool) *PointLight {
	p := ba.ctx.Get("PointLight").New(shadowEnabled)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetShadowEnabled sets the ShadowEnabled property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#shadowenabled
func (p *PointLight) SetShadowEnabled(shadowEnabled bool) *PointLight {
	p := ba.ctx.Get("PointLight").New(shadowEnabled)
	return PointLightFromJSObject(p, ba.ctx)
}

// ShadowMaxZ returns the ShadowMaxZ property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#shadowmaxz
func (p *PointLight) ShadowMaxZ(shadowMaxZ float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(shadowMaxZ)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetShadowMaxZ sets the ShadowMaxZ property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#shadowmaxz
func (p *PointLight) SetShadowMaxZ(shadowMaxZ float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(shadowMaxZ)
	return PointLightFromJSObject(p, ba.ctx)
}

// ShadowMinZ returns the ShadowMinZ property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#shadowminz
func (p *PointLight) ShadowMinZ(shadowMinZ float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(shadowMinZ)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetShadowMinZ sets the ShadowMinZ property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#shadowminz
func (p *PointLight) SetShadowMinZ(shadowMinZ float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(shadowMinZ)
	return PointLightFromJSObject(p, ba.ctx)
}

// Specular returns the Specular property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#specular
func (p *PointLight) Specular(specular *Color3) *PointLight {
	p := ba.ctx.Get("PointLight").New(specular.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// SetSpecular sets the Specular property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#specular
func (p *PointLight) SetSpecular(specular *Color3) *PointLight {
	p := ba.ctx.Get("PointLight").New(specular.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// State returns the State property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#state
func (p *PointLight) State(state string) *PointLight {
	p := ba.ctx.Get("PointLight").New(state)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetState sets the State property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#state
func (p *PointLight) SetState(state string) *PointLight {
	p := ba.ctx.Get("PointLight").New(state)
	return PointLightFromJSObject(p, ba.ctx)
}

// TransformedDirection returns the TransformedDirection property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#transformeddirection
func (p *PointLight) TransformedDirection(transformedDirection *Vector3) *PointLight {
	p := ba.ctx.Get("PointLight").New(transformedDirection.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// SetTransformedDirection sets the TransformedDirection property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#transformeddirection
func (p *PointLight) SetTransformedDirection(transformedDirection *Vector3) *PointLight {
	p := ba.ctx.Get("PointLight").New(transformedDirection.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// TransformedPosition returns the TransformedPosition property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#transformedposition
func (p *PointLight) TransformedPosition(transformedPosition *Vector3) *PointLight {
	p := ba.ctx.Get("PointLight").New(transformedPosition.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// SetTransformedPosition sets the TransformedPosition property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#transformedposition
func (p *PointLight) SetTransformedPosition(transformedPosition *Vector3) *PointLight {
	p := ba.ctx.Get("PointLight").New(transformedPosition.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#uniqueid
func (p *PointLight) UniqueId(uniqueId float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(uniqueId)
	return PointLightFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#uniqueid
func (p *PointLight) SetUniqueId(uniqueId float64) *PointLight {
	p := ba.ctx.Get("PointLight").New(uniqueId)
	return PointLightFromJSObject(p, ba.ctx)
}

// WorldMatrixFromCache returns the WorldMatrixFromCache property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#worldmatrixfromcache
func (p *PointLight) WorldMatrixFromCache(worldMatrixFromCache *Matrix) *PointLight {
	p := ba.ctx.Get("PointLight").New(worldMatrixFromCache.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

// SetWorldMatrixFromCache sets the WorldMatrixFromCache property of class PointLight.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight#worldmatrixfromcache
func (p *PointLight) SetWorldMatrixFromCache(worldMatrixFromCache *Matrix) *PointLight {
	p := ba.ctx.Get("PointLight").New(worldMatrixFromCache.JSObject())
	return PointLightFromJSObject(p, ba.ctx)
}

*/
