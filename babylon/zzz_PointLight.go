// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PointLight represents a babylon.js PointLight.
// A point light is a light defined by an unique point in world space.
// The light is emitted in every direction from this point.
// A good example of a point light is a standard light bulb.
// Documentation: &lt;a href=&#34;https://doc.babylonjs.com/babylon101/lights&#34;&gt;https://doc.babylonjs.com/babylon101/lights&lt;/a&gt;
type PointLight struct{ *ShadowLight }

// JSObject returns the underlying js.Value.
func (p *PointLight) JSObject() js.Value { return p.p }

// PointLight returns a PointLight JavaScript class.
func (b *Babylon) PointLight() *PointLight {
	p := b.ctx.Get("PointLight")
	return PointLightFromJSObject(p)
}

// PointLightFromJSObject returns a wrapped PointLight JavaScript class.
func PointLightFromJSObject(p js.Value) *PointLight {
	return &PointLight{ShadowLightFromJSObject(p)}
}

// NewPointLight returns a new PointLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointlight
func (b *Babylon) NewPointLight(todo parameters) *PointLight {
	p := b.ctx.Get("PointLight").New(todo)
	return PointLightFromJSObject(p)
}

// TODO: methods
