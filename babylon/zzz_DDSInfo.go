// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DDSInfo represents a babylon.js DDSInfo.
// Direct draw surface info
//
// See: https://docs.microsoft.com/en-us/windows/desktop/direct3ddds/dx-graphics-dds-pguide
type DDSInfo struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DDSInfo) JSObject() js.Value { return d.p }

// DDSInfo returns a DDSInfo JavaScript class.
func (ba *Babylon) DDSInfo() *DDSInfo {
	p := ba.ctx.Get("DDSInfo")
	return DDSInfoFromJSObject(p, ba.ctx)
}

// DDSInfoFromJSObject returns a wrapped DDSInfo JavaScript class.
func DDSInfoFromJSObject(p js.Value, ctx js.Value) *DDSInfo {
	return &DDSInfo{p: p, ctx: ctx}
}

// DDSInfoArrayToJSArray returns a JavaScript Array for the wrapped array.
func DDSInfoArrayToJSArray(array []*DDSInfo) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// DxgiFormat returns the DxgiFormat property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#dxgiformat
func (d *DDSInfo) DxgiFormat(dxgiFormat float64) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(dxgiFormat)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// SetDxgiFormat sets the DxgiFormat property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#dxgiformat
func (d *DDSInfo) SetDxgiFormat(dxgiFormat float64) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(dxgiFormat)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// Height returns the Height property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#height
func (d *DDSInfo) Height(height float64) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(height)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// SetHeight sets the Height property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#height
func (d *DDSInfo) SetHeight(height float64) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(height)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// IsCompressed returns the IsCompressed property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#iscompressed
func (d *DDSInfo) IsCompressed(isCompressed bool) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(isCompressed)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// SetIsCompressed sets the IsCompressed property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#iscompressed
func (d *DDSInfo) SetIsCompressed(isCompressed bool) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(isCompressed)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// IsCube returns the IsCube property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#iscube
func (d *DDSInfo) IsCube(isCube bool) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(isCube)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// SetIsCube sets the IsCube property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#iscube
func (d *DDSInfo) SetIsCube(isCube bool) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(isCube)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// IsFourCC returns the IsFourCC property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#isfourcc
func (d *DDSInfo) IsFourCC(isFourCC bool) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(isFourCC)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// SetIsFourCC sets the IsFourCC property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#isfourcc
func (d *DDSInfo) SetIsFourCC(isFourCC bool) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(isFourCC)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// IsLuminance returns the IsLuminance property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#isluminance
func (d *DDSInfo) IsLuminance(isLuminance bool) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(isLuminance)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// SetIsLuminance sets the IsLuminance property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#isluminance
func (d *DDSInfo) SetIsLuminance(isLuminance bool) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(isLuminance)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// IsRGB returns the IsRGB property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#isrgb
func (d *DDSInfo) IsRGB(isRGB bool) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(isRGB)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// SetIsRGB sets the IsRGB property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#isrgb
func (d *DDSInfo) SetIsRGB(isRGB bool) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(isRGB)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// MipmapCount returns the MipmapCount property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#mipmapcount
func (d *DDSInfo) MipmapCount(mipmapCount float64) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(mipmapCount)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// SetMipmapCount sets the MipmapCount property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#mipmapcount
func (d *DDSInfo) SetMipmapCount(mipmapCount float64) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(mipmapCount)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// SphericalPolynomial returns the SphericalPolynomial property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#sphericalpolynomial
func (d *DDSInfo) SphericalPolynomial(sphericalPolynomial *SphericalPolynomial) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(sphericalPolynomial.JSObject())
	return DDSInfoFromJSObject(p, ba.ctx)
}

// SetSphericalPolynomial sets the SphericalPolynomial property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#sphericalpolynomial
func (d *DDSInfo) SetSphericalPolynomial(sphericalPolynomial *SphericalPolynomial) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(sphericalPolynomial.JSObject())
	return DDSInfoFromJSObject(p, ba.ctx)
}

// TextureType returns the TextureType property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#texturetype
func (d *DDSInfo) TextureType(textureType float64) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(textureType)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// SetTextureType sets the TextureType property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#texturetype
func (d *DDSInfo) SetTextureType(textureType float64) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(textureType)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#width
func (d *DDSInfo) Width(width float64) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(width)
	return DDSInfoFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class DDSInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.ddsinfo#width
func (d *DDSInfo) SetWidth(width float64) *DDSInfo {
	p := ba.ctx.Get("DDSInfo").New(width)
	return DDSInfoFromJSObject(p, ba.ctx)
}

*/
