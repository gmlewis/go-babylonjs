// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RawTexture2DArray represents a babylon.js RawTexture2DArray.
// Class used to store 2D array textures containing user data
type RawTexture2DArray struct {
	*Texture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RawTexture2DArray) JSObject() js.Value { return r.p }

// RawTexture2DArray returns a RawTexture2DArray JavaScript class.
func (ba *Babylon) RawTexture2DArray() *RawTexture2DArray {
	p := ba.ctx.Get("RawTexture2DArray")
	return RawTexture2DArrayFromJSObject(p, ba.ctx)
}

// RawTexture2DArrayFromJSObject returns a wrapped RawTexture2DArray JavaScript class.
func RawTexture2DArrayFromJSObject(p js.Value, ctx js.Value) *RawTexture2DArray {
	return &RawTexture2DArray{Texture: TextureFromJSObject(p, ctx), ctx: ctx}
}

// RawTexture2DArrayArrayToJSArray returns a JavaScript Array for the wrapped array.
func RawTexture2DArrayArrayToJSArray(array []*RawTexture2DArray) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewRawTexture2DArrayOpts contains optional parameters for NewRawTexture2DArray.
type NewRawTexture2DArrayOpts struct {
	GenerateMipMaps *bool
	InvertY         *bool
	SamplingMode    *float64
	TextureType     *float64
}

// NewRawTexture2DArray returns a new RawTexture2DArray object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawtexture2darray
func (ba *Babylon) NewRawTexture2DArray(data js.Value, width float64, height float64, depth float64, format float64, scene *Scene, opts *NewRawTexture2DArrayOpts) *RawTexture2DArray {
	if opts == nil {
		opts = &NewRawTexture2DArrayOpts{}
	}

	args := make([]interface{}, 0, 6+4)

	args = append(args, data)
	args = append(args, width)
	args = append(args, height)
	args = append(args, depth)
	args = append(args, format)
	args = append(args, scene.JSObject())

	if opts.GenerateMipMaps == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateMipMaps)
	}
	if opts.InvertY == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.InvertY)
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}

	p := ba.ctx.Get("RawTexture2DArray").New(args...)
	return RawTexture2DArrayFromJSObject(p, ba.ctx)
}

// Update calls the Update method on the RawTexture2DArray object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawtexture2darray#update
func (r *RawTexture2DArray) Update(data js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, data)

	r.p.Call("update", args...)
}

/*

// Format returns the Format property of class RawTexture2DArray.
//
// https://doc.babylonjs.com/api/classes/babylon.rawtexture2darray#format
func (r *RawTexture2DArray) Format(format float64) *RawTexture2DArray {
	p := ba.ctx.Get("RawTexture2DArray").New(format)
	return RawTexture2DArrayFromJSObject(p, ba.ctx)
}

// SetFormat sets the Format property of class RawTexture2DArray.
//
// https://doc.babylonjs.com/api/classes/babylon.rawtexture2darray#format
func (r *RawTexture2DArray) SetFormat(format float64) *RawTexture2DArray {
	p := ba.ctx.Get("RawTexture2DArray").New(format)
	return RawTexture2DArrayFromJSObject(p, ba.ctx)
}

*/
