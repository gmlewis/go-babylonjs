// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BezierCurve represents a babylon.js BezierCurve.
// Class used to represent a Bezier curve
type BezierCurve struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BezierCurve) JSObject() js.Value { return b.p }

// BezierCurve returns a BezierCurve JavaScript class.
func (ba *Babylon) BezierCurve() *BezierCurve {
	p := ba.ctx.Get("BezierCurve")
	return BezierCurveFromJSObject(p, ba.ctx)
}

// BezierCurveFromJSObject returns a wrapped BezierCurve JavaScript class.
func BezierCurveFromJSObject(p js.Value, ctx js.Value) *BezierCurve {
	return &BezierCurve{p: p, ctx: ctx}
}

// Interpolate calls the Interpolate method on the BezierCurve object.
//
// https://doc.babylonjs.com/api/classes/babylon.beziercurve#interpolate
func (b *BezierCurve) Interpolate(t float64, x1 float64, y1 float64, x2 float64, y2 float64) float64 {

	args := make([]interface{}, 0, 5+0)

	args = append(args, t)
	args = append(args, x1)
	args = append(args, y1)
	args = append(args, x2)
	args = append(args, y2)

	retVal := b.p.Call("Interpolate", args...)
	return retVal.Float()
}

/*

 */
