// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PlaneDragGizmo represents a babylon.js PlaneDragGizmo.
// Single plane drag gizmo
type PlaneDragGizmo struct{ *Gizmo }

// JSObject returns the underlying js.Value.
func (p *PlaneDragGizmo) JSObject() js.Value { return p.p }

// PlaneDragGizmo returns a PlaneDragGizmo JavaScript class.
func (ba *Babylon) PlaneDragGizmo() *PlaneDragGizmo {
	p := ba.ctx.Get("PlaneDragGizmo")
	return PlaneDragGizmoFromJSObject(p)
}

// PlaneDragGizmoFromJSObject returns a wrapped PlaneDragGizmo JavaScript class.
func PlaneDragGizmoFromJSObject(p js.Value) *PlaneDragGizmo {
	return &PlaneDragGizmo{GizmoFromJSObject(p)}
}

// NewPlaneDragGizmoOpts contains optional parameters for NewPlaneDragGizmo.
type NewPlaneDragGizmoOpts struct {
	Color *Color3

	GizmoLayer *UtilityLayerRenderer

	Parent *PositionGizmo
}

// NewPlaneDragGizmo returns a new PlaneDragGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.planedraggizmo
func (ba *Babylon) NewPlaneDragGizmo(dragPlaneNormal *Vector3, opts *NewPlaneDragGizmoOpts) *PlaneDragGizmo {
	if opts == nil {
		opts = &NewPlaneDragGizmoOpts{}
	}

	p := ba.ctx.Get("PlaneDragGizmo").New(dragPlaneNormal.JSObject(), opts.Color.JSObject(), opts.GizmoLayer.JSObject(), opts.Parent.JSObject())
	return PlaneDragGizmoFromJSObject(p)
}

// TODO: methods
