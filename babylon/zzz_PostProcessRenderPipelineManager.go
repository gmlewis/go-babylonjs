// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PostProcessRenderPipelineManager represents a babylon.js PostProcessRenderPipelineManager.
// PostProcessRenderPipelineManager class
//
// See: https://doc.babylonjs.com/how_to/how_to_use_postprocessrenderpipeline
type PostProcessRenderPipelineManager struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PostProcessRenderPipelineManager) JSObject() js.Value { return p.p }

// PostProcessRenderPipelineManager returns a PostProcessRenderPipelineManager JavaScript class.
func (ba *Babylon) PostProcessRenderPipelineManager() *PostProcessRenderPipelineManager {
	p := ba.ctx.Get("PostProcessRenderPipelineManager")
	return PostProcessRenderPipelineManagerFromJSObject(p, ba.ctx)
}

// PostProcessRenderPipelineManagerFromJSObject returns a wrapped PostProcessRenderPipelineManager JavaScript class.
func PostProcessRenderPipelineManagerFromJSObject(p js.Value, ctx js.Value) *PostProcessRenderPipelineManager {
	return &PostProcessRenderPipelineManager{p: p, ctx: ctx}
}

// NewPostProcessRenderPipelineManager returns a new PostProcessRenderPipelineManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessrenderpipelinemanager
func (ba *Babylon) NewPostProcessRenderPipelineManager() *PostProcessRenderPipelineManager {
	p := ba.ctx.Get("PostProcessRenderPipelineManager").New()
	return PostProcessRenderPipelineManagerFromJSObject(p, ba.ctx)
}

// TODO: methods
