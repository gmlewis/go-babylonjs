// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PostProcessRenderPipelineManager represents a babylon.js PostProcessRenderPipelineManager.
// PostProcessRenderPipelineManager class
//
// See: https://doc.babylonjs.com/how_to/how_to_use_postprocessrenderpipeline
type PostProcessRenderPipelineManager struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PostProcessRenderPipelineManager) JSObject() js.Value { return p.p }

// PostProcessRenderPipelineManager returns a PostProcessRenderPipelineManager JavaScript class.
func (ba *Babylon) PostProcessRenderPipelineManager() *PostProcessRenderPipelineManager {
	p := ba.ctx.Get("PostProcessRenderPipelineManager")
	return PostProcessRenderPipelineManagerFromJSObject(p, ba.ctx)
}

// PostProcessRenderPipelineManagerFromJSObject returns a wrapped PostProcessRenderPipelineManager JavaScript class.
func PostProcessRenderPipelineManagerFromJSObject(p js.Value, ctx js.Value) *PostProcessRenderPipelineManager {
	return &PostProcessRenderPipelineManager{p: p, ctx: ctx}
}

// PostProcessRenderPipelineManagerArrayToJSArray returns a JavaScript Array for the wrapped array.
func PostProcessRenderPipelineManagerArrayToJSArray(array []*PostProcessRenderPipelineManager) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPostProcessRenderPipelineManager returns a new PostProcessRenderPipelineManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessrenderpipelinemanager
func (ba *Babylon) NewPostProcessRenderPipelineManager() *PostProcessRenderPipelineManager {

	args := make([]interface{}, 0, 0+0)

	p := ba.ctx.Get("PostProcessRenderPipelineManager").New(args...)
	return PostProcessRenderPipelineManagerFromJSObject(p, ba.ctx)
}

// AddPipeline calls the AddPipeline method on the PostProcessRenderPipelineManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessrenderpipelinemanager#addpipeline
func (p *PostProcessRenderPipelineManager) AddPipeline(renderPipeline *PostProcessRenderPipeline) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, renderPipeline.JSObject())

	p.p.Call("addPipeline", args...)
}

// PostProcessRenderPipelineManagerAttachCamerasToRenderPipelineOpts contains optional parameters for PostProcessRenderPipelineManager.AttachCamerasToRenderPipeline.
type PostProcessRenderPipelineManagerAttachCamerasToRenderPipelineOpts struct {
	Unique *bool
}

// AttachCamerasToRenderPipeline calls the AttachCamerasToRenderPipeline method on the PostProcessRenderPipelineManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessrenderpipelinemanager#attachcamerastorenderpipeline
func (p *PostProcessRenderPipelineManager) AttachCamerasToRenderPipeline(renderPipelineName string, cameras interface{}, opts *PostProcessRenderPipelineManagerAttachCamerasToRenderPipelineOpts) {
	if opts == nil {
		opts = &PostProcessRenderPipelineManagerAttachCamerasToRenderPipelineOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, renderPipelineName)
	args = append(args, cameras)

	if opts.Unique == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Unique)
	}

	p.p.Call("attachCamerasToRenderPipeline", args...)
}

// DetachCamerasFromRenderPipeline calls the DetachCamerasFromRenderPipeline method on the PostProcessRenderPipelineManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessrenderpipelinemanager#detachcamerasfromrenderpipeline
func (p *PostProcessRenderPipelineManager) DetachCamerasFromRenderPipeline(renderPipelineName string, cameras interface{}) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, renderPipelineName)
	args = append(args, cameras)

	p.p.Call("detachCamerasFromRenderPipeline", args...)
}

// DisableEffectInPipeline calls the DisableEffectInPipeline method on the PostProcessRenderPipelineManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessrenderpipelinemanager#disableeffectinpipeline
func (p *PostProcessRenderPipelineManager) DisableEffectInPipeline(renderPipelineName string, renderEffectName string, cameras interface{}) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, renderPipelineName)
	args = append(args, renderEffectName)
	args = append(args, cameras)

	p.p.Call("disableEffectInPipeline", args...)
}

// Dispose calls the Dispose method on the PostProcessRenderPipelineManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessrenderpipelinemanager#dispose
func (p *PostProcessRenderPipelineManager) Dispose() {

	p.p.Call("dispose")
}

// EnableEffectInPipeline calls the EnableEffectInPipeline method on the PostProcessRenderPipelineManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessrenderpipelinemanager#enableeffectinpipeline
func (p *PostProcessRenderPipelineManager) EnableEffectInPipeline(renderPipelineName string, renderEffectName string, cameras interface{}) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, renderPipelineName)
	args = append(args, renderEffectName)
	args = append(args, cameras)

	p.p.Call("enableEffectInPipeline", args...)
}

// Update calls the Update method on the PostProcessRenderPipelineManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessrenderpipelinemanager#update
func (p *PostProcessRenderPipelineManager) Update() {

	p.p.Call("update")
}

// SupportedPipelines returns the SupportedPipelines property of class PostProcessRenderPipelineManager.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessrenderpipelinemanager#supportedpipelines
func (p *PostProcessRenderPipelineManager) SupportedPipelines() *PostProcessRenderPipeline {
	retVal := p.p.Get("supportedPipelines")
	return PostProcessRenderPipelineFromJSObject(retVal, p.ctx)
}

// SetSupportedPipelines sets the SupportedPipelines property of class PostProcessRenderPipelineManager.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessrenderpipelinemanager#supportedpipelines
func (p *PostProcessRenderPipelineManager) SetSupportedPipelines(supportedPipelines *PostProcessRenderPipeline) *PostProcessRenderPipelineManager {
	p.p.Set("supportedPipelines", supportedPipelines.JSObject())
	return p
}
