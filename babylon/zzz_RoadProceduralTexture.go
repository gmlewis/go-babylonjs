// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RoadProceduralTexture represents a babylon.js RoadProceduralTexture.
//
type RoadProceduralTexture struct {
	*ProceduralTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RoadProceduralTexture) JSObject() js.Value { return r.p }

// RoadProceduralTexture returns a RoadProceduralTexture JavaScript class.
func (ba *Babylon) RoadProceduralTexture() *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture")
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// RoadProceduralTextureFromJSObject returns a wrapped RoadProceduralTexture JavaScript class.
func RoadProceduralTextureFromJSObject(p js.Value, ctx js.Value) *RoadProceduralTexture {
	return &RoadProceduralTexture{ProceduralTexture: ProceduralTextureFromJSObject(p, ctx), ctx: ctx}
}

// RoadProceduralTextureArrayToJSArray returns a JavaScript Array for the wrapped array.
func RoadProceduralTextureArrayToJSArray(array []*RoadProceduralTexture) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewRoadProceduralTextureOpts contains optional parameters for NewRoadProceduralTexture.
type NewRoadProceduralTextureOpts struct {
	FallbackTexture *Texture
	GenerateMipMaps *bool
}

// NewRoadProceduralTexture returns a new RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture
func (ba *Babylon) NewRoadProceduralTexture(name string, size float64, scene *Scene, opts *NewRoadProceduralTextureOpts) *RoadProceduralTexture {
	if opts == nil {
		opts = &NewRoadProceduralTextureOpts{}
	}

	args := make([]interface{}, 0, 3+2)

	args = append(args, name)
	args = append(args, size)
	args = append(args, scene.JSObject())

	if opts.FallbackTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.FallbackTexture.JSObject())
	}
	if opts.GenerateMipMaps == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateMipMaps)
	}

	p := ba.ctx.Get("RoadProceduralTexture").New(args...)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// Parse calls the Parse method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#parse
func (r *RoadProceduralTexture) Parse(parsedTexture JSObject, scene *Scene, rootUrl string) *RoadProceduralTexture {

	args := make([]interface{}, 0, 3+0)

	if parsedTexture == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, parsedTexture.JSObject())
	}

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	args = append(args, rootUrl)

	retVal := r.p.Call("Parse", args...)
	return RoadProceduralTextureFromJSObject(retVal, r.ctx)
}

// Serialize calls the Serialize method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#serialize
func (r *RoadProceduralTexture) Serialize() js.Value {

	retVal := r.p.Call("serialize")
	return retVal
}

// UpdateShaderUniforms calls the UpdateShaderUniforms method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#updateshaderuniforms
func (r *RoadProceduralTexture) UpdateShaderUniforms() {

	r.p.Call("updateShaderUniforms")
}

// RoadColor returns the RoadColor property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#roadcolor
func (r *RoadProceduralTexture) RoadColor() *Color3 {
	retVal := r.p.Get("roadColor")
	return Color3FromJSObject(retVal, r.ctx)
}

// SetRoadColor sets the RoadColor property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#roadcolor
func (r *RoadProceduralTexture) SetRoadColor(roadColor *Color3) *RoadProceduralTexture {
	r.p.Set("roadColor", roadColor.JSObject())
	return r
}
