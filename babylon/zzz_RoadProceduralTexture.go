// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RoadProceduralTexture represents a babylon.js RoadProceduralTexture.
//
type RoadProceduralTexture struct {
	*ProceduralTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RoadProceduralTexture) JSObject() js.Value { return r.p }

// RoadProceduralTexture returns a RoadProceduralTexture JavaScript class.
func (ba *Babylon) RoadProceduralTexture() *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture")
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// RoadProceduralTextureFromJSObject returns a wrapped RoadProceduralTexture JavaScript class.
func RoadProceduralTextureFromJSObject(p js.Value, ctx js.Value) *RoadProceduralTexture {
	return &RoadProceduralTexture{ProceduralTexture: ProceduralTextureFromJSObject(p, ctx), ctx: ctx}
}

// NewRoadProceduralTextureOpts contains optional parameters for NewRoadProceduralTexture.
type NewRoadProceduralTextureOpts struct {
	FallbackTexture *Texture

	GenerateMipMaps *JSBool
}

// NewRoadProceduralTexture returns a new RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture
func (ba *Babylon) NewRoadProceduralTexture(name string, size float64, scene *Scene, opts *NewRoadProceduralTextureOpts) *RoadProceduralTexture {
	if opts == nil {
		opts = &NewRoadProceduralTextureOpts{}
	}

	p := ba.ctx.Get("RoadProceduralTexture").New(name, size, scene.JSObject(), opts.FallbackTexture.JSObject(), opts.GenerateMipMaps.JSObject())
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// TODO: methods
