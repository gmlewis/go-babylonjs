// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RoadProceduralTexture represents a babylon.js RoadProceduralTexture.
//
type RoadProceduralTexture struct {
	*ProceduralTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RoadProceduralTexture) JSObject() js.Value { return r.p }

// RoadProceduralTexture returns a RoadProceduralTexture JavaScript class.
func (ba *Babylon) RoadProceduralTexture() *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture")
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// RoadProceduralTextureFromJSObject returns a wrapped RoadProceduralTexture JavaScript class.
func RoadProceduralTextureFromJSObject(p js.Value, ctx js.Value) *RoadProceduralTexture {
	return &RoadProceduralTexture{ProceduralTexture: ProceduralTextureFromJSObject(p, ctx), ctx: ctx}
}

// NewRoadProceduralTextureOpts contains optional parameters for NewRoadProceduralTexture.
type NewRoadProceduralTextureOpts struct {
	FallbackTexture *Texture
	GenerateMipMaps *bool
}

// NewRoadProceduralTexture returns a new RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture
func (ba *Babylon) NewRoadProceduralTexture(name string, size float64, scene *Scene, opts *NewRoadProceduralTextureOpts) *RoadProceduralTexture {
	if opts == nil {
		opts = &NewRoadProceduralTextureOpts{}
	}

	args := make([]interface{}, 0, 3+2)

	args = append(args, name)
	args = append(args, size)
	args = append(args, scene.JSObject())

	if opts.FallbackTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.FallbackTexture.JSObject())
	}
	if opts.GenerateMipMaps == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateMipMaps)
	}

	p := ba.ctx.Get("RoadProceduralTexture").New(args...)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// Clone calls the Clone method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#clone
func (r *RoadProceduralTexture) Clone() *ProceduralTexture {

	args := make([]interface{}, 0, 0+0)

	retVal := r.p.Call("clone", args...)
	return ProceduralTextureFromJSObject(retVal, r.ctx)
}

// RoadProceduralTextureCreateFromBase64StringOpts contains optional parameters for RoadProceduralTexture.CreateFromBase64String.
type RoadProceduralTextureCreateFromBase64StringOpts struct {
	NoMipmap     *bool
	InvertY      *bool
	SamplingMode *float64
	OnLoad       *func()
	OnError      *func()
	Format       *float64
}

// CreateFromBase64String calls the CreateFromBase64String method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#createfrombase64string
func (r *RoadProceduralTexture) CreateFromBase64String(data string, name string, scene *Scene, opts *RoadProceduralTextureCreateFromBase64StringOpts) *Texture {
	if opts == nil {
		opts = &RoadProceduralTextureCreateFromBase64StringOpts{}
	}

	args := make([]interface{}, 0, 3+6)

	args = append(args, data)
	args = append(args, name)
	args = append(args, scene.JSObject())

	if opts.NoMipmap == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoMipmap)
	}
	if opts.InvertY == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.InvertY)
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.OnLoad == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnLoad)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}
	if opts.Format == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Format)
	}

	retVal := r.p.Call("CreateFromBase64String", args...)
	return TextureFromJSObject(retVal, r.ctx)
}

// Dispose calls the Dispose method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#dispose
func (r *RoadProceduralTexture) Dispose() {

	args := make([]interface{}, 0, 0+0)

	r.p.Call("dispose", args...)
}

// GetBaseSize calls the GetBaseSize method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#getbasesize
func (r *RoadProceduralTexture) GetBaseSize() js.Value {

	args := make([]interface{}, 0, 0+0)

	retVal := r.p.Call("getBaseSize", args...)
	return retVal
}

// GetClassName calls the GetClassName method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#getclassname
func (r *RoadProceduralTexture) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := r.p.Call("getClassName", args...)
	return retVal.String()
}

// GetContent calls the GetContent method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#getcontent
func (r *RoadProceduralTexture) GetContent() js.Value {

	args := make([]interface{}, 0, 0+0)

	retVal := r.p.Call("getContent", args...)
	return retVal
}

// GetEffect calls the GetEffect method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#geteffect
func (r *RoadProceduralTexture) GetEffect() *Effect {

	args := make([]interface{}, 0, 0+0)

	retVal := r.p.Call("getEffect", args...)
	return EffectFromJSObject(retVal, r.ctx)
}

// GetInternalTexture calls the GetInternalTexture method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#getinternaltexture
func (r *RoadProceduralTexture) GetInternalTexture() *InternalTexture {

	args := make([]interface{}, 0, 0+0)

	retVal := r.p.Call("getInternalTexture", args...)
	return InternalTextureFromJSObject(retVal, r.ctx)
}

// GetReflectionTextureMatrix calls the GetReflectionTextureMatrix method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#getreflectiontexturematrix
func (r *RoadProceduralTexture) GetReflectionTextureMatrix() *Matrix {

	args := make([]interface{}, 0, 0+0)

	retVal := r.p.Call("getReflectionTextureMatrix", args...)
	return MatrixFromJSObject(retVal, r.ctx)
}

// GetRenderSize calls the GetRenderSize method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#getrendersize
func (r *RoadProceduralTexture) GetRenderSize() float64 {

	args := make([]interface{}, 0, 0+0)

	retVal := r.p.Call("getRenderSize", args...)
	return retVal.Float()
}

// GetScene calls the GetScene method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#getscene
func (r *RoadProceduralTexture) GetScene() *Scene {

	args := make([]interface{}, 0, 0+0)

	retVal := r.p.Call("getScene", args...)
	return SceneFromJSObject(retVal, r.ctx)
}

// GetSize calls the GetSize method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#getsize
func (r *RoadProceduralTexture) GetSize() js.Value {

	args := make([]interface{}, 0, 0+0)

	retVal := r.p.Call("getSize", args...)
	return retVal
}

// RoadProceduralTextureGetTextureMatrixOpts contains optional parameters for RoadProceduralTexture.GetTextureMatrix.
type RoadProceduralTextureGetTextureMatrixOpts struct {
	UBase *float64
}

// GetTextureMatrix calls the GetTextureMatrix method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#gettexturematrix
func (r *RoadProceduralTexture) GetTextureMatrix(opts *RoadProceduralTextureGetTextureMatrixOpts) *Matrix {
	if opts == nil {
		opts = &RoadProceduralTextureGetTextureMatrixOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.UBase == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UBase)
	}

	retVal := r.p.Call("getTextureMatrix", args...)
	return MatrixFromJSObject(retVal, r.ctx)
}

// IsReady calls the IsReady method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#isready
func (r *RoadProceduralTexture) IsReady() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := r.p.Call("isReady", args...)
	return retVal.Bool()
}

// IsReadyOrNotBlocking calls the IsReadyOrNotBlocking method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#isreadyornotblocking
func (r *RoadProceduralTexture) IsReadyOrNotBlocking() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := r.p.Call("isReadyOrNotBlocking", args...)
	return retVal.Bool()
}

// RoadProceduralTextureLoadFromDataStringOpts contains optional parameters for RoadProceduralTexture.LoadFromDataString.
type RoadProceduralTextureLoadFromDataStringOpts struct {
	DeleteBuffer *bool
	NoMipmap     *bool
	InvertY      *bool
	SamplingMode *float64
	OnLoad       *func()
	OnError      *func()
	Format       *float64
}

// LoadFromDataString calls the LoadFromDataString method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#loadfromdatastring
func (r *RoadProceduralTexture) LoadFromDataString(name string, buffer interface{}, scene *Scene, opts *RoadProceduralTextureLoadFromDataStringOpts) *Texture {
	if opts == nil {
		opts = &RoadProceduralTextureLoadFromDataStringOpts{}
	}

	args := make([]interface{}, 0, 3+7)

	args = append(args, name)
	args = append(args, buffer)
	args = append(args, scene.JSObject())

	if opts.DeleteBuffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DeleteBuffer)
	}
	if opts.NoMipmap == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoMipmap)
	}
	if opts.InvertY == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.InvertY)
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.OnLoad == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnLoad)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}
	if opts.Format == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Format)
	}

	retVal := r.p.Call("LoadFromDataString", args...)
	return TextureFromJSObject(retVal, r.ctx)
}

// Parse calls the Parse method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#parse
func (r *RoadProceduralTexture) Parse(parsedTexture interface{}, scene *Scene, rootUrl string) *RoadProceduralTexture {

	args := make([]interface{}, 0, 3+0)

	args = append(args, parsedTexture)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := r.p.Call("Parse", args...)
	return RoadProceduralTextureFromJSObject(retVal, r.ctx)
}

// RoadProceduralTextureReadPixelsOpts contains optional parameters for RoadProceduralTexture.ReadPixels.
type RoadProceduralTextureReadPixelsOpts struct {
	FaceIndex *float64
	Level     *float64
	Buffer    js.Value
}

// ReadPixels calls the ReadPixels method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#readpixels
func (r *RoadProceduralTexture) ReadPixels(opts *RoadProceduralTextureReadPixelsOpts) js.Value {
	if opts == nil {
		opts = &RoadProceduralTextureReadPixelsOpts{}
	}

	args := make([]interface{}, 0, 0+3)

	if opts.FaceIndex == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FaceIndex)
	}
	if opts.Level == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Level)
	}
	if opts.Buffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Buffer)
	}

	retVal := r.p.Call("readPixels", args...)
	return retVal
}

// ReleaseInternalTexture calls the ReleaseInternalTexture method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#releaseinternaltexture
func (r *RoadProceduralTexture) ReleaseInternalTexture() {

	args := make([]interface{}, 0, 0+0)

	r.p.Call("releaseInternalTexture", args...)
}

// RoadProceduralTextureRenderOpts contains optional parameters for RoadProceduralTexture.Render.
type RoadProceduralTextureRenderOpts struct {
	UseCameraPostProcess *bool
}

// Render calls the Render method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#render
func (r *RoadProceduralTexture) Render(opts *RoadProceduralTextureRenderOpts) {
	if opts == nil {
		opts = &RoadProceduralTextureRenderOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.UseCameraPostProcess == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseCameraPostProcess)
	}

	r.p.Call("render", args...)
}

// Reset calls the Reset method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#reset
func (r *RoadProceduralTexture) Reset() {

	args := make([]interface{}, 0, 0+0)

	r.p.Call("reset", args...)
}

// ResetRefreshCounter calls the ResetRefreshCounter method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#resetrefreshcounter
func (r *RoadProceduralTexture) ResetRefreshCounter() {

	args := make([]interface{}, 0, 0+0)

	r.p.Call("resetRefreshCounter", args...)
}

// Resize calls the Resize method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#resize
func (r *RoadProceduralTexture) Resize(size float64, generateMipMaps bool) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, size)
	args = append(args, generateMipMaps)

	r.p.Call("resize", args...)
}

// Scale calls the Scale method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#scale
func (r *RoadProceduralTexture) Scale(ratio float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, ratio)

	r.p.Call("scale", args...)
}

// Serialize calls the Serialize method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#serialize
func (r *RoadProceduralTexture) Serialize() interface{} {

	args := make([]interface{}, 0, 0+0)

	retVal := r.p.Call("serialize", args...)
	return retVal
}

// SetColor3 calls the SetColor3 method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#setcolor3
func (r *RoadProceduralTexture) SetColor3(name string, value *Color3) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value.JSObject())

	retVal := r.p.Call("setColor3", args...)
	return ProceduralTextureFromJSObject(retVal, r.ctx)
}

// SetColor4 calls the SetColor4 method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#setcolor4
func (r *RoadProceduralTexture) SetColor4(name string, value *Color4) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value.JSObject())

	retVal := r.p.Call("setColor4", args...)
	return ProceduralTextureFromJSObject(retVal, r.ctx)
}

// SetFloat calls the SetFloat method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#setfloat
func (r *RoadProceduralTexture) SetFloat(name string, value float64) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value)

	retVal := r.p.Call("setFloat", args...)
	return ProceduralTextureFromJSObject(retVal, r.ctx)
}

// SetFloats calls the SetFloats method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#setfloats
func (r *RoadProceduralTexture) SetFloats(name string, value float64) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value)

	retVal := r.p.Call("setFloats", args...)
	return ProceduralTextureFromJSObject(retVal, r.ctx)
}

// SetFragment calls the SetFragment method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#setfragment
func (r *RoadProceduralTexture) SetFragment(fragment interface{}) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, fragment)

	r.p.Call("setFragment", args...)
}

// SetInt calls the SetInt method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#setint
func (r *RoadProceduralTexture) SetInt(name string, value float64) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value)

	retVal := r.p.Call("setInt", args...)
	return ProceduralTextureFromJSObject(retVal, r.ctx)
}

// SetMatrix calls the SetMatrix method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#setmatrix
func (r *RoadProceduralTexture) SetMatrix(name string, value *Matrix) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value.JSObject())

	retVal := r.p.Call("setMatrix", args...)
	return ProceduralTextureFromJSObject(retVal, r.ctx)
}

// SetTexture calls the SetTexture method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#settexture
func (r *RoadProceduralTexture) SetTexture(name string, texture *Texture) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, texture.JSObject())

	retVal := r.p.Call("setTexture", args...)
	return ProceduralTextureFromJSObject(retVal, r.ctx)
}

// SetVector2 calls the SetVector2 method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#setvector2
func (r *RoadProceduralTexture) SetVector2(name string, value *Vector2) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value.JSObject())

	retVal := r.p.Call("setVector2", args...)
	return ProceduralTextureFromJSObject(retVal, r.ctx)
}

// SetVector3 calls the SetVector3 method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#setvector3
func (r *RoadProceduralTexture) SetVector3(name string, value *Vector3) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value.JSObject())

	retVal := r.p.Call("setVector3", args...)
	return ProceduralTextureFromJSObject(retVal, r.ctx)
}

// ToString calls the ToString method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#tostring
func (r *RoadProceduralTexture) ToString() string {

	args := make([]interface{}, 0, 0+0)

	retVal := r.p.Call("toString", args...)
	return retVal.String()
}

// UpdateSamplingMode calls the UpdateSamplingMode method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#updatesamplingmode
func (r *RoadProceduralTexture) UpdateSamplingMode(samplingMode float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, samplingMode)

	r.p.Call("updateSamplingMode", args...)
}

// UpdateShaderUniforms calls the UpdateShaderUniforms method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#updateshaderuniforms
func (r *RoadProceduralTexture) UpdateShaderUniforms() {

	args := make([]interface{}, 0, 0+0)

	r.p.Call("updateShaderUniforms", args...)
}

// RoadProceduralTextureUpdateURLOpts contains optional parameters for RoadProceduralTexture.UpdateURL.
type RoadProceduralTextureUpdateURLOpts struct {
	Buffer *string
	OnLoad *func()
}

// UpdateURL calls the UpdateURL method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#updateurl
func (r *RoadProceduralTexture) UpdateURL(url string, opts *RoadProceduralTextureUpdateURLOpts) {
	if opts == nil {
		opts = &RoadProceduralTextureUpdateURLOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, url)

	if opts.Buffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Buffer)
	}
	if opts.OnLoad == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnLoad)
	}

	r.p.Call("updateURL", args...)
}

// WhenAllReady calls the WhenAllReady method on the RoadProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#whenallready
func (r *RoadProceduralTexture) WhenAllReady(textures *BaseTexture, callback func()) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, textures.JSObject())
	args = append(args, callback)

	r.p.Call("WhenAllReady", args...)
}

/*

// Animations returns the Animations property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#animations
func (r *RoadProceduralTexture) Animations(animations *Animation) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(animations.JSObject())
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#animations
func (r *RoadProceduralTexture) SetAnimations(animations *Animation) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(animations.JSObject())
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// AnisotropicFilteringLevel returns the AnisotropicFilteringLevel property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#anisotropicfilteringlevel
func (r *RoadProceduralTexture) AnisotropicFilteringLevel(anisotropicFilteringLevel float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(anisotropicFilteringLevel)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetAnisotropicFilteringLevel sets the AnisotropicFilteringLevel property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#anisotropicfilteringlevel
func (r *RoadProceduralTexture) SetAnisotropicFilteringLevel(anisotropicFilteringLevel float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(anisotropicFilteringLevel)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// AutoClear returns the AutoClear property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#autoclear
func (r *RoadProceduralTexture) AutoClear(autoClear bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(autoClear)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetAutoClear sets the AutoClear property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#autoclear
func (r *RoadProceduralTexture) SetAutoClear(autoClear bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(autoClear)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// BILINEAR_SAMPLINGMODE returns the BILINEAR_SAMPLINGMODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#bilinear_samplingmode
func (r *RoadProceduralTexture) BILINEAR_SAMPLINGMODE(BILINEAR_SAMPLINGMODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(BILINEAR_SAMPLINGMODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetBILINEAR_SAMPLINGMODE sets the BILINEAR_SAMPLINGMODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#bilinear_samplingmode
func (r *RoadProceduralTexture) SetBILINEAR_SAMPLINGMODE(BILINEAR_SAMPLINGMODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(BILINEAR_SAMPLINGMODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// CLAMP_ADDRESSMODE returns the CLAMP_ADDRESSMODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#clamp_addressmode
func (r *RoadProceduralTexture) CLAMP_ADDRESSMODE(CLAMP_ADDRESSMODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(CLAMP_ADDRESSMODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetCLAMP_ADDRESSMODE sets the CLAMP_ADDRESSMODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#clamp_addressmode
func (r *RoadProceduralTexture) SetCLAMP_ADDRESSMODE(CLAMP_ADDRESSMODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(CLAMP_ADDRESSMODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// CUBIC_MODE returns the CUBIC_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#cubic_mode
func (r *RoadProceduralTexture) CUBIC_MODE(CUBIC_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(CUBIC_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetCUBIC_MODE sets the CUBIC_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#cubic_mode
func (r *RoadProceduralTexture) SetCUBIC_MODE(CUBIC_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(CUBIC_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// CanRescale returns the CanRescale property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#canrescale
func (r *RoadProceduralTexture) CanRescale(canRescale bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(canRescale)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetCanRescale sets the CanRescale property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#canrescale
func (r *RoadProceduralTexture) SetCanRescale(canRescale bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(canRescale)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// CoordinatesIndex returns the CoordinatesIndex property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#coordinatesindex
func (r *RoadProceduralTexture) CoordinatesIndex(coordinatesIndex float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(coordinatesIndex)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetCoordinatesIndex sets the CoordinatesIndex property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#coordinatesindex
func (r *RoadProceduralTexture) SetCoordinatesIndex(coordinatesIndex float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(coordinatesIndex)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// CoordinatesMode returns the CoordinatesMode property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#coordinatesmode
func (r *RoadProceduralTexture) CoordinatesMode(coordinatesMode float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(coordinatesMode)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetCoordinatesMode sets the CoordinatesMode property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#coordinatesmode
func (r *RoadProceduralTexture) SetCoordinatesMode(coordinatesMode float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(coordinatesMode)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// DEFAULT_ANISOTROPIC_FILTERING_LEVEL returns the DEFAULT_ANISOTROPIC_FILTERING_LEVEL property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#default_anisotropic_filtering_level
func (r *RoadProceduralTexture) DEFAULT_ANISOTROPIC_FILTERING_LEVEL(DEFAULT_ANISOTROPIC_FILTERING_LEVEL float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(DEFAULT_ANISOTROPIC_FILTERING_LEVEL)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetDEFAULT_ANISOTROPIC_FILTERING_LEVEL sets the DEFAULT_ANISOTROPIC_FILTERING_LEVEL property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#default_anisotropic_filtering_level
func (r *RoadProceduralTexture) SetDEFAULT_ANISOTROPIC_FILTERING_LEVEL(DEFAULT_ANISOTROPIC_FILTERING_LEVEL float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(DEFAULT_ANISOTROPIC_FILTERING_LEVEL)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// DelayLoadState returns the DelayLoadState property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#delayloadstate
func (r *RoadProceduralTexture) DelayLoadState(delayLoadState float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(delayLoadState)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetDelayLoadState sets the DelayLoadState property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#delayloadstate
func (r *RoadProceduralTexture) SetDelayLoadState(delayLoadState float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(delayLoadState)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// EQUIRECTANGULAR_MODE returns the EQUIRECTANGULAR_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#equirectangular_mode
func (r *RoadProceduralTexture) EQUIRECTANGULAR_MODE(EQUIRECTANGULAR_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(EQUIRECTANGULAR_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetEQUIRECTANGULAR_MODE sets the EQUIRECTANGULAR_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#equirectangular_mode
func (r *RoadProceduralTexture) SetEQUIRECTANGULAR_MODE(EQUIRECTANGULAR_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(EQUIRECTANGULAR_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// EXPLICIT_MODE returns the EXPLICIT_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#explicit_mode
func (r *RoadProceduralTexture) EXPLICIT_MODE(EXPLICIT_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(EXPLICIT_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetEXPLICIT_MODE sets the EXPLICIT_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#explicit_mode
func (r *RoadProceduralTexture) SetEXPLICIT_MODE(EXPLICIT_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(EXPLICIT_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// FIXED_EQUIRECTANGULAR_MIRRORED_MODE returns the FIXED_EQUIRECTANGULAR_MIRRORED_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#fixed_equirectangular_mirrored_mode
func (r *RoadProceduralTexture) FIXED_EQUIRECTANGULAR_MIRRORED_MODE(FIXED_EQUIRECTANGULAR_MIRRORED_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(FIXED_EQUIRECTANGULAR_MIRRORED_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetFIXED_EQUIRECTANGULAR_MIRRORED_MODE sets the FIXED_EQUIRECTANGULAR_MIRRORED_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#fixed_equirectangular_mirrored_mode
func (r *RoadProceduralTexture) SetFIXED_EQUIRECTANGULAR_MIRRORED_MODE(FIXED_EQUIRECTANGULAR_MIRRORED_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(FIXED_EQUIRECTANGULAR_MIRRORED_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// FIXED_EQUIRECTANGULAR_MODE returns the FIXED_EQUIRECTANGULAR_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#fixed_equirectangular_mode
func (r *RoadProceduralTexture) FIXED_EQUIRECTANGULAR_MODE(FIXED_EQUIRECTANGULAR_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(FIXED_EQUIRECTANGULAR_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetFIXED_EQUIRECTANGULAR_MODE sets the FIXED_EQUIRECTANGULAR_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#fixed_equirectangular_mode
func (r *RoadProceduralTexture) SetFIXED_EQUIRECTANGULAR_MODE(FIXED_EQUIRECTANGULAR_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(FIXED_EQUIRECTANGULAR_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// GammaSpace returns the GammaSpace property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#gammaspace
func (r *RoadProceduralTexture) GammaSpace(gammaSpace bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(gammaSpace)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetGammaSpace sets the GammaSpace property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#gammaspace
func (r *RoadProceduralTexture) SetGammaSpace(gammaSpace bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(gammaSpace)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// GetAlphaFromRGB returns the GetAlphaFromRGB property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#getalphafromrgb
func (r *RoadProceduralTexture) GetAlphaFromRGB(getAlphaFromRGB bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(getAlphaFromRGB)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetGetAlphaFromRGB sets the GetAlphaFromRGB property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#getalphafromrgb
func (r *RoadProceduralTexture) SetGetAlphaFromRGB(getAlphaFromRGB bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(getAlphaFromRGB)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// HasAlpha returns the HasAlpha property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#hasalpha
func (r *RoadProceduralTexture) HasAlpha(hasAlpha bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(hasAlpha)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetHasAlpha sets the HasAlpha property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#hasalpha
func (r *RoadProceduralTexture) SetHasAlpha(hasAlpha bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(hasAlpha)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// INVCUBIC_MODE returns the INVCUBIC_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#invcubic_mode
func (r *RoadProceduralTexture) INVCUBIC_MODE(INVCUBIC_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(INVCUBIC_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetINVCUBIC_MODE sets the INVCUBIC_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#invcubic_mode
func (r *RoadProceduralTexture) SetINVCUBIC_MODE(INVCUBIC_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(INVCUBIC_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#inspectablecustomproperties
func (r *RoadProceduralTexture) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(inspectableCustomProperties.JSObject())
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#inspectablecustomproperties
func (r *RoadProceduralTexture) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(inspectableCustomProperties.JSObject())
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// InvertY returns the InvertY property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#inverty
func (r *RoadProceduralTexture) InvertY(invertY bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(invertY)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetInvertY sets the InvertY property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#inverty
func (r *RoadProceduralTexture) SetInvertY(invertY bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(invertY)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// InvertZ returns the InvertZ property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#invertz
func (r *RoadProceduralTexture) InvertZ(invertZ bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(invertZ)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetInvertZ sets the InvertZ property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#invertz
func (r *RoadProceduralTexture) SetInvertZ(invertZ bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(invertZ)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// IrradianceTexture returns the IrradianceTexture property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#irradiancetexture
func (r *RoadProceduralTexture) IrradianceTexture(irradianceTexture *BaseTexture) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(irradianceTexture.JSObject())
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIrradianceTexture sets the IrradianceTexture property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#irradiancetexture
func (r *RoadProceduralTexture) SetIrradianceTexture(irradianceTexture *BaseTexture) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(irradianceTexture.JSObject())
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// Is2DArray returns the Is2DArray property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#is2darray
func (r *RoadProceduralTexture) Is2DArray(is2DArray bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(is2DArray)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIs2DArray sets the Is2DArray property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#is2darray
func (r *RoadProceduralTexture) SetIs2DArray(is2DArray bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(is2DArray)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// Is3D returns the Is3D property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#is3d
func (r *RoadProceduralTexture) Is3D(is3D bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(is3D)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIs3D sets the Is3D property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#is3d
func (r *RoadProceduralTexture) SetIs3D(is3D bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(is3D)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// IsBlocking returns the IsBlocking property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#isblocking
func (r *RoadProceduralTexture) IsBlocking(isBlocking bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(isBlocking)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIsBlocking sets the IsBlocking property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#isblocking
func (r *RoadProceduralTexture) SetIsBlocking(isBlocking bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(isBlocking)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// IsCube returns the IsCube property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#iscube
func (r *RoadProceduralTexture) IsCube(isCube bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(isCube)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIsCube sets the IsCube property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#iscube
func (r *RoadProceduralTexture) SetIsCube(isCube bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(isCube)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// IsEnabled returns the IsEnabled property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#isenabled
func (r *RoadProceduralTexture) IsEnabled(isEnabled bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(isEnabled)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIsEnabled sets the IsEnabled property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#isenabled
func (r *RoadProceduralTexture) SetIsEnabled(isEnabled bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(isEnabled)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// IsRGBD returns the IsRGBD property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#isrgbd
func (r *RoadProceduralTexture) IsRGBD(isRGBD bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(isRGBD)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIsRGBD sets the IsRGBD property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#isrgbd
func (r *RoadProceduralTexture) SetIsRGBD(isRGBD bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(isRGBD)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// IsRenderTarget returns the IsRenderTarget property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#isrendertarget
func (r *RoadProceduralTexture) IsRenderTarget(isRenderTarget bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(isRenderTarget)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIsRenderTarget sets the IsRenderTarget property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#isrendertarget
func (r *RoadProceduralTexture) SetIsRenderTarget(isRenderTarget bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(isRenderTarget)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// LINEAR_LINEAR returns the LINEAR_LINEAR property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#linear_linear
func (r *RoadProceduralTexture) LINEAR_LINEAR(LINEAR_LINEAR float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(LINEAR_LINEAR)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_LINEAR sets the LINEAR_LINEAR property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#linear_linear
func (r *RoadProceduralTexture) SetLINEAR_LINEAR(LINEAR_LINEAR float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(LINEAR_LINEAR)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// LINEAR_LINEAR_MIPLINEAR returns the LINEAR_LINEAR_MIPLINEAR property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#linear_linear_miplinear
func (r *RoadProceduralTexture) LINEAR_LINEAR_MIPLINEAR(LINEAR_LINEAR_MIPLINEAR float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(LINEAR_LINEAR_MIPLINEAR)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_LINEAR_MIPLINEAR sets the LINEAR_LINEAR_MIPLINEAR property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#linear_linear_miplinear
func (r *RoadProceduralTexture) SetLINEAR_LINEAR_MIPLINEAR(LINEAR_LINEAR_MIPLINEAR float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(LINEAR_LINEAR_MIPLINEAR)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// LINEAR_LINEAR_MIPNEAREST returns the LINEAR_LINEAR_MIPNEAREST property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#linear_linear_mipnearest
func (r *RoadProceduralTexture) LINEAR_LINEAR_MIPNEAREST(LINEAR_LINEAR_MIPNEAREST float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(LINEAR_LINEAR_MIPNEAREST)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_LINEAR_MIPNEAREST sets the LINEAR_LINEAR_MIPNEAREST property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#linear_linear_mipnearest
func (r *RoadProceduralTexture) SetLINEAR_LINEAR_MIPNEAREST(LINEAR_LINEAR_MIPNEAREST float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(LINEAR_LINEAR_MIPNEAREST)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// LINEAR_NEAREST returns the LINEAR_NEAREST property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#linear_nearest
func (r *RoadProceduralTexture) LINEAR_NEAREST(LINEAR_NEAREST float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(LINEAR_NEAREST)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_NEAREST sets the LINEAR_NEAREST property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#linear_nearest
func (r *RoadProceduralTexture) SetLINEAR_NEAREST(LINEAR_NEAREST float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(LINEAR_NEAREST)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// LINEAR_NEAREST_MIPLINEAR returns the LINEAR_NEAREST_MIPLINEAR property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#linear_nearest_miplinear
func (r *RoadProceduralTexture) LINEAR_NEAREST_MIPLINEAR(LINEAR_NEAREST_MIPLINEAR float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(LINEAR_NEAREST_MIPLINEAR)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_NEAREST_MIPLINEAR sets the LINEAR_NEAREST_MIPLINEAR property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#linear_nearest_miplinear
func (r *RoadProceduralTexture) SetLINEAR_NEAREST_MIPLINEAR(LINEAR_NEAREST_MIPLINEAR float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(LINEAR_NEAREST_MIPLINEAR)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// LINEAR_NEAREST_MIPNEAREST returns the LINEAR_NEAREST_MIPNEAREST property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#linear_nearest_mipnearest
func (r *RoadProceduralTexture) LINEAR_NEAREST_MIPNEAREST(LINEAR_NEAREST_MIPNEAREST float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(LINEAR_NEAREST_MIPNEAREST)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_NEAREST_MIPNEAREST sets the LINEAR_NEAREST_MIPNEAREST property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#linear_nearest_mipnearest
func (r *RoadProceduralTexture) SetLINEAR_NEAREST_MIPNEAREST(LINEAR_NEAREST_MIPNEAREST float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(LINEAR_NEAREST_MIPNEAREST)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// Level returns the Level property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#level
func (r *RoadProceduralTexture) Level(level float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(level)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLevel sets the Level property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#level
func (r *RoadProceduralTexture) SetLevel(level float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(level)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// LinearSpecularLOD returns the LinearSpecularLOD property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#linearspecularlod
func (r *RoadProceduralTexture) LinearSpecularLOD(linearSpecularLOD bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(linearSpecularLOD)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLinearSpecularLOD sets the LinearSpecularLOD property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#linearspecularlod
func (r *RoadProceduralTexture) SetLinearSpecularLOD(linearSpecularLOD bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(linearSpecularLOD)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// LodGenerationOffset returns the LodGenerationOffset property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#lodgenerationoffset
func (r *RoadProceduralTexture) LodGenerationOffset(lodGenerationOffset float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(lodGenerationOffset)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLodGenerationOffset sets the LodGenerationOffset property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#lodgenerationoffset
func (r *RoadProceduralTexture) SetLodGenerationOffset(lodGenerationOffset float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(lodGenerationOffset)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// LodGenerationScale returns the LodGenerationScale property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#lodgenerationscale
func (r *RoadProceduralTexture) LodGenerationScale(lodGenerationScale float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(lodGenerationScale)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLodGenerationScale sets the LodGenerationScale property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#lodgenerationscale
func (r *RoadProceduralTexture) SetLodGenerationScale(lodGenerationScale float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(lodGenerationScale)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// MIRROR_ADDRESSMODE returns the MIRROR_ADDRESSMODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#mirror_addressmode
func (r *RoadProceduralTexture) MIRROR_ADDRESSMODE(MIRROR_ADDRESSMODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(MIRROR_ADDRESSMODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetMIRROR_ADDRESSMODE sets the MIRROR_ADDRESSMODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#mirror_addressmode
func (r *RoadProceduralTexture) SetMIRROR_ADDRESSMODE(MIRROR_ADDRESSMODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(MIRROR_ADDRESSMODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#metadata
func (r *RoadProceduralTexture) Metadata(metadata interface{}) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(metadata)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#metadata
func (r *RoadProceduralTexture) SetMetadata(metadata interface{}) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(metadata)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// NEAREST_LINEAR returns the NEAREST_LINEAR property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nearest_linear
func (r *RoadProceduralTexture) NEAREST_LINEAR(NEAREST_LINEAR float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(NEAREST_LINEAR)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_LINEAR sets the NEAREST_LINEAR property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nearest_linear
func (r *RoadProceduralTexture) SetNEAREST_LINEAR(NEAREST_LINEAR float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(NEAREST_LINEAR)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// NEAREST_LINEAR_MIPLINEAR returns the NEAREST_LINEAR_MIPLINEAR property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nearest_linear_miplinear
func (r *RoadProceduralTexture) NEAREST_LINEAR_MIPLINEAR(NEAREST_LINEAR_MIPLINEAR float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(NEAREST_LINEAR_MIPLINEAR)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_LINEAR_MIPLINEAR sets the NEAREST_LINEAR_MIPLINEAR property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nearest_linear_miplinear
func (r *RoadProceduralTexture) SetNEAREST_LINEAR_MIPLINEAR(NEAREST_LINEAR_MIPLINEAR float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(NEAREST_LINEAR_MIPLINEAR)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// NEAREST_LINEAR_MIPNEAREST returns the NEAREST_LINEAR_MIPNEAREST property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nearest_linear_mipnearest
func (r *RoadProceduralTexture) NEAREST_LINEAR_MIPNEAREST(NEAREST_LINEAR_MIPNEAREST float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(NEAREST_LINEAR_MIPNEAREST)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_LINEAR_MIPNEAREST sets the NEAREST_LINEAR_MIPNEAREST property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nearest_linear_mipnearest
func (r *RoadProceduralTexture) SetNEAREST_LINEAR_MIPNEAREST(NEAREST_LINEAR_MIPNEAREST float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(NEAREST_LINEAR_MIPNEAREST)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// NEAREST_NEAREST returns the NEAREST_NEAREST property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nearest_nearest
func (r *RoadProceduralTexture) NEAREST_NEAREST(NEAREST_NEAREST float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(NEAREST_NEAREST)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_NEAREST sets the NEAREST_NEAREST property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nearest_nearest
func (r *RoadProceduralTexture) SetNEAREST_NEAREST(NEAREST_NEAREST float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(NEAREST_NEAREST)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// NEAREST_NEAREST_MIPLINEAR returns the NEAREST_NEAREST_MIPLINEAR property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nearest_nearest_miplinear
func (r *RoadProceduralTexture) NEAREST_NEAREST_MIPLINEAR(NEAREST_NEAREST_MIPLINEAR float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(NEAREST_NEAREST_MIPLINEAR)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_NEAREST_MIPLINEAR sets the NEAREST_NEAREST_MIPLINEAR property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nearest_nearest_miplinear
func (r *RoadProceduralTexture) SetNEAREST_NEAREST_MIPLINEAR(NEAREST_NEAREST_MIPLINEAR float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(NEAREST_NEAREST_MIPLINEAR)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// NEAREST_NEAREST_MIPNEAREST returns the NEAREST_NEAREST_MIPNEAREST property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nearest_nearest_mipnearest
func (r *RoadProceduralTexture) NEAREST_NEAREST_MIPNEAREST(NEAREST_NEAREST_MIPNEAREST float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(NEAREST_NEAREST_MIPNEAREST)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_NEAREST_MIPNEAREST sets the NEAREST_NEAREST_MIPNEAREST property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nearest_nearest_mipnearest
func (r *RoadProceduralTexture) SetNEAREST_NEAREST_MIPNEAREST(NEAREST_NEAREST_MIPNEAREST float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(NEAREST_NEAREST_MIPNEAREST)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// NEAREST_SAMPLINGMODE returns the NEAREST_SAMPLINGMODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nearest_samplingmode
func (r *RoadProceduralTexture) NEAREST_SAMPLINGMODE(NEAREST_SAMPLINGMODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(NEAREST_SAMPLINGMODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_SAMPLINGMODE sets the NEAREST_SAMPLINGMODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nearest_samplingmode
func (r *RoadProceduralTexture) SetNEAREST_SAMPLINGMODE(NEAREST_SAMPLINGMODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(NEAREST_SAMPLINGMODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#name
func (r *RoadProceduralTexture) Name(name string) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(name)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#name
func (r *RoadProceduralTexture) SetName(name string) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(name)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// NoMipmap returns the NoMipmap property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nomipmap
func (r *RoadProceduralTexture) NoMipmap(noMipmap bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(noMipmap)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNoMipmap sets the NoMipmap property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#nomipmap
func (r *RoadProceduralTexture) SetNoMipmap(noMipmap bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(noMipmap)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#ondispose
func (r *RoadProceduralTexture) OnDispose(onDispose func()) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(onDispose)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#ondispose
func (r *RoadProceduralTexture) SetOnDispose(onDispose func()) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(onDispose)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#ondisposeobservable
func (r *RoadProceduralTexture) OnDisposeObservable(onDisposeObservable *Observable) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(onDisposeObservable.JSObject())
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#ondisposeobservable
func (r *RoadProceduralTexture) SetOnDisposeObservable(onDisposeObservable *Observable) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(onDisposeObservable.JSObject())
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// OnGenerated returns the OnGenerated property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#ongenerated
func (r *RoadProceduralTexture) OnGenerated(onGenerated func()) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(onGenerated)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetOnGenerated sets the OnGenerated property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#ongenerated
func (r *RoadProceduralTexture) SetOnGenerated(onGenerated func()) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(onGenerated)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// OnGeneratedObservable returns the OnGeneratedObservable property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#ongeneratedobservable
func (r *RoadProceduralTexture) OnGeneratedObservable(onGeneratedObservable *Observable) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(onGeneratedObservable.JSObject())
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetOnGeneratedObservable sets the OnGeneratedObservable property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#ongeneratedobservable
func (r *RoadProceduralTexture) SetOnGeneratedObservable(onGeneratedObservable *Observable) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(onGeneratedObservable.JSObject())
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// OnLoadObservable returns the OnLoadObservable property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#onloadobservable
func (r *RoadProceduralTexture) OnLoadObservable(onLoadObservable *Observable) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(onLoadObservable.JSObject())
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetOnLoadObservable sets the OnLoadObservable property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#onloadobservable
func (r *RoadProceduralTexture) SetOnLoadObservable(onLoadObservable *Observable) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(onLoadObservable.JSObject())
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// PLANAR_MODE returns the PLANAR_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#planar_mode
func (r *RoadProceduralTexture) PLANAR_MODE(PLANAR_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(PLANAR_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetPLANAR_MODE sets the PLANAR_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#planar_mode
func (r *RoadProceduralTexture) SetPLANAR_MODE(PLANAR_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(PLANAR_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// PROJECTION_MODE returns the PROJECTION_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#projection_mode
func (r *RoadProceduralTexture) PROJECTION_MODE(PROJECTION_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(PROJECTION_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetPROJECTION_MODE sets the PROJECTION_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#projection_mode
func (r *RoadProceduralTexture) SetPROJECTION_MODE(PROJECTION_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(PROJECTION_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// RefreshRate returns the RefreshRate property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#refreshrate
func (r *RoadProceduralTexture) RefreshRate(refreshRate float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(refreshRate)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetRefreshRate sets the RefreshRate property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#refreshrate
func (r *RoadProceduralTexture) SetRefreshRate(refreshRate float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(refreshRate)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#reserveddatastore
func (r *RoadProceduralTexture) ReservedDataStore(reservedDataStore interface{}) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(reservedDataStore)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#reserveddatastore
func (r *RoadProceduralTexture) SetReservedDataStore(reservedDataStore interface{}) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(reservedDataStore)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// RoadColor returns the RoadColor property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#roadcolor
func (r *RoadProceduralTexture) RoadColor(roadColor *Color3) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(roadColor.JSObject())
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetRoadColor sets the RoadColor property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#roadcolor
func (r *RoadProceduralTexture) SetRoadColor(roadColor *Color3) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(roadColor.JSObject())
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SKYBOX_MODE returns the SKYBOX_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#skybox_mode
func (r *RoadProceduralTexture) SKYBOX_MODE(SKYBOX_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(SKYBOX_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetSKYBOX_MODE sets the SKYBOX_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#skybox_mode
func (r *RoadProceduralTexture) SetSKYBOX_MODE(SKYBOX_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(SKYBOX_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SPHERICAL_MODE returns the SPHERICAL_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#spherical_mode
func (r *RoadProceduralTexture) SPHERICAL_MODE(SPHERICAL_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(SPHERICAL_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetSPHERICAL_MODE sets the SPHERICAL_MODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#spherical_mode
func (r *RoadProceduralTexture) SetSPHERICAL_MODE(SPHERICAL_MODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(SPHERICAL_MODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SamplingMode returns the SamplingMode property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#samplingmode
func (r *RoadProceduralTexture) SamplingMode(samplingMode float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(samplingMode)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetSamplingMode sets the SamplingMode property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#samplingmode
func (r *RoadProceduralTexture) SetSamplingMode(samplingMode float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(samplingMode)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SerializeBuffers returns the SerializeBuffers property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#serializebuffers
func (r *RoadProceduralTexture) SerializeBuffers(SerializeBuffers bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(SerializeBuffers)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetSerializeBuffers sets the SerializeBuffers property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#serializebuffers
func (r *RoadProceduralTexture) SetSerializeBuffers(SerializeBuffers bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(SerializeBuffers)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// TRILINEAR_SAMPLINGMODE returns the TRILINEAR_SAMPLINGMODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#trilinear_samplingmode
func (r *RoadProceduralTexture) TRILINEAR_SAMPLINGMODE(TRILINEAR_SAMPLINGMODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(TRILINEAR_SAMPLINGMODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetTRILINEAR_SAMPLINGMODE sets the TRILINEAR_SAMPLINGMODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#trilinear_samplingmode
func (r *RoadProceduralTexture) SetTRILINEAR_SAMPLINGMODE(TRILINEAR_SAMPLINGMODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(TRILINEAR_SAMPLINGMODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// TextureFormat returns the TextureFormat property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#textureformat
func (r *RoadProceduralTexture) TextureFormat(textureFormat float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(textureFormat)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetTextureFormat sets the TextureFormat property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#textureformat
func (r *RoadProceduralTexture) SetTextureFormat(textureFormat float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(textureFormat)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// TextureType returns the TextureType property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#texturetype
func (r *RoadProceduralTexture) TextureType(textureType float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(textureType)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetTextureType sets the TextureType property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#texturetype
func (r *RoadProceduralTexture) SetTextureType(textureType float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(textureType)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// UAng returns the UAng property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#uang
func (r *RoadProceduralTexture) UAng(uAng float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(uAng)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetUAng sets the UAng property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#uang
func (r *RoadProceduralTexture) SetUAng(uAng float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(uAng)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// UOffset returns the UOffset property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#uoffset
func (r *RoadProceduralTexture) UOffset(uOffset float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(uOffset)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetUOffset sets the UOffset property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#uoffset
func (r *RoadProceduralTexture) SetUOffset(uOffset float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(uOffset)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// URotationCenter returns the URotationCenter property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#urotationcenter
func (r *RoadProceduralTexture) URotationCenter(uRotationCenter float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(uRotationCenter)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetURotationCenter sets the URotationCenter property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#urotationcenter
func (r *RoadProceduralTexture) SetURotationCenter(uRotationCenter float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(uRotationCenter)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// UScale returns the UScale property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#uscale
func (r *RoadProceduralTexture) UScale(uScale float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(uScale)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetUScale sets the UScale property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#uscale
func (r *RoadProceduralTexture) SetUScale(uScale float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(uScale)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// Uid returns the Uid property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#uid
func (r *RoadProceduralTexture) Uid(uid string) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(uid)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetUid sets the Uid property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#uid
func (r *RoadProceduralTexture) SetUid(uid string) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(uid)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#uniqueid
func (r *RoadProceduralTexture) UniqueId(uniqueId float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(uniqueId)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#uniqueid
func (r *RoadProceduralTexture) SetUniqueId(uniqueId float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(uniqueId)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// Url returns the Url property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#url
func (r *RoadProceduralTexture) Url(url string) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(url)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetUrl sets the Url property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#url
func (r *RoadProceduralTexture) SetUrl(url string) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(url)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// UseSerializedUrlIfAny returns the UseSerializedUrlIfAny property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#useserializedurlifany
func (r *RoadProceduralTexture) UseSerializedUrlIfAny(UseSerializedUrlIfAny bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(UseSerializedUrlIfAny)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetUseSerializedUrlIfAny sets the UseSerializedUrlIfAny property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#useserializedurlifany
func (r *RoadProceduralTexture) SetUseSerializedUrlIfAny(UseSerializedUrlIfAny bool) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(UseSerializedUrlIfAny)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// VAng returns the VAng property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#vang
func (r *RoadProceduralTexture) VAng(vAng float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(vAng)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetVAng sets the VAng property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#vang
func (r *RoadProceduralTexture) SetVAng(vAng float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(vAng)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// VOffset returns the VOffset property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#voffset
func (r *RoadProceduralTexture) VOffset(vOffset float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(vOffset)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetVOffset sets the VOffset property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#voffset
func (r *RoadProceduralTexture) SetVOffset(vOffset float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(vOffset)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// VRotationCenter returns the VRotationCenter property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#vrotationcenter
func (r *RoadProceduralTexture) VRotationCenter(vRotationCenter float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(vRotationCenter)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetVRotationCenter sets the VRotationCenter property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#vrotationcenter
func (r *RoadProceduralTexture) SetVRotationCenter(vRotationCenter float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(vRotationCenter)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// VScale returns the VScale property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#vscale
func (r *RoadProceduralTexture) VScale(vScale float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(vScale)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetVScale sets the VScale property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#vscale
func (r *RoadProceduralTexture) SetVScale(vScale float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(vScale)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// WAng returns the WAng property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#wang
func (r *RoadProceduralTexture) WAng(wAng float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(wAng)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetWAng sets the WAng property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#wang
func (r *RoadProceduralTexture) SetWAng(wAng float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(wAng)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// WRAP_ADDRESSMODE returns the WRAP_ADDRESSMODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#wrap_addressmode
func (r *RoadProceduralTexture) WRAP_ADDRESSMODE(WRAP_ADDRESSMODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(WRAP_ADDRESSMODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetWRAP_ADDRESSMODE sets the WRAP_ADDRESSMODE property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#wrap_addressmode
func (r *RoadProceduralTexture) SetWRAP_ADDRESSMODE(WRAP_ADDRESSMODE float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(WRAP_ADDRESSMODE)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// WRotationCenter returns the WRotationCenter property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#wrotationcenter
func (r *RoadProceduralTexture) WRotationCenter(wRotationCenter float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(wRotationCenter)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetWRotationCenter sets the WRotationCenter property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#wrotationcenter
func (r *RoadProceduralTexture) SetWRotationCenter(wRotationCenter float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(wRotationCenter)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// WrapR returns the WrapR property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#wrapr
func (r *RoadProceduralTexture) WrapR(wrapR float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(wrapR)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetWrapR sets the WrapR property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#wrapr
func (r *RoadProceduralTexture) SetWrapR(wrapR float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(wrapR)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// WrapU returns the WrapU property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#wrapu
func (r *RoadProceduralTexture) WrapU(wrapU float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(wrapU)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetWrapU sets the WrapU property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#wrapu
func (r *RoadProceduralTexture) SetWrapU(wrapU float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(wrapU)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// WrapV returns the WrapV property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#wrapv
func (r *RoadProceduralTexture) WrapV(wrapV float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(wrapV)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

// SetWrapV sets the WrapV property of class RoadProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.roadproceduraltexture#wrapv
func (r *RoadProceduralTexture) SetWrapV(wrapV float64) *RoadProceduralTexture {
	p := ba.ctx.Get("RoadProceduralTexture").New(wrapV)
	return RoadProceduralTextureFromJSObject(p, ba.ctx)
}

*/
