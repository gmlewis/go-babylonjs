// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MaterialDefines represents a babylon.js MaterialDefines.
// Manages the defines for the Material
type MaterialDefines struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MaterialDefines) JSObject() js.Value { return m.p }

// MaterialDefines returns a MaterialDefines JavaScript class.
func (ba *Babylon) MaterialDefines() *MaterialDefines {
	p := ba.ctx.Get("MaterialDefines")
	return MaterialDefinesFromJSObject(p, ba.ctx)
}

// MaterialDefinesFromJSObject returns a wrapped MaterialDefines JavaScript class.
func MaterialDefinesFromJSObject(p js.Value, ctx js.Value) *MaterialDefines {
	return &MaterialDefines{p: p, ctx: ctx}
}

// MaterialDefinesArrayToJSArray returns a JavaScript Array for the wrapped array.
func MaterialDefinesArrayToJSArray(array []*MaterialDefines) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// CloneTo calls the CloneTo method on the MaterialDefines object.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#cloneto
func (m *MaterialDefines) CloneTo(other *MaterialDefines) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, other.JSObject())

	m.p.Call("cloneTo", args...)
}

// IsEqual calls the IsEqual method on the MaterialDefines object.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#isequal
func (m *MaterialDefines) IsEqual(other *MaterialDefines) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, other.JSObject())

	retVal := m.p.Call("isEqual", args...)
	return retVal.Bool()
}

// MarkAllAsDirty calls the MarkAllAsDirty method on the MaterialDefines object.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#markallasdirty
func (m *MaterialDefines) MarkAllAsDirty() {

	m.p.Call("markAllAsDirty")
}

// MarkAsAttributesDirty calls the MarkAsAttributesDirty method on the MaterialDefines object.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#markasattributesdirty
func (m *MaterialDefines) MarkAsAttributesDirty() {

	m.p.Call("markAsAttributesDirty")
}

// MarkAsFresnelDirty calls the MarkAsFresnelDirty method on the MaterialDefines object.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#markasfresneldirty
func (m *MaterialDefines) MarkAsFresnelDirty() {

	m.p.Call("markAsFresnelDirty")
}

// MarkAsImageProcessingDirty calls the MarkAsImageProcessingDirty method on the MaterialDefines object.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#markasimageprocessingdirty
func (m *MaterialDefines) MarkAsImageProcessingDirty() {

	m.p.Call("markAsImageProcessingDirty")
}

// MaterialDefinesMarkAsLightDirtyOpts contains optional parameters for MaterialDefines.MarkAsLightDirty.
type MaterialDefinesMarkAsLightDirtyOpts struct {
	Disposed *bool
}

// MarkAsLightDirty calls the MarkAsLightDirty method on the MaterialDefines object.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#markaslightdirty
func (m *MaterialDefines) MarkAsLightDirty(opts *MaterialDefinesMarkAsLightDirtyOpts) {
	if opts == nil {
		opts = &MaterialDefinesMarkAsLightDirtyOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Disposed == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Disposed)
	}

	m.p.Call("markAsLightDirty", args...)
}

// MarkAsMiscDirty calls the MarkAsMiscDirty method on the MaterialDefines object.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#markasmiscdirty
func (m *MaterialDefines) MarkAsMiscDirty() {

	m.p.Call("markAsMiscDirty")
}

// MarkAsProcessed calls the MarkAsProcessed method on the MaterialDefines object.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#markasprocessed
func (m *MaterialDefines) MarkAsProcessed() {

	m.p.Call("markAsProcessed")
}

// MarkAsTexturesDirty calls the MarkAsTexturesDirty method on the MaterialDefines object.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#markastexturesdirty
func (m *MaterialDefines) MarkAsTexturesDirty() {

	m.p.Call("markAsTexturesDirty")
}

// MarkAsUnprocessed calls the MarkAsUnprocessed method on the MaterialDefines object.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#markasunprocessed
func (m *MaterialDefines) MarkAsUnprocessed() {

	m.p.Call("markAsUnprocessed")
}

// Rebuild calls the Rebuild method on the MaterialDefines object.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#rebuild
func (m *MaterialDefines) Rebuild() {

	m.p.Call("rebuild")
}

// Reset calls the Reset method on the MaterialDefines object.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#reset
func (m *MaterialDefines) Reset() {

	m.p.Call("reset")
}

// ToString calls the ToString method on the MaterialDefines object.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#tostring
func (m *MaterialDefines) ToString() string {

	retVal := m.p.Call("toString")
	return retVal.String()
}

// IsDirty returns the IsDirty property of class MaterialDefines.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#isdirty
func (m *MaterialDefines) IsDirty() bool {
	retVal := m.p.Get("isDirty")
	return retVal.Bool()
}

// SetIsDirty sets the IsDirty property of class MaterialDefines.
//
// https://doc.babylonjs.com/api/classes/babylon.materialdefines#isdirty
func (m *MaterialDefines) SetIsDirty(isDirty bool) *MaterialDefines {
	m.p.Set("isDirty", isDirty)
	return m
}
