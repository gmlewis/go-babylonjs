// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DistanceJoint represents a babylon.js DistanceJoint.
// A class representing a physics distance joint
//
// See: https://doc.babylonjs.com/how_to/using_the_physics_engine
type DistanceJoint struct {
	*PhysicsJoint
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DistanceJoint) JSObject() js.Value { return d.p }

// DistanceJoint returns a DistanceJoint JavaScript class.
func (ba *Babylon) DistanceJoint() *DistanceJoint {
	p := ba.ctx.Get("DistanceJoint")
	return DistanceJointFromJSObject(p, ba.ctx)
}

// DistanceJointFromJSObject returns a wrapped DistanceJoint JavaScript class.
func DistanceJointFromJSObject(p js.Value, ctx js.Value) *DistanceJoint {
	return &DistanceJoint{PhysicsJoint: PhysicsJointFromJSObject(p, ctx), ctx: ctx}
}

// DistanceJointArrayToJSArray returns a JavaScript Array for the wrapped array.
func DistanceJointArrayToJSArray(array []*DistanceJoint) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDistanceJoint returns a new DistanceJoint object.
//
// https://doc.babylonjs.com/api/classes/babylon.distancejoint#constructor
func (ba *Babylon) NewDistanceJoint(jointData js.Value) *DistanceJoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, jointData)

	p := ba.ctx.Get("DistanceJoint").New(args...)
	return DistanceJointFromJSObject(p, ba.ctx)
}

// DistanceJointUpdateDistanceOpts contains optional parameters for DistanceJoint.UpdateDistance.
type DistanceJointUpdateDistanceOpts struct {
	MinDistance *float64
}

// UpdateDistance calls the UpdateDistance method on the DistanceJoint object.
//
// https://doc.babylonjs.com/api/classes/babylon.distancejoint#updatedistance
func (d *DistanceJoint) UpdateDistance(maxDistance float64, opts *DistanceJointUpdateDistanceOpts) {
	if opts == nil {
		opts = &DistanceJointUpdateDistanceOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, maxDistance)

	if opts.MinDistance == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.MinDistance)
	}

	d.p.Call("updateDistance", args...)
}
