// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Geometry represents a babylon.js Geometry.
// Class used to store geometry data (vertex buffers &#43; index buffer)
type Geometry struct{ p js.Value }

// JSObject returns the underlying js.Value.
func (g *Geometry) JSObject() js.Value { return g.p }

// Geometry returns a Geometry JavaScript class.
func (ba *Babylon) Geometry() *Geometry {
	p := ba.ctx.Get("Geometry")
	return GeometryFromJSObject(p)
}

// GeometryFromJSObject returns a wrapped Geometry JavaScript class.
func GeometryFromJSObject(p js.Value) *Geometry {
	return &Geometry{p: p}
}

// NewGeometryOpts contains optional parameters for NewGeometry.
type NewGeometryOpts struct {
	VertexData *VertexData

	Updatable *JSBool

	Mesh *Mesh
}

// NewGeometry returns a new Geometry object.
//
// https://doc.babylonjs.com/api/classes/babylon.geometry
func (ba *Babylon) NewGeometry(id string, scene *Scene, opts *NewGeometryOpts) *Geometry {
	if opts == nil {
		opts = &NewGeometryOpts{}
	}

	p := ba.ctx.Get("Geometry").New(id, scene.JSObject(), opts.VertexData.JSObject(), opts.Updatable.JSObject(), opts.Mesh.JSObject())
	return GeometryFromJSObject(p)
}

// TODO: methods
