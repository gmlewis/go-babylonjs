// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PhysicsImpostorParameters represents a babylon.js PhysicsImpostorParameters.
// The interface for the physics imposter parameters
//
// See: https://doc.babylonjs.com/how_to/using_the_physics_engine
type PhysicsImpostorParameters struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PhysicsImpostorParameters) JSObject() js.Value { return p.p }

// PhysicsImpostorParameters returns a PhysicsImpostorParameters JavaScript class.
func (ba *Babylon) PhysicsImpostorParameters() *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters")
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// PhysicsImpostorParametersFromJSObject returns a wrapped PhysicsImpostorParameters JavaScript class.
func PhysicsImpostorParametersFromJSObject(p js.Value, ctx js.Value) *PhysicsImpostorParameters {
	return &PhysicsImpostorParameters{p: p, ctx: ctx}
}

// PhysicsImpostorParametersArrayToJSArray returns a JavaScript Array for the wrapped array.
func PhysicsImpostorParametersArrayToJSArray(array []*PhysicsImpostorParameters) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Damping returns the Damping property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#damping
func (p *PhysicsImpostorParameters) Damping(damping float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(damping)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// SetDamping sets the Damping property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#damping
func (p *PhysicsImpostorParameters) SetDamping(damping float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(damping)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// DisableBidirectionalTransformation returns the DisableBidirectionalTransformation property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#disablebidirectionaltransformation
func (p *PhysicsImpostorParameters) DisableBidirectionalTransformation(disableBidirectionalTransformation bool) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(disableBidirectionalTransformation)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// SetDisableBidirectionalTransformation sets the DisableBidirectionalTransformation property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#disablebidirectionaltransformation
func (p *PhysicsImpostorParameters) SetDisableBidirectionalTransformation(disableBidirectionalTransformation bool) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(disableBidirectionalTransformation)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// FixedPoints returns the FixedPoints property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#fixedpoints
func (p *PhysicsImpostorParameters) FixedPoints(fixedPoints float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(fixedPoints)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// SetFixedPoints sets the FixedPoints property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#fixedpoints
func (p *PhysicsImpostorParameters) SetFixedPoints(fixedPoints float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(fixedPoints)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// Friction returns the Friction property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#friction
func (p *PhysicsImpostorParameters) Friction(friction float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(friction)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// SetFriction sets the Friction property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#friction
func (p *PhysicsImpostorParameters) SetFriction(friction float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(friction)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// IgnoreParent returns the IgnoreParent property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#ignoreparent
func (p *PhysicsImpostorParameters) IgnoreParent(ignoreParent bool) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(ignoreParent)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// SetIgnoreParent sets the IgnoreParent property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#ignoreparent
func (p *PhysicsImpostorParameters) SetIgnoreParent(ignoreParent bool) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(ignoreParent)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// Margin returns the Margin property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#margin
func (p *PhysicsImpostorParameters) Margin(margin float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(margin)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// SetMargin sets the Margin property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#margin
func (p *PhysicsImpostorParameters) SetMargin(margin float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(margin)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// Mass returns the Mass property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#mass
func (p *PhysicsImpostorParameters) Mass(mass float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(mass)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// SetMass sets the Mass property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#mass
func (p *PhysicsImpostorParameters) SetMass(mass float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(mass)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// NativeOptions returns the NativeOptions property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#nativeoptions
func (p *PhysicsImpostorParameters) NativeOptions(nativeOptions interface{}) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(nativeOptions)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// SetNativeOptions sets the NativeOptions property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#nativeoptions
func (p *PhysicsImpostorParameters) SetNativeOptions(nativeOptions interface{}) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(nativeOptions)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// Path returns the Path property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#path
func (p *PhysicsImpostorParameters) Path(path interface{}) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(path)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// SetPath sets the Path property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#path
func (p *PhysicsImpostorParameters) SetPath(path interface{}) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(path)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// PositionIterations returns the PositionIterations property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#positioniterations
func (p *PhysicsImpostorParameters) PositionIterations(positionIterations float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(positionIterations)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// SetPositionIterations sets the PositionIterations property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#positioniterations
func (p *PhysicsImpostorParameters) SetPositionIterations(positionIterations float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(positionIterations)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// Pressure returns the Pressure property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#pressure
func (p *PhysicsImpostorParameters) Pressure(pressure float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(pressure)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// SetPressure sets the Pressure property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#pressure
func (p *PhysicsImpostorParameters) SetPressure(pressure float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(pressure)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// Restitution returns the Restitution property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#restitution
func (p *PhysicsImpostorParameters) Restitution(restitution float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(restitution)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// SetRestitution sets the Restitution property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#restitution
func (p *PhysicsImpostorParameters) SetRestitution(restitution float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(restitution)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// Shape returns the Shape property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#shape
func (p *PhysicsImpostorParameters) Shape(shape interface{}) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(shape)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// SetShape sets the Shape property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#shape
func (p *PhysicsImpostorParameters) SetShape(shape interface{}) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(shape)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// Stiffness returns the Stiffness property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#stiffness
func (p *PhysicsImpostorParameters) Stiffness(stiffness float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(stiffness)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// SetStiffness sets the Stiffness property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#stiffness
func (p *PhysicsImpostorParameters) SetStiffness(stiffness float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(stiffness)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// VelocityIterations returns the VelocityIterations property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#velocityiterations
func (p *PhysicsImpostorParameters) VelocityIterations(velocityIterations float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(velocityIterations)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

// SetVelocityIterations sets the VelocityIterations property of class PhysicsImpostorParameters.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorparameters#velocityiterations
func (p *PhysicsImpostorParameters) SetVelocityIterations(velocityIterations float64) *PhysicsImpostorParameters {
	p := ba.ctx.Get("PhysicsImpostorParameters").New(velocityIterations)
	return PhysicsImpostorParametersFromJSObject(p, ba.ctx)
}

*/
