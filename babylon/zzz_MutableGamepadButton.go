// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MutableGamepadButton represents a babylon.js MutableGamepadButton.
// Defines the MutableGamepadButton interface for the state of a gamepad button
type MutableGamepadButton struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MutableGamepadButton) JSObject() js.Value { return m.p }

// MutableGamepadButton returns a MutableGamepadButton JavaScript class.
func (ba *Babylon) MutableGamepadButton() *MutableGamepadButton {
	p := ba.ctx.Get("MutableGamepadButton")
	return MutableGamepadButtonFromJSObject(p, ba.ctx)
}

// MutableGamepadButtonFromJSObject returns a wrapped MutableGamepadButton JavaScript class.
func MutableGamepadButtonFromJSObject(p js.Value, ctx js.Value) *MutableGamepadButton {
	return &MutableGamepadButton{p: p, ctx: ctx}
}

// MutableGamepadButtonArrayToJSArray returns a JavaScript Array for the wrapped array.
func MutableGamepadButtonArrayToJSArray(array []*MutableGamepadButton) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Pressed returns the Pressed property of class MutableGamepadButton.
//
// https://doc.babylonjs.com/api/classes/babylon.mutablegamepadbutton#pressed
func (m *MutableGamepadButton) Pressed(pressed bool) *MutableGamepadButton {
	p := ba.ctx.Get("MutableGamepadButton").New(pressed)
	return MutableGamepadButtonFromJSObject(p, ba.ctx)
}

// SetPressed sets the Pressed property of class MutableGamepadButton.
//
// https://doc.babylonjs.com/api/classes/babylon.mutablegamepadbutton#pressed
func (m *MutableGamepadButton) SetPressed(pressed bool) *MutableGamepadButton {
	p := ba.ctx.Get("MutableGamepadButton").New(pressed)
	return MutableGamepadButtonFromJSObject(p, ba.ctx)
}

// Touched returns the Touched property of class MutableGamepadButton.
//
// https://doc.babylonjs.com/api/classes/babylon.mutablegamepadbutton#touched
func (m *MutableGamepadButton) Touched(touched bool) *MutableGamepadButton {
	p := ba.ctx.Get("MutableGamepadButton").New(touched)
	return MutableGamepadButtonFromJSObject(p, ba.ctx)
}

// SetTouched sets the Touched property of class MutableGamepadButton.
//
// https://doc.babylonjs.com/api/classes/babylon.mutablegamepadbutton#touched
func (m *MutableGamepadButton) SetTouched(touched bool) *MutableGamepadButton {
	p := ba.ctx.Get("MutableGamepadButton").New(touched)
	return MutableGamepadButtonFromJSObject(p, ba.ctx)
}

// Value returns the Value property of class MutableGamepadButton.
//
// https://doc.babylonjs.com/api/classes/babylon.mutablegamepadbutton#value
func (m *MutableGamepadButton) Value(value float64) *MutableGamepadButton {
	p := ba.ctx.Get("MutableGamepadButton").New(value)
	return MutableGamepadButtonFromJSObject(p, ba.ctx)
}

// SetValue sets the Value property of class MutableGamepadButton.
//
// https://doc.babylonjs.com/api/classes/babylon.mutablegamepadbutton#value
func (m *MutableGamepadButton) SetValue(value float64) *MutableGamepadButton {
	p := ba.ctx.Get("MutableGamepadButton").New(value)
	return MutableGamepadButtonFromJSObject(p, ba.ctx)
}

*/
