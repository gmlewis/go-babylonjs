// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// HemisphericParticleEmitter represents a babylon.js HemisphericParticleEmitter.
// Particle emitter emitting particles from the inside of a hemisphere.
// It emits the particles alongside the hemisphere radius. The emission direction might be randomized.
type HemisphericParticleEmitter struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (h *HemisphericParticleEmitter) JSObject() js.Value { return h.p }

// HemisphericParticleEmitter returns a HemisphericParticleEmitter JavaScript class.
func (ba *Babylon) HemisphericParticleEmitter() *HemisphericParticleEmitter {
	p := ba.ctx.Get("HemisphericParticleEmitter")
	return HemisphericParticleEmitterFromJSObject(p, ba.ctx)
}

// HemisphericParticleEmitterFromJSObject returns a wrapped HemisphericParticleEmitter JavaScript class.
func HemisphericParticleEmitterFromJSObject(p js.Value, ctx js.Value) *HemisphericParticleEmitter {
	return &HemisphericParticleEmitter{p: p, ctx: ctx}
}

// HemisphericParticleEmitterArrayToJSArray returns a JavaScript Array for the wrapped array.
func HemisphericParticleEmitterArrayToJSArray(array []*HemisphericParticleEmitter) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewHemisphericParticleEmitterOpts contains optional parameters for NewHemisphericParticleEmitter.
type NewHemisphericParticleEmitterOpts struct {
	Radius              *float64
	RadiusRange         *float64
	DirectionRandomizer *float64
}

// NewHemisphericParticleEmitter returns a new HemisphericParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.hemisphericparticleemitter#constructor
func (ba *Babylon) NewHemisphericParticleEmitter(opts *NewHemisphericParticleEmitterOpts) *HemisphericParticleEmitter {
	if opts == nil {
		opts = &NewHemisphericParticleEmitterOpts{}
	}

	args := make([]interface{}, 0, 0+3)

	if opts.Radius == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Radius)
	}
	if opts.RadiusRange == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RadiusRange)
	}
	if opts.DirectionRandomizer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectionRandomizer)
	}

	p := ba.ctx.Get("HemisphericParticleEmitter").New(args...)
	return HemisphericParticleEmitterFromJSObject(p, ba.ctx)
}

// ApplyToShader calls the ApplyToShader method on the HemisphericParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.hemisphericparticleemitter#applytoshader
func (h *HemisphericParticleEmitter) ApplyToShader(effect *Effect) {

	args := make([]interface{}, 0, 1+0)

	if effect == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, effect.JSObject())
	}

	h.p.Call("applyToShader", args...)
}

// Clone calls the Clone method on the HemisphericParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.hemisphericparticleemitter#clone
func (h *HemisphericParticleEmitter) Clone() *HemisphericParticleEmitter {

	retVal := h.p.Call("clone")
	return HemisphericParticleEmitterFromJSObject(retVal, h.ctx)
}

// GetClassName calls the GetClassName method on the HemisphericParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.hemisphericparticleemitter#getclassname
func (h *HemisphericParticleEmitter) GetClassName() string {

	retVal := h.p.Call("getClassName")
	return retVal.String()
}

// GetEffectDefines calls the GetEffectDefines method on the HemisphericParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.hemisphericparticleemitter#geteffectdefines
func (h *HemisphericParticleEmitter) GetEffectDefines() string {

	retVal := h.p.Call("getEffectDefines")
	return retVal.String()
}

// Parse calls the Parse method on the HemisphericParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.hemisphericparticleemitter#parse
func (h *HemisphericParticleEmitter) Parse(serializationObject JSObject) {

	args := make([]interface{}, 0, 1+0)

	if serializationObject == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, serializationObject.JSObject())
	}

	h.p.Call("parse", args...)
}

// Serialize calls the Serialize method on the HemisphericParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.hemisphericparticleemitter#serialize
func (h *HemisphericParticleEmitter) Serialize() js.Value {

	retVal := h.p.Call("serialize")
	return retVal
}

// StartDirectionFunction calls the StartDirectionFunction method on the HemisphericParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.hemisphericparticleemitter#startdirectionfunction
func (h *HemisphericParticleEmitter) StartDirectionFunction(worldMatrix *Matrix, directionToUpdate *Vector3, particle *Particle) {

	args := make([]interface{}, 0, 3+0)

	if worldMatrix == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, worldMatrix.JSObject())
	}

	if directionToUpdate == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, directionToUpdate.JSObject())
	}

	if particle == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, particle.JSObject())
	}

	h.p.Call("startDirectionFunction", args...)
}

// StartPositionFunction calls the StartPositionFunction method on the HemisphericParticleEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.hemisphericparticleemitter#startpositionfunction
func (h *HemisphericParticleEmitter) StartPositionFunction(worldMatrix *Matrix, positionToUpdate *Vector3, particle *Particle) {

	args := make([]interface{}, 0, 3+0)

	if worldMatrix == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, worldMatrix.JSObject())
	}

	if positionToUpdate == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, positionToUpdate.JSObject())
	}

	if particle == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, particle.JSObject())
	}

	h.p.Call("startPositionFunction", args...)
}

// DirectionRandomizer returns the DirectionRandomizer property of class HemisphericParticleEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.hemisphericparticleemitter#directionrandomizer
func (h *HemisphericParticleEmitter) DirectionRandomizer() float64 {
	retVal := h.p.Get("directionRandomizer")
	return retVal.Float()
}

// SetDirectionRandomizer sets the DirectionRandomizer property of class HemisphericParticleEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.hemisphericparticleemitter#directionrandomizer
func (h *HemisphericParticleEmitter) SetDirectionRandomizer(directionRandomizer float64) *HemisphericParticleEmitter {
	h.p.Set("directionRandomizer", directionRandomizer)
	return h
}

// Radius returns the Radius property of class HemisphericParticleEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.hemisphericparticleemitter#radius
func (h *HemisphericParticleEmitter) Radius() float64 {
	retVal := h.p.Get("radius")
	return retVal.Float()
}

// SetRadius sets the Radius property of class HemisphericParticleEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.hemisphericparticleemitter#radius
func (h *HemisphericParticleEmitter) SetRadius(radius float64) *HemisphericParticleEmitter {
	h.p.Set("radius", radius)
	return h
}

// RadiusRange returns the RadiusRange property of class HemisphericParticleEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.hemisphericparticleemitter#radiusrange
func (h *HemisphericParticleEmitter) RadiusRange() float64 {
	retVal := h.p.Get("radiusRange")
	return retVal.Float()
}

// SetRadiusRange sets the RadiusRange property of class HemisphericParticleEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.hemisphericparticleemitter#radiusrange
func (h *HemisphericParticleEmitter) SetRadiusRange(radiusRange float64) *HemisphericParticleEmitter {
	h.p.Set("radiusRange", radiusRange)
	return h
}
