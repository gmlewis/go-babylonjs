// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SphericalHarmonics represents a babylon.js SphericalHarmonics.
// Class representing spherical harmonics coefficients to the 3rd degree
type SphericalHarmonics struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SphericalHarmonics) JSObject() js.Value { return s.p }

// SphericalHarmonics returns a SphericalHarmonics JavaScript class.
func (ba *Babylon) SphericalHarmonics() *SphericalHarmonics {
	p := ba.ctx.Get("SphericalHarmonics")
	return SphericalHarmonicsFromJSObject(p, ba.ctx)
}

// SphericalHarmonicsFromJSObject returns a wrapped SphericalHarmonics JavaScript class.
func SphericalHarmonicsFromJSObject(p js.Value, ctx js.Value) *SphericalHarmonics {
	return &SphericalHarmonics{p: p, ctx: ctx}
}

// SphericalHarmonicsArrayToJSArray returns a JavaScript Array for the wrapped array.
func SphericalHarmonicsArrayToJSArray(array []*SphericalHarmonics) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// AddLight calls the AddLight method on the SphericalHarmonics object.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#addlight
func (s *SphericalHarmonics) AddLight(direction *Vector3, color *Color3, deltaSolidAngle float64) {

	args := make([]interface{}, 0, 3+0)

	if direction == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, direction.JSObject())
	}

	if color == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, color.JSObject())
	}

	args = append(args, deltaSolidAngle)

	s.p.Call("addLight", args...)
}

// ConvertIncidentRadianceToIrradiance calls the ConvertIncidentRadianceToIrradiance method on the SphericalHarmonics object.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#convertincidentradiancetoirradiance
func (s *SphericalHarmonics) ConvertIncidentRadianceToIrradiance() {

	s.p.Call("convertIncidentRadianceToIrradiance")
}

// ConvertIrradianceToLambertianRadiance calls the ConvertIrradianceToLambertianRadiance method on the SphericalHarmonics object.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#convertirradiancetolambertianradiance
func (s *SphericalHarmonics) ConvertIrradianceToLambertianRadiance() {

	s.p.Call("convertIrradianceToLambertianRadiance")
}

// FromArray calls the FromArray method on the SphericalHarmonics object.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#fromarray
func (s *SphericalHarmonics) FromArray(data js.Value) *SphericalHarmonics {

	args := make([]interface{}, 0, 1+0)

	args = append(args, data)

	retVal := s.p.Call("FromArray", args...)
	return SphericalHarmonicsFromJSObject(retVal, s.ctx)
}

// FromPolynomial calls the FromPolynomial method on the SphericalHarmonics object.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#frompolynomial
func (s *SphericalHarmonics) FromPolynomial(polynomial *SphericalPolynomial) *SphericalHarmonics {

	args := make([]interface{}, 0, 1+0)

	if polynomial == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, polynomial.JSObject())
	}

	retVal := s.p.Call("FromPolynomial", args...)
	return SphericalHarmonicsFromJSObject(retVal, s.ctx)
}

// PreScaleForRendering calls the PreScaleForRendering method on the SphericalHarmonics object.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#prescaleforrendering
func (s *SphericalHarmonics) PreScaleForRendering() {

	s.p.Call("preScaleForRendering")
}

// ScaleInPlace calls the ScaleInPlace method on the SphericalHarmonics object.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#scaleinplace
func (s *SphericalHarmonics) ScaleInPlace(scale float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scale)

	s.p.Call("scaleInPlace", args...)
}

// L00 returns the L00 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l00
func (s *SphericalHarmonics) L00() *Vector3 {
	retVal := s.p.Get("l00")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetL00 sets the L00 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l00
func (s *SphericalHarmonics) SetL00(l00 *Vector3) *SphericalHarmonics {
	s.p.Set("l00", l00.JSObject())
	return s
}

// L10 returns the L10 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l10
func (s *SphericalHarmonics) L10() *Vector3 {
	retVal := s.p.Get("l10")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetL10 sets the L10 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l10
func (s *SphericalHarmonics) SetL10(l10 *Vector3) *SphericalHarmonics {
	s.p.Set("l10", l10.JSObject())
	return s
}

// L11 returns the L11 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l11
func (s *SphericalHarmonics) L11() *Vector3 {
	retVal := s.p.Get("l11")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetL11 sets the L11 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l11
func (s *SphericalHarmonics) SetL11(l11 *Vector3) *SphericalHarmonics {
	s.p.Set("l11", l11.JSObject())
	return s
}

// L1_1 returns the L1_1 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l1_1
func (s *SphericalHarmonics) L1_1() *Vector3 {
	retVal := s.p.Get("l1_1")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetL1_1 sets the L1_1 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l1_1
func (s *SphericalHarmonics) SetL1_1(l1_1 *Vector3) *SphericalHarmonics {
	s.p.Set("l1_1", l1_1.JSObject())
	return s
}

// L20 returns the L20 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l20
func (s *SphericalHarmonics) L20() *Vector3 {
	retVal := s.p.Get("l20")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetL20 sets the L20 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l20
func (s *SphericalHarmonics) SetL20(l20 *Vector3) *SphericalHarmonics {
	s.p.Set("l20", l20.JSObject())
	return s
}

// L21 returns the L21 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l21
func (s *SphericalHarmonics) L21() *Vector3 {
	retVal := s.p.Get("l21")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetL21 sets the L21 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l21
func (s *SphericalHarmonics) SetL21(l21 *Vector3) *SphericalHarmonics {
	s.p.Set("l21", l21.JSObject())
	return s
}

// L22 returns the L22 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l22
func (s *SphericalHarmonics) L22() *Vector3 {
	retVal := s.p.Get("l22")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetL22 sets the L22 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l22
func (s *SphericalHarmonics) SetL22(l22 *Vector3) *SphericalHarmonics {
	s.p.Set("l22", l22.JSObject())
	return s
}

// L2_1 returns the L2_1 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l2_1
func (s *SphericalHarmonics) L2_1() *Vector3 {
	retVal := s.p.Get("l2_1")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetL2_1 sets the L2_1 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l2_1
func (s *SphericalHarmonics) SetL2_1(l2_1 *Vector3) *SphericalHarmonics {
	s.p.Set("l2_1", l2_1.JSObject())
	return s
}

// L2_2 returns the L2_2 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l2_2
func (s *SphericalHarmonics) L2_2() *Vector3 {
	retVal := s.p.Get("l2_2")
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetL2_2 sets the L2_2 property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#l2_2
func (s *SphericalHarmonics) SetL2_2(l2_2 *Vector3) *SphericalHarmonics {
	s.p.Set("l2_2", l2_2.JSObject())
	return s
}

// PreScaled returns the PreScaled property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#prescaled
func (s *SphericalHarmonics) PreScaled() bool {
	retVal := s.p.Get("preScaled")
	return retVal.Bool()
}

// SetPreScaled sets the PreScaled property of class SphericalHarmonics.
//
// https://doc.babylonjs.com/api/classes/babylon.sphericalharmonics#prescaled
func (s *SphericalHarmonics) SetPreScaled(preScaled bool) *SphericalHarmonics {
	s.p.Set("preScaled", preScaled)
	return s
}
