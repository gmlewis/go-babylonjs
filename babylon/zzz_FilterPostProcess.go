// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FilterPostProcess represents a babylon.js FilterPostProcess.
// Applies a kernel filter to the image
type FilterPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FilterPostProcess) JSObject() js.Value { return f.p }

// FilterPostProcess returns a FilterPostProcess JavaScript class.
func (ba *Babylon) FilterPostProcess() *FilterPostProcess {
	p := ba.ctx.Get("FilterPostProcess")
	return FilterPostProcessFromJSObject(p, ba.ctx)
}

// FilterPostProcessFromJSObject returns a wrapped FilterPostProcess JavaScript class.
func FilterPostProcessFromJSObject(p js.Value, ctx js.Value) *FilterPostProcess {
	return &FilterPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// FilterPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func FilterPostProcessArrayToJSArray(array []*FilterPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewFilterPostProcessOpts contains optional parameters for NewFilterPostProcess.
type NewFilterPostProcessOpts struct {
	SamplingMode *float64
	Engine       *Engine
	Reusable     *bool
}

// NewFilterPostProcess returns a new FilterPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.filterpostprocess#constructor
func (ba *Babylon) NewFilterPostProcess(name string, kernelMatrix *Matrix, options float64, camera *Camera, opts *NewFilterPostProcessOpts) *FilterPostProcess {
	if opts == nil {
		opts = &NewFilterPostProcessOpts{}
	}

	args := make([]interface{}, 0, 4+3)

	args = append(args, name)
	args = append(args, kernelMatrix.JSObject())
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}

	p := ba.ctx.Get("FilterPostProcess").New(args...)
	return FilterPostProcessFromJSObject(p, ba.ctx)
}

// KernelMatrix returns the KernelMatrix property of class FilterPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.filterpostprocess#kernelmatrix
func (f *FilterPostProcess) KernelMatrix() *Matrix {
	retVal := f.p.Get("kernelMatrix")
	return MatrixFromJSObject(retVal, f.ctx)
}

// SetKernelMatrix sets the KernelMatrix property of class FilterPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.filterpostprocess#kernelmatrix
func (f *FilterPostProcess) SetKernelMatrix(kernelMatrix *Matrix) *FilterPostProcess {
	f.p.Set("kernelMatrix", kernelMatrix.JSObject())
	return f
}
