// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FilterPostProcess represents a babylon.js FilterPostProcess.
// Applies a kernel filter to the image
type FilterPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FilterPostProcess) JSObject() js.Value { return f.p }

// FilterPostProcess returns a FilterPostProcess JavaScript class.
func (ba *Babylon) FilterPostProcess() *FilterPostProcess {
	p := ba.ctx.Get("FilterPostProcess")
	return FilterPostProcessFromJSObject(p, ba.ctx)
}

// FilterPostProcessFromJSObject returns a wrapped FilterPostProcess JavaScript class.
func FilterPostProcessFromJSObject(p js.Value, ctx js.Value) *FilterPostProcess {
	return &FilterPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// NewFilterPostProcessOpts contains optional parameters for NewFilterPostProcess.
type NewFilterPostProcessOpts struct {
	SamplingMode *JSFloat64

	Engine *Engine

	Reusable *JSBool
}

// NewFilterPostProcess returns a new FilterPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.filterpostprocess
func (ba *Babylon) NewFilterPostProcess(name string, kernelMatrix *Matrix, options float64, camera *Camera, opts *NewFilterPostProcessOpts) *FilterPostProcess {
	if opts == nil {
		opts = &NewFilterPostProcessOpts{}
	}

	p := ba.ctx.Get("FilterPostProcess").New(name, kernelMatrix.JSObject(), options, camera.JSObject(), opts.SamplingMode.JSObject(), opts.Engine.JSObject(), opts.Reusable.JSObject())
	return FilterPostProcessFromJSObject(p, ba.ctx)
}

// TODO: methods
