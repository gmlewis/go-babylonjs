// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// EffectWrapper represents a babylon.js EffectWrapper.
// Wraps an effect to be used for rendering
type EffectWrapper struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *EffectWrapper) JSObject() js.Value { return e.p }

// EffectWrapper returns a EffectWrapper JavaScript class.
func (ba *Babylon) EffectWrapper() *EffectWrapper {
	p := ba.ctx.Get("EffectWrapper")
	return EffectWrapperFromJSObject(p, ba.ctx)
}

// EffectWrapperFromJSObject returns a wrapped EffectWrapper JavaScript class.
func EffectWrapperFromJSObject(p js.Value, ctx js.Value) *EffectWrapper {
	return &EffectWrapper{p: p, ctx: ctx}
}

// EffectWrapperArrayToJSArray returns a JavaScript Array for the wrapped array.
func EffectWrapperArrayToJSArray(array []*EffectWrapper) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewEffectWrapper returns a new EffectWrapper object.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrapper
func (ba *Babylon) NewEffectWrapper(creationOptions js.Value) *EffectWrapper {

	args := make([]interface{}, 0, 1+0)

	args = append(args, creationOptions)

	p := ba.ctx.Get("EffectWrapper").New(args...)
	return EffectWrapperFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the EffectWrapper object.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrapper#dispose
func (e *EffectWrapper) Dispose() {

	e.p.Call("dispose")
}

// Effect returns the Effect property of class EffectWrapper.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrapper#effect
func (e *EffectWrapper) Effect() *Effect {
	retVal := e.p.Get("effect")
	return EffectFromJSObject(retVal, e.ctx)
}

// SetEffect sets the Effect property of class EffectWrapper.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrapper#effect
func (e *EffectWrapper) SetEffect(effect *Effect) *EffectWrapper {
	e.p.Set("effect", effect.JSObject())
	return e
}

// OnApplyObservable returns the OnApplyObservable property of class EffectWrapper.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrapper#onapplyobservable
func (e *EffectWrapper) OnApplyObservable() *Observable {
	retVal := e.p.Get("onApplyObservable")
	return ObservableFromJSObject(retVal, e.ctx)
}

// SetOnApplyObservable sets the OnApplyObservable property of class EffectWrapper.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrapper#onapplyobservable
func (e *EffectWrapper) SetOnApplyObservable(onApplyObservable *Observable) *EffectWrapper {
	e.p.Set("onApplyObservable", onApplyObservable.JSObject())
	return e
}
