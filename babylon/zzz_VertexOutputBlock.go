// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// VertexOutputBlock represents a babylon.js VertexOutputBlock.
// Block used to output the vertex position
type VertexOutputBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *VertexOutputBlock) JSObject() js.Value { return v.p }

// VertexOutputBlock returns a VertexOutputBlock JavaScript class.
func (ba *Babylon) VertexOutputBlock() *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock")
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// VertexOutputBlockFromJSObject returns a wrapped VertexOutputBlock JavaScript class.
func VertexOutputBlockFromJSObject(p js.Value, ctx js.Value) *VertexOutputBlock {
	return &VertexOutputBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// VertexOutputBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func VertexOutputBlockArrayToJSArray(array []*VertexOutputBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewVertexOutputBlock returns a new VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock
func (ba *Babylon) NewVertexOutputBlock(name string) *VertexOutputBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("VertexOutputBlock").New(args...)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#autoconfigure
func (v *VertexOutputBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	v.p.Call("autoConfigure", args...)
}

// VertexOutputBlockBindOpts contains optional parameters for VertexOutputBlock.Bind.
type VertexOutputBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#bind
func (v *VertexOutputBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *VertexOutputBlockBindOpts) {
	if opts == nil {
		opts = &VertexOutputBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	v.p.Call("bind", args...)
}

// Build calls the Build method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#build
func (v *VertexOutputBlock) Build(state *NodeMaterialBuildState, activeBlocks *NodeMaterialBlock) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, state.JSObject())
	args = append(args, activeBlocks.JSObject())

	retVal := v.p.Call("build", args...)
	return retVal.Bool()
}

// VertexOutputBlockCloneOpts contains optional parameters for VertexOutputBlock.Clone.
type VertexOutputBlockCloneOpts struct {
	RootUrl *string
}

// Clone calls the Clone method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#clone
func (v *VertexOutputBlock) Clone(scene *Scene, opts *VertexOutputBlockCloneOpts) *NodeMaterialBlock {
	if opts == nil {
		opts = &VertexOutputBlockCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := v.p.Call("clone", args...)
	return NodeMaterialBlockFromJSObject(retVal, v.ctx)
}

// VertexOutputBlockConnectToOpts contains optional parameters for VertexOutputBlock.ConnectTo.
type VertexOutputBlockConnectToOpts struct {
	Options js.Value
}

// ConnectTo calls the ConnectTo method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#connectto
func (v *VertexOutputBlock) ConnectTo(other *NodeMaterialBlock, opts *VertexOutputBlockConnectToOpts) *VertexOutputBlock {
	if opts == nil {
		opts = &VertexOutputBlockConnectToOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, other.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := v.p.Call("connectTo", args...)
	return VertexOutputBlockFromJSObject(retVal, v.ctx)
}

// Dispose calls the Dispose method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#dispose
func (v *VertexOutputBlock) Dispose() {

	v.p.Call("dispose")
}

// GetClassName calls the GetClassName method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#getclassname
func (v *VertexOutputBlock) GetClassName() string {

	retVal := v.p.Call("getClassName")
	return retVal.String()
}

// VertexOutputBlockGetFirstAvailableInputOpts contains optional parameters for VertexOutputBlock.GetFirstAvailableInput.
type VertexOutputBlockGetFirstAvailableInputOpts struct {
	ForOutput *NodeMaterialConnectionPoint
}

// GetFirstAvailableInput calls the GetFirstAvailableInput method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#getfirstavailableinput
func (v *VertexOutputBlock) GetFirstAvailableInput(opts *VertexOutputBlockGetFirstAvailableInputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &VertexOutputBlockGetFirstAvailableInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForOutput == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForOutput.JSObject())
	}

	retVal := v.p.Call("getFirstAvailableInput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// VertexOutputBlockGetFirstAvailableOutputOpts contains optional parameters for VertexOutputBlock.GetFirstAvailableOutput.
type VertexOutputBlockGetFirstAvailableOutputOpts struct {
	ForBlock *NodeMaterialBlock
}

// GetFirstAvailableOutput calls the GetFirstAvailableOutput method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#getfirstavailableoutput
func (v *VertexOutputBlock) GetFirstAvailableOutput(opts *VertexOutputBlockGetFirstAvailableOutputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &VertexOutputBlockGetFirstAvailableOutputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForBlock == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForBlock.JSObject())
	}

	retVal := v.p.Call("getFirstAvailableOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// GetInputByName calls the GetInputByName method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#getinputbyname
func (v *VertexOutputBlock) GetInputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := v.p.Call("getInputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// GetOutputByName calls the GetOutputByName method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#getoutputbyname
func (v *VertexOutputBlock) GetOutputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := v.p.Call("getOutputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// GetSiblingOutput calls the GetSiblingOutput method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#getsiblingoutput
func (v *VertexOutputBlock) GetSiblingOutput(current *NodeMaterialConnectionPoint) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, current.JSObject())

	retVal := v.p.Call("getSiblingOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// Initialize calls the Initialize method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#initialize
func (v *VertexOutputBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	v.p.Call("initialize", args...)
}

// VertexOutputBlockInitializeDefinesOpts contains optional parameters for VertexOutputBlock.InitializeDefines.
type VertexOutputBlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#initializedefines
func (v *VertexOutputBlock) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *VertexOutputBlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &VertexOutputBlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	v.p.Call("initializeDefines", args...)
}

// VertexOutputBlockIsReadyOpts contains optional parameters for VertexOutputBlock.IsReady.
type VertexOutputBlockIsReadyOpts struct {
	UseInstances *bool
}

// IsReady calls the IsReady method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#isready
func (v *VertexOutputBlock) IsReady(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *VertexOutputBlockIsReadyOpts) bool {
	if opts == nil {
		opts = &VertexOutputBlockIsReadyOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := v.p.Call("isReady", args...)
	return retVal.Bool()
}

// VertexOutputBlockPrepareDefinesOpts contains optional parameters for VertexOutputBlock.PrepareDefines.
type VertexOutputBlockPrepareDefinesOpts struct {
	UseInstances *bool
}

// PrepareDefines calls the PrepareDefines method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#preparedefines
func (v *VertexOutputBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *VertexOutputBlockPrepareDefinesOpts) {
	if opts == nil {
		opts = &VertexOutputBlockPrepareDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	v.p.Call("prepareDefines", args...)
}

// ProvideFallbacks calls the ProvideFallbacks method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#providefallbacks
func (v *VertexOutputBlock) ProvideFallbacks(mesh *AbstractMesh, fallbacks *EffectFallbacks) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, fallbacks.JSObject())

	v.p.Call("provideFallbacks", args...)
}

// VertexOutputBlockRegisterInputOpts contains optional parameters for VertexOutputBlock.RegisterInput.
type VertexOutputBlockRegisterInputOpts struct {
	IsOptional *bool
	Target     js.Value
}

// RegisterInput calls the RegisterInput method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#registerinput
func (v *VertexOutputBlock) RegisterInput(name string, jsType js.Value, opts *VertexOutputBlockRegisterInputOpts) *VertexOutputBlock {
	if opts == nil {
		opts = &VertexOutputBlockRegisterInputOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, jsType)

	if opts.IsOptional == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsOptional)
	}
	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := v.p.Call("registerInput", args...)
	return VertexOutputBlockFromJSObject(retVal, v.ctx)
}

// VertexOutputBlockRegisterOutputOpts contains optional parameters for VertexOutputBlock.RegisterOutput.
type VertexOutputBlockRegisterOutputOpts struct {
	Target js.Value
}

// RegisterOutput calls the RegisterOutput method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#registeroutput
func (v *VertexOutputBlock) RegisterOutput(name string, jsType js.Value, opts *VertexOutputBlockRegisterOutputOpts) *VertexOutputBlock {
	if opts == nil {
		opts = &VertexOutputBlockRegisterOutputOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, jsType)

	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := v.p.Call("registerOutput", args...)
	return VertexOutputBlockFromJSObject(retVal, v.ctx)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#replacerepeatablecontent
func (v *VertexOutputBlock) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	v.p.Call("replaceRepeatableContent", args...)
}

// Serialize calls the Serialize method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#serialize
func (v *VertexOutputBlock) Serialize() interface{} {

	retVal := v.p.Call("serialize")
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the VertexOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#updateuniformsandsamples
func (v *VertexOutputBlock) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers string) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, state.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)
	args = append(args, uniformBuffers)

	v.p.Call("updateUniformsAndSamples", args...)
}

/*

// BuildId returns the BuildId property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#buildid
func (v *VertexOutputBlock) BuildId(buildId float64) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(buildId)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// SetBuildId sets the BuildId property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#buildid
func (v *VertexOutputBlock) SetBuildId(buildId float64) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(buildId)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// Comments returns the Comments property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#comments
func (v *VertexOutputBlock) Comments(comments string) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(comments)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// SetComments sets the Comments property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#comments
func (v *VertexOutputBlock) SetComments(comments string) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(comments)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#inputs
func (v *VertexOutputBlock) Inputs(inputs *NodeMaterialConnectionPoint) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(inputs.JSObject())
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#inputs
func (v *VertexOutputBlock) SetInputs(inputs *NodeMaterialConnectionPoint) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(inputs.JSObject())
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// IsFinalMerger returns the IsFinalMerger property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#isfinalmerger
func (v *VertexOutputBlock) IsFinalMerger(isFinalMerger bool) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(isFinalMerger)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// SetIsFinalMerger sets the IsFinalMerger property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#isfinalmerger
func (v *VertexOutputBlock) SetIsFinalMerger(isFinalMerger bool) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(isFinalMerger)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// IsInput returns the IsInput property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#isinput
func (v *VertexOutputBlock) IsInput(isInput bool) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(isInput)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// SetIsInput sets the IsInput property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#isinput
func (v *VertexOutputBlock) SetIsInput(isInput bool) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(isInput)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// IsUnique returns the IsUnique property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#isunique
func (v *VertexOutputBlock) IsUnique(isUnique bool) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(isUnique)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// SetIsUnique sets the IsUnique property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#isunique
func (v *VertexOutputBlock) SetIsUnique(isUnique bool) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(isUnique)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#name
func (v *VertexOutputBlock) Name(name string) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(name)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#name
func (v *VertexOutputBlock) SetName(name string) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(name)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// Outputs returns the Outputs property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#outputs
func (v *VertexOutputBlock) Outputs(outputs *NodeMaterialConnectionPoint) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(outputs.JSObject())
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// SetOutputs sets the Outputs property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#outputs
func (v *VertexOutputBlock) SetOutputs(outputs *NodeMaterialConnectionPoint) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(outputs.JSObject())
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#target
func (v *VertexOutputBlock) Target(target js.Value) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(target)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#target
func (v *VertexOutputBlock) SetTarget(target js.Value) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(target)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#uniqueid
func (v *VertexOutputBlock) UniqueId(uniqueId float64) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(uniqueId)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#uniqueid
func (v *VertexOutputBlock) SetUniqueId(uniqueId float64) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(uniqueId)
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// Vector returns the Vector property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#vector
func (v *VertexOutputBlock) Vector(vector *NodeMaterialConnectionPoint) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(vector.JSObject())
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

// SetVector sets the Vector property of class VertexOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vertexoutputblock#vector
func (v *VertexOutputBlock) SetVector(vector *NodeMaterialConnectionPoint) *VertexOutputBlock {
	p := ba.ctx.Get("VertexOutputBlock").New(vector.JSObject())
	return VertexOutputBlockFromJSObject(p, ba.ctx)
}

*/
