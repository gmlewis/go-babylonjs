// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IMesh represents a babylon.js IMesh.
// Loader interface with additional members.
type IMesh struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IMesh) JSObject() js.Value { return i.p }

// IMesh returns a IMesh JavaScript class.
func (ba *Babylon) IMesh() *IMesh {
	p := ba.ctx.Get("IMesh")
	return IMeshFromJSObject(p, ba.ctx)
}

// IMeshFromJSObject returns a wrapped IMesh JavaScript class.
func IMeshFromJSObject(p js.Value, ctx js.Value) *IMesh {
	return &IMesh{p: p, ctx: ctx}
}

// IMeshArrayToJSArray returns a JavaScript Array for the wrapped array.
func IMeshArrayToJSArray(array []*IMesh) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Primitives returns the Primitives property of class IMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.imesh#primitives
func (i *IMesh) Primitives(primitives *IMeshPrimitive) *IMesh {
	p := ba.ctx.Get("IMesh").New(primitives.JSObject())
	return IMeshFromJSObject(p, ba.ctx)
}

// SetPrimitives sets the Primitives property of class IMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.imesh#primitives
func (i *IMesh) SetPrimitives(primitives *IMeshPrimitive) *IMesh {
	p := ba.ctx.Get("IMesh").New(primitives.JSObject())
	return IMeshFromJSObject(p, ba.ctx)
}

*/
