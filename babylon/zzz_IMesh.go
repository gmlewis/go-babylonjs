// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IMesh represents a babylon.js IMesh.
// Loader interface with additional members.
type IMesh struct {
	*IMesh
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IMesh) JSObject() js.Value { return i.p }

// IMesh returns a IMesh JavaScript class.
func (ba *Babylon) IMesh() *IMesh {
	p := ba.ctx.Get("IMesh")
	return IMeshFromJSObject(p, ba.ctx)
}

// IMeshFromJSObject returns a wrapped IMesh JavaScript class.
func IMeshFromJSObject(p js.Value, ctx js.Value) *IMesh {
	return &IMesh{IMesh: IMeshFromJSObject(p, ctx), ctx: ctx}
}

// IMeshArrayToJSArray returns a JavaScript Array for the wrapped array.
func IMeshArrayToJSArray(array []*IMesh) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Extensions returns the Extensions property of class IMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.imesh#extensions
func (i *IMesh) Extensions(extensions js.Value) *IMesh {
	p := ba.ctx.Get("IMesh").New(extensions)
	return IMeshFromJSObject(p, ba.ctx)
}

// SetExtensions sets the Extensions property of class IMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.imesh#extensions
func (i *IMesh) SetExtensions(extensions js.Value) *IMesh {
	p := ba.ctx.Get("IMesh").New(extensions)
	return IMeshFromJSObject(p, ba.ctx)
}

// Extras returns the Extras property of class IMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.imesh#extras
func (i *IMesh) Extras(extras interface{}) *IMesh {
	p := ba.ctx.Get("IMesh").New(extras)
	return IMeshFromJSObject(p, ba.ctx)
}

// SetExtras sets the Extras property of class IMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.imesh#extras
func (i *IMesh) SetExtras(extras interface{}) *IMesh {
	p := ba.ctx.Get("IMesh").New(extras)
	return IMeshFromJSObject(p, ba.ctx)
}

// Index returns the Index property of class IMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.imesh#index
func (i *IMesh) Index(index float64) *IMesh {
	p := ba.ctx.Get("IMesh").New(index)
	return IMeshFromJSObject(p, ba.ctx)
}

// SetIndex sets the Index property of class IMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.imesh#index
func (i *IMesh) SetIndex(index float64) *IMesh {
	p := ba.ctx.Get("IMesh").New(index)
	return IMeshFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class IMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.imesh#name
func (i *IMesh) Name(name string) *IMesh {
	p := ba.ctx.Get("IMesh").New(name)
	return IMeshFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class IMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.imesh#name
func (i *IMesh) SetName(name string) *IMesh {
	p := ba.ctx.Get("IMesh").New(name)
	return IMeshFromJSObject(p, ba.ctx)
}

// Primitives returns the Primitives property of class IMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.imesh#primitives
func (i *IMesh) Primitives(primitives *IMeshPrimitive) *IMesh {
	p := ba.ctx.Get("IMesh").New(primitives.JSObject())
	return IMeshFromJSObject(p, ba.ctx)
}

// SetPrimitives sets the Primitives property of class IMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.imesh#primitives
func (i *IMesh) SetPrimitives(primitives *IMeshPrimitive) *IMesh {
	p := ba.ctx.Get("IMesh").New(primitives.JSObject())
	return IMeshFromJSObject(p, ba.ctx)
}

// Weights returns the Weights property of class IMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.imesh#weights
func (i *IMesh) Weights(weights float64) *IMesh {
	p := ba.ctx.Get("IMesh").New(weights)
	return IMeshFromJSObject(p, ba.ctx)
}

// SetWeights sets the Weights property of class IMesh.
//
// https://doc.babylonjs.com/api/classes/babylon.imesh#weights
func (i *IMesh) SetWeights(weights float64) *IMesh {
	p := ba.ctx.Get("IMesh").New(weights)
	return IMeshFromJSObject(p, ba.ctx)
}

*/
