// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ExponentialEase represents a babylon.js ExponentialEase.
// Easing function with an exponential shape (see link below).
//
// See: http://doc.babylonjs.com/babylon101/animations#easing-functions
type ExponentialEase struct {
	*EasingFunction
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *ExponentialEase) JSObject() js.Value { return e.p }

// ExponentialEase returns a ExponentialEase JavaScript class.
func (ba *Babylon) ExponentialEase() *ExponentialEase {
	p := ba.ctx.Get("ExponentialEase")
	return ExponentialEaseFromJSObject(p, ba.ctx)
}

// ExponentialEaseFromJSObject returns a wrapped ExponentialEase JavaScript class.
func ExponentialEaseFromJSObject(p js.Value, ctx js.Value) *ExponentialEase {
	return &ExponentialEase{EasingFunction: EasingFunctionFromJSObject(p, ctx), ctx: ctx}
}

// NewExponentialEaseOpts contains optional parameters for NewExponentialEase.
type NewExponentialEaseOpts struct {
	Exponent *JSFloat64
}

// NewExponentialEase returns a new ExponentialEase object.
//
// https://doc.babylonjs.com/api/classes/babylon.exponentialease
func (ba *Babylon) NewExponentialEase(opts *NewExponentialEaseOpts) *ExponentialEase {
	if opts == nil {
		opts = &NewExponentialEaseOpts{}
	}

	p := ba.ctx.Get("ExponentialEase").New(opts.Exponent.JSObject())
	return ExponentialEaseFromJSObject(p, ba.ctx)
}

// TODO: methods
