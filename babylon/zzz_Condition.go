// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Condition represents a babylon.js Condition.
// A Condition applied to an Action
type Condition struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *Condition) JSObject() js.Value { return c.p }

// Condition returns a Condition JavaScript class.
func (ba *Babylon) Condition() *Condition {
	p := ba.ctx.Get("Condition")
	return ConditionFromJSObject(p, ba.ctx)
}

// ConditionFromJSObject returns a wrapped Condition JavaScript class.
func ConditionFromJSObject(p js.Value, ctx js.Value) *Condition {
	return &Condition{p: p, ctx: ctx}
}

// ConditionArrayToJSArray returns a JavaScript Array for the wrapped array.
func ConditionArrayToJSArray(array []*Condition) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewCondition returns a new Condition object.
//
// https://doc.babylonjs.com/api/classes/babylon.condition
func (ba *Babylon) NewCondition(actionManager *ActionManager) *Condition {

	args := make([]interface{}, 0, 1+0)

	args = append(args, actionManager.JSObject())

	p := ba.ctx.Get("Condition").New(args...)
	return ConditionFromJSObject(p, ba.ctx)
}

// IsValid calls the IsValid method on the Condition object.
//
// https://doc.babylonjs.com/api/classes/babylon.condition#isvalid
func (c *Condition) IsValid() bool {

	retVal := c.p.Call("isValid")
	return retVal.Bool()
}

// Serialize calls the Serialize method on the Condition object.
//
// https://doc.babylonjs.com/api/classes/babylon.condition#serialize
func (c *Condition) Serialize() js.Value {

	retVal := c.p.Call("serialize")
	return retVal
}
