// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PhysicsImpostor represents a babylon.js PhysicsImpostor.
// Represents a physics imposter
//
// See: https://doc.babylonjs.com/how_to/using_the_physics_engine
type PhysicsImpostor struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PhysicsImpostor) JSObject() js.Value { return p.p }

// PhysicsImpostor returns a PhysicsImpostor JavaScript class.
func (ba *Babylon) PhysicsImpostor() *PhysicsImpostor {
	p := ba.ctx.Get("PhysicsImpostor")
	return PhysicsImpostorFromJSObject(p, ba.ctx)
}

// PhysicsImpostorFromJSObject returns a wrapped PhysicsImpostor JavaScript class.
func PhysicsImpostorFromJSObject(p js.Value, ctx js.Value) *PhysicsImpostor {
	return &PhysicsImpostor{p: p, ctx: ctx}
}

// NewPhysicsImpostorOpts contains optional parameters for NewPhysicsImpostor.
type NewPhysicsImpostorOpts struct {
	_options *JSValue

	_scene *Scene
}

// NewPhysicsImpostor returns a new PhysicsImpostor object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostor
func (ba *Babylon) NewPhysicsImpostor(object js.Value, jsType float64, opts *NewPhysicsImpostorOpts) *PhysicsImpostor {
	if opts == nil {
		opts = &NewPhysicsImpostorOpts{}
	}

	p := ba.ctx.Get("PhysicsImpostor").New(object, jsType, opts._options.JSObject(), opts._scene.JSObject())
	return PhysicsImpostorFromJSObject(p, ba.ctx)
}

// TODO: methods
