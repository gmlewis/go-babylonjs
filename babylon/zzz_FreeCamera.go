// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FreeCamera represents a babylon.js FreeCamera.
// This represents a free type of camera. It can be useful in First Person Shooter game for instance.
// Please consider using the new UniversalCamera instead as it adds more functionality like the gamepad.
//
// See: http://doc.babylonjs.com/features/cameras#universal-camera
type FreeCamera struct {
	*TargetCamera
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FreeCamera) JSObject() js.Value { return f.p }

// FreeCamera returns a FreeCamera JavaScript class.
func (ba *Babylon) FreeCamera() *FreeCamera {
	p := ba.ctx.Get("FreeCamera")
	return FreeCameraFromJSObject(p, ba.ctx)
}

// FreeCameraFromJSObject returns a wrapped FreeCamera JavaScript class.
func FreeCameraFromJSObject(p js.Value, ctx js.Value) *FreeCamera {
	return &FreeCamera{TargetCamera: TargetCameraFromJSObject(p, ctx), ctx: ctx}
}

// NewFreeCameraOpts contains optional parameters for NewFreeCamera.
type NewFreeCameraOpts struct {
	SetActiveOnSceneIfNoneActive *JSBool
}

// NewFreeCamera returns a new FreeCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamera
func (ba *Babylon) NewFreeCamera(name string, position *Vector3, scene *Scene, opts *NewFreeCameraOpts) *FreeCamera {
	if opts == nil {
		opts = &NewFreeCameraOpts{}
	}

	p := ba.ctx.Get("FreeCamera").New(name, position.JSObject(), scene.JSObject(), opts.SetActiveOnSceneIfNoneActive.JSObject())
	return FreeCameraFromJSObject(p, ba.ctx)
}

// TODO: methods
