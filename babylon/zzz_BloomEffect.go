// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BloomEffect represents a babylon.js BloomEffect.
// The bloom effect spreads bright areas of an image to simulate artifacts seen in cameras
type BloomEffect struct {
	*PostProcessRenderEffect
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BloomEffect) JSObject() js.Value { return b.p }

// BloomEffect returns a BloomEffect JavaScript class.
func (ba *Babylon) BloomEffect() *BloomEffect {
	p := ba.ctx.Get("BloomEffect")
	return BloomEffectFromJSObject(p, ba.ctx)
}

// BloomEffectFromJSObject returns a wrapped BloomEffect JavaScript class.
func BloomEffectFromJSObject(p js.Value, ctx js.Value) *BloomEffect {
	return &BloomEffect{PostProcessRenderEffect: PostProcessRenderEffectFromJSObject(p, ctx), ctx: ctx}
}

// NewBloomEffectOpts contains optional parameters for NewBloomEffect.
type NewBloomEffectOpts struct {
	PipelineTextureType *JSFloat64

	BlockCompilation *JSBool
}

// NewBloomEffect returns a new BloomEffect object.
//
// https://doc.babylonjs.com/api/classes/babylon.bloomeffect
func (ba *Babylon) NewBloomEffect(scene *Scene, bloomScale float64, bloomWeight float64, bloomKernel float64, opts *NewBloomEffectOpts) *BloomEffect {
	if opts == nil {
		opts = &NewBloomEffectOpts{}
	}

	p := ba.ctx.Get("BloomEffect").New(scene.JSObject(), bloomScale, bloomWeight, bloomKernel, opts.PipelineTextureType.JSObject(), opts.BlockCompilation.JSObject())
	return BloomEffectFromJSObject(p, ba.ctx)
}

// TODO: methods
