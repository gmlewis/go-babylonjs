// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FlyCamera represents a babylon.js FlyCamera.
// This is a flying camera, designed for 3D movement and rotation in all directions,
// such as in a 3D Space Shooter or a Flight Simulator.
type FlyCamera struct{ *TargetCamera }

// JSObject returns the underlying js.Value.
func (f *FlyCamera) JSObject() js.Value { return f.p }

// FlyCamera returns a FlyCamera JavaScript class.
func (b *Babylon) FlyCamera() *FlyCamera {
	p := b.ctx.Get("FlyCamera")
	return FlyCameraFromJSObject(p)
}

// FlyCameraFromJSObject returns a wrapped FlyCamera JavaScript class.
func FlyCameraFromJSObject(p js.Value) *FlyCamera {
	return &FlyCamera{TargetCameraFromJSObject(p)}
}

// NewFlyCameraOpts contains optional parameters for NewFlyCamera.
type NewFlyCameraOpts struct {
	SetActiveOnSceneIfNoneActive *bool
}

// NewFlyCamera returns a new FlyCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.flycamera
func (b *Babylon) NewFlyCamera(name string, position *Vector3, scene *Scene, opts *NewFlyCameraOpts) *FlyCamera {
	if opts == nil {
		opts = &NewFlyCameraOpts{}
	}

	p := b.ctx.Get("FlyCamera").New(name, position.JSObject(), scene.JSObject(), opts.SetActiveOnSceneIfNoneActive.JSObject())
	return FlyCameraFromJSObject(p)
}

// TODO: methods
