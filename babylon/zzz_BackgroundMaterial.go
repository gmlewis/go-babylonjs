// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BackgroundMaterial represents a babylon.js BackgroundMaterial.
// Background material used to create an efficient environement around your scene.
type BackgroundMaterial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BackgroundMaterial) JSObject() js.Value { return b.p }

// BackgroundMaterial returns a BackgroundMaterial JavaScript class.
func (ba *Babylon) BackgroundMaterial() *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial")
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// BackgroundMaterialFromJSObject returns a wrapped BackgroundMaterial JavaScript class.
func BackgroundMaterialFromJSObject(p js.Value, ctx js.Value) *BackgroundMaterial {
	return &BackgroundMaterial{p: p, ctx: ctx}
}

// BackgroundMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func BackgroundMaterialArrayToJSArray(array []*BackgroundMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewBackgroundMaterial returns a new BackgroundMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial
func (ba *Babylon) NewBackgroundMaterial(name string, scene *Scene) *BackgroundMaterial {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("BackgroundMaterial").New(args...)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// BindForSubMesh calls the BindForSubMesh method on the BackgroundMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#bindforsubmesh
func (b *BackgroundMaterial) BindForSubMesh(world *Matrix, mesh *Mesh, subMesh *SubMesh) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, world.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	b.p.Call("bindForSubMesh", args...)
}

// BindOnlyWorldMatrix calls the BindOnlyWorldMatrix method on the BackgroundMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#bindonlyworldmatrix
func (b *BackgroundMaterial) BindOnlyWorldMatrix(world *Matrix) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, world.JSObject())

	b.p.Call("bindOnlyWorldMatrix", args...)
}

// BuildUniformLayout calls the BuildUniformLayout method on the BackgroundMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#builduniformlayout
func (b *BackgroundMaterial) BuildUniformLayout() {

	b.p.Call("buildUniformLayout")
}

// Clone calls the Clone method on the BackgroundMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#clone
func (b *BackgroundMaterial) Clone(name string) *BackgroundMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := b.p.Call("clone", args...)
	return BackgroundMaterialFromJSObject(retVal, b.ctx)
}

// BackgroundMaterialDisposeOpts contains optional parameters for BackgroundMaterial.Dispose.
type BackgroundMaterialDisposeOpts struct {
	ForceDisposeEffect   *bool
	ForceDisposeTextures *bool
}

// Dispose calls the Dispose method on the BackgroundMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#dispose
func (b *BackgroundMaterial) Dispose(opts *BackgroundMaterialDisposeOpts) {
	if opts == nil {
		opts = &BackgroundMaterialDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.ForceDisposeEffect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeEffect)
	}
	if opts.ForceDisposeTextures == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeTextures)
	}

	b.p.Call("dispose", args...)
}

// GetClassName calls the GetClassName method on the BackgroundMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#getclassname
func (b *BackgroundMaterial) GetClassName() string {

	retVal := b.p.Call("getClassName")
	return retVal.String()
}

// HasTexture calls the HasTexture method on the BackgroundMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#hastexture
func (b *BackgroundMaterial) HasTexture(texture *BaseTexture) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	retVal := b.p.Call("hasTexture", args...)
	return retVal.Bool()
}

// BackgroundMaterialIsReadyForSubMeshOpts contains optional parameters for BackgroundMaterial.IsReadyForSubMesh.
type BackgroundMaterialIsReadyForSubMeshOpts struct {
	UseInstances *bool
}

// IsReadyForSubMesh calls the IsReadyForSubMesh method on the BackgroundMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#isreadyforsubmesh
func (b *BackgroundMaterial) IsReadyForSubMesh(mesh *AbstractMesh, subMesh *SubMesh, opts *BackgroundMaterialIsReadyForSubMeshOpts) bool {
	if opts == nil {
		opts = &BackgroundMaterialIsReadyForSubMeshOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := b.p.Call("isReadyForSubMesh", args...)
	return retVal.Bool()
}

// NeedAlphaBlending calls the NeedAlphaBlending method on the BackgroundMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#needalphablending
func (b *BackgroundMaterial) NeedAlphaBlending() bool {

	retVal := b.p.Call("needAlphaBlending")
	return retVal.Bool()
}

// NeedAlphaTesting calls the NeedAlphaTesting method on the BackgroundMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#needalphatesting
func (b *BackgroundMaterial) NeedAlphaTesting() bool {

	retVal := b.p.Call("needAlphaTesting")
	return retVal.Bool()
}

// Parse calls the Parse method on the BackgroundMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#parse
func (b *BackgroundMaterial) Parse(source interface{}, scene *Scene, rootUrl string) *BackgroundMaterial {

	args := make([]interface{}, 0, 3+0)

	args = append(args, source)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := b.p.Call("Parse", args...)
	return BackgroundMaterialFromJSObject(retVal, b.ctx)
}

// Serialize calls the Serialize method on the BackgroundMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#serialize
func (b *BackgroundMaterial) Serialize() interface{} {

	retVal := b.p.Call("serialize")
	return retVal
}

// Unbind calls the Unbind method on the BackgroundMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#unbind
func (b *BackgroundMaterial) Unbind() {

	b.p.Call("unbind")
}

/*

// CameraColorCurves returns the CameraColorCurves property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#cameracolorcurves
func (b *BackgroundMaterial) CameraColorCurves(cameraColorCurves *ColorCurves) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(cameraColorCurves.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetCameraColorCurves sets the CameraColorCurves property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#cameracolorcurves
func (b *BackgroundMaterial) SetCameraColorCurves(cameraColorCurves *ColorCurves) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(cameraColorCurves.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// CameraColorCurvesEnabled returns the CameraColorCurvesEnabled property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#cameracolorcurvesenabled
func (b *BackgroundMaterial) CameraColorCurvesEnabled(cameraColorCurvesEnabled bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(cameraColorCurvesEnabled)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetCameraColorCurvesEnabled sets the CameraColorCurvesEnabled property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#cameracolorcurvesenabled
func (b *BackgroundMaterial) SetCameraColorCurvesEnabled(cameraColorCurvesEnabled bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(cameraColorCurvesEnabled)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// CameraColorGradingEnabled returns the CameraColorGradingEnabled property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#cameracolorgradingenabled
func (b *BackgroundMaterial) CameraColorGradingEnabled(cameraColorGradingEnabled bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(cameraColorGradingEnabled)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetCameraColorGradingEnabled sets the CameraColorGradingEnabled property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#cameracolorgradingenabled
func (b *BackgroundMaterial) SetCameraColorGradingEnabled(cameraColorGradingEnabled bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(cameraColorGradingEnabled)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// CameraColorGradingTexture returns the CameraColorGradingTexture property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#cameracolorgradingtexture
func (b *BackgroundMaterial) CameraColorGradingTexture(cameraColorGradingTexture *BaseTexture) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(cameraColorGradingTexture.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetCameraColorGradingTexture sets the CameraColorGradingTexture property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#cameracolorgradingtexture
func (b *BackgroundMaterial) SetCameraColorGradingTexture(cameraColorGradingTexture *BaseTexture) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(cameraColorGradingTexture.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// CameraContrast returns the CameraContrast property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#cameracontrast
func (b *BackgroundMaterial) CameraContrast(cameraContrast float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(cameraContrast)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetCameraContrast sets the CameraContrast property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#cameracontrast
func (b *BackgroundMaterial) SetCameraContrast(cameraContrast float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(cameraContrast)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// CameraExposure returns the CameraExposure property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#cameraexposure
func (b *BackgroundMaterial) CameraExposure(cameraExposure float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(cameraExposure)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetCameraExposure sets the CameraExposure property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#cameraexposure
func (b *BackgroundMaterial) SetCameraExposure(cameraExposure float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(cameraExposure)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// CameraToneMappingEnabled returns the CameraToneMappingEnabled property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#cameratonemappingenabled
func (b *BackgroundMaterial) CameraToneMappingEnabled(cameraToneMappingEnabled bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(cameraToneMappingEnabled)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetCameraToneMappingEnabled sets the CameraToneMappingEnabled property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#cameratonemappingenabled
func (b *BackgroundMaterial) SetCameraToneMappingEnabled(cameraToneMappingEnabled bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(cameraToneMappingEnabled)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTexture returns the DiffuseTexture property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#diffusetexture
func (b *BackgroundMaterial) DiffuseTexture(diffuseTexture *BaseTexture) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(diffuseTexture.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTexture sets the DiffuseTexture property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#diffusetexture
func (b *BackgroundMaterial) SetDiffuseTexture(diffuseTexture *BaseTexture) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(diffuseTexture.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// EnableNoise returns the EnableNoise property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#enablenoise
func (b *BackgroundMaterial) EnableNoise(enableNoise bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(enableNoise)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetEnableNoise sets the EnableNoise property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#enablenoise
func (b *BackgroundMaterial) SetEnableNoise(enableNoise bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(enableNoise)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// FovMultiplier returns the FovMultiplier property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#fovmultiplier
func (b *BackgroundMaterial) FovMultiplier(fovMultiplier float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(fovMultiplier)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetFovMultiplier sets the FovMultiplier property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#fovmultiplier
func (b *BackgroundMaterial) SetFovMultiplier(fovMultiplier float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(fovMultiplier)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// HasRenderTargetTextures returns the HasRenderTargetTextures property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#hasrendertargettextures
func (b *BackgroundMaterial) HasRenderTargetTextures(hasRenderTargetTextures bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(hasRenderTargetTextures)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetHasRenderTargetTextures sets the HasRenderTargetTextures property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#hasrendertargettextures
func (b *BackgroundMaterial) SetHasRenderTargetTextures(hasRenderTargetTextures bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(hasRenderTargetTextures)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// ImageProcessingConfiguration returns the ImageProcessingConfiguration property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#imageprocessingconfiguration
func (b *BackgroundMaterial) ImageProcessingConfiguration(imageProcessingConfiguration *ImageProcessingConfiguration) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(imageProcessingConfiguration.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetImageProcessingConfiguration sets the ImageProcessingConfiguration property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#imageprocessingconfiguration
func (b *BackgroundMaterial) SetImageProcessingConfiguration(imageProcessingConfiguration *ImageProcessingConfiguration) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(imageProcessingConfiguration.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// MaxSimultaneousLights returns the MaxSimultaneousLights property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#maxsimultaneouslights
func (b *BackgroundMaterial) MaxSimultaneousLights(maxSimultaneousLights int) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(maxSimultaneousLights)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetMaxSimultaneousLights sets the MaxSimultaneousLights property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#maxsimultaneouslights
func (b *BackgroundMaterial) SetMaxSimultaneousLights(maxSimultaneousLights int) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(maxSimultaneousLights)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// OpacityFresnel returns the OpacityFresnel property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#opacityfresnel
func (b *BackgroundMaterial) OpacityFresnel(opacityFresnel bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(opacityFresnel)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetOpacityFresnel sets the OpacityFresnel property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#opacityfresnel
func (b *BackgroundMaterial) SetOpacityFresnel(opacityFresnel bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(opacityFresnel)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// PrimaryColor returns the PrimaryColor property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#primarycolor
func (b *BackgroundMaterial) PrimaryColor(primaryColor *Color3) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(primaryColor.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetPrimaryColor sets the PrimaryColor property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#primarycolor
func (b *BackgroundMaterial) SetPrimaryColor(primaryColor *Color3) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(primaryColor.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// PrimaryColorHighlightLevel returns the PrimaryColorHighlightLevel property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#primarycolorhighlightlevel
func (b *BackgroundMaterial) PrimaryColorHighlightLevel(primaryColorHighlightLevel float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(primaryColorHighlightLevel)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetPrimaryColorHighlightLevel sets the PrimaryColorHighlightLevel property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#primarycolorhighlightlevel
func (b *BackgroundMaterial) SetPrimaryColorHighlightLevel(primaryColorHighlightLevel float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(primaryColorHighlightLevel)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// PrimaryColorShadowLevel returns the PrimaryColorShadowLevel property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#primarycolorshadowlevel
func (b *BackgroundMaterial) PrimaryColorShadowLevel(primaryColorShadowLevel float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(primaryColorShadowLevel)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetPrimaryColorShadowLevel sets the PrimaryColorShadowLevel property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#primarycolorshadowlevel
func (b *BackgroundMaterial) SetPrimaryColorShadowLevel(primaryColorShadowLevel float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(primaryColorShadowLevel)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// ReflectionAmount returns the ReflectionAmount property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectionamount
func (b *BackgroundMaterial) ReflectionAmount(reflectionAmount float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionAmount)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetReflectionAmount sets the ReflectionAmount property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectionamount
func (b *BackgroundMaterial) SetReflectionAmount(reflectionAmount float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionAmount)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// ReflectionBlur returns the ReflectionBlur property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectionblur
func (b *BackgroundMaterial) ReflectionBlur(reflectionBlur float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionBlur)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetReflectionBlur sets the ReflectionBlur property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectionblur
func (b *BackgroundMaterial) SetReflectionBlur(reflectionBlur float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionBlur)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// ReflectionFalloffDistance returns the ReflectionFalloffDistance property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectionfalloffdistance
func (b *BackgroundMaterial) ReflectionFalloffDistance(reflectionFalloffDistance float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionFalloffDistance)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetReflectionFalloffDistance sets the ReflectionFalloffDistance property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectionfalloffdistance
func (b *BackgroundMaterial) SetReflectionFalloffDistance(reflectionFalloffDistance float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionFalloffDistance)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// ReflectionFresnel returns the ReflectionFresnel property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectionfresnel
func (b *BackgroundMaterial) ReflectionFresnel(reflectionFresnel bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionFresnel)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetReflectionFresnel sets the ReflectionFresnel property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectionfresnel
func (b *BackgroundMaterial) SetReflectionFresnel(reflectionFresnel bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionFresnel)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// ReflectionReflectance0 returns the ReflectionReflectance0 property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectionreflectance0
func (b *BackgroundMaterial) ReflectionReflectance0(reflectionReflectance0 float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionReflectance0)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetReflectionReflectance0 sets the ReflectionReflectance0 property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectionreflectance0
func (b *BackgroundMaterial) SetReflectionReflectance0(reflectionReflectance0 float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionReflectance0)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// ReflectionReflectance90 returns the ReflectionReflectance90 property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectionreflectance90
func (b *BackgroundMaterial) ReflectionReflectance90(reflectionReflectance90 float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionReflectance90)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetReflectionReflectance90 sets the ReflectionReflectance90 property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectionreflectance90
func (b *BackgroundMaterial) SetReflectionReflectance90(reflectionReflectance90 float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionReflectance90)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// ReflectionStandardFresnelWeight returns the ReflectionStandardFresnelWeight property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectionstandardfresnelweight
func (b *BackgroundMaterial) ReflectionStandardFresnelWeight(reflectionStandardFresnelWeight float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionStandardFresnelWeight)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetReflectionStandardFresnelWeight sets the ReflectionStandardFresnelWeight property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectionstandardfresnelweight
func (b *BackgroundMaterial) SetReflectionStandardFresnelWeight(reflectionStandardFresnelWeight float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionStandardFresnelWeight)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// ReflectionTexture returns the ReflectionTexture property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectiontexture
func (b *BackgroundMaterial) ReflectionTexture(reflectionTexture *BaseTexture) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionTexture.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetReflectionTexture sets the ReflectionTexture property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#reflectiontexture
func (b *BackgroundMaterial) SetReflectionTexture(reflectionTexture *BaseTexture) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(reflectionTexture.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SceneCenter returns the SceneCenter property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#scenecenter
func (b *BackgroundMaterial) SceneCenter(sceneCenter *Vector3) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(sceneCenter.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetSceneCenter sets the SceneCenter property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#scenecenter
func (b *BackgroundMaterial) SetSceneCenter(sceneCenter *Vector3) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(sceneCenter.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// ShadowLevel returns the ShadowLevel property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#shadowlevel
func (b *BackgroundMaterial) ShadowLevel(shadowLevel float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(shadowLevel)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetShadowLevel sets the ShadowLevel property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#shadowlevel
func (b *BackgroundMaterial) SetShadowLevel(shadowLevel float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(shadowLevel)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// ShadowLights returns the ShadowLights property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#shadowlights
func (b *BackgroundMaterial) ShadowLights(shadowLights *IShadowLight) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(shadowLights.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetShadowLights sets the ShadowLights property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#shadowlights
func (b *BackgroundMaterial) SetShadowLights(shadowLights *IShadowLight) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(shadowLights.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// StandardReflectance0 returns the StandardReflectance0 property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#standardreflectance0
func (b *BackgroundMaterial) StandardReflectance0(StandardReflectance0 float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(StandardReflectance0)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetStandardReflectance0 sets the StandardReflectance0 property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#standardreflectance0
func (b *BackgroundMaterial) SetStandardReflectance0(StandardReflectance0 float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(StandardReflectance0)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// StandardReflectance90 returns the StandardReflectance90 property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#standardreflectance90
func (b *BackgroundMaterial) StandardReflectance90(StandardReflectance90 float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(StandardReflectance90)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetStandardReflectance90 sets the StandardReflectance90 property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#standardreflectance90
func (b *BackgroundMaterial) SetStandardReflectance90(StandardReflectance90 float64) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(StandardReflectance90)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SwitchToBGR returns the SwitchToBGR property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#switchtobgr
func (b *BackgroundMaterial) SwitchToBGR(switchToBGR bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(switchToBGR)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetSwitchToBGR sets the SwitchToBGR property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#switchtobgr
func (b *BackgroundMaterial) SetSwitchToBGR(switchToBGR bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(switchToBGR)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// UseEquirectangularFOV returns the UseEquirectangularFOV property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#useequirectangularfov
func (b *BackgroundMaterial) UseEquirectangularFOV(useEquirectangularFOV bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(useEquirectangularFOV)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetUseEquirectangularFOV sets the UseEquirectangularFOV property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#useequirectangularfov
func (b *BackgroundMaterial) SetUseEquirectangularFOV(useEquirectangularFOV bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(useEquirectangularFOV)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// UseRGBColor returns the UseRGBColor property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#usergbcolor
func (b *BackgroundMaterial) UseRGBColor(useRGBColor bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(useRGBColor)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// SetUseRGBColor sets the UseRGBColor property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#usergbcolor
func (b *BackgroundMaterial) SetUseRGBColor(useRGBColor bool) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(useRGBColor)
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// _perceptualColor returns the _perceptualColor property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#_perceptualcolor
func (b *BackgroundMaterial) _perceptualColor(_perceptualColor *Color3) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(_perceptualColor.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

// Set_perceptualColor sets the _perceptualColor property of class BackgroundMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.backgroundmaterial#_perceptualcolor
func (b *BackgroundMaterial) Set_perceptualColor(_perceptualColor *Color3) *BackgroundMaterial {
	p := ba.ctx.Get("BackgroundMaterial").New(_perceptualColor.JSObject())
	return BackgroundMaterialFromJSObject(p, ba.ctx)
}

*/
