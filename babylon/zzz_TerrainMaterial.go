// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TerrainMaterial represents a babylon.js TerrainMaterial.
//
type TerrainMaterial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (t *TerrainMaterial) JSObject() js.Value { return t.p }

// TerrainMaterial returns a TerrainMaterial JavaScript class.
func (ba *Babylon) TerrainMaterial() *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial")
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// TerrainMaterialFromJSObject returns a wrapped TerrainMaterial JavaScript class.
func TerrainMaterialFromJSObject(p js.Value, ctx js.Value) *TerrainMaterial {
	return &TerrainMaterial{p: p, ctx: ctx}
}

// TerrainMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func TerrainMaterialArrayToJSArray(array []*TerrainMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewTerrainMaterial returns a new TerrainMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial
func (ba *Babylon) NewTerrainMaterial(name string, scene *Scene) *TerrainMaterial {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("TerrainMaterial").New(args...)
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// BindForSubMesh calls the BindForSubMesh method on the TerrainMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#bindforsubmesh
func (t *TerrainMaterial) BindForSubMesh(world *Matrix, mesh *Mesh, subMesh *SubMesh) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, world.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	t.p.Call("bindForSubMesh", args...)
}

// Clone calls the Clone method on the TerrainMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#clone
func (t *TerrainMaterial) Clone(name string) *TerrainMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := t.p.Call("clone", args...)
	return TerrainMaterialFromJSObject(retVal, t.ctx)
}

// TerrainMaterialDisposeOpts contains optional parameters for TerrainMaterial.Dispose.
type TerrainMaterialDisposeOpts struct {
	ForceDisposeEffect *bool
}

// Dispose calls the Dispose method on the TerrainMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#dispose
func (t *TerrainMaterial) Dispose(opts *TerrainMaterialDisposeOpts) {
	if opts == nil {
		opts = &TerrainMaterialDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForceDisposeEffect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeEffect)
	}

	t.p.Call("dispose", args...)
}

// GetActiveTextures calls the GetActiveTextures method on the TerrainMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#getactivetextures
func (t *TerrainMaterial) GetActiveTextures() *BaseTexture {

	retVal := t.p.Call("getActiveTextures")
	return BaseTextureFromJSObject(retVal, t.ctx)
}

// GetAlphaTestTexture calls the GetAlphaTestTexture method on the TerrainMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#getalphatesttexture
func (t *TerrainMaterial) GetAlphaTestTexture() *BaseTexture {

	retVal := t.p.Call("getAlphaTestTexture")
	return BaseTextureFromJSObject(retVal, t.ctx)
}

// GetAnimatables calls the GetAnimatables method on the TerrainMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#getanimatables
func (t *TerrainMaterial) GetAnimatables() *IAnimatable {

	retVal := t.p.Call("getAnimatables")
	return IAnimatableFromJSObject(retVal, t.ctx)
}

// GetClassName calls the GetClassName method on the TerrainMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#getclassname
func (t *TerrainMaterial) GetClassName() string {

	retVal := t.p.Call("getClassName")
	return retVal.String()
}

// HasTexture calls the HasTexture method on the TerrainMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#hastexture
func (t *TerrainMaterial) HasTexture(texture *BaseTexture) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	retVal := t.p.Call("hasTexture", args...)
	return retVal.Bool()
}

// TerrainMaterialIsReadyForSubMeshOpts contains optional parameters for TerrainMaterial.IsReadyForSubMesh.
type TerrainMaterialIsReadyForSubMeshOpts struct {
	UseInstances *bool
}

// IsReadyForSubMesh calls the IsReadyForSubMesh method on the TerrainMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#isreadyforsubmesh
func (t *TerrainMaterial) IsReadyForSubMesh(mesh *AbstractMesh, subMesh *SubMesh, opts *TerrainMaterialIsReadyForSubMeshOpts) bool {
	if opts == nil {
		opts = &TerrainMaterialIsReadyForSubMeshOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := t.p.Call("isReadyForSubMesh", args...)
	return retVal.Bool()
}

// NeedAlphaBlending calls the NeedAlphaBlending method on the TerrainMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#needalphablending
func (t *TerrainMaterial) NeedAlphaBlending() bool {

	retVal := t.p.Call("needAlphaBlending")
	return retVal.Bool()
}

// NeedAlphaTesting calls the NeedAlphaTesting method on the TerrainMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#needalphatesting
func (t *TerrainMaterial) NeedAlphaTesting() bool {

	retVal := t.p.Call("needAlphaTesting")
	return retVal.Bool()
}

// Parse calls the Parse method on the TerrainMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#parse
func (t *TerrainMaterial) Parse(source interface{}, scene *Scene, rootUrl string) *TerrainMaterial {

	args := make([]interface{}, 0, 3+0)

	args = append(args, source)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := t.p.Call("Parse", args...)
	return TerrainMaterialFromJSObject(retVal, t.ctx)
}

// Serialize calls the Serialize method on the TerrainMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#serialize
func (t *TerrainMaterial) Serialize() interface{} {

	retVal := t.p.Call("serialize")
	return retVal
}

/*

// BumpTexture1 returns the BumpTexture1 property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#bumptexture1
func (t *TerrainMaterial) BumpTexture1(bumpTexture1 *Texture) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(bumpTexture1.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// SetBumpTexture1 sets the BumpTexture1 property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#bumptexture1
func (t *TerrainMaterial) SetBumpTexture1(bumpTexture1 *Texture) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(bumpTexture1.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// BumpTexture2 returns the BumpTexture2 property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#bumptexture2
func (t *TerrainMaterial) BumpTexture2(bumpTexture2 *Texture) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(bumpTexture2.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// SetBumpTexture2 sets the BumpTexture2 property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#bumptexture2
func (t *TerrainMaterial) SetBumpTexture2(bumpTexture2 *Texture) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(bumpTexture2.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// BumpTexture3 returns the BumpTexture3 property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#bumptexture3
func (t *TerrainMaterial) BumpTexture3(bumpTexture3 *Texture) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(bumpTexture3.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// SetBumpTexture3 sets the BumpTexture3 property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#bumptexture3
func (t *TerrainMaterial) SetBumpTexture3(bumpTexture3 *Texture) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(bumpTexture3.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// DiffuseColor returns the DiffuseColor property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#diffusecolor
func (t *TerrainMaterial) DiffuseColor(diffuseColor *Color3) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(diffuseColor.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseColor sets the DiffuseColor property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#diffusecolor
func (t *TerrainMaterial) SetDiffuseColor(diffuseColor *Color3) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(diffuseColor.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTexture1 returns the DiffuseTexture1 property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#diffusetexture1
func (t *TerrainMaterial) DiffuseTexture1(diffuseTexture1 *Texture) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(diffuseTexture1.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTexture1 sets the DiffuseTexture1 property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#diffusetexture1
func (t *TerrainMaterial) SetDiffuseTexture1(diffuseTexture1 *Texture) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(diffuseTexture1.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTexture2 returns the DiffuseTexture2 property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#diffusetexture2
func (t *TerrainMaterial) DiffuseTexture2(diffuseTexture2 *Texture) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(diffuseTexture2.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTexture2 sets the DiffuseTexture2 property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#diffusetexture2
func (t *TerrainMaterial) SetDiffuseTexture2(diffuseTexture2 *Texture) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(diffuseTexture2.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTexture3 returns the DiffuseTexture3 property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#diffusetexture3
func (t *TerrainMaterial) DiffuseTexture3(diffuseTexture3 *Texture) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(diffuseTexture3.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTexture3 sets the DiffuseTexture3 property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#diffusetexture3
func (t *TerrainMaterial) SetDiffuseTexture3(diffuseTexture3 *Texture) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(diffuseTexture3.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// DisableLighting returns the DisableLighting property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#disablelighting
func (t *TerrainMaterial) DisableLighting(disableLighting bool) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(disableLighting)
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// SetDisableLighting sets the DisableLighting property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#disablelighting
func (t *TerrainMaterial) SetDisableLighting(disableLighting bool) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(disableLighting)
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// MaxSimultaneousLights returns the MaxSimultaneousLights property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#maxsimultaneouslights
func (t *TerrainMaterial) MaxSimultaneousLights(maxSimultaneousLights float64) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(maxSimultaneousLights)
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// SetMaxSimultaneousLights sets the MaxSimultaneousLights property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#maxsimultaneouslights
func (t *TerrainMaterial) SetMaxSimultaneousLights(maxSimultaneousLights float64) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(maxSimultaneousLights)
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// MixTexture returns the MixTexture property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#mixtexture
func (t *TerrainMaterial) MixTexture(mixTexture *BaseTexture) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(mixTexture.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// SetMixTexture sets the MixTexture property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#mixtexture
func (t *TerrainMaterial) SetMixTexture(mixTexture *BaseTexture) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(mixTexture.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// SpecularColor returns the SpecularColor property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#specularcolor
func (t *TerrainMaterial) SpecularColor(specularColor *Color3) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(specularColor.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// SetSpecularColor sets the SpecularColor property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#specularcolor
func (t *TerrainMaterial) SetSpecularColor(specularColor *Color3) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(specularColor.JSObject())
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// SpecularPower returns the SpecularPower property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#specularpower
func (t *TerrainMaterial) SpecularPower(specularPower float64) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(specularPower)
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

// SetSpecularPower sets the SpecularPower property of class TerrainMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.terrainmaterial#specularpower
func (t *TerrainMaterial) SetSpecularPower(specularPower float64) *TerrainMaterial {
	p := ba.ctx.Get("TerrainMaterial").New(specularPower)
	return TerrainMaterialFromJSObject(p, ba.ctx)
}

*/
