// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MeshLODLevel represents a babylon.js MeshLODLevel.
// Class used to represent a specific level of detail of a mesh
//
// See: http://doc.babylonjs.com/how_to/how_to_use_lod
type MeshLODLevel struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MeshLODLevel) JSObject() js.Value { return m.p }

// MeshLODLevel returns a MeshLODLevel JavaScript class.
func (ba *Babylon) MeshLODLevel() *MeshLODLevel {
	p := ba.ctx.Get("MeshLODLevel")
	return MeshLODLevelFromJSObject(p, ba.ctx)
}

// MeshLODLevelFromJSObject returns a wrapped MeshLODLevel JavaScript class.
func MeshLODLevelFromJSObject(p js.Value, ctx js.Value) *MeshLODLevel {
	return &MeshLODLevel{p: p, ctx: ctx}
}

// MeshLODLevelArrayToJSArray returns a JavaScript Array for the wrapped array.
func MeshLODLevelArrayToJSArray(array []*MeshLODLevel) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewMeshLODLevel returns a new MeshLODLevel object.
//
// https://doc.babylonjs.com/api/classes/babylon.meshlodlevel
func (ba *Babylon) NewMeshLODLevel(distance float64, mesh *Mesh) *MeshLODLevel {

	args := make([]interface{}, 0, 2+0)

	args = append(args, distance)
	args = append(args, mesh.JSObject())

	p := ba.ctx.Get("MeshLODLevel").New(args...)
	return MeshLODLevelFromJSObject(p, ba.ctx)
}

/*

// Distance returns the Distance property of class MeshLODLevel.
//
// https://doc.babylonjs.com/api/classes/babylon.meshlodlevel#distance
func (m *MeshLODLevel) Distance(distance float64) *MeshLODLevel {
	p := ba.ctx.Get("MeshLODLevel").New(distance)
	return MeshLODLevelFromJSObject(p, ba.ctx)
}

// SetDistance sets the Distance property of class MeshLODLevel.
//
// https://doc.babylonjs.com/api/classes/babylon.meshlodlevel#distance
func (m *MeshLODLevel) SetDistance(distance float64) *MeshLODLevel {
	p := ba.ctx.Get("MeshLODLevel").New(distance)
	return MeshLODLevelFromJSObject(p, ba.ctx)
}

// Mesh returns the Mesh property of class MeshLODLevel.
//
// https://doc.babylonjs.com/api/classes/babylon.meshlodlevel#mesh
func (m *MeshLODLevel) Mesh(mesh *Mesh) *MeshLODLevel {
	p := ba.ctx.Get("MeshLODLevel").New(mesh.JSObject())
	return MeshLODLevelFromJSObject(p, ba.ctx)
}

// SetMesh sets the Mesh property of class MeshLODLevel.
//
// https://doc.babylonjs.com/api/classes/babylon.meshlodlevel#mesh
func (m *MeshLODLevel) SetMesh(mesh *Mesh) *MeshLODLevel {
	p := ba.ctx.Get("MeshLODLevel").New(mesh.JSObject())
	return MeshLODLevelFromJSObject(p, ba.ctx)
}

*/
