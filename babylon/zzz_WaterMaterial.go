// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// WaterMaterial represents a babylon.js WaterMaterial.
//
type WaterMaterial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (w *WaterMaterial) JSObject() js.Value { return w.p }

// WaterMaterial returns a WaterMaterial JavaScript class.
func (ba *Babylon) WaterMaterial() *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial")
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// WaterMaterialFromJSObject returns a wrapped WaterMaterial JavaScript class.
func WaterMaterialFromJSObject(p js.Value, ctx js.Value) *WaterMaterial {
	return &WaterMaterial{p: p, ctx: ctx}
}

// WaterMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func WaterMaterialArrayToJSArray(array []*WaterMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewWaterMaterialOpts contains optional parameters for NewWaterMaterial.
type NewWaterMaterialOpts struct {
	RenderTargetSize *Vector2
}

// NewWaterMaterial returns a new WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial
func (ba *Babylon) NewWaterMaterial(name string, scene *Scene, opts *NewWaterMaterialOpts) *WaterMaterial {
	if opts == nil {
		opts = &NewWaterMaterialOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, scene.JSObject())

	if opts.RenderTargetSize == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.RenderTargetSize.JSObject())
	}

	p := ba.ctx.Get("WaterMaterial").New(args...)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// AddToRenderList calls the AddToRenderList method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#addtorenderlist
func (w *WaterMaterial) AddToRenderList(node interface{}) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, node)

	w.p.Call("addToRenderList", args...)
}

// BindForSubMesh calls the BindForSubMesh method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#bindforsubmesh
func (w *WaterMaterial) BindForSubMesh(world *Matrix, mesh *Mesh, subMesh *SubMesh) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, world.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	w.p.Call("bindForSubMesh", args...)
}

// Clone calls the Clone method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#clone
func (w *WaterMaterial) Clone(name string) *WaterMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := w.p.Call("clone", args...)
	return WaterMaterialFromJSObject(retVal, w.ctx)
}

// CreateDefaultMesh calls the CreateDefaultMesh method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#createdefaultmesh
func (w *WaterMaterial) CreateDefaultMesh(name string, scene *Scene) *Mesh {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	retVal := w.p.Call("CreateDefaultMesh", args...)
	return MeshFromJSObject(retVal, w.ctx)
}

// WaterMaterialDisposeOpts contains optional parameters for WaterMaterial.Dispose.
type WaterMaterialDisposeOpts struct {
	ForceDisposeEffect *bool
}

// Dispose calls the Dispose method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#dispose
func (w *WaterMaterial) Dispose(opts *WaterMaterialDisposeOpts) {
	if opts == nil {
		opts = &WaterMaterialDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForceDisposeEffect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeEffect)
	}

	w.p.Call("dispose", args...)
}

// EnableRenderTargets calls the EnableRenderTargets method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#enablerendertargets
func (w *WaterMaterial) EnableRenderTargets(enable bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, enable)

	w.p.Call("enableRenderTargets", args...)
}

// GetActiveTextures calls the GetActiveTextures method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#getactivetextures
func (w *WaterMaterial) GetActiveTextures() *BaseTexture {

	retVal := w.p.Call("getActiveTextures")
	return BaseTextureFromJSObject(retVal, w.ctx)
}

// GetAlphaTestTexture calls the GetAlphaTestTexture method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#getalphatesttexture
func (w *WaterMaterial) GetAlphaTestTexture() *BaseTexture {

	retVal := w.p.Call("getAlphaTestTexture")
	return BaseTextureFromJSObject(retVal, w.ctx)
}

// GetAnimatables calls the GetAnimatables method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#getanimatables
func (w *WaterMaterial) GetAnimatables() *IAnimatable {

	retVal := w.p.Call("getAnimatables")
	return IAnimatableFromJSObject(retVal, w.ctx)
}

// GetClassName calls the GetClassName method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#getclassname
func (w *WaterMaterial) GetClassName() string {

	retVal := w.p.Call("getClassName")
	return retVal.String()
}

// GetRenderList calls the GetRenderList method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#getrenderlist
func (w *WaterMaterial) GetRenderList() *AbstractMesh {

	retVal := w.p.Call("getRenderList")
	return AbstractMeshFromJSObject(retVal, w.ctx)
}

// HasTexture calls the HasTexture method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#hastexture
func (w *WaterMaterial) HasTexture(texture *BaseTexture) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	retVal := w.p.Call("hasTexture", args...)
	return retVal.Bool()
}

// WaterMaterialIsReadyForSubMeshOpts contains optional parameters for WaterMaterial.IsReadyForSubMesh.
type WaterMaterialIsReadyForSubMeshOpts struct {
	UseInstances *bool
}

// IsReadyForSubMesh calls the IsReadyForSubMesh method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#isreadyforsubmesh
func (w *WaterMaterial) IsReadyForSubMesh(mesh *AbstractMesh, subMesh *SubMesh, opts *WaterMaterialIsReadyForSubMeshOpts) bool {
	if opts == nil {
		opts = &WaterMaterialIsReadyForSubMeshOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := w.p.Call("isReadyForSubMesh", args...)
	return retVal.Bool()
}

// NeedAlphaBlending calls the NeedAlphaBlending method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#needalphablending
func (w *WaterMaterial) NeedAlphaBlending() bool {

	retVal := w.p.Call("needAlphaBlending")
	return retVal.Bool()
}

// NeedAlphaTesting calls the NeedAlphaTesting method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#needalphatesting
func (w *WaterMaterial) NeedAlphaTesting() bool {

	retVal := w.p.Call("needAlphaTesting")
	return retVal.Bool()
}

// Parse calls the Parse method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#parse
func (w *WaterMaterial) Parse(source interface{}, scene *Scene, rootUrl string) *WaterMaterial {

	args := make([]interface{}, 0, 3+0)

	args = append(args, source)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := w.p.Call("Parse", args...)
	return WaterMaterialFromJSObject(retVal, w.ctx)
}

// Serialize calls the Serialize method on the WaterMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#serialize
func (w *WaterMaterial) Serialize() interface{} {

	retVal := w.p.Call("serialize")
	return retVal
}

/*

// BumpAffectsReflection returns the BumpAffectsReflection property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#bumpaffectsreflection
func (w *WaterMaterial) BumpAffectsReflection(bumpAffectsReflection bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(bumpAffectsReflection)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetBumpAffectsReflection sets the BumpAffectsReflection property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#bumpaffectsreflection
func (w *WaterMaterial) SetBumpAffectsReflection(bumpAffectsReflection bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(bumpAffectsReflection)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// BumpHeight returns the BumpHeight property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#bumpheight
func (w *WaterMaterial) BumpHeight(bumpHeight float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(bumpHeight)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetBumpHeight sets the BumpHeight property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#bumpheight
func (w *WaterMaterial) SetBumpHeight(bumpHeight float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(bumpHeight)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// BumpSuperimpose returns the BumpSuperimpose property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#bumpsuperimpose
func (w *WaterMaterial) BumpSuperimpose(bumpSuperimpose bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(bumpSuperimpose)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetBumpSuperimpose sets the BumpSuperimpose property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#bumpsuperimpose
func (w *WaterMaterial) SetBumpSuperimpose(bumpSuperimpose bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(bumpSuperimpose)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// BumpTexture returns the BumpTexture property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#bumptexture
func (w *WaterMaterial) BumpTexture(bumpTexture *BaseTexture) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(bumpTexture.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetBumpTexture sets the BumpTexture property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#bumptexture
func (w *WaterMaterial) SetBumpTexture(bumpTexture *BaseTexture) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(bumpTexture.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// ColorBlendFactor returns the ColorBlendFactor property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#colorblendfactor
func (w *WaterMaterial) ColorBlendFactor(colorBlendFactor float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(colorBlendFactor)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetColorBlendFactor sets the ColorBlendFactor property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#colorblendfactor
func (w *WaterMaterial) SetColorBlendFactor(colorBlendFactor float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(colorBlendFactor)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// ColorBlendFactor2 returns the ColorBlendFactor2 property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#colorblendfactor2
func (w *WaterMaterial) ColorBlendFactor2(colorBlendFactor2 float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(colorBlendFactor2)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetColorBlendFactor2 sets the ColorBlendFactor2 property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#colorblendfactor2
func (w *WaterMaterial) SetColorBlendFactor2(colorBlendFactor2 float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(colorBlendFactor2)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// DiffuseColor returns the DiffuseColor property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#diffusecolor
func (w *WaterMaterial) DiffuseColor(diffuseColor *Color3) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(diffuseColor.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseColor sets the DiffuseColor property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#diffusecolor
func (w *WaterMaterial) SetDiffuseColor(diffuseColor *Color3) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(diffuseColor.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// DisableClipPlane returns the DisableClipPlane property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#disableclipplane
func (w *WaterMaterial) DisableClipPlane(disableClipPlane bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(disableClipPlane)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetDisableClipPlane sets the DisableClipPlane property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#disableclipplane
func (w *WaterMaterial) SetDisableClipPlane(disableClipPlane bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(disableClipPlane)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// DisableLighting returns the DisableLighting property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#disablelighting
func (w *WaterMaterial) DisableLighting(disableLighting bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(disableLighting)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetDisableLighting sets the DisableLighting property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#disablelighting
func (w *WaterMaterial) SetDisableLighting(disableLighting bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(disableLighting)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// FresnelSeparate returns the FresnelSeparate property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#fresnelseparate
func (w *WaterMaterial) FresnelSeparate(fresnelSeparate bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(fresnelSeparate)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetFresnelSeparate sets the FresnelSeparate property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#fresnelseparate
func (w *WaterMaterial) SetFresnelSeparate(fresnelSeparate bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(fresnelSeparate)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// HasRenderTargetTextures returns the HasRenderTargetTextures property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#hasrendertargettextures
func (w *WaterMaterial) HasRenderTargetTextures(hasRenderTargetTextures bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(hasRenderTargetTextures)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetHasRenderTargetTextures sets the HasRenderTargetTextures property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#hasrendertargettextures
func (w *WaterMaterial) SetHasRenderTargetTextures(hasRenderTargetTextures bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(hasRenderTargetTextures)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// MaxSimultaneousLights returns the MaxSimultaneousLights property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#maxsimultaneouslights
func (w *WaterMaterial) MaxSimultaneousLights(maxSimultaneousLights float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(maxSimultaneousLights)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetMaxSimultaneousLights sets the MaxSimultaneousLights property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#maxsimultaneouslights
func (w *WaterMaterial) SetMaxSimultaneousLights(maxSimultaneousLights float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(maxSimultaneousLights)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// ReflectionTexture returns the ReflectionTexture property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#reflectiontexture
func (w *WaterMaterial) ReflectionTexture(reflectionTexture *RenderTargetTexture) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(reflectionTexture.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetReflectionTexture sets the ReflectionTexture property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#reflectiontexture
func (w *WaterMaterial) SetReflectionTexture(reflectionTexture *RenderTargetTexture) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(reflectionTexture.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// RefractionTexture returns the RefractionTexture property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#refractiontexture
func (w *WaterMaterial) RefractionTexture(refractionTexture *RenderTargetTexture) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(refractionTexture.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetRefractionTexture sets the RefractionTexture property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#refractiontexture
func (w *WaterMaterial) SetRefractionTexture(refractionTexture *RenderTargetTexture) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(refractionTexture.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// RenderTargetSize returns the RenderTargetSize property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#rendertargetsize
func (w *WaterMaterial) RenderTargetSize(renderTargetSize *Vector2) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(renderTargetSize.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetRenderTargetSize sets the RenderTargetSize property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#rendertargetsize
func (w *WaterMaterial) SetRenderTargetSize(renderTargetSize *Vector2) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(renderTargetSize.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// RenderTargetsEnabled returns the RenderTargetsEnabled property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#rendertargetsenabled
func (w *WaterMaterial) RenderTargetsEnabled(renderTargetsEnabled bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(renderTargetsEnabled)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetRenderTargetsEnabled sets the RenderTargetsEnabled property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#rendertargetsenabled
func (w *WaterMaterial) SetRenderTargetsEnabled(renderTargetsEnabled bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(renderTargetsEnabled)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SpecularColor returns the SpecularColor property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#specularcolor
func (w *WaterMaterial) SpecularColor(specularColor *Color3) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(specularColor.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetSpecularColor sets the SpecularColor property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#specularcolor
func (w *WaterMaterial) SetSpecularColor(specularColor *Color3) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(specularColor.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SpecularPower returns the SpecularPower property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#specularpower
func (w *WaterMaterial) SpecularPower(specularPower float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(specularPower)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetSpecularPower sets the SpecularPower property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#specularpower
func (w *WaterMaterial) SetSpecularPower(specularPower float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(specularPower)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// UseLogarithmicDepth returns the UseLogarithmicDepth property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#uselogarithmicdepth
func (w *WaterMaterial) UseLogarithmicDepth(useLogarithmicDepth bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(useLogarithmicDepth)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetUseLogarithmicDepth sets the UseLogarithmicDepth property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#uselogarithmicdepth
func (w *WaterMaterial) SetUseLogarithmicDepth(useLogarithmicDepth bool) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(useLogarithmicDepth)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// WaterColor returns the WaterColor property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#watercolor
func (w *WaterMaterial) WaterColor(waterColor *Color3) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(waterColor.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetWaterColor sets the WaterColor property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#watercolor
func (w *WaterMaterial) SetWaterColor(waterColor *Color3) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(waterColor.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// WaterColor2 returns the WaterColor2 property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#watercolor2
func (w *WaterMaterial) WaterColor2(waterColor2 *Color3) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(waterColor2.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetWaterColor2 sets the WaterColor2 property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#watercolor2
func (w *WaterMaterial) SetWaterColor2(waterColor2 *Color3) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(waterColor2.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// WaveHeight returns the WaveHeight property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#waveheight
func (w *WaterMaterial) WaveHeight(waveHeight float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(waveHeight)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetWaveHeight sets the WaveHeight property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#waveheight
func (w *WaterMaterial) SetWaveHeight(waveHeight float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(waveHeight)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// WaveLength returns the WaveLength property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#wavelength
func (w *WaterMaterial) WaveLength(waveLength float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(waveLength)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetWaveLength sets the WaveLength property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#wavelength
func (w *WaterMaterial) SetWaveLength(waveLength float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(waveLength)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// WaveSpeed returns the WaveSpeed property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#wavespeed
func (w *WaterMaterial) WaveSpeed(waveSpeed float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(waveSpeed)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetWaveSpeed sets the WaveSpeed property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#wavespeed
func (w *WaterMaterial) SetWaveSpeed(waveSpeed float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(waveSpeed)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// WindDirection returns the WindDirection property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#winddirection
func (w *WaterMaterial) WindDirection(windDirection *Vector2) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(windDirection.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetWindDirection sets the WindDirection property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#winddirection
func (w *WaterMaterial) SetWindDirection(windDirection *Vector2) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(windDirection.JSObject())
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// WindForce returns the WindForce property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#windforce
func (w *WaterMaterial) WindForce(windForce float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(windForce)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

// SetWindForce sets the WindForce property of class WaterMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.watermaterial#windforce
func (w *WaterMaterial) SetWindForce(windForce float64) *WaterMaterial {
	p := ba.ctx.Get("WaterMaterial").New(windForce)
	return WaterMaterialFromJSObject(p, ba.ctx)
}

*/
