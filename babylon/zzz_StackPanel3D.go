// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// StackPanel3D represents a babylon.js StackPanel3D.
// Class used to create a stack panel in 3D on XY plane
type StackPanel3D struct {
	*Container3D
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *StackPanel3D) JSObject() js.Value { return s.p }

// StackPanel3D returns a StackPanel3D JavaScript class.
func (ba *Babylon) StackPanel3D() *StackPanel3D {
	p := ba.ctx.Get("StackPanel3D")
	return StackPanel3DFromJSObject(p, ba.ctx)
}

// StackPanel3DFromJSObject returns a wrapped StackPanel3D JavaScript class.
func StackPanel3DFromJSObject(p js.Value, ctx js.Value) *StackPanel3D {
	return &StackPanel3D{Container3D: Container3DFromJSObject(p, ctx), ctx: ctx}
}

// StackPanel3DArrayToJSArray returns a JavaScript Array for the wrapped array.
func StackPanel3DArrayToJSArray(array []*StackPanel3D) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewStackPanel3DOpts contains optional parameters for NewStackPanel3D.
type NewStackPanel3DOpts struct {
	IsVertical *bool
}

// NewStackPanel3D returns a new StackPanel3D object.
//
// https://doc.babylonjs.com/api/classes/babylon.stackpanel3d
func (ba *Babylon) NewStackPanel3D(opts *NewStackPanel3DOpts) *StackPanel3D {
	if opts == nil {
		opts = &NewStackPanel3DOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.IsVertical == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsVertical)
	}

	p := ba.ctx.Get("StackPanel3D").New(args...)
	return StackPanel3DFromJSObject(p, ba.ctx)
}

/*

// IsVertical returns the IsVertical property of class StackPanel3D.
//
// https://doc.babylonjs.com/api/classes/babylon.stackpanel3d#isvertical
func (s *StackPanel3D) IsVertical(isVertical bool) *StackPanel3D {
	p := ba.ctx.Get("StackPanel3D").New(isVertical)
	return StackPanel3DFromJSObject(p, ba.ctx)
}

// SetIsVertical sets the IsVertical property of class StackPanel3D.
//
// https://doc.babylonjs.com/api/classes/babylon.stackpanel3d#isvertical
func (s *StackPanel3D) SetIsVertical(isVertical bool) *StackPanel3D {
	p := ba.ctx.Get("StackPanel3D").New(isVertical)
	return StackPanel3DFromJSObject(p, ba.ctx)
}

// Margin returns the Margin property of class StackPanel3D.
//
// https://doc.babylonjs.com/api/classes/babylon.stackpanel3d#margin
func (s *StackPanel3D) Margin(margin float64) *StackPanel3D {
	p := ba.ctx.Get("StackPanel3D").New(margin)
	return StackPanel3DFromJSObject(p, ba.ctx)
}

// SetMargin sets the Margin property of class StackPanel3D.
//
// https://doc.babylonjs.com/api/classes/babylon.stackpanel3d#margin
func (s *StackPanel3D) SetMargin(margin float64) *StackPanel3D {
	p := ba.ctx.Get("StackPanel3D").New(margin)
	return StackPanel3DFromJSObject(p, ba.ctx)
}

*/
