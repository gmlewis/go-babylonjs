// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TransformNode represents a babylon.js TransformNode.
// A TransformNode is an object that is not rendered but can be used as a center of transformation. This can decrease memory usage and increase rendering speed compared to using an empty mesh as a parent and is less complicated than using a pivot matrix.
//
// See: https://doc.babylonjs.com/how_to/transformnode
type TransformNode struct {
	*Node
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (t *TransformNode) JSObject() js.Value { return t.p }

// TransformNode returns a TransformNode JavaScript class.
func (ba *Babylon) TransformNode() *TransformNode {
	p := ba.ctx.Get("TransformNode")
	return TransformNodeFromJSObject(p, ba.ctx)
}

// TransformNodeFromJSObject returns a wrapped TransformNode JavaScript class.
func TransformNodeFromJSObject(p js.Value, ctx js.Value) *TransformNode {
	return &TransformNode{Node: NodeFromJSObject(p, ctx), ctx: ctx}
}

// NewTransformNodeOpts contains optional parameters for NewTransformNode.
type NewTransformNodeOpts struct {
	Scene *Scene

	IsPure *JSBool
}

// NewTransformNode returns a new TransformNode object.
//
// https://doc.babylonjs.com/api/classes/babylon.transformnode
func (ba *Babylon) NewTransformNode(name string, opts *NewTransformNodeOpts) *TransformNode {
	if opts == nil {
		opts = &NewTransformNodeOpts{}
	}

	p := ba.ctx.Get("TransformNode").New(name, opts.Scene.JSObject(), opts.IsPure.JSObject())
	return TransformNodeFromJSObject(p, ba.ctx)
}

// TODO: methods
