// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// KHR_draco_mesh_compression represents a babylon.js KHR_draco_mesh_compression.
// &lt;a href=&#34;https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression&#34;&gt;Specification&lt;/a&gt;
type KHR_draco_mesh_compression struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (k *KHR_draco_mesh_compression) JSObject() js.Value { return k.p }

// KHR_draco_mesh_compression returns a KHR_draco_mesh_compression JavaScript class.
func (ba *Babylon) KHR_draco_mesh_compression() *KHR_draco_mesh_compression {
	p := ba.ctx.Get("KHR_draco_mesh_compression")
	return KHR_draco_mesh_compressionFromJSObject(p, ba.ctx)
}

// KHR_draco_mesh_compressionFromJSObject returns a wrapped KHR_draco_mesh_compression JavaScript class.
func KHR_draco_mesh_compressionFromJSObject(p js.Value, ctx js.Value) *KHR_draco_mesh_compression {
	return &KHR_draco_mesh_compression{p: p, ctx: ctx}
}

// KHR_draco_mesh_compressionArrayToJSArray returns a JavaScript Array for the wrapped array.
func KHR_draco_mesh_compressionArrayToJSArray(array []*KHR_draco_mesh_compression) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// DracoCompression returns the DracoCompression property of class KHR_draco_mesh_compression.
//
// https://doc.babylonjs.com/api/classes/babylon.khr_draco_mesh_compression#dracocompression
func (k *KHR_draco_mesh_compression) DracoCompression(dracoCompression *DracoCompression) *KHR_draco_mesh_compression {
	p := ba.ctx.Get("KHR_draco_mesh_compression").New(dracoCompression.JSObject())
	return KHR_draco_mesh_compressionFromJSObject(p, ba.ctx)
}

// SetDracoCompression sets the DracoCompression property of class KHR_draco_mesh_compression.
//
// https://doc.babylonjs.com/api/classes/babylon.khr_draco_mesh_compression#dracocompression
func (k *KHR_draco_mesh_compression) SetDracoCompression(dracoCompression *DracoCompression) *KHR_draco_mesh_compression {
	p := ba.ctx.Get("KHR_draco_mesh_compression").New(dracoCompression.JSObject())
	return KHR_draco_mesh_compressionFromJSObject(p, ba.ctx)
}

// Enabled returns the Enabled property of class KHR_draco_mesh_compression.
//
// https://doc.babylonjs.com/api/classes/babylon.khr_draco_mesh_compression#enabled
func (k *KHR_draco_mesh_compression) Enabled(enabled bool) *KHR_draco_mesh_compression {
	p := ba.ctx.Get("KHR_draco_mesh_compression").New(enabled)
	return KHR_draco_mesh_compressionFromJSObject(p, ba.ctx)
}

// SetEnabled sets the Enabled property of class KHR_draco_mesh_compression.
//
// https://doc.babylonjs.com/api/classes/babylon.khr_draco_mesh_compression#enabled
func (k *KHR_draco_mesh_compression) SetEnabled(enabled bool) *KHR_draco_mesh_compression {
	p := ba.ctx.Get("KHR_draco_mesh_compression").New(enabled)
	return KHR_draco_mesh_compressionFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class KHR_draco_mesh_compression.
//
// https://doc.babylonjs.com/api/classes/babylon.khr_draco_mesh_compression#name
func (k *KHR_draco_mesh_compression) Name(name string) *KHR_draco_mesh_compression {
	p := ba.ctx.Get("KHR_draco_mesh_compression").New(name)
	return KHR_draco_mesh_compressionFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class KHR_draco_mesh_compression.
//
// https://doc.babylonjs.com/api/classes/babylon.khr_draco_mesh_compression#name
func (k *KHR_draco_mesh_compression) SetName(name string) *KHR_draco_mesh_compression {
	p := ba.ctx.Get("KHR_draco_mesh_compression").New(name)
	return KHR_draco_mesh_compressionFromJSObject(p, ba.ctx)
}

*/
