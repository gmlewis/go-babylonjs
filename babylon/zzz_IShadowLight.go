// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IShadowLight represents a babylon.js IShadowLight.
// Interface describing all the common properties and methods a shadow light needs to implement.
// This helps both the shadow generator and materials to genrate the corresponding shadow maps
// as well as binding the different shadow properties to the effects.
type IShadowLight struct {
	*Light
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IShadowLight) JSObject() js.Value { return i.p }

// IShadowLight returns a IShadowLight JavaScript class.
func (ba *Babylon) IShadowLight() *IShadowLight {
	p := ba.ctx.Get("IShadowLight")
	return IShadowLightFromJSObject(p, ba.ctx)
}

// IShadowLightFromJSObject returns a wrapped IShadowLight JavaScript class.
func IShadowLightFromJSObject(p js.Value, ctx js.Value) *IShadowLight {
	return &IShadowLight{Light: LightFromJSObject(p, ctx), ctx: ctx}
}

// IShadowLightArrayToJSArray returns a JavaScript Array for the wrapped array.
func IShadowLightArrayToJSArray(array []*IShadowLight) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewIShadowLight returns a new IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight
func (ba *Babylon) NewIShadowLight(name string, scene *Scene) *IShadowLight {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("IShadowLight").New(args...)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// IShadowLightAddBehaviorOpts contains optional parameters for IShadowLight.AddBehavior.
type IShadowLightAddBehaviorOpts struct {
	AttachImmediately *bool
}

// AddBehavior calls the AddBehavior method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#addbehavior
func (i *IShadowLight) AddBehavior(behavior js.Value, opts *IShadowLightAddBehaviorOpts) *Node {
	if opts == nil {
		opts = &IShadowLightAddBehaviorOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, behavior)

	if opts.AttachImmediately == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.AttachImmediately)
	}

	retVal := i.p.Call("addBehavior", args...)
	return NodeFromJSObject(retVal, i.ctx)
}

// AddNodeConstructor calls the AddNodeConstructor method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#addnodeconstructor
func (i *IShadowLight) AddNodeConstructor(jsType string, constructorFunc js.Value) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, jsType)
	args = append(args, constructorFunc)

	i.p.Call("AddNodeConstructor", args...)
}

// IShadowLightBeginAnimationOpts contains optional parameters for IShadowLight.BeginAnimation.
type IShadowLightBeginAnimationOpts struct {
	Loop           *bool
	SpeedRatio     *float64
	OnAnimationEnd *func()
}

// BeginAnimation calls the BeginAnimation method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#beginanimation
func (i *IShadowLight) BeginAnimation(name string, opts *IShadowLightBeginAnimationOpts) *Animatable {
	if opts == nil {
		opts = &IShadowLightBeginAnimationOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, name)

	if opts.Loop == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Loop)
	}
	if opts.SpeedRatio == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SpeedRatio)
	}
	if opts.OnAnimationEnd == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnAnimationEnd)
	}

	retVal := i.p.Call("beginAnimation", args...)
	return AnimatableFromJSObject(retVal, i.ctx)
}

// IShadowLightBindLightOpts contains optional parameters for IShadowLight.BindLight.
type IShadowLightBindLightOpts struct {
	UsePhysicalLightFalloff *bool
	RebuildInParallel       *bool
}

// BindLight calls the BindLight method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#bindlight
func (i *IShadowLight) BindLight(lightIndex float64, scene *Scene, effect *Effect, useSpecular bool, opts *IShadowLightBindLightOpts) {
	if opts == nil {
		opts = &IShadowLightBindLightOpts{}
	}

	args := make([]interface{}, 0, 4+2)

	args = append(args, lightIndex)
	args = append(args, scene.JSObject())
	args = append(args, effect.JSObject())
	args = append(args, useSpecular)

	if opts.UsePhysicalLightFalloff == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UsePhysicalLightFalloff)
	}
	if opts.RebuildInParallel == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RebuildInParallel)
	}

	i.p.Call("bindLight", args...)
}

// CanAffectMesh calls the CanAffectMesh method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#canaffectmesh
func (i *IShadowLight) CanAffectMesh(mesh *AbstractMesh) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	retVal := i.p.Call("canAffectMesh", args...)
	return retVal.Bool()
}

// Clone calls the Clone method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#clone
func (i *IShadowLight) Clone(name string) *Light {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := i.p.Call("clone", args...)
	return LightFromJSObject(retVal, i.ctx)
}

// CompareLightsPriority calls the CompareLightsPriority method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#comparelightspriority
func (i *IShadowLight) CompareLightsPriority(a *Light, b *Light) float64 {

	args := make([]interface{}, 0, 2+0)

	args = append(args, a.JSObject())
	args = append(args, b.JSObject())

	retVal := i.p.Call("CompareLightsPriority", args...)
	return retVal.Float()
}

// ComputeTransformedInformation calls the ComputeTransformedInformation method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#computetransformedinformation
func (i *IShadowLight) ComputeTransformedInformation() bool {

	retVal := i.p.Call("computeTransformedInformation")
	return retVal.Bool()
}

// IShadowLightComputeWorldMatrixOpts contains optional parameters for IShadowLight.ComputeWorldMatrix.
type IShadowLightComputeWorldMatrixOpts struct {
	Force *bool
}

// ComputeWorldMatrix calls the ComputeWorldMatrix method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#computeworldmatrix
func (i *IShadowLight) ComputeWorldMatrix(opts *IShadowLightComputeWorldMatrixOpts) *Matrix {
	if opts == nil {
		opts = &IShadowLightComputeWorldMatrixOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Force == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Force)
	}

	retVal := i.p.Call("computeWorldMatrix", args...)
	return MatrixFromJSObject(retVal, i.ctx)
}

// IShadowLightConstructOpts contains optional parameters for IShadowLight.Construct.
type IShadowLightConstructOpts struct {
	Options *interface{}
}

// Construct calls the Construct method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#construct
func (i *IShadowLight) Construct(jsType string, name string, scene *Scene, opts *IShadowLightConstructOpts) js.Value {
	if opts == nil {
		opts = &IShadowLightConstructOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, jsType)
	args = append(args, name)
	args = append(args, scene.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := i.p.Call("Construct", args...)
	return retVal
}

// CreateAnimationRange calls the CreateAnimationRange method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#createanimationrange
func (i *IShadowLight) CreateAnimationRange(name string, from float64, to float64) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, from)
	args = append(args, to)

	i.p.Call("createAnimationRange", args...)
}

// IShadowLightDeleteAnimationRangeOpts contains optional parameters for IShadowLight.DeleteAnimationRange.
type IShadowLightDeleteAnimationRangeOpts struct {
	DeleteFrames *bool
}

// DeleteAnimationRange calls the DeleteAnimationRange method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#deleteanimationrange
func (i *IShadowLight) DeleteAnimationRange(name string, opts *IShadowLightDeleteAnimationRangeOpts) {
	if opts == nil {
		opts = &IShadowLightDeleteAnimationRangeOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, name)

	if opts.DeleteFrames == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DeleteFrames)
	}

	i.p.Call("deleteAnimationRange", args...)
}

// IShadowLightDisposeOpts contains optional parameters for IShadowLight.Dispose.
type IShadowLightDisposeOpts struct {
	DoNotRecurse               *bool
	DisposeMaterialAndTextures *bool
}

// Dispose calls the Dispose method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#dispose
func (i *IShadowLight) Dispose(opts *IShadowLightDisposeOpts) {
	if opts == nil {
		opts = &IShadowLightDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DoNotRecurse == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DoNotRecurse)
	}
	if opts.DisposeMaterialAndTextures == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DisposeMaterialAndTextures)
	}

	i.p.Call("dispose", args...)
}

// ForceProjectionMatrixCompute calls the ForceProjectionMatrixCompute method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#forceprojectionmatrixcompute
func (i *IShadowLight) ForceProjectionMatrixCompute() {

	i.p.Call("forceProjectionMatrixCompute")
}

// GetAbsolutePosition calls the GetAbsolutePosition method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getabsoluteposition
func (i *IShadowLight) GetAbsolutePosition() *Vector3 {

	retVal := i.p.Call("getAbsolutePosition")
	return Vector3FromJSObject(retVal, i.ctx)
}

// GetAnimationByName calls the GetAnimationByName method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getanimationbyname
func (i *IShadowLight) GetAnimationByName(name string) *Animation {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := i.p.Call("getAnimationByName", args...)
	return AnimationFromJSObject(retVal, i.ctx)
}

// GetAnimationRange calls the GetAnimationRange method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getanimationrange
func (i *IShadowLight) GetAnimationRange(name string) *AnimationRange {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := i.p.Call("getAnimationRange", args...)
	return AnimationRangeFromJSObject(retVal, i.ctx)
}

// GetAnimationRanges calls the GetAnimationRanges method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getanimationranges
func (i *IShadowLight) GetAnimationRanges() *AnimationRange {

	retVal := i.p.Call("getAnimationRanges")
	return AnimationRangeFromJSObject(retVal, i.ctx)
}

// GetBehaviorByName calls the GetBehaviorByName method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getbehaviorbyname
func (i *IShadowLight) GetBehaviorByName(name string) js.Value {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := i.p.Call("getBehaviorByName", args...)
	return retVal
}

// IShadowLightGetChildMeshesOpts contains optional parameters for IShadowLight.GetChildMeshes.
type IShadowLightGetChildMeshesOpts struct {
	DirectDescendantsOnly *bool
	Predicate             *func()
}

// GetChildMeshes calls the GetChildMeshes method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getchildmeshes
func (i *IShadowLight) GetChildMeshes(opts *IShadowLightGetChildMeshesOpts) *AbstractMesh {
	if opts == nil {
		opts = &IShadowLightGetChildMeshesOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := i.p.Call("getChildMeshes", args...)
	return AbstractMeshFromJSObject(retVal, i.ctx)
}

// IShadowLightGetChildrenOpts contains optional parameters for IShadowLight.GetChildren.
type IShadowLightGetChildrenOpts struct {
	Predicate             *func()
	DirectDescendantsOnly *bool
}

// GetChildren calls the GetChildren method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getchildren
func (i *IShadowLight) GetChildren(opts *IShadowLightGetChildrenOpts) *Node {
	if opts == nil {
		opts = &IShadowLightGetChildrenOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}
	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}

	retVal := i.p.Call("getChildren", args...)
	return NodeFromJSObject(retVal, i.ctx)
}

// GetClassName calls the GetClassName method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getclassname
func (i *IShadowLight) GetClassName() string {

	retVal := i.p.Call("getClassName")
	return retVal.String()
}

// GetConstructorFromName calls the GetConstructorFromName method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getconstructorfromname
func (i *IShadowLight) GetConstructorFromName(jsType float64, name string, scene *Scene) js.Value {

	args := make([]interface{}, 0, 3+0)

	args = append(args, jsType)
	args = append(args, name)
	args = append(args, scene.JSObject())

	retVal := i.p.Call("GetConstructorFromName", args...)
	return retVal
}

// GetDepthMaxZ calls the GetDepthMaxZ method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getdepthmaxz
func (i *IShadowLight) GetDepthMaxZ(activeCamera *Camera) float64 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, activeCamera.JSObject())

	retVal := i.p.Call("getDepthMaxZ", args...)
	return retVal.Float()
}

// GetDepthMinZ calls the GetDepthMinZ method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getdepthminz
func (i *IShadowLight) GetDepthMinZ(activeCamera *Camera) float64 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, activeCamera.JSObject())

	retVal := i.p.Call("getDepthMinZ", args...)
	return retVal.Float()
}

// GetDepthScale calls the GetDepthScale method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getdepthscale
func (i *IShadowLight) GetDepthScale() float64 {

	retVal := i.p.Call("getDepthScale")
	return retVal.Float()
}

// IShadowLightGetDescendantsOpts contains optional parameters for IShadowLight.GetDescendants.
type IShadowLightGetDescendantsOpts struct {
	DirectDescendantsOnly *bool
	Predicate             *func()
}

// GetDescendants calls the GetDescendants method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getdescendants
func (i *IShadowLight) GetDescendants(opts *IShadowLightGetDescendantsOpts) *Node {
	if opts == nil {
		opts = &IShadowLightGetDescendantsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := i.p.Call("getDescendants", args...)
	return NodeFromJSObject(retVal, i.ctx)
}

// GetEngine calls the GetEngine method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getengine
func (i *IShadowLight) GetEngine() *Engine {

	retVal := i.p.Call("getEngine")
	return EngineFromJSObject(retVal, i.ctx)
}

// IShadowLightGetHierarchyBoundingVectorsOpts contains optional parameters for IShadowLight.GetHierarchyBoundingVectors.
type IShadowLightGetHierarchyBoundingVectorsOpts struct {
	IncludeDescendants *bool
	Predicate          *func()
}

// GetHierarchyBoundingVectors calls the GetHierarchyBoundingVectors method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#gethierarchyboundingvectors
func (i *IShadowLight) GetHierarchyBoundingVectors(opts *IShadowLightGetHierarchyBoundingVectorsOpts) js.Value {
	if opts == nil {
		opts = &IShadowLightGetHierarchyBoundingVectorsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.IncludeDescendants == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IncludeDescendants)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := i.p.Call("getHierarchyBoundingVectors", args...)
	return retVal
}

// GetScaledIntensity calls the GetScaledIntensity method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getscaledintensity
func (i *IShadowLight) GetScaledIntensity() float64 {

	retVal := i.p.Call("getScaledIntensity")
	return retVal.Float()
}

// GetScene calls the GetScene method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getscene
func (i *IShadowLight) GetScene() *Scene {

	retVal := i.p.Call("getScene")
	return SceneFromJSObject(retVal, i.ctx)
}

// IShadowLightGetShadowDirectionOpts contains optional parameters for IShadowLight.GetShadowDirection.
type IShadowLightGetShadowDirectionOpts struct {
	FaceIndex *float64
}

// GetShadowDirection calls the GetShadowDirection method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getshadowdirection
func (i *IShadowLight) GetShadowDirection(opts *IShadowLightGetShadowDirectionOpts) *Vector3 {
	if opts == nil {
		opts = &IShadowLightGetShadowDirectionOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.FaceIndex == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FaceIndex)
	}

	retVal := i.p.Call("getShadowDirection", args...)
	return Vector3FromJSObject(retVal, i.ctx)
}

// GetShadowGenerator calls the GetShadowGenerator method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getshadowgenerator
func (i *IShadowLight) GetShadowGenerator() *IShadowGenerator {

	retVal := i.p.Call("getShadowGenerator")
	return IShadowGeneratorFromJSObject(retVal, i.ctx)
}

// GetTypeID calls the GetTypeID method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#gettypeid
func (i *IShadowLight) GetTypeID() float64 {

	retVal := i.p.Call("getTypeID")
	return retVal.Float()
}

// GetWorldMatrix calls the GetWorldMatrix method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#getworldmatrix
func (i *IShadowLight) GetWorldMatrix() *Matrix {

	retVal := i.p.Call("getWorldMatrix")
	return MatrixFromJSObject(retVal, i.ctx)
}

// IsDescendantOf calls the IsDescendantOf method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#isdescendantof
func (i *IShadowLight) IsDescendantOf(ancestor *Node) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, ancestor.JSObject())

	retVal := i.p.Call("isDescendantOf", args...)
	return retVal.Bool()
}

// IsDisposed calls the IsDisposed method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#isdisposed
func (i *IShadowLight) IsDisposed() bool {

	retVal := i.p.Call("isDisposed")
	return retVal.Bool()
}

// IShadowLightIsEnabledOpts contains optional parameters for IShadowLight.IsEnabled.
type IShadowLightIsEnabledOpts struct {
	CheckAncestors *bool
}

// IsEnabled calls the IsEnabled method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#isenabled
func (i *IShadowLight) IsEnabled(opts *IShadowLightIsEnabledOpts) bool {
	if opts == nil {
		opts = &IShadowLightIsEnabledOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.CheckAncestors == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CheckAncestors)
	}

	retVal := i.p.Call("isEnabled", args...)
	return retVal.Bool()
}

// IShadowLightIsReadyOpts contains optional parameters for IShadowLight.IsReady.
type IShadowLightIsReadyOpts struct {
	CompleteCheck *bool
}

// IsReady calls the IsReady method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#isready
func (i *IShadowLight) IsReady(opts *IShadowLightIsReadyOpts) bool {
	if opts == nil {
		opts = &IShadowLightIsReadyOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.CompleteCheck == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CompleteCheck)
	}

	retVal := i.p.Call("isReady", args...)
	return retVal.Bool()
}

// NeedCube calls the NeedCube method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#needcube
func (i *IShadowLight) NeedCube() bool {

	retVal := i.p.Call("needCube")
	return retVal.Bool()
}

// NeedProjectionMatrixCompute calls the NeedProjectionMatrixCompute method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#needprojectionmatrixcompute
func (i *IShadowLight) NeedProjectionMatrixCompute() bool {

	retVal := i.p.Call("needProjectionMatrixCompute")
	return retVal.Bool()
}

// Parse calls the Parse method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#parse
func (i *IShadowLight) Parse(parsedLight interface{}, scene *Scene) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, parsedLight)
	args = append(args, scene.JSObject())

	retVal := i.p.Call("Parse", args...)
	return LightFromJSObject(retVal, i.ctx)
}

// ParseAnimationRanges calls the ParseAnimationRanges method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#parseanimationranges
func (i *IShadowLight) ParseAnimationRanges(node *Node, parsedNode interface{}, scene *Scene) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, node.JSObject())
	args = append(args, parsedNode)
	args = append(args, scene.JSObject())

	i.p.Call("ParseAnimationRanges", args...)
}

// PrepareLightSpecificDefines calls the PrepareLightSpecificDefines method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#preparelightspecificdefines
func (i *IShadowLight) PrepareLightSpecificDefines(defines interface{}, lightIndex float64) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, defines)
	args = append(args, lightIndex)

	i.p.Call("prepareLightSpecificDefines", args...)
}

// RemoveBehavior calls the RemoveBehavior method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#removebehavior
func (i *IShadowLight) RemoveBehavior(behavior js.Value) *Node {

	args := make([]interface{}, 0, 1+0)

	args = append(args, behavior)

	retVal := i.p.Call("removeBehavior", args...)
	return NodeFromJSObject(retVal, i.ctx)
}

// Serialize calls the Serialize method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#serialize
func (i *IShadowLight) Serialize() interface{} {

	retVal := i.p.Call("serialize")
	return retVal
}

// SerializeAnimationRanges calls the SerializeAnimationRanges method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#serializeanimationranges
func (i *IShadowLight) SerializeAnimationRanges() interface{} {

	retVal := i.p.Call("serializeAnimationRanges")
	return retVal
}

// SetEnabled calls the SetEnabled method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#setenabled
func (i *IShadowLight) SetEnabled(value bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, value)

	i.p.Call("setEnabled", args...)
}

// SetShadowProjectionMatrix calls the SetShadowProjectionMatrix method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#setshadowprojectionmatrix
func (i *IShadowLight) SetShadowProjectionMatrix(matrix *Matrix, viewMatrix *Matrix, renderList []*AbstractMesh) *IShadowLight {

	args := make([]interface{}, 0, 3+0)

	args = append(args, matrix.JSObject())
	args = append(args, viewMatrix.JSObject())
	args = append(args, AbstractMeshArrayToJSArray(renderList))

	retVal := i.p.Call("setShadowProjectionMatrix", args...)
	return IShadowLightFromJSObject(retVal, i.ctx)
}

// IShadowLightToStringOpts contains optional parameters for IShadowLight.ToString.
type IShadowLightToStringOpts struct {
	FullDetails *bool
}

// ToString calls the ToString method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#tostring
func (i *IShadowLight) ToString(opts *IShadowLightToStringOpts) string {
	if opts == nil {
		opts = &IShadowLightToStringOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.FullDetails == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FullDetails)
	}

	retVal := i.p.Call("toString", args...)
	return retVal.String()
}

// TransferTexturesToEffect calls the TransferTexturesToEffect method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#transfertexturestoeffect
func (i *IShadowLight) TransferTexturesToEffect(effect *Effect, lightIndex string) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, lightIndex)

	retVal := i.p.Call("transferTexturesToEffect", args...)
	return LightFromJSObject(retVal, i.ctx)
}

// TransferToEffect calls the TransferToEffect method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#transfertoeffect
func (i *IShadowLight) TransferToEffect(effect *Effect, lightIndex string) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, lightIndex)

	retVal := i.p.Call("transferToEffect", args...)
	return LightFromJSObject(retVal, i.ctx)
}

// TransferToNodeMaterialEffect calls the TransferToNodeMaterialEffect method on the IShadowLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#transfertonodematerialeffect
func (i *IShadowLight) TransferToNodeMaterialEffect(effect *Effect, lightDataUniformName string) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, lightDataUniformName)

	retVal := i.p.Call("transferToNodeMaterialEffect", args...)
	return LightFromJSObject(retVal, i.ctx)
}

/*

// AnimationPropertiesOverride returns the AnimationPropertiesOverride property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#animationpropertiesoverride
func (i *IShadowLight) AnimationPropertiesOverride(animationPropertiesOverride *AnimationPropertiesOverride) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(animationPropertiesOverride.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetAnimationPropertiesOverride sets the AnimationPropertiesOverride property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#animationpropertiesoverride
func (i *IShadowLight) SetAnimationPropertiesOverride(animationPropertiesOverride *AnimationPropertiesOverride) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(animationPropertiesOverride.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// Animations returns the Animations property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#animations
func (i *IShadowLight) Animations(animations *Animation) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(animations.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#animations
func (i *IShadowLight) SetAnimations(animations *Animation) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(animations.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// Behaviors returns the Behaviors property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#behaviors
func (i *IShadowLight) Behaviors(behaviors js.Value) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(behaviors)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetBehaviors sets the Behaviors property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#behaviors
func (i *IShadowLight) SetBehaviors(behaviors js.Value) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(behaviors)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// CustomProjectionMatrixBuilder returns the CustomProjectionMatrixBuilder property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#customprojectionmatrixbuilder
func (i *IShadowLight) CustomProjectionMatrixBuilder(customProjectionMatrixBuilder func()) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {customProjectionMatrixBuilder(); return nil}))
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetCustomProjectionMatrixBuilder sets the CustomProjectionMatrixBuilder property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#customprojectionmatrixbuilder
func (i *IShadowLight) SetCustomProjectionMatrixBuilder(customProjectionMatrixBuilder func()) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {customProjectionMatrixBuilder(); return nil}))
	return IShadowLightFromJSObject(p, ba.ctx)
}

// Diffuse returns the Diffuse property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#diffuse
func (i *IShadowLight) Diffuse(diffuse *Color3) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(diffuse.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetDiffuse sets the Diffuse property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#diffuse
func (i *IShadowLight) SetDiffuse(diffuse *Color3) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(diffuse.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// Direction returns the Direction property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#direction
func (i *IShadowLight) Direction(direction *Vector3) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(direction.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetDirection sets the Direction property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#direction
func (i *IShadowLight) SetDirection(direction *Vector3) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(direction.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// DoNotSerialize returns the DoNotSerialize property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#donotserialize
func (i *IShadowLight) DoNotSerialize(doNotSerialize bool) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(doNotSerialize)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetDoNotSerialize sets the DoNotSerialize property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#donotserialize
func (i *IShadowLight) SetDoNotSerialize(doNotSerialize bool) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(doNotSerialize)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// ExcludeWithLayerMask returns the ExcludeWithLayerMask property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#excludewithlayermask
func (i *IShadowLight) ExcludeWithLayerMask(excludeWithLayerMask float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(excludeWithLayerMask)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetExcludeWithLayerMask sets the ExcludeWithLayerMask property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#excludewithlayermask
func (i *IShadowLight) SetExcludeWithLayerMask(excludeWithLayerMask float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(excludeWithLayerMask)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// ExcludedMeshes returns the ExcludedMeshes property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#excludedmeshes
func (i *IShadowLight) ExcludedMeshes(excludedMeshes *AbstractMesh) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(excludedMeshes.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetExcludedMeshes sets the ExcludedMeshes property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#excludedmeshes
func (i *IShadowLight) SetExcludedMeshes(excludedMeshes *AbstractMesh) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(excludedMeshes.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// FALLOFF_DEFAULT returns the FALLOFF_DEFAULT property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#falloff_default
func (i *IShadowLight) FALLOFF_DEFAULT(FALLOFF_DEFAULT float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(FALLOFF_DEFAULT)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_DEFAULT sets the FALLOFF_DEFAULT property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#falloff_default
func (i *IShadowLight) SetFALLOFF_DEFAULT(FALLOFF_DEFAULT float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(FALLOFF_DEFAULT)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// FALLOFF_GLTF returns the FALLOFF_GLTF property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#falloff_gltf
func (i *IShadowLight) FALLOFF_GLTF(FALLOFF_GLTF float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(FALLOFF_GLTF)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_GLTF sets the FALLOFF_GLTF property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#falloff_gltf
func (i *IShadowLight) SetFALLOFF_GLTF(FALLOFF_GLTF float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(FALLOFF_GLTF)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// FALLOFF_PHYSICAL returns the FALLOFF_PHYSICAL property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#falloff_physical
func (i *IShadowLight) FALLOFF_PHYSICAL(FALLOFF_PHYSICAL float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(FALLOFF_PHYSICAL)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_PHYSICAL sets the FALLOFF_PHYSICAL property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#falloff_physical
func (i *IShadowLight) SetFALLOFF_PHYSICAL(FALLOFF_PHYSICAL float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(FALLOFF_PHYSICAL)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// FALLOFF_STANDARD returns the FALLOFF_STANDARD property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#falloff_standard
func (i *IShadowLight) FALLOFF_STANDARD(FALLOFF_STANDARD float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(FALLOFF_STANDARD)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_STANDARD sets the FALLOFF_STANDARD property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#falloff_standard
func (i *IShadowLight) SetFALLOFF_STANDARD(FALLOFF_STANDARD float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(FALLOFF_STANDARD)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// FalloffType returns the FalloffType property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#fallofftype
func (i *IShadowLight) FalloffType(falloffType float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(falloffType)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetFalloffType sets the FalloffType property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#fallofftype
func (i *IShadowLight) SetFalloffType(falloffType float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(falloffType)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_AUTOMATIC returns the INTENSITYMODE_AUTOMATIC property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#intensitymode_automatic
func (i *IShadowLight) INTENSITYMODE_AUTOMATIC(INTENSITYMODE_AUTOMATIC float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(INTENSITYMODE_AUTOMATIC)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_AUTOMATIC sets the INTENSITYMODE_AUTOMATIC property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#intensitymode_automatic
func (i *IShadowLight) SetINTENSITYMODE_AUTOMATIC(INTENSITYMODE_AUTOMATIC float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(INTENSITYMODE_AUTOMATIC)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_ILLUMINANCE returns the INTENSITYMODE_ILLUMINANCE property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#intensitymode_illuminance
func (i *IShadowLight) INTENSITYMODE_ILLUMINANCE(INTENSITYMODE_ILLUMINANCE float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(INTENSITYMODE_ILLUMINANCE)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_ILLUMINANCE sets the INTENSITYMODE_ILLUMINANCE property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#intensitymode_illuminance
func (i *IShadowLight) SetINTENSITYMODE_ILLUMINANCE(INTENSITYMODE_ILLUMINANCE float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(INTENSITYMODE_ILLUMINANCE)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_LUMINANCE returns the INTENSITYMODE_LUMINANCE property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#intensitymode_luminance
func (i *IShadowLight) INTENSITYMODE_LUMINANCE(INTENSITYMODE_LUMINANCE float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(INTENSITYMODE_LUMINANCE)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_LUMINANCE sets the INTENSITYMODE_LUMINANCE property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#intensitymode_luminance
func (i *IShadowLight) SetINTENSITYMODE_LUMINANCE(INTENSITYMODE_LUMINANCE float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(INTENSITYMODE_LUMINANCE)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_LUMINOUSINTENSITY returns the INTENSITYMODE_LUMINOUSINTENSITY property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#intensitymode_luminousintensity
func (i *IShadowLight) INTENSITYMODE_LUMINOUSINTENSITY(INTENSITYMODE_LUMINOUSINTENSITY float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(INTENSITYMODE_LUMINOUSINTENSITY)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_LUMINOUSINTENSITY sets the INTENSITYMODE_LUMINOUSINTENSITY property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#intensitymode_luminousintensity
func (i *IShadowLight) SetINTENSITYMODE_LUMINOUSINTENSITY(INTENSITYMODE_LUMINOUSINTENSITY float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(INTENSITYMODE_LUMINOUSINTENSITY)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_LUMINOUSPOWER returns the INTENSITYMODE_LUMINOUSPOWER property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#intensitymode_luminouspower
func (i *IShadowLight) INTENSITYMODE_LUMINOUSPOWER(INTENSITYMODE_LUMINOUSPOWER float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(INTENSITYMODE_LUMINOUSPOWER)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_LUMINOUSPOWER sets the INTENSITYMODE_LUMINOUSPOWER property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#intensitymode_luminouspower
func (i *IShadowLight) SetINTENSITYMODE_LUMINOUSPOWER(INTENSITYMODE_LUMINOUSPOWER float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(INTENSITYMODE_LUMINOUSPOWER)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// Id returns the Id property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#id
func (i *IShadowLight) Id(id string) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(id)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetId sets the Id property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#id
func (i *IShadowLight) SetId(id string) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(id)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// IncludeOnlyWithLayerMask returns the IncludeOnlyWithLayerMask property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#includeonlywithlayermask
func (i *IShadowLight) IncludeOnlyWithLayerMask(includeOnlyWithLayerMask float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(includeOnlyWithLayerMask)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetIncludeOnlyWithLayerMask sets the IncludeOnlyWithLayerMask property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#includeonlywithlayermask
func (i *IShadowLight) SetIncludeOnlyWithLayerMask(includeOnlyWithLayerMask float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(includeOnlyWithLayerMask)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// IncludedOnlyMeshes returns the IncludedOnlyMeshes property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#includedonlymeshes
func (i *IShadowLight) IncludedOnlyMeshes(includedOnlyMeshes *AbstractMesh) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(includedOnlyMeshes.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetIncludedOnlyMeshes sets the IncludedOnlyMeshes property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#includedonlymeshes
func (i *IShadowLight) SetIncludedOnlyMeshes(includedOnlyMeshes *AbstractMesh) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(includedOnlyMeshes.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#inspectablecustomproperties
func (i *IShadowLight) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(inspectableCustomProperties.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#inspectablecustomproperties
func (i *IShadowLight) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(inspectableCustomProperties.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// Intensity returns the Intensity property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#intensity
func (i *IShadowLight) Intensity(intensity float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(intensity)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetIntensity sets the Intensity property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#intensity
func (i *IShadowLight) SetIntensity(intensity float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(intensity)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// IntensityMode returns the IntensityMode property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#intensitymode
func (i *IShadowLight) IntensityMode(intensityMode float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(intensityMode)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetIntensityMode sets the IntensityMode property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#intensitymode
func (i *IShadowLight) SetIntensityMode(intensityMode float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(intensityMode)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// LIGHTMAP_DEFAULT returns the LIGHTMAP_DEFAULT property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lightmap_default
func (i *IShadowLight) LIGHTMAP_DEFAULT(LIGHTMAP_DEFAULT float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(LIGHTMAP_DEFAULT)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetLIGHTMAP_DEFAULT sets the LIGHTMAP_DEFAULT property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lightmap_default
func (i *IShadowLight) SetLIGHTMAP_DEFAULT(LIGHTMAP_DEFAULT float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(LIGHTMAP_DEFAULT)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// LIGHTMAP_SHADOWSONLY returns the LIGHTMAP_SHADOWSONLY property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lightmap_shadowsonly
func (i *IShadowLight) LIGHTMAP_SHADOWSONLY(LIGHTMAP_SHADOWSONLY float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(LIGHTMAP_SHADOWSONLY)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetLIGHTMAP_SHADOWSONLY sets the LIGHTMAP_SHADOWSONLY property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lightmap_shadowsonly
func (i *IShadowLight) SetLIGHTMAP_SHADOWSONLY(LIGHTMAP_SHADOWSONLY float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(LIGHTMAP_SHADOWSONLY)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// LIGHTMAP_SPECULAR returns the LIGHTMAP_SPECULAR property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lightmap_specular
func (i *IShadowLight) LIGHTMAP_SPECULAR(LIGHTMAP_SPECULAR float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(LIGHTMAP_SPECULAR)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetLIGHTMAP_SPECULAR sets the LIGHTMAP_SPECULAR property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lightmap_specular
func (i *IShadowLight) SetLIGHTMAP_SPECULAR(LIGHTMAP_SPECULAR float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(LIGHTMAP_SPECULAR)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_DIRECTIONALLIGHT returns the LIGHTTYPEID_DIRECTIONALLIGHT property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lighttypeid_directionallight
func (i *IShadowLight) LIGHTTYPEID_DIRECTIONALLIGHT(LIGHTTYPEID_DIRECTIONALLIGHT float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(LIGHTTYPEID_DIRECTIONALLIGHT)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_DIRECTIONALLIGHT sets the LIGHTTYPEID_DIRECTIONALLIGHT property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lighttypeid_directionallight
func (i *IShadowLight) SetLIGHTTYPEID_DIRECTIONALLIGHT(LIGHTTYPEID_DIRECTIONALLIGHT float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(LIGHTTYPEID_DIRECTIONALLIGHT)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_HEMISPHERICLIGHT returns the LIGHTTYPEID_HEMISPHERICLIGHT property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lighttypeid_hemisphericlight
func (i *IShadowLight) LIGHTTYPEID_HEMISPHERICLIGHT(LIGHTTYPEID_HEMISPHERICLIGHT float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(LIGHTTYPEID_HEMISPHERICLIGHT)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_HEMISPHERICLIGHT sets the LIGHTTYPEID_HEMISPHERICLIGHT property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lighttypeid_hemisphericlight
func (i *IShadowLight) SetLIGHTTYPEID_HEMISPHERICLIGHT(LIGHTTYPEID_HEMISPHERICLIGHT float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(LIGHTTYPEID_HEMISPHERICLIGHT)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_POINTLIGHT returns the LIGHTTYPEID_POINTLIGHT property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lighttypeid_pointlight
func (i *IShadowLight) LIGHTTYPEID_POINTLIGHT(LIGHTTYPEID_POINTLIGHT float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(LIGHTTYPEID_POINTLIGHT)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_POINTLIGHT sets the LIGHTTYPEID_POINTLIGHT property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lighttypeid_pointlight
func (i *IShadowLight) SetLIGHTTYPEID_POINTLIGHT(LIGHTTYPEID_POINTLIGHT float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(LIGHTTYPEID_POINTLIGHT)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_SPOTLIGHT returns the LIGHTTYPEID_SPOTLIGHT property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lighttypeid_spotlight
func (i *IShadowLight) LIGHTTYPEID_SPOTLIGHT(LIGHTTYPEID_SPOTLIGHT float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(LIGHTTYPEID_SPOTLIGHT)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_SPOTLIGHT sets the LIGHTTYPEID_SPOTLIGHT property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lighttypeid_spotlight
func (i *IShadowLight) SetLIGHTTYPEID_SPOTLIGHT(LIGHTTYPEID_SPOTLIGHT float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(LIGHTTYPEID_SPOTLIGHT)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// LightmapMode returns the LightmapMode property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lightmapmode
func (i *IShadowLight) LightmapMode(lightmapMode float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(lightmapMode)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetLightmapMode sets the LightmapMode property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#lightmapmode
func (i *IShadowLight) SetLightmapMode(lightmapMode float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(lightmapMode)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#metadata
func (i *IShadowLight) Metadata(metadata interface{}) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(metadata)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#metadata
func (i *IShadowLight) SetMetadata(metadata interface{}) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(metadata)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#name
func (i *IShadowLight) Name(name string) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(name)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#name
func (i *IShadowLight) SetName(name string) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(name)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#ondispose
func (i *IShadowLight) OnDispose(onDispose func()) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#ondispose
func (i *IShadowLight) SetOnDispose(onDispose func()) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return IShadowLightFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#ondisposeobservable
func (i *IShadowLight) OnDisposeObservable(onDisposeObservable *Observable) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(onDisposeObservable.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#ondisposeobservable
func (i *IShadowLight) SetOnDisposeObservable(onDisposeObservable *Observable) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(onDisposeObservable.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// OnReady returns the OnReady property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#onready
func (i *IShadowLight) OnReady(onReady func()) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onReady(); return nil}))
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetOnReady sets the OnReady property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#onready
func (i *IShadowLight) SetOnReady(onReady func()) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onReady(); return nil}))
	return IShadowLightFromJSObject(p, ba.ctx)
}

// Parent returns the Parent property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#parent
func (i *IShadowLight) Parent(parent *Node) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(parent.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetParent sets the Parent property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#parent
func (i *IShadowLight) SetParent(parent *Node) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(parent.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// Position returns the Position property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#position
func (i *IShadowLight) Position(position *Vector3) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(position.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetPosition sets the Position property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#position
func (i *IShadowLight) SetPosition(position *Vector3) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(position.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// Radius returns the Radius property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#radius
func (i *IShadowLight) Radius(radius float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(radius)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetRadius sets the Radius property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#radius
func (i *IShadowLight) SetRadius(radius float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(radius)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// Range returns the Range property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#range
func (i *IShadowLight) Range(range float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(range)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetRange sets the Range property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#range
func (i *IShadowLight) SetRange(range float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(range)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// RenderPriority returns the RenderPriority property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#renderpriority
func (i *IShadowLight) RenderPriority(renderPriority float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(renderPriority)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetRenderPriority sets the RenderPriority property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#renderpriority
func (i *IShadowLight) SetRenderPriority(renderPriority float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(renderPriority)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#reserveddatastore
func (i *IShadowLight) ReservedDataStore(reservedDataStore interface{}) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(reservedDataStore)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#reserveddatastore
func (i *IShadowLight) SetReservedDataStore(reservedDataStore interface{}) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(reservedDataStore)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// ShadowEnabled returns the ShadowEnabled property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#shadowenabled
func (i *IShadowLight) ShadowEnabled(shadowEnabled bool) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(shadowEnabled)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetShadowEnabled sets the ShadowEnabled property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#shadowenabled
func (i *IShadowLight) SetShadowEnabled(shadowEnabled bool) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(shadowEnabled)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// ShadowMaxZ returns the ShadowMaxZ property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#shadowmaxz
func (i *IShadowLight) ShadowMaxZ(shadowMaxZ float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(shadowMaxZ)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetShadowMaxZ sets the ShadowMaxZ property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#shadowmaxz
func (i *IShadowLight) SetShadowMaxZ(shadowMaxZ float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(shadowMaxZ)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// ShadowMinZ returns the ShadowMinZ property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#shadowminz
func (i *IShadowLight) ShadowMinZ(shadowMinZ float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(shadowMinZ)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetShadowMinZ sets the ShadowMinZ property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#shadowminz
func (i *IShadowLight) SetShadowMinZ(shadowMinZ float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(shadowMinZ)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// Specular returns the Specular property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#specular
func (i *IShadowLight) Specular(specular *Color3) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(specular.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetSpecular sets the Specular property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#specular
func (i *IShadowLight) SetSpecular(specular *Color3) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(specular.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// State returns the State property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#state
func (i *IShadowLight) State(state string) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(state)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetState sets the State property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#state
func (i *IShadowLight) SetState(state string) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(state)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// TransformedDirection returns the TransformedDirection property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#transformeddirection
func (i *IShadowLight) TransformedDirection(transformedDirection *Vector3) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(transformedDirection.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetTransformedDirection sets the TransformedDirection property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#transformeddirection
func (i *IShadowLight) SetTransformedDirection(transformedDirection *Vector3) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(transformedDirection.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// TransformedPosition returns the TransformedPosition property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#transformedposition
func (i *IShadowLight) TransformedPosition(transformedPosition *Vector3) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(transformedPosition.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetTransformedPosition sets the TransformedPosition property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#transformedposition
func (i *IShadowLight) SetTransformedPosition(transformedPosition *Vector3) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(transformedPosition.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#uniqueid
func (i *IShadowLight) UniqueId(uniqueId float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(uniqueId)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#uniqueid
func (i *IShadowLight) SetUniqueId(uniqueId float64) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(uniqueId)
	return IShadowLightFromJSObject(p, ba.ctx)
}

// WorldMatrixFromCache returns the WorldMatrixFromCache property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#worldmatrixfromcache
func (i *IShadowLight) WorldMatrixFromCache(worldMatrixFromCache *Matrix) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(worldMatrixFromCache.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

// SetWorldMatrixFromCache sets the WorldMatrixFromCache property of class IShadowLight.
//
// https://doc.babylonjs.com/api/classes/babylon.ishadowlight#worldmatrixfromcache
func (i *IShadowLight) SetWorldMatrixFromCache(worldMatrixFromCache *Matrix) *IShadowLight {
	p := ba.ctx.Get("IShadowLight").New(worldMatrixFromCache.JSObject())
	return IShadowLightFromJSObject(p, ba.ctx)
}

*/
