// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ScaleBlock represents a babylon.js ScaleBlock.
// Block used to scale a vector by a float
type ScaleBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *ScaleBlock) JSObject() js.Value { return s.p }

// ScaleBlock returns a ScaleBlock JavaScript class.
func (ba *Babylon) ScaleBlock() *ScaleBlock {
	p := ba.ctx.Get("ScaleBlock")
	return ScaleBlockFromJSObject(p, ba.ctx)
}

// ScaleBlockFromJSObject returns a wrapped ScaleBlock JavaScript class.
func ScaleBlockFromJSObject(p js.Value, ctx js.Value) *ScaleBlock {
	return &ScaleBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// ScaleBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func ScaleBlockArrayToJSArray(array []*ScaleBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewScaleBlock returns a new ScaleBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.scaleblock#constructor
func (ba *Babylon) NewScaleBlock(name string) *ScaleBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("ScaleBlock").New(args...)
	return ScaleBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the ScaleBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.scaleblock#getclassname
func (s *ScaleBlock) GetClassName() string {

	retVal := s.p.Call("getClassName")
	return retVal.String()
}

// Factor returns the Factor property of class ScaleBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.scaleblock#factor
func (s *ScaleBlock) Factor() *NodeMaterialConnectionPoint {
	retVal := s.p.Get("factor")
	return NodeMaterialConnectionPointFromJSObject(retVal, s.ctx)
}

// SetFactor sets the Factor property of class ScaleBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.scaleblock#factor
func (s *ScaleBlock) SetFactor(factor *NodeMaterialConnectionPoint) *ScaleBlock {
	s.p.Set("factor", factor.JSObject())
	return s
}

// Input returns the Input property of class ScaleBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.scaleblock#input
func (s *ScaleBlock) Input() *NodeMaterialConnectionPoint {
	retVal := s.p.Get("input")
	return NodeMaterialConnectionPointFromJSObject(retVal, s.ctx)
}

// SetInput sets the Input property of class ScaleBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.scaleblock#input
func (s *ScaleBlock) SetInput(input *NodeMaterialConnectionPoint) *ScaleBlock {
	s.p.Set("input", input.JSObject())
	return s
}

// Output returns the Output property of class ScaleBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.scaleblock#output
func (s *ScaleBlock) Output() *NodeMaterialConnectionPoint {
	retVal := s.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, s.ctx)
}

// SetOutput sets the Output property of class ScaleBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.scaleblock#output
func (s *ScaleBlock) SetOutput(output *NodeMaterialConnectionPoint) *ScaleBlock {
	s.p.Set("output", output.JSObject())
	return s
}
