// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IcoSphereBuilder represents a babylon.js IcoSphereBuilder.
// Class containing static functions to help procedurally build meshes
type IcoSphereBuilder struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IcoSphereBuilder) JSObject() js.Value { return i.p }

// IcoSphereBuilder returns a IcoSphereBuilder JavaScript class.
func (ba *Babylon) IcoSphereBuilder() *IcoSphereBuilder {
	p := ba.ctx.Get("IcoSphereBuilder")
	return IcoSphereBuilderFromJSObject(p, ba.ctx)
}

// IcoSphereBuilderFromJSObject returns a wrapped IcoSphereBuilder JavaScript class.
func IcoSphereBuilderFromJSObject(p js.Value, ctx js.Value) *IcoSphereBuilder {
	return &IcoSphereBuilder{p: p, ctx: ctx}
}

// IcoSphereBuilderArrayToJSArray returns a JavaScript Array for the wrapped array.
func IcoSphereBuilderArrayToJSArray(array []*IcoSphereBuilder) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// IcoSphereBuilderCreateIcoSphereOpts contains optional parameters for IcoSphereBuilder.CreateIcoSphere.
type IcoSphereBuilderCreateIcoSphereOpts struct {
	Scene *Scene
}

// CreateIcoSphere calls the CreateIcoSphere method on the IcoSphereBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.icospherebuilder#createicosphere
func (i *IcoSphereBuilder) CreateIcoSphere(name string, options js.Value, opts *IcoSphereBuilderCreateIcoSphereOpts) *Mesh {
	if opts == nil {
		opts = &IcoSphereBuilderCreateIcoSphereOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, options)

	if opts.Scene == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scene.JSObject())
	}

	retVal := i.p.Call("CreateIcoSphere", args...)
	return MeshFromJSObject(retVal, i.ctx)
}

/*

 */
