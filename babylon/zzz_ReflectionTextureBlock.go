// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ReflectionTextureBlock represents a babylon.js ReflectionTextureBlock.
// Block used to read a reflection texture from a sampler
type ReflectionTextureBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *ReflectionTextureBlock) JSObject() js.Value { return r.p }

// ReflectionTextureBlock returns a ReflectionTextureBlock JavaScript class.
func (ba *Babylon) ReflectionTextureBlock() *ReflectionTextureBlock {
	p := ba.ctx.Get("ReflectionTextureBlock")
	return ReflectionTextureBlockFromJSObject(p, ba.ctx)
}

// ReflectionTextureBlockFromJSObject returns a wrapped ReflectionTextureBlock JavaScript class.
func ReflectionTextureBlockFromJSObject(p js.Value, ctx js.Value) *ReflectionTextureBlock {
	return &ReflectionTextureBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// NewReflectionTextureBlock returns a new ReflectionTextureBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectiontextureblock
func (ba *Babylon) NewReflectionTextureBlock(name string) *ReflectionTextureBlock {
	p := ba.ctx.Get("ReflectionTextureBlock").New(name)
	return ReflectionTextureBlockFromJSObject(p, ba.ctx)
}

// TODO: methods
