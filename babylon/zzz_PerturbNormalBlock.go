// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PerturbNormalBlock represents a babylon.js PerturbNormalBlock.
// Block used to pertub normals based on a normal map
type PerturbNormalBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PerturbNormalBlock) JSObject() js.Value { return p.p }

// PerturbNormalBlock returns a PerturbNormalBlock JavaScript class.
func (ba *Babylon) PerturbNormalBlock() *PerturbNormalBlock {
	p := ba.ctx.Get("PerturbNormalBlock")
	return PerturbNormalBlockFromJSObject(p, ba.ctx)
}

// PerturbNormalBlockFromJSObject returns a wrapped PerturbNormalBlock JavaScript class.
func PerturbNormalBlockFromJSObject(p js.Value, ctx js.Value) *PerturbNormalBlock {
	return &PerturbNormalBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// PerturbNormalBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func PerturbNormalBlockArrayToJSArray(array []*PerturbNormalBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPerturbNormalBlock returns a new PerturbNormalBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#constructor
func (ba *Babylon) NewPerturbNormalBlock(name string) *PerturbNormalBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("PerturbNormalBlock").New(args...)
	return PerturbNormalBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the PerturbNormalBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#autoconfigure
func (p *PerturbNormalBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	if material == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, material.JSObject())
	}

	p.p.Call("autoConfigure", args...)
}

// PerturbNormalBlockBindOpts contains optional parameters for PerturbNormalBlock.Bind.
type PerturbNormalBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the PerturbNormalBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#bind
func (p *PerturbNormalBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *PerturbNormalBlockBindOpts) {
	if opts == nil {
		opts = &PerturbNormalBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	if effect == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, effect.JSObject())
	}

	if nodeMaterial == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, nodeMaterial.JSObject())
	}

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	p.p.Call("bind", args...)
}

// GetClassName calls the GetClassName method on the PerturbNormalBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#getclassname
func (p *PerturbNormalBlock) GetClassName() string {

	retVal := p.p.Call("getClassName")
	return retVal.String()
}

// PrepareDefines calls the PrepareDefines method on the PerturbNormalBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#preparedefines
func (p *PerturbNormalBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value) {

	args := make([]interface{}, 0, 3+0)

	if mesh == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, mesh.JSObject())
	}

	if nodeMaterial == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, nodeMaterial.JSObject())
	}

	args = append(args, defines)

	p.p.Call("prepareDefines", args...)
}

// Serialize calls the Serialize method on the PerturbNormalBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#serialize
func (p *PerturbNormalBlock) Serialize() js.Value {

	retVal := p.p.Call("serialize")
	return retVal
}

// _deserialize calls the _deserialize method on the PerturbNormalBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#_deserialize
func (p *PerturbNormalBlock) _deserialize(serializationObject JSObject, scene *Scene, rootUrl string) {

	args := make([]interface{}, 0, 3+0)

	if serializationObject == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, serializationObject.JSObject())
	}

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	args = append(args, rootUrl)

	p.p.Call("_deserialize", args...)
}

// InvertX returns the InvertX property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#invertx
func (p *PerturbNormalBlock) InvertX() bool {
	retVal := p.p.Get("invertX")
	return retVal.Bool()
}

// SetInvertX sets the InvertX property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#invertx
func (p *PerturbNormalBlock) SetInvertX(invertX bool) *PerturbNormalBlock {
	p.p.Set("invertX", invertX)
	return p
}

// InvertY returns the InvertY property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#inverty
func (p *PerturbNormalBlock) InvertY() bool {
	retVal := p.p.Get("invertY")
	return retVal.Bool()
}

// SetInvertY sets the InvertY property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#inverty
func (p *PerturbNormalBlock) SetInvertY(invertY bool) *PerturbNormalBlock {
	p.p.Set("invertY", invertY)
	return p
}

// NormalMapColor returns the NormalMapColor property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#normalmapcolor
func (p *PerturbNormalBlock) NormalMapColor() *NodeMaterialConnectionPoint {
	retVal := p.p.Get("normalMapColor")
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// SetNormalMapColor sets the NormalMapColor property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#normalmapcolor
func (p *PerturbNormalBlock) SetNormalMapColor(normalMapColor *NodeMaterialConnectionPoint) *PerturbNormalBlock {
	p.p.Set("normalMapColor", normalMapColor.JSObject())
	return p
}

// Output returns the Output property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#output
func (p *PerturbNormalBlock) Output() *NodeMaterialConnectionPoint {
	retVal := p.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// SetOutput sets the Output property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#output
func (p *PerturbNormalBlock) SetOutput(output *NodeMaterialConnectionPoint) *PerturbNormalBlock {
	p.p.Set("output", output.JSObject())
	return p
}

// Strength returns the Strength property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#strength
func (p *PerturbNormalBlock) Strength() *NodeMaterialConnectionPoint {
	retVal := p.p.Get("strength")
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// SetStrength sets the Strength property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#strength
func (p *PerturbNormalBlock) SetStrength(strength *NodeMaterialConnectionPoint) *PerturbNormalBlock {
	p.p.Set("strength", strength.JSObject())
	return p
}

// Uv returns the Uv property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#uv
func (p *PerturbNormalBlock) Uv() *NodeMaterialConnectionPoint {
	retVal := p.p.Get("uv")
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// SetUv sets the Uv property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#uv
func (p *PerturbNormalBlock) SetUv(uv *NodeMaterialConnectionPoint) *PerturbNormalBlock {
	p.p.Set("uv", uv.JSObject())
	return p
}

// WorldNormal returns the WorldNormal property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#worldnormal
func (p *PerturbNormalBlock) WorldNormal() *NodeMaterialConnectionPoint {
	retVal := p.p.Get("worldNormal")
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// SetWorldNormal sets the WorldNormal property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#worldnormal
func (p *PerturbNormalBlock) SetWorldNormal(worldNormal *NodeMaterialConnectionPoint) *PerturbNormalBlock {
	p.p.Set("worldNormal", worldNormal.JSObject())
	return p
}

// WorldPosition returns the WorldPosition property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#worldposition
func (p *PerturbNormalBlock) WorldPosition() *NodeMaterialConnectionPoint {
	retVal := p.p.Get("worldPosition")
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// SetWorldPosition sets the WorldPosition property of class PerturbNormalBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.perturbnormalblock#worldposition
func (p *PerturbNormalBlock) SetWorldPosition(worldPosition *NodeMaterialConnectionPoint) *PerturbNormalBlock {
	p.p.Set("worldPosition", worldPosition.JSObject())
	return p
}
