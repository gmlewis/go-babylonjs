// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PickingInfo represents a babylon.js PickingInfo.
// Information about the result of picking within a scene
//
// See: https://doc.babylonjs.com/babylon101/picking_collisions
type PickingInfo struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PickingInfo) JSObject() js.Value { return p.p }

// PickingInfo returns a PickingInfo JavaScript class.
func (ba *Babylon) PickingInfo() *PickingInfo {
	p := ba.ctx.Get("PickingInfo")
	return PickingInfoFromJSObject(p, ba.ctx)
}

// PickingInfoFromJSObject returns a wrapped PickingInfo JavaScript class.
func PickingInfoFromJSObject(p js.Value, ctx js.Value) *PickingInfo {
	return &PickingInfo{p: p, ctx: ctx}
}

// PickingInfoArrayToJSArray returns a JavaScript Array for the wrapped array.
func PickingInfoArrayToJSArray(array []*PickingInfo) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// PickingInfoGetNormalOpts contains optional parameters for PickingInfo.GetNormal.
type PickingInfoGetNormalOpts struct {
	UseWorldCoordinates *bool
	UseVerticesNormals  *bool
}

// GetNormal calls the GetNormal method on the PickingInfo object.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#getnormal
func (p *PickingInfo) GetNormal(opts *PickingInfoGetNormalOpts) *Vector3 {
	if opts == nil {
		opts = &PickingInfoGetNormalOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.UseWorldCoordinates == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseWorldCoordinates)
	}
	if opts.UseVerticesNormals == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseVerticesNormals)
	}

	retVal := p.p.Call("getNormal", args...)
	return Vector3FromJSObject(retVal, p.ctx)
}

// GetTextureCoordinates calls the GetTextureCoordinates method on the PickingInfo object.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#gettexturecoordinates
func (p *PickingInfo) GetTextureCoordinates() *Vector2 {

	retVal := p.p.Call("getTextureCoordinates")
	return Vector2FromJSObject(retVal, p.ctx)
}

// Bu returns the Bu property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#bu
func (p *PickingInfo) Bu() float64 {
	retVal := p.p.Get("bu")
	return retVal.Float()
}

// SetBu sets the Bu property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#bu
func (p *PickingInfo) SetBu(bu float64) *PickingInfo {
	p.p.Set("bu", bu)
	return p
}

// Bv returns the Bv property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#bv
func (p *PickingInfo) Bv() float64 {
	retVal := p.p.Get("bv")
	return retVal.Float()
}

// SetBv sets the Bv property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#bv
func (p *PickingInfo) SetBv(bv float64) *PickingInfo {
	p.p.Set("bv", bv)
	return p
}

// Distance returns the Distance property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#distance
func (p *PickingInfo) Distance() float64 {
	retVal := p.p.Get("distance")
	return retVal.Float()
}

// SetDistance sets the Distance property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#distance
func (p *PickingInfo) SetDistance(distance float64) *PickingInfo {
	p.p.Set("distance", distance)
	return p
}

// FaceId returns the FaceId property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#faceid
func (p *PickingInfo) FaceId() float64 {
	retVal := p.p.Get("faceId")
	return retVal.Float()
}

// SetFaceId sets the FaceId property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#faceid
func (p *PickingInfo) SetFaceId(faceId float64) *PickingInfo {
	p.p.Set("faceId", faceId)
	return p
}

// Hit returns the Hit property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#hit
func (p *PickingInfo) Hit() bool {
	retVal := p.p.Get("hit")
	return retVal.Bool()
}

// SetHit sets the Hit property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#hit
func (p *PickingInfo) SetHit(hit bool) *PickingInfo {
	p.p.Set("hit", hit)
	return p
}

// OriginMesh returns the OriginMesh property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#originmesh
func (p *PickingInfo) OriginMesh() *AbstractMesh {
	retVal := p.p.Get("originMesh")
	return AbstractMeshFromJSObject(retVal, p.ctx)
}

// SetOriginMesh sets the OriginMesh property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#originmesh
func (p *PickingInfo) SetOriginMesh(originMesh *AbstractMesh) *PickingInfo {
	p.p.Set("originMesh", originMesh.JSObject())
	return p
}

// PickedMesh returns the PickedMesh property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#pickedmesh
func (p *PickingInfo) PickedMesh() *AbstractMesh {
	retVal := p.p.Get("pickedMesh")
	return AbstractMeshFromJSObject(retVal, p.ctx)
}

// SetPickedMesh sets the PickedMesh property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#pickedmesh
func (p *PickingInfo) SetPickedMesh(pickedMesh *AbstractMesh) *PickingInfo {
	p.p.Set("pickedMesh", pickedMesh.JSObject())
	return p
}

// PickedPoint returns the PickedPoint property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#pickedpoint
func (p *PickingInfo) PickedPoint() *Vector3 {
	retVal := p.p.Get("pickedPoint")
	return Vector3FromJSObject(retVal, p.ctx)
}

// SetPickedPoint sets the PickedPoint property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#pickedpoint
func (p *PickingInfo) SetPickedPoint(pickedPoint *Vector3) *PickingInfo {
	p.p.Set("pickedPoint", pickedPoint.JSObject())
	return p
}

// PickedSprite returns the PickedSprite property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#pickedsprite
func (p *PickingInfo) PickedSprite() *Sprite {
	retVal := p.p.Get("pickedSprite")
	return SpriteFromJSObject(retVal, p.ctx)
}

// SetPickedSprite sets the PickedSprite property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#pickedsprite
func (p *PickingInfo) SetPickedSprite(pickedSprite *Sprite) *PickingInfo {
	p.p.Set("pickedSprite", pickedSprite.JSObject())
	return p
}

// Ray returns the Ray property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#ray
func (p *PickingInfo) Ray() *Ray {
	retVal := p.p.Get("ray")
	return RayFromJSObject(retVal, p.ctx)
}

// SetRay sets the Ray property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#ray
func (p *PickingInfo) SetRay(ray *Ray) *PickingInfo {
	p.p.Set("ray", ray.JSObject())
	return p
}

// SubMeshId returns the SubMeshId property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#submeshid
func (p *PickingInfo) SubMeshId() float64 {
	retVal := p.p.Get("subMeshId")
	return retVal.Float()
}

// SetSubMeshId sets the SubMeshId property of class PickingInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.pickinginfo#submeshid
func (p *PickingInfo) SetSubMeshId(subMeshId float64) *PickingInfo {
	p.p.Set("subMeshId", subMeshId)
	return p
}
