// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ISceneComponent represents a babylon.js ISceneComponent.
// This represents a scene component.
//
// This is used to decouple the dependency the scene is having on the different workloads like
// layers, post processes...
type ISceneComponent struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ISceneComponent) JSObject() js.Value { return i.p }

// ISceneComponent returns a ISceneComponent JavaScript class.
func (ba *Babylon) ISceneComponent() *ISceneComponent {
	p := ba.ctx.Get("ISceneComponent")
	return ISceneComponentFromJSObject(p, ba.ctx)
}

// ISceneComponentFromJSObject returns a wrapped ISceneComponent JavaScript class.
func ISceneComponentFromJSObject(p js.Value, ctx js.Value) *ISceneComponent {
	return &ISceneComponent{p: p, ctx: ctx}
}

// ISceneComponentArrayToJSArray returns a JavaScript Array for the wrapped array.
func ISceneComponentArrayToJSArray(array []*ISceneComponent) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Dispose calls the Dispose method on the ISceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.iscenecomponent#dispose
func (i *ISceneComponent) Dispose() {

	i.p.Call("dispose")
}

// Rebuild calls the Rebuild method on the ISceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.iscenecomponent#rebuild
func (i *ISceneComponent) Rebuild() {

	i.p.Call("rebuild")
}

// Register calls the Register method on the ISceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.iscenecomponent#register
func (i *ISceneComponent) Register() {

	i.p.Call("register")
}

/*

// Name returns the Name property of class ISceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.iscenecomponent#name
func (i *ISceneComponent) Name(name string) *ISceneComponent {
	p := ba.ctx.Get("ISceneComponent").New(name)
	return ISceneComponentFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class ISceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.iscenecomponent#name
func (i *ISceneComponent) SetName(name string) *ISceneComponent {
	p := ba.ctx.Get("ISceneComponent").New(name)
	return ISceneComponentFromJSObject(p, ba.ctx)
}

// Scene returns the Scene property of class ISceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.iscenecomponent#scene
func (i *ISceneComponent) Scene(scene *Scene) *ISceneComponent {
	p := ba.ctx.Get("ISceneComponent").New(scene.JSObject())
	return ISceneComponentFromJSObject(p, ba.ctx)
}

// SetScene sets the Scene property of class ISceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.iscenecomponent#scene
func (i *ISceneComponent) SetScene(scene *Scene) *ISceneComponent {
	p := ba.ctx.Get("ISceneComponent").New(scene.JSObject())
	return ISceneComponentFromJSObject(p, ba.ctx)
}

*/
