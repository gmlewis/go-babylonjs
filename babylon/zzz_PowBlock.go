// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PowBlock represents a babylon.js PowBlock.
// Block used to get the value of the first parameter raised to the power of the second
type PowBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PowBlock) JSObject() js.Value { return p.p }

// PowBlock returns a PowBlock JavaScript class.
func (ba *Babylon) PowBlock() *PowBlock {
	p := ba.ctx.Get("PowBlock")
	return PowBlockFromJSObject(p, ba.ctx)
}

// PowBlockFromJSObject returns a wrapped PowBlock JavaScript class.
func PowBlockFromJSObject(p js.Value, ctx js.Value) *PowBlock {
	return &PowBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// PowBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func PowBlockArrayToJSArray(array []*PowBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPowBlock returns a new PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#constructor
func (ba *Babylon) NewPowBlock(name string) *PowBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("PowBlock").New(args...)
	return PowBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#getclassname
func (p *PowBlock) GetClassName() string {

	retVal := p.p.Call("getClassName")
	return retVal.String()
}

// Output returns the Output property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#output
func (p *PowBlock) Output() *NodeMaterialConnectionPoint {
	retVal := p.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// SetOutput sets the Output property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#output
func (p *PowBlock) SetOutput(output *NodeMaterialConnectionPoint) *PowBlock {
	p.p.Set("output", output.JSObject())
	return p
}

// Power returns the Power property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#power
func (p *PowBlock) Power() *NodeMaterialConnectionPoint {
	retVal := p.p.Get("power")
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// SetPower sets the Power property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#power
func (p *PowBlock) SetPower(power *NodeMaterialConnectionPoint) *PowBlock {
	p.p.Set("power", power.JSObject())
	return p
}

// Value returns the Value property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#value
func (p *PowBlock) Value() *NodeMaterialConnectionPoint {
	retVal := p.p.Get("value")
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// SetValue sets the Value property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#value
func (p *PowBlock) SetValue(value *NodeMaterialConnectionPoint) *PowBlock {
	p.p.Set("value", value.JSObject())
	return p
}
