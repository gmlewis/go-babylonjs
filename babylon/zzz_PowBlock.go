// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PowBlock represents a babylon.js PowBlock.
// Block used to get the value of the first parameter raised to the power of the second
type PowBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PowBlock) JSObject() js.Value { return p.p }

// PowBlock returns a PowBlock JavaScript class.
func (ba *Babylon) PowBlock() *PowBlock {
	p := ba.ctx.Get("PowBlock")
	return PowBlockFromJSObject(p, ba.ctx)
}

// PowBlockFromJSObject returns a wrapped PowBlock JavaScript class.
func PowBlockFromJSObject(p js.Value, ctx js.Value) *PowBlock {
	return &PowBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// PowBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func PowBlockArrayToJSArray(array []*PowBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPowBlock returns a new PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock
func (ba *Babylon) NewPowBlock(name string) *PowBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("PowBlock").New(args...)
	return PowBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#autoconfigure
func (p *PowBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	p.p.Call("autoConfigure", args...)
}

// PowBlockBindOpts contains optional parameters for PowBlock.Bind.
type PowBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#bind
func (p *PowBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *PowBlockBindOpts) {
	if opts == nil {
		opts = &PowBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	p.p.Call("bind", args...)
}

// Build calls the Build method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#build
func (p *PowBlock) Build(state *NodeMaterialBuildState, activeBlocks *NodeMaterialBlock) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, state.JSObject())
	args = append(args, activeBlocks.JSObject())

	retVal := p.p.Call("build", args...)
	return retVal.Bool()
}

// PowBlockCloneOpts contains optional parameters for PowBlock.Clone.
type PowBlockCloneOpts struct {
	RootUrl *string
}

// Clone calls the Clone method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#clone
func (p *PowBlock) Clone(scene *Scene, opts *PowBlockCloneOpts) *NodeMaterialBlock {
	if opts == nil {
		opts = &PowBlockCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := p.p.Call("clone", args...)
	return NodeMaterialBlockFromJSObject(retVal, p.ctx)
}

// PowBlockConnectToOpts contains optional parameters for PowBlock.ConnectTo.
type PowBlockConnectToOpts struct {
	Options js.Value
}

// ConnectTo calls the ConnectTo method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#connectto
func (p *PowBlock) ConnectTo(other *NodeMaterialBlock, opts *PowBlockConnectToOpts) *PowBlock {
	if opts == nil {
		opts = &PowBlockConnectToOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, other.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := p.p.Call("connectTo", args...)
	return PowBlockFromJSObject(retVal, p.ctx)
}

// Dispose calls the Dispose method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#dispose
func (p *PowBlock) Dispose() {

	p.p.Call("dispose")
}

// GetClassName calls the GetClassName method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#getclassname
func (p *PowBlock) GetClassName() string {

	retVal := p.p.Call("getClassName")
	return retVal.String()
}

// PowBlockGetFirstAvailableInputOpts contains optional parameters for PowBlock.GetFirstAvailableInput.
type PowBlockGetFirstAvailableInputOpts struct {
	ForOutput *NodeMaterialConnectionPoint
}

// GetFirstAvailableInput calls the GetFirstAvailableInput method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#getfirstavailableinput
func (p *PowBlock) GetFirstAvailableInput(opts *PowBlockGetFirstAvailableInputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &PowBlockGetFirstAvailableInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForOutput == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForOutput.JSObject())
	}

	retVal := p.p.Call("getFirstAvailableInput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// PowBlockGetFirstAvailableOutputOpts contains optional parameters for PowBlock.GetFirstAvailableOutput.
type PowBlockGetFirstAvailableOutputOpts struct {
	ForBlock *NodeMaterialBlock
}

// GetFirstAvailableOutput calls the GetFirstAvailableOutput method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#getfirstavailableoutput
func (p *PowBlock) GetFirstAvailableOutput(opts *PowBlockGetFirstAvailableOutputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &PowBlockGetFirstAvailableOutputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForBlock == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForBlock.JSObject())
	}

	retVal := p.p.Call("getFirstAvailableOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// GetInputByName calls the GetInputByName method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#getinputbyname
func (p *PowBlock) GetInputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := p.p.Call("getInputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// GetOutputByName calls the GetOutputByName method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#getoutputbyname
func (p *PowBlock) GetOutputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := p.p.Call("getOutputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// GetSiblingOutput calls the GetSiblingOutput method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#getsiblingoutput
func (p *PowBlock) GetSiblingOutput(current *NodeMaterialConnectionPoint) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, current.JSObject())

	retVal := p.p.Call("getSiblingOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// Initialize calls the Initialize method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#initialize
func (p *PowBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	p.p.Call("initialize", args...)
}

// PowBlockInitializeDefinesOpts contains optional parameters for PowBlock.InitializeDefines.
type PowBlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#initializedefines
func (p *PowBlock) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *PowBlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &PowBlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	p.p.Call("initializeDefines", args...)
}

// PowBlockIsReadyOpts contains optional parameters for PowBlock.IsReady.
type PowBlockIsReadyOpts struct {
	UseInstances *bool
}

// IsReady calls the IsReady method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#isready
func (p *PowBlock) IsReady(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *PowBlockIsReadyOpts) bool {
	if opts == nil {
		opts = &PowBlockIsReadyOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := p.p.Call("isReady", args...)
	return retVal.Bool()
}

// PowBlockPrepareDefinesOpts contains optional parameters for PowBlock.PrepareDefines.
type PowBlockPrepareDefinesOpts struct {
	UseInstances *bool
}

// PrepareDefines calls the PrepareDefines method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#preparedefines
func (p *PowBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *PowBlockPrepareDefinesOpts) {
	if opts == nil {
		opts = &PowBlockPrepareDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	p.p.Call("prepareDefines", args...)
}

// ProvideFallbacks calls the ProvideFallbacks method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#providefallbacks
func (p *PowBlock) ProvideFallbacks(mesh *AbstractMesh, fallbacks *EffectFallbacks) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, fallbacks.JSObject())

	p.p.Call("provideFallbacks", args...)
}

// PowBlockRegisterInputOpts contains optional parameters for PowBlock.RegisterInput.
type PowBlockRegisterInputOpts struct {
	IsOptional *bool
	Target     js.Value
}

// RegisterInput calls the RegisterInput method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#registerinput
func (p *PowBlock) RegisterInput(name string, jsType js.Value, opts *PowBlockRegisterInputOpts) *PowBlock {
	if opts == nil {
		opts = &PowBlockRegisterInputOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, jsType)

	if opts.IsOptional == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsOptional)
	}
	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := p.p.Call("registerInput", args...)
	return PowBlockFromJSObject(retVal, p.ctx)
}

// PowBlockRegisterOutputOpts contains optional parameters for PowBlock.RegisterOutput.
type PowBlockRegisterOutputOpts struct {
	Target js.Value
}

// RegisterOutput calls the RegisterOutput method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#registeroutput
func (p *PowBlock) RegisterOutput(name string, jsType js.Value, opts *PowBlockRegisterOutputOpts) *PowBlock {
	if opts == nil {
		opts = &PowBlockRegisterOutputOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, jsType)

	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := p.p.Call("registerOutput", args...)
	return PowBlockFromJSObject(retVal, p.ctx)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#replacerepeatablecontent
func (p *PowBlock) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	p.p.Call("replaceRepeatableContent", args...)
}

// Serialize calls the Serialize method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#serialize
func (p *PowBlock) Serialize() interface{} {

	retVal := p.p.Call("serialize")
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the PowBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#updateuniformsandsamples
func (p *PowBlock) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers string) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, state.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)
	args = append(args, uniformBuffers)

	p.p.Call("updateUniformsAndSamples", args...)
}

/*

// BuildId returns the BuildId property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#buildid
func (p *PowBlock) BuildId(buildId float64) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(buildId)
	return PowBlockFromJSObject(p, ba.ctx)
}

// SetBuildId sets the BuildId property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#buildid
func (p *PowBlock) SetBuildId(buildId float64) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(buildId)
	return PowBlockFromJSObject(p, ba.ctx)
}

// Comments returns the Comments property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#comments
func (p *PowBlock) Comments(comments string) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(comments)
	return PowBlockFromJSObject(p, ba.ctx)
}

// SetComments sets the Comments property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#comments
func (p *PowBlock) SetComments(comments string) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(comments)
	return PowBlockFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#inputs
func (p *PowBlock) Inputs(inputs *NodeMaterialConnectionPoint) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(inputs.JSObject())
	return PowBlockFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#inputs
func (p *PowBlock) SetInputs(inputs *NodeMaterialConnectionPoint) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(inputs.JSObject())
	return PowBlockFromJSObject(p, ba.ctx)
}

// IsFinalMerger returns the IsFinalMerger property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#isfinalmerger
func (p *PowBlock) IsFinalMerger(isFinalMerger bool) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(isFinalMerger)
	return PowBlockFromJSObject(p, ba.ctx)
}

// SetIsFinalMerger sets the IsFinalMerger property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#isfinalmerger
func (p *PowBlock) SetIsFinalMerger(isFinalMerger bool) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(isFinalMerger)
	return PowBlockFromJSObject(p, ba.ctx)
}

// IsInput returns the IsInput property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#isinput
func (p *PowBlock) IsInput(isInput bool) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(isInput)
	return PowBlockFromJSObject(p, ba.ctx)
}

// SetIsInput sets the IsInput property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#isinput
func (p *PowBlock) SetIsInput(isInput bool) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(isInput)
	return PowBlockFromJSObject(p, ba.ctx)
}

// IsUnique returns the IsUnique property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#isunique
func (p *PowBlock) IsUnique(isUnique bool) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(isUnique)
	return PowBlockFromJSObject(p, ba.ctx)
}

// SetIsUnique sets the IsUnique property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#isunique
func (p *PowBlock) SetIsUnique(isUnique bool) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(isUnique)
	return PowBlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#name
func (p *PowBlock) Name(name string) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(name)
	return PowBlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#name
func (p *PowBlock) SetName(name string) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(name)
	return PowBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#output
func (p *PowBlock) Output(output *NodeMaterialConnectionPoint) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(output.JSObject())
	return PowBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#output
func (p *PowBlock) SetOutput(output *NodeMaterialConnectionPoint) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(output.JSObject())
	return PowBlockFromJSObject(p, ba.ctx)
}

// Outputs returns the Outputs property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#outputs
func (p *PowBlock) Outputs(outputs *NodeMaterialConnectionPoint) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(outputs.JSObject())
	return PowBlockFromJSObject(p, ba.ctx)
}

// SetOutputs sets the Outputs property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#outputs
func (p *PowBlock) SetOutputs(outputs *NodeMaterialConnectionPoint) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(outputs.JSObject())
	return PowBlockFromJSObject(p, ba.ctx)
}

// Power returns the Power property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#power
func (p *PowBlock) Power(power *NodeMaterialConnectionPoint) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(power.JSObject())
	return PowBlockFromJSObject(p, ba.ctx)
}

// SetPower sets the Power property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#power
func (p *PowBlock) SetPower(power *NodeMaterialConnectionPoint) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(power.JSObject())
	return PowBlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#target
func (p *PowBlock) Target(target js.Value) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(target)
	return PowBlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#target
func (p *PowBlock) SetTarget(target js.Value) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(target)
	return PowBlockFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#uniqueid
func (p *PowBlock) UniqueId(uniqueId float64) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(uniqueId)
	return PowBlockFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#uniqueid
func (p *PowBlock) SetUniqueId(uniqueId float64) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(uniqueId)
	return PowBlockFromJSObject(p, ba.ctx)
}

// Value returns the Value property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#value
func (p *PowBlock) Value(value *NodeMaterialConnectionPoint) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(value.JSObject())
	return PowBlockFromJSObject(p, ba.ctx)
}

// SetValue sets the Value property of class PowBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.powblock#value
func (p *PowBlock) SetValue(value *NodeMaterialConnectionPoint) *PowBlock {
	p := ba.ctx.Get("PowBlock").New(value.JSObject())
	return PowBlockFromJSObject(p, ba.ctx)
}

*/
