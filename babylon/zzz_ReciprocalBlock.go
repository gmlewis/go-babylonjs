// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ReciprocalBlock represents a babylon.js ReciprocalBlock.
// Block used to get the reciprocal (1 / x) of a value
type ReciprocalBlock struct{ *NodeMaterialBlock }

// JSObject returns the underlying js.Value.
func (r *ReciprocalBlock) JSObject() js.Value { return r.p }

// ReciprocalBlock returns a ReciprocalBlock JavaScript class.
func (b *Babylon) ReciprocalBlock() *ReciprocalBlock {
	p := b.ctx.Get("ReciprocalBlock")
	return ReciprocalBlockFromJSObject(p)
}

// ReciprocalBlockFromJSObject returns a wrapped ReciprocalBlock JavaScript class.
func ReciprocalBlockFromJSObject(p js.Value) *ReciprocalBlock {
	return &ReciprocalBlock{NodeMaterialBlockFromJSObject(p)}
}

// NewReciprocalBlock returns a new ReciprocalBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.reciprocalblock
func (b *Babylon) NewReciprocalBlock(name string) *ReciprocalBlock {
	p := b.ctx.Get("ReciprocalBlock").New(name)
	return ReciprocalBlockFromJSObject(p)
}

// TODO: methods
