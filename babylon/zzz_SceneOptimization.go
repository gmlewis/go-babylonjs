// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SceneOptimization represents a babylon.js SceneOptimization.
// Defines the root class used to create scene optimization to use with SceneOptimizer
//
// See: http://doc.babylonjs.com/how_to/how_to_use_sceneoptimizer
type SceneOptimization struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SceneOptimization) JSObject() js.Value { return s.p }

// SceneOptimization returns a SceneOptimization JavaScript class.
func (ba *Babylon) SceneOptimization() *SceneOptimization {
	p := ba.ctx.Get("SceneOptimization")
	return SceneOptimizationFromJSObject(p, ba.ctx)
}

// SceneOptimizationFromJSObject returns a wrapped SceneOptimization JavaScript class.
func SceneOptimizationFromJSObject(p js.Value, ctx js.Value) *SceneOptimization {
	return &SceneOptimization{p: p, ctx: ctx}
}

// SceneOptimizationArrayToJSArray returns a JavaScript Array for the wrapped array.
func SceneOptimizationArrayToJSArray(array []*SceneOptimization) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewSceneOptimizationOpts contains optional parameters for NewSceneOptimization.
type NewSceneOptimizationOpts struct {
	Priority *float64
}

// NewSceneOptimization returns a new SceneOptimization object.
//
// https://doc.babylonjs.com/api/classes/babylon.sceneoptimization
func (ba *Babylon) NewSceneOptimization(opts *NewSceneOptimizationOpts) *SceneOptimization {
	if opts == nil {
		opts = &NewSceneOptimizationOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Priority == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Priority)
	}

	p := ba.ctx.Get("SceneOptimization").New(args...)
	return SceneOptimizationFromJSObject(p, ba.ctx)
}

// Apply calls the Apply method on the SceneOptimization object.
//
// https://doc.babylonjs.com/api/classes/babylon.sceneoptimization#apply
func (s *SceneOptimization) Apply(scene *Scene, optimizer *SceneOptimizer) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, scene.JSObject())
	args = append(args, optimizer.JSObject())

	retVal := s.p.Call("apply", args...)
	return retVal.Bool()
}

// GetDescription calls the GetDescription method on the SceneOptimization object.
//
// https://doc.babylonjs.com/api/classes/babylon.sceneoptimization#getdescription
func (s *SceneOptimization) GetDescription() string {

	retVal := s.p.Call("getDescription")
	return retVal.String()
}

/*

// Priority returns the Priority property of class SceneOptimization.
//
// https://doc.babylonjs.com/api/classes/babylon.sceneoptimization#priority
func (s *SceneOptimization) Priority(priority float64) *SceneOptimization {
	p := ba.ctx.Get("SceneOptimization").New(priority)
	return SceneOptimizationFromJSObject(p, ba.ctx)
}

// SetPriority sets the Priority property of class SceneOptimization.
//
// https://doc.babylonjs.com/api/classes/babylon.sceneoptimization#priority
func (s *SceneOptimization) SetPriority(priority float64) *SceneOptimization {
	p := ba.ctx.Get("SceneOptimization").New(priority)
	return SceneOptimizationFromJSObject(p, ba.ctx)
}

*/
