// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PassPostProcess represents a babylon.js PassPostProcess.
// PassPostProcess which produces an output the same as it&#39;s input
type PassPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PassPostProcess) JSObject() js.Value { return p.p }

// PassPostProcess returns a PassPostProcess JavaScript class.
func (ba *Babylon) PassPostProcess() *PassPostProcess {
	p := ba.ctx.Get("PassPostProcess")
	return PassPostProcessFromJSObject(p, ba.ctx)
}

// PassPostProcessFromJSObject returns a wrapped PassPostProcess JavaScript class.
func PassPostProcessFromJSObject(p js.Value, ctx js.Value) *PassPostProcess {
	return &PassPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// PassPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func PassPostProcessArrayToJSArray(array []*PassPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPassPostProcessOpts contains optional parameters for NewPassPostProcess.
type NewPassPostProcessOpts struct {
	Camera           *Camera
	SamplingMode     *float64
	Engine           *Engine
	Reusable         *bool
	TextureType      *float64
	BlockCompilation *bool
}

// NewPassPostProcess returns a new PassPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passpostprocess
func (ba *Babylon) NewPassPostProcess(name string, options float64, opts *NewPassPostProcessOpts) *PassPostProcess {
	if opts == nil {
		opts = &NewPassPostProcessOpts{}
	}

	args := make([]interface{}, 0, 2+6)

	args = append(args, name)
	args = append(args, options)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}
	if opts.BlockCompilation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.BlockCompilation)
	}

	p := ba.ctx.Get("PassPostProcess").New(args...)
	return PassPostProcessFromJSObject(p, ba.ctx)
}

/*

 */
