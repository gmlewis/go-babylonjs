// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PassPostProcess represents a babylon.js PassPostProcess.
// PassPostProcess which produces an output the same as it&amp;#39;s input
type PassPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PassPostProcess) JSObject() js.Value { return p.p }

// PassPostProcess returns a PassPostProcess JavaScript class.
func (ba *Babylon) PassPostProcess() *PassPostProcess {
	p := ba.ctx.Get("PassPostProcess")
	return PassPostProcessFromJSObject(p, ba.ctx)
}

// PassPostProcessFromJSObject returns a wrapped PassPostProcess JavaScript class.
func PassPostProcessFromJSObject(p js.Value, ctx js.Value) *PassPostProcess {
	return &PassPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// NewPassPostProcessOpts contains optional parameters for NewPassPostProcess.
type NewPassPostProcessOpts struct {
	Camera *Camera

	SamplingMode *JSFloat64

	Engine *Engine

	Reusable *JSBool

	TextureType *JSFloat64

	BlockCompilation *JSBool
}

// NewPassPostProcess returns a new PassPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passpostprocess
func (ba *Babylon) NewPassPostProcess(name string, options float64, opts *NewPassPostProcessOpts) *PassPostProcess {
	if opts == nil {
		opts = &NewPassPostProcessOpts{}
	}

	p := ba.ctx.Get("PassPostProcess").New(name, options, opts.Camera.JSObject(), opts.SamplingMode.JSObject(), opts.Engine.JSObject(), opts.Reusable.JSObject(), opts.TextureType.JSObject(), opts.BlockCompilation.JSObject())
	return PassPostProcessFromJSObject(p, ba.ctx)
}

// TODO: methods
