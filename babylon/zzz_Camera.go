// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Camera represents a babylon.js Camera.
// This is the base class of all the camera used in the application.
//
// See: http://doc.babylonjs.com/features/cameras
type Camera struct{ *Node }

// JSObject returns the underlying js.Value.
func (c *Camera) JSObject() js.Value { return c.p }

// Camera returns a Camera JavaScript class.
func (ba *Babylon) Camera() *Camera {
	p := ba.ctx.Get("Camera")
	return CameraFromJSObject(p)
}

// CameraFromJSObject returns a wrapped Camera JavaScript class.
func CameraFromJSObject(p js.Value) *Camera {
	return &Camera{NodeFromJSObject(p)}
}

// NewCameraOpts contains optional parameters for NewCamera.
type NewCameraOpts struct {
	SetActiveOnSceneIfNoneActive *JSBool
}

// NewCamera returns a new Camera object.
//
// https://doc.babylonjs.com/api/classes/babylon.camera
func (ba *Babylon) NewCamera(name string, position *Vector3, scene *Scene, opts *NewCameraOpts) *Camera {
	if opts == nil {
		opts = &NewCameraOpts{}
	}

	p := ba.ctx.Get("Camera").New(name, position.JSObject(), scene.JSObject(), opts.SetActiveOnSceneIfNoneActive.JSObject())
	return CameraFromJSObject(p)
}

// TODO: methods
