// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DefaultRenderingPipeline represents a babylon.js DefaultRenderingPipeline.
// The default rendering pipeline can be added to a scene to apply common post processing effects such as anti-aliasing or depth of field.
// See &lt;a href=&#34;https://doc.babylonjs.com/how_to/using_default_rendering_pipeline&#34;&gt;https://doc.babylonjs.com/how_to/using_default_rendering_pipeline&lt;/a&gt;
type DefaultRenderingPipeline struct{ *PostProcessRenderPipeline }

// JSObject returns the underlying js.Value.
func (d *DefaultRenderingPipeline) JSObject() js.Value { return d.p }

// DefaultRenderingPipeline returns a DefaultRenderingPipeline JavaScript class.
func (b *Babylon) DefaultRenderingPipeline() *DefaultRenderingPipeline {
	p := b.ctx.Get("DefaultRenderingPipeline")
	return DefaultRenderingPipelineFromJSObject(p)
}

// DefaultRenderingPipelineFromJSObject returns a wrapped DefaultRenderingPipeline JavaScript class.
func DefaultRenderingPipelineFromJSObject(p js.Value) *DefaultRenderingPipeline {
	return &DefaultRenderingPipeline{PostProcessRenderPipelineFromJSObject(p)}
}

// NewDefaultRenderingPipeline returns a new DefaultRenderingPipeline object.
//
// https://doc.babylonjs.com/api/classes/babylon.defaultrenderingpipeline
func (b *Babylon) NewDefaultRenderingPipeline(todo parameters) *DefaultRenderingPipeline {
	p := b.ctx.Get("DefaultRenderingPipeline").New(todo)
	return DefaultRenderingPipelineFromJSObject(p)
}

// TODO: methods
