// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SimplicationQueueSceneComponent represents a babylon.js SimplicationQueueSceneComponent.
// Defines the simplification queue scene component responsible to help scheduling the various simplification task
// created in a scene
type SimplicationQueueSceneComponent struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SimplicationQueueSceneComponent) JSObject() js.Value { return s.p }

// SimplicationQueueSceneComponent returns a SimplicationQueueSceneComponent JavaScript class.
func (ba *Babylon) SimplicationQueueSceneComponent() *SimplicationQueueSceneComponent {
	p := ba.ctx.Get("SimplicationQueueSceneComponent")
	return SimplicationQueueSceneComponentFromJSObject(p, ba.ctx)
}

// SimplicationQueueSceneComponentFromJSObject returns a wrapped SimplicationQueueSceneComponent JavaScript class.
func SimplicationQueueSceneComponentFromJSObject(p js.Value, ctx js.Value) *SimplicationQueueSceneComponent {
	return &SimplicationQueueSceneComponent{p: p, ctx: ctx}
}

// SimplicationQueueSceneComponentArrayToJSArray returns a JavaScript Array for the wrapped array.
func SimplicationQueueSceneComponentArrayToJSArray(array []*SimplicationQueueSceneComponent) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewSimplicationQueueSceneComponent returns a new SimplicationQueueSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplicationqueuescenecomponent#constructor
func (ba *Babylon) NewSimplicationQueueSceneComponent(scene *Scene) *SimplicationQueueSceneComponent {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scene.JSObject())

	p := ba.ctx.Get("SimplicationQueueSceneComponent").New(args...)
	return SimplicationQueueSceneComponentFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the SimplicationQueueSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplicationqueuescenecomponent#dispose
func (s *SimplicationQueueSceneComponent) Dispose() {

	s.p.Call("dispose")
}

// Rebuild calls the Rebuild method on the SimplicationQueueSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplicationqueuescenecomponent#rebuild
func (s *SimplicationQueueSceneComponent) Rebuild() {

	s.p.Call("rebuild")
}

// Register calls the Register method on the SimplicationQueueSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplicationqueuescenecomponent#register
func (s *SimplicationQueueSceneComponent) Register() {

	s.p.Call("register")
}

// Name returns the Name property of class SimplicationQueueSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.simplicationqueuescenecomponent#name
func (s *SimplicationQueueSceneComponent) Name() string {
	retVal := s.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class SimplicationQueueSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.simplicationqueuescenecomponent#name
func (s *SimplicationQueueSceneComponent) SetName(name string) *SimplicationQueueSceneComponent {
	s.p.Set("name", name)
	return s
}

// Scene returns the Scene property of class SimplicationQueueSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.simplicationqueuescenecomponent#scene
func (s *SimplicationQueueSceneComponent) Scene() *Scene {
	retVal := s.p.Get("scene")
	return SceneFromJSObject(retVal, s.ctx)
}

// SetScene sets the Scene property of class SimplicationQueueSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.simplicationqueuescenecomponent#scene
func (s *SimplicationQueueSceneComponent) SetScene(scene *Scene) *SimplicationQueueSceneComponent {
	s.p.Set("scene", scene.JSObject())
	return s
}
