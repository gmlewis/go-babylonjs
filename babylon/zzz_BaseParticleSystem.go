// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BaseParticleSystem represents a babylon.js BaseParticleSystem.
// This represents the base class for particle system in Babylon.
// Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.
// Particles can take different shapes while emitted like box, sphere, cone or you can write your custom function.
//
// See: https://doc.babylonjs.com/babylon101/particles
type BaseParticleSystem struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BaseParticleSystem) JSObject() js.Value { return b.p }

// BaseParticleSystem returns a BaseParticleSystem JavaScript class.
func (ba *Babylon) BaseParticleSystem() *BaseParticleSystem {
	p := ba.ctx.Get("BaseParticleSystem")
	return BaseParticleSystemFromJSObject(p, ba.ctx)
}

// BaseParticleSystemFromJSObject returns a wrapped BaseParticleSystem JavaScript class.
func BaseParticleSystemFromJSObject(p js.Value, ctx js.Value) *BaseParticleSystem {
	return &BaseParticleSystem{p: p, ctx: ctx}
}

// NewBaseParticleSystem returns a new BaseParticleSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.baseparticlesystem
func (ba *Babylon) NewBaseParticleSystem(name string) *BaseParticleSystem {
	p := ba.ctx.Get("BaseParticleSystem").New(name)
	return BaseParticleSystemFromJSObject(p, ba.ctx)
}

// TODO: methods
