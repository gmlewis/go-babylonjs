// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// GradientBlockColorStep represents a babylon.js GradientBlockColorStep.
// Class used to store a color step for the GradientBlock
type GradientBlockColorStep struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (g *GradientBlockColorStep) JSObject() js.Value { return g.p }

// GradientBlockColorStep returns a GradientBlockColorStep JavaScript class.
func (ba *Babylon) GradientBlockColorStep() *GradientBlockColorStep {
	p := ba.ctx.Get("GradientBlockColorStep")
	return GradientBlockColorStepFromJSObject(p, ba.ctx)
}

// GradientBlockColorStepFromJSObject returns a wrapped GradientBlockColorStep JavaScript class.
func GradientBlockColorStepFromJSObject(p js.Value, ctx js.Value) *GradientBlockColorStep {
	return &GradientBlockColorStep{p: p, ctx: ctx}
}

// GradientBlockColorStepArrayToJSArray returns a JavaScript Array for the wrapped array.
func GradientBlockColorStepArrayToJSArray(array []*GradientBlockColorStep) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewGradientBlockColorStep returns a new GradientBlockColorStep object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientblockcolorstep
func (ba *Babylon) NewGradientBlockColorStep(step float64, color *Color3) *GradientBlockColorStep {

	args := make([]interface{}, 0, 2+0)

	args = append(args, step)
	args = append(args, color.JSObject())

	p := ba.ctx.Get("GradientBlockColorStep").New(args...)
	return GradientBlockColorStepFromJSObject(p, ba.ctx)
}

/*

// Color returns the Color property of class GradientBlockColorStep.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientblockcolorstep#color
func (g *GradientBlockColorStep) Color(color *Color3) *GradientBlockColorStep {
	p := ba.ctx.Get("GradientBlockColorStep").New(color.JSObject())
	return GradientBlockColorStepFromJSObject(p, ba.ctx)
}

// SetColor sets the Color property of class GradientBlockColorStep.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientblockcolorstep#color
func (g *GradientBlockColorStep) SetColor(color *Color3) *GradientBlockColorStep {
	p := ba.ctx.Get("GradientBlockColorStep").New(color.JSObject())
	return GradientBlockColorStepFromJSObject(p, ba.ctx)
}

// Step returns the Step property of class GradientBlockColorStep.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientblockcolorstep#step
func (g *GradientBlockColorStep) Step(step float64) *GradientBlockColorStep {
	p := ba.ctx.Get("GradientBlockColorStep").New(step)
	return GradientBlockColorStepFromJSObject(p, ba.ctx)
}

// SetStep sets the Step property of class GradientBlockColorStep.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientblockcolorstep#step
func (g *GradientBlockColorStep) SetStep(step float64) *GradientBlockColorStep {
	p := ba.ctx.Get("GradientBlockColorStep").New(step)
	return GradientBlockColorStepFromJSObject(p, ba.ctx)
}

*/
