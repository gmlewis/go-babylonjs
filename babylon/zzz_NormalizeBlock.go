// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// NormalizeBlock represents a babylon.js NormalizeBlock.
// Block used to normalize a vector
type NormalizeBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (n *NormalizeBlock) JSObject() js.Value { return n.p }

// NormalizeBlock returns a NormalizeBlock JavaScript class.
func (ba *Babylon) NormalizeBlock() *NormalizeBlock {
	p := ba.ctx.Get("NormalizeBlock")
	return NormalizeBlockFromJSObject(p, ba.ctx)
}

// NormalizeBlockFromJSObject returns a wrapped NormalizeBlock JavaScript class.
func NormalizeBlockFromJSObject(p js.Value, ctx js.Value) *NormalizeBlock {
	return &NormalizeBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// NormalizeBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func NormalizeBlockArrayToJSArray(array []*NormalizeBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewNormalizeBlock returns a new NormalizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.normalizeblock
func (ba *Babylon) NewNormalizeBlock(name string) *NormalizeBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("NormalizeBlock").New(args...)
	return NormalizeBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the NormalizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.normalizeblock#getclassname
func (n *NormalizeBlock) GetClassName() string {

	retVal := n.p.Call("getClassName")
	return retVal.String()
}

/*

// Input returns the Input property of class NormalizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.normalizeblock#input
func (n *NormalizeBlock) Input(input *NodeMaterialConnectionPoint) *NormalizeBlock {
	p := ba.ctx.Get("NormalizeBlock").New(input.JSObject())
	return NormalizeBlockFromJSObject(p, ba.ctx)
}

// SetInput sets the Input property of class NormalizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.normalizeblock#input
func (n *NormalizeBlock) SetInput(input *NodeMaterialConnectionPoint) *NormalizeBlock {
	p := ba.ctx.Get("NormalizeBlock").New(input.JSObject())
	return NormalizeBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class NormalizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.normalizeblock#output
func (n *NormalizeBlock) Output(output *NodeMaterialConnectionPoint) *NormalizeBlock {
	p := ba.ctx.Get("NormalizeBlock").New(output.JSObject())
	return NormalizeBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class NormalizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.normalizeblock#output
func (n *NormalizeBlock) SetOutput(output *NodeMaterialConnectionPoint) *NormalizeBlock {
	p := ba.ctx.Get("NormalizeBlock").New(output.JSObject())
	return NormalizeBlockFromJSObject(p, ba.ctx)
}

*/
