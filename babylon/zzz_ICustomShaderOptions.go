// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ICustomShaderOptions represents a babylon.js ICustomShaderOptions.
// Defines the options associated with the creation of a custom shader for a shadow generator.
type ICustomShaderOptions struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ICustomShaderOptions) JSObject() js.Value { return i.p }

// ICustomShaderOptions returns a ICustomShaderOptions JavaScript class.
func (ba *Babylon) ICustomShaderOptions() *ICustomShaderOptions {
	p := ba.ctx.Get("ICustomShaderOptions")
	return ICustomShaderOptionsFromJSObject(p, ba.ctx)
}

// ICustomShaderOptionsFromJSObject returns a wrapped ICustomShaderOptions JavaScript class.
func ICustomShaderOptionsFromJSObject(p js.Value, ctx js.Value) *ICustomShaderOptions {
	return &ICustomShaderOptions{p: p, ctx: ctx}
}

// ICustomShaderOptionsArrayToJSArray returns a JavaScript Array for the wrapped array.
func ICustomShaderOptionsArrayToJSArray(array []*ICustomShaderOptions) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Attributes returns the Attributes property of class ICustomShaderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.icustomshaderoptions#attributes
func (i *ICustomShaderOptions) Attributes() []string {
	retVal := i.p.Get("attributes")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetAttributes sets the Attributes property of class ICustomShaderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.icustomshaderoptions#attributes
func (i *ICustomShaderOptions) SetAttributes(attributes []string) *ICustomShaderOptions {
	i.p.Set("attributes", attributes)
	return i
}

// Defines returns the Defines property of class ICustomShaderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.icustomshaderoptions#defines
func (i *ICustomShaderOptions) Defines() []string {
	retVal := i.p.Get("defines")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetDefines sets the Defines property of class ICustomShaderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.icustomshaderoptions#defines
func (i *ICustomShaderOptions) SetDefines(defines []string) *ICustomShaderOptions {
	i.p.Set("defines", defines)
	return i
}

// Samplers returns the Samplers property of class ICustomShaderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.icustomshaderoptions#samplers
func (i *ICustomShaderOptions) Samplers() []string {
	retVal := i.p.Get("samplers")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetSamplers sets the Samplers property of class ICustomShaderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.icustomshaderoptions#samplers
func (i *ICustomShaderOptions) SetSamplers(samplers []string) *ICustomShaderOptions {
	i.p.Set("samplers", samplers)
	return i
}

// ShaderName returns the ShaderName property of class ICustomShaderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.icustomshaderoptions#shadername
func (i *ICustomShaderOptions) ShaderName() string {
	retVal := i.p.Get("shaderName")
	return retVal.String()
}

// SetShaderName sets the ShaderName property of class ICustomShaderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.icustomshaderoptions#shadername
func (i *ICustomShaderOptions) SetShaderName(shaderName string) *ICustomShaderOptions {
	i.p.Set("shaderName", shaderName)
	return i
}

// Uniforms returns the Uniforms property of class ICustomShaderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.icustomshaderoptions#uniforms
func (i *ICustomShaderOptions) Uniforms() []string {
	retVal := i.p.Get("uniforms")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetUniforms sets the Uniforms property of class ICustomShaderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.icustomshaderoptions#uniforms
func (i *ICustomShaderOptions) SetUniforms(uniforms []string) *ICustomShaderOptions {
	i.p.Set("uniforms", uniforms)
	return i
}
