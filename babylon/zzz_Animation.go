// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Animation represents a babylon.js Animation.
// Class used to store any kind of animation
type Animation struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *Animation) JSObject() js.Value { return a.p }

// Animation returns a Animation JavaScript class.
func (ba *Babylon) Animation() *Animation {
	p := ba.ctx.Get("Animation")
	return AnimationFromJSObject(p, ba.ctx)
}

// AnimationFromJSObject returns a wrapped Animation JavaScript class.
func AnimationFromJSObject(p js.Value, ctx js.Value) *Animation {
	return &Animation{p: p, ctx: ctx}
}

// NewAnimationOpts contains optional parameters for NewAnimation.
type NewAnimationOpts struct {
	LoopMode *JSFloat64

	EnableBlending *JSBool
}

// NewAnimation returns a new Animation object.
//
// https://doc.babylonjs.com/api/classes/babylon.animation
func (ba *Babylon) NewAnimation(name string, targetProperty string, framePerSecond float64, dataType float64, opts *NewAnimationOpts) *Animation {
	if opts == nil {
		opts = &NewAnimationOpts{}
	}

	p := ba.ctx.Get("Animation").New(name, targetProperty, framePerSecond, dataType, opts.LoopMode.JSObject(), opts.EnableBlending.JSObject())
	return AnimationFromJSObject(p, ba.ctx)
}

// TODO: methods
