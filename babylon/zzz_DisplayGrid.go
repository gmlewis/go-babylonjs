// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DisplayGrid represents a babylon.js DisplayGrid.
// Class used to render a grid
type DisplayGrid struct {
	*Control
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DisplayGrid) JSObject() js.Value { return d.p }

// DisplayGrid returns a DisplayGrid JavaScript class.
func (ba *Babylon) DisplayGrid() *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid")
	return DisplayGridFromJSObject(p, ba.ctx)
}

// DisplayGridFromJSObject returns a wrapped DisplayGrid JavaScript class.
func DisplayGridFromJSObject(p js.Value, ctx js.Value) *DisplayGrid {
	return &DisplayGrid{Control: ControlFromJSObject(p, ctx), ctx: ctx}
}

// DisplayGridArrayToJSArray returns a JavaScript Array for the wrapped array.
func DisplayGridArrayToJSArray(array []*DisplayGrid) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDisplayGridOpts contains optional parameters for NewDisplayGrid.
type NewDisplayGridOpts struct {
	Name *string
}

// NewDisplayGrid returns a new DisplayGrid object.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid
func (ba *Babylon) NewDisplayGrid(opts *NewDisplayGridOpts) *DisplayGrid {
	if opts == nil {
		opts = &NewDisplayGridOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}

	p := ba.ctx.Get("DisplayGrid").New(args...)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// DisplayGrid_drawOpts contains optional parameters for DisplayGrid._draw.
type DisplayGrid_drawOpts struct {
	InvalidatedRectangle *Measure
}

// _draw calls the _draw method on the DisplayGrid object.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#_draw
func (d *DisplayGrid) _draw(context js.Value, opts *DisplayGrid_drawOpts) {
	if opts == nil {
		opts = &DisplayGrid_drawOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, context)

	if opts.InvalidatedRectangle == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.InvalidatedRectangle.JSObject())
	}

	d.p.Call("_draw", args...)
}

/*

// Background returns the Background property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#background
func (d *DisplayGrid) Background(background string) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(background)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// SetBackground sets the Background property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#background
func (d *DisplayGrid) SetBackground(background string) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(background)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// CellHeight returns the CellHeight property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#cellheight
func (d *DisplayGrid) CellHeight(cellHeight float64) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(cellHeight)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// SetCellHeight sets the CellHeight property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#cellheight
func (d *DisplayGrid) SetCellHeight(cellHeight float64) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(cellHeight)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// CellWidth returns the CellWidth property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#cellwidth
func (d *DisplayGrid) CellWidth(cellWidth float64) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(cellWidth)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// SetCellWidth sets the CellWidth property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#cellwidth
func (d *DisplayGrid) SetCellWidth(cellWidth float64) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(cellWidth)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// DisplayMajorLines returns the DisplayMajorLines property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#displaymajorlines
func (d *DisplayGrid) DisplayMajorLines(displayMajorLines bool) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(displayMajorLines)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// SetDisplayMajorLines sets the DisplayMajorLines property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#displaymajorlines
func (d *DisplayGrid) SetDisplayMajorLines(displayMajorLines bool) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(displayMajorLines)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// DisplayMinorLines returns the DisplayMinorLines property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#displayminorlines
func (d *DisplayGrid) DisplayMinorLines(displayMinorLines bool) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(displayMinorLines)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// SetDisplayMinorLines sets the DisplayMinorLines property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#displayminorlines
func (d *DisplayGrid) SetDisplayMinorLines(displayMinorLines bool) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(displayMinorLines)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// MajorLineColor returns the MajorLineColor property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#majorlinecolor
func (d *DisplayGrid) MajorLineColor(majorLineColor string) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(majorLineColor)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// SetMajorLineColor sets the MajorLineColor property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#majorlinecolor
func (d *DisplayGrid) SetMajorLineColor(majorLineColor string) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(majorLineColor)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// MajorLineFrequency returns the MajorLineFrequency property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#majorlinefrequency
func (d *DisplayGrid) MajorLineFrequency(majorLineFrequency float64) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(majorLineFrequency)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// SetMajorLineFrequency sets the MajorLineFrequency property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#majorlinefrequency
func (d *DisplayGrid) SetMajorLineFrequency(majorLineFrequency float64) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(majorLineFrequency)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// MajorLineTickness returns the MajorLineTickness property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#majorlinetickness
func (d *DisplayGrid) MajorLineTickness(majorLineTickness float64) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(majorLineTickness)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// SetMajorLineTickness sets the MajorLineTickness property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#majorlinetickness
func (d *DisplayGrid) SetMajorLineTickness(majorLineTickness float64) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(majorLineTickness)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// MinorLineColor returns the MinorLineColor property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#minorlinecolor
func (d *DisplayGrid) MinorLineColor(minorLineColor string) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(minorLineColor)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// SetMinorLineColor sets the MinorLineColor property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#minorlinecolor
func (d *DisplayGrid) SetMinorLineColor(minorLineColor string) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(minorLineColor)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// MinorLineTickness returns the MinorLineTickness property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#minorlinetickness
func (d *DisplayGrid) MinorLineTickness(minorLineTickness float64) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(minorLineTickness)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// SetMinorLineTickness sets the MinorLineTickness property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#minorlinetickness
func (d *DisplayGrid) SetMinorLineTickness(minorLineTickness float64) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(minorLineTickness)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#name
func (d *DisplayGrid) Name(name string) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(name)
	return DisplayGridFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class DisplayGrid.
//
// https://doc.babylonjs.com/api/classes/babylon.displaygrid#name
func (d *DisplayGrid) SetName(name string) *DisplayGrid {
	p := ba.ctx.Get("DisplayGrid").New(name)
	return DisplayGridFromJSObject(p, ba.ctx)
}

*/
