// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// GizmoManager represents a babylon.js GizmoManager.
// Helps setup gizmo&#39;s in the scene to rotate/scale/position meshes
type GizmoManager struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (g *GizmoManager) JSObject() js.Value { return g.p }

// GizmoManager returns a GizmoManager JavaScript class.
func (ba *Babylon) GizmoManager() *GizmoManager {
	p := ba.ctx.Get("GizmoManager")
	return GizmoManagerFromJSObject(p, ba.ctx)
}

// GizmoManagerFromJSObject returns a wrapped GizmoManager JavaScript class.
func GizmoManagerFromJSObject(p js.Value, ctx js.Value) *GizmoManager {
	return &GizmoManager{p: p, ctx: ctx}
}

// GizmoManagerArrayToJSArray returns a JavaScript Array for the wrapped array.
func GizmoManagerArrayToJSArray(array []*GizmoManager) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewGizmoManager returns a new GizmoManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#constructor
func (ba *Babylon) NewGizmoManager(scene *Scene) *GizmoManager {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scene.JSObject())

	p := ba.ctx.Get("GizmoManager").New(args...)
	return GizmoManagerFromJSObject(p, ba.ctx)
}

// AttachToMesh calls the AttachToMesh method on the GizmoManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#attachtomesh
func (g *GizmoManager) AttachToMesh(mesh *AbstractMesh) {

	args := make([]interface{}, 0, 1+0)

	if mesh == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, mesh.JSObject())
	}

	g.p.Call("attachToMesh", args...)
}

// Dispose calls the Dispose method on the GizmoManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#dispose
func (g *GizmoManager) Dispose() {

	g.p.Call("dispose")
}

// AttachableMeshes returns the AttachableMeshes property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#attachablemeshes
func (g *GizmoManager) AttachableMeshes() []*AbstractMesh {
	retVal := g.p.Get("attachableMeshes")
	result := []*AbstractMesh{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, AbstractMeshFromJSObject(retVal.Index(ri), g.ctx))
	}
	return result
}

// SetAttachableMeshes sets the AttachableMeshes property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#attachablemeshes
func (g *GizmoManager) SetAttachableMeshes(attachableMeshes []*AbstractMesh) *GizmoManager {
	g.p.Set("attachableMeshes", attachableMeshes)
	return g
}

// BoundingBoxDragBehavior returns the BoundingBoxDragBehavior property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#boundingboxdragbehavior
func (g *GizmoManager) BoundingBoxDragBehavior() *SixDofDragBehavior {
	retVal := g.p.Get("boundingBoxDragBehavior")
	return SixDofDragBehaviorFromJSObject(retVal, g.ctx)
}

// SetBoundingBoxDragBehavior sets the BoundingBoxDragBehavior property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#boundingboxdragbehavior
func (g *GizmoManager) SetBoundingBoxDragBehavior(boundingBoxDragBehavior *SixDofDragBehavior) *GizmoManager {
	g.p.Set("boundingBoxDragBehavior", boundingBoxDragBehavior.JSObject())
	return g
}

// BoundingBoxGizmoEnabled returns the BoundingBoxGizmoEnabled property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#boundingboxgizmoenabled
func (g *GizmoManager) BoundingBoxGizmoEnabled() bool {
	retVal := g.p.Get("boundingBoxGizmoEnabled")
	return retVal.Bool()
}

// SetBoundingBoxGizmoEnabled sets the BoundingBoxGizmoEnabled property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#boundingboxgizmoenabled
func (g *GizmoManager) SetBoundingBoxGizmoEnabled(boundingBoxGizmoEnabled bool) *GizmoManager {
	g.p.Set("boundingBoxGizmoEnabled", boundingBoxGizmoEnabled)
	return g
}

// ClearGizmoOnEmptyPointerEvent returns the ClearGizmoOnEmptyPointerEvent property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#cleargizmoonemptypointerevent
func (g *GizmoManager) ClearGizmoOnEmptyPointerEvent() bool {
	retVal := g.p.Get("clearGizmoOnEmptyPointerEvent")
	return retVal.Bool()
}

// SetClearGizmoOnEmptyPointerEvent sets the ClearGizmoOnEmptyPointerEvent property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#cleargizmoonemptypointerevent
func (g *GizmoManager) SetClearGizmoOnEmptyPointerEvent(clearGizmoOnEmptyPointerEvent bool) *GizmoManager {
	g.p.Set("clearGizmoOnEmptyPointerEvent", clearGizmoOnEmptyPointerEvent)
	return g
}

// Gizmos returns the Gizmos property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#gizmos
func (g *GizmoManager) Gizmos() js.Value {
	retVal := g.p.Get("gizmos")
	return retVal
}

// SetGizmos sets the Gizmos property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#gizmos
func (g *GizmoManager) SetGizmos(gizmos js.Value) *GizmoManager {
	g.p.Set("gizmos", gizmos)
	return g
}

// KeepDepthUtilityLayer returns the KeepDepthUtilityLayer property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#keepdepthutilitylayer
func (g *GizmoManager) KeepDepthUtilityLayer() *UtilityLayerRenderer {
	retVal := g.p.Get("keepDepthUtilityLayer")
	return UtilityLayerRendererFromJSObject(retVal, g.ctx)
}

// SetKeepDepthUtilityLayer sets the KeepDepthUtilityLayer property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#keepdepthutilitylayer
func (g *GizmoManager) SetKeepDepthUtilityLayer(keepDepthUtilityLayer *UtilityLayerRenderer) *GizmoManager {
	g.p.Set("keepDepthUtilityLayer", keepDepthUtilityLayer.JSObject())
	return g
}

// OnAttachedToMeshObservable returns the OnAttachedToMeshObservable property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#onattachedtomeshobservable
func (g *GizmoManager) OnAttachedToMeshObservable() *Observable {
	retVal := g.p.Get("onAttachedToMeshObservable")
	return ObservableFromJSObject(retVal, g.ctx)
}

// SetOnAttachedToMeshObservable sets the OnAttachedToMeshObservable property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#onattachedtomeshobservable
func (g *GizmoManager) SetOnAttachedToMeshObservable(onAttachedToMeshObservable *Observable) *GizmoManager {
	g.p.Set("onAttachedToMeshObservable", onAttachedToMeshObservable.JSObject())
	return g
}

// PositionGizmoEnabled returns the PositionGizmoEnabled property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#positiongizmoenabled
func (g *GizmoManager) PositionGizmoEnabled() bool {
	retVal := g.p.Get("positionGizmoEnabled")
	return retVal.Bool()
}

// SetPositionGizmoEnabled sets the PositionGizmoEnabled property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#positiongizmoenabled
func (g *GizmoManager) SetPositionGizmoEnabled(positionGizmoEnabled bool) *GizmoManager {
	g.p.Set("positionGizmoEnabled", positionGizmoEnabled)
	return g
}

// RotationGizmoEnabled returns the RotationGizmoEnabled property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#rotationgizmoenabled
func (g *GizmoManager) RotationGizmoEnabled() bool {
	retVal := g.p.Get("rotationGizmoEnabled")
	return retVal.Bool()
}

// SetRotationGizmoEnabled sets the RotationGizmoEnabled property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#rotationgizmoenabled
func (g *GizmoManager) SetRotationGizmoEnabled(rotationGizmoEnabled bool) *GizmoManager {
	g.p.Set("rotationGizmoEnabled", rotationGizmoEnabled)
	return g
}

// ScaleGizmoEnabled returns the ScaleGizmoEnabled property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#scalegizmoenabled
func (g *GizmoManager) ScaleGizmoEnabled() bool {
	retVal := g.p.Get("scaleGizmoEnabled")
	return retVal.Bool()
}

// SetScaleGizmoEnabled sets the ScaleGizmoEnabled property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#scalegizmoenabled
func (g *GizmoManager) SetScaleGizmoEnabled(scaleGizmoEnabled bool) *GizmoManager {
	g.p.Set("scaleGizmoEnabled", scaleGizmoEnabled)
	return g
}

// UsePointerToAttachGizmos returns the UsePointerToAttachGizmos property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#usepointertoattachgizmos
func (g *GizmoManager) UsePointerToAttachGizmos() bool {
	retVal := g.p.Get("usePointerToAttachGizmos")
	return retVal.Bool()
}

// SetUsePointerToAttachGizmos sets the UsePointerToAttachGizmos property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#usepointertoattachgizmos
func (g *GizmoManager) SetUsePointerToAttachGizmos(usePointerToAttachGizmos bool) *GizmoManager {
	g.p.Set("usePointerToAttachGizmos", usePointerToAttachGizmos)
	return g
}

// UtilityLayer returns the UtilityLayer property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#utilitylayer
func (g *GizmoManager) UtilityLayer() *UtilityLayerRenderer {
	retVal := g.p.Get("utilityLayer")
	return UtilityLayerRendererFromJSObject(retVal, g.ctx)
}

// SetUtilityLayer sets the UtilityLayer property of class GizmoManager.
//
// https://doc.babylonjs.com/api/classes/babylon.gizmomanager#utilitylayer
func (g *GizmoManager) SetUtilityLayer(utilityLayer *UtilityLayerRenderer) *GizmoManager {
	g.p.Set("utilityLayer", utilityLayer.JSObject())
	return g
}
