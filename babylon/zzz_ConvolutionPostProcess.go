// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ConvolutionPostProcess represents a babylon.js ConvolutionPostProcess.
// The ConvolutionPostProcess applies a 3x3 kernel to every pixel of the
// input texture to perform effects such as edge detection or sharpening
// See <a href="http://en.wikipedia.org/wiki/Kernel_(image_processing)">http://en.wikipedia.org/wiki/Kernel_(image_processing)</a>
type ConvolutionPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *ConvolutionPostProcess) JSObject() js.Value { return c.p }

// ConvolutionPostProcess returns a ConvolutionPostProcess JavaScript class.
func (ba *Babylon) ConvolutionPostProcess() *ConvolutionPostProcess {
	p := ba.ctx.Get("ConvolutionPostProcess")
	return ConvolutionPostProcessFromJSObject(p, ba.ctx)
}

// ConvolutionPostProcessFromJSObject returns a wrapped ConvolutionPostProcess JavaScript class.
func ConvolutionPostProcessFromJSObject(p js.Value, ctx js.Value) *ConvolutionPostProcess {
	return &ConvolutionPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// ConvolutionPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func ConvolutionPostProcessArrayToJSArray(array []*ConvolutionPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewConvolutionPostProcessOpts contains optional parameters for NewConvolutionPostProcess.
type NewConvolutionPostProcessOpts struct {
	SamplingMode *float64
	Engine       *Engine
	Reusable     *bool
	TextureType  *float64
}

// NewConvolutionPostProcess returns a new ConvolutionPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess#constructor
func (ba *Babylon) NewConvolutionPostProcess(name string, kernel []float64, options float64, camera *Camera, opts *NewConvolutionPostProcessOpts) *ConvolutionPostProcess {
	if opts == nil {
		opts = &NewConvolutionPostProcessOpts{}
	}

	args := make([]interface{}, 0, 4+4)

	args = append(args, name)
	args = append(args, kernel)
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}

	p := ba.ctx.Get("ConvolutionPostProcess").New(args...)
	return ConvolutionPostProcessFromJSObject(p, ba.ctx)
}

// EdgeDetect0Kernel returns the EdgeDetect0Kernel property of class ConvolutionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess#edgedetect0kernel
func (c *ConvolutionPostProcess) EdgeDetect0Kernel() []float64 {
	retVal := c.p.Get("EdgeDetect0Kernel")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetEdgeDetect0Kernel sets the EdgeDetect0Kernel property of class ConvolutionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess#edgedetect0kernel
func (c *ConvolutionPostProcess) SetEdgeDetect0Kernel(EdgeDetect0Kernel []float64) *ConvolutionPostProcess {
	c.p.Set("EdgeDetect0Kernel", EdgeDetect0Kernel)
	return c
}

// EdgeDetect1Kernel returns the EdgeDetect1Kernel property of class ConvolutionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess#edgedetect1kernel
func (c *ConvolutionPostProcess) EdgeDetect1Kernel() []float64 {
	retVal := c.p.Get("EdgeDetect1Kernel")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetEdgeDetect1Kernel sets the EdgeDetect1Kernel property of class ConvolutionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess#edgedetect1kernel
func (c *ConvolutionPostProcess) SetEdgeDetect1Kernel(EdgeDetect1Kernel []float64) *ConvolutionPostProcess {
	c.p.Set("EdgeDetect1Kernel", EdgeDetect1Kernel)
	return c
}

// EdgeDetect2Kernel returns the EdgeDetect2Kernel property of class ConvolutionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess#edgedetect2kernel
func (c *ConvolutionPostProcess) EdgeDetect2Kernel() []float64 {
	retVal := c.p.Get("EdgeDetect2Kernel")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetEdgeDetect2Kernel sets the EdgeDetect2Kernel property of class ConvolutionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess#edgedetect2kernel
func (c *ConvolutionPostProcess) SetEdgeDetect2Kernel(EdgeDetect2Kernel []float64) *ConvolutionPostProcess {
	c.p.Set("EdgeDetect2Kernel", EdgeDetect2Kernel)
	return c
}

// EmbossKernel returns the EmbossKernel property of class ConvolutionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess#embosskernel
func (c *ConvolutionPostProcess) EmbossKernel() []float64 {
	retVal := c.p.Get("EmbossKernel")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetEmbossKernel sets the EmbossKernel property of class ConvolutionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess#embosskernel
func (c *ConvolutionPostProcess) SetEmbossKernel(EmbossKernel []float64) *ConvolutionPostProcess {
	c.p.Set("EmbossKernel", EmbossKernel)
	return c
}

// GaussianKernel returns the GaussianKernel property of class ConvolutionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess#gaussiankernel
func (c *ConvolutionPostProcess) GaussianKernel() []float64 {
	retVal := c.p.Get("GaussianKernel")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetGaussianKernel sets the GaussianKernel property of class ConvolutionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess#gaussiankernel
func (c *ConvolutionPostProcess) SetGaussianKernel(GaussianKernel []float64) *ConvolutionPostProcess {
	c.p.Set("GaussianKernel", GaussianKernel)
	return c
}

// Kernel returns the Kernel property of class ConvolutionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess#kernel
func (c *ConvolutionPostProcess) Kernel() []float64 {
	retVal := c.p.Get("kernel")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetKernel sets the Kernel property of class ConvolutionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess#kernel
func (c *ConvolutionPostProcess) SetKernel(kernel []float64) *ConvolutionPostProcess {
	c.p.Set("kernel", kernel)
	return c
}

// SharpenKernel returns the SharpenKernel property of class ConvolutionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess#sharpenkernel
func (c *ConvolutionPostProcess) SharpenKernel() []float64 {
	retVal := c.p.Get("SharpenKernel")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetSharpenKernel sets the SharpenKernel property of class ConvolutionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess#sharpenkernel
func (c *ConvolutionPostProcess) SetSharpenKernel(SharpenKernel []float64) *ConvolutionPostProcess {
	c.p.Set("SharpenKernel", SharpenKernel)
	return c
}
