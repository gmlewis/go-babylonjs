// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ConvolutionPostProcess represents a babylon.js ConvolutionPostProcess.
// The ConvolutionPostProcess applies a 3x3 kernel to every pixel of the
// input texture to perform effects such as edge detection or sharpening
// See &lt;a href=&#34;http://en.wikipedia.org/wiki/Kernel_(image_processing)&#34;&gt;http://en.wikipedia.org/wiki/Kernel_(image_processing)&lt;/a&gt;
type ConvolutionPostProcess struct{ *PostProcess }

// JSObject returns the underlying js.Value.
func (c *ConvolutionPostProcess) JSObject() js.Value { return c.p }

// ConvolutionPostProcess returns a ConvolutionPostProcess JavaScript class.
func (b *Babylon) ConvolutionPostProcess() *ConvolutionPostProcess {
	p := b.ctx.Get("ConvolutionPostProcess")
	return ConvolutionPostProcessFromJSObject(p)
}

// ConvolutionPostProcessFromJSObject returns a wrapped ConvolutionPostProcess JavaScript class.
func ConvolutionPostProcessFromJSObject(p js.Value) *ConvolutionPostProcess {
	return &ConvolutionPostProcess{PostProcessFromJSObject(p)}
}

// NewConvolutionPostProcess returns a new ConvolutionPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.convolutionpostprocess
func (b *Babylon) NewConvolutionPostProcess(todo parameters) *ConvolutionPostProcess {
	p := b.ctx.Get("ConvolutionPostProcess").New(todo)
	return ConvolutionPostProcessFromJSObject(p)
}

// TODO: methods
