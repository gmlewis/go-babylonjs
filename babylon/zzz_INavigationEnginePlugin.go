// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// INavigationEnginePlugin represents a babylon.js INavigationEnginePlugin.
// Navigation plugin interface to add navigation constrained by a navigation mesh
type INavigationEnginePlugin struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *INavigationEnginePlugin) JSObject() js.Value { return i.p }

// INavigationEnginePlugin returns a INavigationEnginePlugin JavaScript class.
func (ba *Babylon) INavigationEnginePlugin() *INavigationEnginePlugin {
	p := ba.ctx.Get("INavigationEnginePlugin")
	return INavigationEnginePluginFromJSObject(p, ba.ctx)
}

// INavigationEnginePluginFromJSObject returns a wrapped INavigationEnginePlugin JavaScript class.
func INavigationEnginePluginFromJSObject(p js.Value, ctx js.Value) *INavigationEnginePlugin {
	return &INavigationEnginePlugin{p: p, ctx: ctx}
}

// INavigationEnginePluginArrayToJSArray returns a JavaScript Array for the wrapped array.
func INavigationEnginePluginArrayToJSArray(array []*INavigationEnginePlugin) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// ComputePath calls the ComputePath method on the INavigationEnginePlugin object.
//
// https://doc.babylonjs.com/api/classes/babylon.inavigationengineplugin#computepath
func (i *INavigationEnginePlugin) ComputePath(start *Vector3, end *Vector3) []*Vector3 {

	args := make([]interface{}, 0, 2+0)

	args = append(args, start.JSObject())
	args = append(args, end.JSObject())

	retVal := i.p.Call("computePath", args...)
	result := []*Vector3{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, Vector3FromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// CreateCrowd calls the CreateCrowd method on the INavigationEnginePlugin object.
//
// https://doc.babylonjs.com/api/classes/babylon.inavigationengineplugin#createcrowd
func (i *INavigationEnginePlugin) CreateCrowd(maxAgents float64, maxAgentRadius float64, scene *Scene) *ICrowd {

	args := make([]interface{}, 0, 3+0)

	args = append(args, maxAgents)
	args = append(args, maxAgentRadius)
	args = append(args, scene.JSObject())

	retVal := i.p.Call("createCrowd", args...)
	return ICrowdFromJSObject(retVal, i.ctx)
}

// CreateDebugNavMesh calls the CreateDebugNavMesh method on the INavigationEnginePlugin object.
//
// https://doc.babylonjs.com/api/classes/babylon.inavigationengineplugin#createdebugnavmesh
func (i *INavigationEnginePlugin) CreateDebugNavMesh(scene *Scene) *Mesh {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scene.JSObject())

	retVal := i.p.Call("createDebugNavMesh", args...)
	return MeshFromJSObject(retVal, i.ctx)
}

// CreateMavMesh calls the CreateMavMesh method on the INavigationEnginePlugin object.
//
// https://doc.babylonjs.com/api/classes/babylon.inavigationengineplugin#createmavmesh
func (i *INavigationEnginePlugin) CreateMavMesh(meshes []*Mesh, parameters *INavMeshParameters) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, MeshArrayToJSArray(meshes))
	args = append(args, parameters.JSObject())

	i.p.Call("createMavMesh", args...)
}

// Dispose calls the Dispose method on the INavigationEnginePlugin object.
//
// https://doc.babylonjs.com/api/classes/babylon.inavigationengineplugin#dispose
func (i *INavigationEnginePlugin) Dispose() {

	i.p.Call("dispose")
}

// GetClosestPoint calls the GetClosestPoint method on the INavigationEnginePlugin object.
//
// https://doc.babylonjs.com/api/classes/babylon.inavigationengineplugin#getclosestpoint
func (i *INavigationEnginePlugin) GetClosestPoint(position *Vector3) *Vector3 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, position.JSObject())

	retVal := i.p.Call("getClosestPoint", args...)
	return Vector3FromJSObject(retVal, i.ctx)
}

// GetDefaultQueryExtent calls the GetDefaultQueryExtent method on the INavigationEnginePlugin object.
//
// https://doc.babylonjs.com/api/classes/babylon.inavigationengineplugin#getdefaultqueryextent
func (i *INavigationEnginePlugin) GetDefaultQueryExtent() *Vector3 {

	retVal := i.p.Call("getDefaultQueryExtent")
	return Vector3FromJSObject(retVal, i.ctx)
}

// GetRandomPointAround calls the GetRandomPointAround method on the INavigationEnginePlugin object.
//
// https://doc.babylonjs.com/api/classes/babylon.inavigationengineplugin#getrandompointaround
func (i *INavigationEnginePlugin) GetRandomPointAround(position *Vector3, maxRadius float64) *Vector3 {

	args := make([]interface{}, 0, 2+0)

	args = append(args, position.JSObject())
	args = append(args, maxRadius)

	retVal := i.p.Call("getRandomPointAround", args...)
	return Vector3FromJSObject(retVal, i.ctx)
}

// IsSupported calls the IsSupported method on the INavigationEnginePlugin object.
//
// https://doc.babylonjs.com/api/classes/babylon.inavigationengineplugin#issupported
func (i *INavigationEnginePlugin) IsSupported() bool {

	retVal := i.p.Call("isSupported")
	return retVal.Bool()
}

// MoveAlong calls the MoveAlong method on the INavigationEnginePlugin object.
//
// https://doc.babylonjs.com/api/classes/babylon.inavigationengineplugin#movealong
func (i *INavigationEnginePlugin) MoveAlong(position *Vector3, destination *Vector3) *Vector3 {

	args := make([]interface{}, 0, 2+0)

	args = append(args, position.JSObject())
	args = append(args, destination.JSObject())

	retVal := i.p.Call("moveAlong", args...)
	return Vector3FromJSObject(retVal, i.ctx)
}

// SetDefaultQueryExtent calls the SetDefaultQueryExtent method on the INavigationEnginePlugin object.
//
// https://doc.babylonjs.com/api/classes/babylon.inavigationengineplugin#setdefaultqueryextent
func (i *INavigationEnginePlugin) SetDefaultQueryExtent(extent *Vector3) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, extent.JSObject())

	i.p.Call("setDefaultQueryExtent", args...)
}

// Name returns the Name property of class INavigationEnginePlugin.
//
// https://doc.babylonjs.com/api/classes/babylon.inavigationengineplugin#name
func (i *INavigationEnginePlugin) Name() string {
	retVal := i.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class INavigationEnginePlugin.
//
// https://doc.babylonjs.com/api/classes/babylon.inavigationengineplugin#name
func (i *INavigationEnginePlugin) SetName(name string) *INavigationEnginePlugin {
	i.p.Set("name", name)
	return i
}
