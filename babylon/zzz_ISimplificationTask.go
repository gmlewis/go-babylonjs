// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ISimplificationTask represents a babylon.js ISimplificationTask.
// Interface used to define a simplification task
type ISimplificationTask struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ISimplificationTask) JSObject() js.Value { return i.p }

// ISimplificationTask returns a ISimplificationTask JavaScript class.
func (ba *Babylon) ISimplificationTask() *ISimplificationTask {
	p := ba.ctx.Get("ISimplificationTask")
	return ISimplificationTaskFromJSObject(p, ba.ctx)
}

// ISimplificationTaskFromJSObject returns a wrapped ISimplificationTask JavaScript class.
func ISimplificationTaskFromJSObject(p js.Value, ctx js.Value) *ISimplificationTask {
	return &ISimplificationTask{p: p, ctx: ctx}
}

// ISimplificationTaskArrayToJSArray returns a JavaScript Array for the wrapped array.
func ISimplificationTaskArrayToJSArray(array []*ISimplificationTask) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Mesh returns the Mesh property of class ISimplificationTask.
//
// https://doc.babylonjs.com/api/classes/babylon.isimplificationtask#mesh
func (i *ISimplificationTask) Mesh(mesh *Mesh) *ISimplificationTask {
	p := ba.ctx.Get("ISimplificationTask").New(mesh.JSObject())
	return ISimplificationTaskFromJSObject(p, ba.ctx)
}

// SetMesh sets the Mesh property of class ISimplificationTask.
//
// https://doc.babylonjs.com/api/classes/babylon.isimplificationtask#mesh
func (i *ISimplificationTask) SetMesh(mesh *Mesh) *ISimplificationTask {
	p := ba.ctx.Get("ISimplificationTask").New(mesh.JSObject())
	return ISimplificationTaskFromJSObject(p, ba.ctx)
}

// ParallelProcessing returns the ParallelProcessing property of class ISimplificationTask.
//
// https://doc.babylonjs.com/api/classes/babylon.isimplificationtask#parallelprocessing
func (i *ISimplificationTask) ParallelProcessing(parallelProcessing bool) *ISimplificationTask {
	p := ba.ctx.Get("ISimplificationTask").New(parallelProcessing)
	return ISimplificationTaskFromJSObject(p, ba.ctx)
}

// SetParallelProcessing sets the ParallelProcessing property of class ISimplificationTask.
//
// https://doc.babylonjs.com/api/classes/babylon.isimplificationtask#parallelprocessing
func (i *ISimplificationTask) SetParallelProcessing(parallelProcessing bool) *ISimplificationTask {
	p := ba.ctx.Get("ISimplificationTask").New(parallelProcessing)
	return ISimplificationTaskFromJSObject(p, ba.ctx)
}

// Settings returns the Settings property of class ISimplificationTask.
//
// https://doc.babylonjs.com/api/classes/babylon.isimplificationtask#settings
func (i *ISimplificationTask) Settings(settings []*ISimplificationSettings) *ISimplificationTask {
	p := ba.ctx.Get("ISimplificationTask").New(settings)
	return ISimplificationTaskFromJSObject(p, ba.ctx)
}

// SetSettings sets the Settings property of class ISimplificationTask.
//
// https://doc.babylonjs.com/api/classes/babylon.isimplificationtask#settings
func (i *ISimplificationTask) SetSettings(settings []*ISimplificationSettings) *ISimplificationTask {
	p := ba.ctx.Get("ISimplificationTask").New(settings)
	return ISimplificationTaskFromJSObject(p, ba.ctx)
}

// SimplificationType returns the SimplificationType property of class ISimplificationTask.
//
// https://doc.babylonjs.com/api/classes/babylon.isimplificationtask#simplificationtype
func (i *ISimplificationTask) SimplificationType(simplificationType js.Value) *ISimplificationTask {
	p := ba.ctx.Get("ISimplificationTask").New(simplificationType)
	return ISimplificationTaskFromJSObject(p, ba.ctx)
}

// SetSimplificationType sets the SimplificationType property of class ISimplificationTask.
//
// https://doc.babylonjs.com/api/classes/babylon.isimplificationtask#simplificationtype
func (i *ISimplificationTask) SetSimplificationType(simplificationType js.Value) *ISimplificationTask {
	p := ba.ctx.Get("ISimplificationTask").New(simplificationType)
	return ISimplificationTaskFromJSObject(p, ba.ctx)
}

// SuccessCallback returns the SuccessCallback property of class ISimplificationTask.
//
// https://doc.babylonjs.com/api/classes/babylon.isimplificationtask#successcallback
func (i *ISimplificationTask) SuccessCallback(successCallback func()) *ISimplificationTask {
	p := ba.ctx.Get("ISimplificationTask").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {successCallback(); return nil}))
	return ISimplificationTaskFromJSObject(p, ba.ctx)
}

// SetSuccessCallback sets the SuccessCallback property of class ISimplificationTask.
//
// https://doc.babylonjs.com/api/classes/babylon.isimplificationtask#successcallback
func (i *ISimplificationTask) SetSuccessCallback(successCallback func()) *ISimplificationTask {
	p := ba.ctx.Get("ISimplificationTask").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {successCallback(); return nil}))
	return ISimplificationTaskFromJSObject(p, ba.ctx)
}

*/
