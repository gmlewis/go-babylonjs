// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ReplaceColorBlock represents a babylon.js ReplaceColorBlock.
// Block used to replace a color by another one
type ReplaceColorBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *ReplaceColorBlock) JSObject() js.Value { return r.p }

// ReplaceColorBlock returns a ReplaceColorBlock JavaScript class.
func (ba *Babylon) ReplaceColorBlock() *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock")
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// ReplaceColorBlockFromJSObject returns a wrapped ReplaceColorBlock JavaScript class.
func ReplaceColorBlockFromJSObject(p js.Value, ctx js.Value) *ReplaceColorBlock {
	return &ReplaceColorBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// ReplaceColorBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func ReplaceColorBlockArrayToJSArray(array []*ReplaceColorBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewReplaceColorBlock returns a new ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock
func (ba *Babylon) NewReplaceColorBlock(name string) *ReplaceColorBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("ReplaceColorBlock").New(args...)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#autoconfigure
func (r *ReplaceColorBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	r.p.Call("autoConfigure", args...)
}

// ReplaceColorBlockBindOpts contains optional parameters for ReplaceColorBlock.Bind.
type ReplaceColorBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#bind
func (r *ReplaceColorBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *ReplaceColorBlockBindOpts) {
	if opts == nil {
		opts = &ReplaceColorBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	r.p.Call("bind", args...)
}

// Build calls the Build method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#build
func (r *ReplaceColorBlock) Build(state *NodeMaterialBuildState, activeBlocks *NodeMaterialBlock) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, state.JSObject())
	args = append(args, activeBlocks.JSObject())

	retVal := r.p.Call("build", args...)
	return retVal.Bool()
}

// ReplaceColorBlockCloneOpts contains optional parameters for ReplaceColorBlock.Clone.
type ReplaceColorBlockCloneOpts struct {
	RootUrl *string
}

// Clone calls the Clone method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#clone
func (r *ReplaceColorBlock) Clone(scene *Scene, opts *ReplaceColorBlockCloneOpts) *NodeMaterialBlock {
	if opts == nil {
		opts = &ReplaceColorBlockCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := r.p.Call("clone", args...)
	return NodeMaterialBlockFromJSObject(retVal, r.ctx)
}

// ReplaceColorBlockConnectToOpts contains optional parameters for ReplaceColorBlock.ConnectTo.
type ReplaceColorBlockConnectToOpts struct {
	Options map[string]interface{}
}

// ConnectTo calls the ConnectTo method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#connectto
func (r *ReplaceColorBlock) ConnectTo(other *NodeMaterialBlock, opts *ReplaceColorBlockConnectToOpts) *ReplaceColorBlock {
	if opts == nil {
		opts = &ReplaceColorBlockConnectToOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, other.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := r.p.Call("connectTo", args...)
	return ReplaceColorBlockFromJSObject(retVal, r.ctx)
}

// Dispose calls the Dispose method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#dispose
func (r *ReplaceColorBlock) Dispose() {

	r.p.Call("dispose")
}

// GetClassName calls the GetClassName method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#getclassname
func (r *ReplaceColorBlock) GetClassName() string {

	retVal := r.p.Call("getClassName")
	return retVal.String()
}

// ReplaceColorBlockGetFirstAvailableInputOpts contains optional parameters for ReplaceColorBlock.GetFirstAvailableInput.
type ReplaceColorBlockGetFirstAvailableInputOpts struct {
	ForOutput *NodeMaterialConnectionPoint
}

// GetFirstAvailableInput calls the GetFirstAvailableInput method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#getfirstavailableinput
func (r *ReplaceColorBlock) GetFirstAvailableInput(opts *ReplaceColorBlockGetFirstAvailableInputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &ReplaceColorBlockGetFirstAvailableInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForOutput == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForOutput.JSObject())
	}

	retVal := r.p.Call("getFirstAvailableInput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// ReplaceColorBlockGetFirstAvailableOutputOpts contains optional parameters for ReplaceColorBlock.GetFirstAvailableOutput.
type ReplaceColorBlockGetFirstAvailableOutputOpts struct {
	ForBlock *NodeMaterialBlock
}

// GetFirstAvailableOutput calls the GetFirstAvailableOutput method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#getfirstavailableoutput
func (r *ReplaceColorBlock) GetFirstAvailableOutput(opts *ReplaceColorBlockGetFirstAvailableOutputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &ReplaceColorBlockGetFirstAvailableOutputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForBlock == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForBlock.JSObject())
	}

	retVal := r.p.Call("getFirstAvailableOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// GetInputByName calls the GetInputByName method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#getinputbyname
func (r *ReplaceColorBlock) GetInputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := r.p.Call("getInputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// GetOutputByName calls the GetOutputByName method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#getoutputbyname
func (r *ReplaceColorBlock) GetOutputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := r.p.Call("getOutputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// GetSiblingOutput calls the GetSiblingOutput method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#getsiblingoutput
func (r *ReplaceColorBlock) GetSiblingOutput(current *NodeMaterialConnectionPoint) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, current.JSObject())

	retVal := r.p.Call("getSiblingOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// Initialize calls the Initialize method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#initialize
func (r *ReplaceColorBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	r.p.Call("initialize", args...)
}

// ReplaceColorBlockInitializeDefinesOpts contains optional parameters for ReplaceColorBlock.InitializeDefines.
type ReplaceColorBlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#initializedefines
func (r *ReplaceColorBlock) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *ReplaceColorBlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &ReplaceColorBlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	r.p.Call("initializeDefines", args...)
}

// ReplaceColorBlockIsReadyOpts contains optional parameters for ReplaceColorBlock.IsReady.
type ReplaceColorBlockIsReadyOpts struct {
	UseInstances *bool
}

// IsReady calls the IsReady method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#isready
func (r *ReplaceColorBlock) IsReady(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *ReplaceColorBlockIsReadyOpts) bool {
	if opts == nil {
		opts = &ReplaceColorBlockIsReadyOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := r.p.Call("isReady", args...)
	return retVal.Bool()
}

// ReplaceColorBlockPrepareDefinesOpts contains optional parameters for ReplaceColorBlock.PrepareDefines.
type ReplaceColorBlockPrepareDefinesOpts struct {
	UseInstances *bool
}

// PrepareDefines calls the PrepareDefines method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#preparedefines
func (r *ReplaceColorBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *ReplaceColorBlockPrepareDefinesOpts) {
	if opts == nil {
		opts = &ReplaceColorBlockPrepareDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	r.p.Call("prepareDefines", args...)
}

// ProvideFallbacks calls the ProvideFallbacks method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#providefallbacks
func (r *ReplaceColorBlock) ProvideFallbacks(mesh *AbstractMesh, fallbacks *EffectFallbacks) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, fallbacks.JSObject())

	r.p.Call("provideFallbacks", args...)
}

// ReplaceColorBlockRegisterInputOpts contains optional parameters for ReplaceColorBlock.RegisterInput.
type ReplaceColorBlockRegisterInputOpts struct {
	IsOptional *bool
	Target     js.Value
}

// RegisterInput calls the RegisterInput method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#registerinput
func (r *ReplaceColorBlock) RegisterInput(name string, jsType js.Value, opts *ReplaceColorBlockRegisterInputOpts) *ReplaceColorBlock {
	if opts == nil {
		opts = &ReplaceColorBlockRegisterInputOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, jsType)

	if opts.IsOptional == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsOptional)
	}
	args = append(args, opts.Target)

	retVal := r.p.Call("registerInput", args...)
	return ReplaceColorBlockFromJSObject(retVal, r.ctx)
}

// ReplaceColorBlockRegisterOutputOpts contains optional parameters for ReplaceColorBlock.RegisterOutput.
type ReplaceColorBlockRegisterOutputOpts struct {
	Target js.Value
}

// RegisterOutput calls the RegisterOutput method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#registeroutput
func (r *ReplaceColorBlock) RegisterOutput(name string, jsType js.Value, opts *ReplaceColorBlockRegisterOutputOpts) *ReplaceColorBlock {
	if opts == nil {
		opts = &ReplaceColorBlockRegisterOutputOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, jsType)

	args = append(args, opts.Target)

	retVal := r.p.Call("registerOutput", args...)
	return ReplaceColorBlockFromJSObject(retVal, r.ctx)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#replacerepeatablecontent
func (r *ReplaceColorBlock) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	r.p.Call("replaceRepeatableContent", args...)
}

// Serialize calls the Serialize method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#serialize
func (r *ReplaceColorBlock) Serialize() interface{} {

	retVal := r.p.Call("serialize")
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the ReplaceColorBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#updateuniformsandsamples
func (r *ReplaceColorBlock) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers string) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, state.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)
	args = append(args, uniformBuffers)

	r.p.Call("updateUniformsAndSamples", args...)
}

/*

// BuildId returns the BuildId property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#buildid
func (r *ReplaceColorBlock) BuildId(buildId float64) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(buildId)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// SetBuildId sets the BuildId property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#buildid
func (r *ReplaceColorBlock) SetBuildId(buildId float64) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(buildId)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// Comments returns the Comments property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#comments
func (r *ReplaceColorBlock) Comments(comments string) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(comments)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// SetComments sets the Comments property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#comments
func (r *ReplaceColorBlock) SetComments(comments string) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(comments)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// Distance returns the Distance property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#distance
func (r *ReplaceColorBlock) Distance(distance *NodeMaterialConnectionPoint) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(distance.JSObject())
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// SetDistance sets the Distance property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#distance
func (r *ReplaceColorBlock) SetDistance(distance *NodeMaterialConnectionPoint) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(distance.JSObject())
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#inputs
func (r *ReplaceColorBlock) Inputs(inputs *NodeMaterialConnectionPoint) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(inputs.JSObject())
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#inputs
func (r *ReplaceColorBlock) SetInputs(inputs *NodeMaterialConnectionPoint) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(inputs.JSObject())
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// IsFinalMerger returns the IsFinalMerger property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#isfinalmerger
func (r *ReplaceColorBlock) IsFinalMerger(isFinalMerger bool) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(isFinalMerger)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// SetIsFinalMerger sets the IsFinalMerger property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#isfinalmerger
func (r *ReplaceColorBlock) SetIsFinalMerger(isFinalMerger bool) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(isFinalMerger)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// IsInput returns the IsInput property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#isinput
func (r *ReplaceColorBlock) IsInput(isInput bool) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(isInput)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// SetIsInput sets the IsInput property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#isinput
func (r *ReplaceColorBlock) SetIsInput(isInput bool) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(isInput)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// IsUnique returns the IsUnique property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#isunique
func (r *ReplaceColorBlock) IsUnique(isUnique bool) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(isUnique)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// SetIsUnique sets the IsUnique property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#isunique
func (r *ReplaceColorBlock) SetIsUnique(isUnique bool) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(isUnique)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#name
func (r *ReplaceColorBlock) Name(name string) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(name)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#name
func (r *ReplaceColorBlock) SetName(name string) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(name)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#output
func (r *ReplaceColorBlock) Output(output *NodeMaterialConnectionPoint) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(output.JSObject())
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#output
func (r *ReplaceColorBlock) SetOutput(output *NodeMaterialConnectionPoint) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(output.JSObject())
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// Outputs returns the Outputs property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#outputs
func (r *ReplaceColorBlock) Outputs(outputs *NodeMaterialConnectionPoint) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(outputs.JSObject())
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// SetOutputs sets the Outputs property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#outputs
func (r *ReplaceColorBlock) SetOutputs(outputs *NodeMaterialConnectionPoint) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(outputs.JSObject())
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// Reference returns the Reference property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#reference
func (r *ReplaceColorBlock) Reference(reference *NodeMaterialConnectionPoint) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(reference.JSObject())
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// SetReference sets the Reference property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#reference
func (r *ReplaceColorBlock) SetReference(reference *NodeMaterialConnectionPoint) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(reference.JSObject())
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// Replacement returns the Replacement property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#replacement
func (r *ReplaceColorBlock) Replacement(replacement *NodeMaterialConnectionPoint) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(replacement.JSObject())
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// SetReplacement sets the Replacement property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#replacement
func (r *ReplaceColorBlock) SetReplacement(replacement *NodeMaterialConnectionPoint) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(replacement.JSObject())
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#target
func (r *ReplaceColorBlock) Target(target js.Value) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(target)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#target
func (r *ReplaceColorBlock) SetTarget(target js.Value) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(target)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#uniqueid
func (r *ReplaceColorBlock) UniqueId(uniqueId float64) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(uniqueId)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#uniqueid
func (r *ReplaceColorBlock) SetUniqueId(uniqueId float64) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(uniqueId)
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// Value returns the Value property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#value
func (r *ReplaceColorBlock) Value(value *NodeMaterialConnectionPoint) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(value.JSObject())
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

// SetValue sets the Value property of class ReplaceColorBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.replacecolorblock#value
func (r *ReplaceColorBlock) SetValue(value *NodeMaterialConnectionPoint) *ReplaceColorBlock {
	p := ba.ctx.Get("ReplaceColorBlock").New(value.JSObject())
	return ReplaceColorBlockFromJSObject(p, ba.ctx)
}

*/
