// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// EngineOptions represents a babylon.js EngineOptions.
// Interface defining initialization parameters for Engine class
type EngineOptions struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *EngineOptions) JSObject() js.Value { return e.p }

// EngineOptions returns a EngineOptions JavaScript class.
func (ba *Babylon) EngineOptions() *EngineOptions {
	p := ba.ctx.Get("EngineOptions")
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// EngineOptionsFromJSObject returns a wrapped EngineOptions JavaScript class.
func EngineOptionsFromJSObject(p js.Value, ctx js.Value) *EngineOptions {
	return &EngineOptions{p: p, ctx: ctx}
}

// EngineOptionsArrayToJSArray returns a JavaScript Array for the wrapped array.
func EngineOptionsArrayToJSArray(array []*EngineOptions) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Alpha returns the Alpha property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#alpha
func (e *EngineOptions) Alpha(alpha bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(alpha)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetAlpha sets the Alpha property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#alpha
func (e *EngineOptions) SetAlpha(alpha bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(alpha)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// Antialias returns the Antialias property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#antialias
func (e *EngineOptions) Antialias(antialias bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(antialias)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetAntialias sets the Antialias property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#antialias
func (e *EngineOptions) SetAntialias(antialias bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(antialias)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// AudioEngine returns the AudioEngine property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#audioengine
func (e *EngineOptions) AudioEngine(audioEngine bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(audioEngine)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetAudioEngine sets the AudioEngine property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#audioengine
func (e *EngineOptions) SetAudioEngine(audioEngine bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(audioEngine)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// AutoEnableWebVR returns the AutoEnableWebVR property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#autoenablewebvr
func (e *EngineOptions) AutoEnableWebVR(autoEnableWebVR bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(autoEnableWebVR)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetAutoEnableWebVR sets the AutoEnableWebVR property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#autoenablewebvr
func (e *EngineOptions) SetAutoEnableWebVR(autoEnableWebVR bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(autoEnableWebVR)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// Depth returns the Depth property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#depth
func (e *EngineOptions) Depth(depth bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(depth)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetDepth sets the Depth property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#depth
func (e *EngineOptions) SetDepth(depth bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(depth)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// Desynchronized returns the Desynchronized property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#desynchronized
func (e *EngineOptions) Desynchronized(desynchronized bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(desynchronized)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetDesynchronized sets the Desynchronized property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#desynchronized
func (e *EngineOptions) SetDesynchronized(desynchronized bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(desynchronized)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// DeterministicLockstep returns the DeterministicLockstep property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#deterministiclockstep
func (e *EngineOptions) DeterministicLockstep(deterministicLockstep bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(deterministicLockstep)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetDeterministicLockstep sets the DeterministicLockstep property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#deterministiclockstep
func (e *EngineOptions) SetDeterministicLockstep(deterministicLockstep bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(deterministicLockstep)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// DisableWebGL2Support returns the DisableWebGL2Support property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#disablewebgl2support
func (e *EngineOptions) DisableWebGL2Support(disableWebGL2Support bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(disableWebGL2Support)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetDisableWebGL2Support sets the DisableWebGL2Support property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#disablewebgl2support
func (e *EngineOptions) SetDisableWebGL2Support(disableWebGL2Support bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(disableWebGL2Support)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// DoNotHandleContextLost returns the DoNotHandleContextLost property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#donothandlecontextlost
func (e *EngineOptions) DoNotHandleContextLost(doNotHandleContextLost bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(doNotHandleContextLost)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetDoNotHandleContextLost sets the DoNotHandleContextLost property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#donothandlecontextlost
func (e *EngineOptions) SetDoNotHandleContextLost(doNotHandleContextLost bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(doNotHandleContextLost)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// DoNotHandleTouchAction returns the DoNotHandleTouchAction property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#donothandletouchaction
func (e *EngineOptions) DoNotHandleTouchAction(doNotHandleTouchAction bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(doNotHandleTouchAction)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetDoNotHandleTouchAction sets the DoNotHandleTouchAction property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#donothandletouchaction
func (e *EngineOptions) SetDoNotHandleTouchAction(doNotHandleTouchAction bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(doNotHandleTouchAction)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// FailIfMajorPerformanceCaveat returns the FailIfMajorPerformanceCaveat property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#failifmajorperformancecaveat
func (e *EngineOptions) FailIfMajorPerformanceCaveat(failIfMajorPerformanceCaveat bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(failIfMajorPerformanceCaveat)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetFailIfMajorPerformanceCaveat sets the FailIfMajorPerformanceCaveat property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#failifmajorperformancecaveat
func (e *EngineOptions) SetFailIfMajorPerformanceCaveat(failIfMajorPerformanceCaveat bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(failIfMajorPerformanceCaveat)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// LimitDeviceRatio returns the LimitDeviceRatio property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#limitdeviceratio
func (e *EngineOptions) LimitDeviceRatio(limitDeviceRatio float64) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(limitDeviceRatio)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetLimitDeviceRatio sets the LimitDeviceRatio property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#limitdeviceratio
func (e *EngineOptions) SetLimitDeviceRatio(limitDeviceRatio float64) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(limitDeviceRatio)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// LockstepMaxSteps returns the LockstepMaxSteps property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#lockstepmaxsteps
func (e *EngineOptions) LockstepMaxSteps(lockstepMaxSteps float64) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(lockstepMaxSteps)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetLockstepMaxSteps sets the LockstepMaxSteps property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#lockstepmaxsteps
func (e *EngineOptions) SetLockstepMaxSteps(lockstepMaxSteps float64) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(lockstepMaxSteps)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// PowerPreference returns the PowerPreference property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#powerpreference
func (e *EngineOptions) PowerPreference(powerPreference *WebGLPowerPreference) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(powerPreference.JSObject())
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetPowerPreference sets the PowerPreference property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#powerpreference
func (e *EngineOptions) SetPowerPreference(powerPreference *WebGLPowerPreference) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(powerPreference.JSObject())
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// PremultipliedAlpha returns the PremultipliedAlpha property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#premultipliedalpha
func (e *EngineOptions) PremultipliedAlpha(premultipliedAlpha bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(premultipliedAlpha)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetPremultipliedAlpha sets the PremultipliedAlpha property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#premultipliedalpha
func (e *EngineOptions) SetPremultipliedAlpha(premultipliedAlpha bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(premultipliedAlpha)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// PreserveDrawingBuffer returns the PreserveDrawingBuffer property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#preservedrawingbuffer
func (e *EngineOptions) PreserveDrawingBuffer(preserveDrawingBuffer bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(preserveDrawingBuffer)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetPreserveDrawingBuffer sets the PreserveDrawingBuffer property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#preservedrawingbuffer
func (e *EngineOptions) SetPreserveDrawingBuffer(preserveDrawingBuffer bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(preserveDrawingBuffer)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// Stencil returns the Stencil property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#stencil
func (e *EngineOptions) Stencil(stencil bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(stencil)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetStencil sets the Stencil property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#stencil
func (e *EngineOptions) SetStencil(stencil bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(stencil)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// TimeStep returns the TimeStep property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#timestep
func (e *EngineOptions) TimeStep(timeStep float64) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(timeStep)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetTimeStep sets the TimeStep property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#timestep
func (e *EngineOptions) SetTimeStep(timeStep float64) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(timeStep)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// UseHighPrecisionFloats returns the UseHighPrecisionFloats property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#usehighprecisionfloats
func (e *EngineOptions) UseHighPrecisionFloats(useHighPrecisionFloats bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(useHighPrecisionFloats)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

// SetUseHighPrecisionFloats sets the UseHighPrecisionFloats property of class EngineOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.engineoptions#usehighprecisionfloats
func (e *EngineOptions) SetUseHighPrecisionFloats(useHighPrecisionFloats bool) *EngineOptions {
	p := ba.ctx.Get("EngineOptions").New(useHighPrecisionFloats)
	return EngineOptionsFromJSObject(p, ba.ctx)
}

*/
