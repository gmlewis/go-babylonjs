// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IPhysicsEngine represents a babylon.js IPhysicsEngine.
// Interface used to define a physics engine
//
// See: http://doc.babylonjs.com/how_to/using_the_physics_engine
type IPhysicsEngine struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IPhysicsEngine) JSObject() js.Value { return i.p }

// IPhysicsEngine returns a IPhysicsEngine JavaScript class.
func (ba *Babylon) IPhysicsEngine() *IPhysicsEngine {
	p := ba.ctx.Get("IPhysicsEngine")
	return IPhysicsEngineFromJSObject(p, ba.ctx)
}

// IPhysicsEngineFromJSObject returns a wrapped IPhysicsEngine JavaScript class.
func IPhysicsEngineFromJSObject(p js.Value, ctx js.Value) *IPhysicsEngine {
	return &IPhysicsEngine{p: p, ctx: ctx}
}

// IPhysicsEngineArrayToJSArray returns a JavaScript Array for the wrapped array.
func IPhysicsEngineArrayToJSArray(array []*IPhysicsEngine) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// AddImpostor calls the AddImpostor method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#addimpostor
func (i *IPhysicsEngine) AddImpostor(impostor *PhysicsImpostor) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, impostor.JSObject())

	i.p.Call("addImpostor", args...)
}

// AddJoint calls the AddJoint method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#addjoint
func (i *IPhysicsEngine) AddJoint(mainImpostor *PhysicsImpostor, connectedImpostor *PhysicsImpostor, joint *PhysicsJoint) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, mainImpostor.JSObject())
	args = append(args, connectedImpostor.JSObject())
	args = append(args, joint.JSObject())

	i.p.Call("addJoint", args...)
}

// Dispose calls the Dispose method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#dispose
func (i *IPhysicsEngine) Dispose() {

	i.p.Call("dispose")
}

// GetImpostorForPhysicsObject calls the GetImpostorForPhysicsObject method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#getimpostorforphysicsobject
func (i *IPhysicsEngine) GetImpostorForPhysicsObject(object *IPhysicsEnabledObject) *PhysicsImpostor {

	args := make([]interface{}, 0, 1+0)

	args = append(args, object.JSObject())

	retVal := i.p.Call("getImpostorForPhysicsObject", args...)
	return PhysicsImpostorFromJSObject(retVal, i.ctx)
}

// GetImpostorWithPhysicsBody calls the GetImpostorWithPhysicsBody method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#getimpostorwithphysicsbody
func (i *IPhysicsEngine) GetImpostorWithPhysicsBody(body interface{}) *PhysicsImpostor {

	args := make([]interface{}, 0, 1+0)

	args = append(args, body)

	retVal := i.p.Call("getImpostorWithPhysicsBody", args...)
	return PhysicsImpostorFromJSObject(retVal, i.ctx)
}

// GetImpostors calls the GetImpostors method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#getimpostors
func (i *IPhysicsEngine) GetImpostors() []*PhysicsImpostor {

	retVal := i.p.Call("getImpostors")
	result := []*PhysicsImpostor{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, PhysicsImpostorFromJSObject(retVal.Index(ri), i.ctx))
	}
	return result
}

// GetPhysicsPlugin calls the GetPhysicsPlugin method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#getphysicsplugin
func (i *IPhysicsEngine) GetPhysicsPlugin() js.Value {

	retVal := i.p.Call("getPhysicsPlugin")
	return retVal
}

// GetPhysicsPluginName calls the GetPhysicsPluginName method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#getphysicspluginname
func (i *IPhysicsEngine) GetPhysicsPluginName() string {

	retVal := i.p.Call("getPhysicsPluginName")
	return retVal.String()
}

// GetSubTimeStep calls the GetSubTimeStep method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#getsubtimestep
func (i *IPhysicsEngine) GetSubTimeStep() float64 {

	retVal := i.p.Call("getSubTimeStep")
	return retVal.Float()
}

// GetTimeStep calls the GetTimeStep method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#gettimestep
func (i *IPhysicsEngine) GetTimeStep() float64 {

	retVal := i.p.Call("getTimeStep")
	return retVal.Float()
}

// Raycast calls the Raycast method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#raycast
func (i *IPhysicsEngine) Raycast(from *Vector3, to *Vector3) *PhysicsRaycastResult {

	args := make([]interface{}, 0, 2+0)

	args = append(args, from.JSObject())
	args = append(args, to.JSObject())

	retVal := i.p.Call("raycast", args...)
	return PhysicsRaycastResultFromJSObject(retVal, i.ctx)
}

// RemoveImpostor calls the RemoveImpostor method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#removeimpostor
func (i *IPhysicsEngine) RemoveImpostor(impostor *PhysicsImpostor) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, impostor.JSObject())

	i.p.Call("removeImpostor", args...)
}

// RemoveJoint calls the RemoveJoint method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#removejoint
func (i *IPhysicsEngine) RemoveJoint(mainImpostor *PhysicsImpostor, connectedImpostor *PhysicsImpostor, joint *PhysicsJoint) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, mainImpostor.JSObject())
	args = append(args, connectedImpostor.JSObject())
	args = append(args, joint.JSObject())

	i.p.Call("removeJoint", args...)
}

// SetGravity calls the SetGravity method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#setgravity
func (i *IPhysicsEngine) SetGravity(gravity *Vector3) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gravity.JSObject())

	i.p.Call("setGravity", args...)
}

// SetSubTimeStep calls the SetSubTimeStep method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#setsubtimestep
func (i *IPhysicsEngine) SetSubTimeStep(subTimeStep float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, subTimeStep)

	i.p.Call("setSubTimeStep", args...)
}

// SetTimeStep calls the SetTimeStep method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#settimestep
func (i *IPhysicsEngine) SetTimeStep(newTimeStep float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, newTimeStep)

	i.p.Call("setTimeStep", args...)
}

// _step calls the _step method on the IPhysicsEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#_step
func (i *IPhysicsEngine) _step(delta float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, delta)

	i.p.Call("_step", args...)
}

// Gravity returns the Gravity property of class IPhysicsEngine.
//
// https://doc.babylonjs.com/api/classes/babylon.iphysicsengine#gravity
func (i *IPhysicsEngine) Gravity() *Vector3 {
	retVal := i.p.Get("gravity")
	return Vector3FromJSObject(retVal, i.ctx)
}
