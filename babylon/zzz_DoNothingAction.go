// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DoNothingAction represents a babylon.js DoNothingAction.
// This defines an action responsible that does nothing once triggered.
//
// See: http://doc.babylonjs.com/how_to/how_to_use_actions
type DoNothingAction struct {
	*Action
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DoNothingAction) JSObject() js.Value { return d.p }

// DoNothingAction returns a DoNothingAction JavaScript class.
func (ba *Babylon) DoNothingAction() *DoNothingAction {
	p := ba.ctx.Get("DoNothingAction")
	return DoNothingActionFromJSObject(p, ba.ctx)
}

// DoNothingActionFromJSObject returns a wrapped DoNothingAction JavaScript class.
func DoNothingActionFromJSObject(p js.Value, ctx js.Value) *DoNothingAction {
	return &DoNothingAction{Action: ActionFromJSObject(p, ctx), ctx: ctx}
}

// DoNothingActionArrayToJSArray returns a JavaScript Array for the wrapped array.
func DoNothingActionArrayToJSArray(array []*DoNothingAction) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDoNothingActionOpts contains optional parameters for NewDoNothingAction.
type NewDoNothingActionOpts struct {
	TriggerOptions *interface{}
	Condition      *Condition
}

// NewDoNothingAction returns a new DoNothingAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.donothingaction
func (ba *Babylon) NewDoNothingAction(opts *NewDoNothingActionOpts) *DoNothingAction {
	if opts == nil {
		opts = &NewDoNothingActionOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.TriggerOptions == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.TriggerOptions)
	}
	if opts.Condition == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Condition.JSObject())
	}

	p := ba.ctx.Get("DoNothingAction").New(args...)
	return DoNothingActionFromJSObject(p, ba.ctx)
}

// Execute calls the Execute method on the DoNothingAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.donothingaction#execute
func (d *DoNothingAction) Execute() {

	d.p.Call("execute")
}

// GetTriggerParameter calls the GetTriggerParameter method on the DoNothingAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.donothingaction#gettriggerparameter
func (d *DoNothingAction) GetTriggerParameter() interface{} {

	retVal := d.p.Call("getTriggerParameter")
	return retVal
}

// Serialize calls the Serialize method on the DoNothingAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.donothingaction#serialize
func (d *DoNothingAction) Serialize(parent interface{}) interface{} {

	args := make([]interface{}, 0, 1+0)

	args = append(args, parent)

	retVal := d.p.Call("serialize", args...)
	return retVal
}

// SkipToNextActiveAction calls the SkipToNextActiveAction method on the DoNothingAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.donothingaction#skiptonextactiveaction
func (d *DoNothingAction) SkipToNextActiveAction() {

	d.p.Call("skipToNextActiveAction")
}

// Then calls the Then method on the DoNothingAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.donothingaction#then
func (d *DoNothingAction) Then(action *Action) *Action {

	args := make([]interface{}, 0, 1+0)

	args = append(args, action.JSObject())

	retVal := d.p.Call("then", args...)
	return ActionFromJSObject(retVal, d.ctx)
}

/*

// OnBeforeExecuteObservable returns the OnBeforeExecuteObservable property of class DoNothingAction.
//
// https://doc.babylonjs.com/api/classes/babylon.donothingaction#onbeforeexecuteobservable
func (d *DoNothingAction) OnBeforeExecuteObservable(onBeforeExecuteObservable *Observable) *DoNothingAction {
	p := ba.ctx.Get("DoNothingAction").New(onBeforeExecuteObservable.JSObject())
	return DoNothingActionFromJSObject(p, ba.ctx)
}

// SetOnBeforeExecuteObservable sets the OnBeforeExecuteObservable property of class DoNothingAction.
//
// https://doc.babylonjs.com/api/classes/babylon.donothingaction#onbeforeexecuteobservable
func (d *DoNothingAction) SetOnBeforeExecuteObservable(onBeforeExecuteObservable *Observable) *DoNothingAction {
	p := ba.ctx.Get("DoNothingAction").New(onBeforeExecuteObservable.JSObject())
	return DoNothingActionFromJSObject(p, ba.ctx)
}

// Trigger returns the Trigger property of class DoNothingAction.
//
// https://doc.babylonjs.com/api/classes/babylon.donothingaction#trigger
func (d *DoNothingAction) Trigger(trigger float64) *DoNothingAction {
	p := ba.ctx.Get("DoNothingAction").New(trigger)
	return DoNothingActionFromJSObject(p, ba.ctx)
}

// SetTrigger sets the Trigger property of class DoNothingAction.
//
// https://doc.babylonjs.com/api/classes/babylon.donothingaction#trigger
func (d *DoNothingAction) SetTrigger(trigger float64) *DoNothingAction {
	p := ba.ctx.Get("DoNothingAction").New(trigger)
	return DoNothingActionFromJSObject(p, ba.ctx)
}

// TriggerOptions returns the TriggerOptions property of class DoNothingAction.
//
// https://doc.babylonjs.com/api/classes/babylon.donothingaction#triggeroptions
func (d *DoNothingAction) TriggerOptions(triggerOptions interface{}) *DoNothingAction {
	p := ba.ctx.Get("DoNothingAction").New(triggerOptions)
	return DoNothingActionFromJSObject(p, ba.ctx)
}

// SetTriggerOptions sets the TriggerOptions property of class DoNothingAction.
//
// https://doc.babylonjs.com/api/classes/babylon.donothingaction#triggeroptions
func (d *DoNothingAction) SetTriggerOptions(triggerOptions interface{}) *DoNothingAction {
	p := ba.ctx.Get("DoNothingAction").New(triggerOptions)
	return DoNothingActionFromJSObject(p, ba.ctx)
}

*/
