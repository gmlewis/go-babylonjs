// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BackEase represents a babylon.js BackEase.
// Easing function with a ease back shape (see link below).
//
// See: https://easings.net/#easeInBack
// See: http://doc.babylonjs.com/babylon101/animations#easing-functions
type BackEase struct {
	*EasingFunction
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BackEase) JSObject() js.Value { return b.p }

// BackEase returns a BackEase JavaScript class.
func (ba *Babylon) BackEase() *BackEase {
	p := ba.ctx.Get("BackEase")
	return BackEaseFromJSObject(p, ba.ctx)
}

// BackEaseFromJSObject returns a wrapped BackEase JavaScript class.
func BackEaseFromJSObject(p js.Value, ctx js.Value) *BackEase {
	return &BackEase{EasingFunction: EasingFunctionFromJSObject(p, ctx), ctx: ctx}
}

// BackEaseArrayToJSArray returns a JavaScript Array for the wrapped array.
func BackEaseArrayToJSArray(array []*BackEase) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewBackEaseOpts contains optional parameters for NewBackEase.
type NewBackEaseOpts struct {
	Amplitude *float64
}

// NewBackEase returns a new BackEase object.
//
// https://doc.babylonjs.com/api/classes/babylon.backease
func (ba *Babylon) NewBackEase(opts *NewBackEaseOpts) *BackEase {
	if opts == nil {
		opts = &NewBackEaseOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Amplitude == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Amplitude)
	}

	p := ba.ctx.Get("BackEase").New(args...)
	return BackEaseFromJSObject(p, ba.ctx)
}

// Ease calls the Ease method on the BackEase object.
//
// https://doc.babylonjs.com/api/classes/babylon.backease#ease
func (b *BackEase) Ease(gradient float64) float64 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, gradient)

	retVal := b.p.Call("ease", args...)
	return retVal.Float()
}

// GetEasingMode calls the GetEasingMode method on the BackEase object.
//
// https://doc.babylonjs.com/api/classes/babylon.backease#geteasingmode
func (b *BackEase) GetEasingMode() float64 {

	retVal := b.p.Call("getEasingMode")
	return retVal.Float()
}

// SetEasingMode calls the SetEasingMode method on the BackEase object.
//
// https://doc.babylonjs.com/api/classes/babylon.backease#seteasingmode
func (b *BackEase) SetEasingMode(easingMode float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, easingMode)

	b.p.Call("setEasingMode", args...)
}

/*

// Amplitude returns the Amplitude property of class BackEase.
//
// https://doc.babylonjs.com/api/classes/babylon.backease#amplitude
func (b *BackEase) Amplitude(amplitude float64) *BackEase {
	p := ba.ctx.Get("BackEase").New(amplitude)
	return BackEaseFromJSObject(p, ba.ctx)
}

// SetAmplitude sets the Amplitude property of class BackEase.
//
// https://doc.babylonjs.com/api/classes/babylon.backease#amplitude
func (b *BackEase) SetAmplitude(amplitude float64) *BackEase {
	p := ba.ctx.Get("BackEase").New(amplitude)
	return BackEaseFromJSObject(p, ba.ctx)
}

// EASINGMODE_EASEIN returns the EASINGMODE_EASEIN property of class BackEase.
//
// https://doc.babylonjs.com/api/classes/babylon.backease#easingmode_easein
func (b *BackEase) EASINGMODE_EASEIN(EASINGMODE_EASEIN float64) *BackEase {
	p := ba.ctx.Get("BackEase").New(EASINGMODE_EASEIN)
	return BackEaseFromJSObject(p, ba.ctx)
}

// SetEASINGMODE_EASEIN sets the EASINGMODE_EASEIN property of class BackEase.
//
// https://doc.babylonjs.com/api/classes/babylon.backease#easingmode_easein
func (b *BackEase) SetEASINGMODE_EASEIN(EASINGMODE_EASEIN float64) *BackEase {
	p := ba.ctx.Get("BackEase").New(EASINGMODE_EASEIN)
	return BackEaseFromJSObject(p, ba.ctx)
}

// EASINGMODE_EASEINOUT returns the EASINGMODE_EASEINOUT property of class BackEase.
//
// https://doc.babylonjs.com/api/classes/babylon.backease#easingmode_easeinout
func (b *BackEase) EASINGMODE_EASEINOUT(EASINGMODE_EASEINOUT float64) *BackEase {
	p := ba.ctx.Get("BackEase").New(EASINGMODE_EASEINOUT)
	return BackEaseFromJSObject(p, ba.ctx)
}

// SetEASINGMODE_EASEINOUT sets the EASINGMODE_EASEINOUT property of class BackEase.
//
// https://doc.babylonjs.com/api/classes/babylon.backease#easingmode_easeinout
func (b *BackEase) SetEASINGMODE_EASEINOUT(EASINGMODE_EASEINOUT float64) *BackEase {
	p := ba.ctx.Get("BackEase").New(EASINGMODE_EASEINOUT)
	return BackEaseFromJSObject(p, ba.ctx)
}

// EASINGMODE_EASEOUT returns the EASINGMODE_EASEOUT property of class BackEase.
//
// https://doc.babylonjs.com/api/classes/babylon.backease#easingmode_easeout
func (b *BackEase) EASINGMODE_EASEOUT(EASINGMODE_EASEOUT float64) *BackEase {
	p := ba.ctx.Get("BackEase").New(EASINGMODE_EASEOUT)
	return BackEaseFromJSObject(p, ba.ctx)
}

// SetEASINGMODE_EASEOUT sets the EASINGMODE_EASEOUT property of class BackEase.
//
// https://doc.babylonjs.com/api/classes/babylon.backease#easingmode_easeout
func (b *BackEase) SetEASINGMODE_EASEOUT(EASINGMODE_EASEOUT float64) *BackEase {
	p := ba.ctx.Get("BackEase").New(EASINGMODE_EASEOUT)
	return BackEaseFromJSObject(p, ba.ctx)
}

*/
