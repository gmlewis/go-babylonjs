// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ScrollBar represents a babylon.js ScrollBar.
// Class used to create slider controls
type ScrollBar struct {
	*BaseSlider
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *ScrollBar) JSObject() js.Value { return s.p }

// ScrollBar returns a ScrollBar JavaScript class.
func (ba *Babylon) ScrollBar() *ScrollBar {
	p := ba.ctx.Get("ScrollBar")
	return ScrollBarFromJSObject(p, ba.ctx)
}

// ScrollBarFromJSObject returns a wrapped ScrollBar JavaScript class.
func ScrollBarFromJSObject(p js.Value, ctx js.Value) *ScrollBar {
	return &ScrollBar{BaseSlider: BaseSliderFromJSObject(p, ctx), ctx: ctx}
}

// ScrollBarArrayToJSArray returns a JavaScript Array for the wrapped array.
func ScrollBarArrayToJSArray(array []*ScrollBar) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewScrollBarOpts contains optional parameters for NewScrollBar.
type NewScrollBarOpts struct {
	Name *string
}

// NewScrollBar returns a new ScrollBar object.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollbar
func (ba *Babylon) NewScrollBar(opts *NewScrollBarOpts) *ScrollBar {
	if opts == nil {
		opts = &NewScrollBarOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}

	p := ba.ctx.Get("ScrollBar").New(args...)
	return ScrollBarFromJSObject(p, ba.ctx)
}

// _draw calls the _draw method on the ScrollBar object.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollbar#_draw
func (s *ScrollBar) _draw(context js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, context)

	s.p.Call("_draw", args...)
}

// _onPointerDown calls the _onPointerDown method on the ScrollBar object.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollbar#_onpointerdown
func (s *ScrollBar) _onPointerDown(target *Control, coordinates *Vector2, pointerId float64, buttonIndex float64) bool {

	args := make([]interface{}, 0, 4+0)

	args = append(args, target.JSObject())
	args = append(args, coordinates.JSObject())
	args = append(args, pointerId)
	args = append(args, buttonIndex)

	retVal := s.p.Call("_onPointerDown", args...)
	return retVal.Bool()
}

// Background returns the Background property of class ScrollBar.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollbar#background
func (s *ScrollBar) Background() string {
	retVal := s.p.Get("background")
	return retVal.String()
}

// SetBackground sets the Background property of class ScrollBar.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollbar#background
func (s *ScrollBar) SetBackground(background string) *ScrollBar {
	s.p.Set("background", background)
	return s
}

// BorderColor returns the BorderColor property of class ScrollBar.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollbar#bordercolor
func (s *ScrollBar) BorderColor() string {
	retVal := s.p.Get("borderColor")
	return retVal.String()
}

// SetBorderColor sets the BorderColor property of class ScrollBar.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollbar#bordercolor
func (s *ScrollBar) SetBorderColor(borderColor string) *ScrollBar {
	s.p.Set("borderColor", borderColor)
	return s
}

// Name returns the Name property of class ScrollBar.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollbar#name
func (s *ScrollBar) Name() string {
	retVal := s.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class ScrollBar.
//
// https://doc.babylonjs.com/api/classes/babylon.scrollbar#name
func (s *ScrollBar) SetName(name string) *ScrollBar {
	s.p.Set("name", name)
	return s
}
