// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SimpleMaterial represents a babylon.js SimpleMaterial.
//
type SimpleMaterial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SimpleMaterial) JSObject() js.Value { return s.p }

// SimpleMaterial returns a SimpleMaterial JavaScript class.
func (ba *Babylon) SimpleMaterial() *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial")
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SimpleMaterialFromJSObject returns a wrapped SimpleMaterial JavaScript class.
func SimpleMaterialFromJSObject(p js.Value, ctx js.Value) *SimpleMaterial {
	return &SimpleMaterial{p: p, ctx: ctx}
}

// NewSimpleMaterial returns a new SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial
func (ba *Babylon) NewSimpleMaterial(name string, scene *Scene) *SimpleMaterial {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("SimpleMaterial").New(args...)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SimpleMaterialBindOpts contains optional parameters for SimpleMaterial.Bind.
type SimpleMaterialBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#bind
func (s *SimpleMaterial) Bind(world *Matrix, opts *SimpleMaterialBindOpts) {
	if opts == nil {
		opts = &SimpleMaterialBindOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, world.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	s.p.Call("bind", args...)
}

// BindForSubMesh calls the BindForSubMesh method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#bindforsubmesh
func (s *SimpleMaterial) BindForSubMesh(world *Matrix, mesh *Mesh, subMesh *SubMesh) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, world.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	s.p.Call("bindForSubMesh", args...)
}

// BindOnlyNormalMatrix calls the BindOnlyNormalMatrix method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#bindonlynormalmatrix
func (s *SimpleMaterial) BindOnlyNormalMatrix(normalMatrix *Matrix) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, normalMatrix.JSObject())

	s.p.Call("bindOnlyNormalMatrix", args...)
}

// BindOnlyWorldMatrix calls the BindOnlyWorldMatrix method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#bindonlyworldmatrix
func (s *SimpleMaterial) BindOnlyWorldMatrix(world *Matrix) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, world.JSObject())

	s.p.Call("bindOnlyWorldMatrix", args...)
}

// BindSceneUniformBuffer calls the BindSceneUniformBuffer method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#bindsceneuniformbuffer
func (s *SimpleMaterial) BindSceneUniformBuffer(effect *Effect, sceneUbo *UniformBuffer) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, sceneUbo.JSObject())

	s.p.Call("bindSceneUniformBuffer", args...)
}

// BindView calls the BindView method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#bindview
func (s *SimpleMaterial) BindView(effect *Effect) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, effect.JSObject())

	s.p.Call("bindView", args...)
}

// BindViewProjection calls the BindViewProjection method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#bindviewprojection
func (s *SimpleMaterial) BindViewProjection(effect *Effect) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, effect.JSObject())

	s.p.Call("bindViewProjection", args...)
}

// Clone calls the Clone method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#clone
func (s *SimpleMaterial) Clone(name string) *SimpleMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := s.p.Call("clone", args...)
	return SimpleMaterialFromJSObject(retVal, s.ctx)
}

// SimpleMaterialDisposeOpts contains optional parameters for SimpleMaterial.Dispose.
type SimpleMaterialDisposeOpts struct {
	ForceDisposeEffect *bool
}

// Dispose calls the Dispose method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#dispose
func (s *SimpleMaterial) Dispose(opts *SimpleMaterialDisposeOpts) {
	if opts == nil {
		opts = &SimpleMaterialDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForceDisposeEffect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeEffect)
	}

	s.p.Call("dispose", args...)
}

// SimpleMaterialForceCompilationOpts contains optional parameters for SimpleMaterial.ForceCompilation.
type SimpleMaterialForceCompilationOpts struct {
	OnCompiled *func()
	Options    js.Value
	OnError    *func()
}

// ForceCompilation calls the ForceCompilation method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#forcecompilation
func (s *SimpleMaterial) ForceCompilation(mesh *AbstractMesh, opts *SimpleMaterialForceCompilationOpts) {
	if opts == nil {
		opts = &SimpleMaterialForceCompilationOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, mesh.JSObject())

	if opts.OnCompiled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnCompiled)
	}
	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}

	s.p.Call("forceCompilation", args...)
}

// SimpleMaterialForceCompilationAsyncOpts contains optional parameters for SimpleMaterial.ForceCompilationAsync.
type SimpleMaterialForceCompilationAsyncOpts struct {
	Options js.Value
}

// ForceCompilationAsync calls the ForceCompilationAsync method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#forcecompilationasync
func (s *SimpleMaterial) ForceCompilationAsync(mesh *AbstractMesh, opts *SimpleMaterialForceCompilationAsyncOpts) {
	if opts == nil {
		opts = &SimpleMaterialForceCompilationAsyncOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, mesh.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	s.p.Call("forceCompilationAsync", args...)
}

// Freeze calls the Freeze method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#freeze
func (s *SimpleMaterial) Freeze() {

	args := make([]interface{}, 0, 0+0)

	s.p.Call("freeze", args...)
}

// GetActiveTextures calls the GetActiveTextures method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#getactivetextures
func (s *SimpleMaterial) GetActiveTextures() *BaseTexture {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("getActiveTextures", args...)
	return BaseTextureFromJSObject(retVal, s.ctx)
}

// GetAlphaTestTexture calls the GetAlphaTestTexture method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#getalphatesttexture
func (s *SimpleMaterial) GetAlphaTestTexture() *BaseTexture {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("getAlphaTestTexture", args...)
	return BaseTextureFromJSObject(retVal, s.ctx)
}

// GetAnimatables calls the GetAnimatables method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#getanimatables
func (s *SimpleMaterial) GetAnimatables() js.Value {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("getAnimatables", args...)
	return retVal
}

// GetBindedMeshes calls the GetBindedMeshes method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#getbindedmeshes
func (s *SimpleMaterial) GetBindedMeshes() *AbstractMesh {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("getBindedMeshes", args...)
	return AbstractMeshFromJSObject(retVal, s.ctx)
}

// GetClassName calls the GetClassName method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#getclassname
func (s *SimpleMaterial) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("getClassName", args...)
	return retVal.String()
}

// GetEffect calls the GetEffect method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#geteffect
func (s *SimpleMaterial) GetEffect() *Effect {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("getEffect", args...)
	return EffectFromJSObject(retVal, s.ctx)
}

// GetScene calls the GetScene method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#getscene
func (s *SimpleMaterial) GetScene() *Scene {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("getScene", args...)
	return SceneFromJSObject(retVal, s.ctx)
}

// HasTexture calls the HasTexture method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#hastexture
func (s *SimpleMaterial) HasTexture(texture *BaseTexture) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	retVal := s.p.Call("hasTexture", args...)
	return retVal.Bool()
}

// SimpleMaterialIsReadyOpts contains optional parameters for SimpleMaterial.IsReady.
type SimpleMaterialIsReadyOpts struct {
	Mesh         *AbstractMesh
	UseInstances *bool
}

// IsReady calls the IsReady method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#isready
func (s *SimpleMaterial) IsReady(opts *SimpleMaterialIsReadyOpts) bool {
	if opts == nil {
		opts = &SimpleMaterialIsReadyOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}
	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := s.p.Call("isReady", args...)
	return retVal.Bool()
}

// SimpleMaterialIsReadyForSubMeshOpts contains optional parameters for SimpleMaterial.IsReadyForSubMesh.
type SimpleMaterialIsReadyForSubMeshOpts struct {
	UseInstances *bool
}

// IsReadyForSubMesh calls the IsReadyForSubMesh method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#isreadyforsubmesh
func (s *SimpleMaterial) IsReadyForSubMesh(mesh *AbstractMesh, subMesh *SubMesh, opts *SimpleMaterialIsReadyForSubMeshOpts) bool {
	if opts == nil {
		opts = &SimpleMaterialIsReadyForSubMeshOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := s.p.Call("isReadyForSubMesh", args...)
	return retVal.Bool()
}

// MarkAsDirty calls the MarkAsDirty method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#markasdirty
func (s *SimpleMaterial) MarkAsDirty(flag float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, flag)

	s.p.Call("markAsDirty", args...)
}

// MarkDirty calls the MarkDirty method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#markdirty
func (s *SimpleMaterial) MarkDirty() {

	args := make([]interface{}, 0, 0+0)

	s.p.Call("markDirty", args...)
}

// NeedAlphaBlending calls the NeedAlphaBlending method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#needalphablending
func (s *SimpleMaterial) NeedAlphaBlending() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("needAlphaBlending", args...)
	return retVal.Bool()
}

// NeedAlphaBlendingForMesh calls the NeedAlphaBlendingForMesh method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#needalphablendingformesh
func (s *SimpleMaterial) NeedAlphaBlendingForMesh(mesh *AbstractMesh) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	retVal := s.p.Call("needAlphaBlendingForMesh", args...)
	return retVal.Bool()
}

// NeedAlphaTesting calls the NeedAlphaTesting method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#needalphatesting
func (s *SimpleMaterial) NeedAlphaTesting() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("needAlphaTesting", args...)
	return retVal.Bool()
}

// Parse calls the Parse method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#parse
func (s *SimpleMaterial) Parse(source interface{}, scene *Scene, rootUrl string) *SimpleMaterial {

	args := make([]interface{}, 0, 3+0)

	args = append(args, source)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := s.p.Call("Parse", args...)
	return SimpleMaterialFromJSObject(retVal, s.ctx)
}

// Serialize calls the Serialize method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#serialize
func (s *SimpleMaterial) Serialize() interface{} {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("serialize", args...)
	return retVal
}

// SimpleMaterialToStringOpts contains optional parameters for SimpleMaterial.ToString.
type SimpleMaterialToStringOpts struct {
	FullDetails *bool
}

// ToString calls the ToString method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#tostring
func (s *SimpleMaterial) ToString(opts *SimpleMaterialToStringOpts) string {
	if opts == nil {
		opts = &SimpleMaterialToStringOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.FullDetails == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FullDetails)
	}

	retVal := s.p.Call("toString", args...)
	return retVal.String()
}

// Unbind calls the Unbind method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#unbind
func (s *SimpleMaterial) Unbind() {

	args := make([]interface{}, 0, 0+0)

	s.p.Call("unbind", args...)
}

// Unfreeze calls the Unfreeze method on the SimpleMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#unfreeze
func (s *SimpleMaterial) Unfreeze() {

	args := make([]interface{}, 0, 0+0)

	s.p.Call("unfreeze", args...)
}

/*

// AllDirtyFlag returns the AllDirtyFlag property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#alldirtyflag
func (s *SimpleMaterial) AllDirtyFlag(AllDirtyFlag float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(AllDirtyFlag)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetAllDirtyFlag sets the AllDirtyFlag property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#alldirtyflag
func (s *SimpleMaterial) SetAllDirtyFlag(AllDirtyFlag float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(AllDirtyFlag)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// AllowShaderHotSwapping returns the AllowShaderHotSwapping property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#allowshaderhotswapping
func (s *SimpleMaterial) AllowShaderHotSwapping(allowShaderHotSwapping bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(allowShaderHotSwapping)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetAllowShaderHotSwapping sets the AllowShaderHotSwapping property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#allowshaderhotswapping
func (s *SimpleMaterial) SetAllowShaderHotSwapping(allowShaderHotSwapping bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(allowShaderHotSwapping)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// Alpha returns the Alpha property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#alpha
func (s *SimpleMaterial) Alpha(alpha float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(alpha)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetAlpha sets the Alpha property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#alpha
func (s *SimpleMaterial) SetAlpha(alpha float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(alpha)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// AlphaMode returns the AlphaMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#alphamode
func (s *SimpleMaterial) AlphaMode(alphaMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(alphaMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetAlphaMode sets the AlphaMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#alphamode
func (s *SimpleMaterial) SetAlphaMode(alphaMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(alphaMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// Animations returns the Animations property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#animations
func (s *SimpleMaterial) Animations(animations []Animation) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(animations.JSObject())
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#animations
func (s *SimpleMaterial) SetAnimations(animations []Animation) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(animations.JSObject())
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// AttributesDirtyFlag returns the AttributesDirtyFlag property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#attributesdirtyflag
func (s *SimpleMaterial) AttributesDirtyFlag(AttributesDirtyFlag float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(AttributesDirtyFlag)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetAttributesDirtyFlag sets the AttributesDirtyFlag property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#attributesdirtyflag
func (s *SimpleMaterial) SetAttributesDirtyFlag(AttributesDirtyFlag float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(AttributesDirtyFlag)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// BackFaceCulling returns the BackFaceCulling property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#backfaceculling
func (s *SimpleMaterial) BackFaceCulling(backFaceCulling bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(backFaceCulling)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetBackFaceCulling sets the BackFaceCulling property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#backfaceculling
func (s *SimpleMaterial) SetBackFaceCulling(backFaceCulling bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(backFaceCulling)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// CheckReadyOnEveryCall returns the CheckReadyOnEveryCall property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#checkreadyoneverycall
func (s *SimpleMaterial) CheckReadyOnEveryCall(checkReadyOnEveryCall bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(checkReadyOnEveryCall)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetCheckReadyOnEveryCall sets the CheckReadyOnEveryCall property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#checkreadyoneverycall
func (s *SimpleMaterial) SetCheckReadyOnEveryCall(checkReadyOnEveryCall bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(checkReadyOnEveryCall)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// CheckReadyOnlyOnce returns the CheckReadyOnlyOnce property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#checkreadyonlyonce
func (s *SimpleMaterial) CheckReadyOnlyOnce(checkReadyOnlyOnce bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(checkReadyOnlyOnce)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetCheckReadyOnlyOnce sets the CheckReadyOnlyOnce property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#checkreadyonlyonce
func (s *SimpleMaterial) SetCheckReadyOnlyOnce(checkReadyOnlyOnce bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(checkReadyOnlyOnce)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// ClockWiseSideOrientation returns the ClockWiseSideOrientation property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#clockwisesideorientation
func (s *SimpleMaterial) ClockWiseSideOrientation(ClockWiseSideOrientation float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(ClockWiseSideOrientation)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetClockWiseSideOrientation sets the ClockWiseSideOrientation property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#clockwisesideorientation
func (s *SimpleMaterial) SetClockWiseSideOrientation(ClockWiseSideOrientation float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(ClockWiseSideOrientation)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// CounterClockWiseSideOrientation returns the CounterClockWiseSideOrientation property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#counterclockwisesideorientation
func (s *SimpleMaterial) CounterClockWiseSideOrientation(CounterClockWiseSideOrientation float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(CounterClockWiseSideOrientation)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetCounterClockWiseSideOrientation sets the CounterClockWiseSideOrientation property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#counterclockwisesideorientation
func (s *SimpleMaterial) SetCounterClockWiseSideOrientation(CounterClockWiseSideOrientation float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(CounterClockWiseSideOrientation)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// DepthFunction returns the DepthFunction property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#depthfunction
func (s *SimpleMaterial) DepthFunction(depthFunction float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(depthFunction)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetDepthFunction sets the DepthFunction property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#depthfunction
func (s *SimpleMaterial) SetDepthFunction(depthFunction float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(depthFunction)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// DiffuseColor returns the DiffuseColor property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#diffusecolor
func (s *SimpleMaterial) DiffuseColor(diffuseColor *Color3) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(diffuseColor.JSObject())
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseColor sets the DiffuseColor property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#diffusecolor
func (s *SimpleMaterial) SetDiffuseColor(diffuseColor *Color3) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(diffuseColor.JSObject())
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// DiffuseTexture returns the DiffuseTexture property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#diffusetexture
func (s *SimpleMaterial) DiffuseTexture(diffuseTexture *BaseTexture) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(diffuseTexture.JSObject())
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetDiffuseTexture sets the DiffuseTexture property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#diffusetexture
func (s *SimpleMaterial) SetDiffuseTexture(diffuseTexture *BaseTexture) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(diffuseTexture.JSObject())
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// DisableDepthWrite returns the DisableDepthWrite property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#disabledepthwrite
func (s *SimpleMaterial) DisableDepthWrite(disableDepthWrite bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(disableDepthWrite)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetDisableDepthWrite sets the DisableDepthWrite property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#disabledepthwrite
func (s *SimpleMaterial) SetDisableDepthWrite(disableDepthWrite bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(disableDepthWrite)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// DisableLighting returns the DisableLighting property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#disablelighting
func (s *SimpleMaterial) DisableLighting(disableLighting bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(disableLighting)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetDisableLighting sets the DisableLighting property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#disablelighting
func (s *SimpleMaterial) SetDisableLighting(disableLighting bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(disableLighting)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// DoNotSerialize returns the DoNotSerialize property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#donotserialize
func (s *SimpleMaterial) DoNotSerialize(doNotSerialize bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(doNotSerialize)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetDoNotSerialize sets the DoNotSerialize property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#donotserialize
func (s *SimpleMaterial) SetDoNotSerialize(doNotSerialize bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(doNotSerialize)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// FillMode returns the FillMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#fillmode
func (s *SimpleMaterial) FillMode(fillMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(fillMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetFillMode sets the FillMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#fillmode
func (s *SimpleMaterial) SetFillMode(fillMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(fillMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// FogEnabled returns the FogEnabled property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#fogenabled
func (s *SimpleMaterial) FogEnabled(fogEnabled bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(fogEnabled)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetFogEnabled sets the FogEnabled property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#fogenabled
func (s *SimpleMaterial) SetFogEnabled(fogEnabled bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(fogEnabled)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// ForceDepthWrite returns the ForceDepthWrite property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#forcedepthwrite
func (s *SimpleMaterial) ForceDepthWrite(forceDepthWrite bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(forceDepthWrite)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetForceDepthWrite sets the ForceDepthWrite property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#forcedepthwrite
func (s *SimpleMaterial) SetForceDepthWrite(forceDepthWrite bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(forceDepthWrite)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// FresnelDirtyFlag returns the FresnelDirtyFlag property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#fresneldirtyflag
func (s *SimpleMaterial) FresnelDirtyFlag(FresnelDirtyFlag float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(FresnelDirtyFlag)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetFresnelDirtyFlag sets the FresnelDirtyFlag property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#fresneldirtyflag
func (s *SimpleMaterial) SetFresnelDirtyFlag(FresnelDirtyFlag float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(FresnelDirtyFlag)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// GetRenderTargetTextures returns the GetRenderTargetTextures property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#getrendertargettextures
func (s *SimpleMaterial) GetRenderTargetTextures(getRenderTargetTextures func()) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(getRenderTargetTextures)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetGetRenderTargetTextures sets the GetRenderTargetTextures property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#getrendertargettextures
func (s *SimpleMaterial) SetGetRenderTargetTextures(getRenderTargetTextures func()) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(getRenderTargetTextures)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// HasRenderTargetTextures returns the HasRenderTargetTextures property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#hasrendertargettextures
func (s *SimpleMaterial) HasRenderTargetTextures(hasRenderTargetTextures bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(hasRenderTargetTextures)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetHasRenderTargetTextures sets the HasRenderTargetTextures property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#hasrendertargettextures
func (s *SimpleMaterial) SetHasRenderTargetTextures(hasRenderTargetTextures bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(hasRenderTargetTextures)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// Id returns the Id property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#id
func (s *SimpleMaterial) Id(id string) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(id)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetId sets the Id property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#id
func (s *SimpleMaterial) SetId(id string) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(id)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#inspectablecustomproperties
func (s *SimpleMaterial) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(inspectableCustomProperties.JSObject())
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#inspectablecustomproperties
func (s *SimpleMaterial) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(inspectableCustomProperties.JSObject())
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// IsFrozen returns the IsFrozen property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#isfrozen
func (s *SimpleMaterial) IsFrozen(isFrozen bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(isFrozen)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetIsFrozen sets the IsFrozen property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#isfrozen
func (s *SimpleMaterial) SetIsFrozen(isFrozen bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(isFrozen)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// LightDirtyFlag returns the LightDirtyFlag property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#lightdirtyflag
func (s *SimpleMaterial) LightDirtyFlag(LightDirtyFlag float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(LightDirtyFlag)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetLightDirtyFlag sets the LightDirtyFlag property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#lightdirtyflag
func (s *SimpleMaterial) SetLightDirtyFlag(LightDirtyFlag float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(LightDirtyFlag)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// LineListDrawMode returns the LineListDrawMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#linelistdrawmode
func (s *SimpleMaterial) LineListDrawMode(LineListDrawMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(LineListDrawMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetLineListDrawMode sets the LineListDrawMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#linelistdrawmode
func (s *SimpleMaterial) SetLineListDrawMode(LineListDrawMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(LineListDrawMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// LineLoopDrawMode returns the LineLoopDrawMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#lineloopdrawmode
func (s *SimpleMaterial) LineLoopDrawMode(LineLoopDrawMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(LineLoopDrawMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetLineLoopDrawMode sets the LineLoopDrawMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#lineloopdrawmode
func (s *SimpleMaterial) SetLineLoopDrawMode(LineLoopDrawMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(LineLoopDrawMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// LineStripDrawMode returns the LineStripDrawMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#linestripdrawmode
func (s *SimpleMaterial) LineStripDrawMode(LineStripDrawMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(LineStripDrawMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetLineStripDrawMode sets the LineStripDrawMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#linestripdrawmode
func (s *SimpleMaterial) SetLineStripDrawMode(LineStripDrawMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(LineStripDrawMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// MaxSimultaneousLights returns the MaxSimultaneousLights property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#maxsimultaneouslights
func (s *SimpleMaterial) MaxSimultaneousLights(maxSimultaneousLights float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(maxSimultaneousLights)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetMaxSimultaneousLights sets the MaxSimultaneousLights property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#maxsimultaneouslights
func (s *SimpleMaterial) SetMaxSimultaneousLights(maxSimultaneousLights float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(maxSimultaneousLights)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#metadata
func (s *SimpleMaterial) Metadata(metadata interface{}) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(metadata)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#metadata
func (s *SimpleMaterial) SetMetadata(metadata interface{}) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(metadata)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// MiscDirtyFlag returns the MiscDirtyFlag property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#miscdirtyflag
func (s *SimpleMaterial) MiscDirtyFlag(MiscDirtyFlag float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(MiscDirtyFlag)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetMiscDirtyFlag sets the MiscDirtyFlag property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#miscdirtyflag
func (s *SimpleMaterial) SetMiscDirtyFlag(MiscDirtyFlag float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(MiscDirtyFlag)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#name
func (s *SimpleMaterial) Name(name string) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(name)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#name
func (s *SimpleMaterial) SetName(name string) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(name)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// NeedDepthPrePass returns the NeedDepthPrePass property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#needdepthprepass
func (s *SimpleMaterial) NeedDepthPrePass(needDepthPrePass bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(needDepthPrePass)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetNeedDepthPrePass sets the NeedDepthPrePass property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#needdepthprepass
func (s *SimpleMaterial) SetNeedDepthPrePass(needDepthPrePass bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(needDepthPrePass)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// OnBind returns the OnBind property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#onbind
func (s *SimpleMaterial) OnBind(onBind func()) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(onBind)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetOnBind sets the OnBind property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#onbind
func (s *SimpleMaterial) SetOnBind(onBind func()) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(onBind)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// OnBindObservable returns the OnBindObservable property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#onbindobservable
func (s *SimpleMaterial) OnBindObservable(onBindObservable *Observable) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(onBindObservable.JSObject())
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetOnBindObservable sets the OnBindObservable property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#onbindobservable
func (s *SimpleMaterial) SetOnBindObservable(onBindObservable *Observable) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(onBindObservable.JSObject())
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// OnCompiled returns the OnCompiled property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#oncompiled
func (s *SimpleMaterial) OnCompiled(onCompiled func()) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(onCompiled)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetOnCompiled sets the OnCompiled property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#oncompiled
func (s *SimpleMaterial) SetOnCompiled(onCompiled func()) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(onCompiled)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#ondispose
func (s *SimpleMaterial) OnDispose(onDispose func()) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(onDispose)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#ondispose
func (s *SimpleMaterial) SetOnDispose(onDispose func()) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(onDispose)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#ondisposeobservable
func (s *SimpleMaterial) OnDisposeObservable(onDisposeObservable *Observable) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(onDisposeObservable.JSObject())
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#ondisposeobservable
func (s *SimpleMaterial) SetOnDisposeObservable(onDisposeObservable *Observable) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(onDisposeObservable.JSObject())
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// OnError returns the OnError property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#onerror
func (s *SimpleMaterial) OnError(onError func()) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(onError)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetOnError sets the OnError property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#onerror
func (s *SimpleMaterial) SetOnError(onError func()) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(onError)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// OnUnBindObservable returns the OnUnBindObservable property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#onunbindobservable
func (s *SimpleMaterial) OnUnBindObservable(onUnBindObservable *Observable) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(onUnBindObservable.JSObject())
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetOnUnBindObservable sets the OnUnBindObservable property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#onunbindobservable
func (s *SimpleMaterial) SetOnUnBindObservable(onUnBindObservable *Observable) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(onUnBindObservable.JSObject())
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// PointFillMode returns the PointFillMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#pointfillmode
func (s *SimpleMaterial) PointFillMode(PointFillMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(PointFillMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetPointFillMode sets the PointFillMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#pointfillmode
func (s *SimpleMaterial) SetPointFillMode(PointFillMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(PointFillMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// PointListDrawMode returns the PointListDrawMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#pointlistdrawmode
func (s *SimpleMaterial) PointListDrawMode(PointListDrawMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(PointListDrawMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetPointListDrawMode sets the PointListDrawMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#pointlistdrawmode
func (s *SimpleMaterial) SetPointListDrawMode(PointListDrawMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(PointListDrawMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// PointSize returns the PointSize property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#pointsize
func (s *SimpleMaterial) PointSize(pointSize float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(pointSize)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetPointSize sets the PointSize property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#pointsize
func (s *SimpleMaterial) SetPointSize(pointSize float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(pointSize)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// PointsCloud returns the PointsCloud property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#pointscloud
func (s *SimpleMaterial) PointsCloud(pointsCloud bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(pointsCloud)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetPointsCloud sets the PointsCloud property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#pointscloud
func (s *SimpleMaterial) SetPointsCloud(pointsCloud bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(pointsCloud)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#reserveddatastore
func (s *SimpleMaterial) ReservedDataStore(reservedDataStore interface{}) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(reservedDataStore)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#reserveddatastore
func (s *SimpleMaterial) SetReservedDataStore(reservedDataStore interface{}) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(reservedDataStore)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SeparateCullingPass returns the SeparateCullingPass property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#separatecullingpass
func (s *SimpleMaterial) SeparateCullingPass(separateCullingPass bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(separateCullingPass)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetSeparateCullingPass sets the SeparateCullingPass property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#separatecullingpass
func (s *SimpleMaterial) SetSeparateCullingPass(separateCullingPass bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(separateCullingPass)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SideOrientation returns the SideOrientation property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#sideorientation
func (s *SimpleMaterial) SideOrientation(sideOrientation float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(sideOrientation)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetSideOrientation sets the SideOrientation property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#sideorientation
func (s *SimpleMaterial) SetSideOrientation(sideOrientation float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(sideOrientation)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// State returns the State property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#state
func (s *SimpleMaterial) State(state string) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(state)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetState sets the State property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#state
func (s *SimpleMaterial) SetState(state string) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(state)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// TextureDirtyFlag returns the TextureDirtyFlag property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#texturedirtyflag
func (s *SimpleMaterial) TextureDirtyFlag(TextureDirtyFlag float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(TextureDirtyFlag)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetTextureDirtyFlag sets the TextureDirtyFlag property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#texturedirtyflag
func (s *SimpleMaterial) SetTextureDirtyFlag(TextureDirtyFlag float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(TextureDirtyFlag)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// TriangleFanDrawMode returns the TriangleFanDrawMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#trianglefandrawmode
func (s *SimpleMaterial) TriangleFanDrawMode(TriangleFanDrawMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(TriangleFanDrawMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetTriangleFanDrawMode sets the TriangleFanDrawMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#trianglefandrawmode
func (s *SimpleMaterial) SetTriangleFanDrawMode(TriangleFanDrawMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(TriangleFanDrawMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// TriangleFillMode returns the TriangleFillMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#trianglefillmode
func (s *SimpleMaterial) TriangleFillMode(TriangleFillMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(TriangleFillMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetTriangleFillMode sets the TriangleFillMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#trianglefillmode
func (s *SimpleMaterial) SetTriangleFillMode(TriangleFillMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(TriangleFillMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// TriangleStripDrawMode returns the TriangleStripDrawMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#trianglestripdrawmode
func (s *SimpleMaterial) TriangleStripDrawMode(TriangleStripDrawMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(TriangleStripDrawMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetTriangleStripDrawMode sets the TriangleStripDrawMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#trianglestripdrawmode
func (s *SimpleMaterial) SetTriangleStripDrawMode(TriangleStripDrawMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(TriangleStripDrawMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#uniqueid
func (s *SimpleMaterial) UniqueId(uniqueId float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(uniqueId)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#uniqueid
func (s *SimpleMaterial) SetUniqueId(uniqueId float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(uniqueId)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// WireFrameFillMode returns the WireFrameFillMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#wireframefillmode
func (s *SimpleMaterial) WireFrameFillMode(WireFrameFillMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(WireFrameFillMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetWireFrameFillMode sets the WireFrameFillMode property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#wireframefillmode
func (s *SimpleMaterial) SetWireFrameFillMode(WireFrameFillMode float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(WireFrameFillMode)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// Wireframe returns the Wireframe property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#wireframe
func (s *SimpleMaterial) Wireframe(wireframe bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(wireframe)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetWireframe sets the Wireframe property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#wireframe
func (s *SimpleMaterial) SetWireframe(wireframe bool) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(wireframe)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// ZOffset returns the ZOffset property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#zoffset
func (s *SimpleMaterial) ZOffset(zOffset float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(zOffset)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

// SetZOffset sets the ZOffset property of class SimpleMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.simplematerial#zoffset
func (s *SimpleMaterial) SetZOffset(zOffset float64) *SimpleMaterial {
	p := ba.ctx.Get("SimpleMaterial").New(zOffset)
	return SimpleMaterialFromJSObject(p, ba.ctx)
}

*/
