// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TextureAssetTask represents a babylon.js TextureAssetTask.
// Define a task used by AssetsManager to load 2D textures
type TextureAssetTask struct{ *AbstractAssetTask }

// JSObject returns the underlying js.Value.
func (t *TextureAssetTask) JSObject() js.Value { return t.p }

// TextureAssetTask returns a TextureAssetTask JavaScript class.
func (ba *Babylon) TextureAssetTask() *TextureAssetTask {
	p := ba.ctx.Get("TextureAssetTask")
	return TextureAssetTaskFromJSObject(p)
}

// TextureAssetTaskFromJSObject returns a wrapped TextureAssetTask JavaScript class.
func TextureAssetTaskFromJSObject(p js.Value) *TextureAssetTask {
	return &TextureAssetTask{AbstractAssetTaskFromJSObject(p)}
}

// NewTextureAssetTaskOpts contains optional parameters for NewTextureAssetTask.
type NewTextureAssetTaskOpts struct {
	NoMipmap *JSBool

	InvertY *JSBool

	SamplingMode *JSFloat64
}

// NewTextureAssetTask returns a new TextureAssetTask object.
//
// https://doc.babylonjs.com/api/classes/babylon.textureassettask
func (ba *Babylon) NewTextureAssetTask(name string, url string, opts *NewTextureAssetTaskOpts) *TextureAssetTask {
	if opts == nil {
		opts = &NewTextureAssetTaskOpts{}
	}

	p := ba.ctx.Get("TextureAssetTask").New(name, url, opts.NoMipmap.JSObject(), opts.InvertY.JSObject(), opts.SamplingMode.JSObject())
	return TextureAssetTaskFromJSObject(p)
}

// TODO: methods
