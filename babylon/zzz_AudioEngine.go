// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// AudioEngine represents a babylon.js AudioEngine.
// This represents the default audio engine used in babylon.
// It is responsible to play, synchronize and analyse sounds throughout the  application.
//
// See: http://doc.babylonjs.com/how_to/playing_sounds_and_music
type AudioEngine struct{ p js.Value }

// JSObject returns the underlying js.Value.
func (a *AudioEngine) JSObject() js.Value { return a.p }

// AudioEngine returns a AudioEngine JavaScript class.
func (ba *Babylon) AudioEngine() *AudioEngine {
	p := ba.ctx.Get("AudioEngine")
	return AudioEngineFromJSObject(p)
}

// AudioEngineFromJSObject returns a wrapped AudioEngine JavaScript class.
func AudioEngineFromJSObject(p js.Value) *AudioEngine {
	return &AudioEngine{p: p}
}

// NewAudioEngineOpts contains optional parameters for NewAudioEngine.
type NewAudioEngineOpts struct {
	HostElement *JSValue
}

// NewAudioEngine returns a new AudioEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.audioengine
func (ba *Babylon) NewAudioEngine(opts *NewAudioEngineOpts) *AudioEngine {
	if opts == nil {
		opts = &NewAudioEngineOpts{}
	}

	p := ba.ctx.Get("AudioEngine").New(opts.HostElement.JSObject())
	return AudioEngineFromJSObject(p)
}

// TODO: methods
