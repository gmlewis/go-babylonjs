// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Gamepad represents a babylon.js Gamepad.
// Represents a gamepad
type Gamepad struct{ p js.Value }

// JSObject returns the underlying js.Value.
func (g *Gamepad) JSObject() js.Value { return g.p }

// Gamepad returns a Gamepad JavaScript class.
func (ba *Babylon) Gamepad() *Gamepad {
	p := ba.ctx.Get("Gamepad")
	return GamepadFromJSObject(p)
}

// GamepadFromJSObject returns a wrapped Gamepad JavaScript class.
func GamepadFromJSObject(p js.Value) *Gamepad {
	return &Gamepad{p: p}
}

// NewGamepadOpts contains optional parameters for NewGamepad.
type NewGamepadOpts struct {
	LeftStickX *JSFloat64

	LeftStickY *JSFloat64

	RightStickX *JSFloat64

	RightStickY *JSFloat64
}

// NewGamepad returns a new Gamepad object.
//
// https://doc.babylonjs.com/api/classes/babylon.gamepad
func (ba *Babylon) NewGamepad(id string, index float64, browserGamepad interface{}, opts *NewGamepadOpts) *Gamepad {
	if opts == nil {
		opts = &NewGamepadOpts{}
	}

	p := ba.ctx.Get("Gamepad").New(id, index, browserGamepad, opts.LeftStickX, opts.LeftStickY, opts.RightStickX, opts.RightStickY)
	return GamepadFromJSObject(p)
}

// TODO: methods
