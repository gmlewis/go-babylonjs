// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IDataBuffer represents a babylon.js IDataBuffer.
// Interface for a data buffer
type IDataBuffer struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IDataBuffer) JSObject() js.Value { return i.p }

// IDataBuffer returns a IDataBuffer JavaScript class.
func (ba *Babylon) IDataBuffer() *IDataBuffer {
	p := ba.ctx.Get("IDataBuffer")
	return IDataBufferFromJSObject(p, ba.ctx)
}

// IDataBufferFromJSObject returns a wrapped IDataBuffer JavaScript class.
func IDataBufferFromJSObject(p js.Value, ctx js.Value) *IDataBuffer {
	return &IDataBuffer{p: p, ctx: ctx}
}

// IDataBufferArrayToJSArray returns a JavaScript Array for the wrapped array.
func IDataBufferArrayToJSArray(array []*IDataBuffer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// ReadAsync calls the ReadAsync method on the IDataBuffer object.
//
// https://doc.babylonjs.com/api/classes/babylon.idatabuffer#readasync
func (i *IDataBuffer) ReadAsync(byteOffset float64, byteLength float64) *Promise {

	args := make([]interface{}, 0, 2+0)

	args = append(args, byteOffset)
	args = append(args, byteLength)

	retVal := i.p.Call("readAsync", args...)
	return PromiseFromJSObject(retVal, i.ctx)
}

/*

// ByteLength returns the ByteLength property of class IDataBuffer.
//
// https://doc.babylonjs.com/api/classes/babylon.idatabuffer#bytelength
func (i *IDataBuffer) ByteLength(byteLength float64) *IDataBuffer {
	p := ba.ctx.Get("IDataBuffer").New(byteLength)
	return IDataBufferFromJSObject(p, ba.ctx)
}

// SetByteLength sets the ByteLength property of class IDataBuffer.
//
// https://doc.babylonjs.com/api/classes/babylon.idatabuffer#bytelength
func (i *IDataBuffer) SetByteLength(byteLength float64) *IDataBuffer {
	p := ba.ctx.Get("IDataBuffer").New(byteLength)
	return IDataBufferFromJSObject(p, ba.ctx)
}

*/
