// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Deferred represents a babylon.js Deferred.
// Wrapper class for promise with external resolve and reject.
type Deferred struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *Deferred) JSObject() js.Value { return d.p }

// Deferred returns a Deferred JavaScript class.
func (ba *Babylon) Deferred() *Deferred {
	p := ba.ctx.Get("Deferred")
	return DeferredFromJSObject(p, ba.ctx)
}

// DeferredFromJSObject returns a wrapped Deferred JavaScript class.
func DeferredFromJSObject(p js.Value, ctx js.Value) *Deferred {
	return &Deferred{p: p, ctx: ctx}
}

// NewDeferred returns a new Deferred object.
//
// https://doc.babylonjs.com/api/classes/babylon.deferred
func (ba *Babylon) NewDeferred() *Deferred {
	p := ba.ctx.Get("Deferred").New()
	return DeferredFromJSObject(p, ba.ctx)
}

// TODO: methods
