// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Deferred represents a babylon.js Deferred.
// Wrapper class for promise with external resolve and reject.
type Deferred struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *Deferred) JSObject() js.Value { return d.p }

// Deferred returns a Deferred JavaScript class.
func (ba *Babylon) Deferred() *Deferred {
	p := ba.ctx.Get("Deferred")
	return DeferredFromJSObject(p, ba.ctx)
}

// DeferredFromJSObject returns a wrapped Deferred JavaScript class.
func DeferredFromJSObject(p js.Value, ctx js.Value) *Deferred {
	return &Deferred{p: p, ctx: ctx}
}

// DeferredArrayToJSArray returns a JavaScript Array for the wrapped array.
func DeferredArrayToJSArray(array []*Deferred) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDeferred returns a new Deferred object.
//
// https://doc.babylonjs.com/api/classes/babylon.deferred#constructor
func (ba *Babylon) NewDeferred() *Deferred {

	args := make([]interface{}, 0, 0+0)

	p := ba.ctx.Get("Deferred").New(args...)
	return DeferredFromJSObject(p, ba.ctx)
}

// Promise returns the Promise property of class Deferred.
//
// https://doc.babylonjs.com/api/classes/babylon.deferred#promise
func (d *Deferred) Promise() *Promise {
	retVal := d.p.Get("promise")
	return PromiseFromJSObject(retVal, d.ctx)
}

// SetPromise sets the Promise property of class Deferred.
//
// https://doc.babylonjs.com/api/classes/babylon.deferred#promise
func (d *Deferred) SetPromise(promise *Promise) *Deferred {
	d.p.Set("promise", promise.JSObject())
	return d
}

// Reject returns the Reject property of class Deferred.
//
// https://doc.babylonjs.com/api/classes/babylon.deferred#reject
func (d *Deferred) Reject() js.Value {
	retVal := d.p.Get("reject")
	return retVal
}

// SetReject sets the Reject property of class Deferred.
//
// https://doc.babylonjs.com/api/classes/babylon.deferred#reject
func (d *Deferred) SetReject(reject JSFunc) *Deferred {
	d.p.Set("reject", js.FuncOf(reject))
	return d
}

// Resolve returns the Resolve property of class Deferred.
//
// https://doc.babylonjs.com/api/classes/babylon.deferred#resolve
func (d *Deferred) Resolve() js.Value {
	retVal := d.p.Get("resolve")
	return retVal
}

// SetResolve sets the Resolve property of class Deferred.
//
// https://doc.babylonjs.com/api/classes/babylon.deferred#resolve
func (d *Deferred) SetResolve(resolve JSFunc) *Deferred {
	d.p.Set("resolve", js.FuncOf(resolve))
	return d
}
