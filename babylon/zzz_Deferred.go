// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Deferred represents a babylon.js Deferred.
// Wrapper class for promise with external resolve and reject.
type Deferred struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *Deferred) JSObject() js.Value { return d.p }

// Deferred returns a Deferred JavaScript class.
func (ba *Babylon) Deferred() *Deferred {
	p := ba.ctx.Get("Deferred")
	return DeferredFromJSObject(p, ba.ctx)
}

// DeferredFromJSObject returns a wrapped Deferred JavaScript class.
func DeferredFromJSObject(p js.Value, ctx js.Value) *Deferred {
	return &Deferred{p: p, ctx: ctx}
}

// DeferredArrayToJSArray returns a JavaScript Array for the wrapped array.
func DeferredArrayToJSArray(array []*Deferred) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDeferred returns a new Deferred object.
//
// https://doc.babylonjs.com/api/classes/babylon.deferred
func (ba *Babylon) NewDeferred() *Deferred {

	args := make([]interface{}, 0, 0+0)

	p := ba.ctx.Get("Deferred").New(args...)
	return DeferredFromJSObject(p, ba.ctx)
}

/*

// Promise returns the Promise property of class Deferred.
//
// https://doc.babylonjs.com/api/classes/babylon.deferred#promise
func (d *Deferred) Promise(promise *Promise) *Deferred {
	p := ba.ctx.Get("Deferred").New(promise.JSObject())
	return DeferredFromJSObject(p, ba.ctx)
}

// SetPromise sets the Promise property of class Deferred.
//
// https://doc.babylonjs.com/api/classes/babylon.deferred#promise
func (d *Deferred) SetPromise(promise *Promise) *Deferred {
	p := ba.ctx.Get("Deferred").New(promise.JSObject())
	return DeferredFromJSObject(p, ba.ctx)
}

// Reject returns the Reject property of class Deferred.
//
// https://doc.babylonjs.com/api/classes/babylon.deferred#reject
func (d *Deferred) Reject(reject func()) *Deferred {
	p := ba.ctx.Get("Deferred").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {reject(); return nil}))
	return DeferredFromJSObject(p, ba.ctx)
}

// SetReject sets the Reject property of class Deferred.
//
// https://doc.babylonjs.com/api/classes/babylon.deferred#reject
func (d *Deferred) SetReject(reject func()) *Deferred {
	p := ba.ctx.Get("Deferred").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {reject(); return nil}))
	return DeferredFromJSObject(p, ba.ctx)
}

// Resolve returns the Resolve property of class Deferred.
//
// https://doc.babylonjs.com/api/classes/babylon.deferred#resolve
func (d *Deferred) Resolve(resolve func()) *Deferred {
	p := ba.ctx.Get("Deferred").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {resolve(); return nil}))
	return DeferredFromJSObject(p, ba.ctx)
}

// SetResolve sets the Resolve property of class Deferred.
//
// https://doc.babylonjs.com/api/classes/babylon.deferred#resolve
func (d *Deferred) SetResolve(resolve func()) *Deferred {
	p := ba.ctx.Get("Deferred").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {resolve(); return nil}))
	return DeferredFromJSObject(p, ba.ctx)
}

*/
