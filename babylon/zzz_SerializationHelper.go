// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SerializationHelper represents a babylon.js SerializationHelper.
// Class used to help serialization objects
type SerializationHelper struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SerializationHelper) JSObject() js.Value { return s.p }

// SerializationHelper returns a SerializationHelper JavaScript class.
func (ba *Babylon) SerializationHelper() *SerializationHelper {
	p := ba.ctx.Get("SerializationHelper")
	return SerializationHelperFromJSObject(p, ba.ctx)
}

// SerializationHelperFromJSObject returns a wrapped SerializationHelper JavaScript class.
func SerializationHelperFromJSObject(p js.Value, ctx js.Value) *SerializationHelper {
	return &SerializationHelper{p: p, ctx: ctx}
}

// SerializationHelperArrayToJSArray returns a JavaScript Array for the wrapped array.
func SerializationHelperArrayToJSArray(array []*SerializationHelper) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// AppendSerializedAnimations calls the AppendSerializedAnimations method on the SerializationHelper object.
//
// https://doc.babylonjs.com/api/classes/babylon.serializationhelper#appendserializedanimations
func (s *SerializationHelper) AppendSerializedAnimations(source *IAnimatable, destination interface{}) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, source.JSObject())
	args = append(args, destination)

	s.p.Call("AppendSerializedAnimations", args...)
}
