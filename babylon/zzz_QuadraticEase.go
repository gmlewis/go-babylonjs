// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// QuadraticEase represents a babylon.js QuadraticEase.
// Easing function with a power of 2 shape (see link below).
//
// See: https://easings.net/#easeInQuad
// See: http://doc.babylonjs.com/babylon101/animations#easing-functions
type QuadraticEase struct {
	*EasingFunction
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (q *QuadraticEase) JSObject() js.Value { return q.p }

// QuadraticEase returns a QuadraticEase JavaScript class.
func (ba *Babylon) QuadraticEase() *QuadraticEase {
	p := ba.ctx.Get("QuadraticEase")
	return QuadraticEaseFromJSObject(p, ba.ctx)
}

// QuadraticEaseFromJSObject returns a wrapped QuadraticEase JavaScript class.
func QuadraticEaseFromJSObject(p js.Value, ctx js.Value) *QuadraticEase {
	return &QuadraticEase{EasingFunction: EasingFunctionFromJSObject(p, ctx), ctx: ctx}
}

// QuadraticEaseArrayToJSArray returns a JavaScript Array for the wrapped array.
func QuadraticEaseArrayToJSArray(array []*QuadraticEase) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

 */
