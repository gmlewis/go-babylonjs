// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ValueCondition represents a babylon.js ValueCondition.
// Defines specific conditional operators as extensions of Condition
type ValueCondition struct{ *Condition }

// JSObject returns the underlying js.Value.
func (v *ValueCondition) JSObject() js.Value { return v.p }

// ValueCondition returns a ValueCondition JavaScript class.
func (b *Babylon) ValueCondition() *ValueCondition {
	p := b.ctx.Get("ValueCondition")
	return ValueConditionFromJSObject(p)
}

// ValueConditionFromJSObject returns a wrapped ValueCondition JavaScript class.
func ValueConditionFromJSObject(p js.Value) *ValueCondition {
	return &ValueCondition{ConditionFromJSObject(p)}
}

// NewValueCondition returns a new ValueCondition object.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition
func (b *Babylon) NewValueCondition(todo parameters) *ValueCondition {
	p := b.ctx.Get("ValueCondition").New(todo)
	return ValueConditionFromJSObject(p)
}

// TODO: methods
