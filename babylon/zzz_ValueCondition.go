// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ValueCondition represents a babylon.js ValueCondition.
// Defines specific conditional operators as extensions of Condition
type ValueCondition struct {
	*Condition
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *ValueCondition) JSObject() js.Value { return v.p }

// ValueCondition returns a ValueCondition JavaScript class.
func (ba *Babylon) ValueCondition() *ValueCondition {
	p := ba.ctx.Get("ValueCondition")
	return ValueConditionFromJSObject(p, ba.ctx)
}

// ValueConditionFromJSObject returns a wrapped ValueCondition JavaScript class.
func ValueConditionFromJSObject(p js.Value, ctx js.Value) *ValueCondition {
	return &ValueCondition{Condition: ConditionFromJSObject(p, ctx), ctx: ctx}
}

// ValueConditionArrayToJSArray returns a JavaScript Array for the wrapped array.
func ValueConditionArrayToJSArray(array []*ValueCondition) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewValueConditionOpts contains optional parameters for NewValueCondition.
type NewValueConditionOpts struct {
	Operator *float64
}

// NewValueCondition returns a new ValueCondition object.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition
func (ba *Babylon) NewValueCondition(actionManager *ActionManager, target JSObject, propertyPath string, value JSObject, opts *NewValueConditionOpts) *ValueCondition {
	if opts == nil {
		opts = &NewValueConditionOpts{}
	}

	args := make([]interface{}, 0, 4+1)

	args = append(args, actionManager.JSObject())
	args = append(args, target.JSObject())
	args = append(args, propertyPath)
	args = append(args, value.JSObject())

	if opts.Operator == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Operator)
	}

	p := ba.ctx.Get("ValueCondition").New(args...)
	return ValueConditionFromJSObject(p, ba.ctx)
}

// GetOperatorName calls the GetOperatorName method on the ValueCondition object.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#getoperatorname
func (v *ValueCondition) GetOperatorName(operator float64) string {

	args := make([]interface{}, 0, 1+0)

	args = append(args, operator)

	retVal := v.p.Call("GetOperatorName", args...)
	return retVal.String()
}

// IsValid calls the IsValid method on the ValueCondition object.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#isvalid
func (v *ValueCondition) IsValid() bool {

	retVal := v.p.Call("isValid")
	return retVal.Bool()
}

// Serialize calls the Serialize method on the ValueCondition object.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#serialize
func (v *ValueCondition) Serialize() js.Value {

	retVal := v.p.Call("serialize")
	return retVal
}

// IsDifferent returns the IsDifferent property of class ValueCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#isdifferent
func (v *ValueCondition) IsDifferent() float64 {
	retVal := v.p.Get("IsDifferent")
	return retVal.Float()
}

// SetIsDifferent sets the IsDifferent property of class ValueCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#isdifferent
func (v *ValueCondition) SetIsDifferent(IsDifferent float64) *ValueCondition {
	v.p.Set("IsDifferent", IsDifferent)
	return v
}

// IsEqual returns the IsEqual property of class ValueCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#isequal
func (v *ValueCondition) IsEqual() float64 {
	retVal := v.p.Get("IsEqual")
	return retVal.Float()
}

// SetIsEqual sets the IsEqual property of class ValueCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#isequal
func (v *ValueCondition) SetIsEqual(IsEqual float64) *ValueCondition {
	v.p.Set("IsEqual", IsEqual)
	return v
}

// IsGreater returns the IsGreater property of class ValueCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#isgreater
func (v *ValueCondition) IsGreater() float64 {
	retVal := v.p.Get("IsGreater")
	return retVal.Float()
}

// SetIsGreater sets the IsGreater property of class ValueCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#isgreater
func (v *ValueCondition) SetIsGreater(IsGreater float64) *ValueCondition {
	v.p.Set("IsGreater", IsGreater)
	return v
}

// IsLesser returns the IsLesser property of class ValueCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#islesser
func (v *ValueCondition) IsLesser() float64 {
	retVal := v.p.Get("IsLesser")
	return retVal.Float()
}

// SetIsLesser sets the IsLesser property of class ValueCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#islesser
func (v *ValueCondition) SetIsLesser(IsLesser float64) *ValueCondition {
	v.p.Set("IsLesser", IsLesser)
	return v
}

// Operator returns the Operator property of class ValueCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#operator
func (v *ValueCondition) Operator() float64 {
	retVal := v.p.Get("operator")
	return retVal.Float()
}

// SetOperator sets the Operator property of class ValueCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#operator
func (v *ValueCondition) SetOperator(operator float64) *ValueCondition {
	v.p.Set("operator", operator)
	return v
}

// PropertyPath returns the PropertyPath property of class ValueCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#propertypath
func (v *ValueCondition) PropertyPath() string {
	retVal := v.p.Get("propertyPath")
	return retVal.String()
}

// SetPropertyPath sets the PropertyPath property of class ValueCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#propertypath
func (v *ValueCondition) SetPropertyPath(propertyPath string) *ValueCondition {
	v.p.Set("propertyPath", propertyPath)
	return v
}

// Value returns the Value property of class ValueCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#value
func (v *ValueCondition) Value() js.Value {
	retVal := v.p.Get("value")
	return retVal
}

// SetValue sets the Value property of class ValueCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition#value
func (v *ValueCondition) SetValue(value JSObject) *ValueCondition {
	v.p.Set("value", value.JSObject())
	return v
}
