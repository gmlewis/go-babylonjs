// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ValueCondition represents a babylon.js ValueCondition.
// Defines specific conditional operators as extensions of Condition
type ValueCondition struct{ *Condition }

// JSObject returns the underlying js.Value.
func (v *ValueCondition) JSObject() js.Value { return v.p }

// ValueCondition returns a ValueCondition JavaScript class.
func (ba *Babylon) ValueCondition() *ValueCondition {
	p := ba.ctx.Get("ValueCondition")
	return ValueConditionFromJSObject(p)
}

// ValueConditionFromJSObject returns a wrapped ValueCondition JavaScript class.
func ValueConditionFromJSObject(p js.Value) *ValueCondition {
	return &ValueCondition{ConditionFromJSObject(p)}
}

// NewValueConditionOpts contains optional parameters for NewValueCondition.
type NewValueConditionOpts struct {
	Operator *JSFloat64
}

// NewValueCondition returns a new ValueCondition object.
//
// https://doc.babylonjs.com/api/classes/babylon.valuecondition
func (ba *Babylon) NewValueCondition(actionManager *ActionManager, target interface{}, propertyPath string, value interface{}, opts *NewValueConditionOpts) *ValueCondition {
	if opts == nil {
		opts = &NewValueConditionOpts{}
	}

	p := ba.ctx.Get("ValueCondition").New(actionManager.JSObject(), target, propertyPath, value, opts.Operator.JSObject())
	return ValueConditionFromJSObject(p)
}

// TODO: methods
