// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// AsciiArtPostProcess represents a babylon.js AsciiArtPostProcess.
// AsciiArtPostProcess helps rendering everithing in Ascii Art.
//
// Simmply add it to your scene and let the nerd that lives in you have fun.
// Example usage: var pp = new AsciiArtPostProcess(&quot;myAscii&quot;, &quot;20px Monospace&quot;, camera);
type AsciiArtPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *AsciiArtPostProcess) JSObject() js.Value { return a.p }

// AsciiArtPostProcess returns a AsciiArtPostProcess JavaScript class.
func (ba *Babylon) AsciiArtPostProcess() *AsciiArtPostProcess {
	p := ba.ctx.Get("AsciiArtPostProcess")
	return AsciiArtPostProcessFromJSObject(p, ba.ctx)
}

// AsciiArtPostProcessFromJSObject returns a wrapped AsciiArtPostProcess JavaScript class.
func AsciiArtPostProcessFromJSObject(p js.Value, ctx js.Value) *AsciiArtPostProcess {
	return &AsciiArtPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// AsciiArtPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func AsciiArtPostProcessArrayToJSArray(array []*AsciiArtPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewAsciiArtPostProcessOpts contains optional parameters for NewAsciiArtPostProcess.
type NewAsciiArtPostProcessOpts struct {
	Options *string
}

// NewAsciiArtPostProcess returns a new AsciiArtPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.asciiartpostprocess#constructor
func (ba *Babylon) NewAsciiArtPostProcess(name string, camera *Camera, opts *NewAsciiArtPostProcessOpts) *AsciiArtPostProcess {
	if opts == nil {
		opts = &NewAsciiArtPostProcessOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, camera.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Options)
	}

	p := ba.ctx.Get("AsciiArtPostProcess").New(args...)
	return AsciiArtPostProcessFromJSObject(p, ba.ctx)
}

// MixToNormal returns the MixToNormal property of class AsciiArtPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.asciiartpostprocess#mixtonormal
func (a *AsciiArtPostProcess) MixToNormal() float64 {
	retVal := a.p.Get("mixToNormal")
	return retVal.Float()
}

// SetMixToNormal sets the MixToNormal property of class AsciiArtPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.asciiartpostprocess#mixtonormal
func (a *AsciiArtPostProcess) SetMixToNormal(mixToNormal float64) *AsciiArtPostProcess {
	a.p.Set("mixToNormal", mixToNormal)
	return a
}

// MixToTile returns the MixToTile property of class AsciiArtPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.asciiartpostprocess#mixtotile
func (a *AsciiArtPostProcess) MixToTile() float64 {
	retVal := a.p.Get("mixToTile")
	return retVal.Float()
}

// SetMixToTile sets the MixToTile property of class AsciiArtPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.asciiartpostprocess#mixtotile
func (a *AsciiArtPostProcess) SetMixToTile(mixToTile float64) *AsciiArtPostProcess {
	a.p.Set("mixToTile", mixToTile)
	return a
}
