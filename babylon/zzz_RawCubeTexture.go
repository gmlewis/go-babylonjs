// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RawCubeTexture represents a babylon.js RawCubeTexture.
// Raw cube texture where the raw buffers are passed in
type RawCubeTexture struct{ *CubeTexture }

// JSObject returns the underlying js.Value.
func (r *RawCubeTexture) JSObject() js.Value { return r.p }

// RawCubeTexture returns a RawCubeTexture JavaScript class.
func (ba *Babylon) RawCubeTexture() *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture")
	return RawCubeTextureFromJSObject(p)
}

// RawCubeTextureFromJSObject returns a wrapped RawCubeTexture JavaScript class.
func RawCubeTextureFromJSObject(p js.Value) *RawCubeTexture {
	return &RawCubeTexture{CubeTextureFromJSObject(p)}
}

// NewRawCubeTextureOpts contains optional parameters for NewRawCubeTexture.
type NewRawCubeTextureOpts struct {
	Format *JSFloat64

	Type *JSFloat64

	GenerateMipMaps *JSBool

	InvertY *JSBool

	SamplingMode *JSFloat64

	Compression *JSString
}

// NewRawCubeTexture returns a new RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture
func (ba *Babylon) NewRawCubeTexture(scene *Scene, data js.Value, size float64, opts *NewRawCubeTextureOpts) *RawCubeTexture {
	if opts == nil {
		opts = &NewRawCubeTextureOpts{}
	}

	p := ba.ctx.Get("RawCubeTexture").New(scene.JSObject(), data, size, opts.Format, opts.Type, opts.GenerateMipMaps, opts.InvertY, opts.SamplingMode, opts.Compression)
	return RawCubeTextureFromJSObject(p)
}

// TODO: methods
