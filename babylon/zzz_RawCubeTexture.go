// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RawCubeTexture represents a babylon.js RawCubeTexture.
// Raw cube texture where the raw buffers are passed in
type RawCubeTexture struct {
	*CubeTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RawCubeTexture) JSObject() js.Value { return r.p }

// RawCubeTexture returns a RawCubeTexture JavaScript class.
func (ba *Babylon) RawCubeTexture() *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture")
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// RawCubeTextureFromJSObject returns a wrapped RawCubeTexture JavaScript class.
func RawCubeTextureFromJSObject(p js.Value, ctx js.Value) *RawCubeTexture {
	return &RawCubeTexture{CubeTexture: CubeTextureFromJSObject(p, ctx), ctx: ctx}
}

// RawCubeTextureArrayToJSArray returns a JavaScript Array for the wrapped array.
func RawCubeTextureArrayToJSArray(array []*RawCubeTexture) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewRawCubeTextureOpts contains optional parameters for NewRawCubeTexture.
type NewRawCubeTextureOpts struct {
	Format          *float64
	Type            *float64
	GenerateMipMaps *bool
	InvertY         *bool
	SamplingMode    *float64
	Compression     *string
}

// NewRawCubeTexture returns a new RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture
func (ba *Babylon) NewRawCubeTexture(scene *Scene, data js.Value, size float64, opts *NewRawCubeTextureOpts) *RawCubeTexture {
	if opts == nil {
		opts = &NewRawCubeTextureOpts{}
	}

	args := make([]interface{}, 0, 3+6)

	args = append(args, scene.JSObject())
	args = append(args, data)
	args = append(args, size)

	if opts.Format == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Format)
	}
	if opts.Type == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Type)
	}
	if opts.GenerateMipMaps == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateMipMaps)
	}
	if opts.InvertY == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.InvertY)
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Compression == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Compression)
	}

	p := ba.ctx.Get("RawCubeTexture").New(args...)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// Clone calls the Clone method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#clone
func (r *RawCubeTexture) Clone() *CubeTexture {

	retVal := r.p.Call("clone")
	return CubeTextureFromJSObject(retVal, r.ctx)
}

// RawCubeTextureCreateFromImagesOpts contains optional parameters for RawCubeTexture.CreateFromImages.
type RawCubeTextureCreateFromImagesOpts struct {
	NoMipmap *bool
}

// CreateFromImages calls the CreateFromImages method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#createfromimages
func (r *RawCubeTexture) CreateFromImages(files string, scene *Scene, opts *RawCubeTextureCreateFromImagesOpts) *CubeTexture {
	if opts == nil {
		opts = &RawCubeTextureCreateFromImagesOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, files)
	args = append(args, scene.JSObject())

	if opts.NoMipmap == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoMipmap)
	}

	retVal := r.p.Call("CreateFromImages", args...)
	return CubeTextureFromJSObject(retVal, r.ctx)
}

// RawCubeTextureCreateFromPrefilteredDataOpts contains optional parameters for RawCubeTexture.CreateFromPrefilteredData.
type RawCubeTextureCreateFromPrefilteredDataOpts struct {
	ForcedExtension   *interface{}
	CreatePolynomials *bool
}

// CreateFromPrefilteredData calls the CreateFromPrefilteredData method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#createfromprefiltereddata
func (r *RawCubeTexture) CreateFromPrefilteredData(url string, scene *Scene, opts *RawCubeTextureCreateFromPrefilteredDataOpts) *CubeTexture {
	if opts == nil {
		opts = &RawCubeTextureCreateFromPrefilteredDataOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, url)
	args = append(args, scene.JSObject())

	if opts.ForcedExtension == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForcedExtension)
	}
	if opts.CreatePolynomials == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CreatePolynomials)
	}

	retVal := r.p.Call("CreateFromPrefilteredData", args...)
	return CubeTextureFromJSObject(retVal, r.ctx)
}

// RawCubeTextureDelayLoadOpts contains optional parameters for RawCubeTexture.DelayLoad.
type RawCubeTextureDelayLoadOpts struct {
	ForcedExtension *string
}

// DelayLoad calls the DelayLoad method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#delayload
func (r *RawCubeTexture) DelayLoad(opts *RawCubeTextureDelayLoadOpts) {
	if opts == nil {
		opts = &RawCubeTextureDelayLoadOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForcedExtension == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForcedExtension)
	}

	r.p.Call("delayLoad", args...)
}

// Dispose calls the Dispose method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#dispose
func (r *RawCubeTexture) Dispose() {

	r.p.Call("dispose")
}

// GetBaseSize calls the GetBaseSize method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#getbasesize
func (r *RawCubeTexture) GetBaseSize() *ISize {

	retVal := r.p.Call("getBaseSize")
	return ISizeFromJSObject(retVal, r.ctx)
}

// GetClassName calls the GetClassName method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#getclassname
func (r *RawCubeTexture) GetClassName() string {

	retVal := r.p.Call("getClassName")
	return retVal.String()
}

// GetInternalTexture calls the GetInternalTexture method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#getinternaltexture
func (r *RawCubeTexture) GetInternalTexture() *InternalTexture {

	retVal := r.p.Call("getInternalTexture")
	return InternalTextureFromJSObject(retVal, r.ctx)
}

// GetReflectionTextureMatrix calls the GetReflectionTextureMatrix method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#getreflectiontexturematrix
func (r *RawCubeTexture) GetReflectionTextureMatrix() *Matrix {

	retVal := r.p.Call("getReflectionTextureMatrix")
	return MatrixFromJSObject(retVal, r.ctx)
}

// GetScene calls the GetScene method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#getscene
func (r *RawCubeTexture) GetScene() *Scene {

	retVal := r.p.Call("getScene")
	return SceneFromJSObject(retVal, r.ctx)
}

// GetSize calls the GetSize method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#getsize
func (r *RawCubeTexture) GetSize() *ISize {

	retVal := r.p.Call("getSize")
	return ISizeFromJSObject(retVal, r.ctx)
}

// GetTextureMatrix calls the GetTextureMatrix method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#gettexturematrix
func (r *RawCubeTexture) GetTextureMatrix() *Matrix {

	retVal := r.p.Call("getTextureMatrix")
	return MatrixFromJSObject(retVal, r.ctx)
}

// IsReady calls the IsReady method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#isready
func (r *RawCubeTexture) IsReady() bool {

	retVal := r.p.Call("isReady")
	return retVal.Bool()
}

// IsReadyOrNotBlocking calls the IsReadyOrNotBlocking method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#isreadyornotblocking
func (r *RawCubeTexture) IsReadyOrNotBlocking() bool {

	retVal := r.p.Call("isReadyOrNotBlocking")
	return retVal.Bool()
}

// Parse calls the Parse method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#parse
func (r *RawCubeTexture) Parse(parsedTexture interface{}, scene *Scene, rootUrl string) *CubeTexture {

	args := make([]interface{}, 0, 3+0)

	args = append(args, parsedTexture)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := r.p.Call("Parse", args...)
	return CubeTextureFromJSObject(retVal, r.ctx)
}

// RawCubeTextureReadPixelsOpts contains optional parameters for RawCubeTexture.ReadPixels.
type RawCubeTextureReadPixelsOpts struct {
	FaceIndex *float64
	Level     *float64
	Buffer    js.Value
}

// ReadPixels calls the ReadPixels method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#readpixels
func (r *RawCubeTexture) ReadPixels(opts *RawCubeTextureReadPixelsOpts) js.Value {
	if opts == nil {
		opts = &RawCubeTextureReadPixelsOpts{}
	}

	args := make([]interface{}, 0, 0+3)

	if opts.FaceIndex == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FaceIndex)
	}
	if opts.Level == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Level)
	}
	if opts.Buffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Buffer)
	}

	retVal := r.p.Call("readPixels", args...)
	return retVal
}

// ReleaseInternalTexture calls the ReleaseInternalTexture method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#releaseinternaltexture
func (r *RawCubeTexture) ReleaseInternalTexture() {

	r.p.Call("releaseInternalTexture")
}

// Scale calls the Scale method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#scale
func (r *RawCubeTexture) Scale(ratio float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, ratio)

	r.p.Call("scale", args...)
}

// Serialize calls the Serialize method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#serialize
func (r *RawCubeTexture) Serialize() interface{} {

	retVal := r.p.Call("serialize")
	return retVal
}

// SetReflectionTextureMatrix calls the SetReflectionTextureMatrix method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#setreflectiontexturematrix
func (r *RawCubeTexture) SetReflectionTextureMatrix(value *Matrix) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, value.JSObject())

	r.p.Call("setReflectionTextureMatrix", args...)
}

// ToString calls the ToString method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#tostring
func (r *RawCubeTexture) ToString() string {

	retVal := r.p.Call("toString")
	return retVal.String()
}

// RawCubeTextureUpdateOpts contains optional parameters for RawCubeTexture.Update.
type RawCubeTextureUpdateOpts struct {
	Compression *string
}

// Update calls the Update method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#update
func (r *RawCubeTexture) Update(data js.Value, format float64, jsType float64, invertY bool, opts *RawCubeTextureUpdateOpts) {
	if opts == nil {
		opts = &RawCubeTextureUpdateOpts{}
	}

	args := make([]interface{}, 0, 4+1)

	args = append(args, data)
	args = append(args, format)
	args = append(args, jsType)
	args = append(args, invertY)

	if opts.Compression == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Compression)
	}

	r.p.Call("update", args...)
}

// RawCubeTextureUpdateRGBDAsyncOpts contains optional parameters for RawCubeTexture.UpdateRGBDAsync.
type RawCubeTextureUpdateRGBDAsyncOpts struct {
	SphericalPolynomial *SphericalPolynomial
	LodScale            *float64
	LodOffset           *float64
}

// UpdateRGBDAsync calls the UpdateRGBDAsync method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#updatergbdasync
func (r *RawCubeTexture) UpdateRGBDAsync(data js.Value, opts *RawCubeTextureUpdateRGBDAsyncOpts) *Promise {
	if opts == nil {
		opts = &RawCubeTextureUpdateRGBDAsyncOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, data)

	if opts.SphericalPolynomial == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.SphericalPolynomial.JSObject())
	}
	if opts.LodScale == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.LodScale)
	}
	if opts.LodOffset == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.LodOffset)
	}

	retVal := r.p.Call("updateRGBDAsync", args...)
	return PromiseFromJSObject(retVal, r.ctx)
}

// UpdateSamplingMode calls the UpdateSamplingMode method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#updatesamplingmode
func (r *RawCubeTexture) UpdateSamplingMode(samplingMode float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, samplingMode)

	r.p.Call("updateSamplingMode", args...)
}

// RawCubeTextureUpdateURLOpts contains optional parameters for RawCubeTexture.UpdateURL.
type RawCubeTextureUpdateURLOpts struct {
	ForcedExtension *string
	OnLoad          *func()
}

// UpdateURL calls the UpdateURL method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#updateurl
func (r *RawCubeTexture) UpdateURL(url string, opts *RawCubeTextureUpdateURLOpts) {
	if opts == nil {
		opts = &RawCubeTextureUpdateURLOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, url)

	if opts.ForcedExtension == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForcedExtension)
	}
	if opts.OnLoad == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnLoad)
	}

	r.p.Call("updateURL", args...)
}

// WhenAllReady calls the WhenAllReady method on the RawCubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#whenallready
func (r *RawCubeTexture) WhenAllReady(textures *BaseTexture, callback func()) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, textures.JSObject())
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { callback(); return nil }))

	r.p.Call("WhenAllReady", args...)
}

/*

// Animations returns the Animations property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#animations
func (r *RawCubeTexture) Animations(animations *Animation) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(animations.JSObject())
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#animations
func (r *RawCubeTexture) SetAnimations(animations *Animation) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(animations.JSObject())
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// AnisotropicFilteringLevel returns the AnisotropicFilteringLevel property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#anisotropicfilteringlevel
func (r *RawCubeTexture) AnisotropicFilteringLevel(anisotropicFilteringLevel float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(anisotropicFilteringLevel)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetAnisotropicFilteringLevel sets the AnisotropicFilteringLevel property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#anisotropicfilteringlevel
func (r *RawCubeTexture) SetAnisotropicFilteringLevel(anisotropicFilteringLevel float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(anisotropicFilteringLevel)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// BoundingBoxPosition returns the BoundingBoxPosition property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#boundingboxposition
func (r *RawCubeTexture) BoundingBoxPosition(boundingBoxPosition *Vector3) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(boundingBoxPosition.JSObject())
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetBoundingBoxPosition sets the BoundingBoxPosition property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#boundingboxposition
func (r *RawCubeTexture) SetBoundingBoxPosition(boundingBoxPosition *Vector3) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(boundingBoxPosition.JSObject())
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// BoundingBoxSize returns the BoundingBoxSize property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#boundingboxsize
func (r *RawCubeTexture) BoundingBoxSize(boundingBoxSize *Vector3) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(boundingBoxSize.JSObject())
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetBoundingBoxSize sets the BoundingBoxSize property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#boundingboxsize
func (r *RawCubeTexture) SetBoundingBoxSize(boundingBoxSize *Vector3) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(boundingBoxSize.JSObject())
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// CanRescale returns the CanRescale property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#canrescale
func (r *RawCubeTexture) CanRescale(canRescale bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(canRescale)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetCanRescale sets the CanRescale property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#canrescale
func (r *RawCubeTexture) SetCanRescale(canRescale bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(canRescale)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// CoordinatesIndex returns the CoordinatesIndex property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#coordinatesindex
func (r *RawCubeTexture) CoordinatesIndex(coordinatesIndex float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(coordinatesIndex)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetCoordinatesIndex sets the CoordinatesIndex property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#coordinatesindex
func (r *RawCubeTexture) SetCoordinatesIndex(coordinatesIndex float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(coordinatesIndex)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// CoordinatesMode returns the CoordinatesMode property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#coordinatesmode
func (r *RawCubeTexture) CoordinatesMode(coordinatesMode float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(coordinatesMode)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetCoordinatesMode sets the CoordinatesMode property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#coordinatesmode
func (r *RawCubeTexture) SetCoordinatesMode(coordinatesMode float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(coordinatesMode)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// DEFAULT_ANISOTROPIC_FILTERING_LEVEL returns the DEFAULT_ANISOTROPIC_FILTERING_LEVEL property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#default_anisotropic_filtering_level
func (r *RawCubeTexture) DEFAULT_ANISOTROPIC_FILTERING_LEVEL(DEFAULT_ANISOTROPIC_FILTERING_LEVEL float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(DEFAULT_ANISOTROPIC_FILTERING_LEVEL)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetDEFAULT_ANISOTROPIC_FILTERING_LEVEL sets the DEFAULT_ANISOTROPIC_FILTERING_LEVEL property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#default_anisotropic_filtering_level
func (r *RawCubeTexture) SetDEFAULT_ANISOTROPIC_FILTERING_LEVEL(DEFAULT_ANISOTROPIC_FILTERING_LEVEL float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(DEFAULT_ANISOTROPIC_FILTERING_LEVEL)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// DelayLoadState returns the DelayLoadState property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#delayloadstate
func (r *RawCubeTexture) DelayLoadState(delayLoadState float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(delayLoadState)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetDelayLoadState sets the DelayLoadState property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#delayloadstate
func (r *RawCubeTexture) SetDelayLoadState(delayLoadState float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(delayLoadState)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// GammaSpace returns the GammaSpace property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#gammaspace
func (r *RawCubeTexture) GammaSpace(gammaSpace bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(gammaSpace)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetGammaSpace sets the GammaSpace property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#gammaspace
func (r *RawCubeTexture) SetGammaSpace(gammaSpace bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(gammaSpace)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// GetAlphaFromRGB returns the GetAlphaFromRGB property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#getalphafromrgb
func (r *RawCubeTexture) GetAlphaFromRGB(getAlphaFromRGB bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(getAlphaFromRGB)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetGetAlphaFromRGB sets the GetAlphaFromRGB property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#getalphafromrgb
func (r *RawCubeTexture) SetGetAlphaFromRGB(getAlphaFromRGB bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(getAlphaFromRGB)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// HasAlpha returns the HasAlpha property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#hasalpha
func (r *RawCubeTexture) HasAlpha(hasAlpha bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(hasAlpha)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetHasAlpha sets the HasAlpha property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#hasalpha
func (r *RawCubeTexture) SetHasAlpha(hasAlpha bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(hasAlpha)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// InvertZ returns the InvertZ property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#invertz
func (r *RawCubeTexture) InvertZ(invertZ bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(invertZ)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetInvertZ sets the InvertZ property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#invertz
func (r *RawCubeTexture) SetInvertZ(invertZ bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(invertZ)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// IrradianceTexture returns the IrradianceTexture property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#irradiancetexture
func (r *RawCubeTexture) IrradianceTexture(irradianceTexture *BaseTexture) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(irradianceTexture.JSObject())
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetIrradianceTexture sets the IrradianceTexture property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#irradiancetexture
func (r *RawCubeTexture) SetIrradianceTexture(irradianceTexture *BaseTexture) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(irradianceTexture.JSObject())
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// Is2DArray returns the Is2DArray property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#is2darray
func (r *RawCubeTexture) Is2DArray(is2DArray bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(is2DArray)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetIs2DArray sets the Is2DArray property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#is2darray
func (r *RawCubeTexture) SetIs2DArray(is2DArray bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(is2DArray)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// Is3D returns the Is3D property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#is3d
func (r *RawCubeTexture) Is3D(is3D bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(is3D)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetIs3D sets the Is3D property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#is3d
func (r *RawCubeTexture) SetIs3D(is3D bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(is3D)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// IsBlocking returns the IsBlocking property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#isblocking
func (r *RawCubeTexture) IsBlocking(isBlocking bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(isBlocking)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetIsBlocking sets the IsBlocking property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#isblocking
func (r *RawCubeTexture) SetIsBlocking(isBlocking bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(isBlocking)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// IsCube returns the IsCube property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#iscube
func (r *RawCubeTexture) IsCube(isCube bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(isCube)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetIsCube sets the IsCube property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#iscube
func (r *RawCubeTexture) SetIsCube(isCube bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(isCube)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// IsPrefiltered returns the IsPrefiltered property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#isprefiltered
func (r *RawCubeTexture) IsPrefiltered(isPrefiltered bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(isPrefiltered)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetIsPrefiltered sets the IsPrefiltered property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#isprefiltered
func (r *RawCubeTexture) SetIsPrefiltered(isPrefiltered bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(isPrefiltered)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// IsRGBD returns the IsRGBD property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#isrgbd
func (r *RawCubeTexture) IsRGBD(isRGBD bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(isRGBD)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetIsRGBD sets the IsRGBD property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#isrgbd
func (r *RawCubeTexture) SetIsRGBD(isRGBD bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(isRGBD)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// IsRenderTarget returns the IsRenderTarget property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#isrendertarget
func (r *RawCubeTexture) IsRenderTarget(isRenderTarget bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(isRenderTarget)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetIsRenderTarget sets the IsRenderTarget property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#isrendertarget
func (r *RawCubeTexture) SetIsRenderTarget(isRenderTarget bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(isRenderTarget)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// Level returns the Level property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#level
func (r *RawCubeTexture) Level(level float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(level)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetLevel sets the Level property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#level
func (r *RawCubeTexture) SetLevel(level float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(level)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// LinearSpecularLOD returns the LinearSpecularLOD property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#linearspecularlod
func (r *RawCubeTexture) LinearSpecularLOD(linearSpecularLOD bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(linearSpecularLOD)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetLinearSpecularLOD sets the LinearSpecularLOD property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#linearspecularlod
func (r *RawCubeTexture) SetLinearSpecularLOD(linearSpecularLOD bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(linearSpecularLOD)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// LodGenerationOffset returns the LodGenerationOffset property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#lodgenerationoffset
func (r *RawCubeTexture) LodGenerationOffset(lodGenerationOffset float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(lodGenerationOffset)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetLodGenerationOffset sets the LodGenerationOffset property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#lodgenerationoffset
func (r *RawCubeTexture) SetLodGenerationOffset(lodGenerationOffset float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(lodGenerationOffset)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// LodGenerationScale returns the LodGenerationScale property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#lodgenerationscale
func (r *RawCubeTexture) LodGenerationScale(lodGenerationScale float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(lodGenerationScale)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetLodGenerationScale sets the LodGenerationScale property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#lodgenerationscale
func (r *RawCubeTexture) SetLodGenerationScale(lodGenerationScale float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(lodGenerationScale)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#metadata
func (r *RawCubeTexture) Metadata(metadata interface{}) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(metadata)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#metadata
func (r *RawCubeTexture) SetMetadata(metadata interface{}) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(metadata)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#name
func (r *RawCubeTexture) Name(name string) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(name)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#name
func (r *RawCubeTexture) SetName(name string) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(name)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// NoMipmap returns the NoMipmap property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#nomipmap
func (r *RawCubeTexture) NoMipmap(noMipmap bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(noMipmap)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetNoMipmap sets the NoMipmap property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#nomipmap
func (r *RawCubeTexture) SetNoMipmap(noMipmap bool) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(noMipmap)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#ondispose
func (r *RawCubeTexture) OnDispose(onDispose func()) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#ondispose
func (r *RawCubeTexture) SetOnDispose(onDispose func()) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#ondisposeobservable
func (r *RawCubeTexture) OnDisposeObservable(onDisposeObservable *Observable) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(onDisposeObservable.JSObject())
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#ondisposeobservable
func (r *RawCubeTexture) SetOnDisposeObservable(onDisposeObservable *Observable) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(onDisposeObservable.JSObject())
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#reserveddatastore
func (r *RawCubeTexture) ReservedDataStore(reservedDataStore interface{}) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(reservedDataStore)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#reserveddatastore
func (r *RawCubeTexture) SetReservedDataStore(reservedDataStore interface{}) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(reservedDataStore)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// RotationY returns the RotationY property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#rotationy
func (r *RawCubeTexture) RotationY(rotationY float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(rotationY)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetRotationY sets the RotationY property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#rotationy
func (r *RawCubeTexture) SetRotationY(rotationY float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(rotationY)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// TextureFormat returns the TextureFormat property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#textureformat
func (r *RawCubeTexture) TextureFormat(textureFormat float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(textureFormat)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetTextureFormat sets the TextureFormat property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#textureformat
func (r *RawCubeTexture) SetTextureFormat(textureFormat float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(textureFormat)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// TextureType returns the TextureType property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#texturetype
func (r *RawCubeTexture) TextureType(textureType float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(textureType)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetTextureType sets the TextureType property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#texturetype
func (r *RawCubeTexture) SetTextureType(textureType float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(textureType)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// Uid returns the Uid property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#uid
func (r *RawCubeTexture) Uid(uid string) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(uid)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetUid sets the Uid property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#uid
func (r *RawCubeTexture) SetUid(uid string) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(uid)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#uniqueid
func (r *RawCubeTexture) UniqueId(uniqueId float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(uniqueId)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#uniqueid
func (r *RawCubeTexture) SetUniqueId(uniqueId float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(uniqueId)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// Url returns the Url property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#url
func (r *RawCubeTexture) Url(url string) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(url)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetUrl sets the Url property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#url
func (r *RawCubeTexture) SetUrl(url string) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(url)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// WrapR returns the WrapR property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#wrapr
func (r *RawCubeTexture) WrapR(wrapR float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(wrapR)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetWrapR sets the WrapR property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#wrapr
func (r *RawCubeTexture) SetWrapR(wrapR float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(wrapR)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// WrapU returns the WrapU property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#wrapu
func (r *RawCubeTexture) WrapU(wrapU float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(wrapU)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetWrapU sets the WrapU property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#wrapu
func (r *RawCubeTexture) SetWrapU(wrapU float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(wrapU)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// WrapV returns the WrapV property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#wrapv
func (r *RawCubeTexture) WrapV(wrapV float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(wrapV)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

// SetWrapV sets the WrapV property of class RawCubeTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rawcubetexture#wrapv
func (r *RawCubeTexture) SetWrapV(wrapV float64) *RawCubeTexture {
	p := ba.ctx.Get("RawCubeTexture").New(wrapV)
	return RawCubeTextureFromJSObject(p, ba.ctx)
}

*/
