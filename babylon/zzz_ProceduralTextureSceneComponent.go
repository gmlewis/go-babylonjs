// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ProceduralTextureSceneComponent represents a babylon.js ProceduralTextureSceneComponent.
// Defines the Procedural Texture scene component responsible to manage any Procedural Texture
// in a given scene.
type ProceduralTextureSceneComponent struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *ProceduralTextureSceneComponent) JSObject() js.Value { return p.p }

// ProceduralTextureSceneComponent returns a ProceduralTextureSceneComponent JavaScript class.
func (ba *Babylon) ProceduralTextureSceneComponent() *ProceduralTextureSceneComponent {
	p := ba.ctx.Get("ProceduralTextureSceneComponent")
	return ProceduralTextureSceneComponentFromJSObject(p, ba.ctx)
}

// ProceduralTextureSceneComponentFromJSObject returns a wrapped ProceduralTextureSceneComponent JavaScript class.
func ProceduralTextureSceneComponentFromJSObject(p js.Value, ctx js.Value) *ProceduralTextureSceneComponent {
	return &ProceduralTextureSceneComponent{p: p, ctx: ctx}
}

// ProceduralTextureSceneComponentArrayToJSArray returns a JavaScript Array for the wrapped array.
func ProceduralTextureSceneComponentArrayToJSArray(array []*ProceduralTextureSceneComponent) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewProceduralTextureSceneComponent returns a new ProceduralTextureSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.proceduraltexturescenecomponent
func (ba *Babylon) NewProceduralTextureSceneComponent(scene *Scene) *ProceduralTextureSceneComponent {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scene.JSObject())

	p := ba.ctx.Get("ProceduralTextureSceneComponent").New(args...)
	return ProceduralTextureSceneComponentFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the ProceduralTextureSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.proceduraltexturescenecomponent#dispose
func (p *ProceduralTextureSceneComponent) Dispose() {

	p.p.Call("dispose")
}

// Rebuild calls the Rebuild method on the ProceduralTextureSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.proceduraltexturescenecomponent#rebuild
func (p *ProceduralTextureSceneComponent) Rebuild() {

	p.p.Call("rebuild")
}

// Register calls the Register method on the ProceduralTextureSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.proceduraltexturescenecomponent#register
func (p *ProceduralTextureSceneComponent) Register() {

	p.p.Call("register")
}

/*

// Name returns the Name property of class ProceduralTextureSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.proceduraltexturescenecomponent#name
func (p *ProceduralTextureSceneComponent) Name(name string) *ProceduralTextureSceneComponent {
	p := ba.ctx.Get("ProceduralTextureSceneComponent").New(name)
	return ProceduralTextureSceneComponentFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class ProceduralTextureSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.proceduraltexturescenecomponent#name
func (p *ProceduralTextureSceneComponent) SetName(name string) *ProceduralTextureSceneComponent {
	p := ba.ctx.Get("ProceduralTextureSceneComponent").New(name)
	return ProceduralTextureSceneComponentFromJSObject(p, ba.ctx)
}

// Scene returns the Scene property of class ProceduralTextureSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.proceduraltexturescenecomponent#scene
func (p *ProceduralTextureSceneComponent) Scene(scene *Scene) *ProceduralTextureSceneComponent {
	p := ba.ctx.Get("ProceduralTextureSceneComponent").New(scene.JSObject())
	return ProceduralTextureSceneComponentFromJSObject(p, ba.ctx)
}

// SetScene sets the Scene property of class ProceduralTextureSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.proceduraltexturescenecomponent#scene
func (p *ProceduralTextureSceneComponent) SetScene(scene *Scene) *ProceduralTextureSceneComponent {
	p := ba.ctx.Get("ProceduralTextureSceneComponent").New(scene.JSObject())
	return ProceduralTextureSceneComponentFromJSObject(p, ba.ctx)
}

*/
