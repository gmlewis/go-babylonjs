// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ShadowGenerator represents a babylon.js ShadowGenerator.
// Default implementation IShadowGenerator.
// This is the main object responsible of generating shadows in the framework.
// Documentation: &lt;a href=&#34;https://doc.babylonjs.com/babylon101/shadows&#34;&gt;https://doc.babylonjs.com/babylon101/shadows&lt;/a&gt;
type ShadowGenerator struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *ShadowGenerator) JSObject() js.Value { return s.p }

// ShadowGenerator returns a ShadowGenerator JavaScript class.
func (ba *Babylon) ShadowGenerator() *ShadowGenerator {
	p := ba.ctx.Get("ShadowGenerator")
	return ShadowGeneratorFromJSObject(p, ba.ctx)
}

// ShadowGeneratorFromJSObject returns a wrapped ShadowGenerator JavaScript class.
func ShadowGeneratorFromJSObject(p js.Value, ctx js.Value) *ShadowGenerator {
	return &ShadowGenerator{p: p, ctx: ctx}
}

// NewShadowGeneratorOpts contains optional parameters for NewShadowGenerator.
type NewShadowGeneratorOpts struct {
	UsefulFloatFirst *JSBool
}

// NewShadowGenerator returns a new ShadowGenerator object.
//
// https://doc.babylonjs.com/api/classes/babylon.shadowgenerator
func (ba *Babylon) NewShadowGenerator(mapSize float64, light js.Value, opts *NewShadowGeneratorOpts) *ShadowGenerator {
	if opts == nil {
		opts = &NewShadowGeneratorOpts{}
	}

	p := ba.ctx.Get("ShadowGenerator").New(mapSize, light, opts.UsefulFloatFirst.JSObject())
	return ShadowGeneratorFromJSObject(p, ba.ctx)
}

// TODO: methods
