// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BlackAndWhitePostProcess represents a babylon.js BlackAndWhitePostProcess.
// Post process used to render in black and white
type BlackAndWhitePostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BlackAndWhitePostProcess) JSObject() js.Value { return b.p }

// BlackAndWhitePostProcess returns a BlackAndWhitePostProcess JavaScript class.
func (ba *Babylon) BlackAndWhitePostProcess() *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess")
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// BlackAndWhitePostProcessFromJSObject returns a wrapped BlackAndWhitePostProcess JavaScript class.
func BlackAndWhitePostProcessFromJSObject(p js.Value, ctx js.Value) *BlackAndWhitePostProcess {
	return &BlackAndWhitePostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// NewBlackAndWhitePostProcessOpts contains optional parameters for NewBlackAndWhitePostProcess.
type NewBlackAndWhitePostProcessOpts struct {
	SamplingMode *float64
	Engine       *Engine
	Reusable     *bool
}

// NewBlackAndWhitePostProcess returns a new BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess
func (ba *Babylon) NewBlackAndWhitePostProcess(name string, options float64, camera *Camera, opts *NewBlackAndWhitePostProcessOpts) *BlackAndWhitePostProcess {
	if opts == nil {
		opts = &NewBlackAndWhitePostProcessOpts{}
	}

	args := make([]interface{}, 0, 3+3)

	args = append(args, name)
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}

	p := ba.ctx.Get("BlackAndWhitePostProcess").New(args...)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// BlackAndWhitePostProcessActivateOpts contains optional parameters for BlackAndWhitePostProcess.Activate.
type BlackAndWhitePostProcessActivateOpts struct {
	SourceTexture     *InternalTexture
	ForceDepthStencil *bool
}

// Activate calls the Activate method on the BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#activate
func (b *BlackAndWhitePostProcess) Activate(camera *Camera, opts *BlackAndWhitePostProcessActivateOpts) *InternalTexture {
	if opts == nil {
		opts = &BlackAndWhitePostProcessActivateOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, camera.JSObject())

	if opts.SourceTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.SourceTexture.JSObject())
	}
	if opts.ForceDepthStencil == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDepthStencil)
	}

	retVal := b.p.Call("activate", args...)
	return InternalTextureFromJSObject(retVal, b.ctx)
}

// Apply calls the Apply method on the BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#apply
func (b *BlackAndWhitePostProcess) Apply() *Effect {

	args := make([]interface{}, 0, 0+0)

	retVal := b.p.Call("apply", args...)
	return EffectFromJSObject(retVal, b.ctx)
}

// BlackAndWhitePostProcessDisposeOpts contains optional parameters for BlackAndWhitePostProcess.Dispose.
type BlackAndWhitePostProcessDisposeOpts struct {
	Camera *Camera
}

// Dispose calls the Dispose method on the BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#dispose
func (b *BlackAndWhitePostProcess) Dispose(opts *BlackAndWhitePostProcessDisposeOpts) {
	if opts == nil {
		opts = &BlackAndWhitePostProcessDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}

	b.p.Call("dispose", args...)
}

// GetCamera calls the GetCamera method on the BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#getcamera
func (b *BlackAndWhitePostProcess) GetCamera() *Camera {

	args := make([]interface{}, 0, 0+0)

	retVal := b.p.Call("getCamera", args...)
	return CameraFromJSObject(retVal, b.ctx)
}

// GetClassName calls the GetClassName method on the BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#getclassname
func (b *BlackAndWhitePostProcess) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := b.p.Call("getClassName", args...)
	return retVal.String()
}

// GetEffect calls the GetEffect method on the BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#geteffect
func (b *BlackAndWhitePostProcess) GetEffect() *Effect {

	args := make([]interface{}, 0, 0+0)

	retVal := b.p.Call("getEffect", args...)
	return EffectFromJSObject(retVal, b.ctx)
}

// GetEffectName calls the GetEffectName method on the BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#geteffectname
func (b *BlackAndWhitePostProcess) GetEffectName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := b.p.Call("getEffectName", args...)
	return retVal.String()
}

// GetEngine calls the GetEngine method on the BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#getengine
func (b *BlackAndWhitePostProcess) GetEngine() *Engine {

	args := make([]interface{}, 0, 0+0)

	retVal := b.p.Call("getEngine", args...)
	return EngineFromJSObject(retVal, b.ctx)
}

// IsReady calls the IsReady method on the BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#isready
func (b *BlackAndWhitePostProcess) IsReady() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := b.p.Call("isReady", args...)
	return retVal.Bool()
}

// IsReusable calls the IsReusable method on the BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#isreusable
func (b *BlackAndWhitePostProcess) IsReusable() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := b.p.Call("isReusable", args...)
	return retVal.Bool()
}

// MarkTextureDirty calls the MarkTextureDirty method on the BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#marktexturedirty
func (b *BlackAndWhitePostProcess) MarkTextureDirty() {

	args := make([]interface{}, 0, 0+0)

	b.p.Call("markTextureDirty", args...)
}

// ShareOutputWith calls the ShareOutputWith method on the BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#shareoutputwith
func (b *BlackAndWhitePostProcess) ShareOutputWith(postProcess *PostProcess) *PostProcess {

	args := make([]interface{}, 0, 1+0)

	args = append(args, postProcess.JSObject())

	retVal := b.p.Call("shareOutputWith", args...)
	return PostProcessFromJSObject(retVal, b.ctx)
}

// BlackAndWhitePostProcessUpdateEffectOpts contains optional parameters for BlackAndWhitePostProcess.UpdateEffect.
type BlackAndWhitePostProcessUpdateEffectOpts struct {
	Defines         *string
	Uniforms        *string
	Samplers        *string
	IndexParameters *interface{}
	OnCompiled      *func()
	OnError         *func()
}

// UpdateEffect calls the UpdateEffect method on the BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#updateeffect
func (b *BlackAndWhitePostProcess) UpdateEffect(opts *BlackAndWhitePostProcessUpdateEffectOpts) {
	if opts == nil {
		opts = &BlackAndWhitePostProcessUpdateEffectOpts{}
	}

	args := make([]interface{}, 0, 0+6)

	if opts.Defines == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Defines)
	}
	if opts.Uniforms == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Uniforms)
	}
	if opts.Samplers == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Samplers)
	}
	if opts.IndexParameters == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.IndexParameters)
	}
	if opts.OnCompiled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnCompiled)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}

	b.p.Call("updateEffect", args...)
}

// UseOwnOutput calls the UseOwnOutput method on the BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#useownoutput
func (b *BlackAndWhitePostProcess) UseOwnOutput() {

	args := make([]interface{}, 0, 0+0)

	b.p.Call("useOwnOutput", args...)
}

/*

// AdaptScaleToCurrentViewport returns the AdaptScaleToCurrentViewport property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#adaptscaletocurrentviewport
func (b *BlackAndWhitePostProcess) AdaptScaleToCurrentViewport(adaptScaleToCurrentViewport bool) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(adaptScaleToCurrentViewport)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetAdaptScaleToCurrentViewport sets the AdaptScaleToCurrentViewport property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#adaptscaletocurrentviewport
func (b *BlackAndWhitePostProcess) SetAdaptScaleToCurrentViewport(adaptScaleToCurrentViewport bool) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(adaptScaleToCurrentViewport)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// AlphaConstants returns the AlphaConstants property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#alphaconstants
func (b *BlackAndWhitePostProcess) AlphaConstants(alphaConstants *Color4) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(alphaConstants.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetAlphaConstants sets the AlphaConstants property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#alphaconstants
func (b *BlackAndWhitePostProcess) SetAlphaConstants(alphaConstants *Color4) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(alphaConstants.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// AlphaMode returns the AlphaMode property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#alphamode
func (b *BlackAndWhitePostProcess) AlphaMode(alphaMode float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(alphaMode)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetAlphaMode sets the AlphaMode property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#alphamode
func (b *BlackAndWhitePostProcess) SetAlphaMode(alphaMode float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(alphaMode)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// AlwaysForcePOT returns the AlwaysForcePOT property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#alwaysforcepot
func (b *BlackAndWhitePostProcess) AlwaysForcePOT(alwaysForcePOT bool) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(alwaysForcePOT)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetAlwaysForcePOT sets the AlwaysForcePOT property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#alwaysforcepot
func (b *BlackAndWhitePostProcess) SetAlwaysForcePOT(alwaysForcePOT bool) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(alwaysForcePOT)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// Animations returns the Animations property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#animations
func (b *BlackAndWhitePostProcess) Animations(animations *Animation) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(animations.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#animations
func (b *BlackAndWhitePostProcess) SetAnimations(animations *Animation) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(animations.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// AspectRatio returns the AspectRatio property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#aspectratio
func (b *BlackAndWhitePostProcess) AspectRatio(aspectRatio float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(aspectRatio)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetAspectRatio sets the AspectRatio property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#aspectratio
func (b *BlackAndWhitePostProcess) SetAspectRatio(aspectRatio float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(aspectRatio)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// AutoClear returns the AutoClear property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#autoclear
func (b *BlackAndWhitePostProcess) AutoClear(autoClear bool) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(autoClear)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetAutoClear sets the AutoClear property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#autoclear
func (b *BlackAndWhitePostProcess) SetAutoClear(autoClear bool) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(autoClear)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// ClearColor returns the ClearColor property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#clearcolor
func (b *BlackAndWhitePostProcess) ClearColor(clearColor *Color4) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(clearColor.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetClearColor sets the ClearColor property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#clearcolor
func (b *BlackAndWhitePostProcess) SetClearColor(clearColor *Color4) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(clearColor.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// Degree returns the Degree property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#degree
func (b *BlackAndWhitePostProcess) Degree(degree float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(degree)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetDegree sets the Degree property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#degree
func (b *BlackAndWhitePostProcess) SetDegree(degree float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(degree)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// EnablePixelPerfectMode returns the EnablePixelPerfectMode property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#enablepixelperfectmode
func (b *BlackAndWhitePostProcess) EnablePixelPerfectMode(enablePixelPerfectMode bool) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(enablePixelPerfectMode)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetEnablePixelPerfectMode sets the EnablePixelPerfectMode property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#enablepixelperfectmode
func (b *BlackAndWhitePostProcess) SetEnablePixelPerfectMode(enablePixelPerfectMode bool) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(enablePixelPerfectMode)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// ForceFullscreenViewport returns the ForceFullscreenViewport property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#forcefullscreenviewport
func (b *BlackAndWhitePostProcess) ForceFullscreenViewport(forceFullscreenViewport bool) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(forceFullscreenViewport)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetForceFullscreenViewport sets the ForceFullscreenViewport property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#forcefullscreenviewport
func (b *BlackAndWhitePostProcess) SetForceFullscreenViewport(forceFullscreenViewport bool) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(forceFullscreenViewport)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// Height returns the Height property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#height
func (b *BlackAndWhitePostProcess) Height(height float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(height)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetHeight sets the Height property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#height
func (b *BlackAndWhitePostProcess) SetHeight(height float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(height)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// InputTexture returns the InputTexture property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#inputtexture
func (b *BlackAndWhitePostProcess) InputTexture(inputTexture *InternalTexture) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(inputTexture.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetInputTexture sets the InputTexture property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#inputtexture
func (b *BlackAndWhitePostProcess) SetInputTexture(inputTexture *InternalTexture) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(inputTexture.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#inspectablecustomproperties
func (b *BlackAndWhitePostProcess) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(inspectableCustomProperties.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#inspectablecustomproperties
func (b *BlackAndWhitePostProcess) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(inspectableCustomProperties.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// IsSupported returns the IsSupported property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#issupported
func (b *BlackAndWhitePostProcess) IsSupported(isSupported bool) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(isSupported)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetIsSupported sets the IsSupported property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#issupported
func (b *BlackAndWhitePostProcess) SetIsSupported(isSupported bool) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(isSupported)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#name
func (b *BlackAndWhitePostProcess) Name(name string) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(name)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#name
func (b *BlackAndWhitePostProcess) SetName(name string) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(name)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// OnActivate returns the OnActivate property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onactivate
func (b *BlackAndWhitePostProcess) OnActivate(onActivate func()) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onActivate)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetOnActivate sets the OnActivate property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onactivate
func (b *BlackAndWhitePostProcess) SetOnActivate(onActivate func()) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onActivate)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// OnActivateObservable returns the OnActivateObservable property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onactivateobservable
func (b *BlackAndWhitePostProcess) OnActivateObservable(onActivateObservable *Observable) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onActivateObservable.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetOnActivateObservable sets the OnActivateObservable property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onactivateobservable
func (b *BlackAndWhitePostProcess) SetOnActivateObservable(onActivateObservable *Observable) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onActivateObservable.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// OnAfterRender returns the OnAfterRender property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onafterrender
func (b *BlackAndWhitePostProcess) OnAfterRender(onAfterRender func()) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onAfterRender)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetOnAfterRender sets the OnAfterRender property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onafterrender
func (b *BlackAndWhitePostProcess) SetOnAfterRender(onAfterRender func()) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onAfterRender)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// OnAfterRenderObservable returns the OnAfterRenderObservable property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onafterrenderobservable
func (b *BlackAndWhitePostProcess) OnAfterRenderObservable(onAfterRenderObservable *Observable) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onAfterRenderObservable.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetOnAfterRenderObservable sets the OnAfterRenderObservable property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onafterrenderobservable
func (b *BlackAndWhitePostProcess) SetOnAfterRenderObservable(onAfterRenderObservable *Observable) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onAfterRenderObservable.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// OnApply returns the OnApply property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onapply
func (b *BlackAndWhitePostProcess) OnApply(onApply func()) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onApply)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetOnApply sets the OnApply property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onapply
func (b *BlackAndWhitePostProcess) SetOnApply(onApply func()) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onApply)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// OnApplyObservable returns the OnApplyObservable property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onapplyobservable
func (b *BlackAndWhitePostProcess) OnApplyObservable(onApplyObservable *Observable) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onApplyObservable.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetOnApplyObservable sets the OnApplyObservable property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onapplyobservable
func (b *BlackAndWhitePostProcess) SetOnApplyObservable(onApplyObservable *Observable) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onApplyObservable.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// OnBeforeRender returns the OnBeforeRender property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onbeforerender
func (b *BlackAndWhitePostProcess) OnBeforeRender(onBeforeRender func()) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onBeforeRender)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetOnBeforeRender sets the OnBeforeRender property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onbeforerender
func (b *BlackAndWhitePostProcess) SetOnBeforeRender(onBeforeRender func()) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onBeforeRender)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// OnBeforeRenderObservable returns the OnBeforeRenderObservable property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onbeforerenderobservable
func (b *BlackAndWhitePostProcess) OnBeforeRenderObservable(onBeforeRenderObservable *Observable) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onBeforeRenderObservable.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetOnBeforeRenderObservable sets the OnBeforeRenderObservable property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onbeforerenderobservable
func (b *BlackAndWhitePostProcess) SetOnBeforeRenderObservable(onBeforeRenderObservable *Observable) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onBeforeRenderObservable.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// OnSizeChanged returns the OnSizeChanged property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onsizechanged
func (b *BlackAndWhitePostProcess) OnSizeChanged(onSizeChanged func()) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onSizeChanged)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetOnSizeChanged sets the OnSizeChanged property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onsizechanged
func (b *BlackAndWhitePostProcess) SetOnSizeChanged(onSizeChanged func()) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onSizeChanged)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// OnSizeChangedObservable returns the OnSizeChangedObservable property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onsizechangedobservable
func (b *BlackAndWhitePostProcess) OnSizeChangedObservable(onSizeChangedObservable *Observable) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onSizeChangedObservable.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetOnSizeChangedObservable sets the OnSizeChangedObservable property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#onsizechangedobservable
func (b *BlackAndWhitePostProcess) SetOnSizeChangedObservable(onSizeChangedObservable *Observable) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(onSizeChangedObservable.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// RenderTargetSamplingMode returns the RenderTargetSamplingMode property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#rendertargetsamplingmode
func (b *BlackAndWhitePostProcess) RenderTargetSamplingMode(renderTargetSamplingMode float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(renderTargetSamplingMode)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetRenderTargetSamplingMode sets the RenderTargetSamplingMode property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#rendertargetsamplingmode
func (b *BlackAndWhitePostProcess) SetRenderTargetSamplingMode(renderTargetSamplingMode float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(renderTargetSamplingMode)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// Samples returns the Samples property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#samples
func (b *BlackAndWhitePostProcess) Samples(samples float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(samples)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetSamples sets the Samples property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#samples
func (b *BlackAndWhitePostProcess) SetSamples(samples float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(samples)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// ScaleMode returns the ScaleMode property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#scalemode
func (b *BlackAndWhitePostProcess) ScaleMode(scaleMode float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(scaleMode)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetScaleMode sets the ScaleMode property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#scalemode
func (b *BlackAndWhitePostProcess) SetScaleMode(scaleMode float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(scaleMode)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// TexelSize returns the TexelSize property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#texelsize
func (b *BlackAndWhitePostProcess) TexelSize(texelSize *Vector2) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(texelSize.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetTexelSize sets the TexelSize property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#texelsize
func (b *BlackAndWhitePostProcess) SetTexelSize(texelSize *Vector2) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(texelSize.JSObject())
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#uniqueid
func (b *BlackAndWhitePostProcess) UniqueId(uniqueId float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(uniqueId)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#uniqueid
func (b *BlackAndWhitePostProcess) SetUniqueId(uniqueId float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(uniqueId)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#width
func (b *BlackAndWhitePostProcess) Width(width float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(width)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#width
func (b *BlackAndWhitePostProcess) SetWidth(width float64) *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess").New(width)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

*/
