// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BlackAndWhitePostProcess represents a babylon.js BlackAndWhitePostProcess.
// Post process used to render in black and white
type BlackAndWhitePostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BlackAndWhitePostProcess) JSObject() js.Value { return b.p }

// BlackAndWhitePostProcess returns a BlackAndWhitePostProcess JavaScript class.
func (ba *Babylon) BlackAndWhitePostProcess() *BlackAndWhitePostProcess {
	p := ba.ctx.Get("BlackAndWhitePostProcess")
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// BlackAndWhitePostProcessFromJSObject returns a wrapped BlackAndWhitePostProcess JavaScript class.
func BlackAndWhitePostProcessFromJSObject(p js.Value, ctx js.Value) *BlackAndWhitePostProcess {
	return &BlackAndWhitePostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// BlackAndWhitePostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func BlackAndWhitePostProcessArrayToJSArray(array []*BlackAndWhitePostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewBlackAndWhitePostProcessOpts contains optional parameters for NewBlackAndWhitePostProcess.
type NewBlackAndWhitePostProcessOpts struct {
	SamplingMode *float64
	Engine       *Engine
	Reusable     *bool
}

// NewBlackAndWhitePostProcess returns a new BlackAndWhitePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#constructor
func (ba *Babylon) NewBlackAndWhitePostProcess(name string, options float64, camera *Camera, opts *NewBlackAndWhitePostProcessOpts) *BlackAndWhitePostProcess {
	if opts == nil {
		opts = &NewBlackAndWhitePostProcessOpts{}
	}

	args := make([]interface{}, 0, 3+3)

	args = append(args, name)
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}

	p := ba.ctx.Get("BlackAndWhitePostProcess").New(args...)
	return BlackAndWhitePostProcessFromJSObject(p, ba.ctx)
}

// Degree returns the Degree property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#degree
func (b *BlackAndWhitePostProcess) Degree() float64 {
	retVal := b.p.Get("degree")
	return retVal.Float()
}

// SetDegree sets the Degree property of class BlackAndWhitePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.blackandwhitepostprocess#degree
func (b *BlackAndWhitePostProcess) SetDegree(degree float64) *BlackAndWhitePostProcess {
	b.p.Set("degree", degree)
	return b
}
