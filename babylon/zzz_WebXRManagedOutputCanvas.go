// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// WebXRManagedOutputCanvas represents a babylon.js WebXRManagedOutputCanvas.
// Creates a canvas that is added/removed from the webpage when entering/exiting XR
type WebXRManagedOutputCanvas struct{ p js.Value }

// JSObject returns the underlying js.Value.
func (w *WebXRManagedOutputCanvas) JSObject() js.Value { return w.p }

// WebXRManagedOutputCanvas returns a WebXRManagedOutputCanvas JavaScript class.
func (ba *Babylon) WebXRManagedOutputCanvas() *WebXRManagedOutputCanvas {
	p := ba.ctx.Get("WebXRManagedOutputCanvas")
	return WebXRManagedOutputCanvasFromJSObject(p)
}

// WebXRManagedOutputCanvasFromJSObject returns a wrapped WebXRManagedOutputCanvas JavaScript class.
func WebXRManagedOutputCanvasFromJSObject(p js.Value) *WebXRManagedOutputCanvas {
	return &WebXRManagedOutputCanvas{p: p}
}

// NewWebXRManagedOutputCanvasOpts contains optional parameters for NewWebXRManagedOutputCanvas.
type NewWebXRManagedOutputCanvasOpts struct {
	Canvas js.Value

	OnStateChangedObservable *Observable

	Configuration js.Value
}

// NewWebXRManagedOutputCanvas returns a new WebXRManagedOutputCanvas object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrmanagedoutputcanvas
func (ba *Babylon) NewWebXRManagedOutputCanvas(engine *ThinEngine, opts *NewWebXRManagedOutputCanvasOpts) *WebXRManagedOutputCanvas {
	if opts == nil {
		opts = &NewWebXRManagedOutputCanvasOpts{}
	}

	p := ba.ctx.Get("WebXRManagedOutputCanvas").New(engine.JSObject(), opts.Canvas, opts.OnStateChangedObservable.JSObject(), opts.Configuration)
	return WebXRManagedOutputCanvasFromJSObject(p)
}

// TODO: methods
