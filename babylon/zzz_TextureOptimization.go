// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TextureOptimization represents a babylon.js TextureOptimization.
// Defines an optimization used to reduce the size of render target textures
//
// See: http://doc.babylonjs.com/how_to/how_to_use_sceneoptimizer
type TextureOptimization struct {
	*SceneOptimization
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (t *TextureOptimization) JSObject() js.Value { return t.p }

// TextureOptimization returns a TextureOptimization JavaScript class.
func (ba *Babylon) TextureOptimization() *TextureOptimization {
	p := ba.ctx.Get("TextureOptimization")
	return TextureOptimizationFromJSObject(p, ba.ctx)
}

// TextureOptimizationFromJSObject returns a wrapped TextureOptimization JavaScript class.
func TextureOptimizationFromJSObject(p js.Value, ctx js.Value) *TextureOptimization {
	return &TextureOptimization{SceneOptimization: SceneOptimizationFromJSObject(p, ctx), ctx: ctx}
}

// NewTextureOptimizationOpts contains optional parameters for NewTextureOptimization.
type NewTextureOptimizationOpts struct {
	Priority *JSFloat64

	MaximumSize *JSFloat64

	Step *JSFloat64
}

// NewTextureOptimization returns a new TextureOptimization object.
//
// https://doc.babylonjs.com/api/classes/babylon.textureoptimization
func (ba *Babylon) NewTextureOptimization(opts *NewTextureOptimizationOpts) *TextureOptimization {
	if opts == nil {
		opts = &NewTextureOptimizationOpts{}
	}

	p := ba.ctx.Get("TextureOptimization").New(opts.Priority.JSObject(), opts.MaximumSize.JSObject(), opts.Step.JSObject())
	return TextureOptimizationFromJSObject(p, ba.ctx)
}

// TODO: methods
