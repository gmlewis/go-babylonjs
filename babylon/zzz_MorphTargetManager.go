// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MorphTargetManager represents a babylon.js MorphTargetManager.
// This class is used to deform meshes using morphing between different targets
//
// See: http://doc.babylonjs.com/how_to/how_to_use_morphtargets
type MorphTargetManager struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MorphTargetManager) JSObject() js.Value { return m.p }

// MorphTargetManager returns a MorphTargetManager JavaScript class.
func (ba *Babylon) MorphTargetManager() *MorphTargetManager {
	p := ba.ctx.Get("MorphTargetManager")
	return MorphTargetManagerFromJSObject(p, ba.ctx)
}

// MorphTargetManagerFromJSObject returns a wrapped MorphTargetManager JavaScript class.
func MorphTargetManagerFromJSObject(p js.Value, ctx js.Value) *MorphTargetManager {
	return &MorphTargetManager{p: p, ctx: ctx}
}

// MorphTargetManagerArrayToJSArray returns a JavaScript Array for the wrapped array.
func MorphTargetManagerArrayToJSArray(array []*MorphTargetManager) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewMorphTargetManagerOpts contains optional parameters for NewMorphTargetManager.
type NewMorphTargetManagerOpts struct {
	Scene *Scene
}

// NewMorphTargetManager returns a new MorphTargetManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#constructor
func (ba *Babylon) NewMorphTargetManager(opts *NewMorphTargetManagerOpts) *MorphTargetManager {
	if opts == nil {
		opts = &NewMorphTargetManagerOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Scene == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scene.JSObject())
	}

	p := ba.ctx.Get("MorphTargetManager").New(args...)
	return MorphTargetManagerFromJSObject(p, ba.ctx)
}

// AddTarget calls the AddTarget method on the MorphTargetManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#addtarget
func (m *MorphTargetManager) AddTarget(target *MorphTarget) {

	args := make([]interface{}, 0, 1+0)

	if target == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, target.JSObject())
	}

	m.p.Call("addTarget", args...)
}

// Clone calls the Clone method on the MorphTargetManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#clone
func (m *MorphTargetManager) Clone() *MorphTargetManager {

	retVal := m.p.Call("clone")
	return MorphTargetManagerFromJSObject(retVal, m.ctx)
}

// GetActiveTarget calls the GetActiveTarget method on the MorphTargetManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#getactivetarget
func (m *MorphTargetManager) GetActiveTarget(index float64) *MorphTarget {

	args := make([]interface{}, 0, 1+0)

	args = append(args, index)

	retVal := m.p.Call("getActiveTarget", args...)
	return MorphTargetFromJSObject(retVal, m.ctx)
}

// GetTarget calls the GetTarget method on the MorphTargetManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#gettarget
func (m *MorphTargetManager) GetTarget(index float64) *MorphTarget {

	args := make([]interface{}, 0, 1+0)

	args = append(args, index)

	retVal := m.p.Call("getTarget", args...)
	return MorphTargetFromJSObject(retVal, m.ctx)
}

// Parse calls the Parse method on the MorphTargetManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#parse
func (m *MorphTargetManager) Parse(serializationObject JSObject, scene *Scene) *MorphTargetManager {

	args := make([]interface{}, 0, 2+0)

	if serializationObject == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, serializationObject.JSObject())
	}

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	retVal := m.p.Call("Parse", args...)
	return MorphTargetManagerFromJSObject(retVal, m.ctx)
}

// RemoveTarget calls the RemoveTarget method on the MorphTargetManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#removetarget
func (m *MorphTargetManager) RemoveTarget(target *MorphTarget) {

	args := make([]interface{}, 0, 1+0)

	if target == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, target.JSObject())
	}

	m.p.Call("removeTarget", args...)
}

// Serialize calls the Serialize method on the MorphTargetManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#serialize
func (m *MorphTargetManager) Serialize() js.Value {

	retVal := m.p.Call("serialize")
	return retVal
}

// Synchronize calls the Synchronize method on the MorphTargetManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#synchronize
func (m *MorphTargetManager) Synchronize() {

	m.p.Call("synchronize")
}

// EnableNormalMorphing returns the EnableNormalMorphing property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#enablenormalmorphing
func (m *MorphTargetManager) EnableNormalMorphing() bool {
	retVal := m.p.Get("enableNormalMorphing")
	return retVal.Bool()
}

// SetEnableNormalMorphing sets the EnableNormalMorphing property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#enablenormalmorphing
func (m *MorphTargetManager) SetEnableNormalMorphing(enableNormalMorphing bool) *MorphTargetManager {
	m.p.Set("enableNormalMorphing", enableNormalMorphing)
	return m
}

// EnableTangentMorphing returns the EnableTangentMorphing property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#enabletangentmorphing
func (m *MorphTargetManager) EnableTangentMorphing() bool {
	retVal := m.p.Get("enableTangentMorphing")
	return retVal.Bool()
}

// SetEnableTangentMorphing sets the EnableTangentMorphing property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#enabletangentmorphing
func (m *MorphTargetManager) SetEnableTangentMorphing(enableTangentMorphing bool) *MorphTargetManager {
	m.p.Set("enableTangentMorphing", enableTangentMorphing)
	return m
}

// EnableUVMorphing returns the EnableUVMorphing property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#enableuvmorphing
func (m *MorphTargetManager) EnableUVMorphing() bool {
	retVal := m.p.Get("enableUVMorphing")
	return retVal.Bool()
}

// SetEnableUVMorphing sets the EnableUVMorphing property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#enableuvmorphing
func (m *MorphTargetManager) SetEnableUVMorphing(enableUVMorphing bool) *MorphTargetManager {
	m.p.Set("enableUVMorphing", enableUVMorphing)
	return m
}

// Influences returns the Influences property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#influences
func (m *MorphTargetManager) Influences() js.Value {
	retVal := m.p.Get("influences")
	return retVal
}

// SetInfluences sets the Influences property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#influences
func (m *MorphTargetManager) SetInfluences(influences js.Value) *MorphTargetManager {
	m.p.Set("influences", influences)
	return m
}

// NumInfluencers returns the NumInfluencers property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#numinfluencers
func (m *MorphTargetManager) NumInfluencers() float64 {
	retVal := m.p.Get("numInfluencers")
	return retVal.Float()
}

// SetNumInfluencers sets the NumInfluencers property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#numinfluencers
func (m *MorphTargetManager) SetNumInfluencers(numInfluencers float64) *MorphTargetManager {
	m.p.Set("numInfluencers", numInfluencers)
	return m
}

// NumTargets returns the NumTargets property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#numtargets
func (m *MorphTargetManager) NumTargets() float64 {
	retVal := m.p.Get("numTargets")
	return retVal.Float()
}

// SetNumTargets sets the NumTargets property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#numtargets
func (m *MorphTargetManager) SetNumTargets(numTargets float64) *MorphTargetManager {
	m.p.Set("numTargets", numTargets)
	return m
}

// SupportsNormals returns the SupportsNormals property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#supportsnormals
func (m *MorphTargetManager) SupportsNormals() bool {
	retVal := m.p.Get("supportsNormals")
	return retVal.Bool()
}

// SetSupportsNormals sets the SupportsNormals property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#supportsnormals
func (m *MorphTargetManager) SetSupportsNormals(supportsNormals bool) *MorphTargetManager {
	m.p.Set("supportsNormals", supportsNormals)
	return m
}

// SupportsTangents returns the SupportsTangents property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#supportstangents
func (m *MorphTargetManager) SupportsTangents() bool {
	retVal := m.p.Get("supportsTangents")
	return retVal.Bool()
}

// SetSupportsTangents sets the SupportsTangents property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#supportstangents
func (m *MorphTargetManager) SetSupportsTangents(supportsTangents bool) *MorphTargetManager {
	m.p.Set("supportsTangents", supportsTangents)
	return m
}

// SupportsUVs returns the SupportsUVs property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#supportsuvs
func (m *MorphTargetManager) SupportsUVs() bool {
	retVal := m.p.Get("supportsUVs")
	return retVal.Bool()
}

// SetSupportsUVs sets the SupportsUVs property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#supportsuvs
func (m *MorphTargetManager) SetSupportsUVs(supportsUVs bool) *MorphTargetManager {
	m.p.Set("supportsUVs", supportsUVs)
	return m
}

// UniqueId returns the UniqueId property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#uniqueid
func (m *MorphTargetManager) UniqueId() float64 {
	retVal := m.p.Get("uniqueId")
	return retVal.Float()
}

// SetUniqueId sets the UniqueId property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#uniqueid
func (m *MorphTargetManager) SetUniqueId(uniqueId float64) *MorphTargetManager {
	m.p.Set("uniqueId", uniqueId)
	return m
}

// VertexCount returns the VertexCount property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#vertexcount
func (m *MorphTargetManager) VertexCount() float64 {
	retVal := m.p.Get("vertexCount")
	return retVal.Float()
}

// SetVertexCount sets the VertexCount property of class MorphTargetManager.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetmanager#vertexcount
func (m *MorphTargetManager) SetVertexCount(vertexCount float64) *MorphTargetManager {
	m.p.Set("vertexCount", vertexCount)
	return m
}
