// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PostProcessManager represents a babylon.js PostProcessManager.
// PostProcessManager is used to manage one or more post processes or post process pipelines
// See &lt;a href=&#34;https://doc.babylonjs.com/how_to/how_to_use_postprocesses&#34;&gt;https://doc.babylonjs.com/how_to/how_to_use_postprocesses&lt;/a&gt;
type PostProcessManager struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PostProcessManager) JSObject() js.Value { return p.p }

// PostProcessManager returns a PostProcessManager JavaScript class.
func (ba *Babylon) PostProcessManager() *PostProcessManager {
	p := ba.ctx.Get("PostProcessManager")
	return PostProcessManagerFromJSObject(p, ba.ctx)
}

// PostProcessManagerFromJSObject returns a wrapped PostProcessManager JavaScript class.
func PostProcessManagerFromJSObject(p js.Value, ctx js.Value) *PostProcessManager {
	return &PostProcessManager{p: p, ctx: ctx}
}

// PostProcessManagerArrayToJSArray returns a JavaScript Array for the wrapped array.
func PostProcessManagerArrayToJSArray(array []*PostProcessManager) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPostProcessManager returns a new PostProcessManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessmanager
func (ba *Babylon) NewPostProcessManager(scene *Scene) *PostProcessManager {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scene.JSObject())

	p := ba.ctx.Get("PostProcessManager").New(args...)
	return PostProcessManagerFromJSObject(p, ba.ctx)
}

// PostProcessManagerDirectRenderOpts contains optional parameters for PostProcessManager.DirectRender.
type PostProcessManagerDirectRenderOpts struct {
	TargetTexture           *InternalTexture
	ForceFullscreenViewport *bool
	FaceIndex               *float64
	LodLevel                *float64
}

// DirectRender calls the DirectRender method on the PostProcessManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessmanager#directrender
func (p *PostProcessManager) DirectRender(postProcesses *PostProcess, opts *PostProcessManagerDirectRenderOpts) {
	if opts == nil {
		opts = &PostProcessManagerDirectRenderOpts{}
	}

	args := make([]interface{}, 0, 1+4)

	args = append(args, postProcesses.JSObject())

	if opts.TargetTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.TargetTexture.JSObject())
	}
	if opts.ForceFullscreenViewport == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceFullscreenViewport)
	}
	if opts.FaceIndex == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FaceIndex)
	}
	if opts.LodLevel == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.LodLevel)
	}

	p.p.Call("directRender", args...)
}

// Dispose calls the Dispose method on the PostProcessManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessmanager#dispose
func (p *PostProcessManager) Dispose() {

	p.p.Call("dispose")
}

/*

 */
