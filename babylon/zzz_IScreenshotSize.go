// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IScreenshotSize represents a babylon.js IScreenshotSize.
// Interface for screenshot methods with describe argument called <code>size</code> as object with options
//
// See: https://doc.babylonjs.com/api/classes/babylon.screenshottools
type IScreenshotSize struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IScreenshotSize) JSObject() js.Value { return i.p }

// IScreenshotSize returns a IScreenshotSize JavaScript class.
func (ba *Babylon) IScreenshotSize() *IScreenshotSize {
	p := ba.ctx.Get("IScreenshotSize")
	return IScreenshotSizeFromJSObject(p, ba.ctx)
}

// IScreenshotSizeFromJSObject returns a wrapped IScreenshotSize JavaScript class.
func IScreenshotSizeFromJSObject(p js.Value, ctx js.Value) *IScreenshotSize {
	return &IScreenshotSize{p: p, ctx: ctx}
}

// IScreenshotSizeArrayToJSArray returns a JavaScript Array for the wrapped array.
func IScreenshotSizeArrayToJSArray(array []*IScreenshotSize) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Height returns the Height property of class IScreenshotSize.
//
// https://doc.babylonjs.com/api/classes/babylon.iscreenshotsize#height
func (i *IScreenshotSize) Height(height float64) *IScreenshotSize {
	p := ba.ctx.Get("IScreenshotSize").New(height)
	return IScreenshotSizeFromJSObject(p, ba.ctx)
}

// SetHeight sets the Height property of class IScreenshotSize.
//
// https://doc.babylonjs.com/api/classes/babylon.iscreenshotsize#height
func (i *IScreenshotSize) SetHeight(height float64) *IScreenshotSize {
	p := ba.ctx.Get("IScreenshotSize").New(height)
	return IScreenshotSizeFromJSObject(p, ba.ctx)
}

// Precision returns the Precision property of class IScreenshotSize.
//
// https://doc.babylonjs.com/api/classes/babylon.iscreenshotsize#precision
func (i *IScreenshotSize) Precision(precision float64) *IScreenshotSize {
	p := ba.ctx.Get("IScreenshotSize").New(precision)
	return IScreenshotSizeFromJSObject(p, ba.ctx)
}

// SetPrecision sets the Precision property of class IScreenshotSize.
//
// https://doc.babylonjs.com/api/classes/babylon.iscreenshotsize#precision
func (i *IScreenshotSize) SetPrecision(precision float64) *IScreenshotSize {
	p := ba.ctx.Get("IScreenshotSize").New(precision)
	return IScreenshotSizeFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class IScreenshotSize.
//
// https://doc.babylonjs.com/api/classes/babylon.iscreenshotsize#width
func (i *IScreenshotSize) Width(width float64) *IScreenshotSize {
	p := ba.ctx.Get("IScreenshotSize").New(width)
	return IScreenshotSizeFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class IScreenshotSize.
//
// https://doc.babylonjs.com/api/classes/babylon.iscreenshotsize#width
func (i *IScreenshotSize) SetWidth(width float64) *IScreenshotSize {
	p := ba.ctx.Get("IScreenshotSize").New(width)
	return IScreenshotSizeFromJSObject(p, ba.ctx)
}

*/
