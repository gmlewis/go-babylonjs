// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// LineEdgesRenderer represents a babylon.js LineEdgesRenderer.
// LineEdgesRenderer for LineMeshes to remove unnecessary triangulation
type LineEdgesRenderer struct {
	*EdgesRenderer
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (l *LineEdgesRenderer) JSObject() js.Value { return l.p }

// LineEdgesRenderer returns a LineEdgesRenderer JavaScript class.
func (ba *Babylon) LineEdgesRenderer() *LineEdgesRenderer {
	p := ba.ctx.Get("LineEdgesRenderer")
	return LineEdgesRendererFromJSObject(p, ba.ctx)
}

// LineEdgesRendererFromJSObject returns a wrapped LineEdgesRenderer JavaScript class.
func LineEdgesRendererFromJSObject(p js.Value, ctx js.Value) *LineEdgesRenderer {
	return &LineEdgesRenderer{EdgesRenderer: EdgesRendererFromJSObject(p, ctx), ctx: ctx}
}

// LineEdgesRendererArrayToJSArray returns a JavaScript Array for the wrapped array.
func LineEdgesRendererArrayToJSArray(array []*LineEdgesRenderer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewLineEdgesRendererOpts contains optional parameters for NewLineEdgesRenderer.
type NewLineEdgesRendererOpts struct {
	Epsilon                       *float64
	CheckVerticesInsteadOfIndices *bool
}

// NewLineEdgesRenderer returns a new LineEdgesRenderer object.
//
// https://doc.babylonjs.com/api/classes/babylon.lineedgesrenderer
func (ba *Babylon) NewLineEdgesRenderer(source *AbstractMesh, opts *NewLineEdgesRendererOpts) *LineEdgesRenderer {
	if opts == nil {
		opts = &NewLineEdgesRendererOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, source.JSObject())

	if opts.Epsilon == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Epsilon)
	}
	if opts.CheckVerticesInsteadOfIndices == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CheckVerticesInsteadOfIndices)
	}

	p := ba.ctx.Get("LineEdgesRenderer").New(args...)
	return LineEdgesRendererFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the LineEdgesRenderer object.
//
// https://doc.babylonjs.com/api/classes/babylon.lineedgesrenderer#dispose
func (l *LineEdgesRenderer) Dispose() {

	l.p.Call("dispose")
}

// IsReady calls the IsReady method on the LineEdgesRenderer object.
//
// https://doc.babylonjs.com/api/classes/babylon.lineedgesrenderer#isready
func (l *LineEdgesRenderer) IsReady() bool {

	retVal := l.p.Call("isReady")
	return retVal.Bool()
}

// Render calls the Render method on the LineEdgesRenderer object.
//
// https://doc.babylonjs.com/api/classes/babylon.lineedgesrenderer#render
func (l *LineEdgesRenderer) Render() {

	l.p.Call("render")
}

// _generateEdgesLines calls the _generateEdgesLines method on the LineEdgesRenderer object.
//
// https://doc.babylonjs.com/api/classes/babylon.lineedgesrenderer#_generateedgeslines
func (l *LineEdgesRenderer) _generateEdgesLines() {

	l.p.Call("_generateEdgesLines")
}

/*

// EdgesWidthScalerForOrthographic returns the EdgesWidthScalerForOrthographic property of class LineEdgesRenderer.
//
// https://doc.babylonjs.com/api/classes/babylon.lineedgesrenderer#edgeswidthscalerfororthographic
func (l *LineEdgesRenderer) EdgesWidthScalerForOrthographic(edgesWidthScalerForOrthographic float64) *LineEdgesRenderer {
	p := ba.ctx.Get("LineEdgesRenderer").New(edgesWidthScalerForOrthographic)
	return LineEdgesRendererFromJSObject(p, ba.ctx)
}

// SetEdgesWidthScalerForOrthographic sets the EdgesWidthScalerForOrthographic property of class LineEdgesRenderer.
//
// https://doc.babylonjs.com/api/classes/babylon.lineedgesrenderer#edgeswidthscalerfororthographic
func (l *LineEdgesRenderer) SetEdgesWidthScalerForOrthographic(edgesWidthScalerForOrthographic float64) *LineEdgesRenderer {
	p := ba.ctx.Get("LineEdgesRenderer").New(edgesWidthScalerForOrthographic)
	return LineEdgesRendererFromJSObject(p, ba.ctx)
}

// EdgesWidthScalerForPerspective returns the EdgesWidthScalerForPerspective property of class LineEdgesRenderer.
//
// https://doc.babylonjs.com/api/classes/babylon.lineedgesrenderer#edgeswidthscalerforperspective
func (l *LineEdgesRenderer) EdgesWidthScalerForPerspective(edgesWidthScalerForPerspective float64) *LineEdgesRenderer {
	p := ba.ctx.Get("LineEdgesRenderer").New(edgesWidthScalerForPerspective)
	return LineEdgesRendererFromJSObject(p, ba.ctx)
}

// SetEdgesWidthScalerForPerspective sets the EdgesWidthScalerForPerspective property of class LineEdgesRenderer.
//
// https://doc.babylonjs.com/api/classes/babylon.lineedgesrenderer#edgeswidthscalerforperspective
func (l *LineEdgesRenderer) SetEdgesWidthScalerForPerspective(edgesWidthScalerForPerspective float64) *LineEdgesRenderer {
	p := ba.ctx.Get("LineEdgesRenderer").New(edgesWidthScalerForPerspective)
	return LineEdgesRendererFromJSObject(p, ba.ctx)
}

// IsEnabled returns the IsEnabled property of class LineEdgesRenderer.
//
// https://doc.babylonjs.com/api/classes/babylon.lineedgesrenderer#isenabled
func (l *LineEdgesRenderer) IsEnabled(isEnabled bool) *LineEdgesRenderer {
	p := ba.ctx.Get("LineEdgesRenderer").New(isEnabled)
	return LineEdgesRendererFromJSObject(p, ba.ctx)
}

// SetIsEnabled sets the IsEnabled property of class LineEdgesRenderer.
//
// https://doc.babylonjs.com/api/classes/babylon.lineedgesrenderer#isenabled
func (l *LineEdgesRenderer) SetIsEnabled(isEnabled bool) *LineEdgesRenderer {
	p := ba.ctx.Get("LineEdgesRenderer").New(isEnabled)
	return LineEdgesRendererFromJSObject(p, ba.ctx)
}

*/
