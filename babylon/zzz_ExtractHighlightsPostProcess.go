// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ExtractHighlightsPostProcess represents a babylon.js ExtractHighlightsPostProcess.
// The extract highlights post process sets all pixels to black except pixels above the specified luminance threshold. Used as the first step for a bloom effect.
type ExtractHighlightsPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *ExtractHighlightsPostProcess) JSObject() js.Value { return e.p }

// ExtractHighlightsPostProcess returns a ExtractHighlightsPostProcess JavaScript class.
func (ba *Babylon) ExtractHighlightsPostProcess() *ExtractHighlightsPostProcess {
	p := ba.ctx.Get("ExtractHighlightsPostProcess")
	return ExtractHighlightsPostProcessFromJSObject(p, ba.ctx)
}

// ExtractHighlightsPostProcessFromJSObject returns a wrapped ExtractHighlightsPostProcess JavaScript class.
func ExtractHighlightsPostProcessFromJSObject(p js.Value, ctx js.Value) *ExtractHighlightsPostProcess {
	return &ExtractHighlightsPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// ExtractHighlightsPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func ExtractHighlightsPostProcessArrayToJSArray(array []*ExtractHighlightsPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewExtractHighlightsPostProcessOpts contains optional parameters for NewExtractHighlightsPostProcess.
type NewExtractHighlightsPostProcessOpts struct {
	SamplingMode     *float64
	Engine           *Engine
	Reusable         *bool
	TextureType      *float64
	BlockCompilation *bool
}

// NewExtractHighlightsPostProcess returns a new ExtractHighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.extracthighlightspostprocess
func (ba *Babylon) NewExtractHighlightsPostProcess(name string, options float64, camera *Camera, opts *NewExtractHighlightsPostProcessOpts) *ExtractHighlightsPostProcess {
	if opts == nil {
		opts = &NewExtractHighlightsPostProcessOpts{}
	}

	args := make([]interface{}, 0, 3+5)

	args = append(args, name)
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}
	if opts.BlockCompilation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.BlockCompilation)
	}

	p := ba.ctx.Get("ExtractHighlightsPostProcess").New(args...)
	return ExtractHighlightsPostProcessFromJSObject(p, ba.ctx)
}

/*

// Threshold returns the Threshold property of class ExtractHighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.extracthighlightspostprocess#threshold
func (e *ExtractHighlightsPostProcess) Threshold(threshold float64) *ExtractHighlightsPostProcess {
	p := ba.ctx.Get("ExtractHighlightsPostProcess").New(threshold)
	return ExtractHighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetThreshold sets the Threshold property of class ExtractHighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.extracthighlightspostprocess#threshold
func (e *ExtractHighlightsPostProcess) SetThreshold(threshold float64) *ExtractHighlightsPostProcess {
	p := ba.ctx.Get("ExtractHighlightsPostProcess").New(threshold)
	return ExtractHighlightsPostProcessFromJSObject(p, ba.ctx)
}

*/
