// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FilesInputStore represents a babylon.js FilesInputStore.
// Class used to help managing file picking and drag&amp;#39;n&amp;#39;drop
// File Storage
type FilesInputStore struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FilesInputStore) JSObject() js.Value { return f.p }

// FilesInputStore returns a FilesInputStore JavaScript class.
func (ba *Babylon) FilesInputStore() *FilesInputStore {
	p := ba.ctx.Get("FilesInputStore")
	return FilesInputStoreFromJSObject(p, ba.ctx)
}

// FilesInputStoreFromJSObject returns a wrapped FilesInputStore JavaScript class.
func FilesInputStoreFromJSObject(p js.Value, ctx js.Value) *FilesInputStore {
	return &FilesInputStore{p: p, ctx: ctx}
}

/*

// FilesToLoad returns the FilesToLoad property of class FilesInputStore.
//
// https://doc.babylonjs.com/api/classes/babylon.filesinputstore#filestoload
func (f *FilesInputStore) FilesToLoad(FilesToLoad js.Value) *FilesInputStore {
	p := ba.ctx.Get("FilesInputStore").New(FilesToLoad)
	return FilesInputStoreFromJSObject(p, ba.ctx)
}

// SetFilesToLoad sets the FilesToLoad property of class FilesInputStore.
//
// https://doc.babylonjs.com/api/classes/babylon.filesinputstore#filestoload
func (f *FilesInputStore) SetFilesToLoad(FilesToLoad js.Value) *FilesInputStore {
	p := ba.ctx.Get("FilesInputStore").New(FilesToLoad)
	return FilesInputStoreFromJSObject(p, ba.ctx)
}

*/
