// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// UniversalCamera represents a babylon.js UniversalCamera.
// The Universal Camera is the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. This replaces the earlier Free Camera,
// which still works and will still be found in many Playgrounds.
//
// See: http://doc.babylonjs.com/features/cameras#universal-camera
type UniversalCamera struct {
	*TouchCamera
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (u *UniversalCamera) JSObject() js.Value { return u.p }

// UniversalCamera returns a UniversalCamera JavaScript class.
func (ba *Babylon) UniversalCamera() *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera")
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// UniversalCameraFromJSObject returns a wrapped UniversalCamera JavaScript class.
func UniversalCameraFromJSObject(p js.Value, ctx js.Value) *UniversalCamera {
	return &UniversalCamera{TouchCamera: TouchCameraFromJSObject(p, ctx), ctx: ctx}
}

// NewUniversalCamera returns a new UniversalCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera
func (ba *Babylon) NewUniversalCamera(name string, position *Vector3, scene *Scene) *UniversalCamera {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("UniversalCamera").New(args...)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// UniversalCameraAttachControlOpts contains optional parameters for UniversalCamera.AttachControl.
type UniversalCameraAttachControlOpts struct {
	NoPreventDefault *bool
}

// AttachControl calls the AttachControl method on the UniversalCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#attachcontrol
func (u *UniversalCamera) AttachControl(element js.Value, opts *UniversalCameraAttachControlOpts) {
	if opts == nil {
		opts = &UniversalCameraAttachControlOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, element)

	if opts.NoPreventDefault == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoPreventDefault)
	}

	u.p.Call("attachControl", args...)
}

// DetachControl calls the DetachControl method on the UniversalCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#detachcontrol
func (u *UniversalCamera) DetachControl(element js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, element)

	u.p.Call("detachControl", args...)
}

// Dispose calls the Dispose method on the UniversalCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#dispose
func (u *UniversalCamera) Dispose() {

	args := make([]interface{}, 0, 0+0)

	u.p.Call("dispose", args...)
}

// GetClassName calls the GetClassName method on the UniversalCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#getclassname
func (u *UniversalCamera) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := u.p.Call("getClassName", args...)
	return retVal.String()
}

// GetFrontPosition calls the GetFrontPosition method on the UniversalCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#getfrontposition
func (u *UniversalCamera) GetFrontPosition(distance float64) *Vector3 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, distance)

	retVal := u.p.Call("getFrontPosition", args...)
	return Vector3FromJSObject(retVal, u.ctx)
}

// GetTarget calls the GetTarget method on the UniversalCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#gettarget
func (u *UniversalCamera) GetTarget() *Vector3 {

	args := make([]interface{}, 0, 0+0)

	retVal := u.p.Call("getTarget", args...)
	return Vector3FromJSObject(retVal, u.ctx)
}

// SetTarget calls the SetTarget method on the UniversalCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#settarget
func (u *UniversalCamera) SetTarget(target *Vector3) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, target.JSObject())

	u.p.Call("setTarget", args...)
}

// StoreState calls the StoreState method on the UniversalCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#storestate
func (u *UniversalCamera) StoreState() *Camera {

	args := make([]interface{}, 0, 0+0)

	retVal := u.p.Call("storeState", args...)
	return CameraFromJSObject(retVal, u.ctx)
}

/*

// AngularSensibility returns the AngularSensibility property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#angularsensibility
func (u *UniversalCamera) AngularSensibility(angularSensibility float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(angularSensibility)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetAngularSensibility sets the AngularSensibility property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#angularsensibility
func (u *UniversalCamera) SetAngularSensibility(angularSensibility float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(angularSensibility)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// ApplyGravity returns the ApplyGravity property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#applygravity
func (u *UniversalCamera) ApplyGravity(applyGravity bool) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(applyGravity)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetApplyGravity sets the ApplyGravity property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#applygravity
func (u *UniversalCamera) SetApplyGravity(applyGravity bool) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(applyGravity)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// CameraDirection returns the CameraDirection property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#cameradirection
func (u *UniversalCamera) CameraDirection(cameraDirection *Vector3) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(cameraDirection.JSObject())
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetCameraDirection sets the CameraDirection property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#cameradirection
func (u *UniversalCamera) SetCameraDirection(cameraDirection *Vector3) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(cameraDirection.JSObject())
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// CameraRotation returns the CameraRotation property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#camerarotation
func (u *UniversalCamera) CameraRotation(cameraRotation *Vector2) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(cameraRotation.JSObject())
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetCameraRotation sets the CameraRotation property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#camerarotation
func (u *UniversalCamera) SetCameraRotation(cameraRotation *Vector2) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(cameraRotation.JSObject())
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// CheckCollisions returns the CheckCollisions property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#checkcollisions
func (u *UniversalCamera) CheckCollisions(checkCollisions bool) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(checkCollisions)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetCheckCollisions sets the CheckCollisions property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#checkcollisions
func (u *UniversalCamera) SetCheckCollisions(checkCollisions bool) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(checkCollisions)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// CollisionMask returns the CollisionMask property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#collisionmask
func (u *UniversalCamera) CollisionMask(collisionMask float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(collisionMask)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetCollisionMask sets the CollisionMask property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#collisionmask
func (u *UniversalCamera) SetCollisionMask(collisionMask float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(collisionMask)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// Ellipsoid returns the Ellipsoid property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#ellipsoid
func (u *UniversalCamera) Ellipsoid(ellipsoid *Vector3) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(ellipsoid.JSObject())
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetEllipsoid sets the Ellipsoid property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#ellipsoid
func (u *UniversalCamera) SetEllipsoid(ellipsoid *Vector3) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(ellipsoid.JSObject())
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// EllipsoidOffset returns the EllipsoidOffset property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#ellipsoidoffset
func (u *UniversalCamera) EllipsoidOffset(ellipsoidOffset *Vector3) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(ellipsoidOffset.JSObject())
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetEllipsoidOffset sets the EllipsoidOffset property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#ellipsoidoffset
func (u *UniversalCamera) SetEllipsoidOffset(ellipsoidOffset *Vector3) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(ellipsoidOffset.JSObject())
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// GamepadAngularSensibility returns the GamepadAngularSensibility property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#gamepadangularsensibility
func (u *UniversalCamera) GamepadAngularSensibility(gamepadAngularSensibility float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(gamepadAngularSensibility)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetGamepadAngularSensibility sets the GamepadAngularSensibility property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#gamepadangularsensibility
func (u *UniversalCamera) SetGamepadAngularSensibility(gamepadAngularSensibility float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(gamepadAngularSensibility)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// GamepadMoveSensibility returns the GamepadMoveSensibility property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#gamepadmovesensibility
func (u *UniversalCamera) GamepadMoveSensibility(gamepadMoveSensibility float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(gamepadMoveSensibility)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetGamepadMoveSensibility sets the GamepadMoveSensibility property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#gamepadmovesensibility
func (u *UniversalCamera) SetGamepadMoveSensibility(gamepadMoveSensibility float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(gamepadMoveSensibility)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#inputs
func (u *UniversalCamera) Inputs(inputs *FreeCameraInputsManager) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(inputs.JSObject())
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#inputs
func (u *UniversalCamera) SetInputs(inputs *FreeCameraInputsManager) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(inputs.JSObject())
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// KeysDown returns the KeysDown property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#keysdown
func (u *UniversalCamera) KeysDown(keysDown float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(keysDown)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetKeysDown sets the KeysDown property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#keysdown
func (u *UniversalCamera) SetKeysDown(keysDown float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(keysDown)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// KeysLeft returns the KeysLeft property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#keysleft
func (u *UniversalCamera) KeysLeft(keysLeft float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(keysLeft)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetKeysLeft sets the KeysLeft property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#keysleft
func (u *UniversalCamera) SetKeysLeft(keysLeft float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(keysLeft)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// KeysRight returns the KeysRight property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#keysright
func (u *UniversalCamera) KeysRight(keysRight float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(keysRight)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetKeysRight sets the KeysRight property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#keysright
func (u *UniversalCamera) SetKeysRight(keysRight float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(keysRight)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// KeysUp returns the KeysUp property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#keysup
func (u *UniversalCamera) KeysUp(keysUp float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(keysUp)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetKeysUp sets the KeysUp property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#keysup
func (u *UniversalCamera) SetKeysUp(keysUp float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(keysUp)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// LockedTarget returns the LockedTarget property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#lockedtarget
func (u *UniversalCamera) LockedTarget(lockedTarget interface{}) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(lockedTarget)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetLockedTarget sets the LockedTarget property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#lockedtarget
func (u *UniversalCamera) SetLockedTarget(lockedTarget interface{}) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(lockedTarget)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// NoRotationConstraint returns the NoRotationConstraint property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#norotationconstraint
func (u *UniversalCamera) NoRotationConstraint(noRotationConstraint bool) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(noRotationConstraint)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetNoRotationConstraint sets the NoRotationConstraint property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#norotationconstraint
func (u *UniversalCamera) SetNoRotationConstraint(noRotationConstraint bool) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(noRotationConstraint)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// OnCollide returns the OnCollide property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#oncollide
func (u *UniversalCamera) OnCollide(onCollide func()) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(onCollide)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetOnCollide sets the OnCollide property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#oncollide
func (u *UniversalCamera) SetOnCollide(onCollide func()) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(onCollide)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// Rotation returns the Rotation property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#rotation
func (u *UniversalCamera) Rotation(rotation *Vector3) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(rotation.JSObject())
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetRotation sets the Rotation property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#rotation
func (u *UniversalCamera) SetRotation(rotation *Vector3) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(rotation.JSObject())
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// RotationQuaternion returns the RotationQuaternion property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#rotationquaternion
func (u *UniversalCamera) RotationQuaternion(rotationQuaternion *Quaternion) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(rotationQuaternion.JSObject())
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetRotationQuaternion sets the RotationQuaternion property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#rotationquaternion
func (u *UniversalCamera) SetRotationQuaternion(rotationQuaternion *Quaternion) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(rotationQuaternion.JSObject())
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// Speed returns the Speed property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#speed
func (u *UniversalCamera) Speed(speed float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(speed)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetSpeed sets the Speed property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#speed
func (u *UniversalCamera) SetSpeed(speed float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(speed)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// TouchAngularSensibility returns the TouchAngularSensibility property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#touchangularsensibility
func (u *UniversalCamera) TouchAngularSensibility(touchAngularSensibility float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(touchAngularSensibility)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetTouchAngularSensibility sets the TouchAngularSensibility property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#touchangularsensibility
func (u *UniversalCamera) SetTouchAngularSensibility(touchAngularSensibility float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(touchAngularSensibility)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// TouchMoveSensibility returns the TouchMoveSensibility property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#touchmovesensibility
func (u *UniversalCamera) TouchMoveSensibility(touchMoveSensibility float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(touchMoveSensibility)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetTouchMoveSensibility sets the TouchMoveSensibility property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#touchmovesensibility
func (u *UniversalCamera) SetTouchMoveSensibility(touchMoveSensibility float64) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(touchMoveSensibility)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// UpdateUpVectorFromRotation returns the UpdateUpVectorFromRotation property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#updateupvectorfromrotation
func (u *UniversalCamera) UpdateUpVectorFromRotation(updateUpVectorFromRotation bool) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(updateUpVectorFromRotation)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// SetUpdateUpVectorFromRotation sets the UpdateUpVectorFromRotation property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#updateupvectorfromrotation
func (u *UniversalCamera) SetUpdateUpVectorFromRotation(updateUpVectorFromRotation bool) *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera").New(updateUpVectorFromRotation)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

*/
