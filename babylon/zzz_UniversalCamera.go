// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// UniversalCamera represents a babylon.js UniversalCamera.
// The Universal Camera is the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. This replaces the earlier Free Camera,
// which still works and will still be found in many Playgrounds.
//
// See: http://doc.babylonjs.com/features/cameras#universal-camera
type UniversalCamera struct {
	*TouchCamera
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (u *UniversalCamera) JSObject() js.Value { return u.p }

// UniversalCamera returns a UniversalCamera JavaScript class.
func (ba *Babylon) UniversalCamera() *UniversalCamera {
	p := ba.ctx.Get("UniversalCamera")
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// UniversalCameraFromJSObject returns a wrapped UniversalCamera JavaScript class.
func UniversalCameraFromJSObject(p js.Value, ctx js.Value) *UniversalCamera {
	return &UniversalCamera{TouchCamera: TouchCameraFromJSObject(p, ctx), ctx: ctx}
}

// UniversalCameraArrayToJSArray returns a JavaScript Array for the wrapped array.
func UniversalCameraArrayToJSArray(array []*UniversalCamera) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewUniversalCamera returns a new UniversalCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#constructor
func (ba *Babylon) NewUniversalCamera(name string, position *Vector3, scene *Scene) *UniversalCamera {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("UniversalCamera").New(args...)
	return UniversalCameraFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the UniversalCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#getclassname
func (u *UniversalCamera) GetClassName() string {

	retVal := u.p.Call("getClassName")
	return retVal.String()
}

// GamepadAngularSensibility returns the GamepadAngularSensibility property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#gamepadangularsensibility
func (u *UniversalCamera) GamepadAngularSensibility() float64 {
	retVal := u.p.Get("gamepadAngularSensibility")
	return retVal.Float()
}

// SetGamepadAngularSensibility sets the GamepadAngularSensibility property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#gamepadangularsensibility
func (u *UniversalCamera) SetGamepadAngularSensibility(gamepadAngularSensibility float64) *UniversalCamera {
	u.p.Set("gamepadAngularSensibility", gamepadAngularSensibility)
	return u
}

// GamepadMoveSensibility returns the GamepadMoveSensibility property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#gamepadmovesensibility
func (u *UniversalCamera) GamepadMoveSensibility() float64 {
	retVal := u.p.Get("gamepadMoveSensibility")
	return retVal.Float()
}

// SetGamepadMoveSensibility sets the GamepadMoveSensibility property of class UniversalCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.universalcamera#gamepadmovesensibility
func (u *UniversalCamera) SetGamepadMoveSensibility(gamepadMoveSensibility float64) *UniversalCamera {
	u.p.Set("gamepadMoveSensibility", gamepadMoveSensibility)
	return u
}
