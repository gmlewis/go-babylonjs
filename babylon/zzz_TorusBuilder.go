// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TorusBuilder represents a babylon.js TorusBuilder.
// Class containing static functions to help procedurally build meshes
type TorusBuilder struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (t *TorusBuilder) JSObject() js.Value { return t.p }

// TorusBuilder returns a TorusBuilder JavaScript class.
func (ba *Babylon) TorusBuilder() *TorusBuilder {
	p := ba.ctx.Get("TorusBuilder")
	return TorusBuilderFromJSObject(p, ba.ctx)
}

// TorusBuilderFromJSObject returns a wrapped TorusBuilder JavaScript class.
func TorusBuilderFromJSObject(p js.Value, ctx js.Value) *TorusBuilder {
	return &TorusBuilder{p: p, ctx: ctx}
}

// TorusBuilderArrayToJSArray returns a JavaScript Array for the wrapped array.
func TorusBuilderArrayToJSArray(array []*TorusBuilder) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// CreateTorus calls the CreateTorus method on the TorusBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.torusbuilder#createtorus
func (t *TorusBuilder) CreateTorus(name string, options js.Value, scene JSObject) *Mesh {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)

	args = append(args, options)

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	retVal := t.p.Call("CreateTorus", args...)
	return MeshFromJSObject(retVal, t.ctx)
}
