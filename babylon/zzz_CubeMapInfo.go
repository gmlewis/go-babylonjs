// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CubeMapInfo represents a babylon.js CubeMapInfo.
// CubeMap information grouping all the data for each faces as well as the cubemap size.
type CubeMapInfo struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *CubeMapInfo) JSObject() js.Value { return c.p }

// CubeMapInfo returns a CubeMapInfo JavaScript class.
func (ba *Babylon) CubeMapInfo() *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo")
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// CubeMapInfoFromJSObject returns a wrapped CubeMapInfo JavaScript class.
func CubeMapInfoFromJSObject(p js.Value, ctx js.Value) *CubeMapInfo {
	return &CubeMapInfo{p: p, ctx: ctx}
}

// CubeMapInfoArrayToJSArray returns a JavaScript Array for the wrapped array.
func CubeMapInfoArrayToJSArray(array []*CubeMapInfo) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Back returns the Back property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#back
func (c *CubeMapInfo) Back(back js.Value) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(back)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// SetBack sets the Back property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#back
func (c *CubeMapInfo) SetBack(back js.Value) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(back)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// Down returns the Down property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#down
func (c *CubeMapInfo) Down(down js.Value) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(down)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// SetDown sets the Down property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#down
func (c *CubeMapInfo) SetDown(down js.Value) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(down)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// Format returns the Format property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#format
func (c *CubeMapInfo) Format(format float64) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(format)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// SetFormat sets the Format property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#format
func (c *CubeMapInfo) SetFormat(format float64) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(format)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// Front returns the Front property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#front
func (c *CubeMapInfo) Front(front js.Value) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(front)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// SetFront sets the Front property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#front
func (c *CubeMapInfo) SetFront(front js.Value) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(front)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// GammaSpace returns the GammaSpace property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#gammaspace
func (c *CubeMapInfo) GammaSpace(gammaSpace bool) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(gammaSpace)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// SetGammaSpace sets the GammaSpace property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#gammaspace
func (c *CubeMapInfo) SetGammaSpace(gammaSpace bool) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(gammaSpace)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// Left returns the Left property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#left
func (c *CubeMapInfo) Left(left js.Value) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(left)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#left
func (c *CubeMapInfo) SetLeft(left js.Value) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(left)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// Right returns the Right property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#right
func (c *CubeMapInfo) Right(right js.Value) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(right)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// SetRight sets the Right property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#right
func (c *CubeMapInfo) SetRight(right js.Value) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(right)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// Size returns the Size property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#size
func (c *CubeMapInfo) Size(size float64) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(size)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// SetSize sets the Size property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#size
func (c *CubeMapInfo) SetSize(size float64) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(size)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// Type returns the Type property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#type
func (c *CubeMapInfo) Type(jsType float64) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(jsType)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// SetType sets the Type property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#type
func (c *CubeMapInfo) SetType(jsType float64) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(jsType)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// Up returns the Up property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#up
func (c *CubeMapInfo) Up(up js.Value) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(up)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

// SetUp sets the Up property of class CubeMapInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.cubemapinfo#up
func (c *CubeMapInfo) SetUp(up js.Value) *CubeMapInfo {
	p := ba.ctx.Get("CubeMapInfo").New(up)
	return CubeMapInfoFromJSObject(p, ba.ctx)
}

*/
