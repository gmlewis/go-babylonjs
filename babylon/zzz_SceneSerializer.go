// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SceneSerializer represents a babylon.js SceneSerializer.
// Class used to serialize a scene into a string
type SceneSerializer struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SceneSerializer) JSObject() js.Value { return s.p }

// SceneSerializer returns a SceneSerializer JavaScript class.
func (ba *Babylon) SceneSerializer() *SceneSerializer {
	p := ba.ctx.Get("SceneSerializer")
	return SceneSerializerFromJSObject(p, ba.ctx)
}

// SceneSerializerFromJSObject returns a wrapped SceneSerializer JavaScript class.
func SceneSerializerFromJSObject(p js.Value, ctx js.Value) *SceneSerializer {
	return &SceneSerializer{p: p, ctx: ctx}
}

// SceneSerializerArrayToJSArray returns a JavaScript Array for the wrapped array.
func SceneSerializerArrayToJSArray(array []*SceneSerializer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// ClearCache calls the ClearCache method on the SceneSerializer object.
//
// https://doc.babylonjs.com/api/classes/babylon.sceneserializer#clearcache
func (s *SceneSerializer) ClearCache() {

	s.p.Call("ClearCache")
}

// Serialize calls the Serialize method on the SceneSerializer object.
//
// https://doc.babylonjs.com/api/classes/babylon.sceneserializer#serialize
func (s *SceneSerializer) Serialize(scene *Scene) interface{} {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scene.JSObject())

	retVal := s.p.Call("Serialize", args...)
	return retVal
}

// SceneSerializerSerializeMeshOpts contains optional parameters for SceneSerializer.SerializeMesh.
type SceneSerializerSerializeMeshOpts struct {
	WithParents  *bool
	WithChildren *bool
}

// SerializeMesh calls the SerializeMesh method on the SceneSerializer object.
//
// https://doc.babylonjs.com/api/classes/babylon.sceneserializer#serializemesh
func (s *SceneSerializer) SerializeMesh(toSerialize interface{}, opts *SceneSerializerSerializeMeshOpts) interface{} {
	if opts == nil {
		opts = &SceneSerializerSerializeMeshOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, toSerialize)

	if opts.WithParents == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.WithParents)
	}
	if opts.WithChildren == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.WithChildren)
	}

	retVal := s.p.Call("SerializeMesh", args...)
	return retVal
}

/*

 */
