// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IBufferView represents a babylon.js IBufferView.
// Loader interface with additional members.
type IBufferView struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IBufferView) JSObject() js.Value { return i.p }

// IBufferView returns a IBufferView JavaScript class.
func (ba *Babylon) IBufferView() *IBufferView {
	p := ba.ctx.Get("IBufferView")
	return IBufferViewFromJSObject(p, ba.ctx)
}

// IBufferViewFromJSObject returns a wrapped IBufferView JavaScript class.
func IBufferViewFromJSObject(p js.Value, ctx js.Value) *IBufferView {
	return &IBufferView{p: p, ctx: ctx}
}

// IBufferViewArrayToJSArray returns a JavaScript Array for the wrapped array.
func IBufferViewArrayToJSArray(array []*IBufferView) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Buffer returns the Buffer property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#buffer
func (i *IBufferView) Buffer(buffer float64) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(buffer)
	return IBufferViewFromJSObject(p, ba.ctx)
}

// SetBuffer sets the Buffer property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#buffer
func (i *IBufferView) SetBuffer(buffer float64) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(buffer)
	return IBufferViewFromJSObject(p, ba.ctx)
}

// ByteLength returns the ByteLength property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#bytelength
func (i *IBufferView) ByteLength(byteLength float64) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(byteLength)
	return IBufferViewFromJSObject(p, ba.ctx)
}

// SetByteLength sets the ByteLength property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#bytelength
func (i *IBufferView) SetByteLength(byteLength float64) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(byteLength)
	return IBufferViewFromJSObject(p, ba.ctx)
}

// ByteOffset returns the ByteOffset property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#byteoffset
func (i *IBufferView) ByteOffset(byteOffset float64) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(byteOffset)
	return IBufferViewFromJSObject(p, ba.ctx)
}

// SetByteOffset sets the ByteOffset property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#byteoffset
func (i *IBufferView) SetByteOffset(byteOffset float64) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(byteOffset)
	return IBufferViewFromJSObject(p, ba.ctx)
}

// ByteStride returns the ByteStride property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#bytestride
func (i *IBufferView) ByteStride(byteStride float64) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(byteStride)
	return IBufferViewFromJSObject(p, ba.ctx)
}

// SetByteStride sets the ByteStride property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#bytestride
func (i *IBufferView) SetByteStride(byteStride float64) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(byteStride)
	return IBufferViewFromJSObject(p, ba.ctx)
}

// Extensions returns the Extensions property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#extensions
func (i *IBufferView) Extensions(extensions js.Value) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(extensions)
	return IBufferViewFromJSObject(p, ba.ctx)
}

// SetExtensions sets the Extensions property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#extensions
func (i *IBufferView) SetExtensions(extensions js.Value) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(extensions)
	return IBufferViewFromJSObject(p, ba.ctx)
}

// Extras returns the Extras property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#extras
func (i *IBufferView) Extras(extras interface{}) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(extras)
	return IBufferViewFromJSObject(p, ba.ctx)
}

// SetExtras sets the Extras property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#extras
func (i *IBufferView) SetExtras(extras interface{}) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(extras)
	return IBufferViewFromJSObject(p, ba.ctx)
}

// Index returns the Index property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#index
func (i *IBufferView) Index(index float64) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(index)
	return IBufferViewFromJSObject(p, ba.ctx)
}

// SetIndex sets the Index property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#index
func (i *IBufferView) SetIndex(index float64) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(index)
	return IBufferViewFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#name
func (i *IBufferView) Name(name string) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(name)
	return IBufferViewFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class IBufferView.
//
// https://doc.babylonjs.com/api/classes/babylon.ibufferview#name
func (i *IBufferView) SetName(name string) *IBufferView {
	p := ba.ctx.Get("IBufferView").New(name)
	return IBufferViewFromJSObject(p, ba.ctx)
}

*/
