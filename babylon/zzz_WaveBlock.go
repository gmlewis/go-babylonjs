// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// WaveBlock represents a babylon.js WaveBlock.
// Block used to apply wave operation to floats
type WaveBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (w *WaveBlock) JSObject() js.Value { return w.p }

// WaveBlock returns a WaveBlock JavaScript class.
func (ba *Babylon) WaveBlock() *WaveBlock {
	p := ba.ctx.Get("WaveBlock")
	return WaveBlockFromJSObject(p, ba.ctx)
}

// WaveBlockFromJSObject returns a wrapped WaveBlock JavaScript class.
func WaveBlockFromJSObject(p js.Value, ctx js.Value) *WaveBlock {
	return &WaveBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// WaveBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func WaveBlockArrayToJSArray(array []*WaveBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewWaveBlock returns a new WaveBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.waveblock
func (ba *Babylon) NewWaveBlock(name string) *WaveBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("WaveBlock").New(args...)
	return WaveBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the WaveBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.waveblock#getclassname
func (w *WaveBlock) GetClassName() string {

	retVal := w.p.Call("getClassName")
	return retVal.String()
}

// Serialize calls the Serialize method on the WaveBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.waveblock#serialize
func (w *WaveBlock) Serialize() js.Value {

	retVal := w.p.Call("serialize")
	return retVal
}

// _deserialize calls the _deserialize method on the WaveBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.waveblock#_deserialize
func (w *WaveBlock) _deserialize(serializationObject JSObject, scene *Scene, rootUrl string) {

	args := make([]interface{}, 0, 3+0)

	if serializationObject == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, serializationObject.JSObject())
	}

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	args = append(args, rootUrl)

	w.p.Call("_deserialize", args...)
}

// Input returns the Input property of class WaveBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.waveblock#input
func (w *WaveBlock) Input() *NodeMaterialConnectionPoint {
	retVal := w.p.Get("input")
	return NodeMaterialConnectionPointFromJSObject(retVal, w.ctx)
}

// SetInput sets the Input property of class WaveBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.waveblock#input
func (w *WaveBlock) SetInput(input *NodeMaterialConnectionPoint) *WaveBlock {
	w.p.Set("input", input.JSObject())
	return w
}

// Kind returns the Kind property of class WaveBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.waveblock#kind
func (w *WaveBlock) Kind() js.Value {
	retVal := w.p.Get("kind")
	return retVal
}

// SetKind sets the Kind property of class WaveBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.waveblock#kind
func (w *WaveBlock) SetKind(kind js.Value) *WaveBlock {
	w.p.Set("kind", kind)
	return w
}

// Output returns the Output property of class WaveBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.waveblock#output
func (w *WaveBlock) Output() *NodeMaterialConnectionPoint {
	retVal := w.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, w.ctx)
}

// SetOutput sets the Output property of class WaveBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.waveblock#output
func (w *WaveBlock) SetOutput(output *NodeMaterialConnectionPoint) *WaveBlock {
	w.p.Set("output", output.JSObject())
	return w
}
