// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MeshExploder represents a babylon.js MeshExploder.
// Class used to explode meshes (ie. to have a center and move them away from that center to better see the overall organization)
type MeshExploder struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MeshExploder) JSObject() js.Value { return m.p }

// MeshExploder returns a MeshExploder JavaScript class.
func (ba *Babylon) MeshExploder() *MeshExploder {
	p := ba.ctx.Get("MeshExploder")
	return MeshExploderFromJSObject(p, ba.ctx)
}

// MeshExploderFromJSObject returns a wrapped MeshExploder JavaScript class.
func MeshExploderFromJSObject(p js.Value, ctx js.Value) *MeshExploder {
	return &MeshExploder{p: p, ctx: ctx}
}

// NewMeshExploderOpts contains optional parameters for NewMeshExploder.
type NewMeshExploderOpts struct {
	CenterMesh *Mesh
}

// NewMeshExploder returns a new MeshExploder object.
//
// https://doc.babylonjs.com/api/classes/babylon.meshexploder
func (ba *Babylon) NewMeshExploder(meshes []js.Value, opts *NewMeshExploderOpts) *MeshExploder {
	if opts == nil {
		opts = &NewMeshExploderOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, meshes)

	if opts.CenterMesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.CenterMesh.JSObject())
	}

	p := ba.ctx.Get("MeshExploder").New(args...)
	return MeshExploderFromJSObject(p, ba.ctx)
}

// MeshExploderExplodeOpts contains optional parameters for MeshExploder.Explode.
type MeshExploderExplodeOpts struct {
	Direction *float64
}

// Explode calls the Explode method on the MeshExploder object.
//
// https://doc.babylonjs.com/api/classes/babylon.meshexploder#explode
func (m *MeshExploder) Explode(opts *MeshExploderExplodeOpts) {
	if opts == nil {
		opts = &MeshExploderExplodeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Direction == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Direction)
	}

	m.p.Call("explode", args...)
}

// GetClassName calls the GetClassName method on the MeshExploder object.
//
// https://doc.babylonjs.com/api/classes/babylon.meshexploder#getclassname
func (m *MeshExploder) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := m.p.Call("getClassName", args...)
	return retVal.String()
}

// GetMeshes calls the GetMeshes method on the MeshExploder object.
//
// https://doc.babylonjs.com/api/classes/babylon.meshexploder#getmeshes
func (m *MeshExploder) GetMeshes() []js.Value {

	args := make([]interface{}, 0, 0+0)

	retVal := m.p.Call("getMeshes", args...)
	return retVal
}

/*

 */
