// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// VideoRecorderOptions represents a babylon.js VideoRecorderOptions.
// This represents the different options available for the video capture.
type VideoRecorderOptions struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *VideoRecorderOptions) JSObject() js.Value { return v.p }

// VideoRecorderOptions returns a VideoRecorderOptions JavaScript class.
func (ba *Babylon) VideoRecorderOptions() *VideoRecorderOptions {
	p := ba.ctx.Get("VideoRecorderOptions")
	return VideoRecorderOptionsFromJSObject(p, ba.ctx)
}

// VideoRecorderOptionsFromJSObject returns a wrapped VideoRecorderOptions JavaScript class.
func VideoRecorderOptionsFromJSObject(p js.Value, ctx js.Value) *VideoRecorderOptions {
	return &VideoRecorderOptions{p: p, ctx: ctx}
}

// VideoRecorderOptionsArrayToJSArray returns a JavaScript Array for the wrapped array.
func VideoRecorderOptionsArrayToJSArray(array []*VideoRecorderOptions) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// AudioTracks returns the AudioTracks property of class VideoRecorderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.videorecorderoptions#audiotracks
func (v *VideoRecorderOptions) AudioTracks(audioTracks *MediaStreamTrack) *VideoRecorderOptions {
	p := ba.ctx.Get("VideoRecorderOptions").New(audioTracks.JSObject())
	return VideoRecorderOptionsFromJSObject(p, ba.ctx)
}

// SetAudioTracks sets the AudioTracks property of class VideoRecorderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.videorecorderoptions#audiotracks
func (v *VideoRecorderOptions) SetAudioTracks(audioTracks *MediaStreamTrack) *VideoRecorderOptions {
	p := ba.ctx.Get("VideoRecorderOptions").New(audioTracks.JSObject())
	return VideoRecorderOptionsFromJSObject(p, ba.ctx)
}

// Fps returns the Fps property of class VideoRecorderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.videorecorderoptions#fps
func (v *VideoRecorderOptions) Fps(fps float64) *VideoRecorderOptions {
	p := ba.ctx.Get("VideoRecorderOptions").New(fps)
	return VideoRecorderOptionsFromJSObject(p, ba.ctx)
}

// SetFps sets the Fps property of class VideoRecorderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.videorecorderoptions#fps
func (v *VideoRecorderOptions) SetFps(fps float64) *VideoRecorderOptions {
	p := ba.ctx.Get("VideoRecorderOptions").New(fps)
	return VideoRecorderOptionsFromJSObject(p, ba.ctx)
}

// MimeType returns the MimeType property of class VideoRecorderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.videorecorderoptions#mimetype
func (v *VideoRecorderOptions) MimeType(mimeType string) *VideoRecorderOptions {
	p := ba.ctx.Get("VideoRecorderOptions").New(mimeType)
	return VideoRecorderOptionsFromJSObject(p, ba.ctx)
}

// SetMimeType sets the MimeType property of class VideoRecorderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.videorecorderoptions#mimetype
func (v *VideoRecorderOptions) SetMimeType(mimeType string) *VideoRecorderOptions {
	p := ba.ctx.Get("VideoRecorderOptions").New(mimeType)
	return VideoRecorderOptionsFromJSObject(p, ba.ctx)
}

// RecordChunckSize returns the RecordChunckSize property of class VideoRecorderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.videorecorderoptions#recordchuncksize
func (v *VideoRecorderOptions) RecordChunckSize(recordChunckSize float64) *VideoRecorderOptions {
	p := ba.ctx.Get("VideoRecorderOptions").New(recordChunckSize)
	return VideoRecorderOptionsFromJSObject(p, ba.ctx)
}

// SetRecordChunckSize sets the RecordChunckSize property of class VideoRecorderOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.videorecorderoptions#recordchuncksize
func (v *VideoRecorderOptions) SetRecordChunckSize(recordChunckSize float64) *VideoRecorderOptions {
	p := ba.ctx.Get("VideoRecorderOptions").New(recordChunckSize)
	return VideoRecorderOptionsFromJSObject(p, ba.ctx)
}

*/
