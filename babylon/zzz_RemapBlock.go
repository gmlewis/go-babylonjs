// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RemapBlock represents a babylon.js RemapBlock.
// Block used to remap a float from a range to a new one
type RemapBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RemapBlock) JSObject() js.Value { return r.p }

// RemapBlock returns a RemapBlock JavaScript class.
func (ba *Babylon) RemapBlock() *RemapBlock {
	p := ba.ctx.Get("RemapBlock")
	return RemapBlockFromJSObject(p, ba.ctx)
}

// RemapBlockFromJSObject returns a wrapped RemapBlock JavaScript class.
func RemapBlockFromJSObject(p js.Value, ctx js.Value) *RemapBlock {
	return &RemapBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// RemapBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func RemapBlockArrayToJSArray(array []*RemapBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewRemapBlock returns a new RemapBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock
func (ba *Babylon) NewRemapBlock(name string) *RemapBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("RemapBlock").New(args...)
	return RemapBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the RemapBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#getclassname
func (r *RemapBlock) GetClassName() string {

	retVal := r.p.Call("getClassName")
	return retVal.String()
}

// Serialize calls the Serialize method on the RemapBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#serialize
func (r *RemapBlock) Serialize() js.Value {

	retVal := r.p.Call("serialize")
	return retVal
}

// _deserialize calls the _deserialize method on the RemapBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#_deserialize
func (r *RemapBlock) _deserialize(serializationObject JSObject, scene *Scene, rootUrl string) {

	args := make([]interface{}, 0, 3+0)

	if serializationObject == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, serializationObject.JSObject())
	}

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	args = append(args, rootUrl)

	r.p.Call("_deserialize", args...)
}

// Input returns the Input property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#input
func (r *RemapBlock) Input() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("input")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetInput sets the Input property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#input
func (r *RemapBlock) SetInput(input *NodeMaterialConnectionPoint) *RemapBlock {
	r.p.Set("input", input.JSObject())
	return r
}

// Output returns the Output property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#output
func (r *RemapBlock) Output() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetOutput sets the Output property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#output
func (r *RemapBlock) SetOutput(output *NodeMaterialConnectionPoint) *RemapBlock {
	r.p.Set("output", output.JSObject())
	return r
}

// SourceMax returns the SourceMax property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#sourcemax
func (r *RemapBlock) SourceMax() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("sourceMax")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetSourceMax sets the SourceMax property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#sourcemax
func (r *RemapBlock) SetSourceMax(sourceMax *NodeMaterialConnectionPoint) *RemapBlock {
	r.p.Set("sourceMax", sourceMax.JSObject())
	return r
}

// SourceMin returns the SourceMin property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#sourcemin
func (r *RemapBlock) SourceMin() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("sourceMin")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetSourceMin sets the SourceMin property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#sourcemin
func (r *RemapBlock) SetSourceMin(sourceMin *NodeMaterialConnectionPoint) *RemapBlock {
	r.p.Set("sourceMin", sourceMin.JSObject())
	return r
}

// SourceRange returns the SourceRange property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#sourcerange
func (r *RemapBlock) SourceRange() *Vector2 {
	retVal := r.p.Get("sourceRange")
	return Vector2FromJSObject(retVal, r.ctx)
}

// SetSourceRange sets the SourceRange property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#sourcerange
func (r *RemapBlock) SetSourceRange(sourceRange *Vector2) *RemapBlock {
	r.p.Set("sourceRange", sourceRange.JSObject())
	return r
}

// TargetMax returns the TargetMax property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#targetmax
func (r *RemapBlock) TargetMax() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("targetMax")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetTargetMax sets the TargetMax property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#targetmax
func (r *RemapBlock) SetTargetMax(targetMax *NodeMaterialConnectionPoint) *RemapBlock {
	r.p.Set("targetMax", targetMax.JSObject())
	return r
}

// TargetMin returns the TargetMin property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#targetmin
func (r *RemapBlock) TargetMin() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("targetMin")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetTargetMin sets the TargetMin property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#targetmin
func (r *RemapBlock) SetTargetMin(targetMin *NodeMaterialConnectionPoint) *RemapBlock {
	r.p.Set("targetMin", targetMin.JSObject())
	return r
}

// TargetRange returns the TargetRange property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#targetrange
func (r *RemapBlock) TargetRange() *Vector2 {
	retVal := r.p.Get("targetRange")
	return Vector2FromJSObject(retVal, r.ctx)
}

// SetTargetRange sets the TargetRange property of class RemapBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.remapblock#targetrange
func (r *RemapBlock) SetTargetRange(targetRange *Vector2) *RemapBlock {
	r.p.Set("targetRange", targetRange.JSObject())
	return r
}
