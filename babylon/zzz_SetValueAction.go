// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SetValueAction represents a babylon.js SetValueAction.
// This defines an action responsible to set a property of the target
// to a desired value once triggered.
//
// See: http://doc.babylonjs.com/how_to/how_to_use_actions
type SetValueAction struct {
	*Action
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SetValueAction) JSObject() js.Value { return s.p }

// SetValueAction returns a SetValueAction JavaScript class.
func (ba *Babylon) SetValueAction() *SetValueAction {
	p := ba.ctx.Get("SetValueAction")
	return SetValueActionFromJSObject(p, ba.ctx)
}

// SetValueActionFromJSObject returns a wrapped SetValueAction JavaScript class.
func SetValueActionFromJSObject(p js.Value, ctx js.Value) *SetValueAction {
	return &SetValueAction{Action: ActionFromJSObject(p, ctx), ctx: ctx}
}

// SetValueActionArrayToJSArray returns a JavaScript Array for the wrapped array.
func SetValueActionArrayToJSArray(array []*SetValueAction) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewSetValueActionOpts contains optional parameters for NewSetValueAction.
type NewSetValueActionOpts struct {
	Condition *Condition
}

// NewSetValueAction returns a new SetValueAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.setvalueaction
func (ba *Babylon) NewSetValueAction(triggerOptions JSObject, target JSObject, propertyPath string, value JSObject, opts *NewSetValueActionOpts) *SetValueAction {
	if opts == nil {
		opts = &NewSetValueActionOpts{}
	}

	args := make([]interface{}, 0, 4+1)

	args = append(args, triggerOptions.JSObject())
	args = append(args, target.JSObject())
	args = append(args, propertyPath)
	args = append(args, value.JSObject())

	if opts.Condition == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Condition.JSObject())
	}

	p := ba.ctx.Get("SetValueAction").New(args...)
	return SetValueActionFromJSObject(p, ba.ctx)
}

// Execute calls the Execute method on the SetValueAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.setvalueaction#execute
func (s *SetValueAction) Execute() {

	s.p.Call("execute")
}

// Serialize calls the Serialize method on the SetValueAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.setvalueaction#serialize
func (s *SetValueAction) Serialize(parent JSObject) js.Value {

	args := make([]interface{}, 0, 1+0)

	if parent == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, parent.JSObject())
	}

	retVal := s.p.Call("serialize", args...)
	return retVal
}

// PropertyPath returns the PropertyPath property of class SetValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.setvalueaction#propertypath
func (s *SetValueAction) PropertyPath() string {
	retVal := s.p.Get("propertyPath")
	return retVal.String()
}

// SetPropertyPath sets the PropertyPath property of class SetValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.setvalueaction#propertypath
func (s *SetValueAction) SetPropertyPath(propertyPath string) *SetValueAction {
	s.p.Set("propertyPath", propertyPath)
	return s
}

// Value returns the Value property of class SetValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.setvalueaction#value
func (s *SetValueAction) Value() js.Value {
	retVal := s.p.Get("value")
	return retVal
}

// SetValue sets the Value property of class SetValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.setvalueaction#value
func (s *SetValueAction) SetValue(value JSObject) *SetValueAction {
	s.p.Set("value", value.JSObject())
	return s
}
