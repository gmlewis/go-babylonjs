// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PosterizeBlock represents a babylon.js PosterizeBlock.
// Block used to posterize a value
//
// See: https://en.wikipedia.org/wiki/Posterization
type PosterizeBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PosterizeBlock) JSObject() js.Value { return p.p }

// PosterizeBlock returns a PosterizeBlock JavaScript class.
func (ba *Babylon) PosterizeBlock() *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock")
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// PosterizeBlockFromJSObject returns a wrapped PosterizeBlock JavaScript class.
func PosterizeBlockFromJSObject(p js.Value, ctx js.Value) *PosterizeBlock {
	return &PosterizeBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// PosterizeBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func PosterizeBlockArrayToJSArray(array []*PosterizeBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPosterizeBlock returns a new PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock
func (ba *Babylon) NewPosterizeBlock(name string) *PosterizeBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("PosterizeBlock").New(args...)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#autoconfigure
func (p *PosterizeBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	p.p.Call("autoConfigure", args...)
}

// PosterizeBlockBindOpts contains optional parameters for PosterizeBlock.Bind.
type PosterizeBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#bind
func (p *PosterizeBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *PosterizeBlockBindOpts) {
	if opts == nil {
		opts = &PosterizeBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	p.p.Call("bind", args...)
}

// Build calls the Build method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#build
func (p *PosterizeBlock) Build(state *NodeMaterialBuildState, activeBlocks *NodeMaterialBlock) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, state.JSObject())
	args = append(args, activeBlocks.JSObject())

	retVal := p.p.Call("build", args...)
	return retVal.Bool()
}

// PosterizeBlockCloneOpts contains optional parameters for PosterizeBlock.Clone.
type PosterizeBlockCloneOpts struct {
	RootUrl *string
}

// Clone calls the Clone method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#clone
func (p *PosterizeBlock) Clone(scene *Scene, opts *PosterizeBlockCloneOpts) *NodeMaterialBlock {
	if opts == nil {
		opts = &PosterizeBlockCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := p.p.Call("clone", args...)
	return NodeMaterialBlockFromJSObject(retVal, p.ctx)
}

// PosterizeBlockConnectToOpts contains optional parameters for PosterizeBlock.ConnectTo.
type PosterizeBlockConnectToOpts struct {
	Options map[string]interface{}
}

// ConnectTo calls the ConnectTo method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#connectto
func (p *PosterizeBlock) ConnectTo(other *NodeMaterialBlock, opts *PosterizeBlockConnectToOpts) *PosterizeBlock {
	if opts == nil {
		opts = &PosterizeBlockConnectToOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, other.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := p.p.Call("connectTo", args...)
	return PosterizeBlockFromJSObject(retVal, p.ctx)
}

// Dispose calls the Dispose method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#dispose
func (p *PosterizeBlock) Dispose() {

	p.p.Call("dispose")
}

// GetClassName calls the GetClassName method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#getclassname
func (p *PosterizeBlock) GetClassName() string {

	retVal := p.p.Call("getClassName")
	return retVal.String()
}

// PosterizeBlockGetFirstAvailableInputOpts contains optional parameters for PosterizeBlock.GetFirstAvailableInput.
type PosterizeBlockGetFirstAvailableInputOpts struct {
	ForOutput *NodeMaterialConnectionPoint
}

// GetFirstAvailableInput calls the GetFirstAvailableInput method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#getfirstavailableinput
func (p *PosterizeBlock) GetFirstAvailableInput(opts *PosterizeBlockGetFirstAvailableInputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &PosterizeBlockGetFirstAvailableInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForOutput == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForOutput.JSObject())
	}

	retVal := p.p.Call("getFirstAvailableInput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// PosterizeBlockGetFirstAvailableOutputOpts contains optional parameters for PosterizeBlock.GetFirstAvailableOutput.
type PosterizeBlockGetFirstAvailableOutputOpts struct {
	ForBlock *NodeMaterialBlock
}

// GetFirstAvailableOutput calls the GetFirstAvailableOutput method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#getfirstavailableoutput
func (p *PosterizeBlock) GetFirstAvailableOutput(opts *PosterizeBlockGetFirstAvailableOutputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &PosterizeBlockGetFirstAvailableOutputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForBlock == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForBlock.JSObject())
	}

	retVal := p.p.Call("getFirstAvailableOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// GetInputByName calls the GetInputByName method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#getinputbyname
func (p *PosterizeBlock) GetInputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := p.p.Call("getInputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// GetOutputByName calls the GetOutputByName method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#getoutputbyname
func (p *PosterizeBlock) GetOutputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := p.p.Call("getOutputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// GetSiblingOutput calls the GetSiblingOutput method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#getsiblingoutput
func (p *PosterizeBlock) GetSiblingOutput(current *NodeMaterialConnectionPoint) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, current.JSObject())

	retVal := p.p.Call("getSiblingOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, p.ctx)
}

// Initialize calls the Initialize method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#initialize
func (p *PosterizeBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	p.p.Call("initialize", args...)
}

// PosterizeBlockInitializeDefinesOpts contains optional parameters for PosterizeBlock.InitializeDefines.
type PosterizeBlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#initializedefines
func (p *PosterizeBlock) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *PosterizeBlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &PosterizeBlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	p.p.Call("initializeDefines", args...)
}

// PosterizeBlockIsReadyOpts contains optional parameters for PosterizeBlock.IsReady.
type PosterizeBlockIsReadyOpts struct {
	UseInstances *bool
}

// IsReady calls the IsReady method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#isready
func (p *PosterizeBlock) IsReady(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *PosterizeBlockIsReadyOpts) bool {
	if opts == nil {
		opts = &PosterizeBlockIsReadyOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := p.p.Call("isReady", args...)
	return retVal.Bool()
}

// PosterizeBlockPrepareDefinesOpts contains optional parameters for PosterizeBlock.PrepareDefines.
type PosterizeBlockPrepareDefinesOpts struct {
	UseInstances *bool
}

// PrepareDefines calls the PrepareDefines method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#preparedefines
func (p *PosterizeBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *PosterizeBlockPrepareDefinesOpts) {
	if opts == nil {
		opts = &PosterizeBlockPrepareDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	p.p.Call("prepareDefines", args...)
}

// ProvideFallbacks calls the ProvideFallbacks method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#providefallbacks
func (p *PosterizeBlock) ProvideFallbacks(mesh *AbstractMesh, fallbacks *EffectFallbacks) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, fallbacks.JSObject())

	p.p.Call("provideFallbacks", args...)
}

// PosterizeBlockRegisterInputOpts contains optional parameters for PosterizeBlock.RegisterInput.
type PosterizeBlockRegisterInputOpts struct {
	IsOptional *bool
	Target     js.Value
}

// RegisterInput calls the RegisterInput method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#registerinput
func (p *PosterizeBlock) RegisterInput(name string, jsType js.Value, opts *PosterizeBlockRegisterInputOpts) *PosterizeBlock {
	if opts == nil {
		opts = &PosterizeBlockRegisterInputOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, jsType)

	if opts.IsOptional == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsOptional)
	}
	args = append(args, opts.Target)

	retVal := p.p.Call("registerInput", args...)
	return PosterizeBlockFromJSObject(retVal, p.ctx)
}

// PosterizeBlockRegisterOutputOpts contains optional parameters for PosterizeBlock.RegisterOutput.
type PosterizeBlockRegisterOutputOpts struct {
	Target js.Value
}

// RegisterOutput calls the RegisterOutput method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#registeroutput
func (p *PosterizeBlock) RegisterOutput(name string, jsType js.Value, opts *PosterizeBlockRegisterOutputOpts) *PosterizeBlock {
	if opts == nil {
		opts = &PosterizeBlockRegisterOutputOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, jsType)

	args = append(args, opts.Target)

	retVal := p.p.Call("registerOutput", args...)
	return PosterizeBlockFromJSObject(retVal, p.ctx)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#replacerepeatablecontent
func (p *PosterizeBlock) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	p.p.Call("replaceRepeatableContent", args...)
}

// Serialize calls the Serialize method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#serialize
func (p *PosterizeBlock) Serialize() interface{} {

	retVal := p.p.Call("serialize")
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the PosterizeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#updateuniformsandsamples
func (p *PosterizeBlock) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers string) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, state.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)
	args = append(args, uniformBuffers)

	p.p.Call("updateUniformsAndSamples", args...)
}

/*

// BuildId returns the BuildId property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#buildid
func (p *PosterizeBlock) BuildId(buildId float64) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(buildId)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// SetBuildId sets the BuildId property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#buildid
func (p *PosterizeBlock) SetBuildId(buildId float64) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(buildId)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// Comments returns the Comments property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#comments
func (p *PosterizeBlock) Comments(comments string) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(comments)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// SetComments sets the Comments property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#comments
func (p *PosterizeBlock) SetComments(comments string) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(comments)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#inputs
func (p *PosterizeBlock) Inputs(inputs *NodeMaterialConnectionPoint) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(inputs.JSObject())
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#inputs
func (p *PosterizeBlock) SetInputs(inputs *NodeMaterialConnectionPoint) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(inputs.JSObject())
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// IsFinalMerger returns the IsFinalMerger property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#isfinalmerger
func (p *PosterizeBlock) IsFinalMerger(isFinalMerger bool) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(isFinalMerger)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// SetIsFinalMerger sets the IsFinalMerger property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#isfinalmerger
func (p *PosterizeBlock) SetIsFinalMerger(isFinalMerger bool) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(isFinalMerger)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// IsInput returns the IsInput property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#isinput
func (p *PosterizeBlock) IsInput(isInput bool) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(isInput)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// SetIsInput sets the IsInput property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#isinput
func (p *PosterizeBlock) SetIsInput(isInput bool) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(isInput)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// IsUnique returns the IsUnique property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#isunique
func (p *PosterizeBlock) IsUnique(isUnique bool) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(isUnique)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// SetIsUnique sets the IsUnique property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#isunique
func (p *PosterizeBlock) SetIsUnique(isUnique bool) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(isUnique)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#name
func (p *PosterizeBlock) Name(name string) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(name)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#name
func (p *PosterizeBlock) SetName(name string) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(name)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#output
func (p *PosterizeBlock) Output(output *NodeMaterialConnectionPoint) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(output.JSObject())
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#output
func (p *PosterizeBlock) SetOutput(output *NodeMaterialConnectionPoint) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(output.JSObject())
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// Outputs returns the Outputs property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#outputs
func (p *PosterizeBlock) Outputs(outputs *NodeMaterialConnectionPoint) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(outputs.JSObject())
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// SetOutputs sets the Outputs property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#outputs
func (p *PosterizeBlock) SetOutputs(outputs *NodeMaterialConnectionPoint) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(outputs.JSObject())
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// Steps returns the Steps property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#steps
func (p *PosterizeBlock) Steps(steps *NodeMaterialConnectionPoint) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(steps.JSObject())
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// SetSteps sets the Steps property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#steps
func (p *PosterizeBlock) SetSteps(steps *NodeMaterialConnectionPoint) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(steps.JSObject())
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#target
func (p *PosterizeBlock) Target(target js.Value) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(target)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#target
func (p *PosterizeBlock) SetTarget(target js.Value) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(target)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#uniqueid
func (p *PosterizeBlock) UniqueId(uniqueId float64) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(uniqueId)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#uniqueid
func (p *PosterizeBlock) SetUniqueId(uniqueId float64) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(uniqueId)
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// Value returns the Value property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#value
func (p *PosterizeBlock) Value(value *NodeMaterialConnectionPoint) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(value.JSObject())
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

// SetValue sets the Value property of class PosterizeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.posterizeblock#value
func (p *PosterizeBlock) SetValue(value *NodeMaterialConnectionPoint) *PosterizeBlock {
	p := ba.ctx.Get("PosterizeBlock").New(value.JSObject())
	return PosterizeBlockFromJSObject(p, ba.ctx)
}

*/
