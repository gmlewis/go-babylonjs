// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MultiplyBlock represents a babylon.js MultiplyBlock.
// Block used to multiply 2 values
type MultiplyBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MultiplyBlock) JSObject() js.Value { return m.p }

// MultiplyBlock returns a MultiplyBlock JavaScript class.
func (ba *Babylon) MultiplyBlock() *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock")
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// MultiplyBlockFromJSObject returns a wrapped MultiplyBlock JavaScript class.
func MultiplyBlockFromJSObject(p js.Value, ctx js.Value) *MultiplyBlock {
	return &MultiplyBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// MultiplyBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func MultiplyBlockArrayToJSArray(array []*MultiplyBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewMultiplyBlock returns a new MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock
func (ba *Babylon) NewMultiplyBlock(name string) *MultiplyBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("MultiplyBlock").New(args...)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#getclassname
func (m *MultiplyBlock) GetClassName() string {

	retVal := m.p.Call("getClassName")
	return retVal.String()
}

// Left returns the Left property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#left
func (m *MultiplyBlock) Left() *NodeMaterialConnectionPoint {
	retVal := m.p.Get("left")
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// SetLeft sets the Left property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#left
func (m *MultiplyBlock) SetLeft(left *NodeMaterialConnectionPoint) *MultiplyBlock {
	m.p.Set("left", left.JSObject())
	return m
}

// Output returns the Output property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#output
func (m *MultiplyBlock) Output() *NodeMaterialConnectionPoint {
	retVal := m.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// SetOutput sets the Output property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#output
func (m *MultiplyBlock) SetOutput(output *NodeMaterialConnectionPoint) *MultiplyBlock {
	m.p.Set("output", output.JSObject())
	return m
}

// Right returns the Right property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#right
func (m *MultiplyBlock) Right() *NodeMaterialConnectionPoint {
	retVal := m.p.Get("right")
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// SetRight sets the Right property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#right
func (m *MultiplyBlock) SetRight(right *NodeMaterialConnectionPoint) *MultiplyBlock {
	m.p.Set("right", right.JSObject())
	return m
}
