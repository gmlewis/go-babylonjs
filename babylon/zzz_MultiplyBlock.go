// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MultiplyBlock represents a babylon.js MultiplyBlock.
// Block used to multiply 2 values
type MultiplyBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MultiplyBlock) JSObject() js.Value { return m.p }

// MultiplyBlock returns a MultiplyBlock JavaScript class.
func (ba *Babylon) MultiplyBlock() *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock")
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// MultiplyBlockFromJSObject returns a wrapped MultiplyBlock JavaScript class.
func MultiplyBlockFromJSObject(p js.Value, ctx js.Value) *MultiplyBlock {
	return &MultiplyBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// NewMultiplyBlock returns a new MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock
func (ba *Babylon) NewMultiplyBlock(name string) *MultiplyBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("MultiplyBlock").New(args...)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#autoconfigure
func (m *MultiplyBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	m.p.Call("autoConfigure", args...)
}

// MultiplyBlockBindOpts contains optional parameters for MultiplyBlock.Bind.
type MultiplyBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#bind
func (m *MultiplyBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *MultiplyBlockBindOpts) {
	if opts == nil {
		opts = &MultiplyBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	m.p.Call("bind", args...)
}

// Build calls the Build method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#build
func (m *MultiplyBlock) Build(state *NodeMaterialBuildState, activeBlocks *NodeMaterialBlock) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, state.JSObject())
	args = append(args, activeBlocks.JSObject())

	retVal := m.p.Call("build", args...)
	return retVal.Bool()
}

// MultiplyBlockCloneOpts contains optional parameters for MultiplyBlock.Clone.
type MultiplyBlockCloneOpts struct {
	RootUrl *string
}

// Clone calls the Clone method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#clone
func (m *MultiplyBlock) Clone(scene *Scene, opts *MultiplyBlockCloneOpts) *NodeMaterialBlock {
	if opts == nil {
		opts = &MultiplyBlockCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := m.p.Call("clone", args...)
	return NodeMaterialBlockFromJSObject(retVal, m.ctx)
}

// MultiplyBlockConnectToOpts contains optional parameters for MultiplyBlock.ConnectTo.
type MultiplyBlockConnectToOpts struct {
	Options js.Value
}

// ConnectTo calls the ConnectTo method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#connectto
func (m *MultiplyBlock) ConnectTo(other *NodeMaterialBlock, opts *MultiplyBlockConnectToOpts) *MultiplyBlock {
	if opts == nil {
		opts = &MultiplyBlockConnectToOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, other.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := m.p.Call("connectTo", args...)
	return MultiplyBlockFromJSObject(retVal, m.ctx)
}

// Dispose calls the Dispose method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#dispose
func (m *MultiplyBlock) Dispose() {

	args := make([]interface{}, 0, 0+0)

	m.p.Call("dispose", args...)
}

// GetClassName calls the GetClassName method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#getclassname
func (m *MultiplyBlock) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := m.p.Call("getClassName", args...)
	return retVal.String()
}

// MultiplyBlockGetFirstAvailableInputOpts contains optional parameters for MultiplyBlock.GetFirstAvailableInput.
type MultiplyBlockGetFirstAvailableInputOpts struct {
	ForOutput *NodeMaterialConnectionPoint
}

// GetFirstAvailableInput calls the GetFirstAvailableInput method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#getfirstavailableinput
func (m *MultiplyBlock) GetFirstAvailableInput(opts *MultiplyBlockGetFirstAvailableInputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &MultiplyBlockGetFirstAvailableInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForOutput == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForOutput.JSObject())
	}

	retVal := m.p.Call("getFirstAvailableInput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// MultiplyBlockGetFirstAvailableOutputOpts contains optional parameters for MultiplyBlock.GetFirstAvailableOutput.
type MultiplyBlockGetFirstAvailableOutputOpts struct {
	ForBlock *NodeMaterialBlock
}

// GetFirstAvailableOutput calls the GetFirstAvailableOutput method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#getfirstavailableoutput
func (m *MultiplyBlock) GetFirstAvailableOutput(opts *MultiplyBlockGetFirstAvailableOutputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &MultiplyBlockGetFirstAvailableOutputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForBlock == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForBlock.JSObject())
	}

	retVal := m.p.Call("getFirstAvailableOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// GetInputByName calls the GetInputByName method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#getinputbyname
func (m *MultiplyBlock) GetInputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := m.p.Call("getInputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// GetOutputByName calls the GetOutputByName method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#getoutputbyname
func (m *MultiplyBlock) GetOutputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := m.p.Call("getOutputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// GetSiblingOutput calls the GetSiblingOutput method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#getsiblingoutput
func (m *MultiplyBlock) GetSiblingOutput(current *NodeMaterialConnectionPoint) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, current.JSObject())

	retVal := m.p.Call("getSiblingOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// Initialize calls the Initialize method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#initialize
func (m *MultiplyBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	m.p.Call("initialize", args...)
}

// MultiplyBlockInitializeDefinesOpts contains optional parameters for MultiplyBlock.InitializeDefines.
type MultiplyBlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#initializedefines
func (m *MultiplyBlock) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *MultiplyBlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &MultiplyBlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	m.p.Call("initializeDefines", args...)
}

// MultiplyBlockIsReadyOpts contains optional parameters for MultiplyBlock.IsReady.
type MultiplyBlockIsReadyOpts struct {
	UseInstances *bool
}

// IsReady calls the IsReady method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#isready
func (m *MultiplyBlock) IsReady(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *MultiplyBlockIsReadyOpts) bool {
	if opts == nil {
		opts = &MultiplyBlockIsReadyOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := m.p.Call("isReady", args...)
	return retVal.Bool()
}

// MultiplyBlockPrepareDefinesOpts contains optional parameters for MultiplyBlock.PrepareDefines.
type MultiplyBlockPrepareDefinesOpts struct {
	UseInstances *bool
}

// PrepareDefines calls the PrepareDefines method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#preparedefines
func (m *MultiplyBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *MultiplyBlockPrepareDefinesOpts) {
	if opts == nil {
		opts = &MultiplyBlockPrepareDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	m.p.Call("prepareDefines", args...)
}

// ProvideFallbacks calls the ProvideFallbacks method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#providefallbacks
func (m *MultiplyBlock) ProvideFallbacks(mesh *AbstractMesh, fallbacks *EffectFallbacks) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, fallbacks.JSObject())

	m.p.Call("provideFallbacks", args...)
}

// MultiplyBlockRegisterInputOpts contains optional parameters for MultiplyBlock.RegisterInput.
type MultiplyBlockRegisterInputOpts struct {
	IsOptional *bool
	Target     js.Value
}

// RegisterInput calls the RegisterInput method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#registerinput
func (m *MultiplyBlock) RegisterInput(name string, jsType js.Value, opts *MultiplyBlockRegisterInputOpts) *MultiplyBlock {
	if opts == nil {
		opts = &MultiplyBlockRegisterInputOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, jsType)

	if opts.IsOptional == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsOptional)
	}
	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := m.p.Call("registerInput", args...)
	return MultiplyBlockFromJSObject(retVal, m.ctx)
}

// MultiplyBlockRegisterOutputOpts contains optional parameters for MultiplyBlock.RegisterOutput.
type MultiplyBlockRegisterOutputOpts struct {
	Target js.Value
}

// RegisterOutput calls the RegisterOutput method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#registeroutput
func (m *MultiplyBlock) RegisterOutput(name string, jsType js.Value, opts *MultiplyBlockRegisterOutputOpts) *MultiplyBlock {
	if opts == nil {
		opts = &MultiplyBlockRegisterOutputOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, jsType)

	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := m.p.Call("registerOutput", args...)
	return MultiplyBlockFromJSObject(retVal, m.ctx)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#replacerepeatablecontent
func (m *MultiplyBlock) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	m.p.Call("replaceRepeatableContent", args...)
}

// Serialize calls the Serialize method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#serialize
func (m *MultiplyBlock) Serialize() interface{} {

	args := make([]interface{}, 0, 0+0)

	retVal := m.p.Call("serialize", args...)
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the MultiplyBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#updateuniformsandsamples
func (m *MultiplyBlock) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers string) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, state.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)
	args = append(args, uniformBuffers)

	m.p.Call("updateUniformsAndSamples", args...)
}

/*

// BuildId returns the BuildId property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#buildid
func (m *MultiplyBlock) BuildId(buildId float64) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(buildId)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// SetBuildId sets the BuildId property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#buildid
func (m *MultiplyBlock) SetBuildId(buildId float64) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(buildId)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// Comments returns the Comments property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#comments
func (m *MultiplyBlock) Comments(comments string) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(comments)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// SetComments sets the Comments property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#comments
func (m *MultiplyBlock) SetComments(comments string) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(comments)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#inputs
func (m *MultiplyBlock) Inputs(inputs *NodeMaterialConnectionPoint) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(inputs.JSObject())
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#inputs
func (m *MultiplyBlock) SetInputs(inputs *NodeMaterialConnectionPoint) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(inputs.JSObject())
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// IsFinalMerger returns the IsFinalMerger property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#isfinalmerger
func (m *MultiplyBlock) IsFinalMerger(isFinalMerger bool) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(isFinalMerger)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// SetIsFinalMerger sets the IsFinalMerger property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#isfinalmerger
func (m *MultiplyBlock) SetIsFinalMerger(isFinalMerger bool) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(isFinalMerger)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// IsInput returns the IsInput property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#isinput
func (m *MultiplyBlock) IsInput(isInput bool) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(isInput)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// SetIsInput sets the IsInput property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#isinput
func (m *MultiplyBlock) SetIsInput(isInput bool) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(isInput)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// IsUnique returns the IsUnique property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#isunique
func (m *MultiplyBlock) IsUnique(isUnique bool) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(isUnique)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// SetIsUnique sets the IsUnique property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#isunique
func (m *MultiplyBlock) SetIsUnique(isUnique bool) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(isUnique)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// Left returns the Left property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#left
func (m *MultiplyBlock) Left(left *NodeMaterialConnectionPoint) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(left.JSObject())
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#left
func (m *MultiplyBlock) SetLeft(left *NodeMaterialConnectionPoint) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(left.JSObject())
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#name
func (m *MultiplyBlock) Name(name string) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(name)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#name
func (m *MultiplyBlock) SetName(name string) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(name)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#output
func (m *MultiplyBlock) Output(output *NodeMaterialConnectionPoint) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(output.JSObject())
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#output
func (m *MultiplyBlock) SetOutput(output *NodeMaterialConnectionPoint) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(output.JSObject())
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// Outputs returns the Outputs property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#outputs
func (m *MultiplyBlock) Outputs(outputs *NodeMaterialConnectionPoint) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(outputs.JSObject())
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// SetOutputs sets the Outputs property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#outputs
func (m *MultiplyBlock) SetOutputs(outputs *NodeMaterialConnectionPoint) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(outputs.JSObject())
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// Right returns the Right property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#right
func (m *MultiplyBlock) Right(right *NodeMaterialConnectionPoint) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(right.JSObject())
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// SetRight sets the Right property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#right
func (m *MultiplyBlock) SetRight(right *NodeMaterialConnectionPoint) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(right.JSObject())
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#target
func (m *MultiplyBlock) Target(target js.Value) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(target)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#target
func (m *MultiplyBlock) SetTarget(target js.Value) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(target)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#uniqueid
func (m *MultiplyBlock) UniqueId(uniqueId float64) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(uniqueId)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class MultiplyBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.multiplyblock#uniqueid
func (m *MultiplyBlock) SetUniqueId(uniqueId float64) *MultiplyBlock {
	p := ba.ctx.Get("MultiplyBlock").New(uniqueId)
	return MultiplyBlockFromJSObject(p, ba.ctx)
}

*/
