// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SolidParticle represents a babylon.js SolidParticle.
// Represents one particle of a solid particle system.
type SolidParticle struct{ p js.Value }

// JSObject returns the underlying js.Value.
func (s *SolidParticle) JSObject() js.Value { return s.p }

// SolidParticle returns a SolidParticle JavaScript class.
func (ba *Babylon) SolidParticle() *SolidParticle {
	p := ba.ctx.Get("SolidParticle")
	return SolidParticleFromJSObject(p)
}

// SolidParticleFromJSObject returns a wrapped SolidParticle JavaScript class.
func SolidParticleFromJSObject(p js.Value) *SolidParticle {
	return &SolidParticle{p: p}
}

// NewSolidParticleOpts contains optional parameters for NewSolidParticle.
type NewSolidParticleOpts struct {
	ModelBoundingInfo *BoundingInfo

	MaterialIndex *JSFloat64
}

// NewSolidParticle returns a new SolidParticle object.
//
// https://doc.babylonjs.com/api/classes/babylon.solidparticle
func (ba *Babylon) NewSolidParticle(particleIndex float64, particleId float64, positionIndex float64, indiceIndex float64, model *ModelShape, shapeId float64, idxInShape float64, sps *SolidParticleSystem, opts *NewSolidParticleOpts) *SolidParticle {
	if opts == nil {
		opts = &NewSolidParticleOpts{}
	}

	p := ba.ctx.Get("SolidParticle").New(particleIndex, particleId, positionIndex, indiceIndex, model.JSObject(), shapeId, idxInShape, sps.JSObject(), opts.ModelBoundingInfo.JSObject(), opts.MaterialIndex.JSObject())
	return SolidParticleFromJSObject(p)
}

// TODO: methods
