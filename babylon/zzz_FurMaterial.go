// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FurMaterial represents a babylon.js FurMaterial.
//
type FurMaterial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FurMaterial) JSObject() js.Value { return f.p }

// FurMaterial returns a FurMaterial JavaScript class.
func (ba *Babylon) FurMaterial() *FurMaterial {
	p := ba.ctx.Get("FurMaterial")
	return FurMaterialFromJSObject(p, ba.ctx)
}

// FurMaterialFromJSObject returns a wrapped FurMaterial JavaScript class.
func FurMaterialFromJSObject(p js.Value, ctx js.Value) *FurMaterial {
	return &FurMaterial{p: p, ctx: ctx}
}

// FurMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func FurMaterialArrayToJSArray(array []*FurMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewFurMaterial returns a new FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial
func (ba *Babylon) NewFurMaterial(name string, scene *Scene) *FurMaterial {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("FurMaterial").New(args...)
	return FurMaterialFromJSObject(p, ba.ctx)
}

// BindForSubMesh calls the BindForSubMesh method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#bindforsubmesh
func (f *FurMaterial) BindForSubMesh(world *Matrix, mesh *Mesh, subMesh *SubMesh) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, world.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	f.p.Call("bindForSubMesh", args...)
}

// Clone calls the Clone method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#clone
func (f *FurMaterial) Clone(name string) *FurMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := f.p.Call("clone", args...)
	return FurMaterialFromJSObject(retVal, f.ctx)
}

// FurMaterialDisposeOpts contains optional parameters for FurMaterial.Dispose.
type FurMaterialDisposeOpts struct {
	ForceDisposeEffect *bool
}

// Dispose calls the Dispose method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#dispose
func (f *FurMaterial) Dispose(opts *FurMaterialDisposeOpts) {
	if opts == nil {
		opts = &FurMaterialDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForceDisposeEffect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeEffect)
	}

	f.p.Call("dispose", args...)
}

// FurifyMesh calls the FurifyMesh method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furifymesh
func (f *FurMaterial) FurifyMesh(sourceMesh *Mesh, quality float64) *Mesh {

	args := make([]interface{}, 0, 2+0)

	args = append(args, sourceMesh.JSObject())
	args = append(args, quality)

	retVal := f.p.Call("FurifyMesh", args...)
	return MeshFromJSObject(retVal, f.ctx)
}

// GenerateTexture calls the GenerateTexture method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#generatetexture
func (f *FurMaterial) GenerateTexture(name string, scene *Scene) *DynamicTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	retVal := f.p.Call("GenerateTexture", args...)
	return DynamicTextureFromJSObject(retVal, f.ctx)
}

// GetActiveTextures calls the GetActiveTextures method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#getactivetextures
func (f *FurMaterial) GetActiveTextures() *BaseTexture {

	retVal := f.p.Call("getActiveTextures")
	return BaseTextureFromJSObject(retVal, f.ctx)
}

// GetAlphaTestTexture calls the GetAlphaTestTexture method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#getalphatesttexture
func (f *FurMaterial) GetAlphaTestTexture() *BaseTexture {

	retVal := f.p.Call("getAlphaTestTexture")
	return BaseTextureFromJSObject(retVal, f.ctx)
}

// GetAnimatables calls the GetAnimatables method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#getanimatables
func (f *FurMaterial) GetAnimatables() *IAnimatable {

	retVal := f.p.Call("getAnimatables")
	return IAnimatableFromJSObject(retVal, f.ctx)
}

// GetClassName calls the GetClassName method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#getclassname
func (f *FurMaterial) GetClassName() string {

	retVal := f.p.Call("getClassName")
	return retVal.String()
}

// HasTexture calls the HasTexture method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#hastexture
func (f *FurMaterial) HasTexture(texture *BaseTexture) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	retVal := f.p.Call("hasTexture", args...)
	return retVal.Bool()
}

// FurMaterialIsReadyForSubMeshOpts contains optional parameters for FurMaterial.IsReadyForSubMesh.
type FurMaterialIsReadyForSubMeshOpts struct {
	UseInstances *bool
}

// IsReadyForSubMesh calls the IsReadyForSubMesh method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#isreadyforsubmesh
func (f *FurMaterial) IsReadyForSubMesh(mesh *AbstractMesh, subMesh *SubMesh, opts *FurMaterialIsReadyForSubMeshOpts) bool {
	if opts == nil {
		opts = &FurMaterialIsReadyForSubMeshOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := f.p.Call("isReadyForSubMesh", args...)
	return retVal.Bool()
}

// NeedAlphaBlending calls the NeedAlphaBlending method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#needalphablending
func (f *FurMaterial) NeedAlphaBlending() bool {

	retVal := f.p.Call("needAlphaBlending")
	return retVal.Bool()
}

// NeedAlphaTesting calls the NeedAlphaTesting method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#needalphatesting
func (f *FurMaterial) NeedAlphaTesting() bool {

	retVal := f.p.Call("needAlphaTesting")
	return retVal.Bool()
}

// Parse calls the Parse method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#parse
func (f *FurMaterial) Parse(source interface{}, scene *Scene, rootUrl string) *FurMaterial {

	args := make([]interface{}, 0, 3+0)

	args = append(args, source)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := f.p.Call("Parse", args...)
	return FurMaterialFromJSObject(retVal, f.ctx)
}

// Serialize calls the Serialize method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#serialize
func (f *FurMaterial) Serialize() interface{} {

	retVal := f.p.Call("serialize")
	return retVal
}

// UpdateFur calls the UpdateFur method on the FurMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#updatefur
func (f *FurMaterial) UpdateFur() {

	f.p.Call("updateFur")
}

// DiffuseColor returns the DiffuseColor property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#diffusecolor
func (f *FurMaterial) DiffuseColor() *Color3 {
	retVal := f.p.Get("diffuseColor")
	return Color3FromJSObject(retVal, f.ctx)
}

// SetDiffuseColor sets the DiffuseColor property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#diffusecolor
func (f *FurMaterial) SetDiffuseColor(diffuseColor *Color3) *FurMaterial {
	f.p.Set("diffuseColor", diffuseColor.JSObject())
	return f
}

// DiffuseTexture returns the DiffuseTexture property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#diffusetexture
func (f *FurMaterial) DiffuseTexture() *BaseTexture {
	retVal := f.p.Get("diffuseTexture")
	return BaseTextureFromJSObject(retVal, f.ctx)
}

// SetDiffuseTexture sets the DiffuseTexture property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#diffusetexture
func (f *FurMaterial) SetDiffuseTexture(diffuseTexture *BaseTexture) *FurMaterial {
	f.p.Set("diffuseTexture", diffuseTexture.JSObject())
	return f
}

// DisableLighting returns the DisableLighting property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#disablelighting
func (f *FurMaterial) DisableLighting() bool {
	retVal := f.p.Get("disableLighting")
	return retVal.Bool()
}

// SetDisableLighting sets the DisableLighting property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#disablelighting
func (f *FurMaterial) SetDisableLighting(disableLighting bool) *FurMaterial {
	f.p.Set("disableLighting", disableLighting)
	return f
}

// FurAngle returns the FurAngle property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furangle
func (f *FurMaterial) FurAngle() float64 {
	retVal := f.p.Get("furAngle")
	return retVal.Float()
}

// SetFurAngle sets the FurAngle property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furangle
func (f *FurMaterial) SetFurAngle(furAngle float64) *FurMaterial {
	f.p.Set("furAngle", furAngle)
	return f
}

// FurColor returns the FurColor property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furcolor
func (f *FurMaterial) FurColor() *Color3 {
	retVal := f.p.Get("furColor")
	return Color3FromJSObject(retVal, f.ctx)
}

// SetFurColor sets the FurColor property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furcolor
func (f *FurMaterial) SetFurColor(furColor *Color3) *FurMaterial {
	f.p.Set("furColor", furColor.JSObject())
	return f
}

// FurDensity returns the FurDensity property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furdensity
func (f *FurMaterial) FurDensity() float64 {
	retVal := f.p.Get("furDensity")
	return retVal.Float()
}

// SetFurDensity sets the FurDensity property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furdensity
func (f *FurMaterial) SetFurDensity(furDensity float64) *FurMaterial {
	f.p.Set("furDensity", furDensity)
	return f
}

// FurGravity returns the FurGravity property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furgravity
func (f *FurMaterial) FurGravity() *Vector3 {
	retVal := f.p.Get("furGravity")
	return Vector3FromJSObject(retVal, f.ctx)
}

// SetFurGravity sets the FurGravity property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furgravity
func (f *FurMaterial) SetFurGravity(furGravity *Vector3) *FurMaterial {
	f.p.Set("furGravity", furGravity.JSObject())
	return f
}

// FurLength returns the FurLength property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furlength
func (f *FurMaterial) FurLength() float64 {
	retVal := f.p.Get("furLength")
	return retVal.Float()
}

// SetFurLength sets the FurLength property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furlength
func (f *FurMaterial) SetFurLength(furLength float64) *FurMaterial {
	f.p.Set("furLength", furLength)
	return f
}

// FurOcclusion returns the FurOcclusion property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furocclusion
func (f *FurMaterial) FurOcclusion() float64 {
	retVal := f.p.Get("furOcclusion")
	return retVal.Float()
}

// SetFurOcclusion sets the FurOcclusion property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furocclusion
func (f *FurMaterial) SetFurOcclusion(furOcclusion float64) *FurMaterial {
	f.p.Set("furOcclusion", furOcclusion)
	return f
}

// FurOffset returns the FurOffset property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furoffset
func (f *FurMaterial) FurOffset() float64 {
	retVal := f.p.Get("furOffset")
	return retVal.Float()
}

// SetFurOffset sets the FurOffset property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furoffset
func (f *FurMaterial) SetFurOffset(furOffset float64) *FurMaterial {
	f.p.Set("furOffset", furOffset)
	return f
}

// FurSpacing returns the FurSpacing property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furspacing
func (f *FurMaterial) FurSpacing() float64 {
	retVal := f.p.Get("furSpacing")
	return retVal.Float()
}

// SetFurSpacing sets the FurSpacing property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furspacing
func (f *FurMaterial) SetFurSpacing(furSpacing float64) *FurMaterial {
	f.p.Set("furSpacing", furSpacing)
	return f
}

// FurSpeed returns the FurSpeed property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furspeed
func (f *FurMaterial) FurSpeed() float64 {
	retVal := f.p.Get("furSpeed")
	return retVal.Float()
}

// SetFurSpeed sets the FurSpeed property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furspeed
func (f *FurMaterial) SetFurSpeed(furSpeed float64) *FurMaterial {
	f.p.Set("furSpeed", furSpeed)
	return f
}

// FurTexture returns the FurTexture property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furtexture
func (f *FurMaterial) FurTexture() *DynamicTexture {
	retVal := f.p.Get("furTexture")
	return DynamicTextureFromJSObject(retVal, f.ctx)
}

// SetFurTexture sets the FurTexture property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furtexture
func (f *FurMaterial) SetFurTexture(furTexture *DynamicTexture) *FurMaterial {
	f.p.Set("furTexture", furTexture.JSObject())
	return f
}

// FurTime returns the FurTime property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furtime
func (f *FurMaterial) FurTime() float64 {
	retVal := f.p.Get("furTime")
	return retVal.Float()
}

// SetFurTime sets the FurTime property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#furtime
func (f *FurMaterial) SetFurTime(furTime float64) *FurMaterial {
	f.p.Set("furTime", furTime)
	return f
}

// HeightTexture returns the HeightTexture property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#heighttexture
func (f *FurMaterial) HeightTexture() *BaseTexture {
	retVal := f.p.Get("heightTexture")
	return BaseTextureFromJSObject(retVal, f.ctx)
}

// SetHeightTexture sets the HeightTexture property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#heighttexture
func (f *FurMaterial) SetHeightTexture(heightTexture *BaseTexture) *FurMaterial {
	f.p.Set("heightTexture", heightTexture.JSObject())
	return f
}

// HighLevelFur returns the HighLevelFur property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#highlevelfur
func (f *FurMaterial) HighLevelFur() bool {
	retVal := f.p.Get("highLevelFur")
	return retVal.Bool()
}

// SetHighLevelFur sets the HighLevelFur property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#highlevelfur
func (f *FurMaterial) SetHighLevelFur(highLevelFur bool) *FurMaterial {
	f.p.Set("highLevelFur", highLevelFur)
	return f
}

// MaxSimultaneousLights returns the MaxSimultaneousLights property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#maxsimultaneouslights
func (f *FurMaterial) MaxSimultaneousLights() float64 {
	retVal := f.p.Get("maxSimultaneousLights")
	return retVal.Float()
}

// SetMaxSimultaneousLights sets the MaxSimultaneousLights property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#maxsimultaneouslights
func (f *FurMaterial) SetMaxSimultaneousLights(maxSimultaneousLights float64) *FurMaterial {
	f.p.Set("maxSimultaneousLights", maxSimultaneousLights)
	return f
}

// _meshes returns the _meshes property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#_meshes
func (f *FurMaterial) _meshes() *AbstractMesh {
	retVal := f.p.Get("_meshes")
	return AbstractMeshFromJSObject(retVal, f.ctx)
}

// Set_meshes sets the _meshes property of class FurMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.furmaterial#_meshes
func (f *FurMaterial) Set_meshes(_meshes *AbstractMesh) *FurMaterial {
	f.p.Set("_meshes", _meshes.JSObject())
	return f
}
