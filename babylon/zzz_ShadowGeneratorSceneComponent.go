// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ShadowGeneratorSceneComponent represents a babylon.js ShadowGeneratorSceneComponent.
// Defines the shadow generator component responsible to manage any shadow generators
// in a given scene.
type ShadowGeneratorSceneComponent struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *ShadowGeneratorSceneComponent) JSObject() js.Value { return s.p }

// ShadowGeneratorSceneComponent returns a ShadowGeneratorSceneComponent JavaScript class.
func (ba *Babylon) ShadowGeneratorSceneComponent() *ShadowGeneratorSceneComponent {
	p := ba.ctx.Get("ShadowGeneratorSceneComponent")
	return ShadowGeneratorSceneComponentFromJSObject(p, ba.ctx)
}

// ShadowGeneratorSceneComponentFromJSObject returns a wrapped ShadowGeneratorSceneComponent JavaScript class.
func ShadowGeneratorSceneComponentFromJSObject(p js.Value, ctx js.Value) *ShadowGeneratorSceneComponent {
	return &ShadowGeneratorSceneComponent{p: p, ctx: ctx}
}

// ShadowGeneratorSceneComponentArrayToJSArray returns a JavaScript Array for the wrapped array.
func ShadowGeneratorSceneComponentArrayToJSArray(array []*ShadowGeneratorSceneComponent) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewShadowGeneratorSceneComponent returns a new ShadowGeneratorSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.shadowgeneratorscenecomponent#constructor
func (ba *Babylon) NewShadowGeneratorSceneComponent(scene *Scene) *ShadowGeneratorSceneComponent {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scene.JSObject())

	p := ba.ctx.Get("ShadowGeneratorSceneComponent").New(args...)
	return ShadowGeneratorSceneComponentFromJSObject(p, ba.ctx)
}

// AddFromContainer calls the AddFromContainer method on the ShadowGeneratorSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.shadowgeneratorscenecomponent#addfromcontainer
func (s *ShadowGeneratorSceneComponent) AddFromContainer(container *AbstractScene) {

	args := make([]interface{}, 0, 1+0)

	if container == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, container.JSObject())
	}

	s.p.Call("addFromContainer", args...)
}

// Dispose calls the Dispose method on the ShadowGeneratorSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.shadowgeneratorscenecomponent#dispose
func (s *ShadowGeneratorSceneComponent) Dispose() {

	s.p.Call("dispose")
}

// Rebuild calls the Rebuild method on the ShadowGeneratorSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.shadowgeneratorscenecomponent#rebuild
func (s *ShadowGeneratorSceneComponent) Rebuild() {

	s.p.Call("rebuild")
}

// Register calls the Register method on the ShadowGeneratorSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.shadowgeneratorscenecomponent#register
func (s *ShadowGeneratorSceneComponent) Register() {

	s.p.Call("register")
}

// ShadowGeneratorSceneComponentRemoveFromContainerOpts contains optional parameters for ShadowGeneratorSceneComponent.RemoveFromContainer.
type ShadowGeneratorSceneComponentRemoveFromContainerOpts struct {
	Dispose *bool
}

// RemoveFromContainer calls the RemoveFromContainer method on the ShadowGeneratorSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.shadowgeneratorscenecomponent#removefromcontainer
func (s *ShadowGeneratorSceneComponent) RemoveFromContainer(container *AbstractScene, opts *ShadowGeneratorSceneComponentRemoveFromContainerOpts) {
	if opts == nil {
		opts = &ShadowGeneratorSceneComponentRemoveFromContainerOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	if container == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, container.JSObject())
	}

	if opts.Dispose == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Dispose)
	}

	s.p.Call("removeFromContainer", args...)
}

// Serialize calls the Serialize method on the ShadowGeneratorSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.shadowgeneratorscenecomponent#serialize
func (s *ShadowGeneratorSceneComponent) Serialize(serializationObject JSObject) {

	args := make([]interface{}, 0, 1+0)

	if serializationObject == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, serializationObject.JSObject())
	}

	s.p.Call("serialize", args...)
}

// Name returns the Name property of class ShadowGeneratorSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.shadowgeneratorscenecomponent#name
func (s *ShadowGeneratorSceneComponent) Name() string {
	retVal := s.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class ShadowGeneratorSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.shadowgeneratorscenecomponent#name
func (s *ShadowGeneratorSceneComponent) SetName(name string) *ShadowGeneratorSceneComponent {
	s.p.Set("name", name)
	return s
}

// Scene returns the Scene property of class ShadowGeneratorSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.shadowgeneratorscenecomponent#scene
func (s *ShadowGeneratorSceneComponent) Scene() *Scene {
	retVal := s.p.Get("scene")
	return SceneFromJSObject(retVal, s.ctx)
}

// SetScene sets the Scene property of class ShadowGeneratorSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.shadowgeneratorscenecomponent#scene
func (s *ShadowGeneratorSceneComponent) SetScene(scene *Scene) *ShadowGeneratorSceneComponent {
	s.p.Set("scene", scene.JSObject())
	return s
}
