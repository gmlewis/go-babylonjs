// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MultiRenderTarget represents a babylon.js MultiRenderTarget.
// A multi render target, like a render target provides the ability to render to a texture.
// Unlike the render target, it can render to several draw buffers in one draw.
// This is specially interesting in deferred rendering or for any effects requiring more than
// just one color from a single pass.
type MultiRenderTarget struct {
	*RenderTargetTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MultiRenderTarget) JSObject() js.Value { return m.p }

// MultiRenderTarget returns a MultiRenderTarget JavaScript class.
func (ba *Babylon) MultiRenderTarget() *MultiRenderTarget {
	p := ba.ctx.Get("MultiRenderTarget")
	return MultiRenderTargetFromJSObject(p, ba.ctx)
}

// MultiRenderTargetFromJSObject returns a wrapped MultiRenderTarget JavaScript class.
func MultiRenderTargetFromJSObject(p js.Value, ctx js.Value) *MultiRenderTarget {
	return &MultiRenderTarget{RenderTargetTexture: RenderTargetTextureFromJSObject(p, ctx), ctx: ctx}
}

// MultiRenderTargetArrayToJSArray returns a JavaScript Array for the wrapped array.
func MultiRenderTargetArrayToJSArray(array []*MultiRenderTarget) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewMultiRenderTargetOpts contains optional parameters for NewMultiRenderTarget.
type NewMultiRenderTargetOpts struct {
	Options *IMultiRenderTargetOptions
}

// NewMultiRenderTarget returns a new MultiRenderTarget object.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget
func (ba *Babylon) NewMultiRenderTarget(name string, size interface{}, count float64, scene *Scene, opts *NewMultiRenderTargetOpts) *MultiRenderTarget {
	if opts == nil {
		opts = &NewMultiRenderTargetOpts{}
	}

	args := make([]interface{}, 0, 4+1)

	args = append(args, name)
	args = append(args, size)
	args = append(args, count)
	args = append(args, scene.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options.JSObject())
	}

	p := ba.ctx.Get("MultiRenderTarget").New(args...)
	return MultiRenderTargetFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the MultiRenderTarget object.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget#dispose
func (m *MultiRenderTarget) Dispose() {

	m.p.Call("dispose")
}

// ReleaseInternalTextures calls the ReleaseInternalTextures method on the MultiRenderTarget object.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget#releaseinternaltextures
func (m *MultiRenderTarget) ReleaseInternalTextures() {

	m.p.Call("releaseInternalTextures")
}

// Resize calls the Resize method on the MultiRenderTarget object.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget#resize
func (m *MultiRenderTarget) Resize(size interface{}) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, size)

	m.p.Call("resize", args...)
}

/*

// DepthTexture returns the DepthTexture property of class MultiRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget#depthtexture
func (m *MultiRenderTarget) DepthTexture(depthTexture *Texture) *MultiRenderTarget {
	p := ba.ctx.Get("MultiRenderTarget").New(depthTexture.JSObject())
	return MultiRenderTargetFromJSObject(p, ba.ctx)
}

// SetDepthTexture sets the DepthTexture property of class MultiRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget#depthtexture
func (m *MultiRenderTarget) SetDepthTexture(depthTexture *Texture) *MultiRenderTarget {
	p := ba.ctx.Get("MultiRenderTarget").New(depthTexture.JSObject())
	return MultiRenderTargetFromJSObject(p, ba.ctx)
}

// IsSupported returns the IsSupported property of class MultiRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget#issupported
func (m *MultiRenderTarget) IsSupported(isSupported bool) *MultiRenderTarget {
	p := ba.ctx.Get("MultiRenderTarget").New(isSupported)
	return MultiRenderTargetFromJSObject(p, ba.ctx)
}

// SetIsSupported sets the IsSupported property of class MultiRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget#issupported
func (m *MultiRenderTarget) SetIsSupported(isSupported bool) *MultiRenderTarget {
	p := ba.ctx.Get("MultiRenderTarget").New(isSupported)
	return MultiRenderTargetFromJSObject(p, ba.ctx)
}

// Samples returns the Samples property of class MultiRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget#samples
func (m *MultiRenderTarget) Samples(samples float64) *MultiRenderTarget {
	p := ba.ctx.Get("MultiRenderTarget").New(samples)
	return MultiRenderTargetFromJSObject(p, ba.ctx)
}

// SetSamples sets the Samples property of class MultiRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget#samples
func (m *MultiRenderTarget) SetSamples(samples float64) *MultiRenderTarget {
	p := ba.ctx.Get("MultiRenderTarget").New(samples)
	return MultiRenderTargetFromJSObject(p, ba.ctx)
}

// Textures returns the Textures property of class MultiRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget#textures
func (m *MultiRenderTarget) Textures(textures *Texture) *MultiRenderTarget {
	p := ba.ctx.Get("MultiRenderTarget").New(textures.JSObject())
	return MultiRenderTargetFromJSObject(p, ba.ctx)
}

// SetTextures sets the Textures property of class MultiRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget#textures
func (m *MultiRenderTarget) SetTextures(textures *Texture) *MultiRenderTarget {
	p := ba.ctx.Get("MultiRenderTarget").New(textures.JSObject())
	return MultiRenderTargetFromJSObject(p, ba.ctx)
}

// WrapU returns the WrapU property of class MultiRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget#wrapu
func (m *MultiRenderTarget) WrapU(wrapU float64) *MultiRenderTarget {
	p := ba.ctx.Get("MultiRenderTarget").New(wrapU)
	return MultiRenderTargetFromJSObject(p, ba.ctx)
}

// SetWrapU sets the WrapU property of class MultiRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget#wrapu
func (m *MultiRenderTarget) SetWrapU(wrapU float64) *MultiRenderTarget {
	p := ba.ctx.Get("MultiRenderTarget").New(wrapU)
	return MultiRenderTargetFromJSObject(p, ba.ctx)
}

// WrapV returns the WrapV property of class MultiRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget#wrapv
func (m *MultiRenderTarget) WrapV(wrapV float64) *MultiRenderTarget {
	p := ba.ctx.Get("MultiRenderTarget").New(wrapV)
	return MultiRenderTargetFromJSObject(p, ba.ctx)
}

// SetWrapV sets the WrapV property of class MultiRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.multirendertarget#wrapv
func (m *MultiRenderTarget) SetWrapV(wrapV float64) *MultiRenderTarget {
	p := ba.ctx.Get("MultiRenderTarget").New(wrapV)
	return MultiRenderTargetFromJSObject(p, ba.ctx)
}

*/
