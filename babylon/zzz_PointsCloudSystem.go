// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PointsCloudSystem represents a babylon.js PointsCloudSystem.
// The PointCloudSystem (PCS) is a single updatable mesh. The points corresponding to the vertices of this big mesh.
// As it is just a mesh, the PointCloudSystem has all the same properties as any other BJS mesh : not more, not less. It can be scaled, rotated, translated, enlighted, textured, moved, etc.
// The PointCloudSytem is also a particle system, with each point being a particle. It provides some methods to manage the particles.
// However it is behavior agnostic. This means it has no emitter, no particle physics, no particle recycler. You have to implement your own behavior.

//
// Full documentation here : TO BE ENTERED
type PointsCloudSystem struct{}

// JSObject returns the underlying js.Value.
func (p *PointsCloudSystem) JSObject() js.Value { return p.p }

// PointsCloudSystem returns a PointsCloudSystem JavaScript class.
func (b *Babylon) PointsCloudSystem() *PointsCloudSystem {
	p := b.ctx.Get("PointsCloudSystem")
	return PointsCloudSystemFromJSObject(p)
}

// PointsCloudSystemFromJSObject returns a wrapped PointsCloudSystem JavaScript class.
func PointsCloudSystemFromJSObject(p js.Value) *PointsCloudSystem {
	return &PointsCloudSystem{p: p}
}

// NewPointsCloudSystem returns a new PointsCloudSystem object.
//
// https://doc.babylonjs.com/api/classes/babylon.pointscloudsystem
func (b *Babylon) NewPointsCloudSystem(todo parameters) *PointsCloudSystem {
	p := b.ctx.Get("PointsCloudSystem").New(todo)
	return PointsCloudSystemFromJSObject(p)
}

// TODO: methods
