// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TrigonometryBlock represents a babylon.js TrigonometryBlock.
// Block used to apply trigonometry operation to floats
type TrigonometryBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (t *TrigonometryBlock) JSObject() js.Value { return t.p }

// TrigonometryBlock returns a TrigonometryBlock JavaScript class.
func (ba *Babylon) TrigonometryBlock() *TrigonometryBlock {
	p := ba.ctx.Get("TrigonometryBlock")
	return TrigonometryBlockFromJSObject(p, ba.ctx)
}

// TrigonometryBlockFromJSObject returns a wrapped TrigonometryBlock JavaScript class.
func TrigonometryBlockFromJSObject(p js.Value, ctx js.Value) *TrigonometryBlock {
	return &TrigonometryBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// TrigonometryBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func TrigonometryBlockArrayToJSArray(array []*TrigonometryBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewTrigonometryBlock returns a new TrigonometryBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.trigonometryblock#constructor
func (ba *Babylon) NewTrigonometryBlock(name string) *TrigonometryBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("TrigonometryBlock").New(args...)
	return TrigonometryBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the TrigonometryBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.trigonometryblock#getclassname
func (t *TrigonometryBlock) GetClassName() string {

	retVal := t.p.Call("getClassName")
	return retVal.String()
}

// Serialize calls the Serialize method on the TrigonometryBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.trigonometryblock#serialize
func (t *TrigonometryBlock) Serialize() js.Value {

	retVal := t.p.Call("serialize")
	return retVal
}

// _deserialize calls the _deserialize method on the TrigonometryBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.trigonometryblock#_deserialize
func (t *TrigonometryBlock) _deserialize(serializationObject JSObject, scene *Scene, rootUrl string) {

	args := make([]interface{}, 0, 3+0)

	if serializationObject == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, serializationObject.JSObject())
	}

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	args = append(args, rootUrl)

	t.p.Call("_deserialize", args...)
}

// Input returns the Input property of class TrigonometryBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.trigonometryblock#input
func (t *TrigonometryBlock) Input() *NodeMaterialConnectionPoint {
	retVal := t.p.Get("input")
	return NodeMaterialConnectionPointFromJSObject(retVal, t.ctx)
}

// SetInput sets the Input property of class TrigonometryBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.trigonometryblock#input
func (t *TrigonometryBlock) SetInput(input *NodeMaterialConnectionPoint) *TrigonometryBlock {
	t.p.Set("input", input.JSObject())
	return t
}

// Operation returns the Operation property of class TrigonometryBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.trigonometryblock#operation
func (t *TrigonometryBlock) Operation() js.Value {
	retVal := t.p.Get("operation")
	return retVal
}

// SetOperation sets the Operation property of class TrigonometryBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.trigonometryblock#operation
func (t *TrigonometryBlock) SetOperation(operation js.Value) *TrigonometryBlock {
	t.p.Set("operation", operation)
	return t
}

// Output returns the Output property of class TrigonometryBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.trigonometryblock#output
func (t *TrigonometryBlock) Output() *NodeMaterialConnectionPoint {
	retVal := t.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, t.ctx)
}

// SetOutput sets the Output property of class TrigonometryBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.trigonometryblock#output
func (t *TrigonometryBlock) SetOutput(output *NodeMaterialConnectionPoint) *TrigonometryBlock {
	t.p.Set("output", output.JSObject())
	return t
}
