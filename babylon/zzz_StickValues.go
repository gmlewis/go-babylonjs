// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// StickValues represents a babylon.js StickValues.
// Represents a gamepad control stick position
type StickValues struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *StickValues) JSObject() js.Value { return s.p }

// StickValues returns a StickValues JavaScript class.
func (ba *Babylon) StickValues() *StickValues {
	p := ba.ctx.Get("StickValues")
	return StickValuesFromJSObject(p, ba.ctx)
}

// StickValuesFromJSObject returns a wrapped StickValues JavaScript class.
func StickValuesFromJSObject(p js.Value, ctx js.Value) *StickValues {
	return &StickValues{p: p, ctx: ctx}
}

// StickValuesArrayToJSArray returns a JavaScript Array for the wrapped array.
func StickValuesArrayToJSArray(array []*StickValues) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewStickValues returns a new StickValues object.
//
// https://doc.babylonjs.com/api/classes/babylon.stickvalues
func (ba *Babylon) NewStickValues(x float64, y float64) *StickValues {

	args := make([]interface{}, 0, 2+0)

	args = append(args, x)
	args = append(args, y)

	p := ba.ctx.Get("StickValues").New(args...)
	return StickValuesFromJSObject(p, ba.ctx)
}

/*

// X returns the X property of class StickValues.
//
// https://doc.babylonjs.com/api/classes/babylon.stickvalues#x
func (s *StickValues) X(x float64) *StickValues {
	p := ba.ctx.Get("StickValues").New(x)
	return StickValuesFromJSObject(p, ba.ctx)
}

// SetX sets the X property of class StickValues.
//
// https://doc.babylonjs.com/api/classes/babylon.stickvalues#x
func (s *StickValues) SetX(x float64) *StickValues {
	p := ba.ctx.Get("StickValues").New(x)
	return StickValuesFromJSObject(p, ba.ctx)
}

// Y returns the Y property of class StickValues.
//
// https://doc.babylonjs.com/api/classes/babylon.stickvalues#y
func (s *StickValues) Y(y float64) *StickValues {
	p := ba.ctx.Get("StickValues").New(y)
	return StickValuesFromJSObject(p, ba.ctx)
}

// SetY sets the Y property of class StickValues.
//
// https://doc.babylonjs.com/api/classes/babylon.stickvalues#y
func (s *StickValues) SetY(y float64) *StickValues {
	p := ba.ctx.Get("StickValues").New(y)
	return StickValuesFromJSObject(p, ba.ctx)
}

*/
