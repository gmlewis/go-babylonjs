// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RenderTargetTexture represents a babylon.js RenderTargetTexture.
// This Helps creating a texture that will be created from a camera in your scene.
// It is basically a dynamic texture that could be used to create special effects for instance.
// Actually, It is the base of lot of effects in the framework like post process, shadows, effect layers and rendering pipelines...
type RenderTargetTexture struct {
	*Texture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RenderTargetTexture) JSObject() js.Value { return r.p }

// RenderTargetTexture returns a RenderTargetTexture JavaScript class.
func (ba *Babylon) RenderTargetTexture() *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture")
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// RenderTargetTextureFromJSObject returns a wrapped RenderTargetTexture JavaScript class.
func RenderTargetTextureFromJSObject(p js.Value, ctx js.Value) *RenderTargetTexture {
	return &RenderTargetTexture{Texture: TextureFromJSObject(p, ctx), ctx: ctx}
}

// RenderTargetTextureArrayToJSArray returns a JavaScript Array for the wrapped array.
func RenderTargetTextureArrayToJSArray(array []*RenderTargetTexture) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewRenderTargetTextureOpts contains optional parameters for NewRenderTargetTexture.
type NewRenderTargetTextureOpts struct {
	GenerateMipMaps        *bool
	DoNotChangeAspectRatio *bool
	Type                   *float64
	IsCube                 *bool
	SamplingMode           *float64
	GenerateDepthBuffer    *bool
	GenerateStencilBuffer  *bool
	IsMulti                *bool
	Format                 *float64
	DelayAllocation        *bool
}

// NewRenderTargetTexture returns a new RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture
func (ba *Babylon) NewRenderTargetTexture(name string, size float64, scene *Scene, opts *NewRenderTargetTextureOpts) *RenderTargetTexture {
	if opts == nil {
		opts = &NewRenderTargetTextureOpts{}
	}

	args := make([]interface{}, 0, 3+10)

	args = append(args, name)
	args = append(args, size)
	args = append(args, scene.JSObject())

	if opts.GenerateMipMaps == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateMipMaps)
	}
	if opts.DoNotChangeAspectRatio == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DoNotChangeAspectRatio)
	}
	if opts.Type == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Type)
	}
	if opts.IsCube == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsCube)
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.GenerateDepthBuffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateDepthBuffer)
	}
	if opts.GenerateStencilBuffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateStencilBuffer)
	}
	if opts.IsMulti == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsMulti)
	}
	if opts.Format == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Format)
	}
	if opts.DelayAllocation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DelayAllocation)
	}

	p := ba.ctx.Get("RenderTargetTexture").New(args...)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// AddPostProcess calls the AddPostProcess method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#addpostprocess
func (r *RenderTargetTexture) AddPostProcess(postProcess *PostProcess) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, postProcess.JSObject())

	r.p.Call("addPostProcess", args...)
}

// RenderTargetTextureClearPostProcessesOpts contains optional parameters for RenderTargetTexture.ClearPostProcesses.
type RenderTargetTextureClearPostProcessesOpts struct {
	Dispose *bool
}

// ClearPostProcesses calls the ClearPostProcesses method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#clearpostprocesses
func (r *RenderTargetTexture) ClearPostProcesses(opts *RenderTargetTextureClearPostProcessesOpts) {
	if opts == nil {
		opts = &RenderTargetTextureClearPostProcessesOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Dispose == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Dispose)
	}

	r.p.Call("clearPostProcesses", args...)
}

// Clone calls the Clone method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#clone
func (r *RenderTargetTexture) Clone() *RenderTargetTexture {

	retVal := r.p.Call("clone")
	return RenderTargetTextureFromJSObject(retVal, r.ctx)
}

// RenderTargetTextureCreateDepthStencilTextureOpts contains optional parameters for RenderTargetTexture.CreateDepthStencilTexture.
type RenderTargetTextureCreateDepthStencilTextureOpts struct {
	ComparisonFunction *float64
	BilinearFiltering  *bool
	GenerateStencil    *bool
}

// CreateDepthStencilTexture calls the CreateDepthStencilTexture method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#createdepthstenciltexture
func (r *RenderTargetTexture) CreateDepthStencilTexture(opts *RenderTargetTextureCreateDepthStencilTextureOpts) {
	if opts == nil {
		opts = &RenderTargetTextureCreateDepthStencilTextureOpts{}
	}

	args := make([]interface{}, 0, 0+3)

	if opts.ComparisonFunction == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ComparisonFunction)
	}
	if opts.BilinearFiltering == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.BilinearFiltering)
	}
	if opts.GenerateStencil == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateStencil)
	}

	r.p.Call("createDepthStencilTexture", args...)
}

// Dispose calls the Dispose method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#dispose
func (r *RenderTargetTexture) Dispose() {

	r.p.Call("dispose")
}

// DisposeFramebufferObjects calls the DisposeFramebufferObjects method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#disposeframebufferobjects
func (r *RenderTargetTexture) DisposeFramebufferObjects() {

	r.p.Call("disposeFramebufferObjects")
}

// FreeRenderingGroups calls the FreeRenderingGroups method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#freerenderinggroups
func (r *RenderTargetTexture) FreeRenderingGroups() {

	r.p.Call("freeRenderingGroups")
}

// GetReflectionTextureMatrix calls the GetReflectionTextureMatrix method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#getreflectiontexturematrix
func (r *RenderTargetTexture) GetReflectionTextureMatrix() *Matrix {

	retVal := r.p.Call("getReflectionTextureMatrix")
	return MatrixFromJSObject(retVal, r.ctx)
}

// GetRenderHeight calls the GetRenderHeight method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#getrenderheight
func (r *RenderTargetTexture) GetRenderHeight() float64 {

	retVal := r.p.Call("getRenderHeight")
	return retVal.Float()
}

// GetRenderSize calls the GetRenderSize method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#getrendersize
func (r *RenderTargetTexture) GetRenderSize() float64 {

	retVal := r.p.Call("getRenderSize")
	return retVal.Float()
}

// GetRenderWidth calls the GetRenderWidth method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#getrenderwidth
func (r *RenderTargetTexture) GetRenderWidth() float64 {

	retVal := r.p.Call("getRenderWidth")
	return retVal.Float()
}

// GetViewCount calls the GetViewCount method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#getviewcount
func (r *RenderTargetTexture) GetViewCount() float64 {

	retVal := r.p.Call("getViewCount")
	return retVal.Float()
}

// RemovePostProcess calls the RemovePostProcess method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#removepostprocess
func (r *RenderTargetTexture) RemovePostProcess(postProcess *PostProcess) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, postProcess.JSObject())

	r.p.Call("removePostProcess", args...)
}

// RenderTargetTextureRenderOpts contains optional parameters for RenderTargetTexture.Render.
type RenderTargetTextureRenderOpts struct {
	UseCameraPostProcess *bool
	DumpForDebug         *bool
}

// Render calls the Render method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#render
func (r *RenderTargetTexture) Render(opts *RenderTargetTextureRenderOpts) {
	if opts == nil {
		opts = &RenderTargetTextureRenderOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.UseCameraPostProcess == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseCameraPostProcess)
	}
	if opts.DumpForDebug == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DumpForDebug)
	}

	r.p.Call("render", args...)
}

// ResetRefreshCounter calls the ResetRefreshCounter method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#resetrefreshcounter
func (r *RenderTargetTexture) ResetRefreshCounter() {

	r.p.Call("resetRefreshCounter")
}

// Resize calls the Resize method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#resize
func (r *RenderTargetTexture) Resize(size float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, size)

	r.p.Call("resize", args...)
}

// Scale calls the Scale method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#scale
func (r *RenderTargetTexture) Scale(ratio float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, ratio)

	r.p.Call("scale", args...)
}

// Serialize calls the Serialize method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#serialize
func (r *RenderTargetTexture) Serialize() interface{} {

	retVal := r.p.Call("serialize")
	return retVal
}

// SetRenderingAutoClearDepthStencil calls the SetRenderingAutoClearDepthStencil method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#setrenderingautocleardepthstencil
func (r *RenderTargetTexture) SetRenderingAutoClearDepthStencil(renderingGroupId float64, autoClearDepthStencil bool) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, renderingGroupId)
	args = append(args, autoClearDepthStencil)

	r.p.Call("setRenderingAutoClearDepthStencil", args...)
}

// RenderTargetTextureSetRenderingOrderOpts contains optional parameters for RenderTargetTexture.SetRenderingOrder.
type RenderTargetTextureSetRenderingOrderOpts struct {
	OpaqueSortCompareFn      func()
	AlphaTestSortCompareFn   func()
	TransparentSortCompareFn func()
}

// SetRenderingOrder calls the SetRenderingOrder method on the RenderTargetTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#setrenderingorder
func (r *RenderTargetTexture) SetRenderingOrder(renderingGroupId float64, opts *RenderTargetTextureSetRenderingOrderOpts) {
	if opts == nil {
		opts = &RenderTargetTextureSetRenderingOrderOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, renderingGroupId)

	if opts.OpaqueSortCompareFn == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OpaqueSortCompareFn)
	}
	if opts.AlphaTestSortCompareFn == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.AlphaTestSortCompareFn)
	}
	if opts.TransparentSortCompareFn == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.TransparentSortCompareFn)
	}

	r.p.Call("setRenderingOrder", args...)
}

/*

// ActiveCamera returns the ActiveCamera property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#activecamera
func (r *RenderTargetTexture) ActiveCamera(activeCamera *Camera) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(activeCamera.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetActiveCamera sets the ActiveCamera property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#activecamera
func (r *RenderTargetTexture) SetActiveCamera(activeCamera *Camera) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(activeCamera.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// BoundingBoxPosition returns the BoundingBoxPosition property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#boundingboxposition
func (r *RenderTargetTexture) BoundingBoxPosition(boundingBoxPosition *Vector3) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(boundingBoxPosition.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetBoundingBoxPosition sets the BoundingBoxPosition property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#boundingboxposition
func (r *RenderTargetTexture) SetBoundingBoxPosition(boundingBoxPosition *Vector3) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(boundingBoxPosition.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// BoundingBoxSize returns the BoundingBoxSize property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#boundingboxsize
func (r *RenderTargetTexture) BoundingBoxSize(boundingBoxSize *Vector3) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(boundingBoxSize.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetBoundingBoxSize sets the BoundingBoxSize property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#boundingboxsize
func (r *RenderTargetTexture) SetBoundingBoxSize(boundingBoxSize *Vector3) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(boundingBoxSize.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// CanRescale returns the CanRescale property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#canrescale
func (r *RenderTargetTexture) CanRescale(canRescale bool) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(canRescale)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetCanRescale sets the CanRescale property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#canrescale
func (r *RenderTargetTexture) SetCanRescale(canRescale bool) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(canRescale)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// ClearColor returns the ClearColor property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#clearcolor
func (r *RenderTargetTexture) ClearColor(clearColor *Color4) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(clearColor.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetClearColor sets the ClearColor property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#clearcolor
func (r *RenderTargetTexture) SetClearColor(clearColor *Color4) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(clearColor.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// CoordinatesMode returns the CoordinatesMode property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#coordinatesmode
func (r *RenderTargetTexture) CoordinatesMode(coordinatesMode float64) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(coordinatesMode)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetCoordinatesMode sets the CoordinatesMode property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#coordinatesmode
func (r *RenderTargetTexture) SetCoordinatesMode(coordinatesMode float64) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(coordinatesMode)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// CustomRenderFunction returns the CustomRenderFunction property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#customrenderfunction
func (r *RenderTargetTexture) CustomRenderFunction(customRenderFunction func()) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {customRenderFunction(); return nil}))
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetCustomRenderFunction sets the CustomRenderFunction property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#customrenderfunction
func (r *RenderTargetTexture) SetCustomRenderFunction(customRenderFunction func()) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {customRenderFunction(); return nil}))
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// DepthStencilTexture returns the DepthStencilTexture property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#depthstenciltexture
func (r *RenderTargetTexture) DepthStencilTexture(depthStencilTexture *InternalTexture) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(depthStencilTexture.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetDepthStencilTexture sets the DepthStencilTexture property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#depthstenciltexture
func (r *RenderTargetTexture) SetDepthStencilTexture(depthStencilTexture *InternalTexture) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(depthStencilTexture.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// IgnoreCameraViewport returns the IgnoreCameraViewport property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#ignorecameraviewport
func (r *RenderTargetTexture) IgnoreCameraViewport(ignoreCameraViewport bool) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(ignoreCameraViewport)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetIgnoreCameraViewport sets the IgnoreCameraViewport property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#ignorecameraviewport
func (r *RenderTargetTexture) SetIgnoreCameraViewport(ignoreCameraViewport bool) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(ignoreCameraViewport)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// IsCube returns the IsCube property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#iscube
func (r *RenderTargetTexture) IsCube(isCube bool) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(isCube)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetIsCube sets the IsCube property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#iscube
func (r *RenderTargetTexture) SetIsCube(isCube bool) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(isCube)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// OnAfterRender returns the OnAfterRender property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onafterrender
func (r *RenderTargetTexture) OnAfterRender(onAfterRender func()) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onAfterRender(); return nil}))
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetOnAfterRender sets the OnAfterRender property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onafterrender
func (r *RenderTargetTexture) SetOnAfterRender(onAfterRender func()) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onAfterRender(); return nil}))
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// OnAfterRenderObservable returns the OnAfterRenderObservable property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onafterrenderobservable
func (r *RenderTargetTexture) OnAfterRenderObservable(onAfterRenderObservable *Observable) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(onAfterRenderObservable.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetOnAfterRenderObservable sets the OnAfterRenderObservable property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onafterrenderobservable
func (r *RenderTargetTexture) SetOnAfterRenderObservable(onAfterRenderObservable *Observable) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(onAfterRenderObservable.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// OnAfterUnbind returns the OnAfterUnbind property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onafterunbind
func (r *RenderTargetTexture) OnAfterUnbind(onAfterUnbind func()) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onAfterUnbind(); return nil}))
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetOnAfterUnbind sets the OnAfterUnbind property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onafterunbind
func (r *RenderTargetTexture) SetOnAfterUnbind(onAfterUnbind func()) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onAfterUnbind(); return nil}))
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// OnAfterUnbindObservable returns the OnAfterUnbindObservable property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onafterunbindobservable
func (r *RenderTargetTexture) OnAfterUnbindObservable(onAfterUnbindObservable *Observable) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(onAfterUnbindObservable.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetOnAfterUnbindObservable sets the OnAfterUnbindObservable property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onafterunbindobservable
func (r *RenderTargetTexture) SetOnAfterUnbindObservable(onAfterUnbindObservable *Observable) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(onAfterUnbindObservable.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// OnBeforeBindObservable returns the OnBeforeBindObservable property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onbeforebindobservable
func (r *RenderTargetTexture) OnBeforeBindObservable(onBeforeBindObservable *Observable) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(onBeforeBindObservable.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetOnBeforeBindObservable sets the OnBeforeBindObservable property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onbeforebindobservable
func (r *RenderTargetTexture) SetOnBeforeBindObservable(onBeforeBindObservable *Observable) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(onBeforeBindObservable.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// OnBeforeRender returns the OnBeforeRender property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onbeforerender
func (r *RenderTargetTexture) OnBeforeRender(onBeforeRender func()) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onBeforeRender(); return nil}))
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetOnBeforeRender sets the OnBeforeRender property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onbeforerender
func (r *RenderTargetTexture) SetOnBeforeRender(onBeforeRender func()) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onBeforeRender(); return nil}))
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// OnBeforeRenderObservable returns the OnBeforeRenderObservable property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onbeforerenderobservable
func (r *RenderTargetTexture) OnBeforeRenderObservable(onBeforeRenderObservable *Observable) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(onBeforeRenderObservable.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetOnBeforeRenderObservable sets the OnBeforeRenderObservable property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onbeforerenderobservable
func (r *RenderTargetTexture) SetOnBeforeRenderObservable(onBeforeRenderObservable *Observable) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(onBeforeRenderObservable.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// OnClear returns the OnClear property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onclear
func (r *RenderTargetTexture) OnClear(onClear func()) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onClear(); return nil}))
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetOnClear sets the OnClear property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onclear
func (r *RenderTargetTexture) SetOnClear(onClear func()) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onClear(); return nil}))
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// OnClearObservable returns the OnClearObservable property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onclearobservable
func (r *RenderTargetTexture) OnClearObservable(onClearObservable *Observable) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(onClearObservable.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetOnClearObservable sets the OnClearObservable property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onclearobservable
func (r *RenderTargetTexture) SetOnClearObservable(onClearObservable *Observable) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(onClearObservable.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// OnResizeObservable returns the OnResizeObservable property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onresizeobservable
func (r *RenderTargetTexture) OnResizeObservable(onResizeObservable *Observable) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(onResizeObservable.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetOnResizeObservable sets the OnResizeObservable property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#onresizeobservable
func (r *RenderTargetTexture) SetOnResizeObservable(onResizeObservable *Observable) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(onResizeObservable.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// REFRESHRATE_RENDER_ONCE returns the REFRESHRATE_RENDER_ONCE property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#refreshrate_render_once
func (r *RenderTargetTexture) REFRESHRATE_RENDER_ONCE(REFRESHRATE_RENDER_ONCE float64) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(REFRESHRATE_RENDER_ONCE)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetREFRESHRATE_RENDER_ONCE sets the REFRESHRATE_RENDER_ONCE property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#refreshrate_render_once
func (r *RenderTargetTexture) SetREFRESHRATE_RENDER_ONCE(REFRESHRATE_RENDER_ONCE float64) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(REFRESHRATE_RENDER_ONCE)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// REFRESHRATE_RENDER_ONEVERYFRAME returns the REFRESHRATE_RENDER_ONEVERYFRAME property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#refreshrate_render_oneveryframe
func (r *RenderTargetTexture) REFRESHRATE_RENDER_ONEVERYFRAME(REFRESHRATE_RENDER_ONEVERYFRAME float64) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(REFRESHRATE_RENDER_ONEVERYFRAME)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetREFRESHRATE_RENDER_ONEVERYFRAME sets the REFRESHRATE_RENDER_ONEVERYFRAME property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#refreshrate_render_oneveryframe
func (r *RenderTargetTexture) SetREFRESHRATE_RENDER_ONEVERYFRAME(REFRESHRATE_RENDER_ONEVERYFRAME float64) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(REFRESHRATE_RENDER_ONEVERYFRAME)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// REFRESHRATE_RENDER_ONEVERYTWOFRAMES returns the REFRESHRATE_RENDER_ONEVERYTWOFRAMES property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#refreshrate_render_oneverytwoframes
func (r *RenderTargetTexture) REFRESHRATE_RENDER_ONEVERYTWOFRAMES(REFRESHRATE_RENDER_ONEVERYTWOFRAMES float64) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(REFRESHRATE_RENDER_ONEVERYTWOFRAMES)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetREFRESHRATE_RENDER_ONEVERYTWOFRAMES sets the REFRESHRATE_RENDER_ONEVERYTWOFRAMES property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#refreshrate_render_oneverytwoframes
func (r *RenderTargetTexture) SetREFRESHRATE_RENDER_ONEVERYTWOFRAMES(REFRESHRATE_RENDER_ONEVERYTWOFRAMES float64) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(REFRESHRATE_RENDER_ONEVERYTWOFRAMES)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// RefreshRate returns the RefreshRate property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#refreshrate
func (r *RenderTargetTexture) RefreshRate(refreshRate float64) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(refreshRate)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetRefreshRate sets the RefreshRate property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#refreshrate
func (r *RenderTargetTexture) SetRefreshRate(refreshRate float64) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(refreshRate)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// RenderList returns the RenderList property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#renderlist
func (r *RenderTargetTexture) RenderList(renderList []*AbstractMesh) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(renderList)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetRenderList sets the RenderList property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#renderlist
func (r *RenderTargetTexture) SetRenderList(renderList []*AbstractMesh) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(renderList)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// RenderListPredicate returns the RenderListPredicate property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#renderlistpredicate
func (r *RenderTargetTexture) RenderListPredicate(renderListPredicate func()) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {renderListPredicate(); return nil}))
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetRenderListPredicate sets the RenderListPredicate property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#renderlistpredicate
func (r *RenderTargetTexture) SetRenderListPredicate(renderListPredicate func()) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {renderListPredicate(); return nil}))
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// RenderParticles returns the RenderParticles property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#renderparticles
func (r *RenderTargetTexture) RenderParticles(renderParticles bool) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(renderParticles)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetRenderParticles sets the RenderParticles property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#renderparticles
func (r *RenderTargetTexture) SetRenderParticles(renderParticles bool) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(renderParticles)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// RenderSprites returns the RenderSprites property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#rendersprites
func (r *RenderTargetTexture) RenderSprites(renderSprites bool) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(renderSprites)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetRenderSprites sets the RenderSprites property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#rendersprites
func (r *RenderTargetTexture) SetRenderSprites(renderSprites bool) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(renderSprites)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// RenderTargetOptions returns the RenderTargetOptions property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#rendertargetoptions
func (r *RenderTargetTexture) RenderTargetOptions(renderTargetOptions *RenderTargetCreationOptions) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(renderTargetOptions.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetRenderTargetOptions sets the RenderTargetOptions property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#rendertargetoptions
func (r *RenderTargetTexture) SetRenderTargetOptions(renderTargetOptions *RenderTargetCreationOptions) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(renderTargetOptions.JSObject())
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// Samples returns the Samples property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#samples
func (r *RenderTargetTexture) Samples(samples float64) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(samples)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetSamples sets the Samples property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#samples
func (r *RenderTargetTexture) SetSamples(samples float64) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(samples)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// UseCameraPostProcesses returns the UseCameraPostProcesses property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#usecamerapostprocesses
func (r *RenderTargetTexture) UseCameraPostProcesses(useCameraPostProcesses bool) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(useCameraPostProcesses)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

// SetUseCameraPostProcesses sets the UseCameraPostProcesses property of class RenderTargetTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.rendertargettexture#usecamerapostprocesses
func (r *RenderTargetTexture) SetUseCameraPostProcesses(useCameraPostProcesses bool) *RenderTargetTexture {
	p := ba.ctx.Get("RenderTargetTexture").New(useCameraPostProcesses)
	return RenderTargetTextureFromJSObject(p, ba.ctx)
}

*/
