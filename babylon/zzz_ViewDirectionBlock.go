// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ViewDirectionBlock represents a babylon.js ViewDirectionBlock.
// Block used to get the view direction
type ViewDirectionBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *ViewDirectionBlock) JSObject() js.Value { return v.p }

// ViewDirectionBlock returns a ViewDirectionBlock JavaScript class.
func (ba *Babylon) ViewDirectionBlock() *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock")
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// ViewDirectionBlockFromJSObject returns a wrapped ViewDirectionBlock JavaScript class.
func ViewDirectionBlockFromJSObject(p js.Value, ctx js.Value) *ViewDirectionBlock {
	return &ViewDirectionBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// NewViewDirectionBlock returns a new ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock
func (ba *Babylon) NewViewDirectionBlock(name string) *ViewDirectionBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("ViewDirectionBlock").New(args...)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#autoconfigure
func (v *ViewDirectionBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	v.p.Call("autoConfigure", args...)
}

// ViewDirectionBlockBindOpts contains optional parameters for ViewDirectionBlock.Bind.
type ViewDirectionBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#bind
func (v *ViewDirectionBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *ViewDirectionBlockBindOpts) {
	if opts == nil {
		opts = &ViewDirectionBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	v.p.Call("bind", args...)
}

// Build calls the Build method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#build
func (v *ViewDirectionBlock) Build(state *NodeMaterialBuildState, activeBlocks *NodeMaterialBlock) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, state.JSObject())
	args = append(args, activeBlocks.JSObject())

	retVal := v.p.Call("build", args...)
	return retVal.Bool()
}

// ViewDirectionBlockCloneOpts contains optional parameters for ViewDirectionBlock.Clone.
type ViewDirectionBlockCloneOpts struct {
	RootUrl *string
}

// Clone calls the Clone method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#clone
func (v *ViewDirectionBlock) Clone(scene *Scene, opts *ViewDirectionBlockCloneOpts) *NodeMaterialBlock {
	if opts == nil {
		opts = &ViewDirectionBlockCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := v.p.Call("clone", args...)
	return NodeMaterialBlockFromJSObject(retVal, v.ctx)
}

// ViewDirectionBlockConnectToOpts contains optional parameters for ViewDirectionBlock.ConnectTo.
type ViewDirectionBlockConnectToOpts struct {
	Options js.Value
}

// ConnectTo calls the ConnectTo method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#connectto
func (v *ViewDirectionBlock) ConnectTo(other *NodeMaterialBlock, opts *ViewDirectionBlockConnectToOpts) *ViewDirectionBlock {
	if opts == nil {
		opts = &ViewDirectionBlockConnectToOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, other.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := v.p.Call("connectTo", args...)
	return ViewDirectionBlockFromJSObject(retVal, v.ctx)
}

// Dispose calls the Dispose method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#dispose
func (v *ViewDirectionBlock) Dispose() {

	args := make([]interface{}, 0, 0+0)

	v.p.Call("dispose", args...)
}

// GetClassName calls the GetClassName method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#getclassname
func (v *ViewDirectionBlock) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := v.p.Call("getClassName", args...)
	return retVal.String()
}

// ViewDirectionBlockGetFirstAvailableInputOpts contains optional parameters for ViewDirectionBlock.GetFirstAvailableInput.
type ViewDirectionBlockGetFirstAvailableInputOpts struct {
	ForOutput *NodeMaterialConnectionPoint
}

// GetFirstAvailableInput calls the GetFirstAvailableInput method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#getfirstavailableinput
func (v *ViewDirectionBlock) GetFirstAvailableInput(opts *ViewDirectionBlockGetFirstAvailableInputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &ViewDirectionBlockGetFirstAvailableInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForOutput == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForOutput.JSObject())
	}

	retVal := v.p.Call("getFirstAvailableInput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// ViewDirectionBlockGetFirstAvailableOutputOpts contains optional parameters for ViewDirectionBlock.GetFirstAvailableOutput.
type ViewDirectionBlockGetFirstAvailableOutputOpts struct {
	ForBlock *NodeMaterialBlock
}

// GetFirstAvailableOutput calls the GetFirstAvailableOutput method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#getfirstavailableoutput
func (v *ViewDirectionBlock) GetFirstAvailableOutput(opts *ViewDirectionBlockGetFirstAvailableOutputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &ViewDirectionBlockGetFirstAvailableOutputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForBlock == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForBlock.JSObject())
	}

	retVal := v.p.Call("getFirstAvailableOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// GetInputByName calls the GetInputByName method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#getinputbyname
func (v *ViewDirectionBlock) GetInputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := v.p.Call("getInputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// GetOutputByName calls the GetOutputByName method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#getoutputbyname
func (v *ViewDirectionBlock) GetOutputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := v.p.Call("getOutputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// GetSiblingOutput calls the GetSiblingOutput method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#getsiblingoutput
func (v *ViewDirectionBlock) GetSiblingOutput(current *NodeMaterialConnectionPoint) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, current.JSObject())

	retVal := v.p.Call("getSiblingOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// Initialize calls the Initialize method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#initialize
func (v *ViewDirectionBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	v.p.Call("initialize", args...)
}

// ViewDirectionBlockInitializeDefinesOpts contains optional parameters for ViewDirectionBlock.InitializeDefines.
type ViewDirectionBlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#initializedefines
func (v *ViewDirectionBlock) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *ViewDirectionBlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &ViewDirectionBlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	v.p.Call("initializeDefines", args...)
}

// ViewDirectionBlockIsReadyOpts contains optional parameters for ViewDirectionBlock.IsReady.
type ViewDirectionBlockIsReadyOpts struct {
	UseInstances *bool
}

// IsReady calls the IsReady method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#isready
func (v *ViewDirectionBlock) IsReady(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *ViewDirectionBlockIsReadyOpts) bool {
	if opts == nil {
		opts = &ViewDirectionBlockIsReadyOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := v.p.Call("isReady", args...)
	return retVal.Bool()
}

// ViewDirectionBlockPrepareDefinesOpts contains optional parameters for ViewDirectionBlock.PrepareDefines.
type ViewDirectionBlockPrepareDefinesOpts struct {
	UseInstances *bool
}

// PrepareDefines calls the PrepareDefines method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#preparedefines
func (v *ViewDirectionBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *ViewDirectionBlockPrepareDefinesOpts) {
	if opts == nil {
		opts = &ViewDirectionBlockPrepareDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	v.p.Call("prepareDefines", args...)
}

// ProvideFallbacks calls the ProvideFallbacks method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#providefallbacks
func (v *ViewDirectionBlock) ProvideFallbacks(mesh *AbstractMesh, fallbacks *EffectFallbacks) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, fallbacks.JSObject())

	v.p.Call("provideFallbacks", args...)
}

// ViewDirectionBlockRegisterInputOpts contains optional parameters for ViewDirectionBlock.RegisterInput.
type ViewDirectionBlockRegisterInputOpts struct {
	IsOptional *bool
	Target     js.Value
}

// RegisterInput calls the RegisterInput method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#registerinput
func (v *ViewDirectionBlock) RegisterInput(name string, jsType js.Value, opts *ViewDirectionBlockRegisterInputOpts) *ViewDirectionBlock {
	if opts == nil {
		opts = &ViewDirectionBlockRegisterInputOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, jsType)

	if opts.IsOptional == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsOptional)
	}
	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := v.p.Call("registerInput", args...)
	return ViewDirectionBlockFromJSObject(retVal, v.ctx)
}

// ViewDirectionBlockRegisterOutputOpts contains optional parameters for ViewDirectionBlock.RegisterOutput.
type ViewDirectionBlockRegisterOutputOpts struct {
	Target js.Value
}

// RegisterOutput calls the RegisterOutput method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#registeroutput
func (v *ViewDirectionBlock) RegisterOutput(name string, jsType js.Value, opts *ViewDirectionBlockRegisterOutputOpts) *ViewDirectionBlock {
	if opts == nil {
		opts = &ViewDirectionBlockRegisterOutputOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, jsType)

	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := v.p.Call("registerOutput", args...)
	return ViewDirectionBlockFromJSObject(retVal, v.ctx)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#replacerepeatablecontent
func (v *ViewDirectionBlock) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	v.p.Call("replaceRepeatableContent", args...)
}

// Serialize calls the Serialize method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#serialize
func (v *ViewDirectionBlock) Serialize() interface{} {

	args := make([]interface{}, 0, 0+0)

	retVal := v.p.Call("serialize", args...)
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#updateuniformsandsamples
func (v *ViewDirectionBlock) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers string) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, state.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)
	args = append(args, uniformBuffers)

	v.p.Call("updateUniformsAndSamples", args...)
}

/*

// BuildId returns the BuildId property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#buildid
func (v *ViewDirectionBlock) BuildId(buildId float64) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(buildId)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// SetBuildId sets the BuildId property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#buildid
func (v *ViewDirectionBlock) SetBuildId(buildId float64) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(buildId)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// CameraPosition returns the CameraPosition property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#cameraposition
func (v *ViewDirectionBlock) CameraPosition(cameraPosition *NodeMaterialConnectionPoint) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(cameraPosition.JSObject())
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// SetCameraPosition sets the CameraPosition property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#cameraposition
func (v *ViewDirectionBlock) SetCameraPosition(cameraPosition *NodeMaterialConnectionPoint) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(cameraPosition.JSObject())
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// Comments returns the Comments property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#comments
func (v *ViewDirectionBlock) Comments(comments string) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(comments)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// SetComments sets the Comments property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#comments
func (v *ViewDirectionBlock) SetComments(comments string) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(comments)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#inputs
func (v *ViewDirectionBlock) Inputs(inputs *NodeMaterialConnectionPoint) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(inputs.JSObject())
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#inputs
func (v *ViewDirectionBlock) SetInputs(inputs *NodeMaterialConnectionPoint) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(inputs.JSObject())
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// IsFinalMerger returns the IsFinalMerger property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#isfinalmerger
func (v *ViewDirectionBlock) IsFinalMerger(isFinalMerger bool) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(isFinalMerger)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// SetIsFinalMerger sets the IsFinalMerger property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#isfinalmerger
func (v *ViewDirectionBlock) SetIsFinalMerger(isFinalMerger bool) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(isFinalMerger)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// IsInput returns the IsInput property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#isinput
func (v *ViewDirectionBlock) IsInput(isInput bool) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(isInput)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// SetIsInput sets the IsInput property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#isinput
func (v *ViewDirectionBlock) SetIsInput(isInput bool) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(isInput)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// IsUnique returns the IsUnique property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#isunique
func (v *ViewDirectionBlock) IsUnique(isUnique bool) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(isUnique)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// SetIsUnique sets the IsUnique property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#isunique
func (v *ViewDirectionBlock) SetIsUnique(isUnique bool) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(isUnique)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#name
func (v *ViewDirectionBlock) Name(name string) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(name)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#name
func (v *ViewDirectionBlock) SetName(name string) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(name)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#output
func (v *ViewDirectionBlock) Output(output *NodeMaterialConnectionPoint) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(output.JSObject())
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#output
func (v *ViewDirectionBlock) SetOutput(output *NodeMaterialConnectionPoint) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(output.JSObject())
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// Outputs returns the Outputs property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#outputs
func (v *ViewDirectionBlock) Outputs(outputs *NodeMaterialConnectionPoint) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(outputs.JSObject())
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// SetOutputs sets the Outputs property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#outputs
func (v *ViewDirectionBlock) SetOutputs(outputs *NodeMaterialConnectionPoint) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(outputs.JSObject())
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#target
func (v *ViewDirectionBlock) Target(target js.Value) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(target)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#target
func (v *ViewDirectionBlock) SetTarget(target js.Value) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(target)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#uniqueid
func (v *ViewDirectionBlock) UniqueId(uniqueId float64) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(uniqueId)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#uniqueid
func (v *ViewDirectionBlock) SetUniqueId(uniqueId float64) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(uniqueId)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// WorldPosition returns the WorldPosition property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#worldposition
func (v *ViewDirectionBlock) WorldPosition(worldPosition *NodeMaterialConnectionPoint) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(worldPosition.JSObject())
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// SetWorldPosition sets the WorldPosition property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#worldposition
func (v *ViewDirectionBlock) SetWorldPosition(worldPosition *NodeMaterialConnectionPoint) *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock").New(worldPosition.JSObject())
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

*/
