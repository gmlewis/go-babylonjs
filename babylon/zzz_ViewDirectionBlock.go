// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ViewDirectionBlock represents a babylon.js ViewDirectionBlock.
// Block used to get the view direction
type ViewDirectionBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *ViewDirectionBlock) JSObject() js.Value { return v.p }

// ViewDirectionBlock returns a ViewDirectionBlock JavaScript class.
func (ba *Babylon) ViewDirectionBlock() *ViewDirectionBlock {
	p := ba.ctx.Get("ViewDirectionBlock")
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// ViewDirectionBlockFromJSObject returns a wrapped ViewDirectionBlock JavaScript class.
func ViewDirectionBlockFromJSObject(p js.Value, ctx js.Value) *ViewDirectionBlock {
	return &ViewDirectionBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// ViewDirectionBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func ViewDirectionBlockArrayToJSArray(array []*ViewDirectionBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewViewDirectionBlock returns a new ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#constructor
func (ba *Babylon) NewViewDirectionBlock(name string) *ViewDirectionBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("ViewDirectionBlock").New(args...)
	return ViewDirectionBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#autoconfigure
func (v *ViewDirectionBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	if material == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, material.JSObject())
	}

	v.p.Call("autoConfigure", args...)
}

// GetClassName calls the GetClassName method on the ViewDirectionBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#getclassname
func (v *ViewDirectionBlock) GetClassName() string {

	retVal := v.p.Call("getClassName")
	return retVal.String()
}

// CameraPosition returns the CameraPosition property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#cameraposition
func (v *ViewDirectionBlock) CameraPosition() *NodeMaterialConnectionPoint {
	retVal := v.p.Get("cameraPosition")
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// SetCameraPosition sets the CameraPosition property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#cameraposition
func (v *ViewDirectionBlock) SetCameraPosition(cameraPosition *NodeMaterialConnectionPoint) *ViewDirectionBlock {
	v.p.Set("cameraPosition", cameraPosition.JSObject())
	return v
}

// Output returns the Output property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#output
func (v *ViewDirectionBlock) Output() *NodeMaterialConnectionPoint {
	retVal := v.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// SetOutput sets the Output property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#output
func (v *ViewDirectionBlock) SetOutput(output *NodeMaterialConnectionPoint) *ViewDirectionBlock {
	v.p.Set("output", output.JSObject())
	return v
}

// WorldPosition returns the WorldPosition property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#worldposition
func (v *ViewDirectionBlock) WorldPosition() *NodeMaterialConnectionPoint {
	retVal := v.p.Get("worldPosition")
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// SetWorldPosition sets the WorldPosition property of class ViewDirectionBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.viewdirectionblock#worldposition
func (v *ViewDirectionBlock) SetWorldPosition(worldPosition *NodeMaterialConnectionPoint) *ViewDirectionBlock {
	v.p.Set("worldPosition", worldPosition.JSObject())
	return v
}
