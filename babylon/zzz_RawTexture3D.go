// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RawTexture3D represents a babylon.js RawTexture3D.
// Class used to store 3D textures containing user data
type RawTexture3D struct {
	*Texture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RawTexture3D) JSObject() js.Value { return r.p }

// RawTexture3D returns a RawTexture3D JavaScript class.
func (ba *Babylon) RawTexture3D() *RawTexture3D {
	p := ba.ctx.Get("RawTexture3D")
	return RawTexture3DFromJSObject(p, ba.ctx)
}

// RawTexture3DFromJSObject returns a wrapped RawTexture3D JavaScript class.
func RawTexture3DFromJSObject(p js.Value, ctx js.Value) *RawTexture3D {
	return &RawTexture3D{Texture: TextureFromJSObject(p, ctx), ctx: ctx}
}

// RawTexture3DArrayToJSArray returns a JavaScript Array for the wrapped array.
func RawTexture3DArrayToJSArray(array []*RawTexture3D) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewRawTexture3DOpts contains optional parameters for NewRawTexture3D.
type NewRawTexture3DOpts struct {
	GenerateMipMaps *bool
	InvertY         *bool
	SamplingMode    *float64
	TextureType     *float64
}

// NewRawTexture3D returns a new RawTexture3D object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawtexture3d
func (ba *Babylon) NewRawTexture3D(data js.Value, width float64, height float64, depth float64, format float64, scene *Scene, opts *NewRawTexture3DOpts) *RawTexture3D {
	if opts == nil {
		opts = &NewRawTexture3DOpts{}
	}

	args := make([]interface{}, 0, 6+4)

	args = append(args, data)
	args = append(args, width)
	args = append(args, height)
	args = append(args, depth)
	args = append(args, format)
	args = append(args, scene.JSObject())

	if opts.GenerateMipMaps == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateMipMaps)
	}
	if opts.InvertY == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.InvertY)
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}

	p := ba.ctx.Get("RawTexture3D").New(args...)
	return RawTexture3DFromJSObject(p, ba.ctx)
}

// Update calls the Update method on the RawTexture3D object.
//
// https://doc.babylonjs.com/api/classes/babylon.rawtexture3d#update
func (r *RawTexture3D) Update(data js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, data)

	r.p.Call("update", args...)
}

// Format returns the Format property of class RawTexture3D.
//
// https://doc.babylonjs.com/api/classes/babylon.rawtexture3d#format
func (r *RawTexture3D) Format() float64 {
	retVal := r.p.Get("format")
	return retVal.Float()
}

// SetFormat sets the Format property of class RawTexture3D.
//
// https://doc.babylonjs.com/api/classes/babylon.rawtexture3d#format
func (r *RawTexture3D) SetFormat(format float64) *RawTexture3D {
	r.p.Set("format", format)
	return r
}
