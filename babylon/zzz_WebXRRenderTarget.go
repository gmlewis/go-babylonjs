// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// WebXRRenderTarget represents a babylon.js WebXRRenderTarget.
// Abstraction of the XR render target
type WebXRRenderTarget struct {
	*IDisposable
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (w *WebXRRenderTarget) JSObject() js.Value { return w.p }

// WebXRRenderTarget returns a WebXRRenderTarget JavaScript class.
func (ba *Babylon) WebXRRenderTarget() *WebXRRenderTarget {
	p := ba.ctx.Get("WebXRRenderTarget")
	return WebXRRenderTargetFromJSObject(p, ba.ctx)
}

// WebXRRenderTargetFromJSObject returns a wrapped WebXRRenderTarget JavaScript class.
func WebXRRenderTargetFromJSObject(p js.Value, ctx js.Value) *WebXRRenderTarget {
	return &WebXRRenderTarget{IDisposable: IDisposableFromJSObject(p, ctx), ctx: ctx}
}

// WebXRRenderTargetArrayToJSArray returns a JavaScript Array for the wrapped array.
func WebXRRenderTargetArrayToJSArray(array []*WebXRRenderTarget) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// InitializeXRLayerAsync calls the InitializeXRLayerAsync method on the WebXRRenderTarget object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrrendertarget#initializexrlayerasync
func (w *WebXRRenderTarget) InitializeXRLayerAsync(xrSession js.Value) *Promise {

	args := make([]interface{}, 0, 1+0)

	args = append(args, xrSession)

	retVal := w.p.Call("initializeXRLayerAsync", args...)
	return PromiseFromJSObject(retVal, w.ctx)
}

// CanvasContext returns the CanvasContext property of class WebXRRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrrendertarget#canvascontext
func (w *WebXRRenderTarget) CanvasContext() js.Value {
	retVal := w.p.Get("canvasContext")
	return retVal
}

// SetCanvasContext sets the CanvasContext property of class WebXRRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrrendertarget#canvascontext
func (w *WebXRRenderTarget) SetCanvasContext(canvasContext js.Value) *WebXRRenderTarget {
	w.p.Set("canvasContext", canvasContext)
	return w
}

// XrLayer returns the XrLayer property of class WebXRRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrrendertarget#xrlayer
func (w *WebXRRenderTarget) XrLayer() js.Value {
	retVal := w.p.Get("xrLayer")
	return retVal
}

// SetXrLayer sets the XrLayer property of class WebXRRenderTarget.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrrendertarget#xrlayer
func (w *WebXRRenderTarget) SetXrLayer(xrLayer js.Value) *WebXRRenderTarget {
	w.p.Set("xrLayer", xrLayer)
	return w
}
