// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// VectorSplitterBlock represents a babylon.js VectorSplitterBlock.
// Block used to expand a Vector3/4 into 4 outputs (one for each component)
type VectorSplitterBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *VectorSplitterBlock) JSObject() js.Value { return v.p }

// VectorSplitterBlock returns a VectorSplitterBlock JavaScript class.
func (ba *Babylon) VectorSplitterBlock() *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock")
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// VectorSplitterBlockFromJSObject returns a wrapped VectorSplitterBlock JavaScript class.
func VectorSplitterBlockFromJSObject(p js.Value, ctx js.Value) *VectorSplitterBlock {
	return &VectorSplitterBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// NewVectorSplitterBlock returns a new VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock
func (ba *Babylon) NewVectorSplitterBlock(name string) *VectorSplitterBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("VectorSplitterBlock").New(args...)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#autoconfigure
func (v *VectorSplitterBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	v.p.Call("autoConfigure", args...)
}

// VectorSplitterBlockBindOpts contains optional parameters for VectorSplitterBlock.Bind.
type VectorSplitterBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#bind
func (v *VectorSplitterBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *VectorSplitterBlockBindOpts) {
	if opts == nil {
		opts = &VectorSplitterBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	v.p.Call("bind", args...)
}

// Build calls the Build method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#build
func (v *VectorSplitterBlock) Build(state *NodeMaterialBuildState, activeBlocks *NodeMaterialBlock) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, state.JSObject())
	args = append(args, activeBlocks.JSObject())

	retVal := v.p.Call("build", args...)
	return retVal.Bool()
}

// VectorSplitterBlockCloneOpts contains optional parameters for VectorSplitterBlock.Clone.
type VectorSplitterBlockCloneOpts struct {
	RootUrl *string
}

// Clone calls the Clone method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#clone
func (v *VectorSplitterBlock) Clone(scene *Scene, opts *VectorSplitterBlockCloneOpts) *NodeMaterialBlock {
	if opts == nil {
		opts = &VectorSplitterBlockCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := v.p.Call("clone", args...)
	return NodeMaterialBlockFromJSObject(retVal, v.ctx)
}

// VectorSplitterBlockConnectToOpts contains optional parameters for VectorSplitterBlock.ConnectTo.
type VectorSplitterBlockConnectToOpts struct {
	Options js.Value
}

// ConnectTo calls the ConnectTo method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#connectto
func (v *VectorSplitterBlock) ConnectTo(other *NodeMaterialBlock, opts *VectorSplitterBlockConnectToOpts) *VectorSplitterBlock {
	if opts == nil {
		opts = &VectorSplitterBlockConnectToOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, other.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := v.p.Call("connectTo", args...)
	return VectorSplitterBlockFromJSObject(retVal, v.ctx)
}

// Dispose calls the Dispose method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#dispose
func (v *VectorSplitterBlock) Dispose() {

	args := make([]interface{}, 0, 0+0)

	v.p.Call("dispose", args...)
}

// GetClassName calls the GetClassName method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#getclassname
func (v *VectorSplitterBlock) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := v.p.Call("getClassName", args...)
	return retVal.String()
}

// VectorSplitterBlockGetFirstAvailableInputOpts contains optional parameters for VectorSplitterBlock.GetFirstAvailableInput.
type VectorSplitterBlockGetFirstAvailableInputOpts struct {
	ForOutput *NodeMaterialConnectionPoint
}

// GetFirstAvailableInput calls the GetFirstAvailableInput method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#getfirstavailableinput
func (v *VectorSplitterBlock) GetFirstAvailableInput(opts *VectorSplitterBlockGetFirstAvailableInputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &VectorSplitterBlockGetFirstAvailableInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForOutput == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForOutput.JSObject())
	}

	retVal := v.p.Call("getFirstAvailableInput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// VectorSplitterBlockGetFirstAvailableOutputOpts contains optional parameters for VectorSplitterBlock.GetFirstAvailableOutput.
type VectorSplitterBlockGetFirstAvailableOutputOpts struct {
	ForBlock *NodeMaterialBlock
}

// GetFirstAvailableOutput calls the GetFirstAvailableOutput method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#getfirstavailableoutput
func (v *VectorSplitterBlock) GetFirstAvailableOutput(opts *VectorSplitterBlockGetFirstAvailableOutputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &VectorSplitterBlockGetFirstAvailableOutputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForBlock == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForBlock.JSObject())
	}

	retVal := v.p.Call("getFirstAvailableOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// GetInputByName calls the GetInputByName method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#getinputbyname
func (v *VectorSplitterBlock) GetInputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := v.p.Call("getInputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// GetOutputByName calls the GetOutputByName method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#getoutputbyname
func (v *VectorSplitterBlock) GetOutputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := v.p.Call("getOutputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// GetSiblingOutput calls the GetSiblingOutput method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#getsiblingoutput
func (v *VectorSplitterBlock) GetSiblingOutput(current *NodeMaterialConnectionPoint) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, current.JSObject())

	retVal := v.p.Call("getSiblingOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, v.ctx)
}

// Initialize calls the Initialize method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#initialize
func (v *VectorSplitterBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	v.p.Call("initialize", args...)
}

// VectorSplitterBlockInitializeDefinesOpts contains optional parameters for VectorSplitterBlock.InitializeDefines.
type VectorSplitterBlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#initializedefines
func (v *VectorSplitterBlock) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *VectorSplitterBlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &VectorSplitterBlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	v.p.Call("initializeDefines", args...)
}

// VectorSplitterBlockIsReadyOpts contains optional parameters for VectorSplitterBlock.IsReady.
type VectorSplitterBlockIsReadyOpts struct {
	UseInstances *bool
}

// IsReady calls the IsReady method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#isready
func (v *VectorSplitterBlock) IsReady(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *VectorSplitterBlockIsReadyOpts) bool {
	if opts == nil {
		opts = &VectorSplitterBlockIsReadyOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := v.p.Call("isReady", args...)
	return retVal.Bool()
}

// VectorSplitterBlockPrepareDefinesOpts contains optional parameters for VectorSplitterBlock.PrepareDefines.
type VectorSplitterBlockPrepareDefinesOpts struct {
	UseInstances *bool
}

// PrepareDefines calls the PrepareDefines method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#preparedefines
func (v *VectorSplitterBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *VectorSplitterBlockPrepareDefinesOpts) {
	if opts == nil {
		opts = &VectorSplitterBlockPrepareDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	v.p.Call("prepareDefines", args...)
}

// ProvideFallbacks calls the ProvideFallbacks method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#providefallbacks
func (v *VectorSplitterBlock) ProvideFallbacks(mesh *AbstractMesh, fallbacks *EffectFallbacks) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, fallbacks.JSObject())

	v.p.Call("provideFallbacks", args...)
}

// VectorSplitterBlockRegisterInputOpts contains optional parameters for VectorSplitterBlock.RegisterInput.
type VectorSplitterBlockRegisterInputOpts struct {
	IsOptional *bool
	Target     js.Value
}

// RegisterInput calls the RegisterInput method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#registerinput
func (v *VectorSplitterBlock) RegisterInput(name string, jsType js.Value, opts *VectorSplitterBlockRegisterInputOpts) *VectorSplitterBlock {
	if opts == nil {
		opts = &VectorSplitterBlockRegisterInputOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, jsType)

	if opts.IsOptional == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsOptional)
	}
	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := v.p.Call("registerInput", args...)
	return VectorSplitterBlockFromJSObject(retVal, v.ctx)
}

// VectorSplitterBlockRegisterOutputOpts contains optional parameters for VectorSplitterBlock.RegisterOutput.
type VectorSplitterBlockRegisterOutputOpts struct {
	Target js.Value
}

// RegisterOutput calls the RegisterOutput method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#registeroutput
func (v *VectorSplitterBlock) RegisterOutput(name string, jsType js.Value, opts *VectorSplitterBlockRegisterOutputOpts) *VectorSplitterBlock {
	if opts == nil {
		opts = &VectorSplitterBlockRegisterOutputOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, jsType)

	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := v.p.Call("registerOutput", args...)
	return VectorSplitterBlockFromJSObject(retVal, v.ctx)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#replacerepeatablecontent
func (v *VectorSplitterBlock) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	v.p.Call("replaceRepeatableContent", args...)
}

// Serialize calls the Serialize method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#serialize
func (v *VectorSplitterBlock) Serialize() interface{} {

	args := make([]interface{}, 0, 0+0)

	retVal := v.p.Call("serialize", args...)
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the VectorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#updateuniformsandsamples
func (v *VectorSplitterBlock) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers string) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, state.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)
	args = append(args, uniformBuffers)

	v.p.Call("updateUniformsAndSamples", args...)
}

/*

// BuildId returns the BuildId property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#buildid
func (v *VectorSplitterBlock) BuildId(buildId float64) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(buildId)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetBuildId sets the BuildId property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#buildid
func (v *VectorSplitterBlock) SetBuildId(buildId float64) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(buildId)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// Comments returns the Comments property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#comments
func (v *VectorSplitterBlock) Comments(comments string) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(comments)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetComments sets the Comments property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#comments
func (v *VectorSplitterBlock) SetComments(comments string) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(comments)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#inputs
func (v *VectorSplitterBlock) Inputs(inputs *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(inputs.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#inputs
func (v *VectorSplitterBlock) SetInputs(inputs *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(inputs.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// IsFinalMerger returns the IsFinalMerger property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#isfinalmerger
func (v *VectorSplitterBlock) IsFinalMerger(isFinalMerger bool) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(isFinalMerger)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetIsFinalMerger sets the IsFinalMerger property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#isfinalmerger
func (v *VectorSplitterBlock) SetIsFinalMerger(isFinalMerger bool) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(isFinalMerger)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// IsInput returns the IsInput property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#isinput
func (v *VectorSplitterBlock) IsInput(isInput bool) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(isInput)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetIsInput sets the IsInput property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#isinput
func (v *VectorSplitterBlock) SetIsInput(isInput bool) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(isInput)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// IsUnique returns the IsUnique property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#isunique
func (v *VectorSplitterBlock) IsUnique(isUnique bool) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(isUnique)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetIsUnique sets the IsUnique property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#isunique
func (v *VectorSplitterBlock) SetIsUnique(isUnique bool) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(isUnique)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#name
func (v *VectorSplitterBlock) Name(name string) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(name)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#name
func (v *VectorSplitterBlock) SetName(name string) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(name)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// Outputs returns the Outputs property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#outputs
func (v *VectorSplitterBlock) Outputs(outputs *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(outputs.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetOutputs sets the Outputs property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#outputs
func (v *VectorSplitterBlock) SetOutputs(outputs *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(outputs.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#target
func (v *VectorSplitterBlock) Target(target js.Value) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(target)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#target
func (v *VectorSplitterBlock) SetTarget(target js.Value) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(target)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#uniqueid
func (v *VectorSplitterBlock) UniqueId(uniqueId float64) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(uniqueId)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#uniqueid
func (v *VectorSplitterBlock) SetUniqueId(uniqueId float64) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(uniqueId)
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// W returns the W property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#w
func (v *VectorSplitterBlock) W(w *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(w.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetW sets the W property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#w
func (v *VectorSplitterBlock) SetW(w *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(w.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// X returns the X property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#x
func (v *VectorSplitterBlock) X(x *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(x.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetX sets the X property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#x
func (v *VectorSplitterBlock) SetX(x *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(x.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// XyIn returns the XyIn property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#xyin
func (v *VectorSplitterBlock) XyIn(xyIn *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(xyIn.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetXyIn sets the XyIn property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#xyin
func (v *VectorSplitterBlock) SetXyIn(xyIn *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(xyIn.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// XyOut returns the XyOut property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#xyout
func (v *VectorSplitterBlock) XyOut(xyOut *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(xyOut.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetXyOut sets the XyOut property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#xyout
func (v *VectorSplitterBlock) SetXyOut(xyOut *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(xyOut.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// XyzIn returns the XyzIn property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#xyzin
func (v *VectorSplitterBlock) XyzIn(xyzIn *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(xyzIn.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetXyzIn sets the XyzIn property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#xyzin
func (v *VectorSplitterBlock) SetXyzIn(xyzIn *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(xyzIn.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// XyzOut returns the XyzOut property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#xyzout
func (v *VectorSplitterBlock) XyzOut(xyzOut *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(xyzOut.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetXyzOut sets the XyzOut property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#xyzout
func (v *VectorSplitterBlock) SetXyzOut(xyzOut *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(xyzOut.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// Xyzw returns the Xyzw property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#xyzw
func (v *VectorSplitterBlock) Xyzw(xyzw *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(xyzw.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetXyzw sets the Xyzw property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#xyzw
func (v *VectorSplitterBlock) SetXyzw(xyzw *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(xyzw.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// Y returns the Y property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#y
func (v *VectorSplitterBlock) Y(y *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(y.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetY sets the Y property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#y
func (v *VectorSplitterBlock) SetY(y *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(y.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// Z returns the Z property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#z
func (v *VectorSplitterBlock) Z(z *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(z.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetZ sets the Z property of class VectorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.vectorsplitterblock#z
func (v *VectorSplitterBlock) SetZ(z *NodeMaterialConnectionPoint) *VectorSplitterBlock {
	p := ba.ctx.Get("VectorSplitterBlock").New(z.JSObject())
	return VectorSplitterBlockFromJSObject(p, ba.ctx)
}

*/
