// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// AnaglyphPostProcess represents a babylon.js AnaglyphPostProcess.
// Postprocess used to generate anaglyphic rendering
type AnaglyphPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *AnaglyphPostProcess) JSObject() js.Value { return a.p }

// AnaglyphPostProcess returns a AnaglyphPostProcess JavaScript class.
func (ba *Babylon) AnaglyphPostProcess() *AnaglyphPostProcess {
	p := ba.ctx.Get("AnaglyphPostProcess")
	return AnaglyphPostProcessFromJSObject(p, ba.ctx)
}

// AnaglyphPostProcessFromJSObject returns a wrapped AnaglyphPostProcess JavaScript class.
func AnaglyphPostProcessFromJSObject(p js.Value, ctx js.Value) *AnaglyphPostProcess {
	return &AnaglyphPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// AnaglyphPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func AnaglyphPostProcessArrayToJSArray(array []*AnaglyphPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewAnaglyphPostProcessOpts contains optional parameters for NewAnaglyphPostProcess.
type NewAnaglyphPostProcessOpts struct {
	SamplingMode *float64
	Engine       *Engine
	Reusable     *bool
}

// NewAnaglyphPostProcess returns a new AnaglyphPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.anaglyphpostprocess#constructor
func (ba *Babylon) NewAnaglyphPostProcess(name string, options float64, rigCameras []*Camera, opts *NewAnaglyphPostProcessOpts) *AnaglyphPostProcess {
	if opts == nil {
		opts = &NewAnaglyphPostProcessOpts{}
	}

	args := make([]interface{}, 0, 3+3)

	args = append(args, name)
	args = append(args, options)
	args = append(args, rigCameras)

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}

	p := ba.ctx.Get("AnaglyphPostProcess").New(args...)
	return AnaglyphPostProcessFromJSObject(p, ba.ctx)
}
