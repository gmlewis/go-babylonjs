// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ISoundOptions represents a babylon.js ISoundOptions.
// Interface used to define options for Sound class
type ISoundOptions struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ISoundOptions) JSObject() js.Value { return i.p }

// ISoundOptions returns a ISoundOptions JavaScript class.
func (ba *Babylon) ISoundOptions() *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions")
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// ISoundOptionsFromJSObject returns a wrapped ISoundOptions JavaScript class.
func ISoundOptionsFromJSObject(p js.Value, ctx js.Value) *ISoundOptions {
	return &ISoundOptions{p: p, ctx: ctx}
}

// ISoundOptionsArrayToJSArray returns a JavaScript Array for the wrapped array.
func ISoundOptionsArrayToJSArray(array []*ISoundOptions) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Autoplay returns the Autoplay property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#autoplay
func (i *ISoundOptions) Autoplay(autoplay bool) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(autoplay)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SetAutoplay sets the Autoplay property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#autoplay
func (i *ISoundOptions) SetAutoplay(autoplay bool) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(autoplay)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// DistanceModel returns the DistanceModel property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#distancemodel
func (i *ISoundOptions) DistanceModel(distanceModel string) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(distanceModel)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SetDistanceModel sets the DistanceModel property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#distancemodel
func (i *ISoundOptions) SetDistanceModel(distanceModel string) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(distanceModel)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// Length returns the Length property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#length
func (i *ISoundOptions) Length(length float64) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(length)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SetLength sets the Length property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#length
func (i *ISoundOptions) SetLength(length float64) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(length)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// Loop returns the Loop property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#loop
func (i *ISoundOptions) Loop(loop bool) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(loop)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SetLoop sets the Loop property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#loop
func (i *ISoundOptions) SetLoop(loop bool) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(loop)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// MaxDistance returns the MaxDistance property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#maxdistance
func (i *ISoundOptions) MaxDistance(maxDistance float64) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(maxDistance)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SetMaxDistance sets the MaxDistance property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#maxdistance
func (i *ISoundOptions) SetMaxDistance(maxDistance float64) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(maxDistance)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// Offset returns the Offset property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#offset
func (i *ISoundOptions) Offset(offset float64) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(offset)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SetOffset sets the Offset property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#offset
func (i *ISoundOptions) SetOffset(offset float64) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(offset)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// PlaybackRate returns the PlaybackRate property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#playbackrate
func (i *ISoundOptions) PlaybackRate(playbackRate float64) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(playbackRate)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SetPlaybackRate sets the PlaybackRate property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#playbackrate
func (i *ISoundOptions) SetPlaybackRate(playbackRate float64) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(playbackRate)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// RefDistance returns the RefDistance property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#refdistance
func (i *ISoundOptions) RefDistance(refDistance float64) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(refDistance)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SetRefDistance sets the RefDistance property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#refdistance
func (i *ISoundOptions) SetRefDistance(refDistance float64) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(refDistance)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// RolloffFactor returns the RolloffFactor property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#rollofffactor
func (i *ISoundOptions) RolloffFactor(rolloffFactor float64) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(rolloffFactor)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SetRolloffFactor sets the RolloffFactor property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#rollofffactor
func (i *ISoundOptions) SetRolloffFactor(rolloffFactor float64) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(rolloffFactor)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SkipCodecCheck returns the SkipCodecCheck property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#skipcodeccheck
func (i *ISoundOptions) SkipCodecCheck(skipCodecCheck bool) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(skipCodecCheck)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SetSkipCodecCheck sets the SkipCodecCheck property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#skipcodeccheck
func (i *ISoundOptions) SetSkipCodecCheck(skipCodecCheck bool) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(skipCodecCheck)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SpatialSound returns the SpatialSound property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#spatialsound
func (i *ISoundOptions) SpatialSound(spatialSound bool) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(spatialSound)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SetSpatialSound sets the SpatialSound property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#spatialsound
func (i *ISoundOptions) SetSpatialSound(spatialSound bool) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(spatialSound)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// Streaming returns the Streaming property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#streaming
func (i *ISoundOptions) Streaming(streaming bool) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(streaming)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SetStreaming sets the Streaming property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#streaming
func (i *ISoundOptions) SetStreaming(streaming bool) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(streaming)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// UseCustomAttenuation returns the UseCustomAttenuation property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#usecustomattenuation
func (i *ISoundOptions) UseCustomAttenuation(useCustomAttenuation bool) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(useCustomAttenuation)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SetUseCustomAttenuation sets the UseCustomAttenuation property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#usecustomattenuation
func (i *ISoundOptions) SetUseCustomAttenuation(useCustomAttenuation bool) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(useCustomAttenuation)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// Volume returns the Volume property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#volume
func (i *ISoundOptions) Volume(volume float64) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(volume)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

// SetVolume sets the Volume property of class ISoundOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundoptions#volume
func (i *ISoundOptions) SetVolume(volume float64) *ISoundOptions {
	p := ba.ctx.Get("ISoundOptions").New(volume)
	return ISoundOptionsFromJSObject(p, ba.ctx)
}

*/
