// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ISpriteManager represents a babylon.js ISpriteManager.
// Defines the minimum interface to fullfil in order to be a sprite manager.
type ISpriteManager struct {
	*IDisposable
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ISpriteManager) JSObject() js.Value { return i.p }

// ISpriteManager returns a ISpriteManager JavaScript class.
func (ba *Babylon) ISpriteManager() *ISpriteManager {
	p := ba.ctx.Get("ISpriteManager")
	return ISpriteManagerFromJSObject(p, ba.ctx)
}

// ISpriteManagerFromJSObject returns a wrapped ISpriteManager JavaScript class.
func ISpriteManagerFromJSObject(p js.Value, ctx js.Value) *ISpriteManager {
	return &ISpriteManager{IDisposable: IDisposableFromJSObject(p, ctx), ctx: ctx}
}

// ISpriteManagerArrayToJSArray returns a JavaScript Array for the wrapped array.
func ISpriteManagerArrayToJSArray(array []*ISpriteManager) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Dispose calls the Dispose method on the ISpriteManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.ispritemanager#dispose
func (i *ISpriteManager) Dispose() {

	i.p.Call("dispose")
}

// ISpriteManagerIntersectsOpts contains optional parameters for ISpriteManager.Intersects.
type ISpriteManagerIntersectsOpts struct {
	Predicate func()
	FastCheck *bool
}

// Intersects calls the Intersects method on the ISpriteManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.ispritemanager#intersects
func (i *ISpriteManager) Intersects(ray *Ray, camera *Camera, opts *ISpriteManagerIntersectsOpts) *PickingInfo {
	if opts == nil {
		opts = &ISpriteManagerIntersectsOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, ray.JSObject())
	args = append(args, camera.JSObject())

	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}
	if opts.FastCheck == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FastCheck)
	}

	retVal := i.p.Call("intersects", args...)
	return PickingInfoFromJSObject(retVal, i.ctx)
}

// ISpriteManagerMultiIntersectsOpts contains optional parameters for ISpriteManager.MultiIntersects.
type ISpriteManagerMultiIntersectsOpts struct {
	Predicate func()
}

// MultiIntersects calls the MultiIntersects method on the ISpriteManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.ispritemanager#multiintersects
func (i *ISpriteManager) MultiIntersects(ray *Ray, camera *Camera, opts *ISpriteManagerMultiIntersectsOpts) *PickingInfo {
	if opts == nil {
		opts = &ISpriteManagerMultiIntersectsOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, ray.JSObject())
	args = append(args, camera.JSObject())

	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := i.p.Call("multiIntersects", args...)
	return PickingInfoFromJSObject(retVal, i.ctx)
}

// Render calls the Render method on the ISpriteManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.ispritemanager#render
func (i *ISpriteManager) Render() {

	i.p.Call("render")
}

/*

// IsPickable returns the IsPickable property of class ISpriteManager.
//
// https://doc.babylonjs.com/api/classes/babylon.ispritemanager#ispickable
func (i *ISpriteManager) IsPickable(isPickable bool) *ISpriteManager {
	p := ba.ctx.Get("ISpriteManager").New(isPickable)
	return ISpriteManagerFromJSObject(p, ba.ctx)
}

// SetIsPickable sets the IsPickable property of class ISpriteManager.
//
// https://doc.babylonjs.com/api/classes/babylon.ispritemanager#ispickable
func (i *ISpriteManager) SetIsPickable(isPickable bool) *ISpriteManager {
	p := ba.ctx.Get("ISpriteManager").New(isPickable)
	return ISpriteManagerFromJSObject(p, ba.ctx)
}

// LayerMask returns the LayerMask property of class ISpriteManager.
//
// https://doc.babylonjs.com/api/classes/babylon.ispritemanager#layermask
func (i *ISpriteManager) LayerMask(layerMask float64) *ISpriteManager {
	p := ba.ctx.Get("ISpriteManager").New(layerMask)
	return ISpriteManagerFromJSObject(p, ba.ctx)
}

// SetLayerMask sets the LayerMask property of class ISpriteManager.
//
// https://doc.babylonjs.com/api/classes/babylon.ispritemanager#layermask
func (i *ISpriteManager) SetLayerMask(layerMask float64) *ISpriteManager {
	p := ba.ctx.Get("ISpriteManager").New(layerMask)
	return ISpriteManagerFromJSObject(p, ba.ctx)
}

// RenderingGroupId returns the RenderingGroupId property of class ISpriteManager.
//
// https://doc.babylonjs.com/api/classes/babylon.ispritemanager#renderinggroupid
func (i *ISpriteManager) RenderingGroupId(renderingGroupId float64) *ISpriteManager {
	p := ba.ctx.Get("ISpriteManager").New(renderingGroupId)
	return ISpriteManagerFromJSObject(p, ba.ctx)
}

// SetRenderingGroupId sets the RenderingGroupId property of class ISpriteManager.
//
// https://doc.babylonjs.com/api/classes/babylon.ispritemanager#renderinggroupid
func (i *ISpriteManager) SetRenderingGroupId(renderingGroupId float64) *ISpriteManager {
	p := ba.ctx.Get("ISpriteManager").New(renderingGroupId)
	return ISpriteManagerFromJSObject(p, ba.ctx)
}

// Sprites returns the Sprites property of class ISpriteManager.
//
// https://doc.babylonjs.com/api/classes/babylon.ispritemanager#sprites
func (i *ISpriteManager) Sprites(sprites []*Sprite) *ISpriteManager {
	p := ba.ctx.Get("ISpriteManager").New(sprites)
	return ISpriteManagerFromJSObject(p, ba.ctx)
}

// SetSprites sets the Sprites property of class ISpriteManager.
//
// https://doc.babylonjs.com/api/classes/babylon.ispritemanager#sprites
func (i *ISpriteManager) SetSprites(sprites []*Sprite) *ISpriteManager {
	p := ba.ctx.Get("ISpriteManager").New(sprites)
	return ISpriteManagerFromJSObject(p, ba.ctx)
}

*/
