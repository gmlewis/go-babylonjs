// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CrossBlock represents a babylon.js CrossBlock.
// Block used to apply a cross product between 2 vectors
type CrossBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *CrossBlock) JSObject() js.Value { return c.p }

// CrossBlock returns a CrossBlock JavaScript class.
func (ba *Babylon) CrossBlock() *CrossBlock {
	p := ba.ctx.Get("CrossBlock")
	return CrossBlockFromJSObject(p, ba.ctx)
}

// CrossBlockFromJSObject returns a wrapped CrossBlock JavaScript class.
func CrossBlockFromJSObject(p js.Value, ctx js.Value) *CrossBlock {
	return &CrossBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// NewCrossBlock returns a new CrossBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.crossblock
func (ba *Babylon) NewCrossBlock(name string) *CrossBlock {
	p := ba.ctx.Get("CrossBlock").New(name)
	return CrossBlockFromJSObject(p, ba.ctx)
}

// TODO: methods
