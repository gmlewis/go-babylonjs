// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ICrowd represents a babylon.js ICrowd.
// Crowd Interface. A Crowd is a collection of moving agents constrained by a navigation mesh
type ICrowd struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ICrowd) JSObject() js.Value { return i.p }

// ICrowd returns a ICrowd JavaScript class.
func (ba *Babylon) ICrowd() *ICrowd {
	p := ba.ctx.Get("ICrowd")
	return ICrowdFromJSObject(p, ba.ctx)
}

// ICrowdFromJSObject returns a wrapped ICrowd JavaScript class.
func ICrowdFromJSObject(p js.Value, ctx js.Value) *ICrowd {
	return &ICrowd{p: p, ctx: ctx}
}

// ICrowdArrayToJSArray returns a JavaScript Array for the wrapped array.
func ICrowdArrayToJSArray(array []*ICrowd) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// AddAgent calls the AddAgent method on the ICrowd object.
//
// https://doc.babylonjs.com/api/classes/babylon.icrowd#addagent
func (i *ICrowd) AddAgent(pos *Vector3, parameters *IAgentParameters, transform *TransformNode) float64 {

	args := make([]interface{}, 0, 3+0)

	args = append(args, pos.JSObject())
	args = append(args, parameters.JSObject())
	args = append(args, transform.JSObject())

	retVal := i.p.Call("addAgent", args...)
	return retVal.Float()
}

// AgentGoto calls the AgentGoto method on the ICrowd object.
//
// https://doc.babylonjs.com/api/classes/babylon.icrowd#agentgoto
func (i *ICrowd) AgentGoto(index float64, destination *Vector3) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, index)
	args = append(args, destination.JSObject())

	i.p.Call("agentGoto", args...)
}

// Dispose calls the Dispose method on the ICrowd object.
//
// https://doc.babylonjs.com/api/classes/babylon.icrowd#dispose
func (i *ICrowd) Dispose() {

	i.p.Call("dispose")
}

// GetAgentPosition calls the GetAgentPosition method on the ICrowd object.
//
// https://doc.babylonjs.com/api/classes/babylon.icrowd#getagentposition
func (i *ICrowd) GetAgentPosition(index float64) *Vector3 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, index)

	retVal := i.p.Call("getAgentPosition", args...)
	return Vector3FromJSObject(retVal, i.ctx)
}

// GetAgentVelocity calls the GetAgentVelocity method on the ICrowd object.
//
// https://doc.babylonjs.com/api/classes/babylon.icrowd#getagentvelocity
func (i *ICrowd) GetAgentVelocity(index float64) *Vector3 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, index)

	retVal := i.p.Call("getAgentVelocity", args...)
	return Vector3FromJSObject(retVal, i.ctx)
}

// GetAgents calls the GetAgents method on the ICrowd object.
//
// https://doc.babylonjs.com/api/classes/babylon.icrowd#getagents
func (i *ICrowd) GetAgents() float64 {

	retVal := i.p.Call("getAgents")
	return retVal.Float()
}

// GetDefaultQueryExtent calls the GetDefaultQueryExtent method on the ICrowd object.
//
// https://doc.babylonjs.com/api/classes/babylon.icrowd#getdefaultqueryextent
func (i *ICrowd) GetDefaultQueryExtent() *Vector3 {

	retVal := i.p.Call("getDefaultQueryExtent")
	return Vector3FromJSObject(retVal, i.ctx)
}

// RemoveAgent calls the RemoveAgent method on the ICrowd object.
//
// https://doc.babylonjs.com/api/classes/babylon.icrowd#removeagent
func (i *ICrowd) RemoveAgent(index float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, index)

	i.p.Call("removeAgent", args...)
}

// SetDefaultQueryExtent calls the SetDefaultQueryExtent method on the ICrowd object.
//
// https://doc.babylonjs.com/api/classes/babylon.icrowd#setdefaultqueryextent
func (i *ICrowd) SetDefaultQueryExtent(extent *Vector3) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, extent.JSObject())

	i.p.Call("setDefaultQueryExtent", args...)
}

// Update calls the Update method on the ICrowd object.
//
// https://doc.babylonjs.com/api/classes/babylon.icrowd#update
func (i *ICrowd) Update(deltaTime float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, deltaTime)

	i.p.Call("update", args...)
}

/*

 */
