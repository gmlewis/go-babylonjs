// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Buffer represents a babylon.js Buffer.
// Class used to store data that will be store in GPU memory
type Buffer struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *Buffer) JSObject() js.Value { return b.p }

// Buffer returns a Buffer JavaScript class.
func (ba *Babylon) Buffer() *Buffer {
	p := ba.ctx.Get("Buffer")
	return BufferFromJSObject(p, ba.ctx)
}

// BufferFromJSObject returns a wrapped Buffer JavaScript class.
func BufferFromJSObject(p js.Value, ctx js.Value) *Buffer {
	return &Buffer{p: p, ctx: ctx}
}

// NewBufferOpts contains optional parameters for NewBuffer.
type NewBufferOpts struct {
	Stride *JSFloat64

	PostponeInternalCreation *JSBool

	Instanced *JSBool

	UseBytes *JSBool

	Divisor *JSFloat64
}

// NewBuffer returns a new Buffer object.
//
// https://doc.babylonjs.com/api/classes/babylon.buffer
func (ba *Babylon) NewBuffer(engine interface{}, data []float64, updatable bool, opts *NewBufferOpts) *Buffer {
	if opts == nil {
		opts = &NewBufferOpts{}
	}

	p := ba.ctx.Get("Buffer").New(engine, data, updatable, opts.Stride.JSObject(), opts.PostponeInternalCreation.JSObject(), opts.Instanced.JSObject(), opts.UseBytes.JSObject(), opts.Divisor.JSObject())
	return BufferFromJSObject(p, ba.ctx)
}

// TODO: methods
