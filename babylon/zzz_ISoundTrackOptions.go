// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ISoundTrackOptions represents a babylon.js ISoundTrackOptions.
// Options allowed during the creation of a sound track.
type ISoundTrackOptions struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ISoundTrackOptions) JSObject() js.Value { return i.p }

// ISoundTrackOptions returns a ISoundTrackOptions JavaScript class.
func (ba *Babylon) ISoundTrackOptions() *ISoundTrackOptions {
	p := ba.ctx.Get("ISoundTrackOptions")
	return ISoundTrackOptionsFromJSObject(p, ba.ctx)
}

// ISoundTrackOptionsFromJSObject returns a wrapped ISoundTrackOptions JavaScript class.
func ISoundTrackOptionsFromJSObject(p js.Value, ctx js.Value) *ISoundTrackOptions {
	return &ISoundTrackOptions{p: p, ctx: ctx}
}

// ISoundTrackOptionsArrayToJSArray returns a JavaScript Array for the wrapped array.
func ISoundTrackOptionsArrayToJSArray(array []*ISoundTrackOptions) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// MainTrack returns the MainTrack property of class ISoundTrackOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundtrackoptions#maintrack
func (i *ISoundTrackOptions) MainTrack() bool {
	retVal := i.p.Get("mainTrack")
	return retVal.Bool()
}

// SetMainTrack sets the MainTrack property of class ISoundTrackOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundtrackoptions#maintrack
func (i *ISoundTrackOptions) SetMainTrack(mainTrack bool) *ISoundTrackOptions {
	i.p.Set("mainTrack", mainTrack)
	return i
}

// Volume returns the Volume property of class ISoundTrackOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundtrackoptions#volume
func (i *ISoundTrackOptions) Volume() float64 {
	retVal := i.p.Get("volume")
	return retVal.Float()
}

// SetVolume sets the Volume property of class ISoundTrackOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.isoundtrackoptions#volume
func (i *ISoundTrackOptions) SetVolume(volume float64) *ISoundTrackOptions {
	i.p.Set("volume", volume)
	return i
}
