// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// LayerSceneComponent represents a babylon.js LayerSceneComponent.
// Defines the layer scene component responsible to manage any layers
// in a given scene.
type LayerSceneComponent struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (l *LayerSceneComponent) JSObject() js.Value { return l.p }

// LayerSceneComponent returns a LayerSceneComponent JavaScript class.
func (ba *Babylon) LayerSceneComponent() *LayerSceneComponent {
	p := ba.ctx.Get("LayerSceneComponent")
	return LayerSceneComponentFromJSObject(p, ba.ctx)
}

// LayerSceneComponentFromJSObject returns a wrapped LayerSceneComponent JavaScript class.
func LayerSceneComponentFromJSObject(p js.Value, ctx js.Value) *LayerSceneComponent {
	return &LayerSceneComponent{p: p, ctx: ctx}
}

// LayerSceneComponentArrayToJSArray returns a JavaScript Array for the wrapped array.
func LayerSceneComponentArrayToJSArray(array []*LayerSceneComponent) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewLayerSceneComponent returns a new LayerSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.layerscenecomponent
func (ba *Babylon) NewLayerSceneComponent(scene *Scene) *LayerSceneComponent {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scene.JSObject())

	p := ba.ctx.Get("LayerSceneComponent").New(args...)
	return LayerSceneComponentFromJSObject(p, ba.ctx)
}

// AddFromContainer calls the AddFromContainer method on the LayerSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.layerscenecomponent#addfromcontainer
func (l *LayerSceneComponent) AddFromContainer(container *AbstractScene) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, container.JSObject())

	l.p.Call("addFromContainer", args...)
}

// Dispose calls the Dispose method on the LayerSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.layerscenecomponent#dispose
func (l *LayerSceneComponent) Dispose() {

	l.p.Call("dispose")
}

// Rebuild calls the Rebuild method on the LayerSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.layerscenecomponent#rebuild
func (l *LayerSceneComponent) Rebuild() {

	l.p.Call("rebuild")
}

// Register calls the Register method on the LayerSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.layerscenecomponent#register
func (l *LayerSceneComponent) Register() {

	l.p.Call("register")
}

// LayerSceneComponentRemoveFromContainerOpts contains optional parameters for LayerSceneComponent.RemoveFromContainer.
type LayerSceneComponentRemoveFromContainerOpts struct {
	Dispose *bool
}

// RemoveFromContainer calls the RemoveFromContainer method on the LayerSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.layerscenecomponent#removefromcontainer
func (l *LayerSceneComponent) RemoveFromContainer(container *AbstractScene, opts *LayerSceneComponentRemoveFromContainerOpts) {
	if opts == nil {
		opts = &LayerSceneComponentRemoveFromContainerOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, container.JSObject())

	if opts.Dispose == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Dispose)
	}

	l.p.Call("removeFromContainer", args...)
}

/*

// Name returns the Name property of class LayerSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.layerscenecomponent#name
func (l *LayerSceneComponent) Name(name string) *LayerSceneComponent {
	p := ba.ctx.Get("LayerSceneComponent").New(name)
	return LayerSceneComponentFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class LayerSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.layerscenecomponent#name
func (l *LayerSceneComponent) SetName(name string) *LayerSceneComponent {
	p := ba.ctx.Get("LayerSceneComponent").New(name)
	return LayerSceneComponentFromJSObject(p, ba.ctx)
}

// Scene returns the Scene property of class LayerSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.layerscenecomponent#scene
func (l *LayerSceneComponent) Scene(scene *Scene) *LayerSceneComponent {
	p := ba.ctx.Get("LayerSceneComponent").New(scene.JSObject())
	return LayerSceneComponentFromJSObject(p, ba.ctx)
}

// SetScene sets the Scene property of class LayerSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.layerscenecomponent#scene
func (l *LayerSceneComponent) SetScene(scene *Scene) *LayerSceneComponent {
	p := ba.ctx.Get("LayerSceneComponent").New(scene.JSObject())
	return LayerSceneComponentFromJSObject(p, ba.ctx)
}

*/
