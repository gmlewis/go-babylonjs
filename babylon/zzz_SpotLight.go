// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SpotLight represents a babylon.js SpotLight.
// A spot light is defined by a position, a direction, an angle, and an exponent.
// These values define a cone of light starting from the position, emitting toward the direction.
// The angle, in radians, defines the size (field of illumination) of the spotlight&amp;#39;s conical beam,
// and the exponent defines the speed of the decay of the light with distance (reach).
// Documentation: &lt;a href=&#34;https://doc.babylonjs.com/babylon101/lights&#34;&gt;https://doc.babylonjs.com/babylon101/lights&lt;/a&gt;
type SpotLight struct {
	*ShadowLight
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SpotLight) JSObject() js.Value { return s.p }

// SpotLight returns a SpotLight JavaScript class.
func (ba *Babylon) SpotLight() *SpotLight {
	p := ba.ctx.Get("SpotLight")
	return SpotLightFromJSObject(p, ba.ctx)
}

// SpotLightFromJSObject returns a wrapped SpotLight JavaScript class.
func SpotLightFromJSObject(p js.Value, ctx js.Value) *SpotLight {
	return &SpotLight{ShadowLight: ShadowLightFromJSObject(p, ctx), ctx: ctx}
}

// SpotLightArrayToJSArray returns a JavaScript Array for the wrapped array.
func SpotLightArrayToJSArray(array []*SpotLight) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewSpotLight returns a new SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight
func (ba *Babylon) NewSpotLight(name string, position *Vector3, direction *Vector3, angle float64, exponent float64, scene *Scene) *SpotLight {

	args := make([]interface{}, 0, 6+0)

	args = append(args, name)
	args = append(args, position.JSObject())
	args = append(args, direction.JSObject())
	args = append(args, angle)
	args = append(args, exponent)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("SpotLight").New(args...)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SpotLightAddBehaviorOpts contains optional parameters for SpotLight.AddBehavior.
type SpotLightAddBehaviorOpts struct {
	AttachImmediately *bool
}

// AddBehavior calls the AddBehavior method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#addbehavior
func (s *SpotLight) AddBehavior(behavior js.Value, opts *SpotLightAddBehaviorOpts) *Node {
	if opts == nil {
		opts = &SpotLightAddBehaviorOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, behavior)

	if opts.AttachImmediately == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.AttachImmediately)
	}

	retVal := s.p.Call("addBehavior", args...)
	return NodeFromJSObject(retVal, s.ctx)
}

// AddNodeConstructor calls the AddNodeConstructor method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#addnodeconstructor
func (s *SpotLight) AddNodeConstructor(jsType string, constructorFunc js.Value) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, jsType)
	args = append(args, constructorFunc)

	s.p.Call("AddNodeConstructor", args...)
}

// SpotLightBeginAnimationOpts contains optional parameters for SpotLight.BeginAnimation.
type SpotLightBeginAnimationOpts struct {
	Loop           *bool
	SpeedRatio     *float64
	OnAnimationEnd *func()
}

// BeginAnimation calls the BeginAnimation method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#beginanimation
func (s *SpotLight) BeginAnimation(name string, opts *SpotLightBeginAnimationOpts) *Animatable {
	if opts == nil {
		opts = &SpotLightBeginAnimationOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, name)

	if opts.Loop == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Loop)
	}
	if opts.SpeedRatio == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SpeedRatio)
	}
	if opts.OnAnimationEnd == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnAnimationEnd)
	}

	retVal := s.p.Call("beginAnimation", args...)
	return AnimatableFromJSObject(retVal, s.ctx)
}

// SpotLightBindLightOpts contains optional parameters for SpotLight.BindLight.
type SpotLightBindLightOpts struct {
	UsePhysicalLightFalloff *bool
	RebuildInParallel       *bool
}

// BindLight calls the BindLight method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#bindlight
func (s *SpotLight) BindLight(lightIndex float64, scene *Scene, effect *Effect, useSpecular bool, opts *SpotLightBindLightOpts) {
	if opts == nil {
		opts = &SpotLightBindLightOpts{}
	}

	args := make([]interface{}, 0, 4+2)

	args = append(args, lightIndex)
	args = append(args, scene.JSObject())
	args = append(args, effect.JSObject())
	args = append(args, useSpecular)

	if opts.UsePhysicalLightFalloff == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UsePhysicalLightFalloff)
	}
	if opts.RebuildInParallel == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RebuildInParallel)
	}

	s.p.Call("bindLight", args...)
}

// CanAffectMesh calls the CanAffectMesh method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#canaffectmesh
func (s *SpotLight) CanAffectMesh(mesh *AbstractMesh) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	retVal := s.p.Call("canAffectMesh", args...)
	return retVal.Bool()
}

// Clone calls the Clone method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#clone
func (s *SpotLight) Clone(name string) *Light {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := s.p.Call("clone", args...)
	return LightFromJSObject(retVal, s.ctx)
}

// CompareLightsPriority calls the CompareLightsPriority method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#comparelightspriority
func (s *SpotLight) CompareLightsPriority(a *Light, b *Light) float64 {

	args := make([]interface{}, 0, 2+0)

	args = append(args, a.JSObject())
	args = append(args, b.JSObject())

	retVal := s.p.Call("CompareLightsPriority", args...)
	return retVal.Float()
}

// ComputeTransformedInformation calls the ComputeTransformedInformation method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#computetransformedinformation
func (s *SpotLight) ComputeTransformedInformation() bool {

	retVal := s.p.Call("computeTransformedInformation")
	return retVal.Bool()
}

// SpotLightComputeWorldMatrixOpts contains optional parameters for SpotLight.ComputeWorldMatrix.
type SpotLightComputeWorldMatrixOpts struct {
	Force *bool
}

// ComputeWorldMatrix calls the ComputeWorldMatrix method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#computeworldmatrix
func (s *SpotLight) ComputeWorldMatrix(opts *SpotLightComputeWorldMatrixOpts) *Matrix {
	if opts == nil {
		opts = &SpotLightComputeWorldMatrixOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Force == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Force)
	}

	retVal := s.p.Call("computeWorldMatrix", args...)
	return MatrixFromJSObject(retVal, s.ctx)
}

// SpotLightConstructOpts contains optional parameters for SpotLight.Construct.
type SpotLightConstructOpts struct {
	Options *interface{}
}

// Construct calls the Construct method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#construct
func (s *SpotLight) Construct(jsType string, name string, scene *Scene, opts *SpotLightConstructOpts) func() {
	if opts == nil {
		opts = &SpotLightConstructOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, jsType)
	args = append(args, name)
	args = append(args, scene.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := s.p.Call("Construct", args...)
	return retVal
}

// CreateAnimationRange calls the CreateAnimationRange method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#createanimationrange
func (s *SpotLight) CreateAnimationRange(name string, from float64, to float64) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, from)
	args = append(args, to)

	s.p.Call("createAnimationRange", args...)
}

// SpotLightDeleteAnimationRangeOpts contains optional parameters for SpotLight.DeleteAnimationRange.
type SpotLightDeleteAnimationRangeOpts struct {
	DeleteFrames *bool
}

// DeleteAnimationRange calls the DeleteAnimationRange method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#deleteanimationrange
func (s *SpotLight) DeleteAnimationRange(name string, opts *SpotLightDeleteAnimationRangeOpts) {
	if opts == nil {
		opts = &SpotLightDeleteAnimationRangeOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, name)

	if opts.DeleteFrames == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DeleteFrames)
	}

	s.p.Call("deleteAnimationRange", args...)
}

// Dispose calls the Dispose method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#dispose
func (s *SpotLight) Dispose() {

	s.p.Call("dispose")
}

// ForceProjectionMatrixCompute calls the ForceProjectionMatrixCompute method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#forceprojectionmatrixcompute
func (s *SpotLight) ForceProjectionMatrixCompute() {

	s.p.Call("forceProjectionMatrixCompute")
}

// GetAbsolutePosition calls the GetAbsolutePosition method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getabsoluteposition
func (s *SpotLight) GetAbsolutePosition() *Vector3 {

	retVal := s.p.Call("getAbsolutePosition")
	return Vector3FromJSObject(retVal, s.ctx)
}

// GetAnimationByName calls the GetAnimationByName method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getanimationbyname
func (s *SpotLight) GetAnimationByName(name string) *Animation {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := s.p.Call("getAnimationByName", args...)
	return AnimationFromJSObject(retVal, s.ctx)
}

// GetAnimationRange calls the GetAnimationRange method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getanimationrange
func (s *SpotLight) GetAnimationRange(name string) *AnimationRange {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := s.p.Call("getAnimationRange", args...)
	return AnimationRangeFromJSObject(retVal, s.ctx)
}

// GetAnimationRanges calls the GetAnimationRanges method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getanimationranges
func (s *SpotLight) GetAnimationRanges() *AnimationRange {

	retVal := s.p.Call("getAnimationRanges")
	return AnimationRangeFromJSObject(retVal, s.ctx)
}

// GetBehaviorByName calls the GetBehaviorByName method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getbehaviorbyname
func (s *SpotLight) GetBehaviorByName(name string) js.Value {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := s.p.Call("getBehaviorByName", args...)
	return retVal
}

// SpotLightGetChildMeshesOpts contains optional parameters for SpotLight.GetChildMeshes.
type SpotLightGetChildMeshesOpts struct {
	DirectDescendantsOnly *bool
	Predicate             *func()
}

// GetChildMeshes calls the GetChildMeshes method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getchildmeshes
func (s *SpotLight) GetChildMeshes(opts *SpotLightGetChildMeshesOpts) *AbstractMesh {
	if opts == nil {
		opts = &SpotLightGetChildMeshesOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := s.p.Call("getChildMeshes", args...)
	return AbstractMeshFromJSObject(retVal, s.ctx)
}

// SpotLightGetChildrenOpts contains optional parameters for SpotLight.GetChildren.
type SpotLightGetChildrenOpts struct {
	Predicate             *func()
	DirectDescendantsOnly *bool
}

// GetChildren calls the GetChildren method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getchildren
func (s *SpotLight) GetChildren(opts *SpotLightGetChildrenOpts) *Node {
	if opts == nil {
		opts = &SpotLightGetChildrenOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}
	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}

	retVal := s.p.Call("getChildren", args...)
	return NodeFromJSObject(retVal, s.ctx)
}

// GetClassName calls the GetClassName method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getclassname
func (s *SpotLight) GetClassName() string {

	retVal := s.p.Call("getClassName")
	return retVal.String()
}

// GetConstructorFromName calls the GetConstructorFromName method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getconstructorfromname
func (s *SpotLight) GetConstructorFromName(jsType float64, name string, scene *Scene) func() {

	args := make([]interface{}, 0, 3+0)

	args = append(args, jsType)
	args = append(args, name)
	args = append(args, scene.JSObject())

	retVal := s.p.Call("GetConstructorFromName", args...)
	return retVal
}

// GetDepthMaxZ calls the GetDepthMaxZ method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getdepthmaxz
func (s *SpotLight) GetDepthMaxZ(activeCamera *Camera) float64 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, activeCamera.JSObject())

	retVal := s.p.Call("getDepthMaxZ", args...)
	return retVal.Float()
}

// GetDepthMinZ calls the GetDepthMinZ method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getdepthminz
func (s *SpotLight) GetDepthMinZ(activeCamera *Camera) float64 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, activeCamera.JSObject())

	retVal := s.p.Call("getDepthMinZ", args...)
	return retVal.Float()
}

// GetDepthScale calls the GetDepthScale method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getdepthscale
func (s *SpotLight) GetDepthScale() float64 {

	retVal := s.p.Call("getDepthScale")
	return retVal.Float()
}

// SpotLightGetDescendantsOpts contains optional parameters for SpotLight.GetDescendants.
type SpotLightGetDescendantsOpts struct {
	DirectDescendantsOnly *bool
	Predicate             *func()
}

// GetDescendants calls the GetDescendants method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getdescendants
func (s *SpotLight) GetDescendants(opts *SpotLightGetDescendantsOpts) *Node {
	if opts == nil {
		opts = &SpotLightGetDescendantsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := s.p.Call("getDescendants", args...)
	return NodeFromJSObject(retVal, s.ctx)
}

// GetEngine calls the GetEngine method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getengine
func (s *SpotLight) GetEngine() *Engine {

	retVal := s.p.Call("getEngine")
	return EngineFromJSObject(retVal, s.ctx)
}

// SpotLightGetHierarchyBoundingVectorsOpts contains optional parameters for SpotLight.GetHierarchyBoundingVectors.
type SpotLightGetHierarchyBoundingVectorsOpts struct {
	IncludeDescendants *bool
	Predicate          *func()
}

// GetHierarchyBoundingVectors calls the GetHierarchyBoundingVectors method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#gethierarchyboundingvectors
func (s *SpotLight) GetHierarchyBoundingVectors(opts *SpotLightGetHierarchyBoundingVectorsOpts) js.Value {
	if opts == nil {
		opts = &SpotLightGetHierarchyBoundingVectorsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.IncludeDescendants == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IncludeDescendants)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := s.p.Call("getHierarchyBoundingVectors", args...)
	return retVal
}

// GetRotation calls the GetRotation method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getrotation
func (s *SpotLight) GetRotation() *Vector3 {

	retVal := s.p.Call("getRotation")
	return Vector3FromJSObject(retVal, s.ctx)
}

// GetScaledIntensity calls the GetScaledIntensity method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getscaledintensity
func (s *SpotLight) GetScaledIntensity() float64 {

	retVal := s.p.Call("getScaledIntensity")
	return retVal.Float()
}

// GetScene calls the GetScene method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getscene
func (s *SpotLight) GetScene() *Scene {

	retVal := s.p.Call("getScene")
	return SceneFromJSObject(retVal, s.ctx)
}

// SpotLightGetShadowDirectionOpts contains optional parameters for SpotLight.GetShadowDirection.
type SpotLightGetShadowDirectionOpts struct {
	FaceIndex *float64
}

// GetShadowDirection calls the GetShadowDirection method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getshadowdirection
func (s *SpotLight) GetShadowDirection(opts *SpotLightGetShadowDirectionOpts) *Vector3 {
	if opts == nil {
		opts = &SpotLightGetShadowDirectionOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.FaceIndex == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FaceIndex)
	}

	retVal := s.p.Call("getShadowDirection", args...)
	return Vector3FromJSObject(retVal, s.ctx)
}

// GetShadowGenerator calls the GetShadowGenerator method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getshadowgenerator
func (s *SpotLight) GetShadowGenerator() js.Value {

	retVal := s.p.Call("getShadowGenerator")
	return retVal
}

// GetTypeID calls the GetTypeID method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#gettypeid
func (s *SpotLight) GetTypeID() float64 {

	retVal := s.p.Call("getTypeID")
	return retVal.Float()
}

// GetWorldMatrix calls the GetWorldMatrix method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#getworldmatrix
func (s *SpotLight) GetWorldMatrix() *Matrix {

	retVal := s.p.Call("getWorldMatrix")
	return MatrixFromJSObject(retVal, s.ctx)
}

// IsDescendantOf calls the IsDescendantOf method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#isdescendantof
func (s *SpotLight) IsDescendantOf(ancestor *Node) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, ancestor.JSObject())

	retVal := s.p.Call("isDescendantOf", args...)
	return retVal.Bool()
}

// IsDisposed calls the IsDisposed method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#isdisposed
func (s *SpotLight) IsDisposed() bool {

	retVal := s.p.Call("isDisposed")
	return retVal.Bool()
}

// SpotLightIsEnabledOpts contains optional parameters for SpotLight.IsEnabled.
type SpotLightIsEnabledOpts struct {
	CheckAncestors *bool
}

// IsEnabled calls the IsEnabled method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#isenabled
func (s *SpotLight) IsEnabled(opts *SpotLightIsEnabledOpts) bool {
	if opts == nil {
		opts = &SpotLightIsEnabledOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.CheckAncestors == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CheckAncestors)
	}

	retVal := s.p.Call("isEnabled", args...)
	return retVal.Bool()
}

// SpotLightIsReadyOpts contains optional parameters for SpotLight.IsReady.
type SpotLightIsReadyOpts struct {
	CompleteCheck *bool
}

// IsReady calls the IsReady method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#isready
func (s *SpotLight) IsReady(opts *SpotLightIsReadyOpts) bool {
	if opts == nil {
		opts = &SpotLightIsReadyOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.CompleteCheck == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CompleteCheck)
	}

	retVal := s.p.Call("isReady", args...)
	return retVal.Bool()
}

// NeedCube calls the NeedCube method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#needcube
func (s *SpotLight) NeedCube() bool {

	retVal := s.p.Call("needCube")
	return retVal.Bool()
}

// NeedProjectionMatrixCompute calls the NeedProjectionMatrixCompute method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#needprojectionmatrixcompute
func (s *SpotLight) NeedProjectionMatrixCompute() bool {

	retVal := s.p.Call("needProjectionMatrixCompute")
	return retVal.Bool()
}

// Parse calls the Parse method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#parse
func (s *SpotLight) Parse(parsedLight interface{}, scene *Scene) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, parsedLight)
	args = append(args, scene.JSObject())

	retVal := s.p.Call("Parse", args...)
	return LightFromJSObject(retVal, s.ctx)
}

// ParseAnimationRanges calls the ParseAnimationRanges method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#parseanimationranges
func (s *SpotLight) ParseAnimationRanges(node *Node, parsedNode interface{}, scene *Scene) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, node.JSObject())
	args = append(args, parsedNode)
	args = append(args, scene.JSObject())

	s.p.Call("ParseAnimationRanges", args...)
}

// PrepareLightSpecificDefines calls the PrepareLightSpecificDefines method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#preparelightspecificdefines
func (s *SpotLight) PrepareLightSpecificDefines(defines interface{}, lightIndex float64) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, defines)
	args = append(args, lightIndex)

	s.p.Call("prepareLightSpecificDefines", args...)
}

// RemoveBehavior calls the RemoveBehavior method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#removebehavior
func (s *SpotLight) RemoveBehavior(behavior js.Value) *Node {

	args := make([]interface{}, 0, 1+0)

	args = append(args, behavior)

	retVal := s.p.Call("removeBehavior", args...)
	return NodeFromJSObject(retVal, s.ctx)
}

// Serialize calls the Serialize method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#serialize
func (s *SpotLight) Serialize() interface{} {

	retVal := s.p.Call("serialize")
	return retVal
}

// SerializeAnimationRanges calls the SerializeAnimationRanges method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#serializeanimationranges
func (s *SpotLight) SerializeAnimationRanges() interface{} {

	retVal := s.p.Call("serializeAnimationRanges")
	return retVal
}

// SetDirectionToTarget calls the SetDirectionToTarget method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#setdirectiontotarget
func (s *SpotLight) SetDirectionToTarget(target *Vector3) *Vector3 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, target.JSObject())

	retVal := s.p.Call("setDirectionToTarget", args...)
	return Vector3FromJSObject(retVal, s.ctx)
}

// SetEnabled calls the SetEnabled method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#setenabled
func (s *SpotLight) SetEnabled(value bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, value)

	s.p.Call("setEnabled", args...)
}

// SetShadowProjectionMatrix calls the SetShadowProjectionMatrix method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#setshadowprojectionmatrix
func (s *SpotLight) SetShadowProjectionMatrix(matrix *Matrix, viewMatrix *Matrix, renderList []*AbstractMesh) js.Value {

	args := make([]interface{}, 0, 3+0)

	args = append(args, matrix.JSObject())
	args = append(args, viewMatrix.JSObject())
	args = append(args, AbstractMeshArrayToJSArray(renderList))

	retVal := s.p.Call("setShadowProjectionMatrix", args...)
	return retVal
}

// SpotLightToStringOpts contains optional parameters for SpotLight.ToString.
type SpotLightToStringOpts struct {
	FullDetails *bool
}

// ToString calls the ToString method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#tostring
func (s *SpotLight) ToString(opts *SpotLightToStringOpts) string {
	if opts == nil {
		opts = &SpotLightToStringOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.FullDetails == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FullDetails)
	}

	retVal := s.p.Call("toString", args...)
	return retVal.String()
}

// TransferTexturesToEffect calls the TransferTexturesToEffect method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#transfertexturestoeffect
func (s *SpotLight) TransferTexturesToEffect(effect *Effect, lightIndex string) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, lightIndex)

	retVal := s.p.Call("transferTexturesToEffect", args...)
	return LightFromJSObject(retVal, s.ctx)
}

// TransferToEffect calls the TransferToEffect method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#transfertoeffect
func (s *SpotLight) TransferToEffect(effect *Effect, lightIndex string) *SpotLight {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, lightIndex)

	retVal := s.p.Call("transferToEffect", args...)
	return SpotLightFromJSObject(retVal, s.ctx)
}

// TransferToNodeMaterialEffect calls the TransferToNodeMaterialEffect method on the SpotLight object.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#transfertonodematerialeffect
func (s *SpotLight) TransferToNodeMaterialEffect(effect *Effect, lightDataUniformName string) *SpotLight {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, lightDataUniformName)

	retVal := s.p.Call("transferToNodeMaterialEffect", args...)
	return SpotLightFromJSObject(retVal, s.ctx)
}

/*

// Angle returns the Angle property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#angle
func (s *SpotLight) Angle(angle float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(angle)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetAngle sets the Angle property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#angle
func (s *SpotLight) SetAngle(angle float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(angle)
	return SpotLightFromJSObject(p, ba.ctx)
}

// AnimationPropertiesOverride returns the AnimationPropertiesOverride property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#animationpropertiesoverride
func (s *SpotLight) AnimationPropertiesOverride(animationPropertiesOverride *AnimationPropertiesOverride) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(animationPropertiesOverride.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetAnimationPropertiesOverride sets the AnimationPropertiesOverride property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#animationpropertiesoverride
func (s *SpotLight) SetAnimationPropertiesOverride(animationPropertiesOverride *AnimationPropertiesOverride) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(animationPropertiesOverride.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// Animations returns the Animations property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#animations
func (s *SpotLight) Animations(animations *Animation) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(animations.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#animations
func (s *SpotLight) SetAnimations(animations *Animation) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(animations.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// Behaviors returns the Behaviors property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#behaviors
func (s *SpotLight) Behaviors(behaviors js.Value) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(behaviors)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetBehaviors sets the Behaviors property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#behaviors
func (s *SpotLight) SetBehaviors(behaviors js.Value) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(behaviors)
	return SpotLightFromJSObject(p, ba.ctx)
}

// CustomProjectionMatrixBuilder returns the CustomProjectionMatrixBuilder property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#customprojectionmatrixbuilder
func (s *SpotLight) CustomProjectionMatrixBuilder(customProjectionMatrixBuilder func()) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {customProjectionMatrixBuilder(); return nil}))
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetCustomProjectionMatrixBuilder sets the CustomProjectionMatrixBuilder property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#customprojectionmatrixbuilder
func (s *SpotLight) SetCustomProjectionMatrixBuilder(customProjectionMatrixBuilder func()) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {customProjectionMatrixBuilder(); return nil}))
	return SpotLightFromJSObject(p, ba.ctx)
}

// Diffuse returns the Diffuse property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#diffuse
func (s *SpotLight) Diffuse(diffuse *Color3) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(diffuse.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetDiffuse sets the Diffuse property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#diffuse
func (s *SpotLight) SetDiffuse(diffuse *Color3) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(diffuse.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// Direction returns the Direction property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#direction
func (s *SpotLight) Direction(direction *Vector3) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(direction.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetDirection sets the Direction property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#direction
func (s *SpotLight) SetDirection(direction *Vector3) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(direction.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// DoNotSerialize returns the DoNotSerialize property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#donotserialize
func (s *SpotLight) DoNotSerialize(doNotSerialize bool) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(doNotSerialize)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetDoNotSerialize sets the DoNotSerialize property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#donotserialize
func (s *SpotLight) SetDoNotSerialize(doNotSerialize bool) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(doNotSerialize)
	return SpotLightFromJSObject(p, ba.ctx)
}

// ExcludeWithLayerMask returns the ExcludeWithLayerMask property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#excludewithlayermask
func (s *SpotLight) ExcludeWithLayerMask(excludeWithLayerMask float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(excludeWithLayerMask)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetExcludeWithLayerMask sets the ExcludeWithLayerMask property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#excludewithlayermask
func (s *SpotLight) SetExcludeWithLayerMask(excludeWithLayerMask float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(excludeWithLayerMask)
	return SpotLightFromJSObject(p, ba.ctx)
}

// ExcludedMeshes returns the ExcludedMeshes property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#excludedmeshes
func (s *SpotLight) ExcludedMeshes(excludedMeshes *AbstractMesh) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(excludedMeshes.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetExcludedMeshes sets the ExcludedMeshes property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#excludedmeshes
func (s *SpotLight) SetExcludedMeshes(excludedMeshes *AbstractMesh) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(excludedMeshes.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// Exponent returns the Exponent property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#exponent
func (s *SpotLight) Exponent(exponent float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(exponent)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetExponent sets the Exponent property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#exponent
func (s *SpotLight) SetExponent(exponent float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(exponent)
	return SpotLightFromJSObject(p, ba.ctx)
}

// FALLOFF_DEFAULT returns the FALLOFF_DEFAULT property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#falloff_default
func (s *SpotLight) FALLOFF_DEFAULT(FALLOFF_DEFAULT float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(FALLOFF_DEFAULT)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_DEFAULT sets the FALLOFF_DEFAULT property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#falloff_default
func (s *SpotLight) SetFALLOFF_DEFAULT(FALLOFF_DEFAULT float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(FALLOFF_DEFAULT)
	return SpotLightFromJSObject(p, ba.ctx)
}

// FALLOFF_GLTF returns the FALLOFF_GLTF property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#falloff_gltf
func (s *SpotLight) FALLOFF_GLTF(FALLOFF_GLTF float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(FALLOFF_GLTF)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_GLTF sets the FALLOFF_GLTF property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#falloff_gltf
func (s *SpotLight) SetFALLOFF_GLTF(FALLOFF_GLTF float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(FALLOFF_GLTF)
	return SpotLightFromJSObject(p, ba.ctx)
}

// FALLOFF_PHYSICAL returns the FALLOFF_PHYSICAL property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#falloff_physical
func (s *SpotLight) FALLOFF_PHYSICAL(FALLOFF_PHYSICAL float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(FALLOFF_PHYSICAL)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_PHYSICAL sets the FALLOFF_PHYSICAL property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#falloff_physical
func (s *SpotLight) SetFALLOFF_PHYSICAL(FALLOFF_PHYSICAL float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(FALLOFF_PHYSICAL)
	return SpotLightFromJSObject(p, ba.ctx)
}

// FALLOFF_STANDARD returns the FALLOFF_STANDARD property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#falloff_standard
func (s *SpotLight) FALLOFF_STANDARD(FALLOFF_STANDARD float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(FALLOFF_STANDARD)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetFALLOFF_STANDARD sets the FALLOFF_STANDARD property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#falloff_standard
func (s *SpotLight) SetFALLOFF_STANDARD(FALLOFF_STANDARD float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(FALLOFF_STANDARD)
	return SpotLightFromJSObject(p, ba.ctx)
}

// FalloffType returns the FalloffType property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#fallofftype
func (s *SpotLight) FalloffType(falloffType float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(falloffType)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetFalloffType sets the FalloffType property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#fallofftype
func (s *SpotLight) SetFalloffType(falloffType float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(falloffType)
	return SpotLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_AUTOMATIC returns the INTENSITYMODE_AUTOMATIC property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#intensitymode_automatic
func (s *SpotLight) INTENSITYMODE_AUTOMATIC(INTENSITYMODE_AUTOMATIC float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(INTENSITYMODE_AUTOMATIC)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_AUTOMATIC sets the INTENSITYMODE_AUTOMATIC property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#intensitymode_automatic
func (s *SpotLight) SetINTENSITYMODE_AUTOMATIC(INTENSITYMODE_AUTOMATIC float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(INTENSITYMODE_AUTOMATIC)
	return SpotLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_ILLUMINANCE returns the INTENSITYMODE_ILLUMINANCE property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#intensitymode_illuminance
func (s *SpotLight) INTENSITYMODE_ILLUMINANCE(INTENSITYMODE_ILLUMINANCE float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(INTENSITYMODE_ILLUMINANCE)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_ILLUMINANCE sets the INTENSITYMODE_ILLUMINANCE property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#intensitymode_illuminance
func (s *SpotLight) SetINTENSITYMODE_ILLUMINANCE(INTENSITYMODE_ILLUMINANCE float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(INTENSITYMODE_ILLUMINANCE)
	return SpotLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_LUMINANCE returns the INTENSITYMODE_LUMINANCE property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#intensitymode_luminance
func (s *SpotLight) INTENSITYMODE_LUMINANCE(INTENSITYMODE_LUMINANCE float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(INTENSITYMODE_LUMINANCE)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_LUMINANCE sets the INTENSITYMODE_LUMINANCE property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#intensitymode_luminance
func (s *SpotLight) SetINTENSITYMODE_LUMINANCE(INTENSITYMODE_LUMINANCE float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(INTENSITYMODE_LUMINANCE)
	return SpotLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_LUMINOUSINTENSITY returns the INTENSITYMODE_LUMINOUSINTENSITY property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#intensitymode_luminousintensity
func (s *SpotLight) INTENSITYMODE_LUMINOUSINTENSITY(INTENSITYMODE_LUMINOUSINTENSITY float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(INTENSITYMODE_LUMINOUSINTENSITY)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_LUMINOUSINTENSITY sets the INTENSITYMODE_LUMINOUSINTENSITY property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#intensitymode_luminousintensity
func (s *SpotLight) SetINTENSITYMODE_LUMINOUSINTENSITY(INTENSITYMODE_LUMINOUSINTENSITY float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(INTENSITYMODE_LUMINOUSINTENSITY)
	return SpotLightFromJSObject(p, ba.ctx)
}

// INTENSITYMODE_LUMINOUSPOWER returns the INTENSITYMODE_LUMINOUSPOWER property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#intensitymode_luminouspower
func (s *SpotLight) INTENSITYMODE_LUMINOUSPOWER(INTENSITYMODE_LUMINOUSPOWER float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(INTENSITYMODE_LUMINOUSPOWER)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetINTENSITYMODE_LUMINOUSPOWER sets the INTENSITYMODE_LUMINOUSPOWER property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#intensitymode_luminouspower
func (s *SpotLight) SetINTENSITYMODE_LUMINOUSPOWER(INTENSITYMODE_LUMINOUSPOWER float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(INTENSITYMODE_LUMINOUSPOWER)
	return SpotLightFromJSObject(p, ba.ctx)
}

// Id returns the Id property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#id
func (s *SpotLight) Id(id string) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(id)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetId sets the Id property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#id
func (s *SpotLight) SetId(id string) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(id)
	return SpotLightFromJSObject(p, ba.ctx)
}

// IncludeOnlyWithLayerMask returns the IncludeOnlyWithLayerMask property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#includeonlywithlayermask
func (s *SpotLight) IncludeOnlyWithLayerMask(includeOnlyWithLayerMask float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(includeOnlyWithLayerMask)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetIncludeOnlyWithLayerMask sets the IncludeOnlyWithLayerMask property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#includeonlywithlayermask
func (s *SpotLight) SetIncludeOnlyWithLayerMask(includeOnlyWithLayerMask float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(includeOnlyWithLayerMask)
	return SpotLightFromJSObject(p, ba.ctx)
}

// IncludedOnlyMeshes returns the IncludedOnlyMeshes property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#includedonlymeshes
func (s *SpotLight) IncludedOnlyMeshes(includedOnlyMeshes *AbstractMesh) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(includedOnlyMeshes.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetIncludedOnlyMeshes sets the IncludedOnlyMeshes property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#includedonlymeshes
func (s *SpotLight) SetIncludedOnlyMeshes(includedOnlyMeshes *AbstractMesh) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(includedOnlyMeshes.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// InnerAngle returns the InnerAngle property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#innerangle
func (s *SpotLight) InnerAngle(innerAngle float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(innerAngle)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetInnerAngle sets the InnerAngle property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#innerangle
func (s *SpotLight) SetInnerAngle(innerAngle float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(innerAngle)
	return SpotLightFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#inspectablecustomproperties
func (s *SpotLight) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(inspectableCustomProperties.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#inspectablecustomproperties
func (s *SpotLight) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(inspectableCustomProperties.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// Intensity returns the Intensity property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#intensity
func (s *SpotLight) Intensity(intensity float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(intensity)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetIntensity sets the Intensity property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#intensity
func (s *SpotLight) SetIntensity(intensity float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(intensity)
	return SpotLightFromJSObject(p, ba.ctx)
}

// IntensityMode returns the IntensityMode property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#intensitymode
func (s *SpotLight) IntensityMode(intensityMode float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(intensityMode)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetIntensityMode sets the IntensityMode property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#intensitymode
func (s *SpotLight) SetIntensityMode(intensityMode float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(intensityMode)
	return SpotLightFromJSObject(p, ba.ctx)
}

// LIGHTMAP_DEFAULT returns the LIGHTMAP_DEFAULT property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lightmap_default
func (s *SpotLight) LIGHTMAP_DEFAULT(LIGHTMAP_DEFAULT float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(LIGHTMAP_DEFAULT)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetLIGHTMAP_DEFAULT sets the LIGHTMAP_DEFAULT property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lightmap_default
func (s *SpotLight) SetLIGHTMAP_DEFAULT(LIGHTMAP_DEFAULT float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(LIGHTMAP_DEFAULT)
	return SpotLightFromJSObject(p, ba.ctx)
}

// LIGHTMAP_SHADOWSONLY returns the LIGHTMAP_SHADOWSONLY property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lightmap_shadowsonly
func (s *SpotLight) LIGHTMAP_SHADOWSONLY(LIGHTMAP_SHADOWSONLY float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(LIGHTMAP_SHADOWSONLY)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetLIGHTMAP_SHADOWSONLY sets the LIGHTMAP_SHADOWSONLY property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lightmap_shadowsonly
func (s *SpotLight) SetLIGHTMAP_SHADOWSONLY(LIGHTMAP_SHADOWSONLY float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(LIGHTMAP_SHADOWSONLY)
	return SpotLightFromJSObject(p, ba.ctx)
}

// LIGHTMAP_SPECULAR returns the LIGHTMAP_SPECULAR property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lightmap_specular
func (s *SpotLight) LIGHTMAP_SPECULAR(LIGHTMAP_SPECULAR float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(LIGHTMAP_SPECULAR)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetLIGHTMAP_SPECULAR sets the LIGHTMAP_SPECULAR property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lightmap_specular
func (s *SpotLight) SetLIGHTMAP_SPECULAR(LIGHTMAP_SPECULAR float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(LIGHTMAP_SPECULAR)
	return SpotLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_DIRECTIONALLIGHT returns the LIGHTTYPEID_DIRECTIONALLIGHT property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lighttypeid_directionallight
func (s *SpotLight) LIGHTTYPEID_DIRECTIONALLIGHT(LIGHTTYPEID_DIRECTIONALLIGHT float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(LIGHTTYPEID_DIRECTIONALLIGHT)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_DIRECTIONALLIGHT sets the LIGHTTYPEID_DIRECTIONALLIGHT property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lighttypeid_directionallight
func (s *SpotLight) SetLIGHTTYPEID_DIRECTIONALLIGHT(LIGHTTYPEID_DIRECTIONALLIGHT float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(LIGHTTYPEID_DIRECTIONALLIGHT)
	return SpotLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_HEMISPHERICLIGHT returns the LIGHTTYPEID_HEMISPHERICLIGHT property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lighttypeid_hemisphericlight
func (s *SpotLight) LIGHTTYPEID_HEMISPHERICLIGHT(LIGHTTYPEID_HEMISPHERICLIGHT float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(LIGHTTYPEID_HEMISPHERICLIGHT)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_HEMISPHERICLIGHT sets the LIGHTTYPEID_HEMISPHERICLIGHT property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lighttypeid_hemisphericlight
func (s *SpotLight) SetLIGHTTYPEID_HEMISPHERICLIGHT(LIGHTTYPEID_HEMISPHERICLIGHT float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(LIGHTTYPEID_HEMISPHERICLIGHT)
	return SpotLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_POINTLIGHT returns the LIGHTTYPEID_POINTLIGHT property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lighttypeid_pointlight
func (s *SpotLight) LIGHTTYPEID_POINTLIGHT(LIGHTTYPEID_POINTLIGHT float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(LIGHTTYPEID_POINTLIGHT)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_POINTLIGHT sets the LIGHTTYPEID_POINTLIGHT property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lighttypeid_pointlight
func (s *SpotLight) SetLIGHTTYPEID_POINTLIGHT(LIGHTTYPEID_POINTLIGHT float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(LIGHTTYPEID_POINTLIGHT)
	return SpotLightFromJSObject(p, ba.ctx)
}

// LIGHTTYPEID_SPOTLIGHT returns the LIGHTTYPEID_SPOTLIGHT property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lighttypeid_spotlight
func (s *SpotLight) LIGHTTYPEID_SPOTLIGHT(LIGHTTYPEID_SPOTLIGHT float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(LIGHTTYPEID_SPOTLIGHT)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetLIGHTTYPEID_SPOTLIGHT sets the LIGHTTYPEID_SPOTLIGHT property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lighttypeid_spotlight
func (s *SpotLight) SetLIGHTTYPEID_SPOTLIGHT(LIGHTTYPEID_SPOTLIGHT float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(LIGHTTYPEID_SPOTLIGHT)
	return SpotLightFromJSObject(p, ba.ctx)
}

// LightmapMode returns the LightmapMode property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lightmapmode
func (s *SpotLight) LightmapMode(lightmapMode float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(lightmapMode)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetLightmapMode sets the LightmapMode property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#lightmapmode
func (s *SpotLight) SetLightmapMode(lightmapMode float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(lightmapMode)
	return SpotLightFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#metadata
func (s *SpotLight) Metadata(metadata interface{}) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(metadata)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#metadata
func (s *SpotLight) SetMetadata(metadata interface{}) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(metadata)
	return SpotLightFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#name
func (s *SpotLight) Name(name string) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(name)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#name
func (s *SpotLight) SetName(name string) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(name)
	return SpotLightFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#ondispose
func (s *SpotLight) OnDispose(onDispose func()) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#ondispose
func (s *SpotLight) SetOnDispose(onDispose func()) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return SpotLightFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#ondisposeobservable
func (s *SpotLight) OnDisposeObservable(onDisposeObservable *Observable) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(onDisposeObservable.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#ondisposeobservable
func (s *SpotLight) SetOnDisposeObservable(onDisposeObservable *Observable) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(onDisposeObservable.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// OnReady returns the OnReady property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#onready
func (s *SpotLight) OnReady(onReady func()) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onReady(); return nil}))
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetOnReady sets the OnReady property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#onready
func (s *SpotLight) SetOnReady(onReady func()) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onReady(); return nil}))
	return SpotLightFromJSObject(p, ba.ctx)
}

// Parent returns the Parent property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#parent
func (s *SpotLight) Parent(parent *Node) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(parent.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetParent sets the Parent property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#parent
func (s *SpotLight) SetParent(parent *Node) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(parent.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// Position returns the Position property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#position
func (s *SpotLight) Position(position *Vector3) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(position.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetPosition sets the Position property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#position
func (s *SpotLight) SetPosition(position *Vector3) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(position.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// ProjectionTexture returns the ProjectionTexture property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#projectiontexture
func (s *SpotLight) ProjectionTexture(projectionTexture *BaseTexture) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(projectionTexture.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetProjectionTexture sets the ProjectionTexture property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#projectiontexture
func (s *SpotLight) SetProjectionTexture(projectionTexture *BaseTexture) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(projectionTexture.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// ProjectionTextureLightFar returns the ProjectionTextureLightFar property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#projectiontexturelightfar
func (s *SpotLight) ProjectionTextureLightFar(projectionTextureLightFar float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(projectionTextureLightFar)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetProjectionTextureLightFar sets the ProjectionTextureLightFar property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#projectiontexturelightfar
func (s *SpotLight) SetProjectionTextureLightFar(projectionTextureLightFar float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(projectionTextureLightFar)
	return SpotLightFromJSObject(p, ba.ctx)
}

// ProjectionTextureLightNear returns the ProjectionTextureLightNear property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#projectiontexturelightnear
func (s *SpotLight) ProjectionTextureLightNear(projectionTextureLightNear float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(projectionTextureLightNear)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetProjectionTextureLightNear sets the ProjectionTextureLightNear property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#projectiontexturelightnear
func (s *SpotLight) SetProjectionTextureLightNear(projectionTextureLightNear float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(projectionTextureLightNear)
	return SpotLightFromJSObject(p, ba.ctx)
}

// ProjectionTextureMatrix returns the ProjectionTextureMatrix property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#projectiontexturematrix
func (s *SpotLight) ProjectionTextureMatrix(projectionTextureMatrix *Matrix) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(projectionTextureMatrix.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetProjectionTextureMatrix sets the ProjectionTextureMatrix property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#projectiontexturematrix
func (s *SpotLight) SetProjectionTextureMatrix(projectionTextureMatrix *Matrix) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(projectionTextureMatrix.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// ProjectionTextureUpDirection returns the ProjectionTextureUpDirection property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#projectiontextureupdirection
func (s *SpotLight) ProjectionTextureUpDirection(projectionTextureUpDirection *Vector3) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(projectionTextureUpDirection.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetProjectionTextureUpDirection sets the ProjectionTextureUpDirection property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#projectiontextureupdirection
func (s *SpotLight) SetProjectionTextureUpDirection(projectionTextureUpDirection *Vector3) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(projectionTextureUpDirection.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// Radius returns the Radius property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#radius
func (s *SpotLight) Radius(radius float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(radius)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetRadius sets the Radius property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#radius
func (s *SpotLight) SetRadius(radius float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(radius)
	return SpotLightFromJSObject(p, ba.ctx)
}

// Range returns the Range property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#range
func (s *SpotLight) Range(range float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(range)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetRange sets the Range property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#range
func (s *SpotLight) SetRange(range float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(range)
	return SpotLightFromJSObject(p, ba.ctx)
}

// RenderPriority returns the RenderPriority property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#renderpriority
func (s *SpotLight) RenderPriority(renderPriority float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(renderPriority)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetRenderPriority sets the RenderPriority property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#renderpriority
func (s *SpotLight) SetRenderPriority(renderPriority float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(renderPriority)
	return SpotLightFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#reserveddatastore
func (s *SpotLight) ReservedDataStore(reservedDataStore interface{}) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(reservedDataStore)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#reserveddatastore
func (s *SpotLight) SetReservedDataStore(reservedDataStore interface{}) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(reservedDataStore)
	return SpotLightFromJSObject(p, ba.ctx)
}

// ShadowAngleScale returns the ShadowAngleScale property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#shadowanglescale
func (s *SpotLight) ShadowAngleScale(shadowAngleScale float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(shadowAngleScale)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetShadowAngleScale sets the ShadowAngleScale property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#shadowanglescale
func (s *SpotLight) SetShadowAngleScale(shadowAngleScale float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(shadowAngleScale)
	return SpotLightFromJSObject(p, ba.ctx)
}

// ShadowEnabled returns the ShadowEnabled property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#shadowenabled
func (s *SpotLight) ShadowEnabled(shadowEnabled bool) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(shadowEnabled)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetShadowEnabled sets the ShadowEnabled property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#shadowenabled
func (s *SpotLight) SetShadowEnabled(shadowEnabled bool) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(shadowEnabled)
	return SpotLightFromJSObject(p, ba.ctx)
}

// ShadowMaxZ returns the ShadowMaxZ property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#shadowmaxz
func (s *SpotLight) ShadowMaxZ(shadowMaxZ float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(shadowMaxZ)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetShadowMaxZ sets the ShadowMaxZ property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#shadowmaxz
func (s *SpotLight) SetShadowMaxZ(shadowMaxZ float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(shadowMaxZ)
	return SpotLightFromJSObject(p, ba.ctx)
}

// ShadowMinZ returns the ShadowMinZ property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#shadowminz
func (s *SpotLight) ShadowMinZ(shadowMinZ float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(shadowMinZ)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetShadowMinZ sets the ShadowMinZ property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#shadowminz
func (s *SpotLight) SetShadowMinZ(shadowMinZ float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(shadowMinZ)
	return SpotLightFromJSObject(p, ba.ctx)
}

// Specular returns the Specular property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#specular
func (s *SpotLight) Specular(specular *Color3) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(specular.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetSpecular sets the Specular property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#specular
func (s *SpotLight) SetSpecular(specular *Color3) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(specular.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// State returns the State property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#state
func (s *SpotLight) State(state string) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(state)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetState sets the State property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#state
func (s *SpotLight) SetState(state string) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(state)
	return SpotLightFromJSObject(p, ba.ctx)
}

// TransformedDirection returns the TransformedDirection property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#transformeddirection
func (s *SpotLight) TransformedDirection(transformedDirection *Vector3) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(transformedDirection.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetTransformedDirection sets the TransformedDirection property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#transformeddirection
func (s *SpotLight) SetTransformedDirection(transformedDirection *Vector3) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(transformedDirection.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// TransformedPosition returns the TransformedPosition property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#transformedposition
func (s *SpotLight) TransformedPosition(transformedPosition *Vector3) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(transformedPosition.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetTransformedPosition sets the TransformedPosition property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#transformedposition
func (s *SpotLight) SetTransformedPosition(transformedPosition *Vector3) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(transformedPosition.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#uniqueid
func (s *SpotLight) UniqueId(uniqueId float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(uniqueId)
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#uniqueid
func (s *SpotLight) SetUniqueId(uniqueId float64) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(uniqueId)
	return SpotLightFromJSObject(p, ba.ctx)
}

// WorldMatrixFromCache returns the WorldMatrixFromCache property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#worldmatrixfromcache
func (s *SpotLight) WorldMatrixFromCache(worldMatrixFromCache *Matrix) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(worldMatrixFromCache.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

// SetWorldMatrixFromCache sets the WorldMatrixFromCache property of class SpotLight.
//
// https://doc.babylonjs.com/api/classes/babylon.spotlight#worldmatrixfromcache
func (s *SpotLight) SetWorldMatrixFromCache(worldMatrixFromCache *Matrix) *SpotLight {
	p := ba.ctx.Get("SpotLight").New(worldMatrixFromCache.JSObject())
	return SpotLightFromJSObject(p, ba.ctx)
}

*/
