// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// NLerpBlock represents a babylon.js NLerpBlock.
// Block used to normalize lerp between 2 values
type NLerpBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (n *NLerpBlock) JSObject() js.Value { return n.p }

// NLerpBlock returns a NLerpBlock JavaScript class.
func (ba *Babylon) NLerpBlock() *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock")
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// NLerpBlockFromJSObject returns a wrapped NLerpBlock JavaScript class.
func NLerpBlockFromJSObject(p js.Value, ctx js.Value) *NLerpBlock {
	return &NLerpBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// NewNLerpBlock returns a new NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock
func (ba *Babylon) NewNLerpBlock(name string) *NLerpBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("NLerpBlock").New(args...)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#autoconfigure
func (n *NLerpBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	n.p.Call("autoConfigure", args...)
}

// NLerpBlockBindOpts contains optional parameters for NLerpBlock.Bind.
type NLerpBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#bind
func (n *NLerpBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *NLerpBlockBindOpts) {
	if opts == nil {
		opts = &NLerpBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	n.p.Call("bind", args...)
}

// Build calls the Build method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#build
func (n *NLerpBlock) Build(state *NodeMaterialBuildState, activeBlocks *NodeMaterialBlock) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, state.JSObject())
	args = append(args, activeBlocks.JSObject())

	retVal := n.p.Call("build", args...)
	return retVal.Bool()
}

// NLerpBlockCloneOpts contains optional parameters for NLerpBlock.Clone.
type NLerpBlockCloneOpts struct {
	RootUrl *string
}

// Clone calls the Clone method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#clone
func (n *NLerpBlock) Clone(scene *Scene, opts *NLerpBlockCloneOpts) *NodeMaterialBlock {
	if opts == nil {
		opts = &NLerpBlockCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := n.p.Call("clone", args...)
	return NodeMaterialBlockFromJSObject(retVal, n.ctx)
}

// NLerpBlockConnectToOpts contains optional parameters for NLerpBlock.ConnectTo.
type NLerpBlockConnectToOpts struct {
	Options js.Value
}

// ConnectTo calls the ConnectTo method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#connectto
func (n *NLerpBlock) ConnectTo(other *NodeMaterialBlock, opts *NLerpBlockConnectToOpts) *NLerpBlock {
	if opts == nil {
		opts = &NLerpBlockConnectToOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, other.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := n.p.Call("connectTo", args...)
	return NLerpBlockFromJSObject(retVal, n.ctx)
}

// Dispose calls the Dispose method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#dispose
func (n *NLerpBlock) Dispose() {

	args := make([]interface{}, 0, 0+0)

	n.p.Call("dispose", args...)
}

// GetClassName calls the GetClassName method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#getclassname
func (n *NLerpBlock) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := n.p.Call("getClassName", args...)
	return retVal.String()
}

// NLerpBlockGetFirstAvailableInputOpts contains optional parameters for NLerpBlock.GetFirstAvailableInput.
type NLerpBlockGetFirstAvailableInputOpts struct {
	ForOutput *NodeMaterialConnectionPoint
}

// GetFirstAvailableInput calls the GetFirstAvailableInput method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#getfirstavailableinput
func (n *NLerpBlock) GetFirstAvailableInput(opts *NLerpBlockGetFirstAvailableInputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &NLerpBlockGetFirstAvailableInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForOutput == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForOutput.JSObject())
	}

	retVal := n.p.Call("getFirstAvailableInput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, n.ctx)
}

// NLerpBlockGetFirstAvailableOutputOpts contains optional parameters for NLerpBlock.GetFirstAvailableOutput.
type NLerpBlockGetFirstAvailableOutputOpts struct {
	ForBlock *NodeMaterialBlock
}

// GetFirstAvailableOutput calls the GetFirstAvailableOutput method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#getfirstavailableoutput
func (n *NLerpBlock) GetFirstAvailableOutput(opts *NLerpBlockGetFirstAvailableOutputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &NLerpBlockGetFirstAvailableOutputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForBlock == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForBlock.JSObject())
	}

	retVal := n.p.Call("getFirstAvailableOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, n.ctx)
}

// GetInputByName calls the GetInputByName method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#getinputbyname
func (n *NLerpBlock) GetInputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := n.p.Call("getInputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, n.ctx)
}

// GetOutputByName calls the GetOutputByName method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#getoutputbyname
func (n *NLerpBlock) GetOutputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := n.p.Call("getOutputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, n.ctx)
}

// GetSiblingOutput calls the GetSiblingOutput method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#getsiblingoutput
func (n *NLerpBlock) GetSiblingOutput(current *NodeMaterialConnectionPoint) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, current.JSObject())

	retVal := n.p.Call("getSiblingOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, n.ctx)
}

// Initialize calls the Initialize method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#initialize
func (n *NLerpBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	n.p.Call("initialize", args...)
}

// NLerpBlockInitializeDefinesOpts contains optional parameters for NLerpBlock.InitializeDefines.
type NLerpBlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#initializedefines
func (n *NLerpBlock) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *NLerpBlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &NLerpBlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	n.p.Call("initializeDefines", args...)
}

// NLerpBlockIsReadyOpts contains optional parameters for NLerpBlock.IsReady.
type NLerpBlockIsReadyOpts struct {
	UseInstances *bool
}

// IsReady calls the IsReady method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#isready
func (n *NLerpBlock) IsReady(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *NLerpBlockIsReadyOpts) bool {
	if opts == nil {
		opts = &NLerpBlockIsReadyOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := n.p.Call("isReady", args...)
	return retVal.Bool()
}

// NLerpBlockPrepareDefinesOpts contains optional parameters for NLerpBlock.PrepareDefines.
type NLerpBlockPrepareDefinesOpts struct {
	UseInstances *bool
}

// PrepareDefines calls the PrepareDefines method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#preparedefines
func (n *NLerpBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *NLerpBlockPrepareDefinesOpts) {
	if opts == nil {
		opts = &NLerpBlockPrepareDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	n.p.Call("prepareDefines", args...)
}

// ProvideFallbacks calls the ProvideFallbacks method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#providefallbacks
func (n *NLerpBlock) ProvideFallbacks(mesh *AbstractMesh, fallbacks *EffectFallbacks) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, fallbacks.JSObject())

	n.p.Call("provideFallbacks", args...)
}

// NLerpBlockRegisterInputOpts contains optional parameters for NLerpBlock.RegisterInput.
type NLerpBlockRegisterInputOpts struct {
	IsOptional *bool
	Target     js.Value
}

// RegisterInput calls the RegisterInput method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#registerinput
func (n *NLerpBlock) RegisterInput(name string, jsType js.Value, opts *NLerpBlockRegisterInputOpts) *NLerpBlock {
	if opts == nil {
		opts = &NLerpBlockRegisterInputOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, jsType)

	if opts.IsOptional == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsOptional)
	}
	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := n.p.Call("registerInput", args...)
	return NLerpBlockFromJSObject(retVal, n.ctx)
}

// NLerpBlockRegisterOutputOpts contains optional parameters for NLerpBlock.RegisterOutput.
type NLerpBlockRegisterOutputOpts struct {
	Target js.Value
}

// RegisterOutput calls the RegisterOutput method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#registeroutput
func (n *NLerpBlock) RegisterOutput(name string, jsType js.Value, opts *NLerpBlockRegisterOutputOpts) *NLerpBlock {
	if opts == nil {
		opts = &NLerpBlockRegisterOutputOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, jsType)

	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := n.p.Call("registerOutput", args...)
	return NLerpBlockFromJSObject(retVal, n.ctx)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#replacerepeatablecontent
func (n *NLerpBlock) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	n.p.Call("replaceRepeatableContent", args...)
}

// Serialize calls the Serialize method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#serialize
func (n *NLerpBlock) Serialize() interface{} {

	args := make([]interface{}, 0, 0+0)

	retVal := n.p.Call("serialize", args...)
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#updateuniformsandsamples
func (n *NLerpBlock) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers string) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, state.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)
	args = append(args, uniformBuffers)

	n.p.Call("updateUniformsAndSamples", args...)
}

/*

// BuildId returns the BuildId property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#buildid
func (n *NLerpBlock) BuildId(buildId float64) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(buildId)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// SetBuildId sets the BuildId property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#buildid
func (n *NLerpBlock) SetBuildId(buildId float64) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(buildId)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// Comments returns the Comments property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#comments
func (n *NLerpBlock) Comments(comments string) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(comments)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// SetComments sets the Comments property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#comments
func (n *NLerpBlock) SetComments(comments string) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(comments)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// Gradient returns the Gradient property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#gradient
func (n *NLerpBlock) Gradient(gradient *NodeMaterialConnectionPoint) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(gradient.JSObject())
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// SetGradient sets the Gradient property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#gradient
func (n *NLerpBlock) SetGradient(gradient *NodeMaterialConnectionPoint) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(gradient.JSObject())
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#inputs
func (n *NLerpBlock) Inputs(inputs *NodeMaterialConnectionPoint) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(inputs.JSObject())
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#inputs
func (n *NLerpBlock) SetInputs(inputs *NodeMaterialConnectionPoint) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(inputs.JSObject())
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// IsFinalMerger returns the IsFinalMerger property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#isfinalmerger
func (n *NLerpBlock) IsFinalMerger(isFinalMerger bool) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(isFinalMerger)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// SetIsFinalMerger sets the IsFinalMerger property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#isfinalmerger
func (n *NLerpBlock) SetIsFinalMerger(isFinalMerger bool) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(isFinalMerger)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// IsInput returns the IsInput property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#isinput
func (n *NLerpBlock) IsInput(isInput bool) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(isInput)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// SetIsInput sets the IsInput property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#isinput
func (n *NLerpBlock) SetIsInput(isInput bool) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(isInput)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// IsUnique returns the IsUnique property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#isunique
func (n *NLerpBlock) IsUnique(isUnique bool) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(isUnique)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// SetIsUnique sets the IsUnique property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#isunique
func (n *NLerpBlock) SetIsUnique(isUnique bool) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(isUnique)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// Left returns the Left property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#left
func (n *NLerpBlock) Left(left *NodeMaterialConnectionPoint) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(left.JSObject())
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#left
func (n *NLerpBlock) SetLeft(left *NodeMaterialConnectionPoint) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(left.JSObject())
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#name
func (n *NLerpBlock) Name(name string) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(name)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#name
func (n *NLerpBlock) SetName(name string) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(name)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#output
func (n *NLerpBlock) Output(output *NodeMaterialConnectionPoint) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(output.JSObject())
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#output
func (n *NLerpBlock) SetOutput(output *NodeMaterialConnectionPoint) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(output.JSObject())
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// Outputs returns the Outputs property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#outputs
func (n *NLerpBlock) Outputs(outputs *NodeMaterialConnectionPoint) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(outputs.JSObject())
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// SetOutputs sets the Outputs property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#outputs
func (n *NLerpBlock) SetOutputs(outputs *NodeMaterialConnectionPoint) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(outputs.JSObject())
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// Right returns the Right property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#right
func (n *NLerpBlock) Right(right *NodeMaterialConnectionPoint) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(right.JSObject())
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// SetRight sets the Right property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#right
func (n *NLerpBlock) SetRight(right *NodeMaterialConnectionPoint) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(right.JSObject())
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#target
func (n *NLerpBlock) Target(target js.Value) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(target)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#target
func (n *NLerpBlock) SetTarget(target js.Value) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(target)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#uniqueid
func (n *NLerpBlock) UniqueId(uniqueId float64) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(uniqueId)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#uniqueid
func (n *NLerpBlock) SetUniqueId(uniqueId float64) *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock").New(uniqueId)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

*/
