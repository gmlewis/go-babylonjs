// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// NLerpBlock represents a babylon.js NLerpBlock.
// Block used to normalize lerp between 2 values
type NLerpBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (n *NLerpBlock) JSObject() js.Value { return n.p }

// NLerpBlock returns a NLerpBlock JavaScript class.
func (ba *Babylon) NLerpBlock() *NLerpBlock {
	p := ba.ctx.Get("NLerpBlock")
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// NLerpBlockFromJSObject returns a wrapped NLerpBlock JavaScript class.
func NLerpBlockFromJSObject(p js.Value, ctx js.Value) *NLerpBlock {
	return &NLerpBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// NLerpBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func NLerpBlockArrayToJSArray(array []*NLerpBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewNLerpBlock returns a new NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock
func (ba *Babylon) NewNLerpBlock(name string) *NLerpBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("NLerpBlock").New(args...)
	return NLerpBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the NLerpBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#getclassname
func (n *NLerpBlock) GetClassName() string {

	retVal := n.p.Call("getClassName")
	return retVal.String()
}

// Gradient returns the Gradient property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#gradient
func (n *NLerpBlock) Gradient() *NodeMaterialConnectionPoint {
	retVal := n.p.Get("gradient")
	return NodeMaterialConnectionPointFromJSObject(retVal, n.ctx)
}

// SetGradient sets the Gradient property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#gradient
func (n *NLerpBlock) SetGradient(gradient *NodeMaterialConnectionPoint) *NLerpBlock {
	n.p.Set("gradient", gradient.JSObject())
	return n
}

// Left returns the Left property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#left
func (n *NLerpBlock) Left() *NodeMaterialConnectionPoint {
	retVal := n.p.Get("left")
	return NodeMaterialConnectionPointFromJSObject(retVal, n.ctx)
}

// SetLeft sets the Left property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#left
func (n *NLerpBlock) SetLeft(left *NodeMaterialConnectionPoint) *NLerpBlock {
	n.p.Set("left", left.JSObject())
	return n
}

// Output returns the Output property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#output
func (n *NLerpBlock) Output() *NodeMaterialConnectionPoint {
	retVal := n.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, n.ctx)
}

// SetOutput sets the Output property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#output
func (n *NLerpBlock) SetOutput(output *NodeMaterialConnectionPoint) *NLerpBlock {
	n.p.Set("output", output.JSObject())
	return n
}

// Right returns the Right property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#right
func (n *NLerpBlock) Right() *NodeMaterialConnectionPoint {
	retVal := n.p.Get("right")
	return NodeMaterialConnectionPointFromJSObject(retVal, n.ctx)
}

// SetRight sets the Right property of class NLerpBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.nlerpblock#right
func (n *NLerpBlock) SetRight(right *NodeMaterialConnectionPoint) *NLerpBlock {
	n.p.Set("right", right.JSObject())
	return n
}
