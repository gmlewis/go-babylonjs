// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ElasticEase represents a babylon.js ElasticEase.
// Easing function with an elastic shape (see link below).
//
// See: https://easings.net/#easeInElastic
// See: http://doc.babylonjs.com/babylon101/animations#easing-functions
type ElasticEase struct {
	*EasingFunction
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *ElasticEase) JSObject() js.Value { return e.p }

// ElasticEase returns a ElasticEase JavaScript class.
func (ba *Babylon) ElasticEase() *ElasticEase {
	p := ba.ctx.Get("ElasticEase")
	return ElasticEaseFromJSObject(p, ba.ctx)
}

// ElasticEaseFromJSObject returns a wrapped ElasticEase JavaScript class.
func ElasticEaseFromJSObject(p js.Value, ctx js.Value) *ElasticEase {
	return &ElasticEase{EasingFunction: EasingFunctionFromJSObject(p, ctx), ctx: ctx}
}

// ElasticEaseArrayToJSArray returns a JavaScript Array for the wrapped array.
func ElasticEaseArrayToJSArray(array []*ElasticEase) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewElasticEaseOpts contains optional parameters for NewElasticEase.
type NewElasticEaseOpts struct {
	Oscillations *float64
	Springiness  *float64
}

// NewElasticEase returns a new ElasticEase object.
//
// https://doc.babylonjs.com/api/classes/babylon.elasticease
func (ba *Babylon) NewElasticEase(opts *NewElasticEaseOpts) *ElasticEase {
	if opts == nil {
		opts = &NewElasticEaseOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Oscillations == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Oscillations)
	}
	if opts.Springiness == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Springiness)
	}

	p := ba.ctx.Get("ElasticEase").New(args...)
	return ElasticEaseFromJSObject(p, ba.ctx)
}

// Oscillations returns the Oscillations property of class ElasticEase.
//
// https://doc.babylonjs.com/api/classes/babylon.elasticease#oscillations
func (e *ElasticEase) Oscillations() float64 {
	retVal := e.p.Get("oscillations")
	return retVal.Float()
}

// SetOscillations sets the Oscillations property of class ElasticEase.
//
// https://doc.babylonjs.com/api/classes/babylon.elasticease#oscillations
func (e *ElasticEase) SetOscillations(oscillations float64) *ElasticEase {
	e.p.Set("oscillations", oscillations)
	return e
}

// Springiness returns the Springiness property of class ElasticEase.
//
// https://doc.babylonjs.com/api/classes/babylon.elasticease#springiness
func (e *ElasticEase) Springiness() float64 {
	retVal := e.p.Get("springiness")
	return retVal.Float()
}

// SetSpringiness sets the Springiness property of class ElasticEase.
//
// https://doc.babylonjs.com/api/classes/babylon.elasticease#springiness
func (e *ElasticEase) SetSpringiness(springiness float64) *ElasticEase {
	e.p.Set("springiness", springiness)
	return e
}
