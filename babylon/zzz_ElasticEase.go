// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ElasticEase represents a babylon.js ElasticEase.
// Easing function with an elastic shape (see link below).
//
// See: http://doc.babylonjs.com/babylon101/animations#easing-functions
type ElasticEase struct {
	*EasingFunction
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *ElasticEase) JSObject() js.Value { return e.p }

// ElasticEase returns a ElasticEase JavaScript class.
func (ba *Babylon) ElasticEase() *ElasticEase {
	p := ba.ctx.Get("ElasticEase")
	return ElasticEaseFromJSObject(p, ba.ctx)
}

// ElasticEaseFromJSObject returns a wrapped ElasticEase JavaScript class.
func ElasticEaseFromJSObject(p js.Value, ctx js.Value) *ElasticEase {
	return &ElasticEase{EasingFunction: EasingFunctionFromJSObject(p, ctx), ctx: ctx}
}

// NewElasticEaseOpts contains optional parameters for NewElasticEase.
type NewElasticEaseOpts struct {
	Oscillations *JSFloat64

	Springiness *JSFloat64
}

// NewElasticEase returns a new ElasticEase object.
//
// https://doc.babylonjs.com/api/classes/babylon.elasticease
func (ba *Babylon) NewElasticEase(opts *NewElasticEaseOpts) *ElasticEase {
	if opts == nil {
		opts = &NewElasticEaseOpts{}
	}

	p := ba.ctx.Get("ElasticEase").New(opts.Oscillations.JSObject(), opts.Springiness.JSObject())
	return ElasticEaseFromJSObject(p, ba.ctx)
}

// TODO: methods
