// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// NormalBlendBlock represents a babylon.js NormalBlendBlock.
// Block used to blend normals
type NormalBlendBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (n *NormalBlendBlock) JSObject() js.Value { return n.p }

// NormalBlendBlock returns a NormalBlendBlock JavaScript class.
func (ba *Babylon) NormalBlendBlock() *NormalBlendBlock {
	p := ba.ctx.Get("NormalBlendBlock")
	return NormalBlendBlockFromJSObject(p, ba.ctx)
}

// NormalBlendBlockFromJSObject returns a wrapped NormalBlendBlock JavaScript class.
func NormalBlendBlockFromJSObject(p js.Value, ctx js.Value) *NormalBlendBlock {
	return &NormalBlendBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// NormalBlendBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func NormalBlendBlockArrayToJSArray(array []*NormalBlendBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewNormalBlendBlock returns a new NormalBlendBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.normalblendblock
func (ba *Babylon) NewNormalBlendBlock(name string) *NormalBlendBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("NormalBlendBlock").New(args...)
	return NormalBlendBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the NormalBlendBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.normalblendblock#getclassname
func (n *NormalBlendBlock) GetClassName() string {

	retVal := n.p.Call("getClassName")
	return retVal.String()
}

// NormalMap0 returns the NormalMap0 property of class NormalBlendBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.normalblendblock#normalmap0
func (n *NormalBlendBlock) NormalMap0() *NodeMaterialConnectionPoint {
	retVal := n.p.Get("normalMap0")
	return NodeMaterialConnectionPointFromJSObject(retVal, n.ctx)
}

// SetNormalMap0 sets the NormalMap0 property of class NormalBlendBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.normalblendblock#normalmap0
func (n *NormalBlendBlock) SetNormalMap0(normalMap0 *NodeMaterialConnectionPoint) *NormalBlendBlock {
	n.p.Set("normalMap0", normalMap0.JSObject())
	return n
}

// NormalMap1 returns the NormalMap1 property of class NormalBlendBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.normalblendblock#normalmap1
func (n *NormalBlendBlock) NormalMap1() *NodeMaterialConnectionPoint {
	retVal := n.p.Get("normalMap1")
	return NodeMaterialConnectionPointFromJSObject(retVal, n.ctx)
}

// SetNormalMap1 sets the NormalMap1 property of class NormalBlendBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.normalblendblock#normalmap1
func (n *NormalBlendBlock) SetNormalMap1(normalMap1 *NodeMaterialConnectionPoint) *NormalBlendBlock {
	n.p.Set("normalMap1", normalMap1.JSObject())
	return n
}

// Output returns the Output property of class NormalBlendBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.normalblendblock#output
func (n *NormalBlendBlock) Output() *NodeMaterialConnectionPoint {
	retVal := n.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, n.ctx)
}

// SetOutput sets the Output property of class NormalBlendBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.normalblendblock#output
func (n *NormalBlendBlock) SetOutput(output *NodeMaterialConnectionPoint) *NormalBlendBlock {
	n.p.Set("output", output.JSObject())
	return n
}
