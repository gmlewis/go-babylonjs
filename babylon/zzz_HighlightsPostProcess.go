// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// HighlightsPostProcess represents a babylon.js HighlightsPostProcess.
// Extracts highlights from the image
//
// See: https://doc.babylonjs.com/how_to/how_to_use_postprocesses
type HighlightsPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (h *HighlightsPostProcess) JSObject() js.Value { return h.p }

// HighlightsPostProcess returns a HighlightsPostProcess JavaScript class.
func (ba *Babylon) HighlightsPostProcess() *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess")
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// HighlightsPostProcessFromJSObject returns a wrapped HighlightsPostProcess JavaScript class.
func HighlightsPostProcessFromJSObject(p js.Value, ctx js.Value) *HighlightsPostProcess {
	return &HighlightsPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// HighlightsPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func HighlightsPostProcessArrayToJSArray(array []*HighlightsPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewHighlightsPostProcessOpts contains optional parameters for NewHighlightsPostProcess.
type NewHighlightsPostProcessOpts struct {
	SamplingMode *float64
	Engine       *Engine
	Reusable     *bool
	TextureType  *float64
}

// NewHighlightsPostProcess returns a new HighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess
func (ba *Babylon) NewHighlightsPostProcess(name string, options float64, camera *Camera, opts *NewHighlightsPostProcessOpts) *HighlightsPostProcess {
	if opts == nil {
		opts = &NewHighlightsPostProcessOpts{}
	}

	args := make([]interface{}, 0, 3+4)

	args = append(args, name)
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}

	p := ba.ctx.Get("HighlightsPostProcess").New(args...)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// HighlightsPostProcessActivateOpts contains optional parameters for HighlightsPostProcess.Activate.
type HighlightsPostProcessActivateOpts struct {
	SourceTexture     *InternalTexture
	ForceDepthStencil *bool
}

// Activate calls the Activate method on the HighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#activate
func (h *HighlightsPostProcess) Activate(camera *Camera, opts *HighlightsPostProcessActivateOpts) *InternalTexture {
	if opts == nil {
		opts = &HighlightsPostProcessActivateOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, camera.JSObject())

	if opts.SourceTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.SourceTexture.JSObject())
	}
	if opts.ForceDepthStencil == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDepthStencil)
	}

	retVal := h.p.Call("activate", args...)
	return InternalTextureFromJSObject(retVal, h.ctx)
}

// Apply calls the Apply method on the HighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#apply
func (h *HighlightsPostProcess) Apply() *Effect {

	retVal := h.p.Call("apply")
	return EffectFromJSObject(retVal, h.ctx)
}

// HighlightsPostProcessDisposeOpts contains optional parameters for HighlightsPostProcess.Dispose.
type HighlightsPostProcessDisposeOpts struct {
	Camera *Camera
}

// Dispose calls the Dispose method on the HighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#dispose
func (h *HighlightsPostProcess) Dispose(opts *HighlightsPostProcessDisposeOpts) {
	if opts == nil {
		opts = &HighlightsPostProcessDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}

	h.p.Call("dispose", args...)
}

// GetCamera calls the GetCamera method on the HighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#getcamera
func (h *HighlightsPostProcess) GetCamera() *Camera {

	retVal := h.p.Call("getCamera")
	return CameraFromJSObject(retVal, h.ctx)
}

// GetClassName calls the GetClassName method on the HighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#getclassname
func (h *HighlightsPostProcess) GetClassName() string {

	retVal := h.p.Call("getClassName")
	return retVal.String()
}

// GetEffect calls the GetEffect method on the HighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#geteffect
func (h *HighlightsPostProcess) GetEffect() *Effect {

	retVal := h.p.Call("getEffect")
	return EffectFromJSObject(retVal, h.ctx)
}

// GetEffectName calls the GetEffectName method on the HighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#geteffectname
func (h *HighlightsPostProcess) GetEffectName() string {

	retVal := h.p.Call("getEffectName")
	return retVal.String()
}

// GetEngine calls the GetEngine method on the HighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#getengine
func (h *HighlightsPostProcess) GetEngine() *Engine {

	retVal := h.p.Call("getEngine")
	return EngineFromJSObject(retVal, h.ctx)
}

// IsReady calls the IsReady method on the HighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#isready
func (h *HighlightsPostProcess) IsReady() bool {

	retVal := h.p.Call("isReady")
	return retVal.Bool()
}

// IsReusable calls the IsReusable method on the HighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#isreusable
func (h *HighlightsPostProcess) IsReusable() bool {

	retVal := h.p.Call("isReusable")
	return retVal.Bool()
}

// MarkTextureDirty calls the MarkTextureDirty method on the HighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#marktexturedirty
func (h *HighlightsPostProcess) MarkTextureDirty() {

	h.p.Call("markTextureDirty")
}

// ShareOutputWith calls the ShareOutputWith method on the HighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#shareoutputwith
func (h *HighlightsPostProcess) ShareOutputWith(postProcess *PostProcess) *PostProcess {

	args := make([]interface{}, 0, 1+0)

	args = append(args, postProcess.JSObject())

	retVal := h.p.Call("shareOutputWith", args...)
	return PostProcessFromJSObject(retVal, h.ctx)
}

// HighlightsPostProcessUpdateEffectOpts contains optional parameters for HighlightsPostProcess.UpdateEffect.
type HighlightsPostProcessUpdateEffectOpts struct {
	Defines         *string
	Uniforms        *string
	Samplers        *string
	IndexParameters *interface{}
	OnCompiled      func()
	OnError         func()
}

// UpdateEffect calls the UpdateEffect method on the HighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#updateeffect
func (h *HighlightsPostProcess) UpdateEffect(opts *HighlightsPostProcessUpdateEffectOpts) {
	if opts == nil {
		opts = &HighlightsPostProcessUpdateEffectOpts{}
	}

	args := make([]interface{}, 0, 0+6)

	if opts.Defines == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Defines)
	}
	if opts.Uniforms == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Uniforms)
	}
	if opts.Samplers == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Samplers)
	}
	if opts.IndexParameters == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.IndexParameters)
	}
	if opts.OnCompiled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnCompiled)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}

	h.p.Call("updateEffect", args...)
}

// UseOwnOutput calls the UseOwnOutput method on the HighlightsPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#useownoutput
func (h *HighlightsPostProcess) UseOwnOutput() {

	h.p.Call("useOwnOutput")
}

/*

// AdaptScaleToCurrentViewport returns the AdaptScaleToCurrentViewport property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#adaptscaletocurrentviewport
func (h *HighlightsPostProcess) AdaptScaleToCurrentViewport(adaptScaleToCurrentViewport bool) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(adaptScaleToCurrentViewport)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetAdaptScaleToCurrentViewport sets the AdaptScaleToCurrentViewport property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#adaptscaletocurrentviewport
func (h *HighlightsPostProcess) SetAdaptScaleToCurrentViewport(adaptScaleToCurrentViewport bool) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(adaptScaleToCurrentViewport)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// AlphaConstants returns the AlphaConstants property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#alphaconstants
func (h *HighlightsPostProcess) AlphaConstants(alphaConstants *Color4) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(alphaConstants.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetAlphaConstants sets the AlphaConstants property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#alphaconstants
func (h *HighlightsPostProcess) SetAlphaConstants(alphaConstants *Color4) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(alphaConstants.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// AlphaMode returns the AlphaMode property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#alphamode
func (h *HighlightsPostProcess) AlphaMode(alphaMode float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(alphaMode)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetAlphaMode sets the AlphaMode property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#alphamode
func (h *HighlightsPostProcess) SetAlphaMode(alphaMode float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(alphaMode)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// AlwaysForcePOT returns the AlwaysForcePOT property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#alwaysforcepot
func (h *HighlightsPostProcess) AlwaysForcePOT(alwaysForcePOT bool) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(alwaysForcePOT)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetAlwaysForcePOT sets the AlwaysForcePOT property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#alwaysforcepot
func (h *HighlightsPostProcess) SetAlwaysForcePOT(alwaysForcePOT bool) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(alwaysForcePOT)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// Animations returns the Animations property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#animations
func (h *HighlightsPostProcess) Animations(animations *Animation) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(animations.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#animations
func (h *HighlightsPostProcess) SetAnimations(animations *Animation) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(animations.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// AspectRatio returns the AspectRatio property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#aspectratio
func (h *HighlightsPostProcess) AspectRatio(aspectRatio float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(aspectRatio)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetAspectRatio sets the AspectRatio property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#aspectratio
func (h *HighlightsPostProcess) SetAspectRatio(aspectRatio float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(aspectRatio)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// AutoClear returns the AutoClear property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#autoclear
func (h *HighlightsPostProcess) AutoClear(autoClear bool) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(autoClear)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetAutoClear sets the AutoClear property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#autoclear
func (h *HighlightsPostProcess) SetAutoClear(autoClear bool) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(autoClear)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// ClearColor returns the ClearColor property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#clearcolor
func (h *HighlightsPostProcess) ClearColor(clearColor *Color4) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(clearColor.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetClearColor sets the ClearColor property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#clearcolor
func (h *HighlightsPostProcess) SetClearColor(clearColor *Color4) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(clearColor.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// EnablePixelPerfectMode returns the EnablePixelPerfectMode property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#enablepixelperfectmode
func (h *HighlightsPostProcess) EnablePixelPerfectMode(enablePixelPerfectMode bool) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(enablePixelPerfectMode)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetEnablePixelPerfectMode sets the EnablePixelPerfectMode property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#enablepixelperfectmode
func (h *HighlightsPostProcess) SetEnablePixelPerfectMode(enablePixelPerfectMode bool) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(enablePixelPerfectMode)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// ForceFullscreenViewport returns the ForceFullscreenViewport property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#forcefullscreenviewport
func (h *HighlightsPostProcess) ForceFullscreenViewport(forceFullscreenViewport bool) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(forceFullscreenViewport)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetForceFullscreenViewport sets the ForceFullscreenViewport property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#forcefullscreenviewport
func (h *HighlightsPostProcess) SetForceFullscreenViewport(forceFullscreenViewport bool) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(forceFullscreenViewport)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// Height returns the Height property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#height
func (h *HighlightsPostProcess) Height(height float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(height)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetHeight sets the Height property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#height
func (h *HighlightsPostProcess) SetHeight(height float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(height)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// InputTexture returns the InputTexture property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#inputtexture
func (h *HighlightsPostProcess) InputTexture(inputTexture *InternalTexture) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(inputTexture.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetInputTexture sets the InputTexture property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#inputtexture
func (h *HighlightsPostProcess) SetInputTexture(inputTexture *InternalTexture) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(inputTexture.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#inspectablecustomproperties
func (h *HighlightsPostProcess) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(inspectableCustomProperties.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#inspectablecustomproperties
func (h *HighlightsPostProcess) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(inspectableCustomProperties.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// IsSupported returns the IsSupported property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#issupported
func (h *HighlightsPostProcess) IsSupported(isSupported bool) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(isSupported)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetIsSupported sets the IsSupported property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#issupported
func (h *HighlightsPostProcess) SetIsSupported(isSupported bool) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(isSupported)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#name
func (h *HighlightsPostProcess) Name(name string) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(name)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#name
func (h *HighlightsPostProcess) SetName(name string) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(name)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// OnActivate returns the OnActivate property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onactivate
func (h *HighlightsPostProcess) OnActivate(onActivate func()) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onActivate(); return nil}))
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetOnActivate sets the OnActivate property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onactivate
func (h *HighlightsPostProcess) SetOnActivate(onActivate func()) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onActivate(); return nil}))
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// OnActivateObservable returns the OnActivateObservable property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onactivateobservable
func (h *HighlightsPostProcess) OnActivateObservable(onActivateObservable *Observable) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(onActivateObservable.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetOnActivateObservable sets the OnActivateObservable property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onactivateobservable
func (h *HighlightsPostProcess) SetOnActivateObservable(onActivateObservable *Observable) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(onActivateObservable.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// OnAfterRender returns the OnAfterRender property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onafterrender
func (h *HighlightsPostProcess) OnAfterRender(onAfterRender func()) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onAfterRender(); return nil}))
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetOnAfterRender sets the OnAfterRender property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onafterrender
func (h *HighlightsPostProcess) SetOnAfterRender(onAfterRender func()) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onAfterRender(); return nil}))
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// OnAfterRenderObservable returns the OnAfterRenderObservable property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onafterrenderobservable
func (h *HighlightsPostProcess) OnAfterRenderObservable(onAfterRenderObservable *Observable) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(onAfterRenderObservable.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetOnAfterRenderObservable sets the OnAfterRenderObservable property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onafterrenderobservable
func (h *HighlightsPostProcess) SetOnAfterRenderObservable(onAfterRenderObservable *Observable) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(onAfterRenderObservable.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// OnApply returns the OnApply property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onapply
func (h *HighlightsPostProcess) OnApply(onApply func()) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onApply(); return nil}))
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetOnApply sets the OnApply property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onapply
func (h *HighlightsPostProcess) SetOnApply(onApply func()) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onApply(); return nil}))
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// OnApplyObservable returns the OnApplyObservable property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onapplyobservable
func (h *HighlightsPostProcess) OnApplyObservable(onApplyObservable *Observable) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(onApplyObservable.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetOnApplyObservable sets the OnApplyObservable property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onapplyobservable
func (h *HighlightsPostProcess) SetOnApplyObservable(onApplyObservable *Observable) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(onApplyObservable.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// OnBeforeRender returns the OnBeforeRender property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onbeforerender
func (h *HighlightsPostProcess) OnBeforeRender(onBeforeRender func()) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onBeforeRender(); return nil}))
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetOnBeforeRender sets the OnBeforeRender property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onbeforerender
func (h *HighlightsPostProcess) SetOnBeforeRender(onBeforeRender func()) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onBeforeRender(); return nil}))
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// OnBeforeRenderObservable returns the OnBeforeRenderObservable property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onbeforerenderobservable
func (h *HighlightsPostProcess) OnBeforeRenderObservable(onBeforeRenderObservable *Observable) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(onBeforeRenderObservable.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetOnBeforeRenderObservable sets the OnBeforeRenderObservable property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onbeforerenderobservable
func (h *HighlightsPostProcess) SetOnBeforeRenderObservable(onBeforeRenderObservable *Observable) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(onBeforeRenderObservable.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// OnSizeChanged returns the OnSizeChanged property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onsizechanged
func (h *HighlightsPostProcess) OnSizeChanged(onSizeChanged func()) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onSizeChanged(); return nil}))
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetOnSizeChanged sets the OnSizeChanged property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onsizechanged
func (h *HighlightsPostProcess) SetOnSizeChanged(onSizeChanged func()) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onSizeChanged(); return nil}))
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// OnSizeChangedObservable returns the OnSizeChangedObservable property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onsizechangedobservable
func (h *HighlightsPostProcess) OnSizeChangedObservable(onSizeChangedObservable *Observable) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(onSizeChangedObservable.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetOnSizeChangedObservable sets the OnSizeChangedObservable property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#onsizechangedobservable
func (h *HighlightsPostProcess) SetOnSizeChangedObservable(onSizeChangedObservable *Observable) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(onSizeChangedObservable.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// RenderTargetSamplingMode returns the RenderTargetSamplingMode property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#rendertargetsamplingmode
func (h *HighlightsPostProcess) RenderTargetSamplingMode(renderTargetSamplingMode float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(renderTargetSamplingMode)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetRenderTargetSamplingMode sets the RenderTargetSamplingMode property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#rendertargetsamplingmode
func (h *HighlightsPostProcess) SetRenderTargetSamplingMode(renderTargetSamplingMode float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(renderTargetSamplingMode)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// Samples returns the Samples property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#samples
func (h *HighlightsPostProcess) Samples(samples float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(samples)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetSamples sets the Samples property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#samples
func (h *HighlightsPostProcess) SetSamples(samples float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(samples)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// ScaleMode returns the ScaleMode property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#scalemode
func (h *HighlightsPostProcess) ScaleMode(scaleMode float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(scaleMode)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetScaleMode sets the ScaleMode property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#scalemode
func (h *HighlightsPostProcess) SetScaleMode(scaleMode float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(scaleMode)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// TexelSize returns the TexelSize property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#texelsize
func (h *HighlightsPostProcess) TexelSize(texelSize *Vector2) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(texelSize.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetTexelSize sets the TexelSize property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#texelsize
func (h *HighlightsPostProcess) SetTexelSize(texelSize *Vector2) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(texelSize.JSObject())
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#uniqueid
func (h *HighlightsPostProcess) UniqueId(uniqueId float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(uniqueId)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#uniqueid
func (h *HighlightsPostProcess) SetUniqueId(uniqueId float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(uniqueId)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#width
func (h *HighlightsPostProcess) Width(width float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(width)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class HighlightsPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.highlightspostprocess#width
func (h *HighlightsPostProcess) SetWidth(width float64) *HighlightsPostProcess {
	p := ba.ctx.Get("HighlightsPostProcess").New(width)
	return HighlightsPostProcessFromJSObject(p, ba.ctx)
}

*/
