// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// StringTools represents a babylon.js StringTools.
// Helper to manipulate strings
type StringTools struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *StringTools) JSObject() js.Value { return s.p }

// StringTools returns a StringTools JavaScript class.
func (ba *Babylon) StringTools() *StringTools {
	p := ba.ctx.Get("StringTools")
	return StringToolsFromJSObject(p, ba.ctx)
}

// StringToolsFromJSObject returns a wrapped StringTools JavaScript class.
func StringToolsFromJSObject(p js.Value, ctx js.Value) *StringTools {
	return &StringTools{p: p, ctx: ctx}
}

// StringToolsArrayToJSArray returns a JavaScript Array for the wrapped array.
func StringToolsArrayToJSArray(array []*StringTools) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Decode calls the Decode method on the StringTools object.
//
// https://doc.babylonjs.com/api/classes/babylon.stringtools#decode
func (s *StringTools) Decode(buffer js.Value) string {

	args := make([]interface{}, 0, 1+0)

	args = append(args, buffer)

	retVal := s.p.Call("Decode", args...)
	return retVal.String()
}

// EncodeArrayBufferToBase64 calls the EncodeArrayBufferToBase64 method on the StringTools object.
//
// https://doc.babylonjs.com/api/classes/babylon.stringtools#encodearraybuffertobase64
func (s *StringTools) EncodeArrayBufferToBase64(buffer js.Value) string {

	args := make([]interface{}, 0, 1+0)

	args = append(args, buffer)

	retVal := s.p.Call("EncodeArrayBufferToBase64", args...)
	return retVal.String()
}

// EndsWith calls the EndsWith method on the StringTools object.
//
// https://doc.babylonjs.com/api/classes/babylon.stringtools#endswith
func (s *StringTools) EndsWith(str string, suffix string) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, str)
	args = append(args, suffix)

	retVal := s.p.Call("EndsWith", args...)
	return retVal.Bool()
}

// StartsWith calls the StartsWith method on the StringTools object.
//
// https://doc.babylonjs.com/api/classes/babylon.stringtools#startswith
func (s *StringTools) StartsWith(str string, suffix string) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, str)
	args = append(args, suffix)

	retVal := s.p.Call("StartsWith", args...)
	return retVal.Bool()
}
