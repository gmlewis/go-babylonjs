// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IAssetsProgressEvent represents a babylon.js IAssetsProgressEvent.
// Define the interface used by progress events raised during assets loading
type IAssetsProgressEvent struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IAssetsProgressEvent) JSObject() js.Value { return i.p }

// IAssetsProgressEvent returns a IAssetsProgressEvent JavaScript class.
func (ba *Babylon) IAssetsProgressEvent() *IAssetsProgressEvent {
	p := ba.ctx.Get("IAssetsProgressEvent")
	return IAssetsProgressEventFromJSObject(p, ba.ctx)
}

// IAssetsProgressEventFromJSObject returns a wrapped IAssetsProgressEvent JavaScript class.
func IAssetsProgressEventFromJSObject(p js.Value, ctx js.Value) *IAssetsProgressEvent {
	return &IAssetsProgressEvent{p: p, ctx: ctx}
}

// IAssetsProgressEventArrayToJSArray returns a JavaScript Array for the wrapped array.
func IAssetsProgressEventArrayToJSArray(array []*IAssetsProgressEvent) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// RemainingCount returns the RemainingCount property of class IAssetsProgressEvent.
//
// https://doc.babylonjs.com/api/classes/babylon.iassetsprogressevent#remainingcount
func (i *IAssetsProgressEvent) RemainingCount() float64 {
	retVal := i.p.Get("remainingCount")
	return retVal.Float()
}

// SetRemainingCount sets the RemainingCount property of class IAssetsProgressEvent.
//
// https://doc.babylonjs.com/api/classes/babylon.iassetsprogressevent#remainingcount
func (i *IAssetsProgressEvent) SetRemainingCount(remainingCount float64) *IAssetsProgressEvent {
	i.p.Set("remainingCount", remainingCount)
	return i
}

// Task returns the Task property of class IAssetsProgressEvent.
//
// https://doc.babylonjs.com/api/classes/babylon.iassetsprogressevent#task
func (i *IAssetsProgressEvent) Task() *AbstractAssetTask {
	retVal := i.p.Get("task")
	return AbstractAssetTaskFromJSObject(retVal, i.ctx)
}

// SetTask sets the Task property of class IAssetsProgressEvent.
//
// https://doc.babylonjs.com/api/classes/babylon.iassetsprogressevent#task
func (i *IAssetsProgressEvent) SetTask(task *AbstractAssetTask) *IAssetsProgressEvent {
	i.p.Set("task", task.JSObject())
	return i
}

// TotalCount returns the TotalCount property of class IAssetsProgressEvent.
//
// https://doc.babylonjs.com/api/classes/babylon.iassetsprogressevent#totalcount
func (i *IAssetsProgressEvent) TotalCount() float64 {
	retVal := i.p.Get("totalCount")
	return retVal.Float()
}

// SetTotalCount sets the TotalCount property of class IAssetsProgressEvent.
//
// https://doc.babylonjs.com/api/classes/babylon.iassetsprogressevent#totalcount
func (i *IAssetsProgressEvent) SetTotalCount(totalCount float64) *IAssetsProgressEvent {
	i.p.Set("totalCount", totalCount)
	return i
}
