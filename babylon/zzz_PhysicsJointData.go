// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PhysicsJointData represents a babylon.js PhysicsJointData.
// Interface for Physics-Joint data
//
// See: https://doc.babylonjs.com/how_to/using_the_physics_engine
type PhysicsJointData struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PhysicsJointData) JSObject() js.Value { return p.p }

// PhysicsJointData returns a PhysicsJointData JavaScript class.
func (ba *Babylon) PhysicsJointData() *PhysicsJointData {
	p := ba.ctx.Get("PhysicsJointData")
	return PhysicsJointDataFromJSObject(p, ba.ctx)
}

// PhysicsJointDataFromJSObject returns a wrapped PhysicsJointData JavaScript class.
func PhysicsJointDataFromJSObject(p js.Value, ctx js.Value) *PhysicsJointData {
	return &PhysicsJointData{p: p, ctx: ctx}
}

// PhysicsJointDataArrayToJSArray returns a JavaScript Array for the wrapped array.
func PhysicsJointDataArrayToJSArray(array []*PhysicsJointData) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Collision returns the Collision property of class PhysicsJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsjointdata#collision
func (p *PhysicsJointData) Collision() bool {
	retVal := p.p.Get("collision")
	return retVal.Bool()
}

// SetCollision sets the Collision property of class PhysicsJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsjointdata#collision
func (p *PhysicsJointData) SetCollision(collision bool) *PhysicsJointData {
	p.p.Set("collision", collision)
	return p
}

// ConnectedAxis returns the ConnectedAxis property of class PhysicsJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsjointdata#connectedaxis
func (p *PhysicsJointData) ConnectedAxis() *Vector3 {
	retVal := p.p.Get("connectedAxis")
	return Vector3FromJSObject(retVal, p.ctx)
}

// SetConnectedAxis sets the ConnectedAxis property of class PhysicsJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsjointdata#connectedaxis
func (p *PhysicsJointData) SetConnectedAxis(connectedAxis *Vector3) *PhysicsJointData {
	p.p.Set("connectedAxis", connectedAxis.JSObject())
	return p
}

// ConnectedPivot returns the ConnectedPivot property of class PhysicsJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsjointdata#connectedpivot
func (p *PhysicsJointData) ConnectedPivot() *Vector3 {
	retVal := p.p.Get("connectedPivot")
	return Vector3FromJSObject(retVal, p.ctx)
}

// SetConnectedPivot sets the ConnectedPivot property of class PhysicsJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsjointdata#connectedpivot
func (p *PhysicsJointData) SetConnectedPivot(connectedPivot *Vector3) *PhysicsJointData {
	p.p.Set("connectedPivot", connectedPivot.JSObject())
	return p
}

// MainAxis returns the MainAxis property of class PhysicsJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsjointdata#mainaxis
func (p *PhysicsJointData) MainAxis() *Vector3 {
	retVal := p.p.Get("mainAxis")
	return Vector3FromJSObject(retVal, p.ctx)
}

// SetMainAxis sets the MainAxis property of class PhysicsJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsjointdata#mainaxis
func (p *PhysicsJointData) SetMainAxis(mainAxis *Vector3) *PhysicsJointData {
	p.p.Set("mainAxis", mainAxis.JSObject())
	return p
}

// MainPivot returns the MainPivot property of class PhysicsJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsjointdata#mainpivot
func (p *PhysicsJointData) MainPivot() *Vector3 {
	retVal := p.p.Get("mainPivot")
	return Vector3FromJSObject(retVal, p.ctx)
}

// SetMainPivot sets the MainPivot property of class PhysicsJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsjointdata#mainpivot
func (p *PhysicsJointData) SetMainPivot(mainPivot *Vector3) *PhysicsJointData {
	p.p.Set("mainPivot", mainPivot.JSObject())
	return p
}

// NativeParams returns the NativeParams property of class PhysicsJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsjointdata#nativeparams
func (p *PhysicsJointData) NativeParams() js.Value {
	retVal := p.p.Get("nativeParams")
	return retVal
}

// SetNativeParams sets the NativeParams property of class PhysicsJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsjointdata#nativeparams
func (p *PhysicsJointData) SetNativeParams(nativeParams JSObject) *PhysicsJointData {
	p.p.Set("nativeParams", nativeParams.JSObject())
	return p
}
