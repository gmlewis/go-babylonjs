// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Line represents a babylon.js Line.
// Class used to render 2D lines
type Line struct {
	*Control
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (l *Line) JSObject() js.Value { return l.p }

// Line returns a Line JavaScript class.
func (ba *Babylon) Line() *Line {
	p := ba.ctx.Get("Line")
	return LineFromJSObject(p, ba.ctx)
}

// LineFromJSObject returns a wrapped Line JavaScript class.
func LineFromJSObject(p js.Value, ctx js.Value) *Line {
	return &Line{Control: ControlFromJSObject(p, ctx), ctx: ctx}
}

// LineArrayToJSArray returns a JavaScript Array for the wrapped array.
func LineArrayToJSArray(array []*Line) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewLineOpts contains optional parameters for NewLine.
type NewLineOpts struct {
	Name *string
}

// NewLine returns a new Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line
func (ba *Babylon) NewLine(opts *NewLineOpts) *Line {
	if opts == nil {
		opts = &NewLineOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}

	p := ba.ctx.Get("Line").New(args...)
	return LineFromJSObject(p, ba.ctx)
}

// LineMoveToVector3Opts contains optional parameters for Line.MoveToVector3.
type LineMoveToVector3Opts struct {
	End *bool
}

// MoveToVector3 calls the MoveToVector3 method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#movetovector3
func (l *Line) MoveToVector3(position *Vector3, scene *Scene, opts *LineMoveToVector3Opts) {
	if opts == nil {
		opts = &LineMoveToVector3Opts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	if opts.End == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.End)
	}

	l.p.Call("moveToVector3", args...)
}

// _draw calls the _draw method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#_draw
func (l *Line) _draw(context js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, context)

	l.p.Call("_draw", args...)
}

// _measure calls the _measure method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#_measure
func (l *Line) _measure() {

	l.p.Call("_measure")
}

// Line_moveToProjectedPositionOpts contains optional parameters for Line._moveToProjectedPosition.
type Line_moveToProjectedPositionOpts struct {
	End *bool
}

// _moveToProjectedPosition calls the _moveToProjectedPosition method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#_movetoprojectedposition
func (l *Line) _moveToProjectedPosition(projectedPosition *Vector3, opts *Line_moveToProjectedPositionOpts) {
	if opts == nil {
		opts = &Line_moveToProjectedPositionOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, projectedPosition.JSObject())

	if opts.End == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.End)
	}

	l.p.Call("_moveToProjectedPosition", args...)
}

/*

// ConnectedControl returns the ConnectedControl property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#connectedcontrol
func (l *Line) ConnectedControl(connectedControl *Control) *Line {
	p := ba.ctx.Get("Line").New(connectedControl.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// SetConnectedControl sets the ConnectedControl property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#connectedcontrol
func (l *Line) SetConnectedControl(connectedControl *Control) *Line {
	p := ba.ctx.Get("Line").New(connectedControl.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// Dash returns the Dash property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#dash
func (l *Line) Dash(dash []float64) *Line {
	p := ba.ctx.Get("Line").New(dash)
	return LineFromJSObject(p, ba.ctx)
}

// SetDash sets the Dash property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#dash
func (l *Line) SetDash(dash []float64) *Line {
	p := ba.ctx.Get("Line").New(dash)
	return LineFromJSObject(p, ba.ctx)
}

// HorizontalAlignment returns the HorizontalAlignment property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#horizontalalignment
func (l *Line) HorizontalAlignment(horizontalAlignment float64) *Line {
	p := ba.ctx.Get("Line").New(horizontalAlignment)
	return LineFromJSObject(p, ba.ctx)
}

// SetHorizontalAlignment sets the HorizontalAlignment property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#horizontalalignment
func (l *Line) SetHorizontalAlignment(horizontalAlignment float64) *Line {
	p := ba.ctx.Get("Line").New(horizontalAlignment)
	return LineFromJSObject(p, ba.ctx)
}

// LineWidth returns the LineWidth property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#linewidth
func (l *Line) LineWidth(lineWidth float64) *Line {
	p := ba.ctx.Get("Line").New(lineWidth)
	return LineFromJSObject(p, ba.ctx)
}

// SetLineWidth sets the LineWidth property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#linewidth
func (l *Line) SetLineWidth(lineWidth float64) *Line {
	p := ba.ctx.Get("Line").New(lineWidth)
	return LineFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#name
func (l *Line) Name(name string) *Line {
	p := ba.ctx.Get("Line").New(name)
	return LineFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#name
func (l *Line) SetName(name string) *Line {
	p := ba.ctx.Get("Line").New(name)
	return LineFromJSObject(p, ba.ctx)
}

// VerticalAlignment returns the VerticalAlignment property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#verticalalignment
func (l *Line) VerticalAlignment(verticalAlignment float64) *Line {
	p := ba.ctx.Get("Line").New(verticalAlignment)
	return LineFromJSObject(p, ba.ctx)
}

// SetVerticalAlignment sets the VerticalAlignment property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#verticalalignment
func (l *Line) SetVerticalAlignment(verticalAlignment float64) *Line {
	p := ba.ctx.Get("Line").New(verticalAlignment)
	return LineFromJSObject(p, ba.ctx)
}

// X1 returns the X1 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#x1
func (l *Line) X1(x1 string) *Line {
	p := ba.ctx.Get("Line").New(x1)
	return LineFromJSObject(p, ba.ctx)
}

// SetX1 sets the X1 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#x1
func (l *Line) SetX1(x1 string) *Line {
	p := ba.ctx.Get("Line").New(x1)
	return LineFromJSObject(p, ba.ctx)
}

// X2 returns the X2 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#x2
func (l *Line) X2(x2 string) *Line {
	p := ba.ctx.Get("Line").New(x2)
	return LineFromJSObject(p, ba.ctx)
}

// SetX2 sets the X2 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#x2
func (l *Line) SetX2(x2 string) *Line {
	p := ba.ctx.Get("Line").New(x2)
	return LineFromJSObject(p, ba.ctx)
}

// Y1 returns the Y1 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#y1
func (l *Line) Y1(y1 string) *Line {
	p := ba.ctx.Get("Line").New(y1)
	return LineFromJSObject(p, ba.ctx)
}

// SetY1 sets the Y1 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#y1
func (l *Line) SetY1(y1 string) *Line {
	p := ba.ctx.Get("Line").New(y1)
	return LineFromJSObject(p, ba.ctx)
}

// Y2 returns the Y2 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#y2
func (l *Line) Y2(y2 string) *Line {
	p := ba.ctx.Get("Line").New(y2)
	return LineFromJSObject(p, ba.ctx)
}

// SetY2 sets the Y2 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#y2
func (l *Line) SetY2(y2 string) *Line {
	p := ba.ctx.Get("Line").New(y2)
	return LineFromJSObject(p, ba.ctx)
}

*/
