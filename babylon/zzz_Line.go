// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Line represents a babylon.js Line.
// Class used to render 2D lines
type Line struct {
	*Control
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (l *Line) JSObject() js.Value { return l.p }

// Line returns a Line JavaScript class.
func (ba *Babylon) Line() *Line {
	p := ba.ctx.Get("Line")
	return LineFromJSObject(p, ba.ctx)
}

// LineFromJSObject returns a wrapped Line JavaScript class.
func LineFromJSObject(p js.Value, ctx js.Value) *Line {
	return &Line{Control: ControlFromJSObject(p, ctx), ctx: ctx}
}

// LineArrayToJSArray returns a JavaScript Array for the wrapped array.
func LineArrayToJSArray(array []*Line) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewLineOpts contains optional parameters for NewLine.
type NewLineOpts struct {
	Name *string
}

// NewLine returns a new Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line
func (ba *Babylon) NewLine(opts *NewLineOpts) *Line {
	if opts == nil {
		opts = &NewLineOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}

	p := ba.ctx.Get("Line").New(args...)
	return LineFromJSObject(p, ba.ctx)
}

// Contains calls the Contains method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#contains
func (l *Line) Contains(x float64, y float64) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, x)
	args = append(args, y)

	retVal := l.p.Call("contains", args...)
	return retVal.Bool()
}

// Dispose calls the Dispose method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#dispose
func (l *Line) Dispose() {

	l.p.Call("dispose")
}

// GetAscendantOfClass calls the GetAscendantOfClass method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#getascendantofclass
func (l *Line) GetAscendantOfClass(className string) *Control {

	args := make([]interface{}, 0, 1+0)

	args = append(args, className)

	retVal := l.p.Call("getAscendantOfClass", args...)
	return ControlFromJSObject(retVal, l.ctx)
}

// GetClassName calls the GetClassName method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#getclassname
func (l *Line) GetClassName() string {

	retVal := l.p.Call("getClassName")
	return retVal.String()
}

// LineGetDescendantsOpts contains optional parameters for Line.GetDescendants.
type LineGetDescendantsOpts struct {
	DirectDescendantsOnly *bool
	Predicate             func()
}

// GetDescendants calls the GetDescendants method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#getdescendants
func (l *Line) GetDescendants(opts *LineGetDescendantsOpts) *Control {
	if opts == nil {
		opts = &LineGetDescendantsOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	retVal := l.p.Call("getDescendants", args...)
	return ControlFromJSObject(retVal, l.ctx)
}

// LineGetDescendantsToRefOpts contains optional parameters for Line.GetDescendantsToRef.
type LineGetDescendantsToRefOpts struct {
	DirectDescendantsOnly *bool
	Predicate             func()
}

// GetDescendantsToRef calls the GetDescendantsToRef method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#getdescendantstoref
func (l *Line) GetDescendantsToRef(results *Control, opts *LineGetDescendantsToRefOpts) {
	if opts == nil {
		opts = &LineGetDescendantsToRefOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, results.JSObject())

	if opts.DirectDescendantsOnly == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DirectDescendantsOnly)
	}
	if opts.Predicate == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Predicate)
	}

	l.p.Call("getDescendantsToRef", args...)
}

// GetLocalCoordinates calls the GetLocalCoordinates method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#getlocalcoordinates
func (l *Line) GetLocalCoordinates(globalCoordinates *Vector2) *Vector2 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, globalCoordinates.JSObject())

	retVal := l.p.Call("getLocalCoordinates", args...)
	return Vector2FromJSObject(retVal, l.ctx)
}

// GetLocalCoordinatesToRef calls the GetLocalCoordinatesToRef method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#getlocalcoordinatestoref
func (l *Line) GetLocalCoordinatesToRef(globalCoordinates *Vector2, result *Vector2) *Control {

	args := make([]interface{}, 0, 2+0)

	args = append(args, globalCoordinates.JSObject())
	args = append(args, result.JSObject())

	retVal := l.p.Call("getLocalCoordinatesToRef", args...)
	return ControlFromJSObject(retVal, l.ctx)
}

// GetParentLocalCoordinates calls the GetParentLocalCoordinates method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#getparentlocalcoordinates
func (l *Line) GetParentLocalCoordinates(globalCoordinates *Vector2) *Vector2 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, globalCoordinates.JSObject())

	retVal := l.p.Call("getParentLocalCoordinates", args...)
	return Vector2FromJSObject(retVal, l.ctx)
}

// IsAscendant calls the IsAscendant method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#isascendant
func (l *Line) IsAscendant(container *Control) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, container.JSObject())

	retVal := l.p.Call("isAscendant", args...)
	return retVal.Bool()
}

// LinkWithMesh calls the LinkWithMesh method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#linkwithmesh
func (l *Line) LinkWithMesh(mesh *AbstractMesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	l.p.Call("linkWithMesh", args...)
}

// LineMoveToVector3Opts contains optional parameters for Line.MoveToVector3.
type LineMoveToVector3Opts struct {
	End *bool
}

// MoveToVector3 calls the MoveToVector3 method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#movetovector3
func (l *Line) MoveToVector3(position *Vector3, scene *Scene, opts *LineMoveToVector3Opts) {
	if opts == nil {
		opts = &LineMoveToVector3Opts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	if opts.End == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.End)
	}

	l.p.Call("moveToVector3", args...)
}

// _draw calls the _draw method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#_draw
func (l *Line) _draw(context js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, context)

	l.p.Call("_draw", args...)
}

// _measure calls the _measure method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#_measure
func (l *Line) _measure() {

	l.p.Call("_measure")
}

// Line_moveToProjectedPositionOpts contains optional parameters for Line._moveToProjectedPosition.
type Line_moveToProjectedPositionOpts struct {
	End *bool
}

// _moveToProjectedPosition calls the _moveToProjectedPosition method on the Line object.
//
// https://doc.babylonjs.com/api/classes/babylon.line#_movetoprojectedposition
func (l *Line) _moveToProjectedPosition(projectedPosition *Vector3, opts *Line_moveToProjectedPositionOpts) {
	if opts == nil {
		opts = &Line_moveToProjectedPositionOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, projectedPosition.JSObject())

	if opts.End == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.End)
	}

	l.p.Call("_moveToProjectedPosition", args...)
}

/*

// AllowAlphaInheritance returns the AllowAlphaInheritance property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#allowalphainheritance
func (l *Line) AllowAlphaInheritance(AllowAlphaInheritance bool) *Line {
	p := ba.ctx.Get("Line").New(AllowAlphaInheritance)
	return LineFromJSObject(p, ba.ctx)
}

// SetAllowAlphaInheritance sets the AllowAlphaInheritance property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#allowalphainheritance
func (l *Line) SetAllowAlphaInheritance(AllowAlphaInheritance bool) *Line {
	p := ba.ctx.Get("Line").New(AllowAlphaInheritance)
	return LineFromJSObject(p, ba.ctx)
}

// Alpha returns the Alpha property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#alpha
func (l *Line) Alpha(alpha float64) *Line {
	p := ba.ctx.Get("Line").New(alpha)
	return LineFromJSObject(p, ba.ctx)
}

// SetAlpha sets the Alpha property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#alpha
func (l *Line) SetAlpha(alpha float64) *Line {
	p := ba.ctx.Get("Line").New(alpha)
	return LineFromJSObject(p, ba.ctx)
}

// CenterX returns the CenterX property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#centerx
func (l *Line) CenterX(centerX float64) *Line {
	p := ba.ctx.Get("Line").New(centerX)
	return LineFromJSObject(p, ba.ctx)
}

// SetCenterX sets the CenterX property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#centerx
func (l *Line) SetCenterX(centerX float64) *Line {
	p := ba.ctx.Get("Line").New(centerX)
	return LineFromJSObject(p, ba.ctx)
}

// CenterY returns the CenterY property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#centery
func (l *Line) CenterY(centerY float64) *Line {
	p := ba.ctx.Get("Line").New(centerY)
	return LineFromJSObject(p, ba.ctx)
}

// SetCenterY sets the CenterY property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#centery
func (l *Line) SetCenterY(centerY float64) *Line {
	p := ba.ctx.Get("Line").New(centerY)
	return LineFromJSObject(p, ba.ctx)
}

// ClipChildren returns the ClipChildren property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#clipchildren
func (l *Line) ClipChildren(clipChildren bool) *Line {
	p := ba.ctx.Get("Line").New(clipChildren)
	return LineFromJSObject(p, ba.ctx)
}

// SetClipChildren sets the ClipChildren property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#clipchildren
func (l *Line) SetClipChildren(clipChildren bool) *Line {
	p := ba.ctx.Get("Line").New(clipChildren)
	return LineFromJSObject(p, ba.ctx)
}

// ClipContent returns the ClipContent property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#clipcontent
func (l *Line) ClipContent(clipContent bool) *Line {
	p := ba.ctx.Get("Line").New(clipContent)
	return LineFromJSObject(p, ba.ctx)
}

// SetClipContent sets the ClipContent property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#clipcontent
func (l *Line) SetClipContent(clipContent bool) *Line {
	p := ba.ctx.Get("Line").New(clipContent)
	return LineFromJSObject(p, ba.ctx)
}

// Color returns the Color property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#color
func (l *Line) Color(color string) *Line {
	p := ba.ctx.Get("Line").New(color)
	return LineFromJSObject(p, ba.ctx)
}

// SetColor sets the Color property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#color
func (l *Line) SetColor(color string) *Line {
	p := ba.ctx.Get("Line").New(color)
	return LineFromJSObject(p, ba.ctx)
}

// ConnectedControl returns the ConnectedControl property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#connectedcontrol
func (l *Line) ConnectedControl(connectedControl *Control) *Line {
	p := ba.ctx.Get("Line").New(connectedControl.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// SetConnectedControl sets the ConnectedControl property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#connectedcontrol
func (l *Line) SetConnectedControl(connectedControl *Control) *Line {
	p := ba.ctx.Get("Line").New(connectedControl.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// Dash returns the Dash property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#dash
func (l *Line) Dash(dash []float64) *Line {
	p := ba.ctx.Get("Line").New(dash)
	return LineFromJSObject(p, ba.ctx)
}

// SetDash sets the Dash property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#dash
func (l *Line) SetDash(dash []float64) *Line {
	p := ba.ctx.Get("Line").New(dash)
	return LineFromJSObject(p, ba.ctx)
}

// DisabledColor returns the DisabledColor property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#disabledcolor
func (l *Line) DisabledColor(disabledColor string) *Line {
	p := ba.ctx.Get("Line").New(disabledColor)
	return LineFromJSObject(p, ba.ctx)
}

// SetDisabledColor sets the DisabledColor property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#disabledcolor
func (l *Line) SetDisabledColor(disabledColor string) *Line {
	p := ba.ctx.Get("Line").New(disabledColor)
	return LineFromJSObject(p, ba.ctx)
}

// FontFamily returns the FontFamily property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#fontfamily
func (l *Line) FontFamily(fontFamily string) *Line {
	p := ba.ctx.Get("Line").New(fontFamily)
	return LineFromJSObject(p, ba.ctx)
}

// SetFontFamily sets the FontFamily property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#fontfamily
func (l *Line) SetFontFamily(fontFamily string) *Line {
	p := ba.ctx.Get("Line").New(fontFamily)
	return LineFromJSObject(p, ba.ctx)
}

// FontOffset returns the FontOffset property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#fontoffset
func (l *Line) FontOffset(fontOffset js.Value) *Line {
	p := ba.ctx.Get("Line").New(fontOffset)
	return LineFromJSObject(p, ba.ctx)
}

// SetFontOffset sets the FontOffset property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#fontoffset
func (l *Line) SetFontOffset(fontOffset js.Value) *Line {
	p := ba.ctx.Get("Line").New(fontOffset)
	return LineFromJSObject(p, ba.ctx)
}

// FontSize returns the FontSize property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#fontsize
func (l *Line) FontSize(fontSize string) *Line {
	p := ba.ctx.Get("Line").New(fontSize)
	return LineFromJSObject(p, ba.ctx)
}

// SetFontSize sets the FontSize property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#fontsize
func (l *Line) SetFontSize(fontSize string) *Line {
	p := ba.ctx.Get("Line").New(fontSize)
	return LineFromJSObject(p, ba.ctx)
}

// FontSizeInPixels returns the FontSizeInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#fontsizeinpixels
func (l *Line) FontSizeInPixels(fontSizeInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(fontSizeInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// SetFontSizeInPixels sets the FontSizeInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#fontsizeinpixels
func (l *Line) SetFontSizeInPixels(fontSizeInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(fontSizeInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// FontStyle returns the FontStyle property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#fontstyle
func (l *Line) FontStyle(fontStyle string) *Line {
	p := ba.ctx.Get("Line").New(fontStyle)
	return LineFromJSObject(p, ba.ctx)
}

// SetFontStyle sets the FontStyle property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#fontstyle
func (l *Line) SetFontStyle(fontStyle string) *Line {
	p := ba.ctx.Get("Line").New(fontStyle)
	return LineFromJSObject(p, ba.ctx)
}

// FontWeight returns the FontWeight property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#fontweight
func (l *Line) FontWeight(fontWeight string) *Line {
	p := ba.ctx.Get("Line").New(fontWeight)
	return LineFromJSObject(p, ba.ctx)
}

// SetFontWeight sets the FontWeight property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#fontweight
func (l *Line) SetFontWeight(fontWeight string) *Line {
	p := ba.ctx.Get("Line").New(fontWeight)
	return LineFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_CENTER returns the HORIZONTAL_ALIGNMENT_CENTER property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#horizontal_alignment_center
func (l *Line) HORIZONTAL_ALIGNMENT_CENTER(HORIZONTAL_ALIGNMENT_CENTER float64) *Line {
	p := ba.ctx.Get("Line").New(HORIZONTAL_ALIGNMENT_CENTER)
	return LineFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_CENTER sets the HORIZONTAL_ALIGNMENT_CENTER property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#horizontal_alignment_center
func (l *Line) SetHORIZONTAL_ALIGNMENT_CENTER(HORIZONTAL_ALIGNMENT_CENTER float64) *Line {
	p := ba.ctx.Get("Line").New(HORIZONTAL_ALIGNMENT_CENTER)
	return LineFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_LEFT returns the HORIZONTAL_ALIGNMENT_LEFT property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#horizontal_alignment_left
func (l *Line) HORIZONTAL_ALIGNMENT_LEFT(HORIZONTAL_ALIGNMENT_LEFT float64) *Line {
	p := ba.ctx.Get("Line").New(HORIZONTAL_ALIGNMENT_LEFT)
	return LineFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_LEFT sets the HORIZONTAL_ALIGNMENT_LEFT property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#horizontal_alignment_left
func (l *Line) SetHORIZONTAL_ALIGNMENT_LEFT(HORIZONTAL_ALIGNMENT_LEFT float64) *Line {
	p := ba.ctx.Get("Line").New(HORIZONTAL_ALIGNMENT_LEFT)
	return LineFromJSObject(p, ba.ctx)
}

// HORIZONTAL_ALIGNMENT_RIGHT returns the HORIZONTAL_ALIGNMENT_RIGHT property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#horizontal_alignment_right
func (l *Line) HORIZONTAL_ALIGNMENT_RIGHT(HORIZONTAL_ALIGNMENT_RIGHT float64) *Line {
	p := ba.ctx.Get("Line").New(HORIZONTAL_ALIGNMENT_RIGHT)
	return LineFromJSObject(p, ba.ctx)
}

// SetHORIZONTAL_ALIGNMENT_RIGHT sets the HORIZONTAL_ALIGNMENT_RIGHT property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#horizontal_alignment_right
func (l *Line) SetHORIZONTAL_ALIGNMENT_RIGHT(HORIZONTAL_ALIGNMENT_RIGHT float64) *Line {
	p := ba.ctx.Get("Line").New(HORIZONTAL_ALIGNMENT_RIGHT)
	return LineFromJSObject(p, ba.ctx)
}

// Height returns the Height property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#height
func (l *Line) Height(height string) *Line {
	p := ba.ctx.Get("Line").New(height)
	return LineFromJSObject(p, ba.ctx)
}

// SetHeight sets the Height property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#height
func (l *Line) SetHeight(height string) *Line {
	p := ba.ctx.Get("Line").New(height)
	return LineFromJSObject(p, ba.ctx)
}

// HeightInPixels returns the HeightInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#heightinpixels
func (l *Line) HeightInPixels(heightInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(heightInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// SetHeightInPixels sets the HeightInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#heightinpixels
func (l *Line) SetHeightInPixels(heightInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(heightInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// HorizontalAlignment returns the HorizontalAlignment property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#horizontalalignment
func (l *Line) HorizontalAlignment(horizontalAlignment float64) *Line {
	p := ba.ctx.Get("Line").New(horizontalAlignment)
	return LineFromJSObject(p, ba.ctx)
}

// SetHorizontalAlignment sets the HorizontalAlignment property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#horizontalalignment
func (l *Line) SetHorizontalAlignment(horizontalAlignment float64) *Line {
	p := ba.ctx.Get("Line").New(horizontalAlignment)
	return LineFromJSObject(p, ba.ctx)
}

// Host returns the Host property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#host
func (l *Line) Host(host *AdvancedDynamicTexture) *Line {
	p := ba.ctx.Get("Line").New(host.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// SetHost sets the Host property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#host
func (l *Line) SetHost(host *AdvancedDynamicTexture) *Line {
	p := ba.ctx.Get("Line").New(host.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// HoverCursor returns the HoverCursor property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#hovercursor
func (l *Line) HoverCursor(hoverCursor string) *Line {
	p := ba.ctx.Get("Line").New(hoverCursor)
	return LineFromJSObject(p, ba.ctx)
}

// SetHoverCursor sets the HoverCursor property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#hovercursor
func (l *Line) SetHoverCursor(hoverCursor string) *Line {
	p := ba.ctx.Get("Line").New(hoverCursor)
	return LineFromJSObject(p, ba.ctx)
}

// IsDirty returns the IsDirty property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#isdirty
func (l *Line) IsDirty(isDirty bool) *Line {
	p := ba.ctx.Get("Line").New(isDirty)
	return LineFromJSObject(p, ba.ctx)
}

// SetIsDirty sets the IsDirty property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#isdirty
func (l *Line) SetIsDirty(isDirty bool) *Line {
	p := ba.ctx.Get("Line").New(isDirty)
	return LineFromJSObject(p, ba.ctx)
}

// IsEnabled returns the IsEnabled property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#isenabled
func (l *Line) IsEnabled(isEnabled bool) *Line {
	p := ba.ctx.Get("Line").New(isEnabled)
	return LineFromJSObject(p, ba.ctx)
}

// SetIsEnabled sets the IsEnabled property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#isenabled
func (l *Line) SetIsEnabled(isEnabled bool) *Line {
	p := ba.ctx.Get("Line").New(isEnabled)
	return LineFromJSObject(p, ba.ctx)
}

// IsFocusInvisible returns the IsFocusInvisible property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#isfocusinvisible
func (l *Line) IsFocusInvisible(isFocusInvisible bool) *Line {
	p := ba.ctx.Get("Line").New(isFocusInvisible)
	return LineFromJSObject(p, ba.ctx)
}

// SetIsFocusInvisible sets the IsFocusInvisible property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#isfocusinvisible
func (l *Line) SetIsFocusInvisible(isFocusInvisible bool) *Line {
	p := ba.ctx.Get("Line").New(isFocusInvisible)
	return LineFromJSObject(p, ba.ctx)
}

// IsHighlighted returns the IsHighlighted property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#ishighlighted
func (l *Line) IsHighlighted(isHighlighted bool) *Line {
	p := ba.ctx.Get("Line").New(isHighlighted)
	return LineFromJSObject(p, ba.ctx)
}

// SetIsHighlighted sets the IsHighlighted property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#ishighlighted
func (l *Line) SetIsHighlighted(isHighlighted bool) *Line {
	p := ba.ctx.Get("Line").New(isHighlighted)
	return LineFromJSObject(p, ba.ctx)
}

// IsHitTestVisible returns the IsHitTestVisible property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#ishittestvisible
func (l *Line) IsHitTestVisible(isHitTestVisible bool) *Line {
	p := ba.ctx.Get("Line").New(isHitTestVisible)
	return LineFromJSObject(p, ba.ctx)
}

// SetIsHitTestVisible sets the IsHitTestVisible property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#ishittestvisible
func (l *Line) SetIsHitTestVisible(isHitTestVisible bool) *Line {
	p := ba.ctx.Get("Line").New(isHitTestVisible)
	return LineFromJSObject(p, ba.ctx)
}

// IsPointerBlocker returns the IsPointerBlocker property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#ispointerblocker
func (l *Line) IsPointerBlocker(isPointerBlocker bool) *Line {
	p := ba.ctx.Get("Line").New(isPointerBlocker)
	return LineFromJSObject(p, ba.ctx)
}

// SetIsPointerBlocker sets the IsPointerBlocker property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#ispointerblocker
func (l *Line) SetIsPointerBlocker(isPointerBlocker bool) *Line {
	p := ba.ctx.Get("Line").New(isPointerBlocker)
	return LineFromJSObject(p, ba.ctx)
}

// IsVisible returns the IsVisible property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#isvisible
func (l *Line) IsVisible(isVisible bool) *Line {
	p := ba.ctx.Get("Line").New(isVisible)
	return LineFromJSObject(p, ba.ctx)
}

// SetIsVisible sets the IsVisible property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#isvisible
func (l *Line) SetIsVisible(isVisible bool) *Line {
	p := ba.ctx.Get("Line").New(isVisible)
	return LineFromJSObject(p, ba.ctx)
}

// Left returns the Left property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#left
func (l *Line) Left(left string) *Line {
	p := ba.ctx.Get("Line").New(left)
	return LineFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#left
func (l *Line) SetLeft(left string) *Line {
	p := ba.ctx.Get("Line").New(left)
	return LineFromJSObject(p, ba.ctx)
}

// LeftInPixels returns the LeftInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#leftinpixels
func (l *Line) LeftInPixels(leftInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(leftInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// SetLeftInPixels sets the LeftInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#leftinpixels
func (l *Line) SetLeftInPixels(leftInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(leftInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// LineWidth returns the LineWidth property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#linewidth
func (l *Line) LineWidth(lineWidth float64) *Line {
	p := ba.ctx.Get("Line").New(lineWidth)
	return LineFromJSObject(p, ba.ctx)
}

// SetLineWidth sets the LineWidth property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#linewidth
func (l *Line) SetLineWidth(lineWidth float64) *Line {
	p := ba.ctx.Get("Line").New(lineWidth)
	return LineFromJSObject(p, ba.ctx)
}

// LinkOffsetX returns the LinkOffsetX property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#linkoffsetx
func (l *Line) LinkOffsetX(linkOffsetX string) *Line {
	p := ba.ctx.Get("Line").New(linkOffsetX)
	return LineFromJSObject(p, ba.ctx)
}

// SetLinkOffsetX sets the LinkOffsetX property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#linkoffsetx
func (l *Line) SetLinkOffsetX(linkOffsetX string) *Line {
	p := ba.ctx.Get("Line").New(linkOffsetX)
	return LineFromJSObject(p, ba.ctx)
}

// LinkOffsetXInPixels returns the LinkOffsetXInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#linkoffsetxinpixels
func (l *Line) LinkOffsetXInPixels(linkOffsetXInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(linkOffsetXInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// SetLinkOffsetXInPixels sets the LinkOffsetXInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#linkoffsetxinpixels
func (l *Line) SetLinkOffsetXInPixels(linkOffsetXInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(linkOffsetXInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// LinkOffsetY returns the LinkOffsetY property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#linkoffsety
func (l *Line) LinkOffsetY(linkOffsetY string) *Line {
	p := ba.ctx.Get("Line").New(linkOffsetY)
	return LineFromJSObject(p, ba.ctx)
}

// SetLinkOffsetY sets the LinkOffsetY property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#linkoffsety
func (l *Line) SetLinkOffsetY(linkOffsetY string) *Line {
	p := ba.ctx.Get("Line").New(linkOffsetY)
	return LineFromJSObject(p, ba.ctx)
}

// LinkOffsetYInPixels returns the LinkOffsetYInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#linkoffsetyinpixels
func (l *Line) LinkOffsetYInPixels(linkOffsetYInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(linkOffsetYInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// SetLinkOffsetYInPixels sets the LinkOffsetYInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#linkoffsetyinpixels
func (l *Line) SetLinkOffsetYInPixels(linkOffsetYInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(linkOffsetYInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// LinkedMesh returns the LinkedMesh property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#linkedmesh
func (l *Line) LinkedMesh(linkedMesh *AbstractMesh) *Line {
	p := ba.ctx.Get("Line").New(linkedMesh.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// SetLinkedMesh sets the LinkedMesh property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#linkedmesh
func (l *Line) SetLinkedMesh(linkedMesh *AbstractMesh) *Line {
	p := ba.ctx.Get("Line").New(linkedMesh.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#metadata
func (l *Line) Metadata(metadata interface{}) *Line {
	p := ba.ctx.Get("Line").New(metadata)
	return LineFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#metadata
func (l *Line) SetMetadata(metadata interface{}) *Line {
	p := ba.ctx.Get("Line").New(metadata)
	return LineFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#name
func (l *Line) Name(name string) *Line {
	p := ba.ctx.Get("Line").New(name)
	return LineFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#name
func (l *Line) SetName(name string) *Line {
	p := ba.ctx.Get("Line").New(name)
	return LineFromJSObject(p, ba.ctx)
}

// NotRenderable returns the NotRenderable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#notrenderable
func (l *Line) NotRenderable(notRenderable bool) *Line {
	p := ba.ctx.Get("Line").New(notRenderable)
	return LineFromJSObject(p, ba.ctx)
}

// SetNotRenderable sets the NotRenderable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#notrenderable
func (l *Line) SetNotRenderable(notRenderable bool) *Line {
	p := ba.ctx.Get("Line").New(notRenderable)
	return LineFromJSObject(p, ba.ctx)
}

// OnAfterDrawObservable returns the OnAfterDrawObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onafterdrawobservable
func (l *Line) OnAfterDrawObservable(onAfterDrawObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onAfterDrawObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// SetOnAfterDrawObservable sets the OnAfterDrawObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onafterdrawobservable
func (l *Line) SetOnAfterDrawObservable(onAfterDrawObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onAfterDrawObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// OnBeforeDrawObservable returns the OnBeforeDrawObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onbeforedrawobservable
func (l *Line) OnBeforeDrawObservable(onBeforeDrawObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onBeforeDrawObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// SetOnBeforeDrawObservable sets the OnBeforeDrawObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onbeforedrawobservable
func (l *Line) SetOnBeforeDrawObservable(onBeforeDrawObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onBeforeDrawObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// OnDirtyObservable returns the OnDirtyObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#ondirtyobservable
func (l *Line) OnDirtyObservable(onDirtyObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onDirtyObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// SetOnDirtyObservable sets the OnDirtyObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#ondirtyobservable
func (l *Line) SetOnDirtyObservable(onDirtyObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onDirtyObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// OnPointerClickObservable returns the OnPointerClickObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onpointerclickobservable
func (l *Line) OnPointerClickObservable(onPointerClickObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onPointerClickObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// SetOnPointerClickObservable sets the OnPointerClickObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onpointerclickobservable
func (l *Line) SetOnPointerClickObservable(onPointerClickObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onPointerClickObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// OnPointerDownObservable returns the OnPointerDownObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onpointerdownobservable
func (l *Line) OnPointerDownObservable(onPointerDownObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onPointerDownObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// SetOnPointerDownObservable sets the OnPointerDownObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onpointerdownobservable
func (l *Line) SetOnPointerDownObservable(onPointerDownObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onPointerDownObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// OnPointerEnterObservable returns the OnPointerEnterObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onpointerenterobservable
func (l *Line) OnPointerEnterObservable(onPointerEnterObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onPointerEnterObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// SetOnPointerEnterObservable sets the OnPointerEnterObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onpointerenterobservable
func (l *Line) SetOnPointerEnterObservable(onPointerEnterObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onPointerEnterObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// OnPointerMoveObservable returns the OnPointerMoveObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onpointermoveobservable
func (l *Line) OnPointerMoveObservable(onPointerMoveObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onPointerMoveObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// SetOnPointerMoveObservable sets the OnPointerMoveObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onpointermoveobservable
func (l *Line) SetOnPointerMoveObservable(onPointerMoveObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onPointerMoveObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// OnPointerOutObservable returns the OnPointerOutObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onpointeroutobservable
func (l *Line) OnPointerOutObservable(onPointerOutObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onPointerOutObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// SetOnPointerOutObservable sets the OnPointerOutObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onpointeroutobservable
func (l *Line) SetOnPointerOutObservable(onPointerOutObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onPointerOutObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// OnPointerUpObservable returns the OnPointerUpObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onpointerupobservable
func (l *Line) OnPointerUpObservable(onPointerUpObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onPointerUpObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// SetOnPointerUpObservable sets the OnPointerUpObservable property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#onpointerupobservable
func (l *Line) SetOnPointerUpObservable(onPointerUpObservable *Observable) *Line {
	p := ba.ctx.Get("Line").New(onPointerUpObservable.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// PaddingBottom returns the PaddingBottom property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingbottom
func (l *Line) PaddingBottom(paddingBottom string) *Line {
	p := ba.ctx.Get("Line").New(paddingBottom)
	return LineFromJSObject(p, ba.ctx)
}

// SetPaddingBottom sets the PaddingBottom property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingbottom
func (l *Line) SetPaddingBottom(paddingBottom string) *Line {
	p := ba.ctx.Get("Line").New(paddingBottom)
	return LineFromJSObject(p, ba.ctx)
}

// PaddingBottomInPixels returns the PaddingBottomInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingbottominpixels
func (l *Line) PaddingBottomInPixels(paddingBottomInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(paddingBottomInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// SetPaddingBottomInPixels sets the PaddingBottomInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingbottominpixels
func (l *Line) SetPaddingBottomInPixels(paddingBottomInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(paddingBottomInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// PaddingLeft returns the PaddingLeft property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingleft
func (l *Line) PaddingLeft(paddingLeft string) *Line {
	p := ba.ctx.Get("Line").New(paddingLeft)
	return LineFromJSObject(p, ba.ctx)
}

// SetPaddingLeft sets the PaddingLeft property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingleft
func (l *Line) SetPaddingLeft(paddingLeft string) *Line {
	p := ba.ctx.Get("Line").New(paddingLeft)
	return LineFromJSObject(p, ba.ctx)
}

// PaddingLeftInPixels returns the PaddingLeftInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingleftinpixels
func (l *Line) PaddingLeftInPixels(paddingLeftInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(paddingLeftInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// SetPaddingLeftInPixels sets the PaddingLeftInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingleftinpixels
func (l *Line) SetPaddingLeftInPixels(paddingLeftInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(paddingLeftInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// PaddingRight returns the PaddingRight property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingright
func (l *Line) PaddingRight(paddingRight string) *Line {
	p := ba.ctx.Get("Line").New(paddingRight)
	return LineFromJSObject(p, ba.ctx)
}

// SetPaddingRight sets the PaddingRight property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingright
func (l *Line) SetPaddingRight(paddingRight string) *Line {
	p := ba.ctx.Get("Line").New(paddingRight)
	return LineFromJSObject(p, ba.ctx)
}

// PaddingRightInPixels returns the PaddingRightInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingrightinpixels
func (l *Line) PaddingRightInPixels(paddingRightInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(paddingRightInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// SetPaddingRightInPixels sets the PaddingRightInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingrightinpixels
func (l *Line) SetPaddingRightInPixels(paddingRightInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(paddingRightInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// PaddingTop returns the PaddingTop property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingtop
func (l *Line) PaddingTop(paddingTop string) *Line {
	p := ba.ctx.Get("Line").New(paddingTop)
	return LineFromJSObject(p, ba.ctx)
}

// SetPaddingTop sets the PaddingTop property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingtop
func (l *Line) SetPaddingTop(paddingTop string) *Line {
	p := ba.ctx.Get("Line").New(paddingTop)
	return LineFromJSObject(p, ba.ctx)
}

// PaddingTopInPixels returns the PaddingTopInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingtopinpixels
func (l *Line) PaddingTopInPixels(paddingTopInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(paddingTopInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// SetPaddingTopInPixels sets the PaddingTopInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#paddingtopinpixels
func (l *Line) SetPaddingTopInPixels(paddingTopInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(paddingTopInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// Parent returns the Parent property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#parent
func (l *Line) Parent(parent *Container) *Line {
	p := ba.ctx.Get("Line").New(parent.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// SetParent sets the Parent property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#parent
func (l *Line) SetParent(parent *Container) *Line {
	p := ba.ctx.Get("Line").New(parent.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// Rotation returns the Rotation property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#rotation
func (l *Line) Rotation(rotation float64) *Line {
	p := ba.ctx.Get("Line").New(rotation)
	return LineFromJSObject(p, ba.ctx)
}

// SetRotation sets the Rotation property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#rotation
func (l *Line) SetRotation(rotation float64) *Line {
	p := ba.ctx.Get("Line").New(rotation)
	return LineFromJSObject(p, ba.ctx)
}

// ScaleX returns the ScaleX property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#scalex
func (l *Line) ScaleX(scaleX float64) *Line {
	p := ba.ctx.Get("Line").New(scaleX)
	return LineFromJSObject(p, ba.ctx)
}

// SetScaleX sets the ScaleX property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#scalex
func (l *Line) SetScaleX(scaleX float64) *Line {
	p := ba.ctx.Get("Line").New(scaleX)
	return LineFromJSObject(p, ba.ctx)
}

// ScaleY returns the ScaleY property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#scaley
func (l *Line) ScaleY(scaleY float64) *Line {
	p := ba.ctx.Get("Line").New(scaleY)
	return LineFromJSObject(p, ba.ctx)
}

// SetScaleY sets the ScaleY property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#scaley
func (l *Line) SetScaleY(scaleY float64) *Line {
	p := ba.ctx.Get("Line").New(scaleY)
	return LineFromJSObject(p, ba.ctx)
}

// ShadowBlur returns the ShadowBlur property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#shadowblur
func (l *Line) ShadowBlur(shadowBlur float64) *Line {
	p := ba.ctx.Get("Line").New(shadowBlur)
	return LineFromJSObject(p, ba.ctx)
}

// SetShadowBlur sets the ShadowBlur property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#shadowblur
func (l *Line) SetShadowBlur(shadowBlur float64) *Line {
	p := ba.ctx.Get("Line").New(shadowBlur)
	return LineFromJSObject(p, ba.ctx)
}

// ShadowColor returns the ShadowColor property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#shadowcolor
func (l *Line) ShadowColor(shadowColor string) *Line {
	p := ba.ctx.Get("Line").New(shadowColor)
	return LineFromJSObject(p, ba.ctx)
}

// SetShadowColor sets the ShadowColor property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#shadowcolor
func (l *Line) SetShadowColor(shadowColor string) *Line {
	p := ba.ctx.Get("Line").New(shadowColor)
	return LineFromJSObject(p, ba.ctx)
}

// ShadowOffsetX returns the ShadowOffsetX property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#shadowoffsetx
func (l *Line) ShadowOffsetX(shadowOffsetX float64) *Line {
	p := ba.ctx.Get("Line").New(shadowOffsetX)
	return LineFromJSObject(p, ba.ctx)
}

// SetShadowOffsetX sets the ShadowOffsetX property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#shadowoffsetx
func (l *Line) SetShadowOffsetX(shadowOffsetX float64) *Line {
	p := ba.ctx.Get("Line").New(shadowOffsetX)
	return LineFromJSObject(p, ba.ctx)
}

// ShadowOffsetY returns the ShadowOffsetY property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#shadowoffsety
func (l *Line) ShadowOffsetY(shadowOffsetY float64) *Line {
	p := ba.ctx.Get("Line").New(shadowOffsetY)
	return LineFromJSObject(p, ba.ctx)
}

// SetShadowOffsetY sets the ShadowOffsetY property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#shadowoffsety
func (l *Line) SetShadowOffsetY(shadowOffsetY float64) *Line {
	p := ba.ctx.Get("Line").New(shadowOffsetY)
	return LineFromJSObject(p, ba.ctx)
}

// Style returns the Style property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#style
func (l *Line) Style(style *Style) *Line {
	p := ba.ctx.Get("Line").New(style.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// SetStyle sets the Style property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#style
func (l *Line) SetStyle(style *Style) *Line {
	p := ba.ctx.Get("Line").New(style.JSObject())
	return LineFromJSObject(p, ba.ctx)
}

// Top returns the Top property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#top
func (l *Line) Top(top string) *Line {
	p := ba.ctx.Get("Line").New(top)
	return LineFromJSObject(p, ba.ctx)
}

// SetTop sets the Top property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#top
func (l *Line) SetTop(top string) *Line {
	p := ba.ctx.Get("Line").New(top)
	return LineFromJSObject(p, ba.ctx)
}

// TopInPixels returns the TopInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#topinpixels
func (l *Line) TopInPixels(topInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(topInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// SetTopInPixels sets the TopInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#topinpixels
func (l *Line) SetTopInPixels(topInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(topInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// TransformCenterX returns the TransformCenterX property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#transformcenterx
func (l *Line) TransformCenterX(transformCenterX float64) *Line {
	p := ba.ctx.Get("Line").New(transformCenterX)
	return LineFromJSObject(p, ba.ctx)
}

// SetTransformCenterX sets the TransformCenterX property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#transformcenterx
func (l *Line) SetTransformCenterX(transformCenterX float64) *Line {
	p := ba.ctx.Get("Line").New(transformCenterX)
	return LineFromJSObject(p, ba.ctx)
}

// TransformCenterY returns the TransformCenterY property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#transformcentery
func (l *Line) TransformCenterY(transformCenterY float64) *Line {
	p := ba.ctx.Get("Line").New(transformCenterY)
	return LineFromJSObject(p, ba.ctx)
}

// SetTransformCenterY sets the TransformCenterY property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#transformcentery
func (l *Line) SetTransformCenterY(transformCenterY float64) *Line {
	p := ba.ctx.Get("Line").New(transformCenterY)
	return LineFromJSObject(p, ba.ctx)
}

// TypeName returns the TypeName property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#typename
func (l *Line) TypeName(typeName string) *Line {
	p := ba.ctx.Get("Line").New(typeName)
	return LineFromJSObject(p, ba.ctx)
}

// SetTypeName sets the TypeName property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#typename
func (l *Line) SetTypeName(typeName string) *Line {
	p := ba.ctx.Get("Line").New(typeName)
	return LineFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#uniqueid
func (l *Line) UniqueId(uniqueId float64) *Line {
	p := ba.ctx.Get("Line").New(uniqueId)
	return LineFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#uniqueid
func (l *Line) SetUniqueId(uniqueId float64) *Line {
	p := ba.ctx.Get("Line").New(uniqueId)
	return LineFromJSObject(p, ba.ctx)
}

// UseBitmapCache returns the UseBitmapCache property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#usebitmapcache
func (l *Line) UseBitmapCache(useBitmapCache bool) *Line {
	p := ba.ctx.Get("Line").New(useBitmapCache)
	return LineFromJSObject(p, ba.ctx)
}

// SetUseBitmapCache sets the UseBitmapCache property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#usebitmapcache
func (l *Line) SetUseBitmapCache(useBitmapCache bool) *Line {
	p := ba.ctx.Get("Line").New(useBitmapCache)
	return LineFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_BOTTOM returns the VERTICAL_ALIGNMENT_BOTTOM property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#vertical_alignment_bottom
func (l *Line) VERTICAL_ALIGNMENT_BOTTOM(VERTICAL_ALIGNMENT_BOTTOM float64) *Line {
	p := ba.ctx.Get("Line").New(VERTICAL_ALIGNMENT_BOTTOM)
	return LineFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_BOTTOM sets the VERTICAL_ALIGNMENT_BOTTOM property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#vertical_alignment_bottom
func (l *Line) SetVERTICAL_ALIGNMENT_BOTTOM(VERTICAL_ALIGNMENT_BOTTOM float64) *Line {
	p := ba.ctx.Get("Line").New(VERTICAL_ALIGNMENT_BOTTOM)
	return LineFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_CENTER returns the VERTICAL_ALIGNMENT_CENTER property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#vertical_alignment_center
func (l *Line) VERTICAL_ALIGNMENT_CENTER(VERTICAL_ALIGNMENT_CENTER float64) *Line {
	p := ba.ctx.Get("Line").New(VERTICAL_ALIGNMENT_CENTER)
	return LineFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_CENTER sets the VERTICAL_ALIGNMENT_CENTER property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#vertical_alignment_center
func (l *Line) SetVERTICAL_ALIGNMENT_CENTER(VERTICAL_ALIGNMENT_CENTER float64) *Line {
	p := ba.ctx.Get("Line").New(VERTICAL_ALIGNMENT_CENTER)
	return LineFromJSObject(p, ba.ctx)
}

// VERTICAL_ALIGNMENT_TOP returns the VERTICAL_ALIGNMENT_TOP property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#vertical_alignment_top
func (l *Line) VERTICAL_ALIGNMENT_TOP(VERTICAL_ALIGNMENT_TOP float64) *Line {
	p := ba.ctx.Get("Line").New(VERTICAL_ALIGNMENT_TOP)
	return LineFromJSObject(p, ba.ctx)
}

// SetVERTICAL_ALIGNMENT_TOP sets the VERTICAL_ALIGNMENT_TOP property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#vertical_alignment_top
func (l *Line) SetVERTICAL_ALIGNMENT_TOP(VERTICAL_ALIGNMENT_TOP float64) *Line {
	p := ba.ctx.Get("Line").New(VERTICAL_ALIGNMENT_TOP)
	return LineFromJSObject(p, ba.ctx)
}

// VerticalAlignment returns the VerticalAlignment property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#verticalalignment
func (l *Line) VerticalAlignment(verticalAlignment float64) *Line {
	p := ba.ctx.Get("Line").New(verticalAlignment)
	return LineFromJSObject(p, ba.ctx)
}

// SetVerticalAlignment sets the VerticalAlignment property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#verticalalignment
func (l *Line) SetVerticalAlignment(verticalAlignment float64) *Line {
	p := ba.ctx.Get("Line").New(verticalAlignment)
	return LineFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#width
func (l *Line) Width(width string) *Line {
	p := ba.ctx.Get("Line").New(width)
	return LineFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#width
func (l *Line) SetWidth(width string) *Line {
	p := ba.ctx.Get("Line").New(width)
	return LineFromJSObject(p, ba.ctx)
}

// WidthInPixels returns the WidthInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#widthinpixels
func (l *Line) WidthInPixels(widthInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(widthInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// SetWidthInPixels sets the WidthInPixels property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#widthinpixels
func (l *Line) SetWidthInPixels(widthInPixels float64) *Line {
	p := ba.ctx.Get("Line").New(widthInPixels)
	return LineFromJSObject(p, ba.ctx)
}

// X1 returns the X1 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#x1
func (l *Line) X1(x1 string) *Line {
	p := ba.ctx.Get("Line").New(x1)
	return LineFromJSObject(p, ba.ctx)
}

// SetX1 sets the X1 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#x1
func (l *Line) SetX1(x1 string) *Line {
	p := ba.ctx.Get("Line").New(x1)
	return LineFromJSObject(p, ba.ctx)
}

// X2 returns the X2 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#x2
func (l *Line) X2(x2 string) *Line {
	p := ba.ctx.Get("Line").New(x2)
	return LineFromJSObject(p, ba.ctx)
}

// SetX2 sets the X2 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#x2
func (l *Line) SetX2(x2 string) *Line {
	p := ba.ctx.Get("Line").New(x2)
	return LineFromJSObject(p, ba.ctx)
}

// Y1 returns the Y1 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#y1
func (l *Line) Y1(y1 string) *Line {
	p := ba.ctx.Get("Line").New(y1)
	return LineFromJSObject(p, ba.ctx)
}

// SetY1 sets the Y1 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#y1
func (l *Line) SetY1(y1 string) *Line {
	p := ba.ctx.Get("Line").New(y1)
	return LineFromJSObject(p, ba.ctx)
}

// Y2 returns the Y2 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#y2
func (l *Line) Y2(y2 string) *Line {
	p := ba.ctx.Get("Line").New(y2)
	return LineFromJSObject(p, ba.ctx)
}

// SetY2 sets the Y2 property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#y2
func (l *Line) SetY2(y2 string) *Line {
	p := ba.ctx.Get("Line").New(y2)
	return LineFromJSObject(p, ba.ctx)
}

// ZIndex returns the ZIndex property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#zindex
func (l *Line) ZIndex(zIndex float64) *Line {
	p := ba.ctx.Get("Line").New(zIndex)
	return LineFromJSObject(p, ba.ctx)
}

// SetZIndex sets the ZIndex property of class Line.
//
// https://doc.babylonjs.com/api/classes/babylon.line#zindex
func (l *Line) SetZIndex(zIndex float64) *Line {
	p := ba.ctx.Get("Line").New(zIndex)
	return LineFromJSObject(p, ba.ctx)
}

*/
