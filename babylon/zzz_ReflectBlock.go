// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ReflectBlock represents a babylon.js ReflectBlock.
// Block used to get the reflected vector from a direction and a normal
type ReflectBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *ReflectBlock) JSObject() js.Value { return r.p }

// ReflectBlock returns a ReflectBlock JavaScript class.
func (ba *Babylon) ReflectBlock() *ReflectBlock {
	p := ba.ctx.Get("ReflectBlock")
	return ReflectBlockFromJSObject(p, ba.ctx)
}

// ReflectBlockFromJSObject returns a wrapped ReflectBlock JavaScript class.
func ReflectBlockFromJSObject(p js.Value, ctx js.Value) *ReflectBlock {
	return &ReflectBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// ReflectBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func ReflectBlockArrayToJSArray(array []*ReflectBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewReflectBlock returns a new ReflectBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectblock
func (ba *Babylon) NewReflectBlock(name string) *ReflectBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("ReflectBlock").New(args...)
	return ReflectBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the ReflectBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectblock#getclassname
func (r *ReflectBlock) GetClassName() string {

	retVal := r.p.Call("getClassName")
	return retVal.String()
}

// Incident returns the Incident property of class ReflectBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectblock#incident
func (r *ReflectBlock) Incident() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("incident")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetIncident sets the Incident property of class ReflectBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectblock#incident
func (r *ReflectBlock) SetIncident(incident *NodeMaterialConnectionPoint) *ReflectBlock {
	r.p.Set("incident", incident.JSObject())
	return r
}

// Normal returns the Normal property of class ReflectBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectblock#normal
func (r *ReflectBlock) Normal() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("normal")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetNormal sets the Normal property of class ReflectBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectblock#normal
func (r *ReflectBlock) SetNormal(normal *NodeMaterialConnectionPoint) *ReflectBlock {
	r.p.Set("normal", normal.JSObject())
	return r
}

// Output returns the Output property of class ReflectBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectblock#output
func (r *ReflectBlock) Output() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetOutput sets the Output property of class ReflectBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.reflectblock#output
func (r *ReflectBlock) SetOutput(output *NodeMaterialConnectionPoint) *ReflectBlock {
	r.p.Set("output", output.JSObject())
	return r
}
