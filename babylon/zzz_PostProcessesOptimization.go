// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PostProcessesOptimization represents a babylon.js PostProcessesOptimization.
// Defines an optimization used to turn post-processes off
//
// See: http://doc.babylonjs.com/how_to/how_to_use_sceneoptimizer
type PostProcessesOptimization struct {
	*SceneOptimization
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PostProcessesOptimization) JSObject() js.Value { return p.p }

// PostProcessesOptimization returns a PostProcessesOptimization JavaScript class.
func (ba *Babylon) PostProcessesOptimization() *PostProcessesOptimization {
	p := ba.ctx.Get("PostProcessesOptimization")
	return PostProcessesOptimizationFromJSObject(p, ba.ctx)
}

// PostProcessesOptimizationFromJSObject returns a wrapped PostProcessesOptimization JavaScript class.
func PostProcessesOptimizationFromJSObject(p js.Value, ctx js.Value) *PostProcessesOptimization {
	return &PostProcessesOptimization{SceneOptimization: SceneOptimizationFromJSObject(p, ctx), ctx: ctx}
}

// NewPostProcessesOptimizationOpts contains optional parameters for NewPostProcessesOptimization.
type NewPostProcessesOptimizationOpts struct {
	Priority *float64
}

// NewPostProcessesOptimization returns a new PostProcessesOptimization object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessesoptimization
func (ba *Babylon) NewPostProcessesOptimization(opts *NewPostProcessesOptimizationOpts) *PostProcessesOptimization {
	if opts == nil {
		opts = &NewPostProcessesOptimizationOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Priority == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Priority)
	}

	p := ba.ctx.Get("PostProcessesOptimization").New(args...)
	return PostProcessesOptimizationFromJSObject(p, ba.ctx)
}

// Apply calls the Apply method on the PostProcessesOptimization object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessesoptimization#apply
func (p *PostProcessesOptimization) Apply(scene *Scene, optimizer *SceneOptimizer) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, scene.JSObject())
	args = append(args, optimizer.JSObject())

	retVal := p.p.Call("apply", args...)
	return retVal.Bool()
}

// GetDescription calls the GetDescription method on the PostProcessesOptimization object.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessesoptimization#getdescription
func (p *PostProcessesOptimization) GetDescription() string {

	args := make([]interface{}, 0, 0+0)

	retVal := p.p.Call("getDescription", args...)
	return retVal.String()
}

/*

// Priority returns the Priority property of class PostProcessesOptimization.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessesoptimization#priority
func (p *PostProcessesOptimization) Priority(priority float64) *PostProcessesOptimization {
	p := ba.ctx.Get("PostProcessesOptimization").New(priority)
	return PostProcessesOptimizationFromJSObject(p, ba.ctx)
}

// SetPriority sets the Priority property of class PostProcessesOptimization.
//
// https://doc.babylonjs.com/api/classes/babylon.postprocessesoptimization#priority
func (p *PostProcessesOptimization) SetPriority(priority float64) *PostProcessesOptimization {
	p := ba.ctx.Get("PostProcessesOptimization").New(priority)
	return PostProcessesOptimizationFromJSObject(p, ba.ctx)
}

*/
