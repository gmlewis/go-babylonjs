// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// StandardRenderingPipeline represents a babylon.js StandardRenderingPipeline.
// Standard rendering pipeline
// Default pipeline should be used going forward but the standard pipeline will be kept for backwards compatibility.
//
// See: https://doc.babylonjs.com/how_to/using_standard_rendering_pipeline
type StandardRenderingPipeline struct {
	*PostProcessRenderPipeline
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *StandardRenderingPipeline) JSObject() js.Value { return s.p }

// StandardRenderingPipeline returns a StandardRenderingPipeline JavaScript class.
func (ba *Babylon) StandardRenderingPipeline() *StandardRenderingPipeline {
	p := ba.ctx.Get("StandardRenderingPipeline")
	return StandardRenderingPipelineFromJSObject(p, ba.ctx)
}

// StandardRenderingPipelineFromJSObject returns a wrapped StandardRenderingPipeline JavaScript class.
func StandardRenderingPipelineFromJSObject(p js.Value, ctx js.Value) *StandardRenderingPipeline {
	return &StandardRenderingPipeline{PostProcessRenderPipeline: PostProcessRenderPipelineFromJSObject(p, ctx), ctx: ctx}
}

// NewStandardRenderingPipelineOpts contains optional parameters for NewStandardRenderingPipeline.
type NewStandardRenderingPipelineOpts struct {
	OriginalPostProcess *PostProcess

	Cameras *Camera
}

// NewStandardRenderingPipeline returns a new StandardRenderingPipeline object.
//
// https://doc.babylonjs.com/api/classes/babylon.standardrenderingpipeline
func (ba *Babylon) NewStandardRenderingPipeline(name string, scene *Scene, ratio float64, opts *NewStandardRenderingPipelineOpts) *StandardRenderingPipeline {
	if opts == nil {
		opts = &NewStandardRenderingPipelineOpts{}
	}

	p := ba.ctx.Get("StandardRenderingPipeline").New(name, scene.JSObject(), ratio, opts.OriginalPostProcess.JSObject(), opts.Cameras.JSObject())
	return StandardRenderingPipelineFromJSObject(p, ba.ctx)
}

// TODO: methods
