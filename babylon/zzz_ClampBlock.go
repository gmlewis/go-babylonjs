// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ClampBlock represents a babylon.js ClampBlock.
// Block used to clamp a float
type ClampBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *ClampBlock) JSObject() js.Value { return c.p }

// ClampBlock returns a ClampBlock JavaScript class.
func (ba *Babylon) ClampBlock() *ClampBlock {
	p := ba.ctx.Get("ClampBlock")
	return ClampBlockFromJSObject(p, ba.ctx)
}

// ClampBlockFromJSObject returns a wrapped ClampBlock JavaScript class.
func ClampBlockFromJSObject(p js.Value, ctx js.Value) *ClampBlock {
	return &ClampBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// ClampBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func ClampBlockArrayToJSArray(array []*ClampBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewClampBlock returns a new ClampBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.clampblock
func (ba *Babylon) NewClampBlock(name string) *ClampBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("ClampBlock").New(args...)
	return ClampBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the ClampBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.clampblock#getclassname
func (c *ClampBlock) GetClassName() string {

	retVal := c.p.Call("getClassName")
	return retVal.String()
}

// Serialize calls the Serialize method on the ClampBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.clampblock#serialize
func (c *ClampBlock) Serialize() js.Value {

	retVal := c.p.Call("serialize")
	return retVal
}

// _deserialize calls the _deserialize method on the ClampBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.clampblock#_deserialize
func (c *ClampBlock) _deserialize(serializationObject JSObject, scene *Scene, rootUrl string) {

	args := make([]interface{}, 0, 3+0)

	if serializationObject == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, serializationObject.JSObject())
	}

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	args = append(args, rootUrl)

	c.p.Call("_deserialize", args...)
}

// Maximum returns the Maximum property of class ClampBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.clampblock#maximum
func (c *ClampBlock) Maximum() float64 {
	retVal := c.p.Get("maximum")
	return retVal.Float()
}

// SetMaximum sets the Maximum property of class ClampBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.clampblock#maximum
func (c *ClampBlock) SetMaximum(maximum float64) *ClampBlock {
	c.p.Set("maximum", maximum)
	return c
}

// Minimum returns the Minimum property of class ClampBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.clampblock#minimum
func (c *ClampBlock) Minimum() float64 {
	retVal := c.p.Get("minimum")
	return retVal.Float()
}

// SetMinimum sets the Minimum property of class ClampBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.clampblock#minimum
func (c *ClampBlock) SetMinimum(minimum float64) *ClampBlock {
	c.p.Set("minimum", minimum)
	return c
}

// Output returns the Output property of class ClampBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.clampblock#output
func (c *ClampBlock) Output() *NodeMaterialConnectionPoint {
	retVal := c.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, c.ctx)
}

// SetOutput sets the Output property of class ClampBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.clampblock#output
func (c *ClampBlock) SetOutput(output *NodeMaterialConnectionPoint) *ClampBlock {
	c.p.Set("output", output.JSObject())
	return c
}

// Value returns the Value property of class ClampBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.clampblock#value
func (c *ClampBlock) Value() *NodeMaterialConnectionPoint {
	retVal := c.p.Get("value")
	return NodeMaterialConnectionPointFromJSObject(retVal, c.ctx)
}

// SetValue sets the Value property of class ClampBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.clampblock#value
func (c *ClampBlock) SetValue(value *NodeMaterialConnectionPoint) *ClampBlock {
	c.p.Set("value", value.JSObject())
	return c
}
