// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FramingBehavior represents a babylon.js FramingBehavior.
// The framing behavior (FramingBehavior) is designed to automatically position an ArcRotateCamera when its target is set to a mesh. It is also useful if you want to prevent the camera to go under a virtual horizontal plane.
//
// See: http://doc.babylonjs.com/how_to/camera_behaviors#framing-behavior
type FramingBehavior struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FramingBehavior) JSObject() js.Value { return f.p }

// FramingBehavior returns a FramingBehavior JavaScript class.
func (ba *Babylon) FramingBehavior() *FramingBehavior {
	p := ba.ctx.Get("FramingBehavior")
	return FramingBehaviorFromJSObject(p, ba.ctx)
}

// FramingBehaviorFromJSObject returns a wrapped FramingBehavior JavaScript class.
func FramingBehaviorFromJSObject(p js.Value, ctx js.Value) *FramingBehavior {
	return &FramingBehavior{p: p, ctx: ctx}
}

// FramingBehaviorArrayToJSArray returns a JavaScript Array for the wrapped array.
func FramingBehaviorArrayToJSArray(array []*FramingBehavior) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Attach calls the Attach method on the FramingBehavior object.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#attach
func (f *FramingBehavior) Attach(camera *ArcRotateCamera) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, camera.JSObject())

	f.p.Call("attach", args...)
}

// Detach calls the Detach method on the FramingBehavior object.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#detach
func (f *FramingBehavior) Detach() {

	f.p.Call("detach")
}

// Init calls the Init method on the FramingBehavior object.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#init
func (f *FramingBehavior) Init() {

	f.p.Call("init")
}

// StopAllAnimations calls the StopAllAnimations method on the FramingBehavior object.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#stopallanimations
func (f *FramingBehavior) StopAllAnimations() {

	f.p.Call("stopAllAnimations")
}

// FramingBehaviorZoomOnBoundingInfoOpts contains optional parameters for FramingBehavior.ZoomOnBoundingInfo.
type FramingBehaviorZoomOnBoundingInfoOpts struct {
	FocusOnOriginXZ *bool
	OnAnimationEnd  JSFunc
}

// ZoomOnBoundingInfo calls the ZoomOnBoundingInfo method on the FramingBehavior object.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#zoomonboundinginfo
func (f *FramingBehavior) ZoomOnBoundingInfo(minimumWorld *Vector3, maximumWorld *Vector3, opts *FramingBehaviorZoomOnBoundingInfoOpts) {
	if opts == nil {
		opts = &FramingBehaviorZoomOnBoundingInfoOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, minimumWorld.JSObject())
	args = append(args, maximumWorld.JSObject())

	if opts.FocusOnOriginXZ == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FocusOnOriginXZ)
	}
	if opts.OnAnimationEnd == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(opts.OnAnimationEnd) /* never freed! */)
	}

	f.p.Call("zoomOnBoundingInfo", args...)
}

// FramingBehaviorZoomOnMeshOpts contains optional parameters for FramingBehavior.ZoomOnMesh.
type FramingBehaviorZoomOnMeshOpts struct {
	FocusOnOriginXZ *bool
	OnAnimationEnd  JSFunc
}

// ZoomOnMesh calls the ZoomOnMesh method on the FramingBehavior object.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#zoomonmesh
func (f *FramingBehavior) ZoomOnMesh(mesh *AbstractMesh, opts *FramingBehaviorZoomOnMeshOpts) {
	if opts == nil {
		opts = &FramingBehaviorZoomOnMeshOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, mesh.JSObject())

	if opts.FocusOnOriginXZ == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FocusOnOriginXZ)
	}
	if opts.OnAnimationEnd == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(opts.OnAnimationEnd) /* never freed! */)
	}

	f.p.Call("zoomOnMesh", args...)
}

// FramingBehaviorZoomOnMeshHierarchyOpts contains optional parameters for FramingBehavior.ZoomOnMeshHierarchy.
type FramingBehaviorZoomOnMeshHierarchyOpts struct {
	FocusOnOriginXZ *bool
	OnAnimationEnd  JSFunc
}

// ZoomOnMeshHierarchy calls the ZoomOnMeshHierarchy method on the FramingBehavior object.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#zoomonmeshhierarchy
func (f *FramingBehavior) ZoomOnMeshHierarchy(mesh *AbstractMesh, opts *FramingBehaviorZoomOnMeshHierarchyOpts) {
	if opts == nil {
		opts = &FramingBehaviorZoomOnMeshHierarchyOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, mesh.JSObject())

	if opts.FocusOnOriginXZ == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FocusOnOriginXZ)
	}
	if opts.OnAnimationEnd == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(opts.OnAnimationEnd) /* never freed! */)
	}

	f.p.Call("zoomOnMeshHierarchy", args...)
}

// FramingBehaviorZoomOnMeshesHierarchyOpts contains optional parameters for FramingBehavior.ZoomOnMeshesHierarchy.
type FramingBehaviorZoomOnMeshesHierarchyOpts struct {
	FocusOnOriginXZ *bool
	OnAnimationEnd  JSFunc
}

// ZoomOnMeshesHierarchy calls the ZoomOnMeshesHierarchy method on the FramingBehavior object.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#zoomonmesheshierarchy
func (f *FramingBehavior) ZoomOnMeshesHierarchy(meshes []*AbstractMesh, opts *FramingBehaviorZoomOnMeshesHierarchyOpts) {
	if opts == nil {
		opts = &FramingBehaviorZoomOnMeshesHierarchyOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, AbstractMeshArrayToJSArray(meshes))

	if opts.FocusOnOriginXZ == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FocusOnOriginXZ)
	}
	if opts.OnAnimationEnd == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, js.FuncOf(opts.OnAnimationEnd) /* never freed! */)
	}

	f.p.Call("zoomOnMeshesHierarchy", args...)
}

// AutoCorrectCameraLimitsAndSensibility returns the AutoCorrectCameraLimitsAndSensibility property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#autocorrectcameralimitsandsensibility
func (f *FramingBehavior) AutoCorrectCameraLimitsAndSensibility() bool {
	retVal := f.p.Get("autoCorrectCameraLimitsAndSensibility")
	return retVal.Bool()
}

// SetAutoCorrectCameraLimitsAndSensibility sets the AutoCorrectCameraLimitsAndSensibility property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#autocorrectcameralimitsandsensibility
func (f *FramingBehavior) SetAutoCorrectCameraLimitsAndSensibility(autoCorrectCameraLimitsAndSensibility bool) *FramingBehavior {
	f.p.Set("autoCorrectCameraLimitsAndSensibility", autoCorrectCameraLimitsAndSensibility)
	return f
}

// DefaultElevation returns the DefaultElevation property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#defaultelevation
func (f *FramingBehavior) DefaultElevation() float64 {
	retVal := f.p.Get("defaultElevation")
	return retVal.Float()
}

// SetDefaultElevation sets the DefaultElevation property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#defaultelevation
func (f *FramingBehavior) SetDefaultElevation(defaultElevation float64) *FramingBehavior {
	f.p.Set("defaultElevation", defaultElevation)
	return f
}

// EasingFunction returns the EasingFunction property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#easingfunction
func (f *FramingBehavior) EasingFunction() *ExponentialEase {
	retVal := f.p.Get("EasingFunction")
	return ExponentialEaseFromJSObject(retVal, f.ctx)
}

// SetEasingFunction sets the EasingFunction property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#easingfunction
func (f *FramingBehavior) SetEasingFunction(EasingFunction *ExponentialEase) *FramingBehavior {
	f.p.Set("EasingFunction", EasingFunction.JSObject())
	return f
}

// EasingMode returns the EasingMode property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#easingmode
func (f *FramingBehavior) EasingMode() float64 {
	retVal := f.p.Get("EasingMode")
	return retVal.Float()
}

// SetEasingMode sets the EasingMode property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#easingmode
func (f *FramingBehavior) SetEasingMode(EasingMode float64) *FramingBehavior {
	f.p.Set("EasingMode", EasingMode)
	return f
}

// ElevationReturnTime returns the ElevationReturnTime property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#elevationreturntime
func (f *FramingBehavior) ElevationReturnTime() float64 {
	retVal := f.p.Get("elevationReturnTime")
	return retVal.Float()
}

// SetElevationReturnTime sets the ElevationReturnTime property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#elevationreturntime
func (f *FramingBehavior) SetElevationReturnTime(elevationReturnTime float64) *FramingBehavior {
	f.p.Set("elevationReturnTime", elevationReturnTime)
	return f
}

// ElevationReturnWaitTime returns the ElevationReturnWaitTime property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#elevationreturnwaittime
func (f *FramingBehavior) ElevationReturnWaitTime() float64 {
	retVal := f.p.Get("elevationReturnWaitTime")
	return retVal.Float()
}

// SetElevationReturnWaitTime sets the ElevationReturnWaitTime property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#elevationreturnwaittime
func (f *FramingBehavior) SetElevationReturnWaitTime(elevationReturnWaitTime float64) *FramingBehavior {
	f.p.Set("elevationReturnWaitTime", elevationReturnWaitTime)
	return f
}

// FitFrustumSidesMode returns the FitFrustumSidesMode property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#fitfrustumsidesmode
func (f *FramingBehavior) FitFrustumSidesMode() float64 {
	retVal := f.p.Get("FitFrustumSidesMode")
	return retVal.Float()
}

// SetFitFrustumSidesMode sets the FitFrustumSidesMode property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#fitfrustumsidesmode
func (f *FramingBehavior) SetFitFrustumSidesMode(FitFrustumSidesMode float64) *FramingBehavior {
	f.p.Set("FitFrustumSidesMode", FitFrustumSidesMode)
	return f
}

// FramingTime returns the FramingTime property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#framingtime
func (f *FramingBehavior) FramingTime() float64 {
	retVal := f.p.Get("framingTime")
	return retVal.Float()
}

// SetFramingTime sets the FramingTime property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#framingtime
func (f *FramingBehavior) SetFramingTime(framingTime float64) *FramingBehavior {
	f.p.Set("framingTime", framingTime)
	return f
}

// IgnoreBoundsSizeMode returns the IgnoreBoundsSizeMode property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#ignoreboundssizemode
func (f *FramingBehavior) IgnoreBoundsSizeMode() float64 {
	retVal := f.p.Get("IgnoreBoundsSizeMode")
	return retVal.Float()
}

// SetIgnoreBoundsSizeMode sets the IgnoreBoundsSizeMode property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#ignoreboundssizemode
func (f *FramingBehavior) SetIgnoreBoundsSizeMode(IgnoreBoundsSizeMode float64) *FramingBehavior {
	f.p.Set("IgnoreBoundsSizeMode", IgnoreBoundsSizeMode)
	return f
}

// IsUserIsMoving returns the IsUserIsMoving property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#isuserismoving
func (f *FramingBehavior) IsUserIsMoving() bool {
	retVal := f.p.Get("isUserIsMoving")
	return retVal.Bool()
}

// SetIsUserIsMoving sets the IsUserIsMoving property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#isuserismoving
func (f *FramingBehavior) SetIsUserIsMoving(isUserIsMoving bool) *FramingBehavior {
	f.p.Set("isUserIsMoving", isUserIsMoving)
	return f
}

// Mode returns the Mode property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#mode
func (f *FramingBehavior) Mode() float64 {
	retVal := f.p.Get("mode")
	return retVal.Float()
}

// SetMode sets the Mode property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#mode
func (f *FramingBehavior) SetMode(mode float64) *FramingBehavior {
	f.p.Set("mode", mode)
	return f
}

// Name returns the Name property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#name
func (f *FramingBehavior) Name() string {
	retVal := f.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#name
func (f *FramingBehavior) SetName(name string) *FramingBehavior {
	f.p.Set("name", name)
	return f
}

// PositionScale returns the PositionScale property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#positionscale
func (f *FramingBehavior) PositionScale() float64 {
	retVal := f.p.Get("positionScale")
	return retVal.Float()
}

// SetPositionScale sets the PositionScale property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#positionscale
func (f *FramingBehavior) SetPositionScale(positionScale float64) *FramingBehavior {
	f.p.Set("positionScale", positionScale)
	return f
}

// RadiusScale returns the RadiusScale property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#radiusscale
func (f *FramingBehavior) RadiusScale() float64 {
	retVal := f.p.Get("radiusScale")
	return retVal.Float()
}

// SetRadiusScale sets the RadiusScale property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#radiusscale
func (f *FramingBehavior) SetRadiusScale(radiusScale float64) *FramingBehavior {
	f.p.Set("radiusScale", radiusScale)
	return f
}

// ZoomStopsAnimation returns the ZoomStopsAnimation property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#zoomstopsanimation
func (f *FramingBehavior) ZoomStopsAnimation() bool {
	retVal := f.p.Get("zoomStopsAnimation")
	return retVal.Bool()
}

// SetZoomStopsAnimation sets the ZoomStopsAnimation property of class FramingBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.framingbehavior#zoomstopsanimation
func (f *FramingBehavior) SetZoomStopsAnimation(zoomStopsAnimation bool) *FramingBehavior {
	f.p.Set("zoomStopsAnimation", zoomStopsAnimation)
	return f
}
