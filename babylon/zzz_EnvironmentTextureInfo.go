// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// EnvironmentTextureInfo represents a babylon.js EnvironmentTextureInfo.
// Raw texture data and descriptor sufficient for WebGL texture upload
type EnvironmentTextureInfo struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *EnvironmentTextureInfo) JSObject() js.Value { return e.p }

// EnvironmentTextureInfo returns a EnvironmentTextureInfo JavaScript class.
func (ba *Babylon) EnvironmentTextureInfo() *EnvironmentTextureInfo {
	p := ba.ctx.Get("EnvironmentTextureInfo")
	return EnvironmentTextureInfoFromJSObject(p, ba.ctx)
}

// EnvironmentTextureInfoFromJSObject returns a wrapped EnvironmentTextureInfo JavaScript class.
func EnvironmentTextureInfoFromJSObject(p js.Value, ctx js.Value) *EnvironmentTextureInfo {
	return &EnvironmentTextureInfo{p: p, ctx: ctx}
}

// EnvironmentTextureInfoArrayToJSArray returns a JavaScript Array for the wrapped array.
func EnvironmentTextureInfoArrayToJSArray(array []*EnvironmentTextureInfo) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Irradiance returns the Irradiance property of class EnvironmentTextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.environmenttextureinfo#irradiance
func (e *EnvironmentTextureInfo) Irradiance(irradiance interface{}) *EnvironmentTextureInfo {
	p := ba.ctx.Get("EnvironmentTextureInfo").New(irradiance)
	return EnvironmentTextureInfoFromJSObject(p, ba.ctx)
}

// SetIrradiance sets the Irradiance property of class EnvironmentTextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.environmenttextureinfo#irradiance
func (e *EnvironmentTextureInfo) SetIrradiance(irradiance interface{}) *EnvironmentTextureInfo {
	p := ba.ctx.Get("EnvironmentTextureInfo").New(irradiance)
	return EnvironmentTextureInfoFromJSObject(p, ba.ctx)
}

// Specular returns the Specular property of class EnvironmentTextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.environmenttextureinfo#specular
func (e *EnvironmentTextureInfo) Specular(specular interface{}) *EnvironmentTextureInfo {
	p := ba.ctx.Get("EnvironmentTextureInfo").New(specular)
	return EnvironmentTextureInfoFromJSObject(p, ba.ctx)
}

// SetSpecular sets the Specular property of class EnvironmentTextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.environmenttextureinfo#specular
func (e *EnvironmentTextureInfo) SetSpecular(specular interface{}) *EnvironmentTextureInfo {
	p := ba.ctx.Get("EnvironmentTextureInfo").New(specular)
	return EnvironmentTextureInfoFromJSObject(p, ba.ctx)
}

// Version returns the Version property of class EnvironmentTextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.environmenttextureinfo#version
func (e *EnvironmentTextureInfo) Version(version float64) *EnvironmentTextureInfo {
	p := ba.ctx.Get("EnvironmentTextureInfo").New(version)
	return EnvironmentTextureInfoFromJSObject(p, ba.ctx)
}

// SetVersion sets the Version property of class EnvironmentTextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.environmenttextureinfo#version
func (e *EnvironmentTextureInfo) SetVersion(version float64) *EnvironmentTextureInfo {
	p := ba.ctx.Get("EnvironmentTextureInfo").New(version)
	return EnvironmentTextureInfoFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class EnvironmentTextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.environmenttextureinfo#width
func (e *EnvironmentTextureInfo) Width(width float64) *EnvironmentTextureInfo {
	p := ba.ctx.Get("EnvironmentTextureInfo").New(width)
	return EnvironmentTextureInfoFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class EnvironmentTextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.environmenttextureinfo#width
func (e *EnvironmentTextureInfo) SetWidth(width float64) *EnvironmentTextureInfo {
	p := ba.ctx.Get("EnvironmentTextureInfo").New(width)
	return EnvironmentTextureInfoFromJSObject(p, ba.ctx)
}

*/
