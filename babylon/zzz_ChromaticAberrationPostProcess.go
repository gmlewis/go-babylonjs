// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ChromaticAberrationPostProcess represents a babylon.js ChromaticAberrationPostProcess.
// The ChromaticAberrationPostProcess separates the rgb channels in an image to produce chromatic distortion around the edges of the screen
type ChromaticAberrationPostProcess struct{ *PostProcess }

// JSObject returns the underlying js.Value.
func (c *ChromaticAberrationPostProcess) JSObject() js.Value { return c.p }

// ChromaticAberrationPostProcess returns a ChromaticAberrationPostProcess JavaScript class.
func (b *Babylon) ChromaticAberrationPostProcess() *ChromaticAberrationPostProcess {
	p := b.ctx.Get("ChromaticAberrationPostProcess")
	return ChromaticAberrationPostProcessFromJSObject(p)
}

// ChromaticAberrationPostProcessFromJSObject returns a wrapped ChromaticAberrationPostProcess JavaScript class.
func ChromaticAberrationPostProcessFromJSObject(p js.Value) *ChromaticAberrationPostProcess {
	return &ChromaticAberrationPostProcess{PostProcessFromJSObject(p)}
}

// NewChromaticAberrationPostProcessOpts contains optional parameters for NewChromaticAberrationPostProcess.
type NewChromaticAberrationPostProcessOpts struct {
	SamplingMode *float64

	Engine *Engine

	Reusable *bool

	TextureType *float64

	BlockCompilation *bool
}

// NewChromaticAberrationPostProcess returns a new ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess
func (b *Babylon) NewChromaticAberrationPostProcess(name string, screenWidth float64, screenHeight float64, options float64, camera *Camera, opts *NewChromaticAberrationPostProcessOpts) *ChromaticAberrationPostProcess {
	if opts == nil {
		opts = &NewChromaticAberrationPostProcessOpts{}
	}

	p := b.ctx.Get("ChromaticAberrationPostProcess").New(name, screenWidth, screenHeight, options, camera.JSObject(), opts.SamplingMode, opts.Engine.JSObject(), opts.Reusable.JSObject(), opts.TextureType, opts.BlockCompilation.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p)
}

// TODO: methods
