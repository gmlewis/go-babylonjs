// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ChromaticAberrationPostProcess represents a babylon.js ChromaticAberrationPostProcess.
// The ChromaticAberrationPostProcess separates the rgb channels in an image to produce chromatic distortion around the edges of the screen
type ChromaticAberrationPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *ChromaticAberrationPostProcess) JSObject() js.Value { return c.p }

// ChromaticAberrationPostProcess returns a ChromaticAberrationPostProcess JavaScript class.
func (ba *Babylon) ChromaticAberrationPostProcess() *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess")
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// ChromaticAberrationPostProcessFromJSObject returns a wrapped ChromaticAberrationPostProcess JavaScript class.
func ChromaticAberrationPostProcessFromJSObject(p js.Value, ctx js.Value) *ChromaticAberrationPostProcess {
	return &ChromaticAberrationPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// ChromaticAberrationPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func ChromaticAberrationPostProcessArrayToJSArray(array []*ChromaticAberrationPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewChromaticAberrationPostProcessOpts contains optional parameters for NewChromaticAberrationPostProcess.
type NewChromaticAberrationPostProcessOpts struct {
	SamplingMode     *float64
	Engine           *Engine
	Reusable         *bool
	TextureType      *float64
	BlockCompilation *bool
}

// NewChromaticAberrationPostProcess returns a new ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess
func (ba *Babylon) NewChromaticAberrationPostProcess(name string, screenWidth float64, screenHeight float64, options float64, camera *Camera, opts *NewChromaticAberrationPostProcessOpts) *ChromaticAberrationPostProcess {
	if opts == nil {
		opts = &NewChromaticAberrationPostProcessOpts{}
	}

	args := make([]interface{}, 0, 5+5)

	args = append(args, name)
	args = append(args, screenWidth)
	args = append(args, screenHeight)
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}
	if opts.BlockCompilation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.BlockCompilation)
	}

	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(args...)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// ChromaticAberrationPostProcessActivateOpts contains optional parameters for ChromaticAberrationPostProcess.Activate.
type ChromaticAberrationPostProcessActivateOpts struct {
	SourceTexture     *InternalTexture
	ForceDepthStencil *bool
}

// Activate calls the Activate method on the ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#activate
func (c *ChromaticAberrationPostProcess) Activate(camera *Camera, opts *ChromaticAberrationPostProcessActivateOpts) *InternalTexture {
	if opts == nil {
		opts = &ChromaticAberrationPostProcessActivateOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, camera.JSObject())

	if opts.SourceTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.SourceTexture.JSObject())
	}
	if opts.ForceDepthStencil == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDepthStencil)
	}

	retVal := c.p.Call("activate", args...)
	return InternalTextureFromJSObject(retVal, c.ctx)
}

// Apply calls the Apply method on the ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#apply
func (c *ChromaticAberrationPostProcess) Apply() *Effect {

	retVal := c.p.Call("apply")
	return EffectFromJSObject(retVal, c.ctx)
}

// ChromaticAberrationPostProcessDisposeOpts contains optional parameters for ChromaticAberrationPostProcess.Dispose.
type ChromaticAberrationPostProcessDisposeOpts struct {
	Camera *Camera
}

// Dispose calls the Dispose method on the ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#dispose
func (c *ChromaticAberrationPostProcess) Dispose(opts *ChromaticAberrationPostProcessDisposeOpts) {
	if opts == nil {
		opts = &ChromaticAberrationPostProcessDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}

	c.p.Call("dispose", args...)
}

// GetCamera calls the GetCamera method on the ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#getcamera
func (c *ChromaticAberrationPostProcess) GetCamera() *Camera {

	retVal := c.p.Call("getCamera")
	return CameraFromJSObject(retVal, c.ctx)
}

// GetClassName calls the GetClassName method on the ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#getclassname
func (c *ChromaticAberrationPostProcess) GetClassName() string {

	retVal := c.p.Call("getClassName")
	return retVal.String()
}

// GetEffect calls the GetEffect method on the ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#geteffect
func (c *ChromaticAberrationPostProcess) GetEffect() *Effect {

	retVal := c.p.Call("getEffect")
	return EffectFromJSObject(retVal, c.ctx)
}

// GetEffectName calls the GetEffectName method on the ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#geteffectname
func (c *ChromaticAberrationPostProcess) GetEffectName() string {

	retVal := c.p.Call("getEffectName")
	return retVal.String()
}

// GetEngine calls the GetEngine method on the ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#getengine
func (c *ChromaticAberrationPostProcess) GetEngine() *Engine {

	retVal := c.p.Call("getEngine")
	return EngineFromJSObject(retVal, c.ctx)
}

// IsReady calls the IsReady method on the ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#isready
func (c *ChromaticAberrationPostProcess) IsReady() bool {

	retVal := c.p.Call("isReady")
	return retVal.Bool()
}

// IsReusable calls the IsReusable method on the ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#isreusable
func (c *ChromaticAberrationPostProcess) IsReusable() bool {

	retVal := c.p.Call("isReusable")
	return retVal.Bool()
}

// MarkTextureDirty calls the MarkTextureDirty method on the ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#marktexturedirty
func (c *ChromaticAberrationPostProcess) MarkTextureDirty() {

	c.p.Call("markTextureDirty")
}

// ShareOutputWith calls the ShareOutputWith method on the ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#shareoutputwith
func (c *ChromaticAberrationPostProcess) ShareOutputWith(postProcess *PostProcess) *PostProcess {

	args := make([]interface{}, 0, 1+0)

	args = append(args, postProcess.JSObject())

	retVal := c.p.Call("shareOutputWith", args...)
	return PostProcessFromJSObject(retVal, c.ctx)
}

// ChromaticAberrationPostProcessUpdateEffectOpts contains optional parameters for ChromaticAberrationPostProcess.UpdateEffect.
type ChromaticAberrationPostProcessUpdateEffectOpts struct {
	Defines         *string
	Uniforms        *string
	Samplers        *string
	IndexParameters *interface{}
	OnCompiled      func()
	OnError         func()
}

// UpdateEffect calls the UpdateEffect method on the ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#updateeffect
func (c *ChromaticAberrationPostProcess) UpdateEffect(opts *ChromaticAberrationPostProcessUpdateEffectOpts) {
	if opts == nil {
		opts = &ChromaticAberrationPostProcessUpdateEffectOpts{}
	}

	args := make([]interface{}, 0, 0+6)

	if opts.Defines == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Defines)
	}
	if opts.Uniforms == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Uniforms)
	}
	if opts.Samplers == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Samplers)
	}
	if opts.IndexParameters == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.IndexParameters)
	}
	if opts.OnCompiled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnCompiled)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}

	c.p.Call("updateEffect", args...)
}

// UseOwnOutput calls the UseOwnOutput method on the ChromaticAberrationPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#useownoutput
func (c *ChromaticAberrationPostProcess) UseOwnOutput() {

	c.p.Call("useOwnOutput")
}

/*

// AberrationAmount returns the AberrationAmount property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#aberrationamount
func (c *ChromaticAberrationPostProcess) AberrationAmount(aberrationAmount float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(aberrationAmount)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetAberrationAmount sets the AberrationAmount property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#aberrationamount
func (c *ChromaticAberrationPostProcess) SetAberrationAmount(aberrationAmount float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(aberrationAmount)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// AdaptScaleToCurrentViewport returns the AdaptScaleToCurrentViewport property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#adaptscaletocurrentviewport
func (c *ChromaticAberrationPostProcess) AdaptScaleToCurrentViewport(adaptScaleToCurrentViewport bool) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(adaptScaleToCurrentViewport)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetAdaptScaleToCurrentViewport sets the AdaptScaleToCurrentViewport property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#adaptscaletocurrentviewport
func (c *ChromaticAberrationPostProcess) SetAdaptScaleToCurrentViewport(adaptScaleToCurrentViewport bool) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(adaptScaleToCurrentViewport)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// AlphaConstants returns the AlphaConstants property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#alphaconstants
func (c *ChromaticAberrationPostProcess) AlphaConstants(alphaConstants *Color4) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(alphaConstants.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetAlphaConstants sets the AlphaConstants property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#alphaconstants
func (c *ChromaticAberrationPostProcess) SetAlphaConstants(alphaConstants *Color4) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(alphaConstants.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// AlphaMode returns the AlphaMode property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#alphamode
func (c *ChromaticAberrationPostProcess) AlphaMode(alphaMode float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(alphaMode)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetAlphaMode sets the AlphaMode property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#alphamode
func (c *ChromaticAberrationPostProcess) SetAlphaMode(alphaMode float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(alphaMode)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// AlwaysForcePOT returns the AlwaysForcePOT property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#alwaysforcepot
func (c *ChromaticAberrationPostProcess) AlwaysForcePOT(alwaysForcePOT bool) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(alwaysForcePOT)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetAlwaysForcePOT sets the AlwaysForcePOT property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#alwaysforcepot
func (c *ChromaticAberrationPostProcess) SetAlwaysForcePOT(alwaysForcePOT bool) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(alwaysForcePOT)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// Animations returns the Animations property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#animations
func (c *ChromaticAberrationPostProcess) Animations(animations *Animation) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(animations.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#animations
func (c *ChromaticAberrationPostProcess) SetAnimations(animations *Animation) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(animations.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// AspectRatio returns the AspectRatio property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#aspectratio
func (c *ChromaticAberrationPostProcess) AspectRatio(aspectRatio float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(aspectRatio)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetAspectRatio sets the AspectRatio property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#aspectratio
func (c *ChromaticAberrationPostProcess) SetAspectRatio(aspectRatio float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(aspectRatio)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// AutoClear returns the AutoClear property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#autoclear
func (c *ChromaticAberrationPostProcess) AutoClear(autoClear bool) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(autoClear)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetAutoClear sets the AutoClear property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#autoclear
func (c *ChromaticAberrationPostProcess) SetAutoClear(autoClear bool) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(autoClear)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// CenterPosition returns the CenterPosition property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#centerposition
func (c *ChromaticAberrationPostProcess) CenterPosition(centerPosition *Vector2) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(centerPosition.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetCenterPosition sets the CenterPosition property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#centerposition
func (c *ChromaticAberrationPostProcess) SetCenterPosition(centerPosition *Vector2) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(centerPosition.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// ClearColor returns the ClearColor property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#clearcolor
func (c *ChromaticAberrationPostProcess) ClearColor(clearColor *Color4) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(clearColor.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetClearColor sets the ClearColor property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#clearcolor
func (c *ChromaticAberrationPostProcess) SetClearColor(clearColor *Color4) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(clearColor.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// Direction returns the Direction property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#direction
func (c *ChromaticAberrationPostProcess) Direction(direction *Vector2) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(direction.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetDirection sets the Direction property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#direction
func (c *ChromaticAberrationPostProcess) SetDirection(direction *Vector2) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(direction.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// EnablePixelPerfectMode returns the EnablePixelPerfectMode property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#enablepixelperfectmode
func (c *ChromaticAberrationPostProcess) EnablePixelPerfectMode(enablePixelPerfectMode bool) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(enablePixelPerfectMode)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetEnablePixelPerfectMode sets the EnablePixelPerfectMode property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#enablepixelperfectmode
func (c *ChromaticAberrationPostProcess) SetEnablePixelPerfectMode(enablePixelPerfectMode bool) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(enablePixelPerfectMode)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// ForceFullscreenViewport returns the ForceFullscreenViewport property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#forcefullscreenviewport
func (c *ChromaticAberrationPostProcess) ForceFullscreenViewport(forceFullscreenViewport bool) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(forceFullscreenViewport)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetForceFullscreenViewport sets the ForceFullscreenViewport property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#forcefullscreenviewport
func (c *ChromaticAberrationPostProcess) SetForceFullscreenViewport(forceFullscreenViewport bool) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(forceFullscreenViewport)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// Height returns the Height property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#height
func (c *ChromaticAberrationPostProcess) Height(height float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(height)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetHeight sets the Height property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#height
func (c *ChromaticAberrationPostProcess) SetHeight(height float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(height)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// InputTexture returns the InputTexture property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#inputtexture
func (c *ChromaticAberrationPostProcess) InputTexture(inputTexture *InternalTexture) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(inputTexture.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetInputTexture sets the InputTexture property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#inputtexture
func (c *ChromaticAberrationPostProcess) SetInputTexture(inputTexture *InternalTexture) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(inputTexture.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#inspectablecustomproperties
func (c *ChromaticAberrationPostProcess) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(inspectableCustomProperties.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#inspectablecustomproperties
func (c *ChromaticAberrationPostProcess) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(inspectableCustomProperties.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// IsSupported returns the IsSupported property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#issupported
func (c *ChromaticAberrationPostProcess) IsSupported(isSupported bool) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(isSupported)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetIsSupported sets the IsSupported property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#issupported
func (c *ChromaticAberrationPostProcess) SetIsSupported(isSupported bool) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(isSupported)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#name
func (c *ChromaticAberrationPostProcess) Name(name string) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(name)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#name
func (c *ChromaticAberrationPostProcess) SetName(name string) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(name)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// OnActivate returns the OnActivate property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onactivate
func (c *ChromaticAberrationPostProcess) OnActivate(onActivate func()) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onActivate(); return nil}))
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetOnActivate sets the OnActivate property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onactivate
func (c *ChromaticAberrationPostProcess) SetOnActivate(onActivate func()) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onActivate(); return nil}))
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// OnActivateObservable returns the OnActivateObservable property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onactivateobservable
func (c *ChromaticAberrationPostProcess) OnActivateObservable(onActivateObservable *Observable) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(onActivateObservable.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetOnActivateObservable sets the OnActivateObservable property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onactivateobservable
func (c *ChromaticAberrationPostProcess) SetOnActivateObservable(onActivateObservable *Observable) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(onActivateObservable.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// OnAfterRender returns the OnAfterRender property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onafterrender
func (c *ChromaticAberrationPostProcess) OnAfterRender(onAfterRender func()) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onAfterRender(); return nil}))
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetOnAfterRender sets the OnAfterRender property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onafterrender
func (c *ChromaticAberrationPostProcess) SetOnAfterRender(onAfterRender func()) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onAfterRender(); return nil}))
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// OnAfterRenderObservable returns the OnAfterRenderObservable property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onafterrenderobservable
func (c *ChromaticAberrationPostProcess) OnAfterRenderObservable(onAfterRenderObservable *Observable) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(onAfterRenderObservable.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetOnAfterRenderObservable sets the OnAfterRenderObservable property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onafterrenderobservable
func (c *ChromaticAberrationPostProcess) SetOnAfterRenderObservable(onAfterRenderObservable *Observable) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(onAfterRenderObservable.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// OnApply returns the OnApply property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onapply
func (c *ChromaticAberrationPostProcess) OnApply(onApply func()) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onApply(); return nil}))
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetOnApply sets the OnApply property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onapply
func (c *ChromaticAberrationPostProcess) SetOnApply(onApply func()) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onApply(); return nil}))
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// OnApplyObservable returns the OnApplyObservable property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onapplyobservable
func (c *ChromaticAberrationPostProcess) OnApplyObservable(onApplyObservable *Observable) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(onApplyObservable.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetOnApplyObservable sets the OnApplyObservable property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onapplyobservable
func (c *ChromaticAberrationPostProcess) SetOnApplyObservable(onApplyObservable *Observable) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(onApplyObservable.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// OnBeforeRender returns the OnBeforeRender property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onbeforerender
func (c *ChromaticAberrationPostProcess) OnBeforeRender(onBeforeRender func()) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onBeforeRender(); return nil}))
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetOnBeforeRender sets the OnBeforeRender property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onbeforerender
func (c *ChromaticAberrationPostProcess) SetOnBeforeRender(onBeforeRender func()) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onBeforeRender(); return nil}))
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// OnBeforeRenderObservable returns the OnBeforeRenderObservable property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onbeforerenderobservable
func (c *ChromaticAberrationPostProcess) OnBeforeRenderObservable(onBeforeRenderObservable *Observable) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(onBeforeRenderObservable.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetOnBeforeRenderObservable sets the OnBeforeRenderObservable property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onbeforerenderobservable
func (c *ChromaticAberrationPostProcess) SetOnBeforeRenderObservable(onBeforeRenderObservable *Observable) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(onBeforeRenderObservable.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// OnSizeChanged returns the OnSizeChanged property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onsizechanged
func (c *ChromaticAberrationPostProcess) OnSizeChanged(onSizeChanged func()) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onSizeChanged(); return nil}))
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetOnSizeChanged sets the OnSizeChanged property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onsizechanged
func (c *ChromaticAberrationPostProcess) SetOnSizeChanged(onSizeChanged func()) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onSizeChanged(); return nil}))
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// OnSizeChangedObservable returns the OnSizeChangedObservable property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onsizechangedobservable
func (c *ChromaticAberrationPostProcess) OnSizeChangedObservable(onSizeChangedObservable *Observable) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(onSizeChangedObservable.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetOnSizeChangedObservable sets the OnSizeChangedObservable property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#onsizechangedobservable
func (c *ChromaticAberrationPostProcess) SetOnSizeChangedObservable(onSizeChangedObservable *Observable) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(onSizeChangedObservable.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// RadialIntensity returns the RadialIntensity property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#radialintensity
func (c *ChromaticAberrationPostProcess) RadialIntensity(radialIntensity float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(radialIntensity)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetRadialIntensity sets the RadialIntensity property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#radialintensity
func (c *ChromaticAberrationPostProcess) SetRadialIntensity(radialIntensity float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(radialIntensity)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// RenderTargetSamplingMode returns the RenderTargetSamplingMode property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#rendertargetsamplingmode
func (c *ChromaticAberrationPostProcess) RenderTargetSamplingMode(renderTargetSamplingMode float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(renderTargetSamplingMode)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetRenderTargetSamplingMode sets the RenderTargetSamplingMode property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#rendertargetsamplingmode
func (c *ChromaticAberrationPostProcess) SetRenderTargetSamplingMode(renderTargetSamplingMode float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(renderTargetSamplingMode)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// Samples returns the Samples property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#samples
func (c *ChromaticAberrationPostProcess) Samples(samples float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(samples)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetSamples sets the Samples property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#samples
func (c *ChromaticAberrationPostProcess) SetSamples(samples float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(samples)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// ScaleMode returns the ScaleMode property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#scalemode
func (c *ChromaticAberrationPostProcess) ScaleMode(scaleMode float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(scaleMode)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetScaleMode sets the ScaleMode property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#scalemode
func (c *ChromaticAberrationPostProcess) SetScaleMode(scaleMode float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(scaleMode)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// TexelSize returns the TexelSize property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#texelsize
func (c *ChromaticAberrationPostProcess) TexelSize(texelSize *Vector2) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(texelSize.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetTexelSize sets the TexelSize property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#texelsize
func (c *ChromaticAberrationPostProcess) SetTexelSize(texelSize *Vector2) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(texelSize.JSObject())
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#uniqueid
func (c *ChromaticAberrationPostProcess) UniqueId(uniqueId float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(uniqueId)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#uniqueid
func (c *ChromaticAberrationPostProcess) SetUniqueId(uniqueId float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(uniqueId)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#width
func (c *ChromaticAberrationPostProcess) Width(width float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(width)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class ChromaticAberrationPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.chromaticaberrationpostprocess#width
func (c *ChromaticAberrationPostProcess) SetWidth(width float64) *ChromaticAberrationPostProcess {
	p := ba.ctx.Get("ChromaticAberrationPostProcess").New(width)
	return ChromaticAberrationPostProcessFromJSObject(p, ba.ctx)
}

*/
