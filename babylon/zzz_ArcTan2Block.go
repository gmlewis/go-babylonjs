// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ArcTan2Block represents a babylon.js ArcTan2Block.
// Block used to compute arc tangent of 2 values
type ArcTan2Block struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *ArcTan2Block) JSObject() js.Value { return a.p }

// ArcTan2Block returns a ArcTan2Block JavaScript class.
func (ba *Babylon) ArcTan2Block() *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block")
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// ArcTan2BlockFromJSObject returns a wrapped ArcTan2Block JavaScript class.
func ArcTan2BlockFromJSObject(p js.Value, ctx js.Value) *ArcTan2Block {
	return &ArcTan2Block{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// ArcTan2BlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func ArcTan2BlockArrayToJSArray(array []*ArcTan2Block) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewArcTan2Block returns a new ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block
func (ba *Babylon) NewArcTan2Block(name string) *ArcTan2Block {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("ArcTan2Block").New(args...)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#autoconfigure
func (a *ArcTan2Block) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	a.p.Call("autoConfigure", args...)
}

// ArcTan2BlockBindOpts contains optional parameters for ArcTan2Block.Bind.
type ArcTan2BlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#bind
func (a *ArcTan2Block) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *ArcTan2BlockBindOpts) {
	if opts == nil {
		opts = &ArcTan2BlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	a.p.Call("bind", args...)
}

// Build calls the Build method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#build
func (a *ArcTan2Block) Build(state *NodeMaterialBuildState, activeBlocks *NodeMaterialBlock) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, state.JSObject())
	args = append(args, activeBlocks.JSObject())

	retVal := a.p.Call("build", args...)
	return retVal.Bool()
}

// ArcTan2BlockCloneOpts contains optional parameters for ArcTan2Block.Clone.
type ArcTan2BlockCloneOpts struct {
	RootUrl *string
}

// Clone calls the Clone method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#clone
func (a *ArcTan2Block) Clone(scene *Scene, opts *ArcTan2BlockCloneOpts) *NodeMaterialBlock {
	if opts == nil {
		opts = &ArcTan2BlockCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := a.p.Call("clone", args...)
	return NodeMaterialBlockFromJSObject(retVal, a.ctx)
}

// ArcTan2BlockConnectToOpts contains optional parameters for ArcTan2Block.ConnectTo.
type ArcTan2BlockConnectToOpts struct {
	Options map[string]interface{}
}

// ConnectTo calls the ConnectTo method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#connectto
func (a *ArcTan2Block) ConnectTo(other *NodeMaterialBlock, opts *ArcTan2BlockConnectToOpts) *ArcTan2Block {
	if opts == nil {
		opts = &ArcTan2BlockConnectToOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, other.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := a.p.Call("connectTo", args...)
	return ArcTan2BlockFromJSObject(retVal, a.ctx)
}

// Dispose calls the Dispose method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#dispose
func (a *ArcTan2Block) Dispose() {

	a.p.Call("dispose")
}

// GetClassName calls the GetClassName method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#getclassname
func (a *ArcTan2Block) GetClassName() string {

	retVal := a.p.Call("getClassName")
	return retVal.String()
}

// ArcTan2BlockGetFirstAvailableInputOpts contains optional parameters for ArcTan2Block.GetFirstAvailableInput.
type ArcTan2BlockGetFirstAvailableInputOpts struct {
	ForOutput *NodeMaterialConnectionPoint
}

// GetFirstAvailableInput calls the GetFirstAvailableInput method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#getfirstavailableinput
func (a *ArcTan2Block) GetFirstAvailableInput(opts *ArcTan2BlockGetFirstAvailableInputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &ArcTan2BlockGetFirstAvailableInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForOutput == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForOutput.JSObject())
	}

	retVal := a.p.Call("getFirstAvailableInput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, a.ctx)
}

// ArcTan2BlockGetFirstAvailableOutputOpts contains optional parameters for ArcTan2Block.GetFirstAvailableOutput.
type ArcTan2BlockGetFirstAvailableOutputOpts struct {
	ForBlock *NodeMaterialBlock
}

// GetFirstAvailableOutput calls the GetFirstAvailableOutput method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#getfirstavailableoutput
func (a *ArcTan2Block) GetFirstAvailableOutput(opts *ArcTan2BlockGetFirstAvailableOutputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &ArcTan2BlockGetFirstAvailableOutputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForBlock == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForBlock.JSObject())
	}

	retVal := a.p.Call("getFirstAvailableOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, a.ctx)
}

// GetInputByName calls the GetInputByName method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#getinputbyname
func (a *ArcTan2Block) GetInputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := a.p.Call("getInputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, a.ctx)
}

// GetOutputByName calls the GetOutputByName method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#getoutputbyname
func (a *ArcTan2Block) GetOutputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := a.p.Call("getOutputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, a.ctx)
}

// GetSiblingOutput calls the GetSiblingOutput method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#getsiblingoutput
func (a *ArcTan2Block) GetSiblingOutput(current *NodeMaterialConnectionPoint) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, current.JSObject())

	retVal := a.p.Call("getSiblingOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, a.ctx)
}

// Initialize calls the Initialize method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#initialize
func (a *ArcTan2Block) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	a.p.Call("initialize", args...)
}

// ArcTan2BlockInitializeDefinesOpts contains optional parameters for ArcTan2Block.InitializeDefines.
type ArcTan2BlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#initializedefines
func (a *ArcTan2Block) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *ArcTan2BlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &ArcTan2BlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	a.p.Call("initializeDefines", args...)
}

// ArcTan2BlockIsReadyOpts contains optional parameters for ArcTan2Block.IsReady.
type ArcTan2BlockIsReadyOpts struct {
	UseInstances *bool
}

// IsReady calls the IsReady method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#isready
func (a *ArcTan2Block) IsReady(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *ArcTan2BlockIsReadyOpts) bool {
	if opts == nil {
		opts = &ArcTan2BlockIsReadyOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := a.p.Call("isReady", args...)
	return retVal.Bool()
}

// ArcTan2BlockPrepareDefinesOpts contains optional parameters for ArcTan2Block.PrepareDefines.
type ArcTan2BlockPrepareDefinesOpts struct {
	UseInstances *bool
}

// PrepareDefines calls the PrepareDefines method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#preparedefines
func (a *ArcTan2Block) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *ArcTan2BlockPrepareDefinesOpts) {
	if opts == nil {
		opts = &ArcTan2BlockPrepareDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	a.p.Call("prepareDefines", args...)
}

// ProvideFallbacks calls the ProvideFallbacks method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#providefallbacks
func (a *ArcTan2Block) ProvideFallbacks(mesh *AbstractMesh, fallbacks *EffectFallbacks) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, fallbacks.JSObject())

	a.p.Call("provideFallbacks", args...)
}

// ArcTan2BlockRegisterInputOpts contains optional parameters for ArcTan2Block.RegisterInput.
type ArcTan2BlockRegisterInputOpts struct {
	IsOptional *bool
	Target     js.Value
}

// RegisterInput calls the RegisterInput method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#registerinput
func (a *ArcTan2Block) RegisterInput(name string, jsType js.Value, opts *ArcTan2BlockRegisterInputOpts) *ArcTan2Block {
	if opts == nil {
		opts = &ArcTan2BlockRegisterInputOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, jsType)

	if opts.IsOptional == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsOptional)
	}
	args = append(args, opts.Target)

	retVal := a.p.Call("registerInput", args...)
	return ArcTan2BlockFromJSObject(retVal, a.ctx)
}

// ArcTan2BlockRegisterOutputOpts contains optional parameters for ArcTan2Block.RegisterOutput.
type ArcTan2BlockRegisterOutputOpts struct {
	Target js.Value
}

// RegisterOutput calls the RegisterOutput method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#registeroutput
func (a *ArcTan2Block) RegisterOutput(name string, jsType js.Value, opts *ArcTan2BlockRegisterOutputOpts) *ArcTan2Block {
	if opts == nil {
		opts = &ArcTan2BlockRegisterOutputOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, jsType)

	args = append(args, opts.Target)

	retVal := a.p.Call("registerOutput", args...)
	return ArcTan2BlockFromJSObject(retVal, a.ctx)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#replacerepeatablecontent
func (a *ArcTan2Block) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	a.p.Call("replaceRepeatableContent", args...)
}

// Serialize calls the Serialize method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#serialize
func (a *ArcTan2Block) Serialize() interface{} {

	retVal := a.p.Call("serialize")
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#updateuniformsandsamples
func (a *ArcTan2Block) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers string) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, state.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)
	args = append(args, uniformBuffers)

	a.p.Call("updateUniformsAndSamples", args...)
}

/*

// BuildId returns the BuildId property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#buildid
func (a *ArcTan2Block) BuildId(buildId float64) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(buildId)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetBuildId sets the BuildId property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#buildid
func (a *ArcTan2Block) SetBuildId(buildId float64) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(buildId)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// Comments returns the Comments property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#comments
func (a *ArcTan2Block) Comments(comments string) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(comments)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetComments sets the Comments property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#comments
func (a *ArcTan2Block) SetComments(comments string) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(comments)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#inputs
func (a *ArcTan2Block) Inputs(inputs *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(inputs.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#inputs
func (a *ArcTan2Block) SetInputs(inputs *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(inputs.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// IsFinalMerger returns the IsFinalMerger property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#isfinalmerger
func (a *ArcTan2Block) IsFinalMerger(isFinalMerger bool) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(isFinalMerger)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetIsFinalMerger sets the IsFinalMerger property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#isfinalmerger
func (a *ArcTan2Block) SetIsFinalMerger(isFinalMerger bool) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(isFinalMerger)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// IsInput returns the IsInput property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#isinput
func (a *ArcTan2Block) IsInput(isInput bool) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(isInput)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetIsInput sets the IsInput property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#isinput
func (a *ArcTan2Block) SetIsInput(isInput bool) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(isInput)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// IsUnique returns the IsUnique property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#isunique
func (a *ArcTan2Block) IsUnique(isUnique bool) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(isUnique)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetIsUnique sets the IsUnique property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#isunique
func (a *ArcTan2Block) SetIsUnique(isUnique bool) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(isUnique)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#name
func (a *ArcTan2Block) Name(name string) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(name)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#name
func (a *ArcTan2Block) SetName(name string) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(name)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#output
func (a *ArcTan2Block) Output(output *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(output.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#output
func (a *ArcTan2Block) SetOutput(output *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(output.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// Outputs returns the Outputs property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#outputs
func (a *ArcTan2Block) Outputs(outputs *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(outputs.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetOutputs sets the Outputs property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#outputs
func (a *ArcTan2Block) SetOutputs(outputs *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(outputs.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#target
func (a *ArcTan2Block) Target(target js.Value) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(target)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#target
func (a *ArcTan2Block) SetTarget(target js.Value) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(target)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#uniqueid
func (a *ArcTan2Block) UniqueId(uniqueId float64) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(uniqueId)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#uniqueid
func (a *ArcTan2Block) SetUniqueId(uniqueId float64) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(uniqueId)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// X returns the X property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#x
func (a *ArcTan2Block) X(x *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(x.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetX sets the X property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#x
func (a *ArcTan2Block) SetX(x *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(x.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// Y returns the Y property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#y
func (a *ArcTan2Block) Y(y *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(y.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetY sets the Y property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#y
func (a *ArcTan2Block) SetY(y *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(y.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

*/
