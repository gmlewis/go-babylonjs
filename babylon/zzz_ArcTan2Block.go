// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ArcTan2Block represents a babylon.js ArcTan2Block.
// Block used to compute arc tangent of 2 values
type ArcTan2Block struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *ArcTan2Block) JSObject() js.Value { return a.p }

// ArcTan2Block returns a ArcTan2Block JavaScript class.
func (ba *Babylon) ArcTan2Block() *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block")
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// ArcTan2BlockFromJSObject returns a wrapped ArcTan2Block JavaScript class.
func ArcTan2BlockFromJSObject(p js.Value, ctx js.Value) *ArcTan2Block {
	return &ArcTan2Block{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// ArcTan2BlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func ArcTan2BlockArrayToJSArray(array []*ArcTan2Block) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewArcTan2Block returns a new ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block
func (ba *Babylon) NewArcTan2Block(name string) *ArcTan2Block {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("ArcTan2Block").New(args...)
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the ArcTan2Block object.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#getclassname
func (a *ArcTan2Block) GetClassName() string {

	retVal := a.p.Call("getClassName")
	return retVal.String()
}

/*

// Output returns the Output property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#output
func (a *ArcTan2Block) Output(output *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(output.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#output
func (a *ArcTan2Block) SetOutput(output *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(output.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// X returns the X property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#x
func (a *ArcTan2Block) X(x *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(x.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetX sets the X property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#x
func (a *ArcTan2Block) SetX(x *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(x.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// Y returns the Y property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#y
func (a *ArcTan2Block) Y(y *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(y.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

// SetY sets the Y property of class ArcTan2Block.
//
// https://doc.babylonjs.com/api/classes/babylon.arctan2block#y
func (a *ArcTan2Block) SetY(y *NodeMaterialConnectionPoint) *ArcTan2Block {
	p := ba.ctx.Get("ArcTan2Block").New(y.JSObject())
	return ArcTan2BlockFromJSObject(p, ba.ctx)
}

*/
