// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IFocusableControl represents a babylon.js IFocusableControl.
// Interface used to define a control that can receive focus
type IFocusableControl struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IFocusableControl) JSObject() js.Value { return i.p }

// IFocusableControl returns a IFocusableControl JavaScript class.
func (ba *Babylon) IFocusableControl() *IFocusableControl {
	p := ba.ctx.Get("IFocusableControl")
	return IFocusableControlFromJSObject(p, ba.ctx)
}

// IFocusableControlFromJSObject returns a wrapped IFocusableControl JavaScript class.
func IFocusableControlFromJSObject(p js.Value, ctx js.Value) *IFocusableControl {
	return &IFocusableControl{p: p, ctx: ctx}
}

// IFocusableControlArrayToJSArray returns a JavaScript Array for the wrapped array.
func IFocusableControlArrayToJSArray(array []*IFocusableControl) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// KeepsFocusWith calls the KeepsFocusWith method on the IFocusableControl object.
//
// https://doc.babylonjs.com/api/classes/babylon.ifocusablecontrol#keepsfocuswith
func (i *IFocusableControl) KeepsFocusWith() *Control {

	retVal := i.p.Call("keepsFocusWith")
	return ControlFromJSObject(retVal, i.ctx)
}

// OnBlur calls the OnBlur method on the IFocusableControl object.
//
// https://doc.babylonjs.com/api/classes/babylon.ifocusablecontrol#onblur
func (i *IFocusableControl) OnBlur() {

	i.p.Call("onBlur")
}

// OnFocus calls the OnFocus method on the IFocusableControl object.
//
// https://doc.babylonjs.com/api/classes/babylon.ifocusablecontrol#onfocus
func (i *IFocusableControl) OnFocus() {

	i.p.Call("onFocus")
}

// ProcessKeyboard calls the ProcessKeyboard method on the IFocusableControl object.
//
// https://doc.babylonjs.com/api/classes/babylon.ifocusablecontrol#processkeyboard
func (i *IFocusableControl) ProcessKeyboard(evt js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, evt)

	i.p.Call("processKeyboard", args...)
}
