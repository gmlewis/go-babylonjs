// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// HtmlElementTexture represents a babylon.js HtmlElementTexture.
// This represents the smallest workload to use an already existing element (Canvas or Video) as a texture.
// To be as efficient as possible depending on your constraints nothing aside the first upload
// is automatically managed.
// It is a cheap VideoTexture or DynamicTexture if you prefer to keep full control of the elements
// in your application.
//
// As the update is not automatic, you need to call them manually.
type HtmlElementTexture struct {
	*BaseTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (h *HtmlElementTexture) JSObject() js.Value { return h.p }

// HtmlElementTexture returns a HtmlElementTexture JavaScript class.
func (ba *Babylon) HtmlElementTexture() *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture")
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// HtmlElementTextureFromJSObject returns a wrapped HtmlElementTexture JavaScript class.
func HtmlElementTextureFromJSObject(p js.Value, ctx js.Value) *HtmlElementTexture {
	return &HtmlElementTexture{BaseTexture: BaseTextureFromJSObject(p, ctx), ctx: ctx}
}

// HtmlElementTextureArrayToJSArray returns a JavaScript Array for the wrapped array.
func HtmlElementTextureArrayToJSArray(array []*HtmlElementTexture) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewHtmlElementTexture returns a new HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#constructor
func (ba *Babylon) NewHtmlElementTexture(name string, element js.Value, options *IHtmlElementTextureOptions) *HtmlElementTexture {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, element)
	args = append(args, options.JSObject())

	p := ba.ctx.Get("HtmlElementTexture").New(args...)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// GetTextureMatrix calls the GetTextureMatrix method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#gettexturematrix
func (h *HtmlElementTexture) GetTextureMatrix() *Matrix {

	retVal := h.p.Call("getTextureMatrix")
	return MatrixFromJSObject(retVal, h.ctx)
}

// HtmlElementTextureUpdateOpts contains optional parameters for HtmlElementTexture.Update.
type HtmlElementTextureUpdateOpts struct {
	InvertY *bool
}

// Update calls the Update method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#update
func (h *HtmlElementTexture) Update(opts *HtmlElementTextureUpdateOpts) {
	if opts == nil {
		opts = &HtmlElementTextureUpdateOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.InvertY == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.InvertY)
	}

	h.p.Call("update", args...)
}

// Element returns the Element property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#element
func (h *HtmlElementTexture) Element() js.Value {
	retVal := h.p.Get("element")
	return retVal
}

// SetElement sets the Element property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#element
func (h *HtmlElementTexture) SetElement(element js.Value) *HtmlElementTexture {
	h.p.Set("element", element)
	return h
}
