// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// HtmlElementTexture represents a babylon.js HtmlElementTexture.
// This represents the smallest workload to use an already existing element (Canvas or Video) as a texture.
// To be as efficient as possible depending on your constraints nothing aside the first upload
// is automatically managed.
// It is a cheap VideoTexture or DynamicTexture if you prefer to keep full control of the elements
// in your application.
//
// As the update is not automatic, you need to call them manually.
type HtmlElementTexture struct {
	*BaseTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (h *HtmlElementTexture) JSObject() js.Value { return h.p }

// HtmlElementTexture returns a HtmlElementTexture JavaScript class.
func (ba *Babylon) HtmlElementTexture() *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture")
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// HtmlElementTextureFromJSObject returns a wrapped HtmlElementTexture JavaScript class.
func HtmlElementTextureFromJSObject(p js.Value, ctx js.Value) *HtmlElementTexture {
	return &HtmlElementTexture{BaseTexture: BaseTextureFromJSObject(p, ctx), ctx: ctx}
}

// NewHtmlElementTexture returns a new HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture
func (ba *Babylon) NewHtmlElementTexture(name string, element js.Value, options *IHtmlElementTextureOptions) *HtmlElementTexture {

	args := make([]interface{}, 0, 3+0)

	args = append(args, name)
	args = append(args, element)
	args = append(args, options.JSObject())

	p := ba.ctx.Get("HtmlElementTexture").New(args...)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// Clone calls the Clone method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#clone
func (h *HtmlElementTexture) Clone() *BaseTexture {

	args := make([]interface{}, 0, 0+0)

	retVal := h.p.Call("clone", args...)
	return BaseTextureFromJSObject(retVal, h.ctx)
}

// DelayLoad calls the DelayLoad method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#delayload
func (h *HtmlElementTexture) DelayLoad() {

	args := make([]interface{}, 0, 0+0)

	h.p.Call("delayLoad", args...)
}

// Dispose calls the Dispose method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#dispose
func (h *HtmlElementTexture) Dispose() {

	args := make([]interface{}, 0, 0+0)

	h.p.Call("dispose", args...)
}

// GetBaseSize calls the GetBaseSize method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#getbasesize
func (h *HtmlElementTexture) GetBaseSize() js.Value {

	args := make([]interface{}, 0, 0+0)

	retVal := h.p.Call("getBaseSize", args...)
	return retVal
}

// GetClassName calls the GetClassName method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#getclassname
func (h *HtmlElementTexture) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := h.p.Call("getClassName", args...)
	return retVal.String()
}

// GetInternalTexture calls the GetInternalTexture method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#getinternaltexture
func (h *HtmlElementTexture) GetInternalTexture() *InternalTexture {

	args := make([]interface{}, 0, 0+0)

	retVal := h.p.Call("getInternalTexture", args...)
	return InternalTextureFromJSObject(retVal, h.ctx)
}

// GetReflectionTextureMatrix calls the GetReflectionTextureMatrix method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#getreflectiontexturematrix
func (h *HtmlElementTexture) GetReflectionTextureMatrix() *Matrix {

	args := make([]interface{}, 0, 0+0)

	retVal := h.p.Call("getReflectionTextureMatrix", args...)
	return MatrixFromJSObject(retVal, h.ctx)
}

// GetScene calls the GetScene method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#getscene
func (h *HtmlElementTexture) GetScene() *Scene {

	args := make([]interface{}, 0, 0+0)

	retVal := h.p.Call("getScene", args...)
	return SceneFromJSObject(retVal, h.ctx)
}

// GetSize calls the GetSize method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#getsize
func (h *HtmlElementTexture) GetSize() js.Value {

	args := make([]interface{}, 0, 0+0)

	retVal := h.p.Call("getSize", args...)
	return retVal
}

// GetTextureMatrix calls the GetTextureMatrix method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#gettexturematrix
func (h *HtmlElementTexture) GetTextureMatrix() *Matrix {

	args := make([]interface{}, 0, 0+0)

	retVal := h.p.Call("getTextureMatrix", args...)
	return MatrixFromJSObject(retVal, h.ctx)
}

// IsReady calls the IsReady method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#isready
func (h *HtmlElementTexture) IsReady() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := h.p.Call("isReady", args...)
	return retVal.Bool()
}

// IsReadyOrNotBlocking calls the IsReadyOrNotBlocking method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#isreadyornotblocking
func (h *HtmlElementTexture) IsReadyOrNotBlocking() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := h.p.Call("isReadyOrNotBlocking", args...)
	return retVal.Bool()
}

// HtmlElementTextureReadPixelsOpts contains optional parameters for HtmlElementTexture.ReadPixels.
type HtmlElementTextureReadPixelsOpts struct {
	FaceIndex *float64
	Level     *float64
	Buffer    js.Value
}

// ReadPixels calls the ReadPixels method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#readpixels
func (h *HtmlElementTexture) ReadPixels(opts *HtmlElementTextureReadPixelsOpts) js.Value {
	if opts == nil {
		opts = &HtmlElementTextureReadPixelsOpts{}
	}

	args := make([]interface{}, 0, 0+3)

	if opts.FaceIndex == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FaceIndex)
	}
	if opts.Level == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Level)
	}
	if opts.Buffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Buffer)
	}

	retVal := h.p.Call("readPixels", args...)
	return retVal
}

// ReleaseInternalTexture calls the ReleaseInternalTexture method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#releaseinternaltexture
func (h *HtmlElementTexture) ReleaseInternalTexture() {

	args := make([]interface{}, 0, 0+0)

	h.p.Call("releaseInternalTexture", args...)
}

// Scale calls the Scale method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#scale
func (h *HtmlElementTexture) Scale(ratio float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, ratio)

	h.p.Call("scale", args...)
}

// Serialize calls the Serialize method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#serialize
func (h *HtmlElementTexture) Serialize() interface{} {

	args := make([]interface{}, 0, 0+0)

	retVal := h.p.Call("serialize", args...)
	return retVal
}

// ToString calls the ToString method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#tostring
func (h *HtmlElementTexture) ToString() string {

	args := make([]interface{}, 0, 0+0)

	retVal := h.p.Call("toString", args...)
	return retVal.String()
}

// HtmlElementTextureUpdateOpts contains optional parameters for HtmlElementTexture.Update.
type HtmlElementTextureUpdateOpts struct {
	InvertY *bool
}

// Update calls the Update method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#update
func (h *HtmlElementTexture) Update(opts *HtmlElementTextureUpdateOpts) {
	if opts == nil {
		opts = &HtmlElementTextureUpdateOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.InvertY == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.InvertY)
	}

	h.p.Call("update", args...)
}

// UpdateSamplingMode calls the UpdateSamplingMode method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#updatesamplingmode
func (h *HtmlElementTexture) UpdateSamplingMode(samplingMode float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, samplingMode)

	h.p.Call("updateSamplingMode", args...)
}

// WhenAllReady calls the WhenAllReady method on the HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#whenallready
func (h *HtmlElementTexture) WhenAllReady(textures *BaseTexture, callback func()) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, textures.JSObject())
	args = append(args, callback)

	h.p.Call("WhenAllReady", args...)
}

/*

// Animations returns the Animations property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#animations
func (h *HtmlElementTexture) Animations(animations *Animation) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(animations.JSObject())
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#animations
func (h *HtmlElementTexture) SetAnimations(animations *Animation) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(animations.JSObject())
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// AnisotropicFilteringLevel returns the AnisotropicFilteringLevel property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#anisotropicfilteringlevel
func (h *HtmlElementTexture) AnisotropicFilteringLevel(anisotropicFilteringLevel float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(anisotropicFilteringLevel)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetAnisotropicFilteringLevel sets the AnisotropicFilteringLevel property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#anisotropicfilteringlevel
func (h *HtmlElementTexture) SetAnisotropicFilteringLevel(anisotropicFilteringLevel float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(anisotropicFilteringLevel)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// CanRescale returns the CanRescale property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#canrescale
func (h *HtmlElementTexture) CanRescale(canRescale bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(canRescale)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetCanRescale sets the CanRescale property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#canrescale
func (h *HtmlElementTexture) SetCanRescale(canRescale bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(canRescale)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// CoordinatesIndex returns the CoordinatesIndex property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#coordinatesindex
func (h *HtmlElementTexture) CoordinatesIndex(coordinatesIndex float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(coordinatesIndex)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetCoordinatesIndex sets the CoordinatesIndex property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#coordinatesindex
func (h *HtmlElementTexture) SetCoordinatesIndex(coordinatesIndex float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(coordinatesIndex)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// CoordinatesMode returns the CoordinatesMode property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#coordinatesmode
func (h *HtmlElementTexture) CoordinatesMode(coordinatesMode float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(coordinatesMode)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetCoordinatesMode sets the CoordinatesMode property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#coordinatesmode
func (h *HtmlElementTexture) SetCoordinatesMode(coordinatesMode float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(coordinatesMode)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// DEFAULT_ANISOTROPIC_FILTERING_LEVEL returns the DEFAULT_ANISOTROPIC_FILTERING_LEVEL property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#default_anisotropic_filtering_level
func (h *HtmlElementTexture) DEFAULT_ANISOTROPIC_FILTERING_LEVEL(DEFAULT_ANISOTROPIC_FILTERING_LEVEL float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(DEFAULT_ANISOTROPIC_FILTERING_LEVEL)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetDEFAULT_ANISOTROPIC_FILTERING_LEVEL sets the DEFAULT_ANISOTROPIC_FILTERING_LEVEL property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#default_anisotropic_filtering_level
func (h *HtmlElementTexture) SetDEFAULT_ANISOTROPIC_FILTERING_LEVEL(DEFAULT_ANISOTROPIC_FILTERING_LEVEL float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(DEFAULT_ANISOTROPIC_FILTERING_LEVEL)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// DelayLoadState returns the DelayLoadState property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#delayloadstate
func (h *HtmlElementTexture) DelayLoadState(delayLoadState float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(delayLoadState)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetDelayLoadState sets the DelayLoadState property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#delayloadstate
func (h *HtmlElementTexture) SetDelayLoadState(delayLoadState float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(delayLoadState)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// Element returns the Element property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#element
func (h *HtmlElementTexture) Element(element js.Value) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(element)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetElement sets the Element property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#element
func (h *HtmlElementTexture) SetElement(element js.Value) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(element)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// GammaSpace returns the GammaSpace property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#gammaspace
func (h *HtmlElementTexture) GammaSpace(gammaSpace bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(gammaSpace)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetGammaSpace sets the GammaSpace property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#gammaspace
func (h *HtmlElementTexture) SetGammaSpace(gammaSpace bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(gammaSpace)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// GetAlphaFromRGB returns the GetAlphaFromRGB property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#getalphafromrgb
func (h *HtmlElementTexture) GetAlphaFromRGB(getAlphaFromRGB bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(getAlphaFromRGB)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetGetAlphaFromRGB sets the GetAlphaFromRGB property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#getalphafromrgb
func (h *HtmlElementTexture) SetGetAlphaFromRGB(getAlphaFromRGB bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(getAlphaFromRGB)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// HasAlpha returns the HasAlpha property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#hasalpha
func (h *HtmlElementTexture) HasAlpha(hasAlpha bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(hasAlpha)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetHasAlpha sets the HasAlpha property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#hasalpha
func (h *HtmlElementTexture) SetHasAlpha(hasAlpha bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(hasAlpha)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// InvertZ returns the InvertZ property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#invertz
func (h *HtmlElementTexture) InvertZ(invertZ bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(invertZ)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetInvertZ sets the InvertZ property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#invertz
func (h *HtmlElementTexture) SetInvertZ(invertZ bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(invertZ)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// IrradianceTexture returns the IrradianceTexture property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#irradiancetexture
func (h *HtmlElementTexture) IrradianceTexture(irradianceTexture *BaseTexture) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(irradianceTexture.JSObject())
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetIrradianceTexture sets the IrradianceTexture property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#irradiancetexture
func (h *HtmlElementTexture) SetIrradianceTexture(irradianceTexture *BaseTexture) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(irradianceTexture.JSObject())
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// Is2DArray returns the Is2DArray property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#is2darray
func (h *HtmlElementTexture) Is2DArray(is2DArray bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(is2DArray)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetIs2DArray sets the Is2DArray property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#is2darray
func (h *HtmlElementTexture) SetIs2DArray(is2DArray bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(is2DArray)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// Is3D returns the Is3D property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#is3d
func (h *HtmlElementTexture) Is3D(is3D bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(is3D)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetIs3D sets the Is3D property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#is3d
func (h *HtmlElementTexture) SetIs3D(is3D bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(is3D)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// IsBlocking returns the IsBlocking property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#isblocking
func (h *HtmlElementTexture) IsBlocking(isBlocking bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(isBlocking)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetIsBlocking sets the IsBlocking property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#isblocking
func (h *HtmlElementTexture) SetIsBlocking(isBlocking bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(isBlocking)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// IsCube returns the IsCube property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#iscube
func (h *HtmlElementTexture) IsCube(isCube bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(isCube)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetIsCube sets the IsCube property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#iscube
func (h *HtmlElementTexture) SetIsCube(isCube bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(isCube)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// IsRGBD returns the IsRGBD property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#isrgbd
func (h *HtmlElementTexture) IsRGBD(isRGBD bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(isRGBD)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetIsRGBD sets the IsRGBD property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#isrgbd
func (h *HtmlElementTexture) SetIsRGBD(isRGBD bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(isRGBD)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// IsRenderTarget returns the IsRenderTarget property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#isrendertarget
func (h *HtmlElementTexture) IsRenderTarget(isRenderTarget bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(isRenderTarget)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetIsRenderTarget sets the IsRenderTarget property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#isrendertarget
func (h *HtmlElementTexture) SetIsRenderTarget(isRenderTarget bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(isRenderTarget)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// Level returns the Level property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#level
func (h *HtmlElementTexture) Level(level float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(level)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetLevel sets the Level property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#level
func (h *HtmlElementTexture) SetLevel(level float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(level)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// LinearSpecularLOD returns the LinearSpecularLOD property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#linearspecularlod
func (h *HtmlElementTexture) LinearSpecularLOD(linearSpecularLOD bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(linearSpecularLOD)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetLinearSpecularLOD sets the LinearSpecularLOD property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#linearspecularlod
func (h *HtmlElementTexture) SetLinearSpecularLOD(linearSpecularLOD bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(linearSpecularLOD)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// LodGenerationOffset returns the LodGenerationOffset property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#lodgenerationoffset
func (h *HtmlElementTexture) LodGenerationOffset(lodGenerationOffset float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(lodGenerationOffset)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetLodGenerationOffset sets the LodGenerationOffset property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#lodgenerationoffset
func (h *HtmlElementTexture) SetLodGenerationOffset(lodGenerationOffset float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(lodGenerationOffset)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// LodGenerationScale returns the LodGenerationScale property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#lodgenerationscale
func (h *HtmlElementTexture) LodGenerationScale(lodGenerationScale float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(lodGenerationScale)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetLodGenerationScale sets the LodGenerationScale property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#lodgenerationscale
func (h *HtmlElementTexture) SetLodGenerationScale(lodGenerationScale float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(lodGenerationScale)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#metadata
func (h *HtmlElementTexture) Metadata(metadata interface{}) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(metadata)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#metadata
func (h *HtmlElementTexture) SetMetadata(metadata interface{}) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(metadata)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#name
func (h *HtmlElementTexture) Name(name string) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(name)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#name
func (h *HtmlElementTexture) SetName(name string) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(name)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// NoMipmap returns the NoMipmap property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#nomipmap
func (h *HtmlElementTexture) NoMipmap(noMipmap bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(noMipmap)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetNoMipmap sets the NoMipmap property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#nomipmap
func (h *HtmlElementTexture) SetNoMipmap(noMipmap bool) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(noMipmap)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#ondispose
func (h *HtmlElementTexture) OnDispose(onDispose func()) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(onDispose)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#ondispose
func (h *HtmlElementTexture) SetOnDispose(onDispose func()) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(onDispose)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#ondisposeobservable
func (h *HtmlElementTexture) OnDisposeObservable(onDisposeObservable *Observable) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(onDisposeObservable.JSObject())
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#ondisposeobservable
func (h *HtmlElementTexture) SetOnDisposeObservable(onDisposeObservable *Observable) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(onDisposeObservable.JSObject())
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#reserveddatastore
func (h *HtmlElementTexture) ReservedDataStore(reservedDataStore interface{}) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(reservedDataStore)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#reserveddatastore
func (h *HtmlElementTexture) SetReservedDataStore(reservedDataStore interface{}) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(reservedDataStore)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SphericalPolynomial returns the SphericalPolynomial property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#sphericalpolynomial
func (h *HtmlElementTexture) SphericalPolynomial(sphericalPolynomial *SphericalPolynomial) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(sphericalPolynomial.JSObject())
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetSphericalPolynomial sets the SphericalPolynomial property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#sphericalpolynomial
func (h *HtmlElementTexture) SetSphericalPolynomial(sphericalPolynomial *SphericalPolynomial) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(sphericalPolynomial.JSObject())
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// TextureFormat returns the TextureFormat property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#textureformat
func (h *HtmlElementTexture) TextureFormat(textureFormat float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(textureFormat)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetTextureFormat sets the TextureFormat property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#textureformat
func (h *HtmlElementTexture) SetTextureFormat(textureFormat float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(textureFormat)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// TextureType returns the TextureType property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#texturetype
func (h *HtmlElementTexture) TextureType(textureType float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(textureType)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetTextureType sets the TextureType property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#texturetype
func (h *HtmlElementTexture) SetTextureType(textureType float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(textureType)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// Uid returns the Uid property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#uid
func (h *HtmlElementTexture) Uid(uid string) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(uid)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetUid sets the Uid property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#uid
func (h *HtmlElementTexture) SetUid(uid string) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(uid)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#uniqueid
func (h *HtmlElementTexture) UniqueId(uniqueId float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(uniqueId)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#uniqueid
func (h *HtmlElementTexture) SetUniqueId(uniqueId float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(uniqueId)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// WrapR returns the WrapR property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#wrapr
func (h *HtmlElementTexture) WrapR(wrapR float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(wrapR)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetWrapR sets the WrapR property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#wrapr
func (h *HtmlElementTexture) SetWrapR(wrapR float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(wrapR)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// WrapU returns the WrapU property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#wrapu
func (h *HtmlElementTexture) WrapU(wrapU float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(wrapU)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetWrapU sets the WrapU property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#wrapu
func (h *HtmlElementTexture) SetWrapU(wrapU float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(wrapU)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// WrapV returns the WrapV property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#wrapv
func (h *HtmlElementTexture) WrapV(wrapV float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(wrapV)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

// SetWrapV sets the WrapV property of class HtmlElementTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture#wrapv
func (h *HtmlElementTexture) SetWrapV(wrapV float64) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(wrapV)
	return HtmlElementTextureFromJSObject(p, ba.ctx)
}

*/
