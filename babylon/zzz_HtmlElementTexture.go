// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// HtmlElementTexture represents a babylon.js HtmlElementTexture.
// This represents the smallest workload to use an already existing element (Canvas or Video) as a texture.
// To be as efficient as possible depending on your constraints nothing aside the first upload
// is automatically managed.
// It is a cheap VideoTexture or DynamicTexture if you prefer to keep full control of the elements
// in your application.
//
// As the update is not automatic, you need to call them manually.
type HtmlElementTexture struct{ *BaseTexture }

// JSObject returns the underlying js.Value.
func (h *HtmlElementTexture) JSObject() js.Value { return h.p }

// HtmlElementTexture returns a HtmlElementTexture JavaScript class.
func (ba *Babylon) HtmlElementTexture() *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture")
	return HtmlElementTextureFromJSObject(p)
}

// HtmlElementTextureFromJSObject returns a wrapped HtmlElementTexture JavaScript class.
func HtmlElementTextureFromJSObject(p js.Value) *HtmlElementTexture {
	return &HtmlElementTexture{BaseTextureFromJSObject(p)}
}

// NewHtmlElementTexture returns a new HtmlElementTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.htmlelementtexture
func (ba *Babylon) NewHtmlElementTexture(name string, element js.Value, options js.Value) *HtmlElementTexture {
	p := ba.ctx.Get("HtmlElementTexture").New(name, element, options)
	return HtmlElementTextureFromJSObject(p)
}

// TODO: methods
