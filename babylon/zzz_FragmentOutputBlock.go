// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FragmentOutputBlock represents a babylon.js FragmentOutputBlock.
// Block used to output the final color
type FragmentOutputBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FragmentOutputBlock) JSObject() js.Value { return f.p }

// FragmentOutputBlock returns a FragmentOutputBlock JavaScript class.
func (ba *Babylon) FragmentOutputBlock() *FragmentOutputBlock {
	p := ba.ctx.Get("FragmentOutputBlock")
	return FragmentOutputBlockFromJSObject(p, ba.ctx)
}

// FragmentOutputBlockFromJSObject returns a wrapped FragmentOutputBlock JavaScript class.
func FragmentOutputBlockFromJSObject(p js.Value, ctx js.Value) *FragmentOutputBlock {
	return &FragmentOutputBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// FragmentOutputBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func FragmentOutputBlockArrayToJSArray(array []*FragmentOutputBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewFragmentOutputBlock returns a new FragmentOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fragmentoutputblock
func (ba *Babylon) NewFragmentOutputBlock(name string) *FragmentOutputBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("FragmentOutputBlock").New(args...)
	return FragmentOutputBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the FragmentOutputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.fragmentoutputblock#getclassname
func (f *FragmentOutputBlock) GetClassName() string {

	retVal := f.p.Call("getClassName")
	return retVal.String()
}

/*

// A returns the A property of class FragmentOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fragmentoutputblock#a
func (f *FragmentOutputBlock) A(a *NodeMaterialConnectionPoint) *FragmentOutputBlock {
	p := ba.ctx.Get("FragmentOutputBlock").New(a.JSObject())
	return FragmentOutputBlockFromJSObject(p, ba.ctx)
}

// SetA sets the A property of class FragmentOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fragmentoutputblock#a
func (f *FragmentOutputBlock) SetA(a *NodeMaterialConnectionPoint) *FragmentOutputBlock {
	p := ba.ctx.Get("FragmentOutputBlock").New(a.JSObject())
	return FragmentOutputBlockFromJSObject(p, ba.ctx)
}

// Rgb returns the Rgb property of class FragmentOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fragmentoutputblock#rgb
func (f *FragmentOutputBlock) Rgb(rgb *NodeMaterialConnectionPoint) *FragmentOutputBlock {
	p := ba.ctx.Get("FragmentOutputBlock").New(rgb.JSObject())
	return FragmentOutputBlockFromJSObject(p, ba.ctx)
}

// SetRgb sets the Rgb property of class FragmentOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fragmentoutputblock#rgb
func (f *FragmentOutputBlock) SetRgb(rgb *NodeMaterialConnectionPoint) *FragmentOutputBlock {
	p := ba.ctx.Get("FragmentOutputBlock").New(rgb.JSObject())
	return FragmentOutputBlockFromJSObject(p, ba.ctx)
}

// Rgba returns the Rgba property of class FragmentOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fragmentoutputblock#rgba
func (f *FragmentOutputBlock) Rgba(rgba *NodeMaterialConnectionPoint) *FragmentOutputBlock {
	p := ba.ctx.Get("FragmentOutputBlock").New(rgba.JSObject())
	return FragmentOutputBlockFromJSObject(p, ba.ctx)
}

// SetRgba sets the Rgba property of class FragmentOutputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.fragmentoutputblock#rgba
func (f *FragmentOutputBlock) SetRgba(rgba *NodeMaterialConnectionPoint) *FragmentOutputBlock {
	p := ba.ctx.Get("FragmentOutputBlock").New(rgba.JSObject())
	return FragmentOutputBlockFromJSObject(p, ba.ctx)
}

*/
