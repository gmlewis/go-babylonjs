// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ArcRotateCameraInputsManager represents a babylon.js ArcRotateCameraInputsManager.
// Default Inputs manager for the ArcRotateCamera.
// It groups all the default supported inputs for ease of use.
// Interface representing an arc rotate camera inputs manager
//
// See: http://doc.babylonjs.com/how_to/customizing_camera_inputs
type ArcRotateCameraInputsManager struct {
	*CameraInputsManager
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *ArcRotateCameraInputsManager) JSObject() js.Value { return a.p }

// ArcRotateCameraInputsManager returns a ArcRotateCameraInputsManager JavaScript class.
func (ba *Babylon) ArcRotateCameraInputsManager() *ArcRotateCameraInputsManager {
	p := ba.ctx.Get("ArcRotateCameraInputsManager")
	return ArcRotateCameraInputsManagerFromJSObject(p, ba.ctx)
}

// ArcRotateCameraInputsManagerFromJSObject returns a wrapped ArcRotateCameraInputsManager JavaScript class.
func ArcRotateCameraInputsManagerFromJSObject(p js.Value, ctx js.Value) *ArcRotateCameraInputsManager {
	return &ArcRotateCameraInputsManager{CameraInputsManager: CameraInputsManagerFromJSObject(p, ctx), ctx: ctx}
}

// ArcRotateCameraInputsManagerArrayToJSArray returns a JavaScript Array for the wrapped array.
func ArcRotateCameraInputsManagerArrayToJSArray(array []*ArcRotateCameraInputsManager) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewArcRotateCameraInputsManager returns a new ArcRotateCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerainputsmanager
func (ba *Babylon) NewArcRotateCameraInputsManager(camera *ArcRotateCamera) *ArcRotateCameraInputsManager {

	args := make([]interface{}, 0, 1+0)

	args = append(args, camera.JSObject())

	p := ba.ctx.Get("ArcRotateCameraInputsManager").New(args...)
	return ArcRotateCameraInputsManagerFromJSObject(p, ba.ctx)
}

// AddGamepad calls the AddGamepad method on the ArcRotateCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerainputsmanager#addgamepad
func (a *ArcRotateCameraInputsManager) AddGamepad() *ArcRotateCameraInputsManager {

	retVal := a.p.Call("addGamepad")
	return ArcRotateCameraInputsManagerFromJSObject(retVal, a.ctx)
}

// AddKeyboard calls the AddKeyboard method on the ArcRotateCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerainputsmanager#addkeyboard
func (a *ArcRotateCameraInputsManager) AddKeyboard() *ArcRotateCameraInputsManager {

	retVal := a.p.Call("addKeyboard")
	return ArcRotateCameraInputsManagerFromJSObject(retVal, a.ctx)
}

// AddMouseWheel calls the AddMouseWheel method on the ArcRotateCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerainputsmanager#addmousewheel
func (a *ArcRotateCameraInputsManager) AddMouseWheel() *ArcRotateCameraInputsManager {

	retVal := a.p.Call("addMouseWheel")
	return ArcRotateCameraInputsManagerFromJSObject(retVal, a.ctx)
}

// AddPointers calls the AddPointers method on the ArcRotateCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerainputsmanager#addpointers
func (a *ArcRotateCameraInputsManager) AddPointers() *ArcRotateCameraInputsManager {

	retVal := a.p.Call("addPointers")
	return ArcRotateCameraInputsManagerFromJSObject(retVal, a.ctx)
}

// AddVRDeviceOrientation calls the AddVRDeviceOrientation method on the ArcRotateCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.arcrotatecamerainputsmanager#addvrdeviceorientation
func (a *ArcRotateCameraInputsManager) AddVRDeviceOrientation() *ArcRotateCameraInputsManager {

	retVal := a.p.Call("addVRDeviceOrientation")
	return ArcRotateCameraInputsManagerFromJSObject(retVal, a.ctx)
}
