// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Axis represents a babylon.js Axis.
// Defines the 3 main axes
type Axis struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *Axis) JSObject() js.Value { return a.p }

// Axis returns a Axis JavaScript class.
func (ba *Babylon) Axis() *Axis {
	p := ba.ctx.Get("Axis")
	return AxisFromJSObject(p, ba.ctx)
}

// AxisFromJSObject returns a wrapped Axis JavaScript class.
func AxisFromJSObject(p js.Value, ctx js.Value) *Axis {
	return &Axis{p: p, ctx: ctx}
}

// AxisArrayToJSArray returns a JavaScript Array for the wrapped array.
func AxisArrayToJSArray(array []*Axis) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// X returns the X property of class Axis.
//
// https://doc.babylonjs.com/api/classes/babylon.axis#x
func (a *Axis) X() *Vector3 {
	retVal := a.p.Get("X")
	return Vector3FromJSObject(retVal, a.ctx)
}

// SetX sets the X property of class Axis.
//
// https://doc.babylonjs.com/api/classes/babylon.axis#x
func (a *Axis) SetX(X *Vector3) *Axis {
	a.p.Set("X", X.JSObject())
	return a
}

// Y returns the Y property of class Axis.
//
// https://doc.babylonjs.com/api/classes/babylon.axis#y
func (a *Axis) Y() *Vector3 {
	retVal := a.p.Get("Y")
	return Vector3FromJSObject(retVal, a.ctx)
}

// SetY sets the Y property of class Axis.
//
// https://doc.babylonjs.com/api/classes/babylon.axis#y
func (a *Axis) SetY(Y *Vector3) *Axis {
	a.p.Set("Y", Y.JSObject())
	return a
}

// Z returns the Z property of class Axis.
//
// https://doc.babylonjs.com/api/classes/babylon.axis#z
func (a *Axis) Z() *Vector3 {
	retVal := a.p.Get("Z")
	return Vector3FromJSObject(retVal, a.ctx)
}

// SetZ sets the Z property of class Axis.
//
// https://doc.babylonjs.com/api/classes/babylon.axis#z
func (a *Axis) SetZ(Z *Vector3) *Axis {
	a.p.Set("Z", Z.JSObject())
	return a
}
