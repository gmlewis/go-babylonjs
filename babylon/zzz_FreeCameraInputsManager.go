// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FreeCameraInputsManager represents a babylon.js FreeCameraInputsManager.
// Default Inputs manager for the FreeCamera.
// It groups all the default supported inputs for ease of use.
// Interface representing a free camera inputs manager
//
// See: http://doc.babylonjs.com/how_to/customizing_camera_inputs
type FreeCameraInputsManager struct {
	*CameraInputsManager
	*FreeCamera
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FreeCameraInputsManager) JSObject() js.Value { return f.p }

// FreeCameraInputsManager returns a FreeCameraInputsManager JavaScript class.
func (ba *Babylon) FreeCameraInputsManager() *FreeCameraInputsManager {
	p := ba.ctx.Get("FreeCameraInputsManager")
	return FreeCameraInputsManagerFromJSObject(p, ba.ctx)
}

// FreeCameraInputsManagerFromJSObject returns a wrapped FreeCameraInputsManager JavaScript class.
func FreeCameraInputsManagerFromJSObject(p js.Value, ctx js.Value) *FreeCameraInputsManager {
	return &FreeCameraInputsManager{CameraInputsManager: CameraInputsManagerFromJSObject(p, ctx), FreeCamera: FreeCameraFromJSObject(p, ctx), ctx: ctx}
}

// NewFreeCameraInputsManager returns a new FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager
func (ba *Babylon) NewFreeCameraInputsManager(camera *FreeCamera) *FreeCameraInputsManager {

	args := make([]interface{}, 0, 1+0)

	args = append(args, camera.JSObject())

	p := ba.ctx.Get("FreeCameraInputsManager").New(args...)
	return FreeCameraInputsManagerFromJSObject(p, ba.ctx)
}

// Add calls the Add method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#add
func (f *FreeCameraInputsManager) Add(input js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, input)

	f.p.Call("add", args...)
}

// AddDeviceOrientation calls the AddDeviceOrientation method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#adddeviceorientation
func (f *FreeCameraInputsManager) AddDeviceOrientation() *FreeCameraInputsManager {

	args := make([]interface{}, 0, 0+0)

	retVal := f.p.Call("addDeviceOrientation", args...)
	return FreeCameraInputsManagerFromJSObject(retVal, f.ctx)
}

// AddGamepad calls the AddGamepad method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#addgamepad
func (f *FreeCameraInputsManager) AddGamepad() *FreeCameraInputsManager {

	args := make([]interface{}, 0, 0+0)

	retVal := f.p.Call("addGamepad", args...)
	return FreeCameraInputsManagerFromJSObject(retVal, f.ctx)
}

// AddKeyboard calls the AddKeyboard method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#addkeyboard
func (f *FreeCameraInputsManager) AddKeyboard() *FreeCameraInputsManager {

	args := make([]interface{}, 0, 0+0)

	retVal := f.p.Call("addKeyboard", args...)
	return FreeCameraInputsManagerFromJSObject(retVal, f.ctx)
}

// FreeCameraInputsManagerAddMouseOpts contains optional parameters for FreeCameraInputsManager.AddMouse.
type FreeCameraInputsManagerAddMouseOpts struct {
	TouchEnabled *bool
}

// AddMouse calls the AddMouse method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#addmouse
func (f *FreeCameraInputsManager) AddMouse(opts *FreeCameraInputsManagerAddMouseOpts) *FreeCameraInputsManager {
	if opts == nil {
		opts = &FreeCameraInputsManagerAddMouseOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.TouchEnabled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TouchEnabled)
	}

	retVal := f.p.Call("addMouse", args...)
	return FreeCameraInputsManagerFromJSObject(retVal, f.ctx)
}

// AddTouch calls the AddTouch method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#addtouch
func (f *FreeCameraInputsManager) AddTouch() *FreeCameraInputsManager {

	args := make([]interface{}, 0, 0+0)

	retVal := f.p.Call("addTouch", args...)
	return FreeCameraInputsManagerFromJSObject(retVal, f.ctx)
}

// AddVirtualJoystick calls the AddVirtualJoystick method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#addvirtualjoystick
func (f *FreeCameraInputsManager) AddVirtualJoystick() *FreeCameraInputsManager {

	args := make([]interface{}, 0, 0+0)

	retVal := f.p.Call("addVirtualJoystick", args...)
	return FreeCameraInputsManagerFromJSObject(retVal, f.ctx)
}

// FreeCameraInputsManagerAttachElementOpts contains optional parameters for FreeCameraInputsManager.AttachElement.
type FreeCameraInputsManagerAttachElementOpts struct {
	NoPreventDefault *bool
}

// AttachElement calls the AttachElement method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#attachelement
func (f *FreeCameraInputsManager) AttachElement(element js.Value, opts *FreeCameraInputsManagerAttachElementOpts) {
	if opts == nil {
		opts = &FreeCameraInputsManagerAttachElementOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, element)

	if opts.NoPreventDefault == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoPreventDefault)
	}

	f.p.Call("attachElement", args...)
}

// AttachInput calls the AttachInput method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#attachinput
func (f *FreeCameraInputsManager) AttachInput(input js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, input)

	f.p.Call("attachInput", args...)
}

// Clear calls the Clear method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#clear
func (f *FreeCameraInputsManager) Clear() {

	args := make([]interface{}, 0, 0+0)

	f.p.Call("clear", args...)
}

// FreeCameraInputsManagerDetachElementOpts contains optional parameters for FreeCameraInputsManager.DetachElement.
type FreeCameraInputsManagerDetachElementOpts struct {
	Disconnect *bool
}

// DetachElement calls the DetachElement method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#detachelement
func (f *FreeCameraInputsManager) DetachElement(element js.Value, opts *FreeCameraInputsManagerDetachElementOpts) {
	if opts == nil {
		opts = &FreeCameraInputsManagerDetachElementOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, element)

	if opts.Disconnect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Disconnect)
	}

	f.p.Call("detachElement", args...)
}

// Parse calls the Parse method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#parse
func (f *FreeCameraInputsManager) Parse(parsedCamera interface{}) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, parsedCamera)

	f.p.Call("parse", args...)
}

// RebuildInputCheck calls the RebuildInputCheck method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#rebuildinputcheck
func (f *FreeCameraInputsManager) RebuildInputCheck() {

	args := make([]interface{}, 0, 0+0)

	f.p.Call("rebuildInputCheck", args...)
}

// Remove calls the Remove method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#remove
func (f *FreeCameraInputsManager) Remove(inputToRemove js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, inputToRemove)

	f.p.Call("remove", args...)
}

// RemoveByType calls the RemoveByType method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#removebytype
func (f *FreeCameraInputsManager) RemoveByType(inputType string) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, inputType)

	f.p.Call("removeByType", args...)
}

// RemoveMouse calls the RemoveMouse method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#removemouse
func (f *FreeCameraInputsManager) RemoveMouse() *FreeCameraInputsManager {

	args := make([]interface{}, 0, 0+0)

	retVal := f.p.Call("removeMouse", args...)
	return FreeCameraInputsManagerFromJSObject(retVal, f.ctx)
}

// Serialize calls the Serialize method on the FreeCameraInputsManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#serialize
func (f *FreeCameraInputsManager) Serialize(serializedCamera interface{}) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, serializedCamera)

	f.p.Call("serialize", args...)
}

/*

// Attached returns the Attached property of class FreeCameraInputsManager.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#attached
func (f *FreeCameraInputsManager) Attached(attached *CameraInputsMap) *FreeCameraInputsManager {
	p := ba.ctx.Get("FreeCameraInputsManager").New(attached.JSObject())
	return FreeCameraInputsManagerFromJSObject(p, ba.ctx)
}

// SetAttached sets the Attached property of class FreeCameraInputsManager.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#attached
func (f *FreeCameraInputsManager) SetAttached(attached *CameraInputsMap) *FreeCameraInputsManager {
	p := ba.ctx.Get("FreeCameraInputsManager").New(attached.JSObject())
	return FreeCameraInputsManagerFromJSObject(p, ba.ctx)
}

// AttachedElement returns the AttachedElement property of class FreeCameraInputsManager.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#attachedelement
func (f *FreeCameraInputsManager) AttachedElement(attachedElement js.Value) *FreeCameraInputsManager {
	p := ba.ctx.Get("FreeCameraInputsManager").New(attachedElement)
	return FreeCameraInputsManagerFromJSObject(p, ba.ctx)
}

// SetAttachedElement sets the AttachedElement property of class FreeCameraInputsManager.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#attachedelement
func (f *FreeCameraInputsManager) SetAttachedElement(attachedElement js.Value) *FreeCameraInputsManager {
	p := ba.ctx.Get("FreeCameraInputsManager").New(attachedElement)
	return FreeCameraInputsManagerFromJSObject(p, ba.ctx)
}

// Camera returns the Camera property of class FreeCameraInputsManager.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#camera
func (f *FreeCameraInputsManager) Camera(camera *FreeCamera) *FreeCameraInputsManager {
	p := ba.ctx.Get("FreeCameraInputsManager").New(camera.JSObject())
	return FreeCameraInputsManagerFromJSObject(p, ba.ctx)
}

// SetCamera sets the Camera property of class FreeCameraInputsManager.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#camera
func (f *FreeCameraInputsManager) SetCamera(camera *FreeCamera) *FreeCameraInputsManager {
	p := ba.ctx.Get("FreeCameraInputsManager").New(camera.JSObject())
	return FreeCameraInputsManagerFromJSObject(p, ba.ctx)
}

// CheckInputs returns the CheckInputs property of class FreeCameraInputsManager.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#checkinputs
func (f *FreeCameraInputsManager) CheckInputs(checkInputs func()) *FreeCameraInputsManager {
	p := ba.ctx.Get("FreeCameraInputsManager").New(checkInputs)
	return FreeCameraInputsManagerFromJSObject(p, ba.ctx)
}

// SetCheckInputs sets the CheckInputs property of class FreeCameraInputsManager.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#checkinputs
func (f *FreeCameraInputsManager) SetCheckInputs(checkInputs func()) *FreeCameraInputsManager {
	p := ba.ctx.Get("FreeCameraInputsManager").New(checkInputs)
	return FreeCameraInputsManagerFromJSObject(p, ba.ctx)
}

// NoPreventDefault returns the NoPreventDefault property of class FreeCameraInputsManager.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#nopreventdefault
func (f *FreeCameraInputsManager) NoPreventDefault(noPreventDefault bool) *FreeCameraInputsManager {
	p := ba.ctx.Get("FreeCameraInputsManager").New(noPreventDefault)
	return FreeCameraInputsManagerFromJSObject(p, ba.ctx)
}

// SetNoPreventDefault sets the NoPreventDefault property of class FreeCameraInputsManager.
//
// https://doc.babylonjs.com/api/classes/babylon.freecamerainputsmanager#nopreventdefault
func (f *FreeCameraInputsManager) SetNoPreventDefault(noPreventDefault bool) *FreeCameraInputsManager {
	p := ba.ctx.Get("FreeCameraInputsManager").New(noPreventDefault)
	return FreeCameraInputsManagerFromJSObject(p, ba.ctx)
}

*/
