// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// GrassProceduralTexture represents a babylon.js GrassProceduralTexture.
//
type GrassProceduralTexture struct{ *ProceduralTexture }

// JSObject returns the underlying js.Value.
func (g *GrassProceduralTexture) JSObject() js.Value { return g.p }

// GrassProceduralTexture returns a GrassProceduralTexture JavaScript class.
func (ba *Babylon) GrassProceduralTexture() *GrassProceduralTexture {
	p := ba.ctx.Get("GrassProceduralTexture")
	return GrassProceduralTextureFromJSObject(p)
}

// GrassProceduralTextureFromJSObject returns a wrapped GrassProceduralTexture JavaScript class.
func GrassProceduralTextureFromJSObject(p js.Value) *GrassProceduralTexture {
	return &GrassProceduralTexture{ProceduralTextureFromJSObject(p)}
}

// NewGrassProceduralTextureOpts contains optional parameters for NewGrassProceduralTexture.
type NewGrassProceduralTextureOpts struct {
	FallbackTexture *Texture

	GenerateMipMaps *JSBool
}

// NewGrassProceduralTexture returns a new GrassProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.grassproceduraltexture
func (ba *Babylon) NewGrassProceduralTexture(name string, size float64, scene *Scene, opts *NewGrassProceduralTextureOpts) *GrassProceduralTexture {
	if opts == nil {
		opts = &NewGrassProceduralTextureOpts{}
	}

	p := ba.ctx.Get("GrassProceduralTexture").New(name, size, scene.JSObject(), opts.FallbackTexture.JSObject(), opts.GenerateMipMaps.JSObject())
	return GrassProceduralTextureFromJSObject(p)
}

// TODO: methods
