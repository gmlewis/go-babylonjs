// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Node represents a babylon.js Node.
// Node is the basic class for all scene objects (Mesh, Light, Camera.)
type Node struct{ p js.Value }

// JSObject returns the underlying js.Value.
func (n *Node) JSObject() js.Value { return n.p }

// Node returns a Node JavaScript class.
func (b *Babylon) Node() *Node {
	p := b.ctx.Get("Node")
	return NodeFromJSObject(p)
}

// NodeFromJSObject returns a wrapped Node JavaScript class.
func NodeFromJSObject(p js.Value) *Node {
	return &Node{p: p}
}

// NewNodeOpts contains optional parameters for NewNode.
type NewNodeOpts struct {
	Scene *Scene
}

// NewNode returns a new Node object.
//
// https://doc.babylonjs.com/api/classes/babylon.node
func (b *Babylon) NewNode(name string, opts *NewNodeOpts) *Node {
	if opts == nil {
		opts = &NewNodeOpts{}
	}

	p := b.ctx.Get("Node").New(name, opts.Scene.JSObject())
	return NodeFromJSObject(p)
}

// TODO: methods
