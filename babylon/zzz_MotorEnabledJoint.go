// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MotorEnabledJoint represents a babylon.js MotorEnabledJoint.
// Represents a Motor-Enabled Joint
//
// See: https://doc.babylonjs.com/how_to/using_the_physics_engine
type MotorEnabledJoint struct {
	*PhysicsJoint
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MotorEnabledJoint) JSObject() js.Value { return m.p }

// MotorEnabledJoint returns a MotorEnabledJoint JavaScript class.
func (ba *Babylon) MotorEnabledJoint() *MotorEnabledJoint {
	p := ba.ctx.Get("MotorEnabledJoint")
	return MotorEnabledJointFromJSObject(p, ba.ctx)
}

// MotorEnabledJointFromJSObject returns a wrapped MotorEnabledJoint JavaScript class.
func MotorEnabledJointFromJSObject(p js.Value, ctx js.Value) *MotorEnabledJoint {
	return &MotorEnabledJoint{PhysicsJoint: PhysicsJointFromJSObject(p, ctx), ctx: ctx}
}

// MotorEnabledJointArrayToJSArray returns a JavaScript Array for the wrapped array.
func MotorEnabledJointArrayToJSArray(array []*MotorEnabledJoint) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewMotorEnabledJoint returns a new MotorEnabledJoint object.
//
// https://doc.babylonjs.com/api/classes/babylon.motorenabledjoint#constructor
func (ba *Babylon) NewMotorEnabledJoint(jsType float64, jointData js.Value) *MotorEnabledJoint {

	args := make([]interface{}, 0, 2+0)

	args = append(args, jsType)
	args = append(args, jointData)

	p := ba.ctx.Get("MotorEnabledJoint").New(args...)
	return MotorEnabledJointFromJSObject(p, ba.ctx)
}

// MotorEnabledJointSetLimitOpts contains optional parameters for MotorEnabledJoint.SetLimit.
type MotorEnabledJointSetLimitOpts struct {
	LowerLimit *float64
}

// SetLimit calls the SetLimit method on the MotorEnabledJoint object.
//
// https://doc.babylonjs.com/api/classes/babylon.motorenabledjoint#setlimit
func (m *MotorEnabledJoint) SetLimit(upperLimit float64, opts *MotorEnabledJointSetLimitOpts) {
	if opts == nil {
		opts = &MotorEnabledJointSetLimitOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, upperLimit)

	if opts.LowerLimit == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.LowerLimit)
	}

	m.p.Call("setLimit", args...)
}

// MotorEnabledJointSetMotorOpts contains optional parameters for MotorEnabledJoint.SetMotor.
type MotorEnabledJointSetMotorOpts struct {
	Force    *float64
	MaxForce *float64
}

// SetMotor calls the SetMotor method on the MotorEnabledJoint object.
//
// https://doc.babylonjs.com/api/classes/babylon.motorenabledjoint#setmotor
func (m *MotorEnabledJoint) SetMotor(opts *MotorEnabledJointSetMotorOpts) {
	if opts == nil {
		opts = &MotorEnabledJointSetMotorOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Force == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Force)
	}
	if opts.MaxForce == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.MaxForce)
	}

	m.p.Call("setMotor", args...)
}
