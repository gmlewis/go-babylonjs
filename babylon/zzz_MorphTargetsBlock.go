// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MorphTargetsBlock represents a babylon.js MorphTargetsBlock.
// Block used to add morph targets support to vertex shader
type MorphTargetsBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MorphTargetsBlock) JSObject() js.Value { return m.p }

// MorphTargetsBlock returns a MorphTargetsBlock JavaScript class.
func (ba *Babylon) MorphTargetsBlock() *MorphTargetsBlock {
	p := ba.ctx.Get("MorphTargetsBlock")
	return MorphTargetsBlockFromJSObject(p, ba.ctx)
}

// MorphTargetsBlockFromJSObject returns a wrapped MorphTargetsBlock JavaScript class.
func MorphTargetsBlockFromJSObject(p js.Value, ctx js.Value) *MorphTargetsBlock {
	return &MorphTargetsBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// MorphTargetsBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func MorphTargetsBlockArrayToJSArray(array []*MorphTargetsBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewMorphTargetsBlock returns a new MorphTargetsBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock
func (ba *Babylon) NewMorphTargetsBlock(name string) *MorphTargetsBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("MorphTargetsBlock").New(args...)
	return MorphTargetsBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the MorphTargetsBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#autoconfigure
func (m *MorphTargetsBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	m.p.Call("autoConfigure", args...)
}

// MorphTargetsBlockBindOpts contains optional parameters for MorphTargetsBlock.Bind.
type MorphTargetsBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the MorphTargetsBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#bind
func (m *MorphTargetsBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *MorphTargetsBlockBindOpts) {
	if opts == nil {
		opts = &MorphTargetsBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	m.p.Call("bind", args...)
}

// GetClassName calls the GetClassName method on the MorphTargetsBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#getclassname
func (m *MorphTargetsBlock) GetClassName() string {

	retVal := m.p.Call("getClassName")
	return retVal.String()
}

// Initialize calls the Initialize method on the MorphTargetsBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#initialize
func (m *MorphTargetsBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	m.p.Call("initialize", args...)
}

// PrepareDefines calls the PrepareDefines method on the MorphTargetsBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#preparedefines
func (m *MorphTargetsBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	m.p.Call("prepareDefines", args...)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the MorphTargetsBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#replacerepeatablecontent
func (m *MorphTargetsBlock) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	m.p.Call("replaceRepeatableContent", args...)
}

// Normal returns the Normal property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#normal
func (m *MorphTargetsBlock) Normal() *NodeMaterialConnectionPoint {
	retVal := m.p.Get("normal")
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// SetNormal sets the Normal property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#normal
func (m *MorphTargetsBlock) SetNormal(normal *NodeMaterialConnectionPoint) *MorphTargetsBlock {
	m.p.Set("normal", normal.JSObject())
	return m
}

// NormalOutput returns the NormalOutput property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#normaloutput
func (m *MorphTargetsBlock) NormalOutput() *NodeMaterialConnectionPoint {
	retVal := m.p.Get("normalOutput")
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// SetNormalOutput sets the NormalOutput property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#normaloutput
func (m *MorphTargetsBlock) SetNormalOutput(normalOutput *NodeMaterialConnectionPoint) *MorphTargetsBlock {
	m.p.Set("normalOutput", normalOutput.JSObject())
	return m
}

// Position returns the Position property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#position
func (m *MorphTargetsBlock) Position() *NodeMaterialConnectionPoint {
	retVal := m.p.Get("position")
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// SetPosition sets the Position property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#position
func (m *MorphTargetsBlock) SetPosition(position *NodeMaterialConnectionPoint) *MorphTargetsBlock {
	m.p.Set("position", position.JSObject())
	return m
}

// PositionOutput returns the PositionOutput property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#positionoutput
func (m *MorphTargetsBlock) PositionOutput() *NodeMaterialConnectionPoint {
	retVal := m.p.Get("positionOutput")
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// SetPositionOutput sets the PositionOutput property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#positionoutput
func (m *MorphTargetsBlock) SetPositionOutput(positionOutput *NodeMaterialConnectionPoint) *MorphTargetsBlock {
	m.p.Set("positionOutput", positionOutput.JSObject())
	return m
}

// Tangent returns the Tangent property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#tangent
func (m *MorphTargetsBlock) Tangent() *NodeMaterialConnectionPoint {
	retVal := m.p.Get("tangent")
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// SetTangent sets the Tangent property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#tangent
func (m *MorphTargetsBlock) SetTangent(tangent *NodeMaterialConnectionPoint) *MorphTargetsBlock {
	m.p.Set("tangent", tangent.JSObject())
	return m
}

// TangentOutput returns the TangentOutput property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#tangentoutput
func (m *MorphTargetsBlock) TangentOutput() *NodeMaterialConnectionPoint {
	retVal := m.p.Get("tangentOutput")
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// SetTangentOutput sets the TangentOutput property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#tangentoutput
func (m *MorphTargetsBlock) SetTangentOutput(tangentOutput *NodeMaterialConnectionPoint) *MorphTargetsBlock {
	m.p.Set("tangentOutput", tangentOutput.JSObject())
	return m
}

// Uv returns the Uv property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#uv
func (m *MorphTargetsBlock) Uv() *NodeMaterialConnectionPoint {
	retVal := m.p.Get("uv")
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// SetUv sets the Uv property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#uv
func (m *MorphTargetsBlock) SetUv(uv *NodeMaterialConnectionPoint) *MorphTargetsBlock {
	m.p.Set("uv", uv.JSObject())
	return m
}

// UvOutput returns the UvOutput property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#uvoutput
func (m *MorphTargetsBlock) UvOutput() *NodeMaterialConnectionPoint {
	retVal := m.p.Get("uvOutput")
	return NodeMaterialConnectionPointFromJSObject(retVal, m.ctx)
}

// SetUvOutput sets the UvOutput property of class MorphTargetsBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.morphtargetsblock#uvoutput
func (m *MorphTargetsBlock) SetUvOutput(uvOutput *NodeMaterialConnectionPoint) *MorphTargetsBlock {
	m.p.Set("uvOutput", uvOutput.JSObject())
	return m
}
