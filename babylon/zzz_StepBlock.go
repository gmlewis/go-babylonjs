// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// StepBlock represents a babylon.js StepBlock.
// Block used to step a value
type StepBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *StepBlock) JSObject() js.Value { return s.p }

// StepBlock returns a StepBlock JavaScript class.
func (ba *Babylon) StepBlock() *StepBlock {
	p := ba.ctx.Get("StepBlock")
	return StepBlockFromJSObject(p, ba.ctx)
}

// StepBlockFromJSObject returns a wrapped StepBlock JavaScript class.
func StepBlockFromJSObject(p js.Value, ctx js.Value) *StepBlock {
	return &StepBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// StepBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func StepBlockArrayToJSArray(array []*StepBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewStepBlock returns a new StepBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.stepblock
func (ba *Babylon) NewStepBlock(name string) *StepBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("StepBlock").New(args...)
	return StepBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the StepBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.stepblock#getclassname
func (s *StepBlock) GetClassName() string {

	retVal := s.p.Call("getClassName")
	return retVal.String()
}

/*

// Edge returns the Edge property of class StepBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.stepblock#edge
func (s *StepBlock) Edge(edge *NodeMaterialConnectionPoint) *StepBlock {
	p := ba.ctx.Get("StepBlock").New(edge.JSObject())
	return StepBlockFromJSObject(p, ba.ctx)
}

// SetEdge sets the Edge property of class StepBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.stepblock#edge
func (s *StepBlock) SetEdge(edge *NodeMaterialConnectionPoint) *StepBlock {
	p := ba.ctx.Get("StepBlock").New(edge.JSObject())
	return StepBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class StepBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.stepblock#output
func (s *StepBlock) Output(output *NodeMaterialConnectionPoint) *StepBlock {
	p := ba.ctx.Get("StepBlock").New(output.JSObject())
	return StepBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class StepBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.stepblock#output
func (s *StepBlock) SetOutput(output *NodeMaterialConnectionPoint) *StepBlock {
	p := ba.ctx.Get("StepBlock").New(output.JSObject())
	return StepBlockFromJSObject(p, ba.ctx)
}

// Value returns the Value property of class StepBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.stepblock#value
func (s *StepBlock) Value(value *NodeMaterialConnectionPoint) *StepBlock {
	p := ba.ctx.Get("StepBlock").New(value.JSObject())
	return StepBlockFromJSObject(p, ba.ctx)
}

// SetValue sets the Value property of class StepBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.stepblock#value
func (s *StepBlock) SetValue(value *NodeMaterialConnectionPoint) *StepBlock {
	p := ba.ctx.Get("StepBlock").New(value.JSObject())
	return StepBlockFromJSObject(p, ba.ctx)
}

*/
