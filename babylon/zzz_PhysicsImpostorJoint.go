// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PhysicsImpostorJoint represents a babylon.js PhysicsImpostorJoint.
// Interface used to describe a physics joint
type PhysicsImpostorJoint struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PhysicsImpostorJoint) JSObject() js.Value { return p.p }

// PhysicsImpostorJoint returns a PhysicsImpostorJoint JavaScript class.
func (ba *Babylon) PhysicsImpostorJoint() *PhysicsImpostorJoint {
	p := ba.ctx.Get("PhysicsImpostorJoint")
	return PhysicsImpostorJointFromJSObject(p, ba.ctx)
}

// PhysicsImpostorJointFromJSObject returns a wrapped PhysicsImpostorJoint JavaScript class.
func PhysicsImpostorJointFromJSObject(p js.Value, ctx js.Value) *PhysicsImpostorJoint {
	return &PhysicsImpostorJoint{p: p, ctx: ctx}
}

// PhysicsImpostorJointArrayToJSArray returns a JavaScript Array for the wrapped array.
func PhysicsImpostorJointArrayToJSArray(array []*PhysicsImpostorJoint) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// ConnectedImpostor returns the ConnectedImpostor property of class PhysicsImpostorJoint.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorjoint#connectedimpostor
func (p *PhysicsImpostorJoint) ConnectedImpostor(connectedImpostor *PhysicsImpostor) *PhysicsImpostorJoint {
	p := ba.ctx.Get("PhysicsImpostorJoint").New(connectedImpostor.JSObject())
	return PhysicsImpostorJointFromJSObject(p, ba.ctx)
}

// SetConnectedImpostor sets the ConnectedImpostor property of class PhysicsImpostorJoint.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorjoint#connectedimpostor
func (p *PhysicsImpostorJoint) SetConnectedImpostor(connectedImpostor *PhysicsImpostor) *PhysicsImpostorJoint {
	p := ba.ctx.Get("PhysicsImpostorJoint").New(connectedImpostor.JSObject())
	return PhysicsImpostorJointFromJSObject(p, ba.ctx)
}

// Joint returns the Joint property of class PhysicsImpostorJoint.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorjoint#joint
func (p *PhysicsImpostorJoint) Joint(joint *PhysicsJoint) *PhysicsImpostorJoint {
	p := ba.ctx.Get("PhysicsImpostorJoint").New(joint.JSObject())
	return PhysicsImpostorJointFromJSObject(p, ba.ctx)
}

// SetJoint sets the Joint property of class PhysicsImpostorJoint.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorjoint#joint
func (p *PhysicsImpostorJoint) SetJoint(joint *PhysicsJoint) *PhysicsImpostorJoint {
	p := ba.ctx.Get("PhysicsImpostorJoint").New(joint.JSObject())
	return PhysicsImpostorJointFromJSObject(p, ba.ctx)
}

// MainImpostor returns the MainImpostor property of class PhysicsImpostorJoint.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorjoint#mainimpostor
func (p *PhysicsImpostorJoint) MainImpostor(mainImpostor *PhysicsImpostor) *PhysicsImpostorJoint {
	p := ba.ctx.Get("PhysicsImpostorJoint").New(mainImpostor.JSObject())
	return PhysicsImpostorJointFromJSObject(p, ba.ctx)
}

// SetMainImpostor sets the MainImpostor property of class PhysicsImpostorJoint.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsimpostorjoint#mainimpostor
func (p *PhysicsImpostorJoint) SetMainImpostor(mainImpostor *PhysicsImpostor) *PhysicsImpostorJoint {
	p := ba.ctx.Get("PhysicsImpostorJoint").New(mainImpostor.JSObject())
	return PhysicsImpostorJointFromJSObject(p, ba.ctx)
}

*/
