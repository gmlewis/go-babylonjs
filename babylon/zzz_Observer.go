// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Observer represents a babylon.js Observer.
// Represent an Observer registered to a given Observable object.
type Observer struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (o *Observer) JSObject() js.Value { return o.p }

// Observer returns a Observer JavaScript class.
func (ba *Babylon) Observer() *Observer {
	p := ba.ctx.Get("Observer")
	return ObserverFromJSObject(p, ba.ctx)
}

// ObserverFromJSObject returns a wrapped Observer JavaScript class.
func ObserverFromJSObject(p js.Value, ctx js.Value) *Observer {
	return &Observer{p: p, ctx: ctx}
}

// NewObserverOpts contains optional parameters for NewObserver.
type NewObserverOpts struct {
	Scope *interface{}
}

// NewObserver returns a new Observer object.
//
// https://doc.babylonjs.com/api/classes/babylon.observer
func (ba *Babylon) NewObserver(callback func(), mask float64, opts *NewObserverOpts) *Observer {
	if opts == nil {
		opts = &NewObserverOpts{}
	}

	p := ba.ctx.Get("Observer").New(callback, mask, opts.Scope)
	return ObserverFromJSObject(p, ba.ctx)
}

// TODO: methods
