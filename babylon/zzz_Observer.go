// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Observer represents a babylon.js Observer.
// Represent an Observer registered to a given Observable object.
type Observer struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (o *Observer) JSObject() js.Value { return o.p }

// Observer returns a Observer JavaScript class.
func (ba *Babylon) Observer() *Observer {
	p := ba.ctx.Get("Observer")
	return ObserverFromJSObject(p, ba.ctx)
}

// ObserverFromJSObject returns a wrapped Observer JavaScript class.
func ObserverFromJSObject(p js.Value, ctx js.Value) *Observer {
	return &Observer{p: p, ctx: ctx}
}

// ObserverArrayToJSArray returns a JavaScript Array for the wrapped array.
func ObserverArrayToJSArray(array []*Observer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewObserverOpts contains optional parameters for NewObserver.
type NewObserverOpts struct {
	Scope *interface{}
}

// NewObserver returns a new Observer object.
//
// https://doc.babylonjs.com/api/classes/babylon.observer
func (ba *Babylon) NewObserver(callback func(), mask float64, opts *NewObserverOpts) *Observer {
	if opts == nil {
		opts = &NewObserverOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { callback(); return nil }))
	args = append(args, mask)

	if opts.Scope == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scope)
	}

	p := ba.ctx.Get("Observer").New(args...)
	return ObserverFromJSObject(p, ba.ctx)
}

/*

// Callback returns the Callback property of class Observer.
//
// https://doc.babylonjs.com/api/classes/babylon.observer#callback
func (o *Observer) Callback(callback func()) *Observer {
	p := ba.ctx.Get("Observer").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {callback(); return nil}))
	return ObserverFromJSObject(p, ba.ctx)
}

// SetCallback sets the Callback property of class Observer.
//
// https://doc.babylonjs.com/api/classes/babylon.observer#callback
func (o *Observer) SetCallback(callback func()) *Observer {
	p := ba.ctx.Get("Observer").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {callback(); return nil}))
	return ObserverFromJSObject(p, ba.ctx)
}

// Mask returns the Mask property of class Observer.
//
// https://doc.babylonjs.com/api/classes/babylon.observer#mask
func (o *Observer) Mask(mask float64) *Observer {
	p := ba.ctx.Get("Observer").New(mask)
	return ObserverFromJSObject(p, ba.ctx)
}

// SetMask sets the Mask property of class Observer.
//
// https://doc.babylonjs.com/api/classes/babylon.observer#mask
func (o *Observer) SetMask(mask float64) *Observer {
	p := ba.ctx.Get("Observer").New(mask)
	return ObserverFromJSObject(p, ba.ctx)
}

// Scope returns the Scope property of class Observer.
//
// https://doc.babylonjs.com/api/classes/babylon.observer#scope
func (o *Observer) Scope(scope interface{}) *Observer {
	p := ba.ctx.Get("Observer").New(scope)
	return ObserverFromJSObject(p, ba.ctx)
}

// SetScope sets the Scope property of class Observer.
//
// https://doc.babylonjs.com/api/classes/babylon.observer#scope
func (o *Observer) SetScope(scope interface{}) *Observer {
	p := ba.ctx.Get("Observer").New(scope)
	return ObserverFromJSObject(p, ba.ctx)
}

// UnregisterOnNextCall returns the UnregisterOnNextCall property of class Observer.
//
// https://doc.babylonjs.com/api/classes/babylon.observer#unregisteronnextcall
func (o *Observer) UnregisterOnNextCall(unregisterOnNextCall bool) *Observer {
	p := ba.ctx.Get("Observer").New(unregisterOnNextCall)
	return ObserverFromJSObject(p, ba.ctx)
}

// SetUnregisterOnNextCall sets the UnregisterOnNextCall property of class Observer.
//
// https://doc.babylonjs.com/api/classes/babylon.observer#unregisteronnextcall
func (o *Observer) SetUnregisterOnNextCall(unregisterOnNextCall bool) *Observer {
	p := ba.ctx.Get("Observer").New(unregisterOnNextCall)
	return ObserverFromJSObject(p, ba.ctx)
}

*/
