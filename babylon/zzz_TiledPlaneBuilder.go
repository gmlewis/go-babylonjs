// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TiledPlaneBuilder represents a babylon.js TiledPlaneBuilder.
// Class containing static functions to help procedurally build meshes
type TiledPlaneBuilder struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (t *TiledPlaneBuilder) JSObject() js.Value { return t.p }

// TiledPlaneBuilder returns a TiledPlaneBuilder JavaScript class.
func (ba *Babylon) TiledPlaneBuilder() *TiledPlaneBuilder {
	p := ba.ctx.Get("TiledPlaneBuilder")
	return TiledPlaneBuilderFromJSObject(p, ba.ctx)
}

// TiledPlaneBuilderFromJSObject returns a wrapped TiledPlaneBuilder JavaScript class.
func TiledPlaneBuilderFromJSObject(p js.Value, ctx js.Value) *TiledPlaneBuilder {
	return &TiledPlaneBuilder{p: p, ctx: ctx}
}

// TiledPlaneBuilderArrayToJSArray returns a JavaScript Array for the wrapped array.
func TiledPlaneBuilderArrayToJSArray(array []*TiledPlaneBuilder) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// TiledPlaneBuilderCreateTiledPlaneOpts contains optional parameters for TiledPlaneBuilder.CreateTiledPlane.
type TiledPlaneBuilderCreateTiledPlaneOpts struct {
	Scene *Scene
}

// CreateTiledPlane calls the CreateTiledPlane method on the TiledPlaneBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.tiledplanebuilder#createtiledplane
func (t *TiledPlaneBuilder) CreateTiledPlane(name string, options js.Value, opts *TiledPlaneBuilderCreateTiledPlaneOpts) *Mesh {
	if opts == nil {
		opts = &TiledPlaneBuilderCreateTiledPlaneOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, options)

	if opts.Scene == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scene.JSObject())
	}

	retVal := t.p.Call("CreateTiledPlane", args...)
	return MeshFromJSObject(retVal, t.ctx)
}
