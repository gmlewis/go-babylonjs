// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ITextureInfo represents a babylon.js ITextureInfo.
// Loader interface with additional members.
type ITextureInfo struct {
	*ITextureInfo
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ITextureInfo) JSObject() js.Value { return i.p }

// ITextureInfo returns a ITextureInfo JavaScript class.
func (ba *Babylon) ITextureInfo() *ITextureInfo {
	p := ba.ctx.Get("ITextureInfo")
	return ITextureInfoFromJSObject(p, ba.ctx)
}

// ITextureInfoFromJSObject returns a wrapped ITextureInfo JavaScript class.
func ITextureInfoFromJSObject(p js.Value, ctx js.Value) *ITextureInfo {
	return &ITextureInfo{ITextureInfo: ITextureInfoFromJSObject(p, ctx), ctx: ctx}
}

// ITextureInfoArrayToJSArray returns a JavaScript Array for the wrapped array.
func ITextureInfoArrayToJSArray(array []*ITextureInfo) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// Extensions returns the Extensions property of class ITextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.itextureinfo#extensions
func (i *ITextureInfo) Extensions(extensions js.Value) *ITextureInfo {
	p := ba.ctx.Get("ITextureInfo").New(extensions)
	return ITextureInfoFromJSObject(p, ba.ctx)
}

// SetExtensions sets the Extensions property of class ITextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.itextureinfo#extensions
func (i *ITextureInfo) SetExtensions(extensions js.Value) *ITextureInfo {
	p := ba.ctx.Get("ITextureInfo").New(extensions)
	return ITextureInfoFromJSObject(p, ba.ctx)
}

// Extras returns the Extras property of class ITextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.itextureinfo#extras
func (i *ITextureInfo) Extras(extras interface{}) *ITextureInfo {
	p := ba.ctx.Get("ITextureInfo").New(extras)
	return ITextureInfoFromJSObject(p, ba.ctx)
}

// SetExtras sets the Extras property of class ITextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.itextureinfo#extras
func (i *ITextureInfo) SetExtras(extras interface{}) *ITextureInfo {
	p := ba.ctx.Get("ITextureInfo").New(extras)
	return ITextureInfoFromJSObject(p, ba.ctx)
}

// Index returns the Index property of class ITextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.itextureinfo#index
func (i *ITextureInfo) Index(index float64) *ITextureInfo {
	p := ba.ctx.Get("ITextureInfo").New(index)
	return ITextureInfoFromJSObject(p, ba.ctx)
}

// SetIndex sets the Index property of class ITextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.itextureinfo#index
func (i *ITextureInfo) SetIndex(index float64) *ITextureInfo {
	p := ba.ctx.Get("ITextureInfo").New(index)
	return ITextureInfoFromJSObject(p, ba.ctx)
}

// TexCoord returns the TexCoord property of class ITextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.itextureinfo#texcoord
func (i *ITextureInfo) TexCoord(texCoord float64) *ITextureInfo {
	p := ba.ctx.Get("ITextureInfo").New(texCoord)
	return ITextureInfoFromJSObject(p, ba.ctx)
}

// SetTexCoord sets the TexCoord property of class ITextureInfo.
//
// https://doc.babylonjs.com/api/classes/babylon.itextureinfo#texcoord
func (i *ITextureInfo) SetTexCoord(texCoord float64) *ITextureInfo {
	p := ba.ctx.Get("ITextureInfo").New(texCoord)
	return ITextureInfoFromJSObject(p, ba.ctx)
}

*/
