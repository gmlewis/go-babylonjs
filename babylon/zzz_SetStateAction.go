// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SetStateAction represents a babylon.js SetStateAction.
// This defines an action responsible to set a the state field of the target
// to a desired value once triggered.
//
// See: http://doc.babylonjs.com/how_to/how_to_use_actions
type SetStateAction struct{ *Action }

// JSObject returns the underlying js.Value.
func (s *SetStateAction) JSObject() js.Value { return s.p }

// SetStateAction returns a SetStateAction JavaScript class.
func (ba *Babylon) SetStateAction() *SetStateAction {
	p := ba.ctx.Get("SetStateAction")
	return SetStateActionFromJSObject(p)
}

// SetStateActionFromJSObject returns a wrapped SetStateAction JavaScript class.
func SetStateActionFromJSObject(p js.Value) *SetStateAction {
	return &SetStateAction{ActionFromJSObject(p)}
}

// NewSetStateActionOpts contains optional parameters for NewSetStateAction.
type NewSetStateActionOpts struct {
	Condition *Condition
}

// NewSetStateAction returns a new SetStateAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.setstateaction
func (ba *Babylon) NewSetStateAction(triggerOptions interface{}, target interface{}, value string, opts *NewSetStateActionOpts) *SetStateAction {
	if opts == nil {
		opts = &NewSetStateActionOpts{}
	}

	p := ba.ctx.Get("SetStateAction").New(triggerOptions, target, value, opts.Condition.JSObject())
	return SetStateActionFromJSObject(p)
}

// TODO: methods
