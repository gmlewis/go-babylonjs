// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SpringJointData represents a babylon.js SpringJointData.
// Joint data from a spring joint
//
// See: https://doc.babylonjs.com/how_to/using_the_physics_engine
type SpringJointData struct {
	*PhysicsJointData
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SpringJointData) JSObject() js.Value { return s.p }

// SpringJointData returns a SpringJointData JavaScript class.
func (ba *Babylon) SpringJointData() *SpringJointData {
	p := ba.ctx.Get("SpringJointData")
	return SpringJointDataFromJSObject(p, ba.ctx)
}

// SpringJointDataFromJSObject returns a wrapped SpringJointData JavaScript class.
func SpringJointDataFromJSObject(p js.Value, ctx js.Value) *SpringJointData {
	return &SpringJointData{PhysicsJointData: PhysicsJointDataFromJSObject(p, ctx), ctx: ctx}
}

// SpringJointDataArrayToJSArray returns a JavaScript Array for the wrapped array.
func SpringJointDataArrayToJSArray(array []*SpringJointData) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Damping returns the Damping property of class SpringJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.springjointdata#damping
func (s *SpringJointData) Damping() float64 {
	retVal := s.p.Get("damping")
	return retVal.Float()
}

// SetDamping sets the Damping property of class SpringJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.springjointdata#damping
func (s *SpringJointData) SetDamping(damping float64) *SpringJointData {
	s.p.Set("damping", damping)
	return s
}

// ForceApplicationCallback returns the ForceApplicationCallback property of class SpringJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.springjointdata#forceapplicationcallback
func (s *SpringJointData) ForceApplicationCallback() js.Value {
	retVal := s.p.Get("forceApplicationCallback")
	return retVal
}

// SetForceApplicationCallback sets the ForceApplicationCallback property of class SpringJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.springjointdata#forceapplicationcallback
func (s *SpringJointData) SetForceApplicationCallback(forceApplicationCallback JSFunc) *SpringJointData {
	s.p.Set("forceApplicationCallback", js.FuncOf(forceApplicationCallback))
	return s
}

// Length returns the Length property of class SpringJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.springjointdata#length
func (s *SpringJointData) Length() float64 {
	retVal := s.p.Get("length")
	return retVal.Float()
}

// SetLength sets the Length property of class SpringJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.springjointdata#length
func (s *SpringJointData) SetLength(length float64) *SpringJointData {
	s.p.Set("length", length)
	return s
}

// Stiffness returns the Stiffness property of class SpringJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.springjointdata#stiffness
func (s *SpringJointData) Stiffness() float64 {
	retVal := s.p.Get("stiffness")
	return retVal.Float()
}

// SetStiffness sets the Stiffness property of class SpringJointData.
//
// https://doc.babylonjs.com/api/classes/babylon.springjointdata#stiffness
func (s *SpringJointData) SetStiffness(stiffness float64) *SpringJointData {
	s.p.Set("stiffness", stiffness)
	return s
}
