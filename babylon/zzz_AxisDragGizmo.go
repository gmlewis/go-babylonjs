// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// AxisDragGizmo represents a babylon.js AxisDragGizmo.
// Single axis drag gizmo
type AxisDragGizmo struct {
	*Gizmo
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *AxisDragGizmo) JSObject() js.Value { return a.p }

// AxisDragGizmo returns a AxisDragGizmo JavaScript class.
func (ba *Babylon) AxisDragGizmo() *AxisDragGizmo {
	p := ba.ctx.Get("AxisDragGizmo")
	return AxisDragGizmoFromJSObject(p, ba.ctx)
}

// AxisDragGizmoFromJSObject returns a wrapped AxisDragGizmo JavaScript class.
func AxisDragGizmoFromJSObject(p js.Value, ctx js.Value) *AxisDragGizmo {
	return &AxisDragGizmo{Gizmo: GizmoFromJSObject(p, ctx), ctx: ctx}
}

// AxisDragGizmoArrayToJSArray returns a JavaScript Array for the wrapped array.
func AxisDragGizmoArrayToJSArray(array []*AxisDragGizmo) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewAxisDragGizmoOpts contains optional parameters for NewAxisDragGizmo.
type NewAxisDragGizmoOpts struct {
	Color      *Color3
	GizmoLayer *UtilityLayerRenderer
	Parent     *PositionGizmo
}

// NewAxisDragGizmo returns a new AxisDragGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.axisdraggizmo#constructor
func (ba *Babylon) NewAxisDragGizmo(dragAxis *Vector3, opts *NewAxisDragGizmoOpts) *AxisDragGizmo {
	if opts == nil {
		opts = &NewAxisDragGizmoOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, dragAxis.JSObject())

	if opts.Color == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Color.JSObject())
	}
	if opts.GizmoLayer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.GizmoLayer.JSObject())
	}
	if opts.Parent == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Parent.JSObject())
	}

	p := ba.ctx.Get("AxisDragGizmo").New(args...)
	return AxisDragGizmoFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the AxisDragGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.axisdraggizmo#dispose
func (a *AxisDragGizmo) Dispose() {

	a.p.Call("dispose")
}

// DragBehavior returns the DragBehavior property of class AxisDragGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.axisdraggizmo#dragbehavior
func (a *AxisDragGizmo) DragBehavior() *PointerDragBehavior {
	retVal := a.p.Get("dragBehavior")
	return PointerDragBehaviorFromJSObject(retVal, a.ctx)
}

// SetDragBehavior sets the DragBehavior property of class AxisDragGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.axisdraggizmo#dragbehavior
func (a *AxisDragGizmo) SetDragBehavior(dragBehavior *PointerDragBehavior) *AxisDragGizmo {
	a.p.Set("dragBehavior", dragBehavior.JSObject())
	return a
}

// IsEnabled returns the IsEnabled property of class AxisDragGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.axisdraggizmo#isenabled
func (a *AxisDragGizmo) IsEnabled() bool {
	retVal := a.p.Get("isEnabled")
	return retVal.Bool()
}

// SetIsEnabled sets the IsEnabled property of class AxisDragGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.axisdraggizmo#isenabled
func (a *AxisDragGizmo) SetIsEnabled(isEnabled bool) *AxisDragGizmo {
	a.p.Set("isEnabled", isEnabled)
	return a
}

// OnSnapObservable returns the OnSnapObservable property of class AxisDragGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.axisdraggizmo#onsnapobservable
func (a *AxisDragGizmo) OnSnapObservable() *Observable {
	retVal := a.p.Get("onSnapObservable")
	return ObservableFromJSObject(retVal, a.ctx)
}

// SetOnSnapObservable sets the OnSnapObservable property of class AxisDragGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.axisdraggizmo#onsnapobservable
func (a *AxisDragGizmo) SetOnSnapObservable(onSnapObservable *Observable) *AxisDragGizmo {
	a.p.Set("onSnapObservable", onSnapObservable.JSObject())
	return a
}

// SnapDistance returns the SnapDistance property of class AxisDragGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.axisdraggizmo#snapdistance
func (a *AxisDragGizmo) SnapDistance() float64 {
	retVal := a.p.Get("snapDistance")
	return retVal.Float()
}

// SetSnapDistance sets the SnapDistance property of class AxisDragGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.axisdraggizmo#snapdistance
func (a *AxisDragGizmo) SetSnapDistance(snapDistance float64) *AxisDragGizmo {
	a.p.Set("snapDistance", snapDistance)
	return a
}
