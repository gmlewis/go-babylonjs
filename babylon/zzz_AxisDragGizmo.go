// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// AxisDragGizmo represents a babylon.js AxisDragGizmo.
// Single axis drag gizmo
type AxisDragGizmo struct {
	*Gizmo
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *AxisDragGizmo) JSObject() js.Value { return a.p }

// AxisDragGizmo returns a AxisDragGizmo JavaScript class.
func (ba *Babylon) AxisDragGizmo() *AxisDragGizmo {
	p := ba.ctx.Get("AxisDragGizmo")
	return AxisDragGizmoFromJSObject(p, ba.ctx)
}

// AxisDragGizmoFromJSObject returns a wrapped AxisDragGizmo JavaScript class.
func AxisDragGizmoFromJSObject(p js.Value, ctx js.Value) *AxisDragGizmo {
	return &AxisDragGizmo{Gizmo: GizmoFromJSObject(p, ctx), ctx: ctx}
}

// NewAxisDragGizmoOpts contains optional parameters for NewAxisDragGizmo.
type NewAxisDragGizmoOpts struct {
	Color *Color3

	GizmoLayer *UtilityLayerRenderer

	Parent *PositionGizmo
}

// NewAxisDragGizmo returns a new AxisDragGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.axisdraggizmo
func (ba *Babylon) NewAxisDragGizmo(dragAxis *Vector3, opts *NewAxisDragGizmoOpts) *AxisDragGizmo {
	if opts == nil {
		opts = &NewAxisDragGizmoOpts{}
	}

	p := ba.ctx.Get("AxisDragGizmo").New(dragAxis.JSObject(), opts.Color.JSObject(), opts.GizmoLayer.JSObject(), opts.Parent.JSObject())
	return AxisDragGizmoFromJSObject(p, ba.ctx)
}

// TODO: methods
