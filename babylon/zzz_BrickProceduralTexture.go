// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BrickProceduralTexture represents a babylon.js BrickProceduralTexture.
//
type BrickProceduralTexture struct{ *ProceduralTexture }

// JSObject returns the underlying js.Value.
func (b *BrickProceduralTexture) JSObject() js.Value { return b.p }

// BrickProceduralTexture returns a BrickProceduralTexture JavaScript class.
func (ba *Babylon) BrickProceduralTexture() *BrickProceduralTexture {
	p := ba.ctx.Get("BrickProceduralTexture")
	return BrickProceduralTextureFromJSObject(p)
}

// BrickProceduralTextureFromJSObject returns a wrapped BrickProceduralTexture JavaScript class.
func BrickProceduralTextureFromJSObject(p js.Value) *BrickProceduralTexture {
	return &BrickProceduralTexture{ProceduralTextureFromJSObject(p)}
}

// NewBrickProceduralTextureOpts contains optional parameters for NewBrickProceduralTexture.
type NewBrickProceduralTextureOpts struct {
	FallbackTexture *Texture

	GenerateMipMaps *JSBool
}

// NewBrickProceduralTexture returns a new BrickProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.brickproceduraltexture
func (ba *Babylon) NewBrickProceduralTexture(name string, size float64, scene *Scene, opts *NewBrickProceduralTextureOpts) *BrickProceduralTexture {
	if opts == nil {
		opts = &NewBrickProceduralTextureOpts{}
	}

	p := ba.ctx.Get("BrickProceduralTexture").New(name, size, scene.JSObject(), opts.FallbackTexture.JSObject(), opts.GenerateMipMaps.JSObject())
	return BrickProceduralTextureFromJSObject(p)
}

// TODO: methods
