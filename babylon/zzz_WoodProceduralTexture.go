// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// WoodProceduralTexture represents a babylon.js WoodProceduralTexture.
//
type WoodProceduralTexture struct {
	*ProceduralTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (w *WoodProceduralTexture) JSObject() js.Value { return w.p }

// WoodProceduralTexture returns a WoodProceduralTexture JavaScript class.
func (ba *Babylon) WoodProceduralTexture() *WoodProceduralTexture {
	p := ba.ctx.Get("WoodProceduralTexture")
	return WoodProceduralTextureFromJSObject(p, ba.ctx)
}

// WoodProceduralTextureFromJSObject returns a wrapped WoodProceduralTexture JavaScript class.
func WoodProceduralTextureFromJSObject(p js.Value, ctx js.Value) *WoodProceduralTexture {
	return &WoodProceduralTexture{ProceduralTexture: ProceduralTextureFromJSObject(p, ctx), ctx: ctx}
}

// WoodProceduralTextureArrayToJSArray returns a JavaScript Array for the wrapped array.
func WoodProceduralTextureArrayToJSArray(array []*WoodProceduralTexture) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewWoodProceduralTextureOpts contains optional parameters for NewWoodProceduralTexture.
type NewWoodProceduralTextureOpts struct {
	FallbackTexture *Texture
	GenerateMipMaps *bool
}

// NewWoodProceduralTexture returns a new WoodProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.woodproceduraltexture
func (ba *Babylon) NewWoodProceduralTexture(name string, size float64, scene *Scene, opts *NewWoodProceduralTextureOpts) *WoodProceduralTexture {
	if opts == nil {
		opts = &NewWoodProceduralTextureOpts{}
	}

	args := make([]interface{}, 0, 3+2)

	args = append(args, name)
	args = append(args, size)
	args = append(args, scene.JSObject())

	if opts.FallbackTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.FallbackTexture.JSObject())
	}
	if opts.GenerateMipMaps == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateMipMaps)
	}

	p := ba.ctx.Get("WoodProceduralTexture").New(args...)
	return WoodProceduralTextureFromJSObject(p, ba.ctx)
}

// Parse calls the Parse method on the WoodProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.woodproceduraltexture#parse
func (w *WoodProceduralTexture) Parse(parsedTexture interface{}, scene *Scene, rootUrl string) *WoodProceduralTexture {

	args := make([]interface{}, 0, 3+0)

	args = append(args, parsedTexture)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := w.p.Call("Parse", args...)
	return WoodProceduralTextureFromJSObject(retVal, w.ctx)
}

// Serialize calls the Serialize method on the WoodProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.woodproceduraltexture#serialize
func (w *WoodProceduralTexture) Serialize() interface{} {

	retVal := w.p.Call("serialize")
	return retVal
}

// UpdateShaderUniforms calls the UpdateShaderUniforms method on the WoodProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.woodproceduraltexture#updateshaderuniforms
func (w *WoodProceduralTexture) UpdateShaderUniforms() {

	w.p.Call("updateShaderUniforms")
}

/*

// AmpScale returns the AmpScale property of class WoodProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.woodproceduraltexture#ampscale
func (w *WoodProceduralTexture) AmpScale(ampScale float64) *WoodProceduralTexture {
	p := ba.ctx.Get("WoodProceduralTexture").New(ampScale)
	return WoodProceduralTextureFromJSObject(p, ba.ctx)
}

// SetAmpScale sets the AmpScale property of class WoodProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.woodproceduraltexture#ampscale
func (w *WoodProceduralTexture) SetAmpScale(ampScale float64) *WoodProceduralTexture {
	p := ba.ctx.Get("WoodProceduralTexture").New(ampScale)
	return WoodProceduralTextureFromJSObject(p, ba.ctx)
}

// WoodColor returns the WoodColor property of class WoodProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.woodproceduraltexture#woodcolor
func (w *WoodProceduralTexture) WoodColor(woodColor *Color3) *WoodProceduralTexture {
	p := ba.ctx.Get("WoodProceduralTexture").New(woodColor.JSObject())
	return WoodProceduralTextureFromJSObject(p, ba.ctx)
}

// SetWoodColor sets the WoodColor property of class WoodProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.woodproceduraltexture#woodcolor
func (w *WoodProceduralTexture) SetWoodColor(woodColor *Color3) *WoodProceduralTexture {
	p := ba.ctx.Get("WoodProceduralTexture").New(woodColor.JSObject())
	return WoodProceduralTextureFromJSObject(p, ba.ctx)
}

*/
