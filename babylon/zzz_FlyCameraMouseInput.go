// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FlyCameraMouseInput represents a babylon.js FlyCameraMouseInput.
// Listen to mouse events to control the camera.
//
// See: http://doc.babylonjs.com/how_to/customizing_camera_inputs
type FlyCameraMouseInput struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FlyCameraMouseInput) JSObject() js.Value { return f.p }

// FlyCameraMouseInput returns a FlyCameraMouseInput JavaScript class.
func (ba *Babylon) FlyCameraMouseInput() *FlyCameraMouseInput {
	p := ba.ctx.Get("FlyCameraMouseInput")
	return FlyCameraMouseInputFromJSObject(p, ba.ctx)
}

// FlyCameraMouseInputFromJSObject returns a wrapped FlyCameraMouseInput JavaScript class.
func FlyCameraMouseInputFromJSObject(p js.Value, ctx js.Value) *FlyCameraMouseInput {
	return &FlyCameraMouseInput{p: p, ctx: ctx}
}

// FlyCameraMouseInputArrayToJSArray returns a JavaScript Array for the wrapped array.
func FlyCameraMouseInputArrayToJSArray(array []*FlyCameraMouseInput) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewFlyCameraMouseInputOpts contains optional parameters for NewFlyCameraMouseInput.
type NewFlyCameraMouseInputOpts struct {
	TouchEnabled *bool
}

// NewFlyCameraMouseInput returns a new FlyCameraMouseInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput
func (ba *Babylon) NewFlyCameraMouseInput(opts *NewFlyCameraMouseInputOpts) *FlyCameraMouseInput {
	if opts == nil {
		opts = &NewFlyCameraMouseInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.TouchEnabled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TouchEnabled)
	}

	p := ba.ctx.Get("FlyCameraMouseInput").New(args...)
	return FlyCameraMouseInputFromJSObject(p, ba.ctx)
}

// FlyCameraMouseInputAttachControlOpts contains optional parameters for FlyCameraMouseInput.AttachControl.
type FlyCameraMouseInputAttachControlOpts struct {
	NoPreventDefault *bool
}

// AttachControl calls the AttachControl method on the FlyCameraMouseInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#attachcontrol
func (f *FlyCameraMouseInput) AttachControl(element js.Value, opts *FlyCameraMouseInputAttachControlOpts) {
	if opts == nil {
		opts = &FlyCameraMouseInputAttachControlOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, element)

	if opts.NoPreventDefault == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoPreventDefault)
	}

	f.p.Call("attachControl", args...)
}

// DetachControl calls the DetachControl method on the FlyCameraMouseInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#detachcontrol
func (f *FlyCameraMouseInput) DetachControl(element js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, element)

	f.p.Call("detachControl", args...)
}

// GetClassName calls the GetClassName method on the FlyCameraMouseInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#getclassname
func (f *FlyCameraMouseInput) GetClassName() string {

	retVal := f.p.Call("getClassName")
	return retVal.String()
}

// GetSimpleName calls the GetSimpleName method on the FlyCameraMouseInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#getsimplename
func (f *FlyCameraMouseInput) GetSimpleName() string {

	retVal := f.p.Call("getSimpleName")
	return retVal.String()
}

// ActiveButton returns the ActiveButton property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#activebutton
func (f *FlyCameraMouseInput) ActiveButton() float64 {
	retVal := f.p.Get("activeButton")
	return retVal.Float()
}

// SetActiveButton sets the ActiveButton property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#activebutton
func (f *FlyCameraMouseInput) SetActiveButton(activeButton float64) *FlyCameraMouseInput {
	f.p.Set("activeButton", activeButton)
	return f
}

// AngularSensibility returns the AngularSensibility property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#angularsensibility
func (f *FlyCameraMouseInput) AngularSensibility() float64 {
	retVal := f.p.Get("angularSensibility")
	return retVal.Float()
}

// SetAngularSensibility sets the AngularSensibility property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#angularsensibility
func (f *FlyCameraMouseInput) SetAngularSensibility(angularSensibility float64) *FlyCameraMouseInput {
	f.p.Set("angularSensibility", angularSensibility)
	return f
}

// Buttons returns the Buttons property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#buttons
func (f *FlyCameraMouseInput) Buttons() []float64 {
	retVal := f.p.Get("buttons")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetButtons sets the Buttons property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#buttons
func (f *FlyCameraMouseInput) SetButtons(buttons []float64) *FlyCameraMouseInput {
	f.p.Set("buttons", buttons)
	return f
}

// ButtonsPitch returns the ButtonsPitch property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#buttonspitch
func (f *FlyCameraMouseInput) ButtonsPitch() []float64 {
	retVal := f.p.Get("buttonsPitch")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetButtonsPitch sets the ButtonsPitch property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#buttonspitch
func (f *FlyCameraMouseInput) SetButtonsPitch(buttonsPitch []float64) *FlyCameraMouseInput {
	f.p.Set("buttonsPitch", buttonsPitch)
	return f
}

// ButtonsRoll returns the ButtonsRoll property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#buttonsroll
func (f *FlyCameraMouseInput) ButtonsRoll() []float64 {
	retVal := f.p.Get("buttonsRoll")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetButtonsRoll sets the ButtonsRoll property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#buttonsroll
func (f *FlyCameraMouseInput) SetButtonsRoll(buttonsRoll []float64) *FlyCameraMouseInput {
	f.p.Set("buttonsRoll", buttonsRoll)
	return f
}

// ButtonsYaw returns the ButtonsYaw property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#buttonsyaw
func (f *FlyCameraMouseInput) ButtonsYaw() []float64 {
	retVal := f.p.Get("buttonsYaw")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetButtonsYaw sets the ButtonsYaw property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#buttonsyaw
func (f *FlyCameraMouseInput) SetButtonsYaw(buttonsYaw []float64) *FlyCameraMouseInput {
	f.p.Set("buttonsYaw", buttonsYaw)
	return f
}

// Camera returns the Camera property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#camera
func (f *FlyCameraMouseInput) Camera() *FlyCamera {
	retVal := f.p.Get("camera")
	return FlyCameraFromJSObject(retVal, f.ctx)
}

// SetCamera sets the Camera property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#camera
func (f *FlyCameraMouseInput) SetCamera(camera *FlyCamera) *FlyCameraMouseInput {
	f.p.Set("camera", camera.JSObject())
	return f
}

// TouchEnabled returns the TouchEnabled property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#touchenabled
func (f *FlyCameraMouseInput) TouchEnabled() bool {
	retVal := f.p.Get("touchEnabled")
	return retVal.Bool()
}

// SetTouchEnabled sets the TouchEnabled property of class FlyCameraMouseInput.
//
// https://doc.babylonjs.com/api/classes/babylon.flycameramouseinput#touchenabled
func (f *FlyCameraMouseInput) SetTouchEnabled(touchEnabled bool) *FlyCameraMouseInput {
	f.p.Set("touchEnabled", touchEnabled)
	return f
}
