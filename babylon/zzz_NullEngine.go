// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// NullEngine represents a babylon.js NullEngine.
// The null engine class provides support for headless version of babylon.js.
// This can be used in server side scenario or for testing purposes
type NullEngine struct{ *Engine }

// JSObject returns the underlying js.Value.
func (n *NullEngine) JSObject() js.Value { return n.p }

// NullEngine returns a NullEngine JavaScript class.
func (b *Babylon) NullEngine() *NullEngine {
	p := b.ctx.Get("NullEngine")
	return NullEngineFromJSObject(p)
}

// NullEngineFromJSObject returns a wrapped NullEngine JavaScript class.
func NullEngineFromJSObject(p js.Value) *NullEngine {
	return &NullEngine{EngineFromJSObject(p)}
}

// NewNullEngineOpts contains optional parameters for NewNullEngine.
type NewNullEngineOpts struct {
	Options *NullEngineOptions
}

// NewNullEngine returns a new NullEngine object.
//
// https://doc.babylonjs.com/api/classes/babylon.nullengine
func (b *Babylon) NewNullEngine(opts *NewNullEngineOpts) *NullEngine {
	if opts == nil {
		opts = &NewNullEngineOpts{}
	}

	p := b.ctx.Get("NullEngine").New(opts.Options.JSObject())
	return NullEngineFromJSObject(p)
}

// TODO: methods
