// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SpherePanel represents a babylon.js SpherePanel.
// Class used to create a container panel deployed on the surface of a sphere
type SpherePanel struct {
	*VolumeBasedPanel
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SpherePanel) JSObject() js.Value { return s.p }

// SpherePanel returns a SpherePanel JavaScript class.
func (ba *Babylon) SpherePanel() *SpherePanel {
	p := ba.ctx.Get("SpherePanel")
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SpherePanelFromJSObject returns a wrapped SpherePanel JavaScript class.
func SpherePanelFromJSObject(p js.Value, ctx js.Value) *SpherePanel {
	return &SpherePanel{VolumeBasedPanel: VolumeBasedPanelFromJSObject(p, ctx), ctx: ctx}
}

// SpherePanelArrayToJSArray returns a JavaScript Array for the wrapped array.
func SpherePanelArrayToJSArray(array []*SpherePanel) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewSpherePanel returns a new SpherePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel
func (ba *Babylon) NewSpherePanel() *SpherePanel {

	args := make([]interface{}, 0, 0+0)

	p := ba.ctx.Get("SpherePanel").New(args...)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// AddBehavior calls the AddBehavior method on the SpherePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#addbehavior
func (s *SpherePanel) AddBehavior(behavior js.Value) *Control3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, behavior)

	retVal := s.p.Call("addBehavior", args...)
	return Control3DFromJSObject(retVal, s.ctx)
}

// AddControl calls the AddControl method on the SpherePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#addcontrol
func (s *SpherePanel) AddControl(control *Control3D) *Container3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := s.p.Call("addControl", args...)
	return Container3DFromJSObject(retVal, s.ctx)
}

// ContainsControl calls the ContainsControl method on the SpherePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#containscontrol
func (s *SpherePanel) ContainsControl(control *Control3D) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := s.p.Call("containsControl", args...)
	return retVal.Bool()
}

// Dispose calls the Dispose method on the SpherePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#dispose
func (s *SpherePanel) Dispose() {

	s.p.Call("dispose")
}

// GetBehaviorByName calls the GetBehaviorByName method on the SpherePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#getbehaviorbyname
func (s *SpherePanel) GetBehaviorByName(name string) js.Value {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := s.p.Call("getBehaviorByName", args...)
	return retVal
}

// GetClassName calls the GetClassName method on the SpherePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#getclassname
func (s *SpherePanel) GetClassName() string {

	retVal := s.p.Call("getClassName")
	return retVal.String()
}

// LinkToTransformNode calls the LinkToTransformNode method on the SpherePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#linktotransformnode
func (s *SpherePanel) LinkToTransformNode(node *TransformNode) *Control3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, node.JSObject())

	retVal := s.p.Call("linkToTransformNode", args...)
	return Control3DFromJSObject(retVal, s.ctx)
}

// RemoveBehavior calls the RemoveBehavior method on the SpherePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#removebehavior
func (s *SpherePanel) RemoveBehavior(behavior js.Value) *Control3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, behavior)

	retVal := s.p.Call("removeBehavior", args...)
	return Control3DFromJSObject(retVal, s.ctx)
}

// RemoveControl calls the RemoveControl method on the SpherePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#removecontrol
func (s *SpherePanel) RemoveControl(control *Control3D) *Container3D {

	args := make([]interface{}, 0, 1+0)

	args = append(args, control.JSObject())

	retVal := s.p.Call("removeControl", args...)
	return Container3DFromJSObject(retVal, s.ctx)
}

// UpdateLayout calls the UpdateLayout method on the SpherePanel object.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#updatelayout
func (s *SpherePanel) UpdateLayout() *Container3D {

	retVal := s.p.Call("updateLayout")
	return Container3DFromJSObject(retVal, s.ctx)
}

/*

// Behaviors returns the Behaviors property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#behaviors
func (s *SpherePanel) Behaviors(behaviors js.Value) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(behaviors)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetBehaviors sets the Behaviors property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#behaviors
func (s *SpherePanel) SetBehaviors(behaviors js.Value) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(behaviors)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// BlockLayout returns the BlockLayout property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#blocklayout
func (s *SpherePanel) BlockLayout(blockLayout bool) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(blockLayout)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetBlockLayout sets the BlockLayout property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#blocklayout
func (s *SpherePanel) SetBlockLayout(blockLayout bool) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(blockLayout)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// Children returns the Children property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#children
func (s *SpherePanel) Children(children []*Control3D) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(children)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetChildren sets the Children property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#children
func (s *SpherePanel) SetChildren(children []*Control3D) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(children)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// Columns returns the Columns property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#columns
func (s *SpherePanel) Columns(columns int) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(columns)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetColumns sets the Columns property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#columns
func (s *SpherePanel) SetColumns(columns int) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(columns)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// FACEFORWARDREVERSED_ORIENTATION returns the FACEFORWARDREVERSED_ORIENTATION property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#faceforwardreversed_orientation
func (s *SpherePanel) FACEFORWARDREVERSED_ORIENTATION(FACEFORWARDREVERSED_ORIENTATION float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(FACEFORWARDREVERSED_ORIENTATION)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetFACEFORWARDREVERSED_ORIENTATION sets the FACEFORWARDREVERSED_ORIENTATION property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#faceforwardreversed_orientation
func (s *SpherePanel) SetFACEFORWARDREVERSED_ORIENTATION(FACEFORWARDREVERSED_ORIENTATION float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(FACEFORWARDREVERSED_ORIENTATION)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// FACEFORWARD_ORIENTATION returns the FACEFORWARD_ORIENTATION property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#faceforward_orientation
func (s *SpherePanel) FACEFORWARD_ORIENTATION(FACEFORWARD_ORIENTATION float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(FACEFORWARD_ORIENTATION)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetFACEFORWARD_ORIENTATION sets the FACEFORWARD_ORIENTATION property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#faceforward_orientation
func (s *SpherePanel) SetFACEFORWARD_ORIENTATION(FACEFORWARD_ORIENTATION float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(FACEFORWARD_ORIENTATION)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// FACEORIGINREVERSED_ORIENTATION returns the FACEORIGINREVERSED_ORIENTATION property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#faceoriginreversed_orientation
func (s *SpherePanel) FACEORIGINREVERSED_ORIENTATION(FACEORIGINREVERSED_ORIENTATION float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(FACEORIGINREVERSED_ORIENTATION)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetFACEORIGINREVERSED_ORIENTATION sets the FACEORIGINREVERSED_ORIENTATION property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#faceoriginreversed_orientation
func (s *SpherePanel) SetFACEORIGINREVERSED_ORIENTATION(FACEORIGINREVERSED_ORIENTATION float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(FACEORIGINREVERSED_ORIENTATION)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// FACEORIGIN_ORIENTATION returns the FACEORIGIN_ORIENTATION property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#faceorigin_orientation
func (s *SpherePanel) FACEORIGIN_ORIENTATION(FACEORIGIN_ORIENTATION float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(FACEORIGIN_ORIENTATION)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetFACEORIGIN_ORIENTATION sets the FACEORIGIN_ORIENTATION property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#faceorigin_orientation
func (s *SpherePanel) SetFACEORIGIN_ORIENTATION(FACEORIGIN_ORIENTATION float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(FACEORIGIN_ORIENTATION)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// IsVisible returns the IsVisible property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#isvisible
func (s *SpherePanel) IsVisible(isVisible bool) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(isVisible)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetIsVisible sets the IsVisible property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#isvisible
func (s *SpherePanel) SetIsVisible(isVisible bool) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(isVisible)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// Margin returns the Margin property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#margin
func (s *SpherePanel) Margin(margin float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(margin)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetMargin sets the Margin property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#margin
func (s *SpherePanel) SetMargin(margin float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(margin)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// Mesh returns the Mesh property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#mesh
func (s *SpherePanel) Mesh(mesh *AbstractMesh) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(mesh.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetMesh sets the Mesh property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#mesh
func (s *SpherePanel) SetMesh(mesh *AbstractMesh) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(mesh.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#name
func (s *SpherePanel) Name(name string) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(name)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#name
func (s *SpherePanel) SetName(name string) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(name)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// Node returns the Node property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#node
func (s *SpherePanel) Node(node *TransformNode) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(node.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetNode sets the Node property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#node
func (s *SpherePanel) SetNode(node *TransformNode) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(node.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// OnPointerClickObservable returns the OnPointerClickObservable property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#onpointerclickobservable
func (s *SpherePanel) OnPointerClickObservable(onPointerClickObservable *Observable) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(onPointerClickObservable.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetOnPointerClickObservable sets the OnPointerClickObservable property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#onpointerclickobservable
func (s *SpherePanel) SetOnPointerClickObservable(onPointerClickObservable *Observable) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(onPointerClickObservable.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// OnPointerDownObservable returns the OnPointerDownObservable property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#onpointerdownobservable
func (s *SpherePanel) OnPointerDownObservable(onPointerDownObservable *Observable) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(onPointerDownObservable.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetOnPointerDownObservable sets the OnPointerDownObservable property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#onpointerdownobservable
func (s *SpherePanel) SetOnPointerDownObservable(onPointerDownObservable *Observable) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(onPointerDownObservable.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// OnPointerEnterObservable returns the OnPointerEnterObservable property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#onpointerenterobservable
func (s *SpherePanel) OnPointerEnterObservable(onPointerEnterObservable *Observable) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(onPointerEnterObservable.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetOnPointerEnterObservable sets the OnPointerEnterObservable property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#onpointerenterobservable
func (s *SpherePanel) SetOnPointerEnterObservable(onPointerEnterObservable *Observable) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(onPointerEnterObservable.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// OnPointerMoveObservable returns the OnPointerMoveObservable property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#onpointermoveobservable
func (s *SpherePanel) OnPointerMoveObservable(onPointerMoveObservable *Observable) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(onPointerMoveObservable.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetOnPointerMoveObservable sets the OnPointerMoveObservable property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#onpointermoveobservable
func (s *SpherePanel) SetOnPointerMoveObservable(onPointerMoveObservable *Observable) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(onPointerMoveObservable.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// OnPointerOutObservable returns the OnPointerOutObservable property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#onpointeroutobservable
func (s *SpherePanel) OnPointerOutObservable(onPointerOutObservable *Observable) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(onPointerOutObservable.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetOnPointerOutObservable sets the OnPointerOutObservable property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#onpointeroutobservable
func (s *SpherePanel) SetOnPointerOutObservable(onPointerOutObservable *Observable) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(onPointerOutObservable.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// OnPointerUpObservable returns the OnPointerUpObservable property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#onpointerupobservable
func (s *SpherePanel) OnPointerUpObservable(onPointerUpObservable *Observable) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(onPointerUpObservable.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetOnPointerUpObservable sets the OnPointerUpObservable property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#onpointerupobservable
func (s *SpherePanel) SetOnPointerUpObservable(onPointerUpObservable *Observable) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(onPointerUpObservable.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// Orientation returns the Orientation property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#orientation
func (s *SpherePanel) Orientation(orientation float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(orientation)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetOrientation sets the Orientation property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#orientation
func (s *SpherePanel) SetOrientation(orientation float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(orientation)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// Parent returns the Parent property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#parent
func (s *SpherePanel) Parent(parent *Container3D) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(parent.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetParent sets the Parent property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#parent
func (s *SpherePanel) SetParent(parent *Container3D) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(parent.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// PointerDownAnimation returns the PointerDownAnimation property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#pointerdownanimation
func (s *SpherePanel) PointerDownAnimation(pointerDownAnimation func()) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerDownAnimation(); return nil}))
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetPointerDownAnimation sets the PointerDownAnimation property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#pointerdownanimation
func (s *SpherePanel) SetPointerDownAnimation(pointerDownAnimation func()) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerDownAnimation(); return nil}))
	return SpherePanelFromJSObject(p, ba.ctx)
}

// PointerEnterAnimation returns the PointerEnterAnimation property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#pointerenteranimation
func (s *SpherePanel) PointerEnterAnimation(pointerEnterAnimation func()) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerEnterAnimation(); return nil}))
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetPointerEnterAnimation sets the PointerEnterAnimation property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#pointerenteranimation
func (s *SpherePanel) SetPointerEnterAnimation(pointerEnterAnimation func()) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerEnterAnimation(); return nil}))
	return SpherePanelFromJSObject(p, ba.ctx)
}

// PointerOutAnimation returns the PointerOutAnimation property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#pointeroutanimation
func (s *SpherePanel) PointerOutAnimation(pointerOutAnimation func()) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerOutAnimation(); return nil}))
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetPointerOutAnimation sets the PointerOutAnimation property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#pointeroutanimation
func (s *SpherePanel) SetPointerOutAnimation(pointerOutAnimation func()) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerOutAnimation(); return nil}))
	return SpherePanelFromJSObject(p, ba.ctx)
}

// PointerUpAnimation returns the PointerUpAnimation property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#pointerupanimation
func (s *SpherePanel) PointerUpAnimation(pointerUpAnimation func()) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerUpAnimation(); return nil}))
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetPointerUpAnimation sets the PointerUpAnimation property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#pointerupanimation
func (s *SpherePanel) SetPointerUpAnimation(pointerUpAnimation func()) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {pointerUpAnimation(); return nil}))
	return SpherePanelFromJSObject(p, ba.ctx)
}

// Position returns the Position property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#position
func (s *SpherePanel) Position(position *Vector3) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(position.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetPosition sets the Position property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#position
func (s *SpherePanel) SetPosition(position *Vector3) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(position.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// Radius returns the Radius property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#radius
func (s *SpherePanel) Radius(radius float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(radius)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetRadius sets the Radius property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#radius
func (s *SpherePanel) SetRadius(radius float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(radius)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// Rows returns the Rows property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#rows
func (s *SpherePanel) Rows(rows int) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(rows)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetRows sets the Rows property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#rows
func (s *SpherePanel) SetRows(rows int) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(rows)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// Scaling returns the Scaling property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#scaling
func (s *SpherePanel) Scaling(scaling *Vector3) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(scaling.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetScaling sets the Scaling property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#scaling
func (s *SpherePanel) SetScaling(scaling *Vector3) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(scaling.JSObject())
	return SpherePanelFromJSObject(p, ba.ctx)
}

// TypeName returns the TypeName property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#typename
func (s *SpherePanel) TypeName(typeName string) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(typeName)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetTypeName sets the TypeName property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#typename
func (s *SpherePanel) SetTypeName(typeName string) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(typeName)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// UNSET_ORIENTATION returns the UNSET_ORIENTATION property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#unset_orientation
func (s *SpherePanel) UNSET_ORIENTATION(UNSET_ORIENTATION float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(UNSET_ORIENTATION)
	return SpherePanelFromJSObject(p, ba.ctx)
}

// SetUNSET_ORIENTATION sets the UNSET_ORIENTATION property of class SpherePanel.
//
// https://doc.babylonjs.com/api/classes/babylon.spherepanel#unset_orientation
func (s *SpherePanel) SetUNSET_ORIENTATION(UNSET_ORIENTATION float64) *SpherePanel {
	p := ba.ctx.Get("SpherePanel").New(UNSET_ORIENTATION)
	return SpherePanelFromJSObject(p, ba.ctx)
}

*/
