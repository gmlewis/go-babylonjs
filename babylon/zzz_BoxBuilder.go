// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BoxBuilder represents a babylon.js BoxBuilder.
// Class containing static functions to help procedurally build meshes
type BoxBuilder struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BoxBuilder) JSObject() js.Value { return b.p }

// BoxBuilder returns a BoxBuilder JavaScript class.
func (ba *Babylon) BoxBuilder() *BoxBuilder {
	p := ba.ctx.Get("BoxBuilder")
	return BoxBuilderFromJSObject(p, ba.ctx)
}

// BoxBuilderFromJSObject returns a wrapped BoxBuilder JavaScript class.
func BoxBuilderFromJSObject(p js.Value, ctx js.Value) *BoxBuilder {
	return &BoxBuilder{p: p, ctx: ctx}
}

// BoxBuilderArrayToJSArray returns a JavaScript Array for the wrapped array.
func BoxBuilderArrayToJSArray(array []*BoxBuilder) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// BoxBuilderCreateBoxOpts contains optional parameters for BoxBuilder.CreateBox.
type BoxBuilderCreateBoxOpts struct {
	Scene *Scene
}

// CreateBox calls the CreateBox method on the BoxBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.boxbuilder#createbox
func (b *BoxBuilder) CreateBox(name string, options js.Value, opts *BoxBuilderCreateBoxOpts) *Mesh {
	if opts == nil {
		opts = &BoxBuilderCreateBoxOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)

	args = append(args, options)

	if opts.Scene == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scene.JSObject())
	}

	retVal := b.p.Call("CreateBox", args...)
	return MeshFromJSObject(retVal, b.ctx)
}
