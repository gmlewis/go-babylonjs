// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ParticlesOptimization represents a babylon.js ParticlesOptimization.
// Defines an optimization used to turn particles off
//
// See: http://doc.babylonjs.com/how_to/how_to_use_sceneoptimizer
type ParticlesOptimization struct {
	*SceneOptimization
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *ParticlesOptimization) JSObject() js.Value { return p.p }

// ParticlesOptimization returns a ParticlesOptimization JavaScript class.
func (ba *Babylon) ParticlesOptimization() *ParticlesOptimization {
	p := ba.ctx.Get("ParticlesOptimization")
	return ParticlesOptimizationFromJSObject(p, ba.ctx)
}

// ParticlesOptimizationFromJSObject returns a wrapped ParticlesOptimization JavaScript class.
func ParticlesOptimizationFromJSObject(p js.Value, ctx js.Value) *ParticlesOptimization {
	return &ParticlesOptimization{SceneOptimization: SceneOptimizationFromJSObject(p, ctx), ctx: ctx}
}

// ParticlesOptimizationArrayToJSArray returns a JavaScript Array for the wrapped array.
func ParticlesOptimizationArrayToJSArray(array []*ParticlesOptimization) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewParticlesOptimizationOpts contains optional parameters for NewParticlesOptimization.
type NewParticlesOptimizationOpts struct {
	Priority *float64
}

// NewParticlesOptimization returns a new ParticlesOptimization object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesoptimization
func (ba *Babylon) NewParticlesOptimization(opts *NewParticlesOptimizationOpts) *ParticlesOptimization {
	if opts == nil {
		opts = &NewParticlesOptimizationOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Priority == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Priority)
	}

	p := ba.ctx.Get("ParticlesOptimization").New(args...)
	return ParticlesOptimizationFromJSObject(p, ba.ctx)
}

// Apply calls the Apply method on the ParticlesOptimization object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesoptimization#apply
func (p *ParticlesOptimization) Apply(scene *Scene, optimizer *SceneOptimizer) bool {

	args := make([]interface{}, 0, 2+0)

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	if optimizer == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, optimizer.JSObject())
	}

	retVal := p.p.Call("apply", args...)
	return retVal.Bool()
}

// GetDescription calls the GetDescription method on the ParticlesOptimization object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesoptimization#getdescription
func (p *ParticlesOptimization) GetDescription() string {

	retVal := p.p.Call("getDescription")
	return retVal.String()
}
