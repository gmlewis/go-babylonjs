// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ParticlesOptimization represents a babylon.js ParticlesOptimization.
// Defines an optimization used to turn particles off
//
// See: http://doc.babylonjs.com/how_to/how_to_use_sceneoptimizer
type ParticlesOptimization struct{ *SceneOptimization }

// JSObject returns the underlying js.Value.
func (p *ParticlesOptimization) JSObject() js.Value { return p.p }

// ParticlesOptimization returns a ParticlesOptimization JavaScript class.
func (ba *Babylon) ParticlesOptimization() *ParticlesOptimization {
	p := ba.ctx.Get("ParticlesOptimization")
	return ParticlesOptimizationFromJSObject(p)
}

// ParticlesOptimizationFromJSObject returns a wrapped ParticlesOptimization JavaScript class.
func ParticlesOptimizationFromJSObject(p js.Value) *ParticlesOptimization {
	return &ParticlesOptimization{SceneOptimizationFromJSObject(p)}
}

// NewParticlesOptimizationOpts contains optional parameters for NewParticlesOptimization.
type NewParticlesOptimizationOpts struct {
	Priority *JSFloat64
}

// NewParticlesOptimization returns a new ParticlesOptimization object.
//
// https://doc.babylonjs.com/api/classes/babylon.particlesoptimization
func (ba *Babylon) NewParticlesOptimization(opts *NewParticlesOptimizationOpts) *ParticlesOptimization {
	if opts == nil {
		opts = &NewParticlesOptimizationOpts{}
	}

	p := ba.ctx.Get("ParticlesOptimization").New(opts.Priority)
	return ParticlesOptimizationFromJSObject(p)
}

// TODO: methods
