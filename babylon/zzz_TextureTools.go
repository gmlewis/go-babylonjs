// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TextureTools represents a babylon.js TextureTools.
// Class used to host texture specific utilities
type TextureTools struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (t *TextureTools) JSObject() js.Value { return t.p }

// TextureTools returns a TextureTools JavaScript class.
func (ba *Babylon) TextureTools() *TextureTools {
	p := ba.ctx.Get("TextureTools")
	return TextureToolsFromJSObject(p, ba.ctx)
}

// TextureToolsFromJSObject returns a wrapped TextureTools JavaScript class.
func TextureToolsFromJSObject(p js.Value, ctx js.Value) *TextureTools {
	return &TextureTools{p: p, ctx: ctx}
}

// TextureToolsArrayToJSArray returns a JavaScript Array for the wrapped array.
func TextureToolsArrayToJSArray(array []*TextureTools) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// TextureToolsCreateResizedCopyOpts contains optional parameters for TextureTools.CreateResizedCopy.
type TextureToolsCreateResizedCopyOpts struct {
	UseBilinearMode *bool
}

// CreateResizedCopy calls the CreateResizedCopy method on the TextureTools object.
//
// https://doc.babylonjs.com/api/classes/babylon.texturetools#createresizedcopy
func (t *TextureTools) CreateResizedCopy(texture *Texture, width float64, height float64, opts *TextureToolsCreateResizedCopyOpts) *Texture {
	if opts == nil {
		opts = &TextureToolsCreateResizedCopyOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, texture.JSObject())
	args = append(args, width)
	args = append(args, height)

	if opts.UseBilinearMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseBilinearMode)
	}

	retVal := t.p.Call("CreateResizedCopy", args...)
	return TextureFromJSObject(retVal, t.ctx)
}

/*

 */
