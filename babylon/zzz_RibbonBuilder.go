// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RibbonBuilder represents a babylon.js RibbonBuilder.
// Class containing static functions to help procedurally build meshes
type RibbonBuilder struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RibbonBuilder) JSObject() js.Value { return r.p }

// RibbonBuilder returns a RibbonBuilder JavaScript class.
func (ba *Babylon) RibbonBuilder() *RibbonBuilder {
	p := ba.ctx.Get("RibbonBuilder")
	return RibbonBuilderFromJSObject(p, ba.ctx)
}

// RibbonBuilderFromJSObject returns a wrapped RibbonBuilder JavaScript class.
func RibbonBuilderFromJSObject(p js.Value, ctx js.Value) *RibbonBuilder {
	return &RibbonBuilder{p: p, ctx: ctx}
}

// RibbonBuilderArrayToJSArray returns a JavaScript Array for the wrapped array.
func RibbonBuilderArrayToJSArray(array []*RibbonBuilder) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// RibbonBuilderCreateRibbonOpts contains optional parameters for RibbonBuilder.CreateRibbon.
type RibbonBuilderCreateRibbonOpts struct {
	Scene *Scene
}

// CreateRibbon calls the CreateRibbon method on the RibbonBuilder object.
//
// https://doc.babylonjs.com/api/classes/babylon.ribbonbuilder#createribbon
func (r *RibbonBuilder) CreateRibbon(name string, options js.Value, opts *RibbonBuilderCreateRibbonOpts) *Mesh {
	if opts == nil {
		opts = &RibbonBuilderCreateRibbonOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, options)

	if opts.Scene == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scene.JSObject())
	}

	retVal := r.p.Call("CreateRibbon", args...)
	return MeshFromJSObject(retVal, r.ctx)
}
