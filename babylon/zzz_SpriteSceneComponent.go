// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SpriteSceneComponent represents a babylon.js SpriteSceneComponent.
// Defines the sprite scene component responsible to manage sprites
// in a given scene.
type SpriteSceneComponent struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SpriteSceneComponent) JSObject() js.Value { return s.p }

// SpriteSceneComponent returns a SpriteSceneComponent JavaScript class.
func (ba *Babylon) SpriteSceneComponent() *SpriteSceneComponent {
	p := ba.ctx.Get("SpriteSceneComponent")
	return SpriteSceneComponentFromJSObject(p, ba.ctx)
}

// SpriteSceneComponentFromJSObject returns a wrapped SpriteSceneComponent JavaScript class.
func SpriteSceneComponentFromJSObject(p js.Value, ctx js.Value) *SpriteSceneComponent {
	return &SpriteSceneComponent{p: p, ctx: ctx}
}

// SpriteSceneComponentArrayToJSArray returns a JavaScript Array for the wrapped array.
func SpriteSceneComponentArrayToJSArray(array []*SpriteSceneComponent) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewSpriteSceneComponent returns a new SpriteSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.spritescenecomponent
func (ba *Babylon) NewSpriteSceneComponent(scene *Scene) *SpriteSceneComponent {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scene.JSObject())

	p := ba.ctx.Get("SpriteSceneComponent").New(args...)
	return SpriteSceneComponentFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the SpriteSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.spritescenecomponent#dispose
func (s *SpriteSceneComponent) Dispose() {

	s.p.Call("dispose")
}

// Rebuild calls the Rebuild method on the SpriteSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.spritescenecomponent#rebuild
func (s *SpriteSceneComponent) Rebuild() {

	s.p.Call("rebuild")
}

// Register calls the Register method on the SpriteSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.spritescenecomponent#register
func (s *SpriteSceneComponent) Register() {

	s.p.Call("register")
}

/*

// Name returns the Name property of class SpriteSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.spritescenecomponent#name
func (s *SpriteSceneComponent) Name(name string) *SpriteSceneComponent {
	p := ba.ctx.Get("SpriteSceneComponent").New(name)
	return SpriteSceneComponentFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class SpriteSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.spritescenecomponent#name
func (s *SpriteSceneComponent) SetName(name string) *SpriteSceneComponent {
	p := ba.ctx.Get("SpriteSceneComponent").New(name)
	return SpriteSceneComponentFromJSObject(p, ba.ctx)
}

// Scene returns the Scene property of class SpriteSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.spritescenecomponent#scene
func (s *SpriteSceneComponent) Scene(scene *Scene) *SpriteSceneComponent {
	p := ba.ctx.Get("SpriteSceneComponent").New(scene.JSObject())
	return SpriteSceneComponentFromJSObject(p, ba.ctx)
}

// SetScene sets the Scene property of class SpriteSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.spritescenecomponent#scene
func (s *SpriteSceneComponent) SetScene(scene *Scene) *SpriteSceneComponent {
	p := ba.ctx.Get("SpriteSceneComponent").New(scene.JSObject())
	return SpriteSceneComponentFromJSObject(p, ba.ctx)
}

*/
