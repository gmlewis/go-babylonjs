// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// GradientMaterial represents a babylon.js GradientMaterial.
//
type GradientMaterial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (g *GradientMaterial) JSObject() js.Value { return g.p }

// GradientMaterial returns a GradientMaterial JavaScript class.
func (ba *Babylon) GradientMaterial() *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial")
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// GradientMaterialFromJSObject returns a wrapped GradientMaterial JavaScript class.
func GradientMaterialFromJSObject(p js.Value, ctx js.Value) *GradientMaterial {
	return &GradientMaterial{p: p, ctx: ctx}
}

// GradientMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func GradientMaterialArrayToJSArray(array []*GradientMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewGradientMaterial returns a new GradientMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial
func (ba *Babylon) NewGradientMaterial(name string, scene *Scene) *GradientMaterial {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("GradientMaterial").New(args...)
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// BindForSubMesh calls the BindForSubMesh method on the GradientMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#bindforsubmesh
func (g *GradientMaterial) BindForSubMesh(world *Matrix, mesh *Mesh, subMesh *SubMesh) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, world.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	g.p.Call("bindForSubMesh", args...)
}

// Clone calls the Clone method on the GradientMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#clone
func (g *GradientMaterial) Clone(name string) *GradientMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := g.p.Call("clone", args...)
	return GradientMaterialFromJSObject(retVal, g.ctx)
}

// GradientMaterialDisposeOpts contains optional parameters for GradientMaterial.Dispose.
type GradientMaterialDisposeOpts struct {
	ForceDisposeEffect *bool
}

// Dispose calls the Dispose method on the GradientMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#dispose
func (g *GradientMaterial) Dispose(opts *GradientMaterialDisposeOpts) {
	if opts == nil {
		opts = &GradientMaterialDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForceDisposeEffect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeEffect)
	}

	g.p.Call("dispose", args...)
}

// GetAlphaTestTexture calls the GetAlphaTestTexture method on the GradientMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#getalphatesttexture
func (g *GradientMaterial) GetAlphaTestTexture() *BaseTexture {

	retVal := g.p.Call("getAlphaTestTexture")
	return BaseTextureFromJSObject(retVal, g.ctx)
}

// GetAnimatables calls the GetAnimatables method on the GradientMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#getanimatables
func (g *GradientMaterial) GetAnimatables() *IAnimatable {

	retVal := g.p.Call("getAnimatables")
	return IAnimatableFromJSObject(retVal, g.ctx)
}

// GetClassName calls the GetClassName method on the GradientMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#getclassname
func (g *GradientMaterial) GetClassName() string {

	retVal := g.p.Call("getClassName")
	return retVal.String()
}

// GradientMaterialIsReadyForSubMeshOpts contains optional parameters for GradientMaterial.IsReadyForSubMesh.
type GradientMaterialIsReadyForSubMeshOpts struct {
	UseInstances *bool
}

// IsReadyForSubMesh calls the IsReadyForSubMesh method on the GradientMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#isreadyforsubmesh
func (g *GradientMaterial) IsReadyForSubMesh(mesh *AbstractMesh, subMesh *SubMesh, opts *GradientMaterialIsReadyForSubMeshOpts) bool {
	if opts == nil {
		opts = &GradientMaterialIsReadyForSubMeshOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := g.p.Call("isReadyForSubMesh", args...)
	return retVal.Bool()
}

// NeedAlphaBlending calls the NeedAlphaBlending method on the GradientMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#needalphablending
func (g *GradientMaterial) NeedAlphaBlending() bool {

	retVal := g.p.Call("needAlphaBlending")
	return retVal.Bool()
}

// NeedAlphaTesting calls the NeedAlphaTesting method on the GradientMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#needalphatesting
func (g *GradientMaterial) NeedAlphaTesting() bool {

	retVal := g.p.Call("needAlphaTesting")
	return retVal.Bool()
}

// Parse calls the Parse method on the GradientMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#parse
func (g *GradientMaterial) Parse(source interface{}, scene *Scene, rootUrl string) *GradientMaterial {

	args := make([]interface{}, 0, 3+0)

	args = append(args, source)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := g.p.Call("Parse", args...)
	return GradientMaterialFromJSObject(retVal, g.ctx)
}

// Serialize calls the Serialize method on the GradientMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#serialize
func (g *GradientMaterial) Serialize() interface{} {

	retVal := g.p.Call("serialize")
	return retVal
}

/*

// BottomColor returns the BottomColor property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#bottomcolor
func (g *GradientMaterial) BottomColor(bottomColor *Color3) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(bottomColor.JSObject())
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// SetBottomColor sets the BottomColor property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#bottomcolor
func (g *GradientMaterial) SetBottomColor(bottomColor *Color3) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(bottomColor.JSObject())
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// BottomColorAlpha returns the BottomColorAlpha property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#bottomcoloralpha
func (g *GradientMaterial) BottomColorAlpha(bottomColorAlpha float64) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(bottomColorAlpha)
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// SetBottomColorAlpha sets the BottomColorAlpha property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#bottomcoloralpha
func (g *GradientMaterial) SetBottomColorAlpha(bottomColorAlpha float64) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(bottomColorAlpha)
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// DisableLighting returns the DisableLighting property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#disablelighting
func (g *GradientMaterial) DisableLighting(disableLighting bool) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(disableLighting)
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// SetDisableLighting sets the DisableLighting property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#disablelighting
func (g *GradientMaterial) SetDisableLighting(disableLighting bool) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(disableLighting)
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// MaxSimultaneousLights returns the MaxSimultaneousLights property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#maxsimultaneouslights
func (g *GradientMaterial) MaxSimultaneousLights(maxSimultaneousLights float64) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(maxSimultaneousLights)
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// SetMaxSimultaneousLights sets the MaxSimultaneousLights property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#maxsimultaneouslights
func (g *GradientMaterial) SetMaxSimultaneousLights(maxSimultaneousLights float64) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(maxSimultaneousLights)
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// Offset returns the Offset property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#offset
func (g *GradientMaterial) Offset(offset float64) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(offset)
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// SetOffset sets the Offset property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#offset
func (g *GradientMaterial) SetOffset(offset float64) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(offset)
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// Scale returns the Scale property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#scale
func (g *GradientMaterial) Scale(scale float64) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(scale)
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// SetScale sets the Scale property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#scale
func (g *GradientMaterial) SetScale(scale float64) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(scale)
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// Smoothness returns the Smoothness property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#smoothness
func (g *GradientMaterial) Smoothness(smoothness float64) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(smoothness)
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// SetSmoothness sets the Smoothness property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#smoothness
func (g *GradientMaterial) SetSmoothness(smoothness float64) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(smoothness)
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// TopColor returns the TopColor property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#topcolor
func (g *GradientMaterial) TopColor(topColor *Color3) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(topColor.JSObject())
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// SetTopColor sets the TopColor property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#topcolor
func (g *GradientMaterial) SetTopColor(topColor *Color3) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(topColor.JSObject())
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// TopColorAlpha returns the TopColorAlpha property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#topcoloralpha
func (g *GradientMaterial) TopColorAlpha(topColorAlpha float64) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(topColorAlpha)
	return GradientMaterialFromJSObject(p, ba.ctx)
}

// SetTopColorAlpha sets the TopColorAlpha property of class GradientMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.gradientmaterial#topcoloralpha
func (g *GradientMaterial) SetTopColorAlpha(topColorAlpha float64) *GradientMaterial {
	p := ba.ctx.Get("GradientMaterial").New(topColorAlpha)
	return GradientMaterialFromJSObject(p, ba.ctx)
}

*/
