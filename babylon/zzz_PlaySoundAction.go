// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PlaySoundAction represents a babylon.js PlaySoundAction.
// This defines an action helpful to play a defined sound on a triggered action.
type PlaySoundAction struct {
	*Action
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PlaySoundAction) JSObject() js.Value { return p.p }

// PlaySoundAction returns a PlaySoundAction JavaScript class.
func (ba *Babylon) PlaySoundAction() *PlaySoundAction {
	p := ba.ctx.Get("PlaySoundAction")
	return PlaySoundActionFromJSObject(p, ba.ctx)
}

// PlaySoundActionFromJSObject returns a wrapped PlaySoundAction JavaScript class.
func PlaySoundActionFromJSObject(p js.Value, ctx js.Value) *PlaySoundAction {
	return &PlaySoundAction{Action: ActionFromJSObject(p, ctx), ctx: ctx}
}

// PlaySoundActionArrayToJSArray returns a JavaScript Array for the wrapped array.
func PlaySoundActionArrayToJSArray(array []*PlaySoundAction) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPlaySoundActionOpts contains optional parameters for NewPlaySoundAction.
type NewPlaySoundActionOpts struct {
	Condition *Condition
}

// NewPlaySoundAction returns a new PlaySoundAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.playsoundaction#constructor
func (ba *Babylon) NewPlaySoundAction(triggerOptions JSObject, sound *Sound, opts *NewPlaySoundActionOpts) *PlaySoundAction {
	if opts == nil {
		opts = &NewPlaySoundActionOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, triggerOptions.JSObject())
	args = append(args, sound.JSObject())

	if opts.Condition == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Condition.JSObject())
	}

	p := ba.ctx.Get("PlaySoundAction").New(args...)
	return PlaySoundActionFromJSObject(p, ba.ctx)
}

// Execute calls the Execute method on the PlaySoundAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.playsoundaction#execute
func (p *PlaySoundAction) Execute() {

	p.p.Call("execute")
}

// Serialize calls the Serialize method on the PlaySoundAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.playsoundaction#serialize
func (p *PlaySoundAction) Serialize(parent JSObject) js.Value {

	args := make([]interface{}, 0, 1+0)

	if parent == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, parent.JSObject())
	}

	retVal := p.p.Call("serialize", args...)
	return retVal
}
