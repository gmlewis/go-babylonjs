// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SubMesh represents a babylon.js SubMesh.
// Defines a subdivision inside a mesh
type SubMesh struct{ *BaseSubMesh }

// JSObject returns the underlying js.Value.
func (s *SubMesh) JSObject() js.Value { return s.p }

// SubMesh returns a SubMesh JavaScript class.
func (ba *Babylon) SubMesh() *SubMesh {
	p := ba.ctx.Get("SubMesh")
	return SubMeshFromJSObject(p)
}

// SubMeshFromJSObject returns a wrapped SubMesh JavaScript class.
func SubMeshFromJSObject(p js.Value) *SubMesh {
	return &SubMesh{BaseSubMeshFromJSObject(p)}
}

// NewSubMeshOpts contains optional parameters for NewSubMesh.
type NewSubMeshOpts struct {
	RenderingMesh *Mesh

	CreateBoundingBox *JSBool
}

// NewSubMesh returns a new SubMesh object.
//
// https://doc.babylonjs.com/api/classes/babylon.submesh
func (ba *Babylon) NewSubMesh(materialIndex float64, verticesStart float64, verticesCount float64, indexStart float64, indexCount float64, mesh *AbstractMesh, opts *NewSubMeshOpts) *SubMesh {
	if opts == nil {
		opts = &NewSubMeshOpts{}
	}

	p := ba.ctx.Get("SubMesh").New(materialIndex, verticesStart, verticesCount, indexStart, indexCount, mesh.JSObject(), opts.RenderingMesh.JSObject(), opts.CreateBoundingBox)
	return SubMeshFromJSObject(p)
}

// TODO: methods
