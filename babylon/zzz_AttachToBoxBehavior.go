// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// AttachToBoxBehavior represents a babylon.js AttachToBoxBehavior.
// A behavior that when attached to a mesh will will place a specified node on the meshes face pointing towards the camera
type AttachToBoxBehavior struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *AttachToBoxBehavior) JSObject() js.Value { return a.p }

// AttachToBoxBehavior returns a AttachToBoxBehavior JavaScript class.
func (ba *Babylon) AttachToBoxBehavior() *AttachToBoxBehavior {
	p := ba.ctx.Get("AttachToBoxBehavior")
	return AttachToBoxBehaviorFromJSObject(p, ba.ctx)
}

// AttachToBoxBehaviorFromJSObject returns a wrapped AttachToBoxBehavior JavaScript class.
func AttachToBoxBehaviorFromJSObject(p js.Value, ctx js.Value) *AttachToBoxBehavior {
	return &AttachToBoxBehavior{p: p, ctx: ctx}
}

// AttachToBoxBehaviorArrayToJSArray returns a JavaScript Array for the wrapped array.
func AttachToBoxBehaviorArrayToJSArray(array []*AttachToBoxBehavior) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewAttachToBoxBehavior returns a new AttachToBoxBehavior object.
//
// https://doc.babylonjs.com/api/classes/babylon.attachtoboxbehavior
func (ba *Babylon) NewAttachToBoxBehavior(ui *TransformNode) *AttachToBoxBehavior {

	args := make([]interface{}, 0, 1+0)

	args = append(args, ui.JSObject())

	p := ba.ctx.Get("AttachToBoxBehavior").New(args...)
	return AttachToBoxBehaviorFromJSObject(p, ba.ctx)
}

// Attach calls the Attach method on the AttachToBoxBehavior object.
//
// https://doc.babylonjs.com/api/classes/babylon.attachtoboxbehavior#attach
func (a *AttachToBoxBehavior) Attach(target *Mesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, target.JSObject())

	a.p.Call("attach", args...)
}

// Detach calls the Detach method on the AttachToBoxBehavior object.
//
// https://doc.babylonjs.com/api/classes/babylon.attachtoboxbehavior#detach
func (a *AttachToBoxBehavior) Detach() {

	a.p.Call("detach")
}

// Init calls the Init method on the AttachToBoxBehavior object.
//
// https://doc.babylonjs.com/api/classes/babylon.attachtoboxbehavior#init
func (a *AttachToBoxBehavior) Init() {

	a.p.Call("init")
}

/*

// DistanceAwayFromBottomOfFace returns the DistanceAwayFromBottomOfFace property of class AttachToBoxBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.attachtoboxbehavior#distanceawayfrombottomofface
func (a *AttachToBoxBehavior) DistanceAwayFromBottomOfFace(distanceAwayFromBottomOfFace float64) *AttachToBoxBehavior {
	p := ba.ctx.Get("AttachToBoxBehavior").New(distanceAwayFromBottomOfFace)
	return AttachToBoxBehaviorFromJSObject(p, ba.ctx)
}

// SetDistanceAwayFromBottomOfFace sets the DistanceAwayFromBottomOfFace property of class AttachToBoxBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.attachtoboxbehavior#distanceawayfrombottomofface
func (a *AttachToBoxBehavior) SetDistanceAwayFromBottomOfFace(distanceAwayFromBottomOfFace float64) *AttachToBoxBehavior {
	p := ba.ctx.Get("AttachToBoxBehavior").New(distanceAwayFromBottomOfFace)
	return AttachToBoxBehaviorFromJSObject(p, ba.ctx)
}

// DistanceAwayFromFace returns the DistanceAwayFromFace property of class AttachToBoxBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.attachtoboxbehavior#distanceawayfromface
func (a *AttachToBoxBehavior) DistanceAwayFromFace(distanceAwayFromFace float64) *AttachToBoxBehavior {
	p := ba.ctx.Get("AttachToBoxBehavior").New(distanceAwayFromFace)
	return AttachToBoxBehaviorFromJSObject(p, ba.ctx)
}

// SetDistanceAwayFromFace sets the DistanceAwayFromFace property of class AttachToBoxBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.attachtoboxbehavior#distanceawayfromface
func (a *AttachToBoxBehavior) SetDistanceAwayFromFace(distanceAwayFromFace float64) *AttachToBoxBehavior {
	p := ba.ctx.Get("AttachToBoxBehavior").New(distanceAwayFromFace)
	return AttachToBoxBehaviorFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class AttachToBoxBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.attachtoboxbehavior#name
func (a *AttachToBoxBehavior) Name(name string) *AttachToBoxBehavior {
	p := ba.ctx.Get("AttachToBoxBehavior").New(name)
	return AttachToBoxBehaviorFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class AttachToBoxBehavior.
//
// https://doc.babylonjs.com/api/classes/babylon.attachtoboxbehavior#name
func (a *AttachToBoxBehavior) SetName(name string) *AttachToBoxBehavior {
	p := ba.ctx.Get("AttachToBoxBehavior").New(name)
	return AttachToBoxBehaviorFromJSObject(p, ba.ctx)
}

*/
