// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// EngineInstrumentation represents a babylon.js EngineInstrumentation.
// This class can be used to get instrumentation data from a Babylon engine
//
// See: http://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation
type EngineInstrumentation struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *EngineInstrumentation) JSObject() js.Value { return e.p }

// EngineInstrumentation returns a EngineInstrumentation JavaScript class.
func (ba *Babylon) EngineInstrumentation() *EngineInstrumentation {
	p := ba.ctx.Get("EngineInstrumentation")
	return EngineInstrumentationFromJSObject(p, ba.ctx)
}

// EngineInstrumentationFromJSObject returns a wrapped EngineInstrumentation JavaScript class.
func EngineInstrumentationFromJSObject(p js.Value, ctx js.Value) *EngineInstrumentation {
	return &EngineInstrumentation{p: p, ctx: ctx}
}

// NewEngineInstrumentation returns a new EngineInstrumentation object.
//
// https://doc.babylonjs.com/api/classes/babylon.engineinstrumentation
func (ba *Babylon) NewEngineInstrumentation(engine *Engine) *EngineInstrumentation {

	args := make([]interface{}, 0, 1+0)

	args = append(args, engine.JSObject())

	p := ba.ctx.Get("EngineInstrumentation").New(args...)
	return EngineInstrumentationFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the EngineInstrumentation object.
//
// https://doc.babylonjs.com/api/classes/babylon.engineinstrumentation#dispose
func (e *EngineInstrumentation) Dispose() {

	args := make([]interface{}, 0, 0+0)

	e.p.Call("dispose", args...)
}

/*

// CaptureGPUFrameTime returns the CaptureGPUFrameTime property of class EngineInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.engineinstrumentation#capturegpuframetime
func (e *EngineInstrumentation) CaptureGPUFrameTime(captureGPUFrameTime bool) *EngineInstrumentation {
	p := ba.ctx.Get("EngineInstrumentation").New(captureGPUFrameTime)
	return EngineInstrumentationFromJSObject(p, ba.ctx)
}

// SetCaptureGPUFrameTime sets the CaptureGPUFrameTime property of class EngineInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.engineinstrumentation#capturegpuframetime
func (e *EngineInstrumentation) SetCaptureGPUFrameTime(captureGPUFrameTime bool) *EngineInstrumentation {
	p := ba.ctx.Get("EngineInstrumentation").New(captureGPUFrameTime)
	return EngineInstrumentationFromJSObject(p, ba.ctx)
}

// CaptureShaderCompilationTime returns the CaptureShaderCompilationTime property of class EngineInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.engineinstrumentation#captureshadercompilationtime
func (e *EngineInstrumentation) CaptureShaderCompilationTime(captureShaderCompilationTime bool) *EngineInstrumentation {
	p := ba.ctx.Get("EngineInstrumentation").New(captureShaderCompilationTime)
	return EngineInstrumentationFromJSObject(p, ba.ctx)
}

// SetCaptureShaderCompilationTime sets the CaptureShaderCompilationTime property of class EngineInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.engineinstrumentation#captureshadercompilationtime
func (e *EngineInstrumentation) SetCaptureShaderCompilationTime(captureShaderCompilationTime bool) *EngineInstrumentation {
	p := ba.ctx.Get("EngineInstrumentation").New(captureShaderCompilationTime)
	return EngineInstrumentationFromJSObject(p, ba.ctx)
}

// Engine returns the Engine property of class EngineInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.engineinstrumentation#engine
func (e *EngineInstrumentation) Engine(engine *Engine) *EngineInstrumentation {
	p := ba.ctx.Get("EngineInstrumentation").New(engine.JSObject())
	return EngineInstrumentationFromJSObject(p, ba.ctx)
}

// SetEngine sets the Engine property of class EngineInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.engineinstrumentation#engine
func (e *EngineInstrumentation) SetEngine(engine *Engine) *EngineInstrumentation {
	p := ba.ctx.Get("EngineInstrumentation").New(engine.JSObject())
	return EngineInstrumentationFromJSObject(p, ba.ctx)
}

// GpuFrameTimeCounter returns the GpuFrameTimeCounter property of class EngineInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.engineinstrumentation#gpuframetimecounter
func (e *EngineInstrumentation) GpuFrameTimeCounter(gpuFrameTimeCounter *PerfCounter) *EngineInstrumentation {
	p := ba.ctx.Get("EngineInstrumentation").New(gpuFrameTimeCounter.JSObject())
	return EngineInstrumentationFromJSObject(p, ba.ctx)
}

// SetGpuFrameTimeCounter sets the GpuFrameTimeCounter property of class EngineInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.engineinstrumentation#gpuframetimecounter
func (e *EngineInstrumentation) SetGpuFrameTimeCounter(gpuFrameTimeCounter *PerfCounter) *EngineInstrumentation {
	p := ba.ctx.Get("EngineInstrumentation").New(gpuFrameTimeCounter.JSObject())
	return EngineInstrumentationFromJSObject(p, ba.ctx)
}

// ShaderCompilationTimeCounter returns the ShaderCompilationTimeCounter property of class EngineInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.engineinstrumentation#shadercompilationtimecounter
func (e *EngineInstrumentation) ShaderCompilationTimeCounter(shaderCompilationTimeCounter *PerfCounter) *EngineInstrumentation {
	p := ba.ctx.Get("EngineInstrumentation").New(shaderCompilationTimeCounter.JSObject())
	return EngineInstrumentationFromJSObject(p, ba.ctx)
}

// SetShaderCompilationTimeCounter sets the ShaderCompilationTimeCounter property of class EngineInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.engineinstrumentation#shadercompilationtimecounter
func (e *EngineInstrumentation) SetShaderCompilationTimeCounter(shaderCompilationTimeCounter *PerfCounter) *EngineInstrumentation {
	p := ba.ctx.Get("EngineInstrumentation").New(shaderCompilationTimeCounter.JSObject())
	return EngineInstrumentationFromJSObject(p, ba.ctx)
}

*/
