// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BasisTranscodeConfiguration represents a babylon.js BasisTranscodeConfiguration.
// Configuration options for the Basis transcoder
type BasisTranscodeConfiguration struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BasisTranscodeConfiguration) JSObject() js.Value { return b.p }

// BasisTranscodeConfiguration returns a BasisTranscodeConfiguration JavaScript class.
func (ba *Babylon) BasisTranscodeConfiguration() *BasisTranscodeConfiguration {
	p := ba.ctx.Get("BasisTranscodeConfiguration")
	return BasisTranscodeConfigurationFromJSObject(p, ba.ctx)
}

// BasisTranscodeConfigurationFromJSObject returns a wrapped BasisTranscodeConfiguration JavaScript class.
func BasisTranscodeConfigurationFromJSObject(p js.Value, ctx js.Value) *BasisTranscodeConfiguration {
	return &BasisTranscodeConfiguration{p: p, ctx: ctx}
}

// BasisTranscodeConfigurationArrayToJSArray returns a JavaScript Array for the wrapped array.
func BasisTranscodeConfigurationArrayToJSArray(array []*BasisTranscodeConfiguration) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// LoadMipmapLevels returns the LoadMipmapLevels property of class BasisTranscodeConfiguration.
//
// https://doc.babylonjs.com/api/classes/babylon.basistranscodeconfiguration#loadmipmaplevels
func (b *BasisTranscodeConfiguration) LoadMipmapLevels(loadMipmapLevels bool) *BasisTranscodeConfiguration {
	p := ba.ctx.Get("BasisTranscodeConfiguration").New(loadMipmapLevels)
	return BasisTranscodeConfigurationFromJSObject(p, ba.ctx)
}

// SetLoadMipmapLevels sets the LoadMipmapLevels property of class BasisTranscodeConfiguration.
//
// https://doc.babylonjs.com/api/classes/babylon.basistranscodeconfiguration#loadmipmaplevels
func (b *BasisTranscodeConfiguration) SetLoadMipmapLevels(loadMipmapLevels bool) *BasisTranscodeConfiguration {
	p := ba.ctx.Get("BasisTranscodeConfiguration").New(loadMipmapLevels)
	return BasisTranscodeConfigurationFromJSObject(p, ba.ctx)
}

// LoadSingleImage returns the LoadSingleImage property of class BasisTranscodeConfiguration.
//
// https://doc.babylonjs.com/api/classes/babylon.basistranscodeconfiguration#loadsingleimage
func (b *BasisTranscodeConfiguration) LoadSingleImage(loadSingleImage float64) *BasisTranscodeConfiguration {
	p := ba.ctx.Get("BasisTranscodeConfiguration").New(loadSingleImage)
	return BasisTranscodeConfigurationFromJSObject(p, ba.ctx)
}

// SetLoadSingleImage sets the LoadSingleImage property of class BasisTranscodeConfiguration.
//
// https://doc.babylonjs.com/api/classes/babylon.basistranscodeconfiguration#loadsingleimage
func (b *BasisTranscodeConfiguration) SetLoadSingleImage(loadSingleImage float64) *BasisTranscodeConfiguration {
	p := ba.ctx.Get("BasisTranscodeConfiguration").New(loadSingleImage)
	return BasisTranscodeConfigurationFromJSObject(p, ba.ctx)
}

// SupportedCompressionFormats returns the SupportedCompressionFormats property of class BasisTranscodeConfiguration.
//
// https://doc.babylonjs.com/api/classes/babylon.basistranscodeconfiguration#supportedcompressionformats
func (b *BasisTranscodeConfiguration) SupportedCompressionFormats(supportedCompressionFormats js.Value) *BasisTranscodeConfiguration {
	p := ba.ctx.Get("BasisTranscodeConfiguration").New(supportedCompressionFormats)
	return BasisTranscodeConfigurationFromJSObject(p, ba.ctx)
}

// SetSupportedCompressionFormats sets the SupportedCompressionFormats property of class BasisTranscodeConfiguration.
//
// https://doc.babylonjs.com/api/classes/babylon.basistranscodeconfiguration#supportedcompressionformats
func (b *BasisTranscodeConfiguration) SetSupportedCompressionFormats(supportedCompressionFormats js.Value) *BasisTranscodeConfiguration {
	p := ba.ctx.Get("BasisTranscodeConfiguration").New(supportedCompressionFormats)
	return BasisTranscodeConfigurationFromJSObject(p, ba.ctx)
}

*/
