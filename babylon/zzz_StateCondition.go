// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// StateCondition represents a babylon.js StateCondition.
// Defines a state condition as an extension of Condition
type StateCondition struct{ *Condition }

// JSObject returns the underlying js.Value.
func (s *StateCondition) JSObject() js.Value { return s.p }

// StateCondition returns a StateCondition JavaScript class.
func (b *Babylon) StateCondition() *StateCondition {
	p := b.ctx.Get("StateCondition")
	return StateConditionFromJSObject(p)
}

// StateConditionFromJSObject returns a wrapped StateCondition JavaScript class.
func StateConditionFromJSObject(p js.Value) *StateCondition {
	return &StateCondition{ConditionFromJSObject(p)}
}

// NewStateCondition returns a new StateCondition object.
//
// https://doc.babylonjs.com/api/classes/babylon.statecondition
func (b *Babylon) NewStateCondition(todo parameters) *StateCondition {
	p := b.ctx.Get("StateCondition").New(todo)
	return StateConditionFromJSObject(p)
}

// TODO: methods
