// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// StateCondition represents a babylon.js StateCondition.
// Defines a state condition as an extension of Condition
type StateCondition struct {
	*Condition
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *StateCondition) JSObject() js.Value { return s.p }

// StateCondition returns a StateCondition JavaScript class.
func (ba *Babylon) StateCondition() *StateCondition {
	p := ba.ctx.Get("StateCondition")
	return StateConditionFromJSObject(p, ba.ctx)
}

// StateConditionFromJSObject returns a wrapped StateCondition JavaScript class.
func StateConditionFromJSObject(p js.Value, ctx js.Value) *StateCondition {
	return &StateCondition{Condition: ConditionFromJSObject(p, ctx), ctx: ctx}
}

// StateConditionArrayToJSArray returns a JavaScript Array for the wrapped array.
func StateConditionArrayToJSArray(array []*StateCondition) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewStateCondition returns a new StateCondition object.
//
// https://doc.babylonjs.com/api/classes/babylon.statecondition
func (ba *Babylon) NewStateCondition(actionManager *ActionManager, target JSObject, value string) *StateCondition {

	args := make([]interface{}, 0, 3+0)

	args = append(args, actionManager.JSObject())
	args = append(args, target.JSObject())
	args = append(args, value)

	p := ba.ctx.Get("StateCondition").New(args...)
	return StateConditionFromJSObject(p, ba.ctx)
}

// IsValid calls the IsValid method on the StateCondition object.
//
// https://doc.babylonjs.com/api/classes/babylon.statecondition#isvalid
func (s *StateCondition) IsValid() bool {

	retVal := s.p.Call("isValid")
	return retVal.Bool()
}

// Serialize calls the Serialize method on the StateCondition object.
//
// https://doc.babylonjs.com/api/classes/babylon.statecondition#serialize
func (s *StateCondition) Serialize() js.Value {

	retVal := s.p.Call("serialize")
	return retVal
}

// Value returns the Value property of class StateCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.statecondition#value
func (s *StateCondition) Value() string {
	retVal := s.p.Get("value")
	return retVal.String()
}

// SetValue sets the Value property of class StateCondition.
//
// https://doc.babylonjs.com/api/classes/babylon.statecondition#value
func (s *StateCondition) SetValue(value string) *StateCondition {
	s.p.Set("value", value)
	return s
}
