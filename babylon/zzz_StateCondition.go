// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// StateCondition represents a babylon.js StateCondition.
// Defines a state condition as an extension of Condition
type StateCondition struct {
	*Condition
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *StateCondition) JSObject() js.Value { return s.p }

// StateCondition returns a StateCondition JavaScript class.
func (ba *Babylon) StateCondition() *StateCondition {
	p := ba.ctx.Get("StateCondition")
	return StateConditionFromJSObject(p, ba.ctx)
}

// StateConditionFromJSObject returns a wrapped StateCondition JavaScript class.
func StateConditionFromJSObject(p js.Value, ctx js.Value) *StateCondition {
	return &StateCondition{Condition: ConditionFromJSObject(p, ctx), ctx: ctx}
}

// NewStateCondition returns a new StateCondition object.
//
// https://doc.babylonjs.com/api/classes/babylon.statecondition
func (ba *Babylon) NewStateCondition(actionManager *ActionManager, target interface{}, value string) *StateCondition {
	p := ba.ctx.Get("StateCondition").New(actionManager.JSObject(), target, value)
	return StateConditionFromJSObject(p, ba.ctx)
}

// TODO: methods
