// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RotationGizmo represents a babylon.js RotationGizmo.
// Gizmo that enables rotating a mesh along 3 axis
type RotationGizmo struct {
	*Gizmo
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RotationGizmo) JSObject() js.Value { return r.p }

// RotationGizmo returns a RotationGizmo JavaScript class.
func (ba *Babylon) RotationGizmo() *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo")
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// RotationGizmoFromJSObject returns a wrapped RotationGizmo JavaScript class.
func RotationGizmoFromJSObject(p js.Value, ctx js.Value) *RotationGizmo {
	return &RotationGizmo{Gizmo: GizmoFromJSObject(p, ctx), ctx: ctx}
}

// NewRotationGizmoOpts contains optional parameters for NewRotationGizmo.
type NewRotationGizmoOpts struct {
	GizmoLayer *UtilityLayerRenderer

	Tessellation *JSFloat64

	UseEulerRotation *JSBool
}

// NewRotationGizmo returns a new RotationGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo
func (ba *Babylon) NewRotationGizmo(opts *NewRotationGizmoOpts) *RotationGizmo {
	if opts == nil {
		opts = &NewRotationGizmoOpts{}
	}

	p := ba.ctx.Get("RotationGizmo").New(opts.GizmoLayer.JSObject(), opts.Tessellation.JSObject(), opts.UseEulerRotation.JSObject())
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// TODO: methods
