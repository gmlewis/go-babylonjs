// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RotationGizmo represents a babylon.js RotationGizmo.
// Gizmo that enables rotating a mesh along 3 axis
type RotationGizmo struct {
	*Gizmo
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RotationGizmo) JSObject() js.Value { return r.p }

// RotationGizmo returns a RotationGizmo JavaScript class.
func (ba *Babylon) RotationGizmo() *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo")
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// RotationGizmoFromJSObject returns a wrapped RotationGizmo JavaScript class.
func RotationGizmoFromJSObject(p js.Value, ctx js.Value) *RotationGizmo {
	return &RotationGizmo{Gizmo: GizmoFromJSObject(p, ctx), ctx: ctx}
}

// RotationGizmoArrayToJSArray returns a JavaScript Array for the wrapped array.
func RotationGizmoArrayToJSArray(array []*RotationGizmo) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewRotationGizmoOpts contains optional parameters for NewRotationGizmo.
type NewRotationGizmoOpts struct {
	GizmoLayer       *UtilityLayerRenderer
	Tessellation     *float64
	UseEulerRotation *bool
}

// NewRotationGizmo returns a new RotationGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo
func (ba *Babylon) NewRotationGizmo(opts *NewRotationGizmoOpts) *RotationGizmo {
	if opts == nil {
		opts = &NewRotationGizmoOpts{}
	}

	args := make([]interface{}, 0, 0+3)

	if opts.GizmoLayer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.GizmoLayer.JSObject())
	}
	if opts.Tessellation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Tessellation)
	}
	if opts.UseEulerRotation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseEulerRotation)
	}

	p := ba.ctx.Get("RotationGizmo").New(args...)
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the RotationGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#dispose
func (r *RotationGizmo) Dispose() {

	r.p.Call("dispose")
}

// SetCustomMesh calls the SetCustomMesh method on the RotationGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#setcustommesh
func (r *RotationGizmo) SetCustomMesh(mesh *Mesh) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	r.p.Call("setCustomMesh", args...)
}

/*

// AttachedMesh returns the AttachedMesh property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#attachedmesh
func (r *RotationGizmo) AttachedMesh(attachedMesh *AbstractMesh) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(attachedMesh.JSObject())
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// SetAttachedMesh sets the AttachedMesh property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#attachedmesh
func (r *RotationGizmo) SetAttachedMesh(attachedMesh *AbstractMesh) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(attachedMesh.JSObject())
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// OnDragEndObservable returns the OnDragEndObservable property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#ondragendobservable
func (r *RotationGizmo) OnDragEndObservable(onDragEndObservable *Observable) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(onDragEndObservable.JSObject())
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// SetOnDragEndObservable sets the OnDragEndObservable property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#ondragendobservable
func (r *RotationGizmo) SetOnDragEndObservable(onDragEndObservable *Observable) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(onDragEndObservable.JSObject())
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// OnDragStartObservable returns the OnDragStartObservable property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#ondragstartobservable
func (r *RotationGizmo) OnDragStartObservable(onDragStartObservable *Observable) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(onDragStartObservable.JSObject())
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// SetOnDragStartObservable sets the OnDragStartObservable property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#ondragstartobservable
func (r *RotationGizmo) SetOnDragStartObservable(onDragStartObservable *Observable) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(onDragStartObservable.JSObject())
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// ScaleRatio returns the ScaleRatio property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#scaleratio
func (r *RotationGizmo) ScaleRatio(scaleRatio float64) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(scaleRatio)
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// SetScaleRatio sets the ScaleRatio property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#scaleratio
func (r *RotationGizmo) SetScaleRatio(scaleRatio float64) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(scaleRatio)
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// SnapDistance returns the SnapDistance property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#snapdistance
func (r *RotationGizmo) SnapDistance(snapDistance float64) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(snapDistance)
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// SetSnapDistance sets the SnapDistance property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#snapdistance
func (r *RotationGizmo) SetSnapDistance(snapDistance float64) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(snapDistance)
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// UpdateGizmoRotationToMatchAttachedMesh returns the UpdateGizmoRotationToMatchAttachedMesh property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#updategizmorotationtomatchattachedmesh
func (r *RotationGizmo) UpdateGizmoRotationToMatchAttachedMesh(updateGizmoRotationToMatchAttachedMesh bool) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(updateGizmoRotationToMatchAttachedMesh)
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// SetUpdateGizmoRotationToMatchAttachedMesh sets the UpdateGizmoRotationToMatchAttachedMesh property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#updategizmorotationtomatchattachedmesh
func (r *RotationGizmo) SetUpdateGizmoRotationToMatchAttachedMesh(updateGizmoRotationToMatchAttachedMesh bool) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(updateGizmoRotationToMatchAttachedMesh)
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// XGizmo returns the XGizmo property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#xgizmo
func (r *RotationGizmo) XGizmo(xGizmo *PlaneRotationGizmo) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(xGizmo.JSObject())
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// SetXGizmo sets the XGizmo property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#xgizmo
func (r *RotationGizmo) SetXGizmo(xGizmo *PlaneRotationGizmo) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(xGizmo.JSObject())
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// YGizmo returns the YGizmo property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#ygizmo
func (r *RotationGizmo) YGizmo(yGizmo *PlaneRotationGizmo) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(yGizmo.JSObject())
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// SetYGizmo sets the YGizmo property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#ygizmo
func (r *RotationGizmo) SetYGizmo(yGizmo *PlaneRotationGizmo) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(yGizmo.JSObject())
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// ZGizmo returns the ZGizmo property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#zgizmo
func (r *RotationGizmo) ZGizmo(zGizmo *PlaneRotationGizmo) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(zGizmo.JSObject())
	return RotationGizmoFromJSObject(p, ba.ctx)
}

// SetZGizmo sets the ZGizmo property of class RotationGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.rotationgizmo#zgizmo
func (r *RotationGizmo) SetZGizmo(zGizmo *PlaneRotationGizmo) *RotationGizmo {
	p := ba.ctx.Get("RotationGizmo").New(zGizmo.JSObject())
	return RotationGizmoFromJSObject(p, ba.ctx)
}

*/
