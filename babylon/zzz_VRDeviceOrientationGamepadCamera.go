// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// VRDeviceOrientationGamepadCamera represents a babylon.js VRDeviceOrientationGamepadCamera.
// Camera used to simulate VR rendering (based on VRDeviceOrientationFreeCamera)
//
// See: http://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras
type VRDeviceOrientationGamepadCamera struct {
	*VRDeviceOrientationFreeCamera
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *VRDeviceOrientationGamepadCamera) JSObject() js.Value { return v.p }

// VRDeviceOrientationGamepadCamera returns a VRDeviceOrientationGamepadCamera JavaScript class.
func (ba *Babylon) VRDeviceOrientationGamepadCamera() *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera")
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// VRDeviceOrientationGamepadCameraFromJSObject returns a wrapped VRDeviceOrientationGamepadCamera JavaScript class.
func VRDeviceOrientationGamepadCameraFromJSObject(p js.Value, ctx js.Value) *VRDeviceOrientationGamepadCamera {
	return &VRDeviceOrientationGamepadCamera{VRDeviceOrientationFreeCamera: VRDeviceOrientationFreeCameraFromJSObject(p, ctx), ctx: ctx}
}

// VRDeviceOrientationGamepadCameraArrayToJSArray returns a JavaScript Array for the wrapped array.
func VRDeviceOrientationGamepadCameraArrayToJSArray(array []*VRDeviceOrientationGamepadCamera) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewVRDeviceOrientationGamepadCameraOpts contains optional parameters for NewVRDeviceOrientationGamepadCamera.
type NewVRDeviceOrientationGamepadCameraOpts struct {
	CompensateDistortion *bool
	VrCameraMetrics      *VRCameraMetrics
}

// NewVRDeviceOrientationGamepadCamera returns a new VRDeviceOrientationGamepadCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera
func (ba *Babylon) NewVRDeviceOrientationGamepadCamera(name string, position *Vector3, scene *Scene, opts *NewVRDeviceOrientationGamepadCameraOpts) *VRDeviceOrientationGamepadCamera {
	if opts == nil {
		opts = &NewVRDeviceOrientationGamepadCameraOpts{}
	}

	args := make([]interface{}, 0, 3+2)

	args = append(args, name)
	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	if opts.CompensateDistortion == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CompensateDistortion)
	}
	if opts.VrCameraMetrics == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.VrCameraMetrics.JSObject())
	}

	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(args...)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// VRDeviceOrientationGamepadCameraAttachControlOpts contains optional parameters for VRDeviceOrientationGamepadCamera.AttachControl.
type VRDeviceOrientationGamepadCameraAttachControlOpts struct {
	NoPreventDefault *bool
}

// AttachControl calls the AttachControl method on the VRDeviceOrientationGamepadCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#attachcontrol
func (v *VRDeviceOrientationGamepadCamera) AttachControl(element js.Value, opts *VRDeviceOrientationGamepadCameraAttachControlOpts) {
	if opts == nil {
		opts = &VRDeviceOrientationGamepadCameraAttachControlOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, element)

	if opts.NoPreventDefault == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoPreventDefault)
	}

	v.p.Call("attachControl", args...)
}

// DetachControl calls the DetachControl method on the VRDeviceOrientationGamepadCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#detachcontrol
func (v *VRDeviceOrientationGamepadCamera) DetachControl(element js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, element)

	v.p.Call("detachControl", args...)
}

// Dispose calls the Dispose method on the VRDeviceOrientationGamepadCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#dispose
func (v *VRDeviceOrientationGamepadCamera) Dispose() {

	v.p.Call("dispose")
}

// VRDeviceOrientationGamepadCameraEnableHorizontalDraggingOpts contains optional parameters for VRDeviceOrientationGamepadCamera.EnableHorizontalDragging.
type VRDeviceOrientationGamepadCameraEnableHorizontalDraggingOpts struct {
	DragFactor *float64
}

// EnableHorizontalDragging calls the EnableHorizontalDragging method on the VRDeviceOrientationGamepadCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#enablehorizontaldragging
func (v *VRDeviceOrientationGamepadCamera) EnableHorizontalDragging(opts *VRDeviceOrientationGamepadCameraEnableHorizontalDraggingOpts) {
	if opts == nil {
		opts = &VRDeviceOrientationGamepadCameraEnableHorizontalDraggingOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.DragFactor == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DragFactor)
	}

	v.p.Call("enableHorizontalDragging", args...)
}

// GetClassName calls the GetClassName method on the VRDeviceOrientationGamepadCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#getclassname
func (v *VRDeviceOrientationGamepadCamera) GetClassName() string {

	retVal := v.p.Call("getClassName")
	return retVal.String()
}

// GetFrontPosition calls the GetFrontPosition method on the VRDeviceOrientationGamepadCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#getfrontposition
func (v *VRDeviceOrientationGamepadCamera) GetFrontPosition(distance float64) *Vector3 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, distance)

	retVal := v.p.Call("getFrontPosition", args...)
	return Vector3FromJSObject(retVal, v.ctx)
}

// GetTarget calls the GetTarget method on the VRDeviceOrientationGamepadCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#gettarget
func (v *VRDeviceOrientationGamepadCamera) GetTarget() *Vector3 {

	retVal := v.p.Call("getTarget")
	return Vector3FromJSObject(retVal, v.ctx)
}

// VRDeviceOrientationGamepadCameraResetToCurrentRotationOpts contains optional parameters for VRDeviceOrientationGamepadCamera.ResetToCurrentRotation.
type VRDeviceOrientationGamepadCameraResetToCurrentRotationOpts struct {
	Axis *Axis
}

// ResetToCurrentRotation calls the ResetToCurrentRotation method on the VRDeviceOrientationGamepadCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#resettocurrentrotation
func (v *VRDeviceOrientationGamepadCamera) ResetToCurrentRotation(opts *VRDeviceOrientationGamepadCameraResetToCurrentRotationOpts) {
	if opts == nil {
		opts = &VRDeviceOrientationGamepadCameraResetToCurrentRotationOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Axis == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Axis.JSObject())
	}

	v.p.Call("resetToCurrentRotation", args...)
}

// SetTarget calls the SetTarget method on the VRDeviceOrientationGamepadCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#settarget
func (v *VRDeviceOrientationGamepadCamera) SetTarget(target *Vector3) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, target.JSObject())

	v.p.Call("setTarget", args...)
}

// StoreState calls the StoreState method on the VRDeviceOrientationGamepadCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#storestate
func (v *VRDeviceOrientationGamepadCamera) StoreState() *Camera {

	retVal := v.p.Call("storeState")
	return CameraFromJSObject(retVal, v.ctx)
}

/*

// AngularSensibility returns the AngularSensibility property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#angularsensibility
func (v *VRDeviceOrientationGamepadCamera) AngularSensibility(angularSensibility float64) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(angularSensibility)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetAngularSensibility sets the AngularSensibility property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#angularsensibility
func (v *VRDeviceOrientationGamepadCamera) SetAngularSensibility(angularSensibility float64) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(angularSensibility)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// ApplyGravity returns the ApplyGravity property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#applygravity
func (v *VRDeviceOrientationGamepadCamera) ApplyGravity(applyGravity bool) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(applyGravity)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetApplyGravity sets the ApplyGravity property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#applygravity
func (v *VRDeviceOrientationGamepadCamera) SetApplyGravity(applyGravity bool) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(applyGravity)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// CameraDirection returns the CameraDirection property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#cameradirection
func (v *VRDeviceOrientationGamepadCamera) CameraDirection(cameraDirection *Vector3) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(cameraDirection.JSObject())
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetCameraDirection sets the CameraDirection property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#cameradirection
func (v *VRDeviceOrientationGamepadCamera) SetCameraDirection(cameraDirection *Vector3) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(cameraDirection.JSObject())
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// CameraRotation returns the CameraRotation property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#camerarotation
func (v *VRDeviceOrientationGamepadCamera) CameraRotation(cameraRotation *Vector2) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(cameraRotation.JSObject())
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetCameraRotation sets the CameraRotation property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#camerarotation
func (v *VRDeviceOrientationGamepadCamera) SetCameraRotation(cameraRotation *Vector2) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(cameraRotation.JSObject())
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// CheckCollisions returns the CheckCollisions property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#checkcollisions
func (v *VRDeviceOrientationGamepadCamera) CheckCollisions(checkCollisions bool) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(checkCollisions)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetCheckCollisions sets the CheckCollisions property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#checkcollisions
func (v *VRDeviceOrientationGamepadCamera) SetCheckCollisions(checkCollisions bool) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(checkCollisions)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// CollisionMask returns the CollisionMask property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#collisionmask
func (v *VRDeviceOrientationGamepadCamera) CollisionMask(collisionMask float64) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(collisionMask)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetCollisionMask sets the CollisionMask property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#collisionmask
func (v *VRDeviceOrientationGamepadCamera) SetCollisionMask(collisionMask float64) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(collisionMask)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// DisablePointerInputWhenUsingDeviceOrientation returns the DisablePointerInputWhenUsingDeviceOrientation property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#disablepointerinputwhenusingdeviceorientation
func (v *VRDeviceOrientationGamepadCamera) DisablePointerInputWhenUsingDeviceOrientation(disablePointerInputWhenUsingDeviceOrientation bool) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(disablePointerInputWhenUsingDeviceOrientation)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetDisablePointerInputWhenUsingDeviceOrientation sets the DisablePointerInputWhenUsingDeviceOrientation property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#disablepointerinputwhenusingdeviceorientation
func (v *VRDeviceOrientationGamepadCamera) SetDisablePointerInputWhenUsingDeviceOrientation(disablePointerInputWhenUsingDeviceOrientation bool) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(disablePointerInputWhenUsingDeviceOrientation)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// Ellipsoid returns the Ellipsoid property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#ellipsoid
func (v *VRDeviceOrientationGamepadCamera) Ellipsoid(ellipsoid *Vector3) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(ellipsoid.JSObject())
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetEllipsoid sets the Ellipsoid property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#ellipsoid
func (v *VRDeviceOrientationGamepadCamera) SetEllipsoid(ellipsoid *Vector3) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(ellipsoid.JSObject())
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// EllipsoidOffset returns the EllipsoidOffset property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#ellipsoidoffset
func (v *VRDeviceOrientationGamepadCamera) EllipsoidOffset(ellipsoidOffset *Vector3) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(ellipsoidOffset.JSObject())
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetEllipsoidOffset sets the EllipsoidOffset property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#ellipsoidoffset
func (v *VRDeviceOrientationGamepadCamera) SetEllipsoidOffset(ellipsoidOffset *Vector3) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(ellipsoidOffset.JSObject())
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#inputs
func (v *VRDeviceOrientationGamepadCamera) Inputs(inputs *FreeCameraInputsManager) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(inputs.JSObject())
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#inputs
func (v *VRDeviceOrientationGamepadCamera) SetInputs(inputs *FreeCameraInputsManager) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(inputs.JSObject())
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// KeysDown returns the KeysDown property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#keysdown
func (v *VRDeviceOrientationGamepadCamera) KeysDown(keysDown float64) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(keysDown)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetKeysDown sets the KeysDown property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#keysdown
func (v *VRDeviceOrientationGamepadCamera) SetKeysDown(keysDown float64) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(keysDown)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// KeysLeft returns the KeysLeft property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#keysleft
func (v *VRDeviceOrientationGamepadCamera) KeysLeft(keysLeft float64) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(keysLeft)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetKeysLeft sets the KeysLeft property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#keysleft
func (v *VRDeviceOrientationGamepadCamera) SetKeysLeft(keysLeft float64) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(keysLeft)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// KeysRight returns the KeysRight property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#keysright
func (v *VRDeviceOrientationGamepadCamera) KeysRight(keysRight float64) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(keysRight)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetKeysRight sets the KeysRight property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#keysright
func (v *VRDeviceOrientationGamepadCamera) SetKeysRight(keysRight float64) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(keysRight)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// KeysUp returns the KeysUp property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#keysup
func (v *VRDeviceOrientationGamepadCamera) KeysUp(keysUp float64) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(keysUp)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetKeysUp sets the KeysUp property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#keysup
func (v *VRDeviceOrientationGamepadCamera) SetKeysUp(keysUp float64) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(keysUp)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// LockedTarget returns the LockedTarget property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#lockedtarget
func (v *VRDeviceOrientationGamepadCamera) LockedTarget(lockedTarget interface{}) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(lockedTarget)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetLockedTarget sets the LockedTarget property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#lockedtarget
func (v *VRDeviceOrientationGamepadCamera) SetLockedTarget(lockedTarget interface{}) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(lockedTarget)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// NoRotationConstraint returns the NoRotationConstraint property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#norotationconstraint
func (v *VRDeviceOrientationGamepadCamera) NoRotationConstraint(noRotationConstraint bool) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(noRotationConstraint)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetNoRotationConstraint sets the NoRotationConstraint property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#norotationconstraint
func (v *VRDeviceOrientationGamepadCamera) SetNoRotationConstraint(noRotationConstraint bool) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(noRotationConstraint)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// OnCollide returns the OnCollide property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#oncollide
func (v *VRDeviceOrientationGamepadCamera) OnCollide(onCollide func()) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onCollide(); return nil}))
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetOnCollide sets the OnCollide property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#oncollide
func (v *VRDeviceOrientationGamepadCamera) SetOnCollide(onCollide func()) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onCollide(); return nil}))
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// Rotation returns the Rotation property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#rotation
func (v *VRDeviceOrientationGamepadCamera) Rotation(rotation *Vector3) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(rotation.JSObject())
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetRotation sets the Rotation property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#rotation
func (v *VRDeviceOrientationGamepadCamera) SetRotation(rotation *Vector3) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(rotation.JSObject())
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// RotationQuaternion returns the RotationQuaternion property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#rotationquaternion
func (v *VRDeviceOrientationGamepadCamera) RotationQuaternion(rotationQuaternion *Quaternion) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(rotationQuaternion.JSObject())
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetRotationQuaternion sets the RotationQuaternion property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#rotationquaternion
func (v *VRDeviceOrientationGamepadCamera) SetRotationQuaternion(rotationQuaternion *Quaternion) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(rotationQuaternion.JSObject())
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// Speed returns the Speed property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#speed
func (v *VRDeviceOrientationGamepadCamera) Speed(speed float64) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(speed)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetSpeed sets the Speed property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#speed
func (v *VRDeviceOrientationGamepadCamera) SetSpeed(speed float64) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(speed)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// UpdateUpVectorFromRotation returns the UpdateUpVectorFromRotation property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#updateupvectorfromrotation
func (v *VRDeviceOrientationGamepadCamera) UpdateUpVectorFromRotation(updateUpVectorFromRotation bool) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(updateUpVectorFromRotation)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

// SetUpdateUpVectorFromRotation sets the UpdateUpVectorFromRotation property of class VRDeviceOrientationGamepadCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.vrdeviceorientationgamepadcamera#updateupvectorfromrotation
func (v *VRDeviceOrientationGamepadCamera) SetUpdateUpVectorFromRotation(updateUpVectorFromRotation bool) *VRDeviceOrientationGamepadCamera {
	p := ba.ctx.Get("VRDeviceOrientationGamepadCamera").New(updateUpVectorFromRotation)
	return VRDeviceOrientationGamepadCameraFromJSObject(p, ba.ctx)
}

*/
