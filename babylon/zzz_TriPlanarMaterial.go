// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TriPlanarMaterial represents a babylon.js TriPlanarMaterial.
//
type TriPlanarMaterial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (t *TriPlanarMaterial) JSObject() js.Value { return t.p }

// TriPlanarMaterial returns a TriPlanarMaterial JavaScript class.
func (ba *Babylon) TriPlanarMaterial() *TriPlanarMaterial {
	p := ba.ctx.Get("TriPlanarMaterial")
	return TriPlanarMaterialFromJSObject(p, ba.ctx)
}

// TriPlanarMaterialFromJSObject returns a wrapped TriPlanarMaterial JavaScript class.
func TriPlanarMaterialFromJSObject(p js.Value, ctx js.Value) *TriPlanarMaterial {
	return &TriPlanarMaterial{p: p, ctx: ctx}
}

// TriPlanarMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func TriPlanarMaterialArrayToJSArray(array []*TriPlanarMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewTriPlanarMaterial returns a new TriPlanarMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial
func (ba *Babylon) NewTriPlanarMaterial(name string, scene *Scene) *TriPlanarMaterial {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("TriPlanarMaterial").New(args...)
	return TriPlanarMaterialFromJSObject(p, ba.ctx)
}

// BindForSubMesh calls the BindForSubMesh method on the TriPlanarMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#bindforsubmesh
func (t *TriPlanarMaterial) BindForSubMesh(world *Matrix, mesh *Mesh, subMesh *SubMesh) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, world.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	t.p.Call("bindForSubMesh", args...)
}

// Clone calls the Clone method on the TriPlanarMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#clone
func (t *TriPlanarMaterial) Clone(name string) *TriPlanarMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := t.p.Call("clone", args...)
	return TriPlanarMaterialFromJSObject(retVal, t.ctx)
}

// TriPlanarMaterialDisposeOpts contains optional parameters for TriPlanarMaterial.Dispose.
type TriPlanarMaterialDisposeOpts struct {
	ForceDisposeEffect *bool
}

// Dispose calls the Dispose method on the TriPlanarMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#dispose
func (t *TriPlanarMaterial) Dispose(opts *TriPlanarMaterialDisposeOpts) {
	if opts == nil {
		opts = &TriPlanarMaterialDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForceDisposeEffect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeEffect)
	}

	t.p.Call("dispose", args...)
}

// GetActiveTextures calls the GetActiveTextures method on the TriPlanarMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#getactivetextures
func (t *TriPlanarMaterial) GetActiveTextures() []*BaseTexture {

	retVal := t.p.Call("getActiveTextures")
	result := []*BaseTexture{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, BaseTextureFromJSObject(retVal.Index(ri), t.ctx))
	}
	return result
}

// GetAlphaTestTexture calls the GetAlphaTestTexture method on the TriPlanarMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#getalphatesttexture
func (t *TriPlanarMaterial) GetAlphaTestTexture() *BaseTexture {

	retVal := t.p.Call("getAlphaTestTexture")
	return BaseTextureFromJSObject(retVal, t.ctx)
}

// GetAnimatables calls the GetAnimatables method on the TriPlanarMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#getanimatables
func (t *TriPlanarMaterial) GetAnimatables() []*IAnimatable {

	retVal := t.p.Call("getAnimatables")
	result := []*IAnimatable{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, IAnimatableFromJSObject(retVal.Index(ri), t.ctx))
	}
	return result
}

// GetClassName calls the GetClassName method on the TriPlanarMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#getclassname
func (t *TriPlanarMaterial) GetClassName() string {

	retVal := t.p.Call("getClassName")
	return retVal.String()
}

// HasTexture calls the HasTexture method on the TriPlanarMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#hastexture
func (t *TriPlanarMaterial) HasTexture(texture *BaseTexture) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	retVal := t.p.Call("hasTexture", args...)
	return retVal.Bool()
}

// TriPlanarMaterialIsReadyForSubMeshOpts contains optional parameters for TriPlanarMaterial.IsReadyForSubMesh.
type TriPlanarMaterialIsReadyForSubMeshOpts struct {
	UseInstances *bool
}

// IsReadyForSubMesh calls the IsReadyForSubMesh method on the TriPlanarMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#isreadyforsubmesh
func (t *TriPlanarMaterial) IsReadyForSubMesh(mesh *AbstractMesh, subMesh *SubMesh, opts *TriPlanarMaterialIsReadyForSubMeshOpts) bool {
	if opts == nil {
		opts = &TriPlanarMaterialIsReadyForSubMeshOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := t.p.Call("isReadyForSubMesh", args...)
	return retVal.Bool()
}

// NeedAlphaBlending calls the NeedAlphaBlending method on the TriPlanarMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#needalphablending
func (t *TriPlanarMaterial) NeedAlphaBlending() bool {

	retVal := t.p.Call("needAlphaBlending")
	return retVal.Bool()
}

// NeedAlphaTesting calls the NeedAlphaTesting method on the TriPlanarMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#needalphatesting
func (t *TriPlanarMaterial) NeedAlphaTesting() bool {

	retVal := t.p.Call("needAlphaTesting")
	return retVal.Bool()
}

// Parse calls the Parse method on the TriPlanarMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#parse
func (t *TriPlanarMaterial) Parse(source interface{}, scene *Scene, rootUrl string) *TriPlanarMaterial {

	args := make([]interface{}, 0, 3+0)

	args = append(args, source)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := t.p.Call("Parse", args...)
	return TriPlanarMaterialFromJSObject(retVal, t.ctx)
}

// Serialize calls the Serialize method on the TriPlanarMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#serialize
func (t *TriPlanarMaterial) Serialize() interface{} {

	retVal := t.p.Call("serialize")
	return retVal
}

// DiffuseColor returns the DiffuseColor property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#diffusecolor
func (t *TriPlanarMaterial) DiffuseColor() *Color3 {
	retVal := t.p.Get("diffuseColor")
	return Color3FromJSObject(retVal, t.ctx)
}

// SetDiffuseColor sets the DiffuseColor property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#diffusecolor
func (t *TriPlanarMaterial) SetDiffuseColor(diffuseColor *Color3) *TriPlanarMaterial {
	t.p.Set("diffuseColor", diffuseColor.JSObject())
	return t
}

// DiffuseTextureX returns the DiffuseTextureX property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#diffusetexturex
func (t *TriPlanarMaterial) DiffuseTextureX() *BaseTexture {
	retVal := t.p.Get("diffuseTextureX")
	return BaseTextureFromJSObject(retVal, t.ctx)
}

// SetDiffuseTextureX sets the DiffuseTextureX property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#diffusetexturex
func (t *TriPlanarMaterial) SetDiffuseTextureX(diffuseTextureX *BaseTexture) *TriPlanarMaterial {
	t.p.Set("diffuseTextureX", diffuseTextureX.JSObject())
	return t
}

// DiffuseTextureY returns the DiffuseTextureY property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#diffusetexturey
func (t *TriPlanarMaterial) DiffuseTextureY() *BaseTexture {
	retVal := t.p.Get("diffuseTextureY")
	return BaseTextureFromJSObject(retVal, t.ctx)
}

// SetDiffuseTextureY sets the DiffuseTextureY property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#diffusetexturey
func (t *TriPlanarMaterial) SetDiffuseTextureY(diffuseTextureY *BaseTexture) *TriPlanarMaterial {
	t.p.Set("diffuseTextureY", diffuseTextureY.JSObject())
	return t
}

// DiffuseTextureZ returns the DiffuseTextureZ property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#diffusetexturez
func (t *TriPlanarMaterial) DiffuseTextureZ() *BaseTexture {
	retVal := t.p.Get("diffuseTextureZ")
	return BaseTextureFromJSObject(retVal, t.ctx)
}

// SetDiffuseTextureZ sets the DiffuseTextureZ property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#diffusetexturez
func (t *TriPlanarMaterial) SetDiffuseTextureZ(diffuseTextureZ *BaseTexture) *TriPlanarMaterial {
	t.p.Set("diffuseTextureZ", diffuseTextureZ.JSObject())
	return t
}

// DisableLighting returns the DisableLighting property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#disablelighting
func (t *TriPlanarMaterial) DisableLighting() bool {
	retVal := t.p.Get("disableLighting")
	return retVal.Bool()
}

// SetDisableLighting sets the DisableLighting property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#disablelighting
func (t *TriPlanarMaterial) SetDisableLighting(disableLighting bool) *TriPlanarMaterial {
	t.p.Set("disableLighting", disableLighting)
	return t
}

// MaxSimultaneousLights returns the MaxSimultaneousLights property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#maxsimultaneouslights
func (t *TriPlanarMaterial) MaxSimultaneousLights() float64 {
	retVal := t.p.Get("maxSimultaneousLights")
	return retVal.Float()
}

// SetMaxSimultaneousLights sets the MaxSimultaneousLights property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#maxsimultaneouslights
func (t *TriPlanarMaterial) SetMaxSimultaneousLights(maxSimultaneousLights float64) *TriPlanarMaterial {
	t.p.Set("maxSimultaneousLights", maxSimultaneousLights)
	return t
}

// MixTexture returns the MixTexture property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#mixtexture
func (t *TriPlanarMaterial) MixTexture() *BaseTexture {
	retVal := t.p.Get("mixTexture")
	return BaseTextureFromJSObject(retVal, t.ctx)
}

// SetMixTexture sets the MixTexture property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#mixtexture
func (t *TriPlanarMaterial) SetMixTexture(mixTexture *BaseTexture) *TriPlanarMaterial {
	t.p.Set("mixTexture", mixTexture.JSObject())
	return t
}

// NormalTextureX returns the NormalTextureX property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#normaltexturex
func (t *TriPlanarMaterial) NormalTextureX() *BaseTexture {
	retVal := t.p.Get("normalTextureX")
	return BaseTextureFromJSObject(retVal, t.ctx)
}

// SetNormalTextureX sets the NormalTextureX property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#normaltexturex
func (t *TriPlanarMaterial) SetNormalTextureX(normalTextureX *BaseTexture) *TriPlanarMaterial {
	t.p.Set("normalTextureX", normalTextureX.JSObject())
	return t
}

// NormalTextureY returns the NormalTextureY property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#normaltexturey
func (t *TriPlanarMaterial) NormalTextureY() *BaseTexture {
	retVal := t.p.Get("normalTextureY")
	return BaseTextureFromJSObject(retVal, t.ctx)
}

// SetNormalTextureY sets the NormalTextureY property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#normaltexturey
func (t *TriPlanarMaterial) SetNormalTextureY(normalTextureY *BaseTexture) *TriPlanarMaterial {
	t.p.Set("normalTextureY", normalTextureY.JSObject())
	return t
}

// NormalTextureZ returns the NormalTextureZ property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#normaltexturez
func (t *TriPlanarMaterial) NormalTextureZ() *BaseTexture {
	retVal := t.p.Get("normalTextureZ")
	return BaseTextureFromJSObject(retVal, t.ctx)
}

// SetNormalTextureZ sets the NormalTextureZ property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#normaltexturez
func (t *TriPlanarMaterial) SetNormalTextureZ(normalTextureZ *BaseTexture) *TriPlanarMaterial {
	t.p.Set("normalTextureZ", normalTextureZ.JSObject())
	return t
}

// SpecularColor returns the SpecularColor property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#specularcolor
func (t *TriPlanarMaterial) SpecularColor() *Color3 {
	retVal := t.p.Get("specularColor")
	return Color3FromJSObject(retVal, t.ctx)
}

// SetSpecularColor sets the SpecularColor property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#specularcolor
func (t *TriPlanarMaterial) SetSpecularColor(specularColor *Color3) *TriPlanarMaterial {
	t.p.Set("specularColor", specularColor.JSObject())
	return t
}

// SpecularPower returns the SpecularPower property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#specularpower
func (t *TriPlanarMaterial) SpecularPower() float64 {
	retVal := t.p.Get("specularPower")
	return retVal.Float()
}

// SetSpecularPower sets the SpecularPower property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#specularpower
func (t *TriPlanarMaterial) SetSpecularPower(specularPower float64) *TriPlanarMaterial {
	t.p.Set("specularPower", specularPower)
	return t
}

// TileSize returns the TileSize property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#tilesize
func (t *TriPlanarMaterial) TileSize() float64 {
	retVal := t.p.Get("tileSize")
	return retVal.Float()
}

// SetTileSize sets the TileSize property of class TriPlanarMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.triplanarmaterial#tilesize
func (t *TriPlanarMaterial) SetTileSize(tileSize float64) *TriPlanarMaterial {
	t.p.Set("tileSize", tileSize)
	return t
}
