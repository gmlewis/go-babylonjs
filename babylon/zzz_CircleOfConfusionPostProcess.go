// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CircleOfConfusionPostProcess represents a babylon.js CircleOfConfusionPostProcess.
// The CircleOfConfusionPostProcess computes the circle of confusion value for each pixel given required lens parameters. See &lt;a href=&#34;https://en.wikipedia.org/wiki/Circle_of_confusion&#34;&gt;https://en.wikipedia.org/wiki/Circle_of_confusion&lt;/a&gt;
type CircleOfConfusionPostProcess struct{ *PostProcess }

// JSObject returns the underlying js.Value.
func (c *CircleOfConfusionPostProcess) JSObject() js.Value { return c.p }

// CircleOfConfusionPostProcess returns a CircleOfConfusionPostProcess JavaScript class.
func (b *Babylon) CircleOfConfusionPostProcess() *CircleOfConfusionPostProcess {
	p := b.ctx.Get("CircleOfConfusionPostProcess")
	return CircleOfConfusionPostProcessFromJSObject(p)
}

// CircleOfConfusionPostProcessFromJSObject returns a wrapped CircleOfConfusionPostProcess JavaScript class.
func CircleOfConfusionPostProcessFromJSObject(p js.Value) *CircleOfConfusionPostProcess {
	return &CircleOfConfusionPostProcess{PostProcessFromJSObject(p)}
}

// NewCircleOfConfusionPostProcess returns a new CircleOfConfusionPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.circleofconfusionpostprocess
func (b *Babylon) NewCircleOfConfusionPostProcess(todo parameters) *CircleOfConfusionPostProcess {
	p := b.ctx.Get("CircleOfConfusionPostProcess").New(todo)
	return CircleOfConfusionPostProcessFromJSObject(p)
}

// TODO: methods
