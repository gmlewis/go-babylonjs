// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CircleOfConfusionPostProcess represents a babylon.js CircleOfConfusionPostProcess.
// The CircleOfConfusionPostProcess computes the circle of confusion value for each pixel given required lens parameters. See <a href="https://en.wikipedia.org/wiki/Circle_of_confusion">https://en.wikipedia.org/wiki/Circle_of_confusion</a>
type CircleOfConfusionPostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *CircleOfConfusionPostProcess) JSObject() js.Value { return c.p }

// CircleOfConfusionPostProcess returns a CircleOfConfusionPostProcess JavaScript class.
func (ba *Babylon) CircleOfConfusionPostProcess() *CircleOfConfusionPostProcess {
	p := ba.ctx.Get("CircleOfConfusionPostProcess")
	return CircleOfConfusionPostProcessFromJSObject(p, ba.ctx)
}

// CircleOfConfusionPostProcessFromJSObject returns a wrapped CircleOfConfusionPostProcess JavaScript class.
func CircleOfConfusionPostProcessFromJSObject(p js.Value, ctx js.Value) *CircleOfConfusionPostProcess {
	return &CircleOfConfusionPostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// CircleOfConfusionPostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func CircleOfConfusionPostProcessArrayToJSArray(array []*CircleOfConfusionPostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewCircleOfConfusionPostProcessOpts contains optional parameters for NewCircleOfConfusionPostProcess.
type NewCircleOfConfusionPostProcessOpts struct {
	SamplingMode     *float64
	Engine           *Engine
	Reusable         *bool
	TextureType      *float64
	BlockCompilation *bool
}

// NewCircleOfConfusionPostProcess returns a new CircleOfConfusionPostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.circleofconfusionpostprocess
func (ba *Babylon) NewCircleOfConfusionPostProcess(name string, depthTexture *RenderTargetTexture, options float64, camera *Camera, opts *NewCircleOfConfusionPostProcessOpts) *CircleOfConfusionPostProcess {
	if opts == nil {
		opts = &NewCircleOfConfusionPostProcessOpts{}
	}

	args := make([]interface{}, 0, 4+5)

	args = append(args, name)
	args = append(args, depthTexture.JSObject())
	args = append(args, options)
	args = append(args, camera.JSObject())

	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}
	if opts.BlockCompilation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.BlockCompilation)
	}

	p := ba.ctx.Get("CircleOfConfusionPostProcess").New(args...)
	return CircleOfConfusionPostProcessFromJSObject(p, ba.ctx)
}

// DepthTexture returns the DepthTexture property of class CircleOfConfusionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.circleofconfusionpostprocess#depthtexture
func (c *CircleOfConfusionPostProcess) DepthTexture() *RenderTargetTexture {
	retVal := c.p.Get("depthTexture")
	return RenderTargetTextureFromJSObject(retVal, c.ctx)
}

// SetDepthTexture sets the DepthTexture property of class CircleOfConfusionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.circleofconfusionpostprocess#depthtexture
func (c *CircleOfConfusionPostProcess) SetDepthTexture(depthTexture *RenderTargetTexture) *CircleOfConfusionPostProcess {
	c.p.Set("depthTexture", depthTexture.JSObject())
	return c
}

// FStop returns the FStop property of class CircleOfConfusionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.circleofconfusionpostprocess#fstop
func (c *CircleOfConfusionPostProcess) FStop() float64 {
	retVal := c.p.Get("fStop")
	return retVal.Float()
}

// SetFStop sets the FStop property of class CircleOfConfusionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.circleofconfusionpostprocess#fstop
func (c *CircleOfConfusionPostProcess) SetFStop(fStop float64) *CircleOfConfusionPostProcess {
	c.p.Set("fStop", fStop)
	return c
}

// FocalLength returns the FocalLength property of class CircleOfConfusionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.circleofconfusionpostprocess#focallength
func (c *CircleOfConfusionPostProcess) FocalLength() float64 {
	retVal := c.p.Get("focalLength")
	return retVal.Float()
}

// SetFocalLength sets the FocalLength property of class CircleOfConfusionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.circleofconfusionpostprocess#focallength
func (c *CircleOfConfusionPostProcess) SetFocalLength(focalLength float64) *CircleOfConfusionPostProcess {
	c.p.Set("focalLength", focalLength)
	return c
}

// FocusDistance returns the FocusDistance property of class CircleOfConfusionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.circleofconfusionpostprocess#focusdistance
func (c *CircleOfConfusionPostProcess) FocusDistance() float64 {
	retVal := c.p.Get("focusDistance")
	return retVal.Float()
}

// SetFocusDistance sets the FocusDistance property of class CircleOfConfusionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.circleofconfusionpostprocess#focusdistance
func (c *CircleOfConfusionPostProcess) SetFocusDistance(focusDistance float64) *CircleOfConfusionPostProcess {
	c.p.Set("focusDistance", focusDistance)
	return c
}

// LensSize returns the LensSize property of class CircleOfConfusionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.circleofconfusionpostprocess#lenssize
func (c *CircleOfConfusionPostProcess) LensSize() float64 {
	retVal := c.p.Get("lensSize")
	return retVal.Float()
}

// SetLensSize sets the LensSize property of class CircleOfConfusionPostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.circleofconfusionpostprocess#lenssize
func (c *CircleOfConfusionPostProcess) SetLensSize(lensSize float64) *CircleOfConfusionPostProcess {
	c.p.Set("lensSize", lensSize)
	return c
}
