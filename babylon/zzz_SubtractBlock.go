// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SubtractBlock represents a babylon.js SubtractBlock.
// Block used to subtract 2 vectors
type SubtractBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SubtractBlock) JSObject() js.Value { return s.p }

// SubtractBlock returns a SubtractBlock JavaScript class.
func (ba *Babylon) SubtractBlock() *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock")
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// SubtractBlockFromJSObject returns a wrapped SubtractBlock JavaScript class.
func SubtractBlockFromJSObject(p js.Value, ctx js.Value) *SubtractBlock {
	return &SubtractBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// SubtractBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func SubtractBlockArrayToJSArray(array []*SubtractBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewSubtractBlock returns a new SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock
func (ba *Babylon) NewSubtractBlock(name string) *SubtractBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("SubtractBlock").New(args...)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#getclassname
func (s *SubtractBlock) GetClassName() string {

	retVal := s.p.Call("getClassName")
	return retVal.String()
}

// Left returns the Left property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#left
func (s *SubtractBlock) Left() *NodeMaterialConnectionPoint {
	retVal := s.p.Get("left")
	return NodeMaterialConnectionPointFromJSObject(retVal, s.ctx)
}

// SetLeft sets the Left property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#left
func (s *SubtractBlock) SetLeft(left *NodeMaterialConnectionPoint) *SubtractBlock {
	s.p.Set("left", left.JSObject())
	return s
}

// Output returns the Output property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#output
func (s *SubtractBlock) Output() *NodeMaterialConnectionPoint {
	retVal := s.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, s.ctx)
}

// SetOutput sets the Output property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#output
func (s *SubtractBlock) SetOutput(output *NodeMaterialConnectionPoint) *SubtractBlock {
	s.p.Set("output", output.JSObject())
	return s
}

// Right returns the Right property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#right
func (s *SubtractBlock) Right() *NodeMaterialConnectionPoint {
	retVal := s.p.Get("right")
	return NodeMaterialConnectionPointFromJSObject(retVal, s.ctx)
}

// SetRight sets the Right property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#right
func (s *SubtractBlock) SetRight(right *NodeMaterialConnectionPoint) *SubtractBlock {
	s.p.Set("right", right.JSObject())
	return s
}
