// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SubtractBlock represents a babylon.js SubtractBlock.
// Block used to subtract 2 vectors
type SubtractBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SubtractBlock) JSObject() js.Value { return s.p }

// SubtractBlock returns a SubtractBlock JavaScript class.
func (ba *Babylon) SubtractBlock() *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock")
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// SubtractBlockFromJSObject returns a wrapped SubtractBlock JavaScript class.
func SubtractBlockFromJSObject(p js.Value, ctx js.Value) *SubtractBlock {
	return &SubtractBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// NewSubtractBlock returns a new SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock
func (ba *Babylon) NewSubtractBlock(name string) *SubtractBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("SubtractBlock").New(args...)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#autoconfigure
func (s *SubtractBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	s.p.Call("autoConfigure", args...)
}

// SubtractBlockBindOpts contains optional parameters for SubtractBlock.Bind.
type SubtractBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#bind
func (s *SubtractBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *SubtractBlockBindOpts) {
	if opts == nil {
		opts = &SubtractBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	s.p.Call("bind", args...)
}

// Build calls the Build method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#build
func (s *SubtractBlock) Build(state *NodeMaterialBuildState, activeBlocks *NodeMaterialBlock) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, state.JSObject())
	args = append(args, activeBlocks.JSObject())

	retVal := s.p.Call("build", args...)
	return retVal.Bool()
}

// SubtractBlockCloneOpts contains optional parameters for SubtractBlock.Clone.
type SubtractBlockCloneOpts struct {
	RootUrl *string
}

// Clone calls the Clone method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#clone
func (s *SubtractBlock) Clone(scene *Scene, opts *SubtractBlockCloneOpts) *NodeMaterialBlock {
	if opts == nil {
		opts = &SubtractBlockCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := s.p.Call("clone", args...)
	return NodeMaterialBlockFromJSObject(retVal, s.ctx)
}

// SubtractBlockConnectToOpts contains optional parameters for SubtractBlock.ConnectTo.
type SubtractBlockConnectToOpts struct {
	Options js.Value
}

// ConnectTo calls the ConnectTo method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#connectto
func (s *SubtractBlock) ConnectTo(other *NodeMaterialBlock, opts *SubtractBlockConnectToOpts) *SubtractBlock {
	if opts == nil {
		opts = &SubtractBlockConnectToOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, other.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := s.p.Call("connectTo", args...)
	return SubtractBlockFromJSObject(retVal, s.ctx)
}

// Dispose calls the Dispose method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#dispose
func (s *SubtractBlock) Dispose() {

	args := make([]interface{}, 0, 0+0)

	s.p.Call("dispose", args...)
}

// GetClassName calls the GetClassName method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#getclassname
func (s *SubtractBlock) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("getClassName", args...)
	return retVal.String()
}

// SubtractBlockGetFirstAvailableInputOpts contains optional parameters for SubtractBlock.GetFirstAvailableInput.
type SubtractBlockGetFirstAvailableInputOpts struct {
	ForOutput *NodeMaterialConnectionPoint
}

// GetFirstAvailableInput calls the GetFirstAvailableInput method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#getfirstavailableinput
func (s *SubtractBlock) GetFirstAvailableInput(opts *SubtractBlockGetFirstAvailableInputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &SubtractBlockGetFirstAvailableInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForOutput == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForOutput.JSObject())
	}

	retVal := s.p.Call("getFirstAvailableInput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, s.ctx)
}

// SubtractBlockGetFirstAvailableOutputOpts contains optional parameters for SubtractBlock.GetFirstAvailableOutput.
type SubtractBlockGetFirstAvailableOutputOpts struct {
	ForBlock *NodeMaterialBlock
}

// GetFirstAvailableOutput calls the GetFirstAvailableOutput method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#getfirstavailableoutput
func (s *SubtractBlock) GetFirstAvailableOutput(opts *SubtractBlockGetFirstAvailableOutputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &SubtractBlockGetFirstAvailableOutputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForBlock == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForBlock.JSObject())
	}

	retVal := s.p.Call("getFirstAvailableOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, s.ctx)
}

// GetInputByName calls the GetInputByName method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#getinputbyname
func (s *SubtractBlock) GetInputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := s.p.Call("getInputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, s.ctx)
}

// GetOutputByName calls the GetOutputByName method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#getoutputbyname
func (s *SubtractBlock) GetOutputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := s.p.Call("getOutputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, s.ctx)
}

// GetSiblingOutput calls the GetSiblingOutput method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#getsiblingoutput
func (s *SubtractBlock) GetSiblingOutput(current *NodeMaterialConnectionPoint) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, current.JSObject())

	retVal := s.p.Call("getSiblingOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, s.ctx)
}

// Initialize calls the Initialize method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#initialize
func (s *SubtractBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	s.p.Call("initialize", args...)
}

// SubtractBlockInitializeDefinesOpts contains optional parameters for SubtractBlock.InitializeDefines.
type SubtractBlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#initializedefines
func (s *SubtractBlock) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *SubtractBlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &SubtractBlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	s.p.Call("initializeDefines", args...)
}

// SubtractBlockIsReadyOpts contains optional parameters for SubtractBlock.IsReady.
type SubtractBlockIsReadyOpts struct {
	UseInstances *bool
}

// IsReady calls the IsReady method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#isready
func (s *SubtractBlock) IsReady(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *SubtractBlockIsReadyOpts) bool {
	if opts == nil {
		opts = &SubtractBlockIsReadyOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := s.p.Call("isReady", args...)
	return retVal.Bool()
}

// SubtractBlockPrepareDefinesOpts contains optional parameters for SubtractBlock.PrepareDefines.
type SubtractBlockPrepareDefinesOpts struct {
	UseInstances *bool
}

// PrepareDefines calls the PrepareDefines method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#preparedefines
func (s *SubtractBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *SubtractBlockPrepareDefinesOpts) {
	if opts == nil {
		opts = &SubtractBlockPrepareDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	s.p.Call("prepareDefines", args...)
}

// ProvideFallbacks calls the ProvideFallbacks method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#providefallbacks
func (s *SubtractBlock) ProvideFallbacks(mesh *AbstractMesh, fallbacks *EffectFallbacks) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, fallbacks.JSObject())

	s.p.Call("provideFallbacks", args...)
}

// SubtractBlockRegisterInputOpts contains optional parameters for SubtractBlock.RegisterInput.
type SubtractBlockRegisterInputOpts struct {
	IsOptional *bool
	Target     js.Value
}

// RegisterInput calls the RegisterInput method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#registerinput
func (s *SubtractBlock) RegisterInput(name string, jsType js.Value, opts *SubtractBlockRegisterInputOpts) *SubtractBlock {
	if opts == nil {
		opts = &SubtractBlockRegisterInputOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, jsType)

	if opts.IsOptional == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsOptional)
	}
	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := s.p.Call("registerInput", args...)
	return SubtractBlockFromJSObject(retVal, s.ctx)
}

// SubtractBlockRegisterOutputOpts contains optional parameters for SubtractBlock.RegisterOutput.
type SubtractBlockRegisterOutputOpts struct {
	Target js.Value
}

// RegisterOutput calls the RegisterOutput method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#registeroutput
func (s *SubtractBlock) RegisterOutput(name string, jsType js.Value, opts *SubtractBlockRegisterOutputOpts) *SubtractBlock {
	if opts == nil {
		opts = &SubtractBlockRegisterOutputOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, jsType)

	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := s.p.Call("registerOutput", args...)
	return SubtractBlockFromJSObject(retVal, s.ctx)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#replacerepeatablecontent
func (s *SubtractBlock) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	s.p.Call("replaceRepeatableContent", args...)
}

// Serialize calls the Serialize method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#serialize
func (s *SubtractBlock) Serialize() interface{} {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("serialize", args...)
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the SubtractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#updateuniformsandsamples
func (s *SubtractBlock) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers string) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, state.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)
	args = append(args, uniformBuffers)

	s.p.Call("updateUniformsAndSamples", args...)
}

/*

// BuildId returns the BuildId property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#buildid
func (s *SubtractBlock) BuildId(buildId float64) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(buildId)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// SetBuildId sets the BuildId property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#buildid
func (s *SubtractBlock) SetBuildId(buildId float64) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(buildId)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// Comments returns the Comments property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#comments
func (s *SubtractBlock) Comments(comments string) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(comments)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// SetComments sets the Comments property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#comments
func (s *SubtractBlock) SetComments(comments string) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(comments)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#inputs
func (s *SubtractBlock) Inputs(inputs *NodeMaterialConnectionPoint) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(inputs.JSObject())
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#inputs
func (s *SubtractBlock) SetInputs(inputs *NodeMaterialConnectionPoint) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(inputs.JSObject())
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// IsFinalMerger returns the IsFinalMerger property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#isfinalmerger
func (s *SubtractBlock) IsFinalMerger(isFinalMerger bool) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(isFinalMerger)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// SetIsFinalMerger sets the IsFinalMerger property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#isfinalmerger
func (s *SubtractBlock) SetIsFinalMerger(isFinalMerger bool) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(isFinalMerger)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// IsInput returns the IsInput property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#isinput
func (s *SubtractBlock) IsInput(isInput bool) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(isInput)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// SetIsInput sets the IsInput property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#isinput
func (s *SubtractBlock) SetIsInput(isInput bool) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(isInput)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// IsUnique returns the IsUnique property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#isunique
func (s *SubtractBlock) IsUnique(isUnique bool) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(isUnique)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// SetIsUnique sets the IsUnique property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#isunique
func (s *SubtractBlock) SetIsUnique(isUnique bool) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(isUnique)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// Left returns the Left property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#left
func (s *SubtractBlock) Left(left *NodeMaterialConnectionPoint) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(left.JSObject())
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#left
func (s *SubtractBlock) SetLeft(left *NodeMaterialConnectionPoint) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(left.JSObject())
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#name
func (s *SubtractBlock) Name(name string) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(name)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#name
func (s *SubtractBlock) SetName(name string) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(name)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#output
func (s *SubtractBlock) Output(output *NodeMaterialConnectionPoint) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(output.JSObject())
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#output
func (s *SubtractBlock) SetOutput(output *NodeMaterialConnectionPoint) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(output.JSObject())
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// Outputs returns the Outputs property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#outputs
func (s *SubtractBlock) Outputs(outputs *NodeMaterialConnectionPoint) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(outputs.JSObject())
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// SetOutputs sets the Outputs property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#outputs
func (s *SubtractBlock) SetOutputs(outputs *NodeMaterialConnectionPoint) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(outputs.JSObject())
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// Right returns the Right property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#right
func (s *SubtractBlock) Right(right *NodeMaterialConnectionPoint) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(right.JSObject())
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// SetRight sets the Right property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#right
func (s *SubtractBlock) SetRight(right *NodeMaterialConnectionPoint) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(right.JSObject())
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#target
func (s *SubtractBlock) Target(target js.Value) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(target)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#target
func (s *SubtractBlock) SetTarget(target js.Value) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(target)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#uniqueid
func (s *SubtractBlock) UniqueId(uniqueId float64) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(uniqueId)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class SubtractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.subtractblock#uniqueid
func (s *SubtractBlock) SetUniqueId(uniqueId float64) *SubtractBlock {
	p := ba.ctx.Get("SubtractBlock").New(uniqueId)
	return SubtractBlockFromJSObject(p, ba.ctx)
}

*/
