// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// InterpolateValueAction represents a babylon.js InterpolateValueAction.
// This defines an action responsible to change the value of a property
// by interpolating between its current value and the newly set one once triggered.
//
// See: http://doc.babylonjs.com/how_to/how_to_use_actions
type InterpolateValueAction struct {
	*Action
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *InterpolateValueAction) JSObject() js.Value { return i.p }

// InterpolateValueAction returns a InterpolateValueAction JavaScript class.
func (ba *Babylon) InterpolateValueAction() *InterpolateValueAction {
	p := ba.ctx.Get("InterpolateValueAction")
	return InterpolateValueActionFromJSObject(p, ba.ctx)
}

// InterpolateValueActionFromJSObject returns a wrapped InterpolateValueAction JavaScript class.
func InterpolateValueActionFromJSObject(p js.Value, ctx js.Value) *InterpolateValueAction {
	return &InterpolateValueAction{Action: ActionFromJSObject(p, ctx), ctx: ctx}
}

// InterpolateValueActionArrayToJSArray returns a JavaScript Array for the wrapped array.
func InterpolateValueActionArrayToJSArray(array []*InterpolateValueAction) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewInterpolateValueActionOpts contains optional parameters for NewInterpolateValueAction.
type NewInterpolateValueActionOpts struct {
	Duration            *float64
	Condition           *Condition
	StopOtherAnimations *bool
	OnInterpolationDone func()
}

// NewInterpolateValueAction returns a new InterpolateValueAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.interpolatevalueaction
func (ba *Babylon) NewInterpolateValueAction(triggerOptions interface{}, target interface{}, propertyPath string, value interface{}, opts *NewInterpolateValueActionOpts) *InterpolateValueAction {
	if opts == nil {
		opts = &NewInterpolateValueActionOpts{}
	}

	args := make([]interface{}, 0, 4+4)

	args = append(args, triggerOptions)
	args = append(args, target)
	args = append(args, propertyPath)
	args = append(args, value)

	if opts.Duration == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Duration)
	}
	if opts.Condition == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Condition.JSObject())
	}
	if opts.StopOtherAnimations == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.StopOtherAnimations)
	}
	if opts.OnInterpolationDone == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnInterpolationDone)
	}

	p := ba.ctx.Get("InterpolateValueAction").New(args...)
	return InterpolateValueActionFromJSObject(p, ba.ctx)
}

// Execute calls the Execute method on the InterpolateValueAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.interpolatevalueaction#execute
func (i *InterpolateValueAction) Execute() {

	i.p.Call("execute")
}

// Serialize calls the Serialize method on the InterpolateValueAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.interpolatevalueaction#serialize
func (i *InterpolateValueAction) Serialize(parent interface{}) interface{} {

	args := make([]interface{}, 0, 1+0)

	args = append(args, parent)

	retVal := i.p.Call("serialize", args...)
	return retVal
}

// Duration returns the Duration property of class InterpolateValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.interpolatevalueaction#duration
func (i *InterpolateValueAction) Duration() float64 {
	retVal := i.p.Get("duration")
	return retVal.Float()
}

// SetDuration sets the Duration property of class InterpolateValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.interpolatevalueaction#duration
func (i *InterpolateValueAction) SetDuration(duration float64) *InterpolateValueAction {
	i.p.Set("duration", duration)
	return i
}

// OnInterpolationDone returns the OnInterpolationDone property of class InterpolateValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.interpolatevalueaction#oninterpolationdone
func (i *InterpolateValueAction) OnInterpolationDone() js.Value {
	retVal := i.p.Get("onInterpolationDone")
	return retVal
}

// SetOnInterpolationDone sets the OnInterpolationDone property of class InterpolateValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.interpolatevalueaction#oninterpolationdone
func (i *InterpolateValueAction) SetOnInterpolationDone(onInterpolationDone func()) *InterpolateValueAction {
	i.p.Set("onInterpolationDone", js.FuncOf(func(this js.Value, args []js.Value) interface{} { onInterpolationDone(); return nil }))
	return i
}

// OnInterpolationDoneObservable returns the OnInterpolationDoneObservable property of class InterpolateValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.interpolatevalueaction#oninterpolationdoneobservable
func (i *InterpolateValueAction) OnInterpolationDoneObservable() *Observable {
	retVal := i.p.Get("onInterpolationDoneObservable")
	return ObservableFromJSObject(retVal, i.ctx)
}

// SetOnInterpolationDoneObservable sets the OnInterpolationDoneObservable property of class InterpolateValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.interpolatevalueaction#oninterpolationdoneobservable
func (i *InterpolateValueAction) SetOnInterpolationDoneObservable(onInterpolationDoneObservable *Observable) *InterpolateValueAction {
	i.p.Set("onInterpolationDoneObservable", onInterpolationDoneObservable.JSObject())
	return i
}

// PropertyPath returns the PropertyPath property of class InterpolateValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.interpolatevalueaction#propertypath
func (i *InterpolateValueAction) PropertyPath() string {
	retVal := i.p.Get("propertyPath")
	return retVal.String()
}

// SetPropertyPath sets the PropertyPath property of class InterpolateValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.interpolatevalueaction#propertypath
func (i *InterpolateValueAction) SetPropertyPath(propertyPath string) *InterpolateValueAction {
	i.p.Set("propertyPath", propertyPath)
	return i
}

// StopOtherAnimations returns the StopOtherAnimations property of class InterpolateValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.interpolatevalueaction#stopotheranimations
func (i *InterpolateValueAction) StopOtherAnimations() bool {
	retVal := i.p.Get("stopOtherAnimations")
	return retVal.Bool()
}

// SetStopOtherAnimations sets the StopOtherAnimations property of class InterpolateValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.interpolatevalueaction#stopotheranimations
func (i *InterpolateValueAction) SetStopOtherAnimations(stopOtherAnimations bool) *InterpolateValueAction {
	i.p.Set("stopOtherAnimations", stopOtherAnimations)
	return i
}

// Value returns the Value property of class InterpolateValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.interpolatevalueaction#value
func (i *InterpolateValueAction) Value() interface{} {
	retVal := i.p.Get("value")
	return retVal
}

// SetValue sets the Value property of class InterpolateValueAction.
//
// https://doc.babylonjs.com/api/classes/babylon.interpolatevalueaction#value
func (i *InterpolateValueAction) SetValue(value interface{}) *InterpolateValueAction {
	i.p.Set("value", value)
	return i
}
