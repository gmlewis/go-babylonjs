// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CloudProceduralTexture represents a babylon.js CloudProceduralTexture.
//
type CloudProceduralTexture struct {
	*ProceduralTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *CloudProceduralTexture) JSObject() js.Value { return c.p }

// CloudProceduralTexture returns a CloudProceduralTexture JavaScript class.
func (ba *Babylon) CloudProceduralTexture() *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture")
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// CloudProceduralTextureFromJSObject returns a wrapped CloudProceduralTexture JavaScript class.
func CloudProceduralTextureFromJSObject(p js.Value, ctx js.Value) *CloudProceduralTexture {
	return &CloudProceduralTexture{ProceduralTexture: ProceduralTextureFromJSObject(p, ctx), ctx: ctx}
}

// CloudProceduralTextureArrayToJSArray returns a JavaScript Array for the wrapped array.
func CloudProceduralTextureArrayToJSArray(array []*CloudProceduralTexture) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewCloudProceduralTextureOpts contains optional parameters for NewCloudProceduralTexture.
type NewCloudProceduralTextureOpts struct {
	FallbackTexture *Texture
	GenerateMipMaps *bool
}

// NewCloudProceduralTexture returns a new CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture
func (ba *Babylon) NewCloudProceduralTexture(name string, size float64, scene *Scene, opts *NewCloudProceduralTextureOpts) *CloudProceduralTexture {
	if opts == nil {
		opts = &NewCloudProceduralTextureOpts{}
	}

	args := make([]interface{}, 0, 3+2)

	args = append(args, name)
	args = append(args, size)
	args = append(args, scene.JSObject())

	if opts.FallbackTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.FallbackTexture.JSObject())
	}
	if opts.GenerateMipMaps == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateMipMaps)
	}

	p := ba.ctx.Get("CloudProceduralTexture").New(args...)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// Clone calls the Clone method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#clone
func (c *CloudProceduralTexture) Clone() *ProceduralTexture {

	retVal := c.p.Call("clone")
	return ProceduralTextureFromJSObject(retVal, c.ctx)
}

// CloudProceduralTextureCreateFromBase64StringOpts contains optional parameters for CloudProceduralTexture.CreateFromBase64String.
type CloudProceduralTextureCreateFromBase64StringOpts struct {
	NoMipmap     *bool
	InvertY      *bool
	SamplingMode *float64
	OnLoad       func()
	OnError      func()
	Format       *float64
}

// CreateFromBase64String calls the CreateFromBase64String method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#createfrombase64string
func (c *CloudProceduralTexture) CreateFromBase64String(data string, name string, scene *Scene, opts *CloudProceduralTextureCreateFromBase64StringOpts) *Texture {
	if opts == nil {
		opts = &CloudProceduralTextureCreateFromBase64StringOpts{}
	}

	args := make([]interface{}, 0, 3+6)

	args = append(args, data)
	args = append(args, name)
	args = append(args, scene.JSObject())

	if opts.NoMipmap == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoMipmap)
	}
	if opts.InvertY == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.InvertY)
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.OnLoad == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnLoad)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}
	if opts.Format == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Format)
	}

	retVal := c.p.Call("CreateFromBase64String", args...)
	return TextureFromJSObject(retVal, c.ctx)
}

// Dispose calls the Dispose method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#dispose
func (c *CloudProceduralTexture) Dispose() {

	c.p.Call("dispose")
}

// GetBaseSize calls the GetBaseSize method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#getbasesize
func (c *CloudProceduralTexture) GetBaseSize() *ISize {

	retVal := c.p.Call("getBaseSize")
	return ISizeFromJSObject(retVal, c.ctx)
}

// GetClassName calls the GetClassName method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#getclassname
func (c *CloudProceduralTexture) GetClassName() string {

	retVal := c.p.Call("getClassName")
	return retVal.String()
}

// GetContent calls the GetContent method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#getcontent
func (c *CloudProceduralTexture) GetContent() js.Value {

	retVal := c.p.Call("getContent")
	return retVal
}

// GetEffect calls the GetEffect method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#geteffect
func (c *CloudProceduralTexture) GetEffect() *Effect {

	retVal := c.p.Call("getEffect")
	return EffectFromJSObject(retVal, c.ctx)
}

// GetInternalTexture calls the GetInternalTexture method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#getinternaltexture
func (c *CloudProceduralTexture) GetInternalTexture() *InternalTexture {

	retVal := c.p.Call("getInternalTexture")
	return InternalTextureFromJSObject(retVal, c.ctx)
}

// GetReflectionTextureMatrix calls the GetReflectionTextureMatrix method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#getreflectiontexturematrix
func (c *CloudProceduralTexture) GetReflectionTextureMatrix() *Matrix {

	retVal := c.p.Call("getReflectionTextureMatrix")
	return MatrixFromJSObject(retVal, c.ctx)
}

// GetRenderSize calls the GetRenderSize method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#getrendersize
func (c *CloudProceduralTexture) GetRenderSize() float64 {

	retVal := c.p.Call("getRenderSize")
	return retVal.Float()
}

// GetScene calls the GetScene method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#getscene
func (c *CloudProceduralTexture) GetScene() *Scene {

	retVal := c.p.Call("getScene")
	return SceneFromJSObject(retVal, c.ctx)
}

// GetSize calls the GetSize method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#getsize
func (c *CloudProceduralTexture) GetSize() *ISize {

	retVal := c.p.Call("getSize")
	return ISizeFromJSObject(retVal, c.ctx)
}

// CloudProceduralTextureGetTextureMatrixOpts contains optional parameters for CloudProceduralTexture.GetTextureMatrix.
type CloudProceduralTextureGetTextureMatrixOpts struct {
	UBase *float64
}

// GetTextureMatrix calls the GetTextureMatrix method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#gettexturematrix
func (c *CloudProceduralTexture) GetTextureMatrix(opts *CloudProceduralTextureGetTextureMatrixOpts) *Matrix {
	if opts == nil {
		opts = &CloudProceduralTextureGetTextureMatrixOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.UBase == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UBase)
	}

	retVal := c.p.Call("getTextureMatrix", args...)
	return MatrixFromJSObject(retVal, c.ctx)
}

// IsReady calls the IsReady method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#isready
func (c *CloudProceduralTexture) IsReady() bool {

	retVal := c.p.Call("isReady")
	return retVal.Bool()
}

// IsReadyOrNotBlocking calls the IsReadyOrNotBlocking method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#isreadyornotblocking
func (c *CloudProceduralTexture) IsReadyOrNotBlocking() bool {

	retVal := c.p.Call("isReadyOrNotBlocking")
	return retVal.Bool()
}

// CloudProceduralTextureLoadFromDataStringOpts contains optional parameters for CloudProceduralTexture.LoadFromDataString.
type CloudProceduralTextureLoadFromDataStringOpts struct {
	DeleteBuffer *bool
	NoMipmap     *bool
	InvertY      *bool
	SamplingMode *float64
	OnLoad       func()
	OnError      func()
	Format       *float64
}

// LoadFromDataString calls the LoadFromDataString method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#loadfromdatastring
func (c *CloudProceduralTexture) LoadFromDataString(name string, buffer interface{}, scene *Scene, opts *CloudProceduralTextureLoadFromDataStringOpts) *Texture {
	if opts == nil {
		opts = &CloudProceduralTextureLoadFromDataStringOpts{}
	}

	args := make([]interface{}, 0, 3+7)

	args = append(args, name)
	args = append(args, buffer)
	args = append(args, scene.JSObject())

	if opts.DeleteBuffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DeleteBuffer)
	}
	if opts.NoMipmap == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoMipmap)
	}
	if opts.InvertY == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.InvertY)
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.OnLoad == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnLoad)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}
	if opts.Format == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Format)
	}

	retVal := c.p.Call("LoadFromDataString", args...)
	return TextureFromJSObject(retVal, c.ctx)
}

// Parse calls the Parse method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#parse
func (c *CloudProceduralTexture) Parse(parsedTexture interface{}, scene *Scene, rootUrl string) *CloudProceduralTexture {

	args := make([]interface{}, 0, 3+0)

	args = append(args, parsedTexture)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := c.p.Call("Parse", args...)
	return CloudProceduralTextureFromJSObject(retVal, c.ctx)
}

// CloudProceduralTextureReadPixelsOpts contains optional parameters for CloudProceduralTexture.ReadPixels.
type CloudProceduralTextureReadPixelsOpts struct {
	FaceIndex *float64
	Level     *float64
	Buffer    js.Value
}

// ReadPixels calls the ReadPixels method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#readpixels
func (c *CloudProceduralTexture) ReadPixels(opts *CloudProceduralTextureReadPixelsOpts) js.Value {
	if opts == nil {
		opts = &CloudProceduralTextureReadPixelsOpts{}
	}

	args := make([]interface{}, 0, 0+3)

	if opts.FaceIndex == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FaceIndex)
	}
	if opts.Level == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Level)
	}
	args = append(args, opts.Buffer)

	retVal := c.p.Call("readPixels", args...)
	return retVal
}

// ReleaseInternalTexture calls the ReleaseInternalTexture method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#releaseinternaltexture
func (c *CloudProceduralTexture) ReleaseInternalTexture() {

	c.p.Call("releaseInternalTexture")
}

// CloudProceduralTextureRenderOpts contains optional parameters for CloudProceduralTexture.Render.
type CloudProceduralTextureRenderOpts struct {
	UseCameraPostProcess *bool
}

// Render calls the Render method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#render
func (c *CloudProceduralTexture) Render(opts *CloudProceduralTextureRenderOpts) {
	if opts == nil {
		opts = &CloudProceduralTextureRenderOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.UseCameraPostProcess == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseCameraPostProcess)
	}

	c.p.Call("render", args...)
}

// Reset calls the Reset method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#reset
func (c *CloudProceduralTexture) Reset() {

	c.p.Call("reset")
}

// ResetRefreshCounter calls the ResetRefreshCounter method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#resetrefreshcounter
func (c *CloudProceduralTexture) ResetRefreshCounter() {

	c.p.Call("resetRefreshCounter")
}

// Resize calls the Resize method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#resize
func (c *CloudProceduralTexture) Resize(size float64, generateMipMaps bool) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, size)
	args = append(args, generateMipMaps)

	c.p.Call("resize", args...)
}

// Scale calls the Scale method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#scale
func (c *CloudProceduralTexture) Scale(ratio float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, ratio)

	c.p.Call("scale", args...)
}

// Serialize calls the Serialize method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#serialize
func (c *CloudProceduralTexture) Serialize() interface{} {

	retVal := c.p.Call("serialize")
	return retVal
}

// SetColor3 calls the SetColor3 method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#setcolor3
func (c *CloudProceduralTexture) SetColor3(name string, value *Color3) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value.JSObject())

	retVal := c.p.Call("setColor3", args...)
	return ProceduralTextureFromJSObject(retVal, c.ctx)
}

// SetColor4 calls the SetColor4 method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#setcolor4
func (c *CloudProceduralTexture) SetColor4(name string, value *Color4) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value.JSObject())

	retVal := c.p.Call("setColor4", args...)
	return ProceduralTextureFromJSObject(retVal, c.ctx)
}

// SetFloat calls the SetFloat method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#setfloat
func (c *CloudProceduralTexture) SetFloat(name string, value float64) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value)

	retVal := c.p.Call("setFloat", args...)
	return ProceduralTextureFromJSObject(retVal, c.ctx)
}

// SetFloats calls the SetFloats method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#setfloats
func (c *CloudProceduralTexture) SetFloats(name string, value float64) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value)

	retVal := c.p.Call("setFloats", args...)
	return ProceduralTextureFromJSObject(retVal, c.ctx)
}

// SetFragment calls the SetFragment method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#setfragment
func (c *CloudProceduralTexture) SetFragment(fragment interface{}) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, fragment)

	c.p.Call("setFragment", args...)
}

// SetInt calls the SetInt method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#setint
func (c *CloudProceduralTexture) SetInt(name string, value float64) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value)

	retVal := c.p.Call("setInt", args...)
	return ProceduralTextureFromJSObject(retVal, c.ctx)
}

// SetMatrix calls the SetMatrix method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#setmatrix
func (c *CloudProceduralTexture) SetMatrix(name string, value *Matrix) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value.JSObject())

	retVal := c.p.Call("setMatrix", args...)
	return ProceduralTextureFromJSObject(retVal, c.ctx)
}

// SetTexture calls the SetTexture method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#settexture
func (c *CloudProceduralTexture) SetTexture(name string, texture *Texture) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, texture.JSObject())

	retVal := c.p.Call("setTexture", args...)
	return ProceduralTextureFromJSObject(retVal, c.ctx)
}

// SetVector2 calls the SetVector2 method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#setvector2
func (c *CloudProceduralTexture) SetVector2(name string, value *Vector2) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value.JSObject())

	retVal := c.p.Call("setVector2", args...)
	return ProceduralTextureFromJSObject(retVal, c.ctx)
}

// SetVector3 calls the SetVector3 method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#setvector3
func (c *CloudProceduralTexture) SetVector3(name string, value *Vector3) *ProceduralTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, value.JSObject())

	retVal := c.p.Call("setVector3", args...)
	return ProceduralTextureFromJSObject(retVal, c.ctx)
}

// ToString calls the ToString method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#tostring
func (c *CloudProceduralTexture) ToString() string {

	retVal := c.p.Call("toString")
	return retVal.String()
}

// UpdateSamplingMode calls the UpdateSamplingMode method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#updatesamplingmode
func (c *CloudProceduralTexture) UpdateSamplingMode(samplingMode float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, samplingMode)

	c.p.Call("updateSamplingMode", args...)
}

// UpdateShaderUniforms calls the UpdateShaderUniforms method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#updateshaderuniforms
func (c *CloudProceduralTexture) UpdateShaderUniforms() {

	c.p.Call("updateShaderUniforms")
}

// CloudProceduralTextureUpdateURLOpts contains optional parameters for CloudProceduralTexture.UpdateURL.
type CloudProceduralTextureUpdateURLOpts struct {
	Buffer *string
	OnLoad func()
}

// UpdateURL calls the UpdateURL method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#updateurl
func (c *CloudProceduralTexture) UpdateURL(url string, opts *CloudProceduralTextureUpdateURLOpts) {
	if opts == nil {
		opts = &CloudProceduralTextureUpdateURLOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, url)

	if opts.Buffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Buffer)
	}
	if opts.OnLoad == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnLoad)
	}

	c.p.Call("updateURL", args...)
}

// WhenAllReady calls the WhenAllReady method on the CloudProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#whenallready
func (c *CloudProceduralTexture) WhenAllReady(textures *BaseTexture, callback func()) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, textures.JSObject())
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { callback(); return nil }))

	c.p.Call("WhenAllReady", args...)
}

/*

// Animations returns the Animations property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#animations
func (c *CloudProceduralTexture) Animations(animations *Animation) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(animations.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#animations
func (c *CloudProceduralTexture) SetAnimations(animations *Animation) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(animations.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// AnisotropicFilteringLevel returns the AnisotropicFilteringLevel property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#anisotropicfilteringlevel
func (c *CloudProceduralTexture) AnisotropicFilteringLevel(anisotropicFilteringLevel float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(anisotropicFilteringLevel)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetAnisotropicFilteringLevel sets the AnisotropicFilteringLevel property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#anisotropicfilteringlevel
func (c *CloudProceduralTexture) SetAnisotropicFilteringLevel(anisotropicFilteringLevel float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(anisotropicFilteringLevel)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// AutoClear returns the AutoClear property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#autoclear
func (c *CloudProceduralTexture) AutoClear(autoClear bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(autoClear)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetAutoClear sets the AutoClear property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#autoclear
func (c *CloudProceduralTexture) SetAutoClear(autoClear bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(autoClear)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// BILINEAR_SAMPLINGMODE returns the BILINEAR_SAMPLINGMODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#bilinear_samplingmode
func (c *CloudProceduralTexture) BILINEAR_SAMPLINGMODE(BILINEAR_SAMPLINGMODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(BILINEAR_SAMPLINGMODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetBILINEAR_SAMPLINGMODE sets the BILINEAR_SAMPLINGMODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#bilinear_samplingmode
func (c *CloudProceduralTexture) SetBILINEAR_SAMPLINGMODE(BILINEAR_SAMPLINGMODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(BILINEAR_SAMPLINGMODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// CLAMP_ADDRESSMODE returns the CLAMP_ADDRESSMODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#clamp_addressmode
func (c *CloudProceduralTexture) CLAMP_ADDRESSMODE(CLAMP_ADDRESSMODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(CLAMP_ADDRESSMODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetCLAMP_ADDRESSMODE sets the CLAMP_ADDRESSMODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#clamp_addressmode
func (c *CloudProceduralTexture) SetCLAMP_ADDRESSMODE(CLAMP_ADDRESSMODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(CLAMP_ADDRESSMODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// CUBIC_MODE returns the CUBIC_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#cubic_mode
func (c *CloudProceduralTexture) CUBIC_MODE(CUBIC_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(CUBIC_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetCUBIC_MODE sets the CUBIC_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#cubic_mode
func (c *CloudProceduralTexture) SetCUBIC_MODE(CUBIC_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(CUBIC_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// CanRescale returns the CanRescale property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#canrescale
func (c *CloudProceduralTexture) CanRescale(canRescale bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(canRescale)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetCanRescale sets the CanRescale property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#canrescale
func (c *CloudProceduralTexture) SetCanRescale(canRescale bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(canRescale)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// CloudColor returns the CloudColor property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#cloudcolor
func (c *CloudProceduralTexture) CloudColor(cloudColor *Color4) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(cloudColor.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetCloudColor sets the CloudColor property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#cloudcolor
func (c *CloudProceduralTexture) SetCloudColor(cloudColor *Color4) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(cloudColor.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// CoordinatesIndex returns the CoordinatesIndex property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#coordinatesindex
func (c *CloudProceduralTexture) CoordinatesIndex(coordinatesIndex float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(coordinatesIndex)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetCoordinatesIndex sets the CoordinatesIndex property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#coordinatesindex
func (c *CloudProceduralTexture) SetCoordinatesIndex(coordinatesIndex float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(coordinatesIndex)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// CoordinatesMode returns the CoordinatesMode property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#coordinatesmode
func (c *CloudProceduralTexture) CoordinatesMode(coordinatesMode float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(coordinatesMode)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetCoordinatesMode sets the CoordinatesMode property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#coordinatesmode
func (c *CloudProceduralTexture) SetCoordinatesMode(coordinatesMode float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(coordinatesMode)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// DEFAULT_ANISOTROPIC_FILTERING_LEVEL returns the DEFAULT_ANISOTROPIC_FILTERING_LEVEL property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#default_anisotropic_filtering_level
func (c *CloudProceduralTexture) DEFAULT_ANISOTROPIC_FILTERING_LEVEL(DEFAULT_ANISOTROPIC_FILTERING_LEVEL float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(DEFAULT_ANISOTROPIC_FILTERING_LEVEL)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetDEFAULT_ANISOTROPIC_FILTERING_LEVEL sets the DEFAULT_ANISOTROPIC_FILTERING_LEVEL property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#default_anisotropic_filtering_level
func (c *CloudProceduralTexture) SetDEFAULT_ANISOTROPIC_FILTERING_LEVEL(DEFAULT_ANISOTROPIC_FILTERING_LEVEL float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(DEFAULT_ANISOTROPIC_FILTERING_LEVEL)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// DelayLoadState returns the DelayLoadState property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#delayloadstate
func (c *CloudProceduralTexture) DelayLoadState(delayLoadState float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(delayLoadState)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetDelayLoadState sets the DelayLoadState property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#delayloadstate
func (c *CloudProceduralTexture) SetDelayLoadState(delayLoadState float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(delayLoadState)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// EQUIRECTANGULAR_MODE returns the EQUIRECTANGULAR_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#equirectangular_mode
func (c *CloudProceduralTexture) EQUIRECTANGULAR_MODE(EQUIRECTANGULAR_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(EQUIRECTANGULAR_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetEQUIRECTANGULAR_MODE sets the EQUIRECTANGULAR_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#equirectangular_mode
func (c *CloudProceduralTexture) SetEQUIRECTANGULAR_MODE(EQUIRECTANGULAR_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(EQUIRECTANGULAR_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// EXPLICIT_MODE returns the EXPLICIT_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#explicit_mode
func (c *CloudProceduralTexture) EXPLICIT_MODE(EXPLICIT_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(EXPLICIT_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetEXPLICIT_MODE sets the EXPLICIT_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#explicit_mode
func (c *CloudProceduralTexture) SetEXPLICIT_MODE(EXPLICIT_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(EXPLICIT_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// FIXED_EQUIRECTANGULAR_MIRRORED_MODE returns the FIXED_EQUIRECTANGULAR_MIRRORED_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#fixed_equirectangular_mirrored_mode
func (c *CloudProceduralTexture) FIXED_EQUIRECTANGULAR_MIRRORED_MODE(FIXED_EQUIRECTANGULAR_MIRRORED_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(FIXED_EQUIRECTANGULAR_MIRRORED_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetFIXED_EQUIRECTANGULAR_MIRRORED_MODE sets the FIXED_EQUIRECTANGULAR_MIRRORED_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#fixed_equirectangular_mirrored_mode
func (c *CloudProceduralTexture) SetFIXED_EQUIRECTANGULAR_MIRRORED_MODE(FIXED_EQUIRECTANGULAR_MIRRORED_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(FIXED_EQUIRECTANGULAR_MIRRORED_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// FIXED_EQUIRECTANGULAR_MODE returns the FIXED_EQUIRECTANGULAR_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#fixed_equirectangular_mode
func (c *CloudProceduralTexture) FIXED_EQUIRECTANGULAR_MODE(FIXED_EQUIRECTANGULAR_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(FIXED_EQUIRECTANGULAR_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetFIXED_EQUIRECTANGULAR_MODE sets the FIXED_EQUIRECTANGULAR_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#fixed_equirectangular_mode
func (c *CloudProceduralTexture) SetFIXED_EQUIRECTANGULAR_MODE(FIXED_EQUIRECTANGULAR_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(FIXED_EQUIRECTANGULAR_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// GammaSpace returns the GammaSpace property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#gammaspace
func (c *CloudProceduralTexture) GammaSpace(gammaSpace bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(gammaSpace)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetGammaSpace sets the GammaSpace property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#gammaspace
func (c *CloudProceduralTexture) SetGammaSpace(gammaSpace bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(gammaSpace)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// GetAlphaFromRGB returns the GetAlphaFromRGB property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#getalphafromrgb
func (c *CloudProceduralTexture) GetAlphaFromRGB(getAlphaFromRGB bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(getAlphaFromRGB)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetGetAlphaFromRGB sets the GetAlphaFromRGB property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#getalphafromrgb
func (c *CloudProceduralTexture) SetGetAlphaFromRGB(getAlphaFromRGB bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(getAlphaFromRGB)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// HasAlpha returns the HasAlpha property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#hasalpha
func (c *CloudProceduralTexture) HasAlpha(hasAlpha bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(hasAlpha)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetHasAlpha sets the HasAlpha property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#hasalpha
func (c *CloudProceduralTexture) SetHasAlpha(hasAlpha bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(hasAlpha)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// INVCUBIC_MODE returns the INVCUBIC_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#invcubic_mode
func (c *CloudProceduralTexture) INVCUBIC_MODE(INVCUBIC_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(INVCUBIC_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetINVCUBIC_MODE sets the INVCUBIC_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#invcubic_mode
func (c *CloudProceduralTexture) SetINVCUBIC_MODE(INVCUBIC_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(INVCUBIC_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#inspectablecustomproperties
func (c *CloudProceduralTexture) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(inspectableCustomProperties.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#inspectablecustomproperties
func (c *CloudProceduralTexture) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(inspectableCustomProperties.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// InvertY returns the InvertY property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#inverty
func (c *CloudProceduralTexture) InvertY(invertY bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(invertY)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetInvertY sets the InvertY property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#inverty
func (c *CloudProceduralTexture) SetInvertY(invertY bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(invertY)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// InvertZ returns the InvertZ property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#invertz
func (c *CloudProceduralTexture) InvertZ(invertZ bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(invertZ)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetInvertZ sets the InvertZ property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#invertz
func (c *CloudProceduralTexture) SetInvertZ(invertZ bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(invertZ)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// IrradianceTexture returns the IrradianceTexture property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#irradiancetexture
func (c *CloudProceduralTexture) IrradianceTexture(irradianceTexture *BaseTexture) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(irradianceTexture.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIrradianceTexture sets the IrradianceTexture property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#irradiancetexture
func (c *CloudProceduralTexture) SetIrradianceTexture(irradianceTexture *BaseTexture) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(irradianceTexture.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// Is2DArray returns the Is2DArray property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#is2darray
func (c *CloudProceduralTexture) Is2DArray(is2DArray bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(is2DArray)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIs2DArray sets the Is2DArray property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#is2darray
func (c *CloudProceduralTexture) SetIs2DArray(is2DArray bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(is2DArray)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// Is3D returns the Is3D property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#is3d
func (c *CloudProceduralTexture) Is3D(is3D bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(is3D)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIs3D sets the Is3D property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#is3d
func (c *CloudProceduralTexture) SetIs3D(is3D bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(is3D)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// IsBlocking returns the IsBlocking property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#isblocking
func (c *CloudProceduralTexture) IsBlocking(isBlocking bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(isBlocking)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIsBlocking sets the IsBlocking property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#isblocking
func (c *CloudProceduralTexture) SetIsBlocking(isBlocking bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(isBlocking)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// IsCube returns the IsCube property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#iscube
func (c *CloudProceduralTexture) IsCube(isCube bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(isCube)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIsCube sets the IsCube property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#iscube
func (c *CloudProceduralTexture) SetIsCube(isCube bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(isCube)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// IsEnabled returns the IsEnabled property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#isenabled
func (c *CloudProceduralTexture) IsEnabled(isEnabled bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(isEnabled)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIsEnabled sets the IsEnabled property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#isenabled
func (c *CloudProceduralTexture) SetIsEnabled(isEnabled bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(isEnabled)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// IsRGBD returns the IsRGBD property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#isrgbd
func (c *CloudProceduralTexture) IsRGBD(isRGBD bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(isRGBD)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIsRGBD sets the IsRGBD property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#isrgbd
func (c *CloudProceduralTexture) SetIsRGBD(isRGBD bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(isRGBD)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// IsRenderTarget returns the IsRenderTarget property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#isrendertarget
func (c *CloudProceduralTexture) IsRenderTarget(isRenderTarget bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(isRenderTarget)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetIsRenderTarget sets the IsRenderTarget property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#isrendertarget
func (c *CloudProceduralTexture) SetIsRenderTarget(isRenderTarget bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(isRenderTarget)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// LINEAR_LINEAR returns the LINEAR_LINEAR property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#linear_linear
func (c *CloudProceduralTexture) LINEAR_LINEAR(LINEAR_LINEAR float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(LINEAR_LINEAR)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_LINEAR sets the LINEAR_LINEAR property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#linear_linear
func (c *CloudProceduralTexture) SetLINEAR_LINEAR(LINEAR_LINEAR float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(LINEAR_LINEAR)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// LINEAR_LINEAR_MIPLINEAR returns the LINEAR_LINEAR_MIPLINEAR property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#linear_linear_miplinear
func (c *CloudProceduralTexture) LINEAR_LINEAR_MIPLINEAR(LINEAR_LINEAR_MIPLINEAR float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(LINEAR_LINEAR_MIPLINEAR)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_LINEAR_MIPLINEAR sets the LINEAR_LINEAR_MIPLINEAR property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#linear_linear_miplinear
func (c *CloudProceduralTexture) SetLINEAR_LINEAR_MIPLINEAR(LINEAR_LINEAR_MIPLINEAR float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(LINEAR_LINEAR_MIPLINEAR)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// LINEAR_LINEAR_MIPNEAREST returns the LINEAR_LINEAR_MIPNEAREST property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#linear_linear_mipnearest
func (c *CloudProceduralTexture) LINEAR_LINEAR_MIPNEAREST(LINEAR_LINEAR_MIPNEAREST float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(LINEAR_LINEAR_MIPNEAREST)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_LINEAR_MIPNEAREST sets the LINEAR_LINEAR_MIPNEAREST property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#linear_linear_mipnearest
func (c *CloudProceduralTexture) SetLINEAR_LINEAR_MIPNEAREST(LINEAR_LINEAR_MIPNEAREST float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(LINEAR_LINEAR_MIPNEAREST)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// LINEAR_NEAREST returns the LINEAR_NEAREST property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#linear_nearest
func (c *CloudProceduralTexture) LINEAR_NEAREST(LINEAR_NEAREST float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(LINEAR_NEAREST)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_NEAREST sets the LINEAR_NEAREST property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#linear_nearest
func (c *CloudProceduralTexture) SetLINEAR_NEAREST(LINEAR_NEAREST float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(LINEAR_NEAREST)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// LINEAR_NEAREST_MIPLINEAR returns the LINEAR_NEAREST_MIPLINEAR property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#linear_nearest_miplinear
func (c *CloudProceduralTexture) LINEAR_NEAREST_MIPLINEAR(LINEAR_NEAREST_MIPLINEAR float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(LINEAR_NEAREST_MIPLINEAR)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_NEAREST_MIPLINEAR sets the LINEAR_NEAREST_MIPLINEAR property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#linear_nearest_miplinear
func (c *CloudProceduralTexture) SetLINEAR_NEAREST_MIPLINEAR(LINEAR_NEAREST_MIPLINEAR float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(LINEAR_NEAREST_MIPLINEAR)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// LINEAR_NEAREST_MIPNEAREST returns the LINEAR_NEAREST_MIPNEAREST property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#linear_nearest_mipnearest
func (c *CloudProceduralTexture) LINEAR_NEAREST_MIPNEAREST(LINEAR_NEAREST_MIPNEAREST float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(LINEAR_NEAREST_MIPNEAREST)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLINEAR_NEAREST_MIPNEAREST sets the LINEAR_NEAREST_MIPNEAREST property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#linear_nearest_mipnearest
func (c *CloudProceduralTexture) SetLINEAR_NEAREST_MIPNEAREST(LINEAR_NEAREST_MIPNEAREST float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(LINEAR_NEAREST_MIPNEAREST)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// Level returns the Level property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#level
func (c *CloudProceduralTexture) Level(level float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(level)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLevel sets the Level property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#level
func (c *CloudProceduralTexture) SetLevel(level float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(level)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// LinearSpecularLOD returns the LinearSpecularLOD property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#linearspecularlod
func (c *CloudProceduralTexture) LinearSpecularLOD(linearSpecularLOD bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(linearSpecularLOD)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLinearSpecularLOD sets the LinearSpecularLOD property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#linearspecularlod
func (c *CloudProceduralTexture) SetLinearSpecularLOD(linearSpecularLOD bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(linearSpecularLOD)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// LodGenerationOffset returns the LodGenerationOffset property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#lodgenerationoffset
func (c *CloudProceduralTexture) LodGenerationOffset(lodGenerationOffset float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(lodGenerationOffset)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLodGenerationOffset sets the LodGenerationOffset property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#lodgenerationoffset
func (c *CloudProceduralTexture) SetLodGenerationOffset(lodGenerationOffset float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(lodGenerationOffset)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// LodGenerationScale returns the LodGenerationScale property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#lodgenerationscale
func (c *CloudProceduralTexture) LodGenerationScale(lodGenerationScale float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(lodGenerationScale)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetLodGenerationScale sets the LodGenerationScale property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#lodgenerationscale
func (c *CloudProceduralTexture) SetLodGenerationScale(lodGenerationScale float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(lodGenerationScale)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// MIRROR_ADDRESSMODE returns the MIRROR_ADDRESSMODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#mirror_addressmode
func (c *CloudProceduralTexture) MIRROR_ADDRESSMODE(MIRROR_ADDRESSMODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(MIRROR_ADDRESSMODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetMIRROR_ADDRESSMODE sets the MIRROR_ADDRESSMODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#mirror_addressmode
func (c *CloudProceduralTexture) SetMIRROR_ADDRESSMODE(MIRROR_ADDRESSMODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(MIRROR_ADDRESSMODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#metadata
func (c *CloudProceduralTexture) Metadata(metadata interface{}) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(metadata)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#metadata
func (c *CloudProceduralTexture) SetMetadata(metadata interface{}) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(metadata)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// NEAREST_LINEAR returns the NEAREST_LINEAR property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nearest_linear
func (c *CloudProceduralTexture) NEAREST_LINEAR(NEAREST_LINEAR float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(NEAREST_LINEAR)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_LINEAR sets the NEAREST_LINEAR property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nearest_linear
func (c *CloudProceduralTexture) SetNEAREST_LINEAR(NEAREST_LINEAR float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(NEAREST_LINEAR)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// NEAREST_LINEAR_MIPLINEAR returns the NEAREST_LINEAR_MIPLINEAR property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nearest_linear_miplinear
func (c *CloudProceduralTexture) NEAREST_LINEAR_MIPLINEAR(NEAREST_LINEAR_MIPLINEAR float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(NEAREST_LINEAR_MIPLINEAR)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_LINEAR_MIPLINEAR sets the NEAREST_LINEAR_MIPLINEAR property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nearest_linear_miplinear
func (c *CloudProceduralTexture) SetNEAREST_LINEAR_MIPLINEAR(NEAREST_LINEAR_MIPLINEAR float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(NEAREST_LINEAR_MIPLINEAR)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// NEAREST_LINEAR_MIPNEAREST returns the NEAREST_LINEAR_MIPNEAREST property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nearest_linear_mipnearest
func (c *CloudProceduralTexture) NEAREST_LINEAR_MIPNEAREST(NEAREST_LINEAR_MIPNEAREST float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(NEAREST_LINEAR_MIPNEAREST)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_LINEAR_MIPNEAREST sets the NEAREST_LINEAR_MIPNEAREST property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nearest_linear_mipnearest
func (c *CloudProceduralTexture) SetNEAREST_LINEAR_MIPNEAREST(NEAREST_LINEAR_MIPNEAREST float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(NEAREST_LINEAR_MIPNEAREST)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// NEAREST_NEAREST returns the NEAREST_NEAREST property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nearest_nearest
func (c *CloudProceduralTexture) NEAREST_NEAREST(NEAREST_NEAREST float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(NEAREST_NEAREST)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_NEAREST sets the NEAREST_NEAREST property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nearest_nearest
func (c *CloudProceduralTexture) SetNEAREST_NEAREST(NEAREST_NEAREST float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(NEAREST_NEAREST)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// NEAREST_NEAREST_MIPLINEAR returns the NEAREST_NEAREST_MIPLINEAR property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nearest_nearest_miplinear
func (c *CloudProceduralTexture) NEAREST_NEAREST_MIPLINEAR(NEAREST_NEAREST_MIPLINEAR float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(NEAREST_NEAREST_MIPLINEAR)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_NEAREST_MIPLINEAR sets the NEAREST_NEAREST_MIPLINEAR property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nearest_nearest_miplinear
func (c *CloudProceduralTexture) SetNEAREST_NEAREST_MIPLINEAR(NEAREST_NEAREST_MIPLINEAR float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(NEAREST_NEAREST_MIPLINEAR)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// NEAREST_NEAREST_MIPNEAREST returns the NEAREST_NEAREST_MIPNEAREST property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nearest_nearest_mipnearest
func (c *CloudProceduralTexture) NEAREST_NEAREST_MIPNEAREST(NEAREST_NEAREST_MIPNEAREST float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(NEAREST_NEAREST_MIPNEAREST)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_NEAREST_MIPNEAREST sets the NEAREST_NEAREST_MIPNEAREST property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nearest_nearest_mipnearest
func (c *CloudProceduralTexture) SetNEAREST_NEAREST_MIPNEAREST(NEAREST_NEAREST_MIPNEAREST float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(NEAREST_NEAREST_MIPNEAREST)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// NEAREST_SAMPLINGMODE returns the NEAREST_SAMPLINGMODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nearest_samplingmode
func (c *CloudProceduralTexture) NEAREST_SAMPLINGMODE(NEAREST_SAMPLINGMODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(NEAREST_SAMPLINGMODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNEAREST_SAMPLINGMODE sets the NEAREST_SAMPLINGMODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nearest_samplingmode
func (c *CloudProceduralTexture) SetNEAREST_SAMPLINGMODE(NEAREST_SAMPLINGMODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(NEAREST_SAMPLINGMODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#name
func (c *CloudProceduralTexture) Name(name string) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(name)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#name
func (c *CloudProceduralTexture) SetName(name string) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(name)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// NoMipmap returns the NoMipmap property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nomipmap
func (c *CloudProceduralTexture) NoMipmap(noMipmap bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(noMipmap)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetNoMipmap sets the NoMipmap property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#nomipmap
func (c *CloudProceduralTexture) SetNoMipmap(noMipmap bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(noMipmap)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#ondispose
func (c *CloudProceduralTexture) OnDispose(onDispose func()) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#ondispose
func (c *CloudProceduralTexture) SetOnDispose(onDispose func()) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#ondisposeobservable
func (c *CloudProceduralTexture) OnDisposeObservable(onDisposeObservable *Observable) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(onDisposeObservable.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#ondisposeobservable
func (c *CloudProceduralTexture) SetOnDisposeObservable(onDisposeObservable *Observable) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(onDisposeObservable.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// OnGenerated returns the OnGenerated property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#ongenerated
func (c *CloudProceduralTexture) OnGenerated(onGenerated func()) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onGenerated(); return nil}))
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetOnGenerated sets the OnGenerated property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#ongenerated
func (c *CloudProceduralTexture) SetOnGenerated(onGenerated func()) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onGenerated(); return nil}))
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// OnGeneratedObservable returns the OnGeneratedObservable property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#ongeneratedobservable
func (c *CloudProceduralTexture) OnGeneratedObservable(onGeneratedObservable *Observable) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(onGeneratedObservable.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetOnGeneratedObservable sets the OnGeneratedObservable property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#ongeneratedobservable
func (c *CloudProceduralTexture) SetOnGeneratedObservable(onGeneratedObservable *Observable) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(onGeneratedObservable.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// OnLoadObservable returns the OnLoadObservable property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#onloadobservable
func (c *CloudProceduralTexture) OnLoadObservable(onLoadObservable *Observable) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(onLoadObservable.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetOnLoadObservable sets the OnLoadObservable property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#onloadobservable
func (c *CloudProceduralTexture) SetOnLoadObservable(onLoadObservable *Observable) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(onLoadObservable.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// PLANAR_MODE returns the PLANAR_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#planar_mode
func (c *CloudProceduralTexture) PLANAR_MODE(PLANAR_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(PLANAR_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetPLANAR_MODE sets the PLANAR_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#planar_mode
func (c *CloudProceduralTexture) SetPLANAR_MODE(PLANAR_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(PLANAR_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// PROJECTION_MODE returns the PROJECTION_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#projection_mode
func (c *CloudProceduralTexture) PROJECTION_MODE(PROJECTION_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(PROJECTION_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetPROJECTION_MODE sets the PROJECTION_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#projection_mode
func (c *CloudProceduralTexture) SetPROJECTION_MODE(PROJECTION_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(PROJECTION_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// RefreshRate returns the RefreshRate property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#refreshrate
func (c *CloudProceduralTexture) RefreshRate(refreshRate float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(refreshRate)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetRefreshRate sets the RefreshRate property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#refreshrate
func (c *CloudProceduralTexture) SetRefreshRate(refreshRate float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(refreshRate)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#reserveddatastore
func (c *CloudProceduralTexture) ReservedDataStore(reservedDataStore interface{}) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(reservedDataStore)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#reserveddatastore
func (c *CloudProceduralTexture) SetReservedDataStore(reservedDataStore interface{}) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(reservedDataStore)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SKYBOX_MODE returns the SKYBOX_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#skybox_mode
func (c *CloudProceduralTexture) SKYBOX_MODE(SKYBOX_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(SKYBOX_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetSKYBOX_MODE sets the SKYBOX_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#skybox_mode
func (c *CloudProceduralTexture) SetSKYBOX_MODE(SKYBOX_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(SKYBOX_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SPHERICAL_MODE returns the SPHERICAL_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#spherical_mode
func (c *CloudProceduralTexture) SPHERICAL_MODE(SPHERICAL_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(SPHERICAL_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetSPHERICAL_MODE sets the SPHERICAL_MODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#spherical_mode
func (c *CloudProceduralTexture) SetSPHERICAL_MODE(SPHERICAL_MODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(SPHERICAL_MODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SamplingMode returns the SamplingMode property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#samplingmode
func (c *CloudProceduralTexture) SamplingMode(samplingMode float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(samplingMode)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetSamplingMode sets the SamplingMode property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#samplingmode
func (c *CloudProceduralTexture) SetSamplingMode(samplingMode float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(samplingMode)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SerializeBuffers returns the SerializeBuffers property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#serializebuffers
func (c *CloudProceduralTexture) SerializeBuffers(SerializeBuffers bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(SerializeBuffers)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetSerializeBuffers sets the SerializeBuffers property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#serializebuffers
func (c *CloudProceduralTexture) SetSerializeBuffers(SerializeBuffers bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(SerializeBuffers)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SkyColor returns the SkyColor property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#skycolor
func (c *CloudProceduralTexture) SkyColor(skyColor *Color4) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(skyColor.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetSkyColor sets the SkyColor property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#skycolor
func (c *CloudProceduralTexture) SetSkyColor(skyColor *Color4) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(skyColor.JSObject())
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// TRILINEAR_SAMPLINGMODE returns the TRILINEAR_SAMPLINGMODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#trilinear_samplingmode
func (c *CloudProceduralTexture) TRILINEAR_SAMPLINGMODE(TRILINEAR_SAMPLINGMODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(TRILINEAR_SAMPLINGMODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetTRILINEAR_SAMPLINGMODE sets the TRILINEAR_SAMPLINGMODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#trilinear_samplingmode
func (c *CloudProceduralTexture) SetTRILINEAR_SAMPLINGMODE(TRILINEAR_SAMPLINGMODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(TRILINEAR_SAMPLINGMODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// TextureFormat returns the TextureFormat property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#textureformat
func (c *CloudProceduralTexture) TextureFormat(textureFormat float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(textureFormat)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetTextureFormat sets the TextureFormat property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#textureformat
func (c *CloudProceduralTexture) SetTextureFormat(textureFormat float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(textureFormat)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// TextureType returns the TextureType property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#texturetype
func (c *CloudProceduralTexture) TextureType(textureType float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(textureType)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetTextureType sets the TextureType property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#texturetype
func (c *CloudProceduralTexture) SetTextureType(textureType float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(textureType)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// UAng returns the UAng property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#uang
func (c *CloudProceduralTexture) UAng(uAng float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(uAng)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetUAng sets the UAng property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#uang
func (c *CloudProceduralTexture) SetUAng(uAng float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(uAng)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// UOffset returns the UOffset property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#uoffset
func (c *CloudProceduralTexture) UOffset(uOffset float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(uOffset)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetUOffset sets the UOffset property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#uoffset
func (c *CloudProceduralTexture) SetUOffset(uOffset float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(uOffset)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// URotationCenter returns the URotationCenter property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#urotationcenter
func (c *CloudProceduralTexture) URotationCenter(uRotationCenter float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(uRotationCenter)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetURotationCenter sets the URotationCenter property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#urotationcenter
func (c *CloudProceduralTexture) SetURotationCenter(uRotationCenter float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(uRotationCenter)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// UScale returns the UScale property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#uscale
func (c *CloudProceduralTexture) UScale(uScale float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(uScale)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetUScale sets the UScale property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#uscale
func (c *CloudProceduralTexture) SetUScale(uScale float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(uScale)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// Uid returns the Uid property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#uid
func (c *CloudProceduralTexture) Uid(uid string) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(uid)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetUid sets the Uid property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#uid
func (c *CloudProceduralTexture) SetUid(uid string) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(uid)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#uniqueid
func (c *CloudProceduralTexture) UniqueId(uniqueId float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(uniqueId)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#uniqueid
func (c *CloudProceduralTexture) SetUniqueId(uniqueId float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(uniqueId)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// Url returns the Url property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#url
func (c *CloudProceduralTexture) Url(url string) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(url)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetUrl sets the Url property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#url
func (c *CloudProceduralTexture) SetUrl(url string) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(url)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// UseSerializedUrlIfAny returns the UseSerializedUrlIfAny property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#useserializedurlifany
func (c *CloudProceduralTexture) UseSerializedUrlIfAny(UseSerializedUrlIfAny bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(UseSerializedUrlIfAny)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetUseSerializedUrlIfAny sets the UseSerializedUrlIfAny property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#useserializedurlifany
func (c *CloudProceduralTexture) SetUseSerializedUrlIfAny(UseSerializedUrlIfAny bool) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(UseSerializedUrlIfAny)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// VAng returns the VAng property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#vang
func (c *CloudProceduralTexture) VAng(vAng float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(vAng)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetVAng sets the VAng property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#vang
func (c *CloudProceduralTexture) SetVAng(vAng float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(vAng)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// VOffset returns the VOffset property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#voffset
func (c *CloudProceduralTexture) VOffset(vOffset float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(vOffset)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetVOffset sets the VOffset property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#voffset
func (c *CloudProceduralTexture) SetVOffset(vOffset float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(vOffset)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// VRotationCenter returns the VRotationCenter property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#vrotationcenter
func (c *CloudProceduralTexture) VRotationCenter(vRotationCenter float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(vRotationCenter)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetVRotationCenter sets the VRotationCenter property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#vrotationcenter
func (c *CloudProceduralTexture) SetVRotationCenter(vRotationCenter float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(vRotationCenter)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// VScale returns the VScale property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#vscale
func (c *CloudProceduralTexture) VScale(vScale float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(vScale)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetVScale sets the VScale property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#vscale
func (c *CloudProceduralTexture) SetVScale(vScale float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(vScale)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// WAng returns the WAng property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#wang
func (c *CloudProceduralTexture) WAng(wAng float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(wAng)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetWAng sets the WAng property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#wang
func (c *CloudProceduralTexture) SetWAng(wAng float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(wAng)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// WRAP_ADDRESSMODE returns the WRAP_ADDRESSMODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#wrap_addressmode
func (c *CloudProceduralTexture) WRAP_ADDRESSMODE(WRAP_ADDRESSMODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(WRAP_ADDRESSMODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetWRAP_ADDRESSMODE sets the WRAP_ADDRESSMODE property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#wrap_addressmode
func (c *CloudProceduralTexture) SetWRAP_ADDRESSMODE(WRAP_ADDRESSMODE float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(WRAP_ADDRESSMODE)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// WRotationCenter returns the WRotationCenter property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#wrotationcenter
func (c *CloudProceduralTexture) WRotationCenter(wRotationCenter float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(wRotationCenter)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetWRotationCenter sets the WRotationCenter property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#wrotationcenter
func (c *CloudProceduralTexture) SetWRotationCenter(wRotationCenter float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(wRotationCenter)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// WrapR returns the WrapR property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#wrapr
func (c *CloudProceduralTexture) WrapR(wrapR float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(wrapR)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetWrapR sets the WrapR property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#wrapr
func (c *CloudProceduralTexture) SetWrapR(wrapR float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(wrapR)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// WrapU returns the WrapU property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#wrapu
func (c *CloudProceduralTexture) WrapU(wrapU float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(wrapU)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetWrapU sets the WrapU property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#wrapu
func (c *CloudProceduralTexture) SetWrapU(wrapU float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(wrapU)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// WrapV returns the WrapV property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#wrapv
func (c *CloudProceduralTexture) WrapV(wrapV float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(wrapV)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

// SetWrapV sets the WrapV property of class CloudProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.cloudproceduraltexture#wrapv
func (c *CloudProceduralTexture) SetWrapV(wrapV float64) *CloudProceduralTexture {
	p := ba.ctx.Get("CloudProceduralTexture").New(wrapV)
	return CloudProceduralTextureFromJSObject(p, ba.ctx)
}

*/
