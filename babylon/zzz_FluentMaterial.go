// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FluentMaterial represents a babylon.js FluentMaterial.
// Class used to render controls with fluent desgin
type FluentMaterial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FluentMaterial) JSObject() js.Value { return f.p }

// FluentMaterial returns a FluentMaterial JavaScript class.
func (gui *GUI) FluentMaterial() *FluentMaterial {
	p := gui.ctx.Get("FluentMaterial")
	return FluentMaterialFromJSObject(p, gui.ctx)
}

// FluentMaterialFromJSObject returns a wrapped FluentMaterial JavaScript class.
func FluentMaterialFromJSObject(p js.Value, ctx js.Value) *FluentMaterial {
	return &FluentMaterial{p: p, ctx: ctx}
}

// FluentMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func FluentMaterialArrayToJSArray(array []*FluentMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewFluentMaterial returns a new FluentMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial
func (gui *GUI) NewFluentMaterial(name string, scene *Scene) *FluentMaterial {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := gui.ctx.Get("FluentMaterial").New(args...)
	return FluentMaterialFromJSObject(p, gui.ctx)
}

// BindForSubMesh calls the BindForSubMesh method on the FluentMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#bindforsubmesh
func (f *FluentMaterial) BindForSubMesh(world *Matrix, mesh *Mesh, subMesh *SubMesh) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, world.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	f.p.Call("bindForSubMesh", args...)
}

// Clone calls the Clone method on the FluentMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#clone
func (f *FluentMaterial) Clone(name string) *FluentMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := f.p.Call("clone", args...)
	return FluentMaterialFromJSObject(retVal, f.ctx)
}

// FluentMaterialDisposeOpts contains optional parameters for FluentMaterial.Dispose.
type FluentMaterialDisposeOpts struct {
	ForceDisposeEffect *bool
}

// Dispose calls the Dispose method on the FluentMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#dispose
func (f *FluentMaterial) Dispose(opts *FluentMaterialDisposeOpts) {
	if opts == nil {
		opts = &FluentMaterialDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForceDisposeEffect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeEffect)
	}

	f.p.Call("dispose", args...)
}

// GetActiveTextures calls the GetActiveTextures method on the FluentMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#getactivetextures
func (f *FluentMaterial) GetActiveTextures() []*BaseTexture {

	retVal := f.p.Call("getActiveTextures")
	result := []*BaseTexture{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, BaseTextureFromJSObject(retVal.Index(ri), f.ctx))
	}
	return result
}

// GetAlphaTestTexture calls the GetAlphaTestTexture method on the FluentMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#getalphatesttexture
func (f *FluentMaterial) GetAlphaTestTexture() *BaseTexture {

	retVal := f.p.Call("getAlphaTestTexture")
	return BaseTextureFromJSObject(retVal, f.ctx)
}

// GetClassName calls the GetClassName method on the FluentMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#getclassname
func (f *FluentMaterial) GetClassName() string {

	retVal := f.p.Call("getClassName")
	return retVal.String()
}

// HasTexture calls the HasTexture method on the FluentMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#hastexture
func (f *FluentMaterial) HasTexture(texture *BaseTexture) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	retVal := f.p.Call("hasTexture", args...)
	return retVal.Bool()
}

// FluentMaterialIsReadyForSubMeshOpts contains optional parameters for FluentMaterial.IsReadyForSubMesh.
type FluentMaterialIsReadyForSubMeshOpts struct {
	UseInstances *bool
}

// IsReadyForSubMesh calls the IsReadyForSubMesh method on the FluentMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#isreadyforsubmesh
func (f *FluentMaterial) IsReadyForSubMesh(mesh *AbstractMesh, subMesh *SubMesh, opts *FluentMaterialIsReadyForSubMeshOpts) bool {
	if opts == nil {
		opts = &FluentMaterialIsReadyForSubMeshOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := f.p.Call("isReadyForSubMesh", args...)
	return retVal.Bool()
}

// NeedAlphaBlending calls the NeedAlphaBlending method on the FluentMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#needalphablending
func (f *FluentMaterial) NeedAlphaBlending() bool {

	retVal := f.p.Call("needAlphaBlending")
	return retVal.Bool()
}

// NeedAlphaTesting calls the NeedAlphaTesting method on the FluentMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#needalphatesting
func (f *FluentMaterial) NeedAlphaTesting() bool {

	retVal := f.p.Call("needAlphaTesting")
	return retVal.Bool()
}

// Parse calls the Parse method on the FluentMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#parse
func (f *FluentMaterial) Parse(source interface{}, scene *Scene, rootUrl string) *FluentMaterial {

	args := make([]interface{}, 0, 3+0)

	args = append(args, source)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := f.p.Call("Parse", args...)
	return FluentMaterialFromJSObject(retVal, f.ctx)
}

// Serialize calls the Serialize method on the FluentMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#serialize
func (f *FluentMaterial) Serialize() interface{} {

	retVal := f.p.Call("serialize")
	return retVal
}

// AlbedoColor returns the AlbedoColor property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#albedocolor
func (f *FluentMaterial) AlbedoColor() *Color3 {
	retVal := f.p.Get("albedoColor")
	return Color3FromJSObject(retVal, f.ctx)
}

// SetAlbedoColor sets the AlbedoColor property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#albedocolor
func (f *FluentMaterial) SetAlbedoColor(albedoColor *Color3) *FluentMaterial {
	f.p.Set("albedoColor", albedoColor.JSObject())
	return f
}

// AlbedoTexture returns the AlbedoTexture property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#albedotexture
func (f *FluentMaterial) AlbedoTexture() *BaseTexture {
	retVal := f.p.Get("albedoTexture")
	return BaseTextureFromJSObject(retVal, f.ctx)
}

// SetAlbedoTexture sets the AlbedoTexture property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#albedotexture
func (f *FluentMaterial) SetAlbedoTexture(albedoTexture *BaseTexture) *FluentMaterial {
	f.p.Set("albedoTexture", albedoTexture.JSObject())
	return f
}

// Alpha returns the Alpha property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#alpha
func (f *FluentMaterial) Alpha() float64 {
	retVal := f.p.Get("alpha")
	return retVal.Float()
}

// SetAlpha sets the Alpha property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#alpha
func (f *FluentMaterial) SetAlpha(alpha float64) *FluentMaterial {
	f.p.Set("alpha", alpha)
	return f
}

// BorderMinValue returns the BorderMinValue property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#borderminvalue
func (f *FluentMaterial) BorderMinValue() float64 {
	retVal := f.p.Get("borderMinValue")
	return retVal.Float()
}

// SetBorderMinValue sets the BorderMinValue property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#borderminvalue
func (f *FluentMaterial) SetBorderMinValue(borderMinValue float64) *FluentMaterial {
	f.p.Set("borderMinValue", borderMinValue)
	return f
}

// BorderWidth returns the BorderWidth property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#borderwidth
func (f *FluentMaterial) BorderWidth() float64 {
	retVal := f.p.Get("borderWidth")
	return retVal.Float()
}

// SetBorderWidth sets the BorderWidth property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#borderwidth
func (f *FluentMaterial) SetBorderWidth(borderWidth float64) *FluentMaterial {
	f.p.Set("borderWidth", borderWidth)
	return f
}

// EdgeSmoothingValue returns the EdgeSmoothingValue property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#edgesmoothingvalue
func (f *FluentMaterial) EdgeSmoothingValue() float64 {
	retVal := f.p.Get("edgeSmoothingValue")
	return retVal.Float()
}

// SetEdgeSmoothingValue sets the EdgeSmoothingValue property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#edgesmoothingvalue
func (f *FluentMaterial) SetEdgeSmoothingValue(edgeSmoothingValue float64) *FluentMaterial {
	f.p.Set("edgeSmoothingValue", edgeSmoothingValue)
	return f
}

// HoverColor returns the HoverColor property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#hovercolor
func (f *FluentMaterial) HoverColor() *Color4 {
	retVal := f.p.Get("hoverColor")
	return Color4FromJSObject(retVal, f.ctx)
}

// SetHoverColor sets the HoverColor property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#hovercolor
func (f *FluentMaterial) SetHoverColor(hoverColor *Color4) *FluentMaterial {
	f.p.Set("hoverColor", hoverColor.JSObject())
	return f
}

// HoverPosition returns the HoverPosition property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#hoverposition
func (f *FluentMaterial) HoverPosition() *Vector3 {
	retVal := f.p.Get("hoverPosition")
	return Vector3FromJSObject(retVal, f.ctx)
}

// SetHoverPosition sets the HoverPosition property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#hoverposition
func (f *FluentMaterial) SetHoverPosition(hoverPosition *Vector3) *FluentMaterial {
	f.p.Set("hoverPosition", hoverPosition.JSObject())
	return f
}

// HoverRadius returns the HoverRadius property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#hoverradius
func (f *FluentMaterial) HoverRadius() float64 {
	retVal := f.p.Get("hoverRadius")
	return retVal.Float()
}

// SetHoverRadius sets the HoverRadius property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#hoverradius
func (f *FluentMaterial) SetHoverRadius(hoverRadius float64) *FluentMaterial {
	f.p.Set("hoverRadius", hoverRadius)
	return f
}

// InnerGlowColor returns the InnerGlowColor property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#innerglowcolor
func (f *FluentMaterial) InnerGlowColor() *Color3 {
	retVal := f.p.Get("innerGlowColor")
	return Color3FromJSObject(retVal, f.ctx)
}

// SetInnerGlowColor sets the InnerGlowColor property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#innerglowcolor
func (f *FluentMaterial) SetInnerGlowColor(innerGlowColor *Color3) *FluentMaterial {
	f.p.Set("innerGlowColor", innerGlowColor.JSObject())
	return f
}

// InnerGlowColorIntensity returns the InnerGlowColorIntensity property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#innerglowcolorintensity
func (f *FluentMaterial) InnerGlowColorIntensity() float64 {
	retVal := f.p.Get("innerGlowColorIntensity")
	return retVal.Float()
}

// SetInnerGlowColorIntensity sets the InnerGlowColorIntensity property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#innerglowcolorintensity
func (f *FluentMaterial) SetInnerGlowColorIntensity(innerGlowColorIntensity float64) *FluentMaterial {
	f.p.Set("innerGlowColorIntensity", innerGlowColorIntensity)
	return f
}

// RenderBorders returns the RenderBorders property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#renderborders
func (f *FluentMaterial) RenderBorders() bool {
	retVal := f.p.Get("renderBorders")
	return retVal.Bool()
}

// SetRenderBorders sets the RenderBorders property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#renderborders
func (f *FluentMaterial) SetRenderBorders(renderBorders bool) *FluentMaterial {
	f.p.Set("renderBorders", renderBorders)
	return f
}

// RenderHoverLight returns the RenderHoverLight property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#renderhoverlight
func (f *FluentMaterial) RenderHoverLight() bool {
	retVal := f.p.Get("renderHoverLight")
	return retVal.Bool()
}

// SetRenderHoverLight sets the RenderHoverLight property of class FluentMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.fluentmaterial#renderhoverlight
func (f *FluentMaterial) SetRenderHoverLight(renderHoverLight bool) *FluentMaterial {
	f.p.Set("renderHoverLight", renderHoverLight)
	return f
}
