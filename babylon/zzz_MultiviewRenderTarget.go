// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MultiviewRenderTarget represents a babylon.js MultiviewRenderTarget.
// Renders to multiple views with a single draw call
//
// See: https://www.khronos.org/registry/webgl/extensions/WEBGL_multiview/
type MultiviewRenderTarget struct {
	*RenderTargetTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MultiviewRenderTarget) JSObject() js.Value { return m.p }

// MultiviewRenderTarget returns a MultiviewRenderTarget JavaScript class.
func (ba *Babylon) MultiviewRenderTarget() *MultiviewRenderTarget {
	p := ba.ctx.Get("MultiviewRenderTarget")
	return MultiviewRenderTargetFromJSObject(p, ba.ctx)
}

// MultiviewRenderTargetFromJSObject returns a wrapped MultiviewRenderTarget JavaScript class.
func MultiviewRenderTargetFromJSObject(p js.Value, ctx js.Value) *MultiviewRenderTarget {
	return &MultiviewRenderTarget{RenderTargetTexture: RenderTargetTextureFromJSObject(p, ctx), ctx: ctx}
}

// MultiviewRenderTargetArrayToJSArray returns a JavaScript Array for the wrapped array.
func MultiviewRenderTargetArrayToJSArray(array []*MultiviewRenderTarget) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewMultiviewRenderTargetOpts contains optional parameters for NewMultiviewRenderTarget.
type NewMultiviewRenderTargetOpts struct {
	Size *float64
}

// NewMultiviewRenderTarget returns a new MultiviewRenderTarget object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiviewrendertarget#constructor
func (ba *Babylon) NewMultiviewRenderTarget(scene *Scene, opts *NewMultiviewRenderTargetOpts) *MultiviewRenderTarget {
	if opts == nil {
		opts = &NewMultiviewRenderTargetOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.Size == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Size)
	}

	p := ba.ctx.Get("MultiviewRenderTarget").New(args...)
	return MultiviewRenderTargetFromJSObject(p, ba.ctx)
}

// GetViewCount calls the GetViewCount method on the MultiviewRenderTarget object.
//
// https://doc.babylonjs.com/api/classes/babylon.multiviewrendertarget#getviewcount
func (m *MultiviewRenderTarget) GetViewCount() float64 {

	retVal := m.p.Call("getViewCount")
	return retVal.Float()
}
