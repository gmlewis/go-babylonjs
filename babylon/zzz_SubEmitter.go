// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SubEmitter represents a babylon.js SubEmitter.
// Sub emitter class used to emit particles from an existing particle
type SubEmitter struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SubEmitter) JSObject() js.Value { return s.p }

// SubEmitter returns a SubEmitter JavaScript class.
func (ba *Babylon) SubEmitter() *SubEmitter {
	p := ba.ctx.Get("SubEmitter")
	return SubEmitterFromJSObject(p, ba.ctx)
}

// SubEmitterFromJSObject returns a wrapped SubEmitter JavaScript class.
func SubEmitterFromJSObject(p js.Value, ctx js.Value) *SubEmitter {
	return &SubEmitter{p: p, ctx: ctx}
}

// SubEmitterArrayToJSArray returns a JavaScript Array for the wrapped array.
func SubEmitterArrayToJSArray(array []*SubEmitter) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewSubEmitter returns a new SubEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.subemitter#constructor
func (ba *Babylon) NewSubEmitter(particleSystem *ParticleSystem) *SubEmitter {

	args := make([]interface{}, 0, 1+0)

	args = append(args, particleSystem.JSObject())

	p := ba.ctx.Get("SubEmitter").New(args...)
	return SubEmitterFromJSObject(p, ba.ctx)
}

// Clone calls the Clone method on the SubEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.subemitter#clone
func (s *SubEmitter) Clone() *SubEmitter {

	retVal := s.p.Call("clone")
	return SubEmitterFromJSObject(retVal, s.ctx)
}

// Dispose calls the Dispose method on the SubEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.subemitter#dispose
func (s *SubEmitter) Dispose() {

	s.p.Call("dispose")
}

// Parse calls the Parse method on the SubEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.subemitter#parse
func (s *SubEmitter) Parse(serializationObject JSObject, scene *Scene, rootUrl string) *SubEmitter {

	args := make([]interface{}, 0, 3+0)

	if serializationObject == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, serializationObject.JSObject())
	}

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	args = append(args, rootUrl)

	retVal := s.p.Call("Parse", args...)
	return SubEmitterFromJSObject(retVal, s.ctx)
}

// Serialize calls the Serialize method on the SubEmitter object.
//
// https://doc.babylonjs.com/api/classes/babylon.subemitter#serialize
func (s *SubEmitter) Serialize() js.Value {

	retVal := s.p.Call("serialize")
	return retVal
}

// InheritDirection returns the InheritDirection property of class SubEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.subemitter#inheritdirection
func (s *SubEmitter) InheritDirection() bool {
	retVal := s.p.Get("inheritDirection")
	return retVal.Bool()
}

// SetInheritDirection sets the InheritDirection property of class SubEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.subemitter#inheritdirection
func (s *SubEmitter) SetInheritDirection(inheritDirection bool) *SubEmitter {
	s.p.Set("inheritDirection", inheritDirection)
	return s
}

// InheritedVelocityAmount returns the InheritedVelocityAmount property of class SubEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.subemitter#inheritedvelocityamount
func (s *SubEmitter) InheritedVelocityAmount() float64 {
	retVal := s.p.Get("inheritedVelocityAmount")
	return retVal.Float()
}

// SetInheritedVelocityAmount sets the InheritedVelocityAmount property of class SubEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.subemitter#inheritedvelocityamount
func (s *SubEmitter) SetInheritedVelocityAmount(inheritedVelocityAmount float64) *SubEmitter {
	s.p.Set("inheritedVelocityAmount", inheritedVelocityAmount)
	return s
}

// ParticleSystem returns the ParticleSystem property of class SubEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.subemitter#particlesystem
func (s *SubEmitter) ParticleSystem() *ParticleSystem {
	retVal := s.p.Get("particleSystem")
	return ParticleSystemFromJSObject(retVal, s.ctx)
}

// SetParticleSystem sets the ParticleSystem property of class SubEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.subemitter#particlesystem
func (s *SubEmitter) SetParticleSystem(particleSystem *ParticleSystem) *SubEmitter {
	s.p.Set("particleSystem", particleSystem.JSObject())
	return s
}

// Type returns the Type property of class SubEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.subemitter#type
func (s *SubEmitter) Type() js.Value {
	retVal := s.p.Get("type")
	return retVal
}

// SetType sets the Type property of class SubEmitter.
//
// https://doc.babylonjs.com/api/classes/babylon.subemitter#type
func (s *SubEmitter) SetType(jsType js.Value) *SubEmitter {
	s.p.Set("type", jsType)
	return s
}
