// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// EdgesRenderer represents a babylon.js EdgesRenderer.
// This class is used to generate edges of the mesh that could then easily be rendered in a scene.
type EdgesRenderer struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *EdgesRenderer) JSObject() js.Value { return e.p }

// EdgesRenderer returns a EdgesRenderer JavaScript class.
func (ba *Babylon) EdgesRenderer() *EdgesRenderer {
	p := ba.ctx.Get("EdgesRenderer")
	return EdgesRendererFromJSObject(p, ba.ctx)
}

// EdgesRendererFromJSObject returns a wrapped EdgesRenderer JavaScript class.
func EdgesRendererFromJSObject(p js.Value, ctx js.Value) *EdgesRenderer {
	return &EdgesRenderer{p: p, ctx: ctx}
}

// EdgesRendererArrayToJSArray returns a JavaScript Array for the wrapped array.
func EdgesRendererArrayToJSArray(array []*EdgesRenderer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewEdgesRendererOpts contains optional parameters for NewEdgesRenderer.
type NewEdgesRendererOpts struct {
	Epsilon                       *float64
	CheckVerticesInsteadOfIndices *bool
	GenerateEdgesLines            *bool
}

// NewEdgesRenderer returns a new EdgesRenderer object.
//
// https://doc.babylonjs.com/api/classes/babylon.edgesrenderer
func (ba *Babylon) NewEdgesRenderer(source *AbstractMesh, opts *NewEdgesRendererOpts) *EdgesRenderer {
	if opts == nil {
		opts = &NewEdgesRendererOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, source.JSObject())

	if opts.Epsilon == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Epsilon)
	}
	if opts.CheckVerticesInsteadOfIndices == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.CheckVerticesInsteadOfIndices)
	}
	if opts.GenerateEdgesLines == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateEdgesLines)
	}

	p := ba.ctx.Get("EdgesRenderer").New(args...)
	return EdgesRendererFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the EdgesRenderer object.
//
// https://doc.babylonjs.com/api/classes/babylon.edgesrenderer#dispose
func (e *EdgesRenderer) Dispose() {

	e.p.Call("dispose")
}

// IsReady calls the IsReady method on the EdgesRenderer object.
//
// https://doc.babylonjs.com/api/classes/babylon.edgesrenderer#isready
func (e *EdgesRenderer) IsReady() bool {

	retVal := e.p.Call("isReady")
	return retVal.Bool()
}

// Render calls the Render method on the EdgesRenderer object.
//
// https://doc.babylonjs.com/api/classes/babylon.edgesrenderer#render
func (e *EdgesRenderer) Render() {

	e.p.Call("render")
}

// _generateEdgesLines calls the _generateEdgesLines method on the EdgesRenderer object.
//
// https://doc.babylonjs.com/api/classes/babylon.edgesrenderer#_generateedgeslines
func (e *EdgesRenderer) _generateEdgesLines() {

	e.p.Call("_generateEdgesLines")
}

/*

// EdgesWidthScalerForOrthographic returns the EdgesWidthScalerForOrthographic property of class EdgesRenderer.
//
// https://doc.babylonjs.com/api/classes/babylon.edgesrenderer#edgeswidthscalerfororthographic
func (e *EdgesRenderer) EdgesWidthScalerForOrthographic(edgesWidthScalerForOrthographic float64) *EdgesRenderer {
	p := ba.ctx.Get("EdgesRenderer").New(edgesWidthScalerForOrthographic)
	return EdgesRendererFromJSObject(p, ba.ctx)
}

// SetEdgesWidthScalerForOrthographic sets the EdgesWidthScalerForOrthographic property of class EdgesRenderer.
//
// https://doc.babylonjs.com/api/classes/babylon.edgesrenderer#edgeswidthscalerfororthographic
func (e *EdgesRenderer) SetEdgesWidthScalerForOrthographic(edgesWidthScalerForOrthographic float64) *EdgesRenderer {
	p := ba.ctx.Get("EdgesRenderer").New(edgesWidthScalerForOrthographic)
	return EdgesRendererFromJSObject(p, ba.ctx)
}

// EdgesWidthScalerForPerspective returns the EdgesWidthScalerForPerspective property of class EdgesRenderer.
//
// https://doc.babylonjs.com/api/classes/babylon.edgesrenderer#edgeswidthscalerforperspective
func (e *EdgesRenderer) EdgesWidthScalerForPerspective(edgesWidthScalerForPerspective float64) *EdgesRenderer {
	p := ba.ctx.Get("EdgesRenderer").New(edgesWidthScalerForPerspective)
	return EdgesRendererFromJSObject(p, ba.ctx)
}

// SetEdgesWidthScalerForPerspective sets the EdgesWidthScalerForPerspective property of class EdgesRenderer.
//
// https://doc.babylonjs.com/api/classes/babylon.edgesrenderer#edgeswidthscalerforperspective
func (e *EdgesRenderer) SetEdgesWidthScalerForPerspective(edgesWidthScalerForPerspective float64) *EdgesRenderer {
	p := ba.ctx.Get("EdgesRenderer").New(edgesWidthScalerForPerspective)
	return EdgesRendererFromJSObject(p, ba.ctx)
}

// IsEnabled returns the IsEnabled property of class EdgesRenderer.
//
// https://doc.babylonjs.com/api/classes/babylon.edgesrenderer#isenabled
func (e *EdgesRenderer) IsEnabled(isEnabled bool) *EdgesRenderer {
	p := ba.ctx.Get("EdgesRenderer").New(isEnabled)
	return EdgesRendererFromJSObject(p, ba.ctx)
}

// SetIsEnabled sets the IsEnabled property of class EdgesRenderer.
//
// https://doc.babylonjs.com/api/classes/babylon.edgesrenderer#isenabled
func (e *EdgesRenderer) SetIsEnabled(isEnabled bool) *EdgesRenderer {
	p := ba.ctx.Get("EdgesRenderer").New(isEnabled)
	return EdgesRendererFromJSObject(p, ba.ctx)
}

*/
