// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IMaterial represents a babylon.js IMaterial.
// Loader interface with additional members.
type IMaterial struct {
	*IMaterial
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IMaterial) JSObject() js.Value { return i.p }

// IMaterial returns a IMaterial JavaScript class.
func (ba *Babylon) IMaterial() *IMaterial {
	p := ba.ctx.Get("IMaterial")
	return IMaterialFromJSObject(p, ba.ctx)
}

// IMaterialFromJSObject returns a wrapped IMaterial JavaScript class.
func IMaterialFromJSObject(p js.Value, ctx js.Value) *IMaterial {
	return &IMaterial{IMaterial: IMaterialFromJSObject(p, ctx), ctx: ctx}
}

// IMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func IMaterialArrayToJSArray(array []*IMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// AlphaCutoff returns the AlphaCutoff property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#alphacutoff
func (i *IMaterial) AlphaCutoff(alphaCutoff float64) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(alphaCutoff)
	return IMaterialFromJSObject(p, ba.ctx)
}

// SetAlphaCutoff sets the AlphaCutoff property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#alphacutoff
func (i *IMaterial) SetAlphaCutoff(alphaCutoff float64) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(alphaCutoff)
	return IMaterialFromJSObject(p, ba.ctx)
}

// AlphaMode returns the AlphaMode property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#alphamode
func (i *IMaterial) AlphaMode(alphaMode *MaterialAlphaMode) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(alphaMode.JSObject())
	return IMaterialFromJSObject(p, ba.ctx)
}

// SetAlphaMode sets the AlphaMode property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#alphamode
func (i *IMaterial) SetAlphaMode(alphaMode *MaterialAlphaMode) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(alphaMode.JSObject())
	return IMaterialFromJSObject(p, ba.ctx)
}

// DoubleSided returns the DoubleSided property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#doublesided
func (i *IMaterial) DoubleSided(doubleSided bool) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(doubleSided)
	return IMaterialFromJSObject(p, ba.ctx)
}

// SetDoubleSided sets the DoubleSided property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#doublesided
func (i *IMaterial) SetDoubleSided(doubleSided bool) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(doubleSided)
	return IMaterialFromJSObject(p, ba.ctx)
}

// EmissiveFactor returns the EmissiveFactor property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#emissivefactor
func (i *IMaterial) EmissiveFactor(emissiveFactor float64) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(emissiveFactor)
	return IMaterialFromJSObject(p, ba.ctx)
}

// SetEmissiveFactor sets the EmissiveFactor property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#emissivefactor
func (i *IMaterial) SetEmissiveFactor(emissiveFactor float64) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(emissiveFactor)
	return IMaterialFromJSObject(p, ba.ctx)
}

// EmissiveTexture returns the EmissiveTexture property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#emissivetexture
func (i *IMaterial) EmissiveTexture(emissiveTexture js.Value) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(emissiveTexture)
	return IMaterialFromJSObject(p, ba.ctx)
}

// SetEmissiveTexture sets the EmissiveTexture property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#emissivetexture
func (i *IMaterial) SetEmissiveTexture(emissiveTexture js.Value) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(emissiveTexture)
	return IMaterialFromJSObject(p, ba.ctx)
}

// Extensions returns the Extensions property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#extensions
func (i *IMaterial) Extensions(extensions js.Value) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(extensions)
	return IMaterialFromJSObject(p, ba.ctx)
}

// SetExtensions sets the Extensions property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#extensions
func (i *IMaterial) SetExtensions(extensions js.Value) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(extensions)
	return IMaterialFromJSObject(p, ba.ctx)
}

// Extras returns the Extras property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#extras
func (i *IMaterial) Extras(extras interface{}) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(extras)
	return IMaterialFromJSObject(p, ba.ctx)
}

// SetExtras sets the Extras property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#extras
func (i *IMaterial) SetExtras(extras interface{}) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(extras)
	return IMaterialFromJSObject(p, ba.ctx)
}

// Index returns the Index property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#index
func (i *IMaterial) Index(index float64) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(index)
	return IMaterialFromJSObject(p, ba.ctx)
}

// SetIndex sets the Index property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#index
func (i *IMaterial) SetIndex(index float64) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(index)
	return IMaterialFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#name
func (i *IMaterial) Name(name string) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(name)
	return IMaterialFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#name
func (i *IMaterial) SetName(name string) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(name)
	return IMaterialFromJSObject(p, ba.ctx)
}

// NormalTexture returns the NormalTexture property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#normaltexture
func (i *IMaterial) NormalTexture(normalTexture *IMaterialNormalTextureInfo) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(normalTexture.JSObject())
	return IMaterialFromJSObject(p, ba.ctx)
}

// SetNormalTexture sets the NormalTexture property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#normaltexture
func (i *IMaterial) SetNormalTexture(normalTexture *IMaterialNormalTextureInfo) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(normalTexture.JSObject())
	return IMaterialFromJSObject(p, ba.ctx)
}

// OcclusionTexture returns the OcclusionTexture property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#occlusiontexture
func (i *IMaterial) OcclusionTexture(occlusionTexture *IMaterialOcclusionTextureInfo) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(occlusionTexture.JSObject())
	return IMaterialFromJSObject(p, ba.ctx)
}

// SetOcclusionTexture sets the OcclusionTexture property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#occlusiontexture
func (i *IMaterial) SetOcclusionTexture(occlusionTexture *IMaterialOcclusionTextureInfo) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(occlusionTexture.JSObject())
	return IMaterialFromJSObject(p, ba.ctx)
}

// PbrMetallicRoughness returns the PbrMetallicRoughness property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#pbrmetallicroughness
func (i *IMaterial) PbrMetallicRoughness(pbrMetallicRoughness *IMaterialPbrMetallicRoughness) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(pbrMetallicRoughness.JSObject())
	return IMaterialFromJSObject(p, ba.ctx)
}

// SetPbrMetallicRoughness sets the PbrMetallicRoughness property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#pbrmetallicroughness
func (i *IMaterial) SetPbrMetallicRoughness(pbrMetallicRoughness *IMaterialPbrMetallicRoughness) *IMaterial {
	p := ba.ctx.Get("IMaterial").New(pbrMetallicRoughness.JSObject())
	return IMaterialFromJSObject(p, ba.ctx)
}

*/
