// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IMaterial represents a babylon.js IMaterial.
// Loader interface with additional members.
type IMaterial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IMaterial) JSObject() js.Value { return i.p }

// IMaterial returns a IMaterial JavaScript class.
func (ba *Babylon) IMaterial() *IMaterial {
	p := ba.ctx.Get("IMaterial")
	return IMaterialFromJSObject(p, ba.ctx)
}

// IMaterialFromJSObject returns a wrapped IMaterial JavaScript class.
func IMaterialFromJSObject(p js.Value, ctx js.Value) *IMaterial {
	return &IMaterial{p: p, ctx: ctx}
}

// IMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func IMaterialArrayToJSArray(array []*IMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// EmissiveTexture returns the EmissiveTexture property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#emissivetexture
func (i *IMaterial) EmissiveTexture() *ITextureInfo {
	retVal := i.p.Get("emissiveTexture")
	return ITextureInfoFromJSObject(retVal, i.ctx)
}

// SetEmissiveTexture sets the EmissiveTexture property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#emissivetexture
func (i *IMaterial) SetEmissiveTexture(emissiveTexture *ITextureInfo) *IMaterial {
	i.p.Set("emissiveTexture", emissiveTexture.JSObject())
	return i
}

// NormalTexture returns the NormalTexture property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#normaltexture
func (i *IMaterial) NormalTexture() *IMaterialNormalTextureInfo {
	retVal := i.p.Get("normalTexture")
	return IMaterialNormalTextureInfoFromJSObject(retVal, i.ctx)
}

// SetNormalTexture sets the NormalTexture property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#normaltexture
func (i *IMaterial) SetNormalTexture(normalTexture *IMaterialNormalTextureInfo) *IMaterial {
	i.p.Set("normalTexture", normalTexture.JSObject())
	return i
}

// OcclusionTexture returns the OcclusionTexture property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#occlusiontexture
func (i *IMaterial) OcclusionTexture() *IMaterialOcclusionTextureInfo {
	retVal := i.p.Get("occlusionTexture")
	return IMaterialOcclusionTextureInfoFromJSObject(retVal, i.ctx)
}

// SetOcclusionTexture sets the OcclusionTexture property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#occlusiontexture
func (i *IMaterial) SetOcclusionTexture(occlusionTexture *IMaterialOcclusionTextureInfo) *IMaterial {
	i.p.Set("occlusionTexture", occlusionTexture.JSObject())
	return i
}

// PbrMetallicRoughness returns the PbrMetallicRoughness property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#pbrmetallicroughness
func (i *IMaterial) PbrMetallicRoughness() *IMaterialPbrMetallicRoughness {
	retVal := i.p.Get("pbrMetallicRoughness")
	return IMaterialPbrMetallicRoughnessFromJSObject(retVal, i.ctx)
}

// SetPbrMetallicRoughness sets the PbrMetallicRoughness property of class IMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.imaterial#pbrmetallicroughness
func (i *IMaterial) SetPbrMetallicRoughness(pbrMetallicRoughness *IMaterialPbrMetallicRoughness) *IMaterial {
	i.p.Set("pbrMetallicRoughness", pbrMetallicRoughness.JSObject())
	return i
}
