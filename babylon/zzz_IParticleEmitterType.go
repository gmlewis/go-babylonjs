// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IParticleEmitterType represents a babylon.js IParticleEmitterType.
// Particle emitter represents a volume emitting particles.
// This is the responsibility of the implementation to define the volume shape like cone/sphere/box.
type IParticleEmitterType struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IParticleEmitterType) JSObject() js.Value { return i.p }

// IParticleEmitterType returns a IParticleEmitterType JavaScript class.
func (ba *Babylon) IParticleEmitterType() *IParticleEmitterType {
	p := ba.ctx.Get("IParticleEmitterType")
	return IParticleEmitterTypeFromJSObject(p, ba.ctx)
}

// IParticleEmitterTypeFromJSObject returns a wrapped IParticleEmitterType JavaScript class.
func IParticleEmitterTypeFromJSObject(p js.Value, ctx js.Value) *IParticleEmitterType {
	return &IParticleEmitterType{p: p, ctx: ctx}
}

// IParticleEmitterTypeArrayToJSArray returns a JavaScript Array for the wrapped array.
func IParticleEmitterTypeArrayToJSArray(array []*IParticleEmitterType) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// ApplyToShader calls the ApplyToShader method on the IParticleEmitterType object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticleemittertype#applytoshader
func (i *IParticleEmitterType) ApplyToShader(effect *Effect) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, effect.JSObject())

	i.p.Call("applyToShader", args...)
}

// Clone calls the Clone method on the IParticleEmitterType object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticleemittertype#clone
func (i *IParticleEmitterType) Clone() *IParticleEmitterType {

	retVal := i.p.Call("clone")
	return IParticleEmitterTypeFromJSObject(retVal, i.ctx)
}

// GetClassName calls the GetClassName method on the IParticleEmitterType object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticleemittertype#getclassname
func (i *IParticleEmitterType) GetClassName() string {

	retVal := i.p.Call("getClassName")
	return retVal.String()
}

// GetEffectDefines calls the GetEffectDefines method on the IParticleEmitterType object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticleemittertype#geteffectdefines
func (i *IParticleEmitterType) GetEffectDefines() string {

	retVal := i.p.Call("getEffectDefines")
	return retVal.String()
}

// Parse calls the Parse method on the IParticleEmitterType object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticleemittertype#parse
func (i *IParticleEmitterType) Parse(serializationObject interface{}) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, serializationObject)

	i.p.Call("parse", args...)
}

// Serialize calls the Serialize method on the IParticleEmitterType object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticleemittertype#serialize
func (i *IParticleEmitterType) Serialize() interface{} {

	retVal := i.p.Call("serialize")
	return retVal
}

// StartDirectionFunction calls the StartDirectionFunction method on the IParticleEmitterType object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticleemittertype#startdirectionfunction
func (i *IParticleEmitterType) StartDirectionFunction(worldMatrix *Matrix, directionToUpdate *Vector3, particle *Particle) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, worldMatrix.JSObject())
	args = append(args, directionToUpdate.JSObject())
	args = append(args, particle.JSObject())

	i.p.Call("startDirectionFunction", args...)
}

// StartPositionFunction calls the StartPositionFunction method on the IParticleEmitterType object.
//
// https://doc.babylonjs.com/api/classes/babylon.iparticleemittertype#startpositionfunction
func (i *IParticleEmitterType) StartPositionFunction(worldMatrix *Matrix, positionToUpdate *Vector3, particle *Particle) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, worldMatrix.JSObject())
	args = append(args, positionToUpdate.JSObject())
	args = append(args, particle.JSObject())

	i.p.Call("startPositionFunction", args...)
}

/*

 */
