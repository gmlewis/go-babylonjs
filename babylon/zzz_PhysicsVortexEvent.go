// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PhysicsVortexEvent represents a babylon.js PhysicsVortexEvent.
// Represents a physics vortex event
type PhysicsVortexEvent struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PhysicsVortexEvent) JSObject() js.Value { return p.p }

// PhysicsVortexEvent returns a PhysicsVortexEvent JavaScript class.
func (ba *Babylon) PhysicsVortexEvent() *PhysicsVortexEvent {
	p := ba.ctx.Get("PhysicsVortexEvent")
	return PhysicsVortexEventFromJSObject(p, ba.ctx)
}

// PhysicsVortexEventFromJSObject returns a wrapped PhysicsVortexEvent JavaScript class.
func PhysicsVortexEventFromJSObject(p js.Value, ctx js.Value) *PhysicsVortexEvent {
	return &PhysicsVortexEvent{p: p, ctx: ctx}
}

// PhysicsVortexEventArrayToJSArray returns a JavaScript Array for the wrapped array.
func PhysicsVortexEventArrayToJSArray(array []*PhysicsVortexEvent) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPhysicsVortexEvent returns a new PhysicsVortexEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsvortexevent#constructor
func (ba *Babylon) NewPhysicsVortexEvent(_scene *Scene, _origin *Vector3, _options *PhysicsVortexEventOptions) *PhysicsVortexEvent {

	args := make([]interface{}, 0, 3+0)

	args = append(args, _scene.JSObject())
	args = append(args, _origin.JSObject())
	args = append(args, _options.JSObject())

	p := ba.ctx.Get("PhysicsVortexEvent").New(args...)
	return PhysicsVortexEventFromJSObject(p, ba.ctx)
}

// Disable calls the Disable method on the PhysicsVortexEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsvortexevent#disable
func (p *PhysicsVortexEvent) Disable() {

	p.p.Call("disable")
}

// PhysicsVortexEventDisposeOpts contains optional parameters for PhysicsVortexEvent.Dispose.
type PhysicsVortexEventDisposeOpts struct {
	Force *bool
}

// Dispose calls the Dispose method on the PhysicsVortexEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsvortexevent#dispose
func (p *PhysicsVortexEvent) Dispose(opts *PhysicsVortexEventDisposeOpts) {
	if opts == nil {
		opts = &PhysicsVortexEventDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Force == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Force)
	}

	p.p.Call("dispose", args...)
}

// Enable calls the Enable method on the PhysicsVortexEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsvortexevent#enable
func (p *PhysicsVortexEvent) Enable() {

	p.p.Call("enable")
}

// GetData calls the GetData method on the PhysicsVortexEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsvortexevent#getdata
func (p *PhysicsVortexEvent) GetData() *PhysicsVortexEventData {

	retVal := p.p.Call("getData")
	return PhysicsVortexEventDataFromJSObject(retVal, p.ctx)
}
