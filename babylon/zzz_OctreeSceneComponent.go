// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// OctreeSceneComponent represents a babylon.js OctreeSceneComponent.
// Defines the octree scene component responsible to manage any octrees
// in a given scene.
type OctreeSceneComponent struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (o *OctreeSceneComponent) JSObject() js.Value { return o.p }

// OctreeSceneComponent returns a OctreeSceneComponent JavaScript class.
func (ba *Babylon) OctreeSceneComponent() *OctreeSceneComponent {
	p := ba.ctx.Get("OctreeSceneComponent")
	return OctreeSceneComponentFromJSObject(p, ba.ctx)
}

// OctreeSceneComponentFromJSObject returns a wrapped OctreeSceneComponent JavaScript class.
func OctreeSceneComponentFromJSObject(p js.Value, ctx js.Value) *OctreeSceneComponent {
	return &OctreeSceneComponent{p: p, ctx: ctx}
}

// OctreeSceneComponentArrayToJSArray returns a JavaScript Array for the wrapped array.
func OctreeSceneComponentArrayToJSArray(array []*OctreeSceneComponent) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewOctreeSceneComponent returns a new OctreeSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.octreescenecomponent
func (ba *Babylon) NewOctreeSceneComponent(scene *Scene) *OctreeSceneComponent {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scene.JSObject())

	p := ba.ctx.Get("OctreeSceneComponent").New(args...)
	return OctreeSceneComponentFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the OctreeSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.octreescenecomponent#dispose
func (o *OctreeSceneComponent) Dispose() {

	o.p.Call("dispose")
}

// GetActiveMeshCandidates calls the GetActiveMeshCandidates method on the OctreeSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.octreescenecomponent#getactivemeshcandidates
func (o *OctreeSceneComponent) GetActiveMeshCandidates() js.Value {

	retVal := o.p.Call("getActiveMeshCandidates")
	return retVal
}

// GetActiveSubMeshCandidates calls the GetActiveSubMeshCandidates method on the OctreeSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.octreescenecomponent#getactivesubmeshcandidates
func (o *OctreeSceneComponent) GetActiveSubMeshCandidates(mesh *AbstractMesh) js.Value {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	retVal := o.p.Call("getActiveSubMeshCandidates", args...)
	return retVal
}

// GetCollidingSubMeshCandidates calls the GetCollidingSubMeshCandidates method on the OctreeSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.octreescenecomponent#getcollidingsubmeshcandidates
func (o *OctreeSceneComponent) GetCollidingSubMeshCandidates(mesh *AbstractMesh, collider js.Value) js.Value {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, collider)

	retVal := o.p.Call("getCollidingSubMeshCandidates", args...)
	return retVal
}

// GetIntersectingSubMeshCandidates calls the GetIntersectingSubMeshCandidates method on the OctreeSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.octreescenecomponent#getintersectingsubmeshcandidates
func (o *OctreeSceneComponent) GetIntersectingSubMeshCandidates(mesh *AbstractMesh, localRay *Ray) js.Value {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, localRay.JSObject())

	retVal := o.p.Call("getIntersectingSubMeshCandidates", args...)
	return retVal
}

// Rebuild calls the Rebuild method on the OctreeSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.octreescenecomponent#rebuild
func (o *OctreeSceneComponent) Rebuild() {

	o.p.Call("rebuild")
}

// Register calls the Register method on the OctreeSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.octreescenecomponent#register
func (o *OctreeSceneComponent) Register() {

	o.p.Call("register")
}

// ChecksIsEnabled returns the ChecksIsEnabled property of class OctreeSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.octreescenecomponent#checksisenabled
func (o *OctreeSceneComponent) ChecksIsEnabled() bool {
	retVal := o.p.Get("checksIsEnabled")
	return retVal.Bool()
}

// SetChecksIsEnabled sets the ChecksIsEnabled property of class OctreeSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.octreescenecomponent#checksisenabled
func (o *OctreeSceneComponent) SetChecksIsEnabled(checksIsEnabled bool) *OctreeSceneComponent {
	o.p.Set("checksIsEnabled", checksIsEnabled)
	return o
}

// Name returns the Name property of class OctreeSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.octreescenecomponent#name
func (o *OctreeSceneComponent) Name() string {
	retVal := o.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class OctreeSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.octreescenecomponent#name
func (o *OctreeSceneComponent) SetName(name string) *OctreeSceneComponent {
	o.p.Set("name", name)
	return o
}

// Scene returns the Scene property of class OctreeSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.octreescenecomponent#scene
func (o *OctreeSceneComponent) Scene() *Scene {
	retVal := o.p.Get("scene")
	return SceneFromJSObject(retVal, o.ctx)
}

// SetScene sets the Scene property of class OctreeSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.octreescenecomponent#scene
func (o *OctreeSceneComponent) SetScene(scene *Scene) *OctreeSceneComponent {
	o.p.Set("scene", scene.JSObject())
	return o
}
