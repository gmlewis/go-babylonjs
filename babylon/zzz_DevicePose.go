// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DevicePose represents a babylon.js DevicePose.
// This is a copy of VRPose. See &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/VRPose&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/API/VRPose&lt;/a&gt;
// IMPORTANT!! The data is right-hand data.
type DevicePose struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DevicePose) JSObject() js.Value { return d.p }

// DevicePose returns a DevicePose JavaScript class.
func (ba *Babylon) DevicePose() *DevicePose {
	p := ba.ctx.Get("DevicePose")
	return DevicePoseFromJSObject(p, ba.ctx)
}

// DevicePoseFromJSObject returns a wrapped DevicePose JavaScript class.
func DevicePoseFromJSObject(p js.Value, ctx js.Value) *DevicePose {
	return &DevicePose{p: p, ctx: ctx}
}

// DevicePoseArrayToJSArray returns a JavaScript Array for the wrapped array.
func DevicePoseArrayToJSArray(array []*DevicePose) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

// AngularAcceleration returns the AngularAcceleration property of class DevicePose.
//
// https://doc.babylonjs.com/api/classes/babylon.devicepose#angularacceleration
func (d *DevicePose) AngularAcceleration(angularAcceleration js.Value) *DevicePose {
	p := ba.ctx.Get("DevicePose").New(angularAcceleration)
	return DevicePoseFromJSObject(p, ba.ctx)
}

// SetAngularAcceleration sets the AngularAcceleration property of class DevicePose.
//
// https://doc.babylonjs.com/api/classes/babylon.devicepose#angularacceleration
func (d *DevicePose) SetAngularAcceleration(angularAcceleration js.Value) *DevicePose {
	p := ba.ctx.Get("DevicePose").New(angularAcceleration)
	return DevicePoseFromJSObject(p, ba.ctx)
}

// AngularVelocity returns the AngularVelocity property of class DevicePose.
//
// https://doc.babylonjs.com/api/classes/babylon.devicepose#angularvelocity
func (d *DevicePose) AngularVelocity(angularVelocity js.Value) *DevicePose {
	p := ba.ctx.Get("DevicePose").New(angularVelocity)
	return DevicePoseFromJSObject(p, ba.ctx)
}

// SetAngularVelocity sets the AngularVelocity property of class DevicePose.
//
// https://doc.babylonjs.com/api/classes/babylon.devicepose#angularvelocity
func (d *DevicePose) SetAngularVelocity(angularVelocity js.Value) *DevicePose {
	p := ba.ctx.Get("DevicePose").New(angularVelocity)
	return DevicePoseFromJSObject(p, ba.ctx)
}

// LinearAcceleration returns the LinearAcceleration property of class DevicePose.
//
// https://doc.babylonjs.com/api/classes/babylon.devicepose#linearacceleration
func (d *DevicePose) LinearAcceleration(linearAcceleration js.Value) *DevicePose {
	p := ba.ctx.Get("DevicePose").New(linearAcceleration)
	return DevicePoseFromJSObject(p, ba.ctx)
}

// SetLinearAcceleration sets the LinearAcceleration property of class DevicePose.
//
// https://doc.babylonjs.com/api/classes/babylon.devicepose#linearacceleration
func (d *DevicePose) SetLinearAcceleration(linearAcceleration js.Value) *DevicePose {
	p := ba.ctx.Get("DevicePose").New(linearAcceleration)
	return DevicePoseFromJSObject(p, ba.ctx)
}

// LinearVelocity returns the LinearVelocity property of class DevicePose.
//
// https://doc.babylonjs.com/api/classes/babylon.devicepose#linearvelocity
func (d *DevicePose) LinearVelocity(linearVelocity js.Value) *DevicePose {
	p := ba.ctx.Get("DevicePose").New(linearVelocity)
	return DevicePoseFromJSObject(p, ba.ctx)
}

// SetLinearVelocity sets the LinearVelocity property of class DevicePose.
//
// https://doc.babylonjs.com/api/classes/babylon.devicepose#linearvelocity
func (d *DevicePose) SetLinearVelocity(linearVelocity js.Value) *DevicePose {
	p := ba.ctx.Get("DevicePose").New(linearVelocity)
	return DevicePoseFromJSObject(p, ba.ctx)
}

// Orientation returns the Orientation property of class DevicePose.
//
// https://doc.babylonjs.com/api/classes/babylon.devicepose#orientation
func (d *DevicePose) Orientation(orientation js.Value) *DevicePose {
	p := ba.ctx.Get("DevicePose").New(orientation)
	return DevicePoseFromJSObject(p, ba.ctx)
}

// SetOrientation sets the Orientation property of class DevicePose.
//
// https://doc.babylonjs.com/api/classes/babylon.devicepose#orientation
func (d *DevicePose) SetOrientation(orientation js.Value) *DevicePose {
	p := ba.ctx.Get("DevicePose").New(orientation)
	return DevicePoseFromJSObject(p, ba.ctx)
}

// Position returns the Position property of class DevicePose.
//
// https://doc.babylonjs.com/api/classes/babylon.devicepose#position
func (d *DevicePose) Position(position js.Value) *DevicePose {
	p := ba.ctx.Get("DevicePose").New(position)
	return DevicePoseFromJSObject(p, ba.ctx)
}

// SetPosition sets the Position property of class DevicePose.
//
// https://doc.babylonjs.com/api/classes/babylon.devicepose#position
func (d *DevicePose) SetPosition(position js.Value) *DevicePose {
	p := ba.ctx.Get("DevicePose").New(position)
	return DevicePoseFromJSObject(p, ba.ctx)
}

*/
