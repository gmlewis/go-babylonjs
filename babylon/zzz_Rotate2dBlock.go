// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Rotate2dBlock represents a babylon.js Rotate2dBlock.
// Block used to rotate a 2d vector by a given angle
type Rotate2dBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *Rotate2dBlock) JSObject() js.Value { return r.p }

// Rotate2dBlock returns a Rotate2dBlock JavaScript class.
func (ba *Babylon) Rotate2dBlock() *Rotate2dBlock {
	p := ba.ctx.Get("Rotate2dBlock")
	return Rotate2dBlockFromJSObject(p, ba.ctx)
}

// Rotate2dBlockFromJSObject returns a wrapped Rotate2dBlock JavaScript class.
func Rotate2dBlockFromJSObject(p js.Value, ctx js.Value) *Rotate2dBlock {
	return &Rotate2dBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// Rotate2dBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func Rotate2dBlockArrayToJSArray(array []*Rotate2dBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewRotate2dBlock returns a new Rotate2dBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.rotate2dblock
func (ba *Babylon) NewRotate2dBlock(name string) *Rotate2dBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("Rotate2dBlock").New(args...)
	return Rotate2dBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the Rotate2dBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.rotate2dblock#autoconfigure
func (r *Rotate2dBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	r.p.Call("autoConfigure", args...)
}

// GetClassName calls the GetClassName method on the Rotate2dBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.rotate2dblock#getclassname
func (r *Rotate2dBlock) GetClassName() string {

	retVal := r.p.Call("getClassName")
	return retVal.String()
}

// Angle returns the Angle property of class Rotate2dBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.rotate2dblock#angle
func (r *Rotate2dBlock) Angle() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("angle")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetAngle sets the Angle property of class Rotate2dBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.rotate2dblock#angle
func (r *Rotate2dBlock) SetAngle(angle *NodeMaterialConnectionPoint) *Rotate2dBlock {
	r.p.Set("angle", angle.JSObject())
	return r
}

// Input returns the Input property of class Rotate2dBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.rotate2dblock#input
func (r *Rotate2dBlock) Input() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("input")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetInput sets the Input property of class Rotate2dBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.rotate2dblock#input
func (r *Rotate2dBlock) SetInput(input *NodeMaterialConnectionPoint) *Rotate2dBlock {
	r.p.Set("input", input.JSObject())
	return r
}

// Output returns the Output property of class Rotate2dBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.rotate2dblock#output
func (r *Rotate2dBlock) Output() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetOutput sets the Output property of class Rotate2dBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.rotate2dblock#output
func (r *Rotate2dBlock) SetOutput(output *NodeMaterialConnectionPoint) *Rotate2dBlock {
	r.p.Set("output", output.JSObject())
	return r
}
