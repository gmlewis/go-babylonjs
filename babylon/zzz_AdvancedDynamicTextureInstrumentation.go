// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// AdvancedDynamicTextureInstrumentation represents a babylon.js AdvancedDynamicTextureInstrumentation.
// This class can be used to get instrumentation data from a AdvancedDynamicTexture object
type AdvancedDynamicTextureInstrumentation struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *AdvancedDynamicTextureInstrumentation) JSObject() js.Value { return a.p }

// AdvancedDynamicTextureInstrumentation returns a AdvancedDynamicTextureInstrumentation JavaScript class.
func (gui *GUI) AdvancedDynamicTextureInstrumentation() *AdvancedDynamicTextureInstrumentation {
	p := gui.ctx.Get("AdvancedDynamicTextureInstrumentation")
	return AdvancedDynamicTextureInstrumentationFromJSObject(p, gui.ctx)
}

// AdvancedDynamicTextureInstrumentationFromJSObject returns a wrapped AdvancedDynamicTextureInstrumentation JavaScript class.
func AdvancedDynamicTextureInstrumentationFromJSObject(p js.Value, ctx js.Value) *AdvancedDynamicTextureInstrumentation {
	return &AdvancedDynamicTextureInstrumentation{p: p, ctx: ctx}
}

// AdvancedDynamicTextureInstrumentationArrayToJSArray returns a JavaScript Array for the wrapped array.
func AdvancedDynamicTextureInstrumentationArrayToJSArray(array []*AdvancedDynamicTextureInstrumentation) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewAdvancedDynamicTextureInstrumentation returns a new AdvancedDynamicTextureInstrumentation object.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.advanceddynamictextureinstrumentation#constructor
func (gui *GUI) NewAdvancedDynamicTextureInstrumentation(texture *AdvancedDynamicTexture) *AdvancedDynamicTextureInstrumentation {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	p := gui.ctx.Get("AdvancedDynamicTextureInstrumentation").New(args...)
	return AdvancedDynamicTextureInstrumentationFromJSObject(p, gui.ctx)
}

// Dispose calls the Dispose method on the AdvancedDynamicTextureInstrumentation object.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.advanceddynamictextureinstrumentation#dispose
func (a *AdvancedDynamicTextureInstrumentation) Dispose() {

	a.p.Call("dispose")
}

// CaptureLayoutTime returns the CaptureLayoutTime property of class AdvancedDynamicTextureInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.advanceddynamictextureinstrumentation#capturelayouttime
func (a *AdvancedDynamicTextureInstrumentation) CaptureLayoutTime() bool {
	retVal := a.p.Get("captureLayoutTime")
	return retVal.Bool()
}

// SetCaptureLayoutTime sets the CaptureLayoutTime property of class AdvancedDynamicTextureInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.advanceddynamictextureinstrumentation#capturelayouttime
func (a *AdvancedDynamicTextureInstrumentation) SetCaptureLayoutTime(captureLayoutTime bool) *AdvancedDynamicTextureInstrumentation {
	a.p.Set("captureLayoutTime", captureLayoutTime)
	return a
}

// CaptureRenderTime returns the CaptureRenderTime property of class AdvancedDynamicTextureInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.advanceddynamictextureinstrumentation#capturerendertime
func (a *AdvancedDynamicTextureInstrumentation) CaptureRenderTime() bool {
	retVal := a.p.Get("captureRenderTime")
	return retVal.Bool()
}

// SetCaptureRenderTime sets the CaptureRenderTime property of class AdvancedDynamicTextureInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.advanceddynamictextureinstrumentation#capturerendertime
func (a *AdvancedDynamicTextureInstrumentation) SetCaptureRenderTime(captureRenderTime bool) *AdvancedDynamicTextureInstrumentation {
	a.p.Set("captureRenderTime", captureRenderTime)
	return a
}

// LayoutTimeCounter returns the LayoutTimeCounter property of class AdvancedDynamicTextureInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.advanceddynamictextureinstrumentation#layouttimecounter
func (a *AdvancedDynamicTextureInstrumentation) LayoutTimeCounter() *PerfCounter {
	retVal := a.p.Get("layoutTimeCounter")
	return PerfCounterFromJSObject(retVal, a.ctx)
}

// SetLayoutTimeCounter sets the LayoutTimeCounter property of class AdvancedDynamicTextureInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.advanceddynamictextureinstrumentation#layouttimecounter
func (a *AdvancedDynamicTextureInstrumentation) SetLayoutTimeCounter(layoutTimeCounter *PerfCounter) *AdvancedDynamicTextureInstrumentation {
	a.p.Set("layoutTimeCounter", layoutTimeCounter.JSObject())
	return a
}

// RenderTimeCounter returns the RenderTimeCounter property of class AdvancedDynamicTextureInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.advanceddynamictextureinstrumentation#rendertimecounter
func (a *AdvancedDynamicTextureInstrumentation) RenderTimeCounter() *PerfCounter {
	retVal := a.p.Get("renderTimeCounter")
	return PerfCounterFromJSObject(retVal, a.ctx)
}

// SetRenderTimeCounter sets the RenderTimeCounter property of class AdvancedDynamicTextureInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.advanceddynamictextureinstrumentation#rendertimecounter
func (a *AdvancedDynamicTextureInstrumentation) SetRenderTimeCounter(renderTimeCounter *PerfCounter) *AdvancedDynamicTextureInstrumentation {
	a.p.Set("renderTimeCounter", renderTimeCounter.JSObject())
	return a
}

// Texture returns the Texture property of class AdvancedDynamicTextureInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.advanceddynamictextureinstrumentation#texture
func (a *AdvancedDynamicTextureInstrumentation) Texture() *AdvancedDynamicTexture {
	retVal := a.p.Get("texture")
	return AdvancedDynamicTextureFromJSObject(retVal, a.ctx)
}

// SetTexture sets the Texture property of class AdvancedDynamicTextureInstrumentation.
//
// https://doc.babylonjs.com/api/classes/babylon.gui.advanceddynamictextureinstrumentation#texture
func (a *AdvancedDynamicTextureInstrumentation) SetTexture(texture *AdvancedDynamicTexture) *AdvancedDynamicTextureInstrumentation {
	a.p.Set("texture", texture.JSObject())
	return a
}
