// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// WebXRSessionManager represents a babylon.js WebXRSessionManager.
// Manages an XRSession to work with Babylon&#39;s engine
//
// See: https://doc.babylonjs.com/how_to/webxr
type WebXRSessionManager struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (w *WebXRSessionManager) JSObject() js.Value { return w.p }

// WebXRSessionManager returns a WebXRSessionManager JavaScript class.
func (ba *Babylon) WebXRSessionManager() *WebXRSessionManager {
	p := ba.ctx.Get("WebXRSessionManager")
	return WebXRSessionManagerFromJSObject(p, ba.ctx)
}

// WebXRSessionManagerFromJSObject returns a wrapped WebXRSessionManager JavaScript class.
func WebXRSessionManagerFromJSObject(p js.Value, ctx js.Value) *WebXRSessionManager {
	return &WebXRSessionManager{p: p, ctx: ctx}
}

// WebXRSessionManagerArrayToJSArray returns a JavaScript Array for the wrapped array.
func WebXRSessionManagerArrayToJSArray(array []*WebXRSessionManager) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewWebXRSessionManager returns a new WebXRSessionManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager
func (ba *Babylon) NewWebXRSessionManager(scene *Scene) *WebXRSessionManager {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scene.JSObject())

	p := ba.ctx.Get("WebXRSessionManager").New(args...)
	return WebXRSessionManagerFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the WebXRSessionManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#dispose
func (w *WebXRSessionManager) Dispose() {

	w.p.Call("dispose")
}

// ExitXRAsync calls the ExitXRAsync method on the WebXRSessionManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#exitxrasync
func (w *WebXRSessionManager) ExitXRAsync() *Promise {

	retVal := w.p.Call("exitXRAsync")
	return PromiseFromJSObject(retVal, w.ctx)
}

// GetRenderTargetTextureForEye calls the GetRenderTargetTextureForEye method on the WebXRSessionManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#getrendertargettextureforeye
func (w *WebXRSessionManager) GetRenderTargetTextureForEye(eye js.Value) *RenderTargetTexture {

	args := make([]interface{}, 0, 1+0)

	args = append(args, eye)

	retVal := w.p.Call("getRenderTargetTextureForEye", args...)
	return RenderTargetTextureFromJSObject(retVal, w.ctx)
}

// WebXRSessionManagerGetWebXRRenderTargetOpts contains optional parameters for WebXRSessionManager.GetWebXRRenderTarget.
type WebXRSessionManagerGetWebXRRenderTargetOpts struct {
	OnStateChangedObservable *Observable
	Options                  *WebXRManagedOutputCanvasOptions
}

// GetWebXRRenderTarget calls the GetWebXRRenderTarget method on the WebXRSessionManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#getwebxrrendertarget
func (w *WebXRSessionManager) GetWebXRRenderTarget(opts *WebXRSessionManagerGetWebXRRenderTargetOpts) *WebXRRenderTarget {
	if opts == nil {
		opts = &WebXRSessionManagerGetWebXRRenderTargetOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.OnStateChangedObservable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnStateChangedObservable.JSObject())
	}
	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options.JSObject())
	}

	retVal := w.p.Call("getWebXRRenderTarget", args...)
	return WebXRRenderTargetFromJSObject(retVal, w.ctx)
}

// InitializeAsync calls the InitializeAsync method on the WebXRSessionManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#initializeasync
func (w *WebXRSessionManager) InitializeAsync() *Promise {

	retVal := w.p.Call("initializeAsync")
	return PromiseFromJSObject(retVal, w.ctx)
}

// WebXRSessionManagerInitializeSessionAsyncOpts contains optional parameters for WebXRSessionManager.InitializeSessionAsync.
type WebXRSessionManagerInitializeSessionAsyncOpts struct {
	OptionalFeatures *interface{}
}

// InitializeSessionAsync calls the InitializeSessionAsync method on the WebXRSessionManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#initializesessionasync
func (w *WebXRSessionManager) InitializeSessionAsync(xrSessionMode js.Value, opts *WebXRSessionManagerInitializeSessionAsyncOpts) *Promise {
	if opts == nil {
		opts = &WebXRSessionManagerInitializeSessionAsyncOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, xrSessionMode)

	if opts.OptionalFeatures == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OptionalFeatures)
	}

	retVal := w.p.Call("initializeSessionAsync", args...)
	return PromiseFromJSObject(retVal, w.ctx)
}

// IsSessionSupportedAsync calls the IsSessionSupportedAsync method on the WebXRSessionManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#issessionsupportedasync
func (w *WebXRSessionManager) IsSessionSupportedAsync(sessionMode js.Value) *Promise {

	args := make([]interface{}, 0, 1+0)

	args = append(args, sessionMode)

	retVal := w.p.Call("IsSessionSupportedAsync", args...)
	return PromiseFromJSObject(retVal, w.ctx)
}

// SetReferenceSpaceAsync calls the SetReferenceSpaceAsync method on the WebXRSessionManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#setreferencespaceasync
func (w *WebXRSessionManager) SetReferenceSpaceAsync(referenceSpace js.Value) *Promise {

	args := make([]interface{}, 0, 1+0)

	args = append(args, referenceSpace)

	retVal := w.p.Call("setReferenceSpaceAsync", args...)
	return PromiseFromJSObject(retVal, w.ctx)
}

// StartRenderingToXRAsync calls the StartRenderingToXRAsync method on the WebXRSessionManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#startrenderingtoxrasync
func (w *WebXRSessionManager) StartRenderingToXRAsync() *Promise {

	retVal := w.p.Call("startRenderingToXRAsync")
	return PromiseFromJSObject(retVal, w.ctx)
}

// SupportsSessionAsync calls the SupportsSessionAsync method on the WebXRSessionManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#supportssessionasync
func (w *WebXRSessionManager) SupportsSessionAsync(sessionMode js.Value) *Promise {

	args := make([]interface{}, 0, 1+0)

	args = append(args, sessionMode)

	retVal := w.p.Call("supportsSessionAsync", args...)
	return PromiseFromJSObject(retVal, w.ctx)
}

// UpdateRenderStateAsync calls the UpdateRenderStateAsync method on the WebXRSessionManager object.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#updaterenderstateasync
func (w *WebXRSessionManager) UpdateRenderStateAsync(state js.Value) *Promise {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state)

	retVal := w.p.Call("updateRenderStateAsync", args...)
	return PromiseFromJSObject(retVal, w.ctx)
}

/*

// CurrentFrame returns the CurrentFrame property of class WebXRSessionManager.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#currentframe
func (w *WebXRSessionManager) CurrentFrame(currentFrame js.Value) *WebXRSessionManager {
	p := ba.ctx.Get("WebXRSessionManager").New(currentFrame)
	return WebXRSessionManagerFromJSObject(p, ba.ctx)
}

// SetCurrentFrame sets the CurrentFrame property of class WebXRSessionManager.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#currentframe
func (w *WebXRSessionManager) SetCurrentFrame(currentFrame js.Value) *WebXRSessionManager {
	p := ba.ctx.Get("WebXRSessionManager").New(currentFrame)
	return WebXRSessionManagerFromJSObject(p, ba.ctx)
}

// OnXRFrameObservable returns the OnXRFrameObservable property of class WebXRSessionManager.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#onxrframeobservable
func (w *WebXRSessionManager) OnXRFrameObservable(onXRFrameObservable *Observable) *WebXRSessionManager {
	p := ba.ctx.Get("WebXRSessionManager").New(onXRFrameObservable.JSObject())
	return WebXRSessionManagerFromJSObject(p, ba.ctx)
}

// SetOnXRFrameObservable sets the OnXRFrameObservable property of class WebXRSessionManager.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#onxrframeobservable
func (w *WebXRSessionManager) SetOnXRFrameObservable(onXRFrameObservable *Observable) *WebXRSessionManager {
	p := ba.ctx.Get("WebXRSessionManager").New(onXRFrameObservable.JSObject())
	return WebXRSessionManagerFromJSObject(p, ba.ctx)
}

// OnXRSessionEnded returns the OnXRSessionEnded property of class WebXRSessionManager.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#onxrsessionended
func (w *WebXRSessionManager) OnXRSessionEnded(onXRSessionEnded *Observable) *WebXRSessionManager {
	p := ba.ctx.Get("WebXRSessionManager").New(onXRSessionEnded.JSObject())
	return WebXRSessionManagerFromJSObject(p, ba.ctx)
}

// SetOnXRSessionEnded sets the OnXRSessionEnded property of class WebXRSessionManager.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#onxrsessionended
func (w *WebXRSessionManager) SetOnXRSessionEnded(onXRSessionEnded *Observable) *WebXRSessionManager {
	p := ba.ctx.Get("WebXRSessionManager").New(onXRSessionEnded.JSObject())
	return WebXRSessionManagerFromJSObject(p, ba.ctx)
}

// ReferenceSpace returns the ReferenceSpace property of class WebXRSessionManager.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#referencespace
func (w *WebXRSessionManager) ReferenceSpace(referenceSpace js.Value) *WebXRSessionManager {
	p := ba.ctx.Get("WebXRSessionManager").New(referenceSpace)
	return WebXRSessionManagerFromJSObject(p, ba.ctx)
}

// SetReferenceSpace sets the ReferenceSpace property of class WebXRSessionManager.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#referencespace
func (w *WebXRSessionManager) SetReferenceSpace(referenceSpace js.Value) *WebXRSessionManager {
	p := ba.ctx.Get("WebXRSessionManager").New(referenceSpace)
	return WebXRSessionManagerFromJSObject(p, ba.ctx)
}

// Session returns the Session property of class WebXRSessionManager.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#session
func (w *WebXRSessionManager) Session(session js.Value) *WebXRSessionManager {
	p := ba.ctx.Get("WebXRSessionManager").New(session)
	return WebXRSessionManagerFromJSObject(p, ba.ctx)
}

// SetSession sets the Session property of class WebXRSessionManager.
//
// https://doc.babylonjs.com/api/classes/babylon.webxrsessionmanager#session
func (w *WebXRSessionManager) SetSession(session js.Value) *WebXRSessionManager {
	p := ba.ctx.Get("WebXRSessionManager").New(session)
	return WebXRSessionManagerFromJSObject(p, ba.ctx)
}

*/
