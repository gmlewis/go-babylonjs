// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DigitalRainFontTexture represents a babylon.js DigitalRainFontTexture.
// DigitalRainFontTexture is the helper class used to easily create your digital rain font texture.
//
// It basically takes care rendering the font front the given font size to a texture.
// This is used later on in the postprocess.
type DigitalRainFontTexture struct {
	*BaseTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DigitalRainFontTexture) JSObject() js.Value { return d.p }

// DigitalRainFontTexture returns a DigitalRainFontTexture JavaScript class.
func (ba *Babylon) DigitalRainFontTexture() *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture")
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// DigitalRainFontTextureFromJSObject returns a wrapped DigitalRainFontTexture JavaScript class.
func DigitalRainFontTextureFromJSObject(p js.Value, ctx js.Value) *DigitalRainFontTexture {
	return &DigitalRainFontTexture{BaseTexture: BaseTextureFromJSObject(p, ctx), ctx: ctx}
}

// DigitalRainFontTextureArrayToJSArray returns a JavaScript Array for the wrapped array.
func DigitalRainFontTextureArrayToJSArray(array []*DigitalRainFontTexture) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDigitalRainFontTextureOpts contains optional parameters for NewDigitalRainFontTexture.
type NewDigitalRainFontTextureOpts struct {
	Scene *Scene
}

// NewDigitalRainFontTexture returns a new DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture
func (ba *Babylon) NewDigitalRainFontTexture(name string, font string, text string, opts *NewDigitalRainFontTextureOpts) *DigitalRainFontTexture {
	if opts == nil {
		opts = &NewDigitalRainFontTextureOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, name)
	args = append(args, font)
	args = append(args, text)

	if opts.Scene == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scene.JSObject())
	}

	p := ba.ctx.Get("DigitalRainFontTexture").New(args...)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// Clone calls the Clone method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#clone
func (d *DigitalRainFontTexture) Clone() *DigitalRainFontTexture {

	retVal := d.p.Call("clone")
	return DigitalRainFontTextureFromJSObject(retVal, d.ctx)
}

// DelayLoad calls the DelayLoad method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#delayload
func (d *DigitalRainFontTexture) DelayLoad() {

	d.p.Call("delayLoad")
}

// Dispose calls the Dispose method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#dispose
func (d *DigitalRainFontTexture) Dispose() {

	d.p.Call("dispose")
}

// GetBaseSize calls the GetBaseSize method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#getbasesize
func (d *DigitalRainFontTexture) GetBaseSize() js.Value {

	retVal := d.p.Call("getBaseSize")
	return retVal
}

// GetClassName calls the GetClassName method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#getclassname
func (d *DigitalRainFontTexture) GetClassName() string {

	retVal := d.p.Call("getClassName")
	return retVal.String()
}

// GetInternalTexture calls the GetInternalTexture method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#getinternaltexture
func (d *DigitalRainFontTexture) GetInternalTexture() *InternalTexture {

	retVal := d.p.Call("getInternalTexture")
	return InternalTextureFromJSObject(retVal, d.ctx)
}

// GetReflectionTextureMatrix calls the GetReflectionTextureMatrix method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#getreflectiontexturematrix
func (d *DigitalRainFontTexture) GetReflectionTextureMatrix() *Matrix {

	retVal := d.p.Call("getReflectionTextureMatrix")
	return MatrixFromJSObject(retVal, d.ctx)
}

// GetScene calls the GetScene method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#getscene
func (d *DigitalRainFontTexture) GetScene() *Scene {

	retVal := d.p.Call("getScene")
	return SceneFromJSObject(retVal, d.ctx)
}

// GetSize calls the GetSize method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#getsize
func (d *DigitalRainFontTexture) GetSize() js.Value {

	retVal := d.p.Call("getSize")
	return retVal
}

// GetTextureMatrix calls the GetTextureMatrix method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#gettexturematrix
func (d *DigitalRainFontTexture) GetTextureMatrix() *Matrix {

	retVal := d.p.Call("getTextureMatrix")
	return MatrixFromJSObject(retVal, d.ctx)
}

// IsReady calls the IsReady method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#isready
func (d *DigitalRainFontTexture) IsReady() bool {

	retVal := d.p.Call("isReady")
	return retVal.Bool()
}

// IsReadyOrNotBlocking calls the IsReadyOrNotBlocking method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#isreadyornotblocking
func (d *DigitalRainFontTexture) IsReadyOrNotBlocking() bool {

	retVal := d.p.Call("isReadyOrNotBlocking")
	return retVal.Bool()
}

// Parse calls the Parse method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#parse
func (d *DigitalRainFontTexture) Parse(source interface{}, scene *Scene) *DigitalRainFontTexture {

	args := make([]interface{}, 0, 2+0)

	args = append(args, source)
	args = append(args, scene.JSObject())

	retVal := d.p.Call("Parse", args...)
	return DigitalRainFontTextureFromJSObject(retVal, d.ctx)
}

// DigitalRainFontTextureReadPixelsOpts contains optional parameters for DigitalRainFontTexture.ReadPixels.
type DigitalRainFontTextureReadPixelsOpts struct {
	FaceIndex *float64
	Level     *float64
	Buffer    js.Value
}

// ReadPixels calls the ReadPixels method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#readpixels
func (d *DigitalRainFontTexture) ReadPixels(opts *DigitalRainFontTextureReadPixelsOpts) js.Value {
	if opts == nil {
		opts = &DigitalRainFontTextureReadPixelsOpts{}
	}

	args := make([]interface{}, 0, 0+3)

	if opts.FaceIndex == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FaceIndex)
	}
	if opts.Level == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Level)
	}
	if opts.Buffer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Buffer)
	}

	retVal := d.p.Call("readPixels", args...)
	return retVal
}

// ReleaseInternalTexture calls the ReleaseInternalTexture method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#releaseinternaltexture
func (d *DigitalRainFontTexture) ReleaseInternalTexture() {

	d.p.Call("releaseInternalTexture")
}

// Scale calls the Scale method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#scale
func (d *DigitalRainFontTexture) Scale(ratio float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, ratio)

	d.p.Call("scale", args...)
}

// Serialize calls the Serialize method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#serialize
func (d *DigitalRainFontTexture) Serialize() interface{} {

	retVal := d.p.Call("serialize")
	return retVal
}

// ToString calls the ToString method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#tostring
func (d *DigitalRainFontTexture) ToString() string {

	retVal := d.p.Call("toString")
	return retVal.String()
}

// UpdateSamplingMode calls the UpdateSamplingMode method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#updatesamplingmode
func (d *DigitalRainFontTexture) UpdateSamplingMode(samplingMode float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, samplingMode)

	d.p.Call("updateSamplingMode", args...)
}

// WhenAllReady calls the WhenAllReady method on the DigitalRainFontTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#whenallready
func (d *DigitalRainFontTexture) WhenAllReady(textures *BaseTexture, callback func()) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, textures.JSObject())
	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { callback(); return nil }))

	d.p.Call("WhenAllReady", args...)
}

/*

// Animations returns the Animations property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#animations
func (d *DigitalRainFontTexture) Animations(animations *Animation) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(animations.JSObject())
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#animations
func (d *DigitalRainFontTexture) SetAnimations(animations *Animation) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(animations.JSObject())
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// AnisotropicFilteringLevel returns the AnisotropicFilteringLevel property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#anisotropicfilteringlevel
func (d *DigitalRainFontTexture) AnisotropicFilteringLevel(anisotropicFilteringLevel float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(anisotropicFilteringLevel)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetAnisotropicFilteringLevel sets the AnisotropicFilteringLevel property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#anisotropicfilteringlevel
func (d *DigitalRainFontTexture) SetAnisotropicFilteringLevel(anisotropicFilteringLevel float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(anisotropicFilteringLevel)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// CanRescale returns the CanRescale property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#canrescale
func (d *DigitalRainFontTexture) CanRescale(canRescale bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(canRescale)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetCanRescale sets the CanRescale property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#canrescale
func (d *DigitalRainFontTexture) SetCanRescale(canRescale bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(canRescale)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// CharSize returns the CharSize property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#charsize
func (d *DigitalRainFontTexture) CharSize(charSize float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(charSize)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetCharSize sets the CharSize property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#charsize
func (d *DigitalRainFontTexture) SetCharSize(charSize float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(charSize)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// CoordinatesIndex returns the CoordinatesIndex property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#coordinatesindex
func (d *DigitalRainFontTexture) CoordinatesIndex(coordinatesIndex float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(coordinatesIndex)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetCoordinatesIndex sets the CoordinatesIndex property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#coordinatesindex
func (d *DigitalRainFontTexture) SetCoordinatesIndex(coordinatesIndex float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(coordinatesIndex)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// CoordinatesMode returns the CoordinatesMode property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#coordinatesmode
func (d *DigitalRainFontTexture) CoordinatesMode(coordinatesMode float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(coordinatesMode)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetCoordinatesMode sets the CoordinatesMode property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#coordinatesmode
func (d *DigitalRainFontTexture) SetCoordinatesMode(coordinatesMode float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(coordinatesMode)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// DEFAULT_ANISOTROPIC_FILTERING_LEVEL returns the DEFAULT_ANISOTROPIC_FILTERING_LEVEL property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#default_anisotropic_filtering_level
func (d *DigitalRainFontTexture) DEFAULT_ANISOTROPIC_FILTERING_LEVEL(DEFAULT_ANISOTROPIC_FILTERING_LEVEL float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(DEFAULT_ANISOTROPIC_FILTERING_LEVEL)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetDEFAULT_ANISOTROPIC_FILTERING_LEVEL sets the DEFAULT_ANISOTROPIC_FILTERING_LEVEL property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#default_anisotropic_filtering_level
func (d *DigitalRainFontTexture) SetDEFAULT_ANISOTROPIC_FILTERING_LEVEL(DEFAULT_ANISOTROPIC_FILTERING_LEVEL float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(DEFAULT_ANISOTROPIC_FILTERING_LEVEL)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// DelayLoadState returns the DelayLoadState property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#delayloadstate
func (d *DigitalRainFontTexture) DelayLoadState(delayLoadState float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(delayLoadState)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetDelayLoadState sets the DelayLoadState property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#delayloadstate
func (d *DigitalRainFontTexture) SetDelayLoadState(delayLoadState float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(delayLoadState)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// GammaSpace returns the GammaSpace property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#gammaspace
func (d *DigitalRainFontTexture) GammaSpace(gammaSpace bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(gammaSpace)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetGammaSpace sets the GammaSpace property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#gammaspace
func (d *DigitalRainFontTexture) SetGammaSpace(gammaSpace bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(gammaSpace)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// GetAlphaFromRGB returns the GetAlphaFromRGB property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#getalphafromrgb
func (d *DigitalRainFontTexture) GetAlphaFromRGB(getAlphaFromRGB bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(getAlphaFromRGB)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetGetAlphaFromRGB sets the GetAlphaFromRGB property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#getalphafromrgb
func (d *DigitalRainFontTexture) SetGetAlphaFromRGB(getAlphaFromRGB bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(getAlphaFromRGB)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// HasAlpha returns the HasAlpha property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#hasalpha
func (d *DigitalRainFontTexture) HasAlpha(hasAlpha bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(hasAlpha)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetHasAlpha sets the HasAlpha property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#hasalpha
func (d *DigitalRainFontTexture) SetHasAlpha(hasAlpha bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(hasAlpha)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// InvertZ returns the InvertZ property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#invertz
func (d *DigitalRainFontTexture) InvertZ(invertZ bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(invertZ)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetInvertZ sets the InvertZ property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#invertz
func (d *DigitalRainFontTexture) SetInvertZ(invertZ bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(invertZ)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// IrradianceTexture returns the IrradianceTexture property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#irradiancetexture
func (d *DigitalRainFontTexture) IrradianceTexture(irradianceTexture *BaseTexture) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(irradianceTexture.JSObject())
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetIrradianceTexture sets the IrradianceTexture property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#irradiancetexture
func (d *DigitalRainFontTexture) SetIrradianceTexture(irradianceTexture *BaseTexture) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(irradianceTexture.JSObject())
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// Is2DArray returns the Is2DArray property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#is2darray
func (d *DigitalRainFontTexture) Is2DArray(is2DArray bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(is2DArray)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetIs2DArray sets the Is2DArray property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#is2darray
func (d *DigitalRainFontTexture) SetIs2DArray(is2DArray bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(is2DArray)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// Is3D returns the Is3D property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#is3d
func (d *DigitalRainFontTexture) Is3D(is3D bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(is3D)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetIs3D sets the Is3D property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#is3d
func (d *DigitalRainFontTexture) SetIs3D(is3D bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(is3D)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// IsBlocking returns the IsBlocking property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#isblocking
func (d *DigitalRainFontTexture) IsBlocking(isBlocking bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(isBlocking)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetIsBlocking sets the IsBlocking property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#isblocking
func (d *DigitalRainFontTexture) SetIsBlocking(isBlocking bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(isBlocking)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// IsCube returns the IsCube property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#iscube
func (d *DigitalRainFontTexture) IsCube(isCube bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(isCube)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetIsCube sets the IsCube property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#iscube
func (d *DigitalRainFontTexture) SetIsCube(isCube bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(isCube)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// IsRGBD returns the IsRGBD property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#isrgbd
func (d *DigitalRainFontTexture) IsRGBD(isRGBD bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(isRGBD)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetIsRGBD sets the IsRGBD property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#isrgbd
func (d *DigitalRainFontTexture) SetIsRGBD(isRGBD bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(isRGBD)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// IsRenderTarget returns the IsRenderTarget property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#isrendertarget
func (d *DigitalRainFontTexture) IsRenderTarget(isRenderTarget bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(isRenderTarget)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetIsRenderTarget sets the IsRenderTarget property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#isrendertarget
func (d *DigitalRainFontTexture) SetIsRenderTarget(isRenderTarget bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(isRenderTarget)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// Level returns the Level property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#level
func (d *DigitalRainFontTexture) Level(level float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(level)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetLevel sets the Level property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#level
func (d *DigitalRainFontTexture) SetLevel(level float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(level)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// LinearSpecularLOD returns the LinearSpecularLOD property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#linearspecularlod
func (d *DigitalRainFontTexture) LinearSpecularLOD(linearSpecularLOD bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(linearSpecularLOD)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetLinearSpecularLOD sets the LinearSpecularLOD property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#linearspecularlod
func (d *DigitalRainFontTexture) SetLinearSpecularLOD(linearSpecularLOD bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(linearSpecularLOD)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// LodGenerationOffset returns the LodGenerationOffset property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#lodgenerationoffset
func (d *DigitalRainFontTexture) LodGenerationOffset(lodGenerationOffset float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(lodGenerationOffset)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetLodGenerationOffset sets the LodGenerationOffset property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#lodgenerationoffset
func (d *DigitalRainFontTexture) SetLodGenerationOffset(lodGenerationOffset float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(lodGenerationOffset)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// LodGenerationScale returns the LodGenerationScale property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#lodgenerationscale
func (d *DigitalRainFontTexture) LodGenerationScale(lodGenerationScale float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(lodGenerationScale)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetLodGenerationScale sets the LodGenerationScale property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#lodgenerationscale
func (d *DigitalRainFontTexture) SetLodGenerationScale(lodGenerationScale float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(lodGenerationScale)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#metadata
func (d *DigitalRainFontTexture) Metadata(metadata interface{}) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(metadata)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#metadata
func (d *DigitalRainFontTexture) SetMetadata(metadata interface{}) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(metadata)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#name
func (d *DigitalRainFontTexture) Name(name string) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(name)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#name
func (d *DigitalRainFontTexture) SetName(name string) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(name)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// NoMipmap returns the NoMipmap property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#nomipmap
func (d *DigitalRainFontTexture) NoMipmap(noMipmap bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(noMipmap)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetNoMipmap sets the NoMipmap property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#nomipmap
func (d *DigitalRainFontTexture) SetNoMipmap(noMipmap bool) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(noMipmap)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#ondispose
func (d *DigitalRainFontTexture) OnDispose(onDispose func()) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#ondispose
func (d *DigitalRainFontTexture) SetOnDispose(onDispose func()) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#ondisposeobservable
func (d *DigitalRainFontTexture) OnDisposeObservable(onDisposeObservable *Observable) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(onDisposeObservable.JSObject())
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#ondisposeobservable
func (d *DigitalRainFontTexture) SetOnDisposeObservable(onDisposeObservable *Observable) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(onDisposeObservable.JSObject())
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#reserveddatastore
func (d *DigitalRainFontTexture) ReservedDataStore(reservedDataStore interface{}) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(reservedDataStore)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#reserveddatastore
func (d *DigitalRainFontTexture) SetReservedDataStore(reservedDataStore interface{}) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(reservedDataStore)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SphericalPolynomial returns the SphericalPolynomial property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#sphericalpolynomial
func (d *DigitalRainFontTexture) SphericalPolynomial(sphericalPolynomial *SphericalPolynomial) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(sphericalPolynomial.JSObject())
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetSphericalPolynomial sets the SphericalPolynomial property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#sphericalpolynomial
func (d *DigitalRainFontTexture) SetSphericalPolynomial(sphericalPolynomial *SphericalPolynomial) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(sphericalPolynomial.JSObject())
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// TextureFormat returns the TextureFormat property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#textureformat
func (d *DigitalRainFontTexture) TextureFormat(textureFormat float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(textureFormat)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetTextureFormat sets the TextureFormat property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#textureformat
func (d *DigitalRainFontTexture) SetTextureFormat(textureFormat float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(textureFormat)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// TextureType returns the TextureType property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#texturetype
func (d *DigitalRainFontTexture) TextureType(textureType float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(textureType)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetTextureType sets the TextureType property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#texturetype
func (d *DigitalRainFontTexture) SetTextureType(textureType float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(textureType)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// Uid returns the Uid property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#uid
func (d *DigitalRainFontTexture) Uid(uid string) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(uid)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetUid sets the Uid property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#uid
func (d *DigitalRainFontTexture) SetUid(uid string) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(uid)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#uniqueid
func (d *DigitalRainFontTexture) UniqueId(uniqueId float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(uniqueId)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#uniqueid
func (d *DigitalRainFontTexture) SetUniqueId(uniqueId float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(uniqueId)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// WrapR returns the WrapR property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#wrapr
func (d *DigitalRainFontTexture) WrapR(wrapR float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(wrapR)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetWrapR sets the WrapR property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#wrapr
func (d *DigitalRainFontTexture) SetWrapR(wrapR float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(wrapR)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// WrapU returns the WrapU property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#wrapu
func (d *DigitalRainFontTexture) WrapU(wrapU float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(wrapU)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetWrapU sets the WrapU property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#wrapu
func (d *DigitalRainFontTexture) SetWrapU(wrapU float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(wrapU)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// WrapV returns the WrapV property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#wrapv
func (d *DigitalRainFontTexture) WrapV(wrapV float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(wrapV)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

// SetWrapV sets the WrapV property of class DigitalRainFontTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.digitalrainfonttexture#wrapv
func (d *DigitalRainFontTexture) SetWrapV(wrapV float64) *DigitalRainFontTexture {
	p := ba.ctx.Get("DigitalRainFontTexture").New(wrapV)
	return DigitalRainFontTextureFromJSObject(p, ba.ctx)
}

*/
