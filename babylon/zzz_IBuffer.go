// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IBuffer represents a babylon.js IBuffer.
// Loader interface with additional members.
type IBuffer struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IBuffer) JSObject() js.Value { return i.p }

// IBuffer returns a IBuffer JavaScript class.
func (ba *Babylon) IBuffer() *IBuffer {
	p := ba.ctx.Get("IBuffer")
	return IBufferFromJSObject(p, ba.ctx)
}

// IBufferFromJSObject returns a wrapped IBuffer JavaScript class.
func IBufferFromJSObject(p js.Value, ctx js.Value) *IBuffer {
	return &IBuffer{p: p, ctx: ctx}
}

// IBufferArrayToJSArray returns a JavaScript Array for the wrapped array.
func IBufferArrayToJSArray(array []*IBuffer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}
