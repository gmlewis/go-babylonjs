// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// InputBlock represents a babylon.js InputBlock.
// Block used to expose an input value
type InputBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *InputBlock) JSObject() js.Value { return i.p }

// InputBlock returns a InputBlock JavaScript class.
func (ba *Babylon) InputBlock() *InputBlock {
	p := ba.ctx.Get("InputBlock")
	return InputBlockFromJSObject(p, ba.ctx)
}

// InputBlockFromJSObject returns a wrapped InputBlock JavaScript class.
func InputBlockFromJSObject(p js.Value, ctx js.Value) *InputBlock {
	return &InputBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// InputBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func InputBlockArrayToJSArray(array []*InputBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewInputBlockOpts contains optional parameters for NewInputBlock.
type NewInputBlockOpts struct {
	Target js.Value
	Type   js.Value
}

// NewInputBlock returns a new InputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock
func (ba *Babylon) NewInputBlock(name string, opts *NewInputBlockOpts) *InputBlock {
	if opts == nil {
		opts = &NewInputBlockOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, name)

	args = append(args, opts.Target)
	args = append(args, opts.Type)

	p := ba.ctx.Get("InputBlock").New(args...)
	return InputBlockFromJSObject(p, ba.ctx)
}

// Animate calls the Animate method on the InputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#animate
func (i *InputBlock) Animate(scene *Scene) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scene.JSObject())

	i.p.Call("animate", args...)
}

// GetClassName calls the GetClassName method on the InputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#getclassname
func (i *InputBlock) GetClassName() string {

	retVal := i.p.Call("getClassName")
	return retVal.String()
}

// Initialize calls the Initialize method on the InputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#initialize
func (i *InputBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	i.p.Call("initialize", args...)
}

// Serialize calls the Serialize method on the InputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#serialize
func (i *InputBlock) Serialize() interface{} {

	retVal := i.p.Call("serialize")
	return retVal
}

// InputBlockSetAsAttributeOpts contains optional parameters for InputBlock.SetAsAttribute.
type InputBlockSetAsAttributeOpts struct {
	AttributeName *string
}

// SetAsAttribute calls the SetAsAttribute method on the InputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#setasattribute
func (i *InputBlock) SetAsAttribute(opts *InputBlockSetAsAttributeOpts) *InputBlock {
	if opts == nil {
		opts = &InputBlockSetAsAttributeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.AttributeName == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.AttributeName)
	}

	retVal := i.p.Call("setAsAttribute", args...)
	return InputBlockFromJSObject(retVal, i.ctx)
}

// SetAsSystemValue calls the SetAsSystemValue method on the InputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#setassystemvalue
func (i *InputBlock) SetAsSystemValue(value js.Value) *InputBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, value)

	retVal := i.p.Call("setAsSystemValue", args...)
	return InputBlockFromJSObject(retVal, i.ctx)
}

// SetDefaultValue calls the SetDefaultValue method on the InputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#setdefaultvalue
func (i *InputBlock) SetDefaultValue() {

	i.p.Call("setDefaultValue")
}

// _deserialize calls the _deserialize method on the InputBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#_deserialize
func (i *InputBlock) _deserialize(serializationObject interface{}, scene *Scene, rootUrl string) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, serializationObject)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	i.p.Call("_deserialize", args...)
}

// AnimationType returns the AnimationType property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#animationtype
func (i *InputBlock) AnimationType() js.Value {
	retVal := i.p.Get("animationType")
	return retVal
}

// SetAnimationType sets the AnimationType property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#animationtype
func (i *InputBlock) SetAnimationType(animationType js.Value) *InputBlock {
	i.p.Set("animationType", animationType)
	return i
}

// AssociatedVariableName returns the AssociatedVariableName property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#associatedvariablename
func (i *InputBlock) AssociatedVariableName() string {
	retVal := i.p.Get("associatedVariableName")
	return retVal.String()
}

// SetAssociatedVariableName sets the AssociatedVariableName property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#associatedvariablename
func (i *InputBlock) SetAssociatedVariableName(associatedVariableName string) *InputBlock {
	i.p.Set("associatedVariableName", associatedVariableName)
	return i
}

// IsAttribute returns the IsAttribute property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#isattribute
func (i *InputBlock) IsAttribute() bool {
	retVal := i.p.Get("isAttribute")
	return retVal.Bool()
}

// SetIsAttribute sets the IsAttribute property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#isattribute
func (i *InputBlock) SetIsAttribute(isAttribute bool) *InputBlock {
	i.p.Set("isAttribute", isAttribute)
	return i
}

// IsConstant returns the IsConstant property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#isconstant
func (i *InputBlock) IsConstant() bool {
	retVal := i.p.Get("isConstant")
	return retVal.Bool()
}

// SetIsConstant sets the IsConstant property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#isconstant
func (i *InputBlock) SetIsConstant(isConstant bool) *InputBlock {
	i.p.Set("isConstant", isConstant)
	return i
}

// IsSystemValue returns the IsSystemValue property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#issystemvalue
func (i *InputBlock) IsSystemValue() bool {
	retVal := i.p.Get("isSystemValue")
	return retVal.Bool()
}

// SetIsSystemValue sets the IsSystemValue property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#issystemvalue
func (i *InputBlock) SetIsSystemValue(isSystemValue bool) *InputBlock {
	i.p.Set("isSystemValue", isSystemValue)
	return i
}

// IsUndefined returns the IsUndefined property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#isundefined
func (i *InputBlock) IsUndefined() bool {
	retVal := i.p.Get("isUndefined")
	return retVal.Bool()
}

// SetIsUndefined sets the IsUndefined property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#isundefined
func (i *InputBlock) SetIsUndefined(isUndefined bool) *InputBlock {
	i.p.Set("isUndefined", isUndefined)
	return i
}

// IsUniform returns the IsUniform property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#isuniform
func (i *InputBlock) IsUniform() bool {
	retVal := i.p.Get("isUniform")
	return retVal.Bool()
}

// SetIsUniform sets the IsUniform property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#isuniform
func (i *InputBlock) SetIsUniform(isUniform bool) *InputBlock {
	i.p.Set("isUniform", isUniform)
	return i
}

// IsVarying returns the IsVarying property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#isvarying
func (i *InputBlock) IsVarying() bool {
	retVal := i.p.Get("isVarying")
	return retVal.Bool()
}

// SetIsVarying sets the IsVarying property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#isvarying
func (i *InputBlock) SetIsVarying(isVarying bool) *InputBlock {
	i.p.Set("isVarying", isVarying)
	return i
}

// MatrixMode returns the MatrixMode property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#matrixmode
func (i *InputBlock) MatrixMode() float64 {
	retVal := i.p.Get("matrixMode")
	return retVal.Float()
}

// SetMatrixMode sets the MatrixMode property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#matrixmode
func (i *InputBlock) SetMatrixMode(matrixMode float64) *InputBlock {
	i.p.Set("matrixMode", matrixMode)
	return i
}

// Max returns the Max property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#max
func (i *InputBlock) Max() float64 {
	retVal := i.p.Get("max")
	return retVal.Float()
}

// SetMax sets the Max property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#max
func (i *InputBlock) SetMax(max float64) *InputBlock {
	i.p.Set("max", max)
	return i
}

// Min returns the Min property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#min
func (i *InputBlock) Min() float64 {
	retVal := i.p.Get("min")
	return retVal.Float()
}

// SetMin sets the Min property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#min
func (i *InputBlock) SetMin(min float64) *InputBlock {
	i.p.Set("min", min)
	return i
}

// Output returns the Output property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#output
func (i *InputBlock) Output() *NodeMaterialConnectionPoint {
	retVal := i.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, i.ctx)
}

// SetOutput sets the Output property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#output
func (i *InputBlock) SetOutput(output *NodeMaterialConnectionPoint) *InputBlock {
	i.p.Set("output", output.JSObject())
	return i
}

// SystemValue returns the SystemValue property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#systemvalue
func (i *InputBlock) SystemValue() js.Value {
	retVal := i.p.Get("systemValue")
	return retVal
}

// SetSystemValue sets the SystemValue property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#systemvalue
func (i *InputBlock) SetSystemValue(systemValue js.Value) *InputBlock {
	i.p.Set("systemValue", systemValue)
	return i
}

// Type returns the Type property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#type
func (i *InputBlock) Type() js.Value {
	retVal := i.p.Get("type")
	return retVal
}

// SetType sets the Type property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#type
func (i *InputBlock) SetType(jsType js.Value) *InputBlock {
	i.p.Set("type", jsType)
	return i
}

// Value returns the Value property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#value
func (i *InputBlock) Value() interface{} {
	retVal := i.p.Get("value")
	return retVal
}

// SetValue sets the Value property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#value
func (i *InputBlock) SetValue(value interface{}) *InputBlock {
	i.p.Set("value", value)
	return i
}

// ValueCallback returns the ValueCallback property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#valuecallback
func (i *InputBlock) ValueCallback() js.Value {
	retVal := i.p.Get("valueCallback")
	return retVal
}

// SetValueCallback sets the ValueCallback property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#valuecallback
func (i *InputBlock) SetValueCallback(valueCallback func()) *InputBlock {
	i.p.Set("valueCallback", js.FuncOf(func(this js.Value, args []js.Value) interface{} { valueCallback(); return nil }))
	return i
}

// VisibleInInspector returns the VisibleInInspector property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#visibleininspector
func (i *InputBlock) VisibleInInspector() bool {
	retVal := i.p.Get("visibleInInspector")
	return retVal.Bool()
}

// SetVisibleInInspector sets the VisibleInInspector property of class InputBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.inputblock#visibleininspector
func (i *InputBlock) SetVisibleInInspector(visibleInInspector bool) *InputBlock {
	i.p.Set("visibleInInspector", visibleInInspector)
	return i
}
