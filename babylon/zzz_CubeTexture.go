// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CubeTexture represents a babylon.js CubeTexture.
// Class for creating a cube texture
type CubeTexture struct{ *BaseTexture }

// JSObject returns the underlying js.Value.
func (c *CubeTexture) JSObject() js.Value { return c.p }

// CubeTexture returns a CubeTexture JavaScript class.
func (ba *Babylon) CubeTexture() *CubeTexture {
	p := ba.ctx.Get("CubeTexture")
	return CubeTextureFromJSObject(p)
}

// CubeTextureFromJSObject returns a wrapped CubeTexture JavaScript class.
func CubeTextureFromJSObject(p js.Value) *CubeTexture {
	return &CubeTexture{BaseTextureFromJSObject(p)}
}

// NewCubeTextureOpts contains optional parameters for NewCubeTexture.
type NewCubeTextureOpts struct {
	Extensions *JSString

	NoMipmap *JSBool

	Files *JSString

	OnLoad *func()

	OnError *func()

	Format *JSFloat64

	Prefiltered *JSBool

	ForcedExtension *interface{}

	CreatePolynomials *JSBool

	LodScale *JSFloat64

	LodOffset *JSFloat64
}

// NewCubeTexture returns a new CubeTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.cubetexture
func (ba *Babylon) NewCubeTexture(rootUrl string, scene *Scene, opts *NewCubeTextureOpts) *CubeTexture {
	if opts == nil {
		opts = &NewCubeTextureOpts{}
	}

	p := ba.ctx.Get("CubeTexture").New(rootUrl, scene.JSObject(), opts.Extensions.JSObject(), opts.NoMipmap.JSObject(), opts.Files.JSObject(), opts.OnLoad, opts.OnError, opts.Format.JSObject(), opts.Prefiltered.JSObject(), opts.ForcedExtension, opts.CreatePolynomials.JSObject(), opts.LodScale.JSObject(), opts.LodOffset.JSObject())
	return CubeTextureFromJSObject(p)
}

// TODO: methods
