// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// HDRCubeTextureAssetTask represents a babylon.js HDRCubeTextureAssetTask.
// Define a task used by AssetsManager to load HDR cube textures
type HDRCubeTextureAssetTask struct {
	*AbstractAssetTask
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (h *HDRCubeTextureAssetTask) JSObject() js.Value { return h.p }

// HDRCubeTextureAssetTask returns a HDRCubeTextureAssetTask JavaScript class.
func (ba *Babylon) HDRCubeTextureAssetTask() *HDRCubeTextureAssetTask {
	p := ba.ctx.Get("HDRCubeTextureAssetTask")
	return HDRCubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// HDRCubeTextureAssetTaskFromJSObject returns a wrapped HDRCubeTextureAssetTask JavaScript class.
func HDRCubeTextureAssetTaskFromJSObject(p js.Value, ctx js.Value) *HDRCubeTextureAssetTask {
	return &HDRCubeTextureAssetTask{AbstractAssetTask: AbstractAssetTaskFromJSObject(p, ctx), ctx: ctx}
}

// HDRCubeTextureAssetTaskArrayToJSArray returns a JavaScript Array for the wrapped array.
func HDRCubeTextureAssetTaskArrayToJSArray(array []*HDRCubeTextureAssetTask) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewHDRCubeTextureAssetTaskOpts contains optional parameters for NewHDRCubeTextureAssetTask.
type NewHDRCubeTextureAssetTaskOpts struct {
	NoMipmap          *bool
	GenerateHarmonics *bool
	GammaSpace        *bool
	Reserved          *bool
}

// NewHDRCubeTextureAssetTask returns a new HDRCubeTextureAssetTask object.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#constructor
func (ba *Babylon) NewHDRCubeTextureAssetTask(name string, url string, size float64, opts *NewHDRCubeTextureAssetTaskOpts) *HDRCubeTextureAssetTask {
	if opts == nil {
		opts = &NewHDRCubeTextureAssetTaskOpts{}
	}

	args := make([]interface{}, 0, 3+4)

	args = append(args, name)
	args = append(args, url)
	args = append(args, size)

	if opts.NoMipmap == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoMipmap)
	}
	if opts.GenerateHarmonics == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateHarmonics)
	}
	if opts.GammaSpace == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GammaSpace)
	}
	if opts.Reserved == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reserved)
	}

	p := ba.ctx.Get("HDRCubeTextureAssetTask").New(args...)
	return HDRCubeTextureAssetTaskFromJSObject(p, ba.ctx)
}

// RunTask calls the RunTask method on the HDRCubeTextureAssetTask object.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#runtask
func (h *HDRCubeTextureAssetTask) RunTask(scene *Scene, onSuccess JSFunc, onError JSFunc) {

	args := make([]interface{}, 0, 3+0)

	if scene == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, scene.JSObject())
	}

	args = append(args, js.FuncOf(onSuccess))

	args = append(args, js.FuncOf(onError))

	h.p.Call("runTask", args...)
}

// GammaSpace returns the GammaSpace property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#gammaspace
func (h *HDRCubeTextureAssetTask) GammaSpace() bool {
	retVal := h.p.Get("gammaSpace")
	return retVal.Bool()
}

// SetGammaSpace sets the GammaSpace property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#gammaspace
func (h *HDRCubeTextureAssetTask) SetGammaSpace(gammaSpace bool) *HDRCubeTextureAssetTask {
	h.p.Set("gammaSpace", gammaSpace)
	return h
}

// GenerateHarmonics returns the GenerateHarmonics property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#generateharmonics
func (h *HDRCubeTextureAssetTask) GenerateHarmonics() bool {
	retVal := h.p.Get("generateHarmonics")
	return retVal.Bool()
}

// SetGenerateHarmonics sets the GenerateHarmonics property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#generateharmonics
func (h *HDRCubeTextureAssetTask) SetGenerateHarmonics(generateHarmonics bool) *HDRCubeTextureAssetTask {
	h.p.Set("generateHarmonics", generateHarmonics)
	return h
}

// Name returns the Name property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#name
func (h *HDRCubeTextureAssetTask) Name() string {
	retVal := h.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#name
func (h *HDRCubeTextureAssetTask) SetName(name string) *HDRCubeTextureAssetTask {
	h.p.Set("name", name)
	return h
}

// NoMipmap returns the NoMipmap property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#nomipmap
func (h *HDRCubeTextureAssetTask) NoMipmap() bool {
	retVal := h.p.Get("noMipmap")
	return retVal.Bool()
}

// SetNoMipmap sets the NoMipmap property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#nomipmap
func (h *HDRCubeTextureAssetTask) SetNoMipmap(noMipmap bool) *HDRCubeTextureAssetTask {
	h.p.Set("noMipmap", noMipmap)
	return h
}

// OnError returns the OnError property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#onerror
func (h *HDRCubeTextureAssetTask) OnError() js.Value {
	retVal := h.p.Get("onError")
	return retVal
}

// SetOnError sets the OnError property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#onerror
func (h *HDRCubeTextureAssetTask) SetOnError(onError JSFunc) *HDRCubeTextureAssetTask {
	h.p.Set("onError", js.FuncOf(onError))
	return h
}

// OnSuccess returns the OnSuccess property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#onsuccess
func (h *HDRCubeTextureAssetTask) OnSuccess() js.Value {
	retVal := h.p.Get("onSuccess")
	return retVal
}

// SetOnSuccess sets the OnSuccess property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#onsuccess
func (h *HDRCubeTextureAssetTask) SetOnSuccess(onSuccess JSFunc) *HDRCubeTextureAssetTask {
	h.p.Set("onSuccess", js.FuncOf(onSuccess))
	return h
}

// Reserved returns the Reserved property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#reserved
func (h *HDRCubeTextureAssetTask) Reserved() bool {
	retVal := h.p.Get("reserved")
	return retVal.Bool()
}

// SetReserved sets the Reserved property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#reserved
func (h *HDRCubeTextureAssetTask) SetReserved(reserved bool) *HDRCubeTextureAssetTask {
	h.p.Set("reserved", reserved)
	return h
}

// Size returns the Size property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#size
func (h *HDRCubeTextureAssetTask) Size() float64 {
	retVal := h.p.Get("size")
	return retVal.Float()
}

// SetSize sets the Size property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#size
func (h *HDRCubeTextureAssetTask) SetSize(size float64) *HDRCubeTextureAssetTask {
	h.p.Set("size", size)
	return h
}

// Texture returns the Texture property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#texture
func (h *HDRCubeTextureAssetTask) Texture() *HDRCubeTexture {
	retVal := h.p.Get("texture")
	return HDRCubeTextureFromJSObject(retVal, h.ctx)
}

// SetTexture sets the Texture property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#texture
func (h *HDRCubeTextureAssetTask) SetTexture(texture *HDRCubeTexture) *HDRCubeTextureAssetTask {
	h.p.Set("texture", texture.JSObject())
	return h
}

// Url returns the Url property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#url
func (h *HDRCubeTextureAssetTask) Url() string {
	retVal := h.p.Get("url")
	return retVal.String()
}

// SetUrl sets the Url property of class HDRCubeTextureAssetTask.
//
// https://doc.babylonjs.com/api/classes/babylon.hdrcubetextureassettask#url
func (h *HDRCubeTextureAssetTask) SetUrl(url string) *HDRCubeTextureAssetTask {
	h.p.Set("url", url)
	return h
}
