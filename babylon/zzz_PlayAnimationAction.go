// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PlayAnimationAction represents a babylon.js PlayAnimationAction.
// This defines an action responsible to start an animation once triggered.
//
// See: http://doc.babylonjs.com/how_to/how_to_use_actions
type PlayAnimationAction struct{ *Action }

// JSObject returns the underlying js.Value.
func (p *PlayAnimationAction) JSObject() js.Value { return p.p }

// PlayAnimationAction returns a PlayAnimationAction JavaScript class.
func (ba *Babylon) PlayAnimationAction() *PlayAnimationAction {
	p := ba.ctx.Get("PlayAnimationAction")
	return PlayAnimationActionFromJSObject(p)
}

// PlayAnimationActionFromJSObject returns a wrapped PlayAnimationAction JavaScript class.
func PlayAnimationActionFromJSObject(p js.Value) *PlayAnimationAction {
	return &PlayAnimationAction{ActionFromJSObject(p)}
}

// NewPlayAnimationActionOpts contains optional parameters for NewPlayAnimationAction.
type NewPlayAnimationActionOpts struct {
	Loop *JSBool

	Condition *Condition
}

// NewPlayAnimationAction returns a new PlayAnimationAction object.
//
// https://doc.babylonjs.com/api/classes/babylon.playanimationaction
func (ba *Babylon) NewPlayAnimationAction(triggerOptions interface{}, target interface{}, from float64, to float64, opts *NewPlayAnimationActionOpts) *PlayAnimationAction {
	if opts == nil {
		opts = &NewPlayAnimationActionOpts{}
	}

	p := ba.ctx.Get("PlayAnimationAction").New(triggerOptions, target, from, to, opts.Loop.JSObject(), opts.Condition.JSObject())
	return PlayAnimationActionFromJSObject(p)
}

// TODO: methods
