// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// NodeMaterial represents a babylon.js NodeMaterial.
// Class used to create a node based material built by assembling shader blocks
type NodeMaterial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (n *NodeMaterial) JSObject() js.Value { return n.p }

// NodeMaterial returns a NodeMaterial JavaScript class.
func (ba *Babylon) NodeMaterial() *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial")
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// NodeMaterialFromJSObject returns a wrapped NodeMaterial JavaScript class.
func NodeMaterialFromJSObject(p js.Value, ctx js.Value) *NodeMaterial {
	return &NodeMaterial{p: p, ctx: ctx}
}

// NodeMaterialArrayToJSArray returns a JavaScript Array for the wrapped array.
func NodeMaterialArrayToJSArray(array []*NodeMaterial) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewNodeMaterialOpts contains optional parameters for NewNodeMaterial.
type NewNodeMaterialOpts struct {
	Scene   *Scene
	Options js.Value
}

// NewNodeMaterial returns a new NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial
func (ba *Babylon) NewNodeMaterial(name string, opts *NewNodeMaterialOpts) *NodeMaterial {
	if opts == nil {
		opts = &NewNodeMaterialOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, name)

	if opts.Scene == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scene.JSObject())
	}
	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	p := ba.ctx.Get("NodeMaterial").New(args...)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// AddOutputNode calls the AddOutputNode method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#addoutputnode
func (n *NodeMaterial) AddOutputNode(node *NodeMaterialBlock) *NodeMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, node.JSObject())

	retVal := n.p.Call("addOutputNode", args...)
	return NodeMaterialFromJSObject(retVal, n.ctx)
}

// NodeMaterialBindOpts contains optional parameters for NodeMaterial.Bind.
type NodeMaterialBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#bind
func (n *NodeMaterial) Bind(world *Matrix, opts *NodeMaterialBindOpts) {
	if opts == nil {
		opts = &NodeMaterialBindOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, world.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	n.p.Call("bind", args...)
}

// BindForSubMesh calls the BindForSubMesh method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#bindforsubmesh
func (n *NodeMaterial) BindForSubMesh(world *Matrix, mesh *Mesh, subMesh *SubMesh) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, world.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	n.p.Call("bindForSubMesh", args...)
}

// BindOnlyNormalMatrix calls the BindOnlyNormalMatrix method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#bindonlynormalmatrix
func (n *NodeMaterial) BindOnlyNormalMatrix(normalMatrix *Matrix) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, normalMatrix.JSObject())

	n.p.Call("bindOnlyNormalMatrix", args...)
}

// BindOnlyWorldMatrix calls the BindOnlyWorldMatrix method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#bindonlyworldmatrix
func (n *NodeMaterial) BindOnlyWorldMatrix(world *Matrix) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, world.JSObject())

	n.p.Call("bindOnlyWorldMatrix", args...)
}

// BindSceneUniformBuffer calls the BindSceneUniformBuffer method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#bindsceneuniformbuffer
func (n *NodeMaterial) BindSceneUniformBuffer(effect *Effect, sceneUbo *UniformBuffer) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, sceneUbo.JSObject())

	n.p.Call("bindSceneUniformBuffer", args...)
}

// BindView calls the BindView method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#bindview
func (n *NodeMaterial) BindView(effect *Effect) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, effect.JSObject())

	n.p.Call("bindView", args...)
}

// BindViewProjection calls the BindViewProjection method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#bindviewprojection
func (n *NodeMaterial) BindViewProjection(effect *Effect) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, effect.JSObject())

	n.p.Call("bindViewProjection", args...)
}

// NodeMaterialBuildOpts contains optional parameters for NodeMaterial.Build.
type NodeMaterialBuildOpts struct {
	Verbose *bool
}

// Build calls the Build method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#build
func (n *NodeMaterial) Build(opts *NodeMaterialBuildOpts) {
	if opts == nil {
		opts = &NodeMaterialBuildOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Verbose == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Verbose)
	}

	n.p.Call("build", args...)
}

// Clear calls the Clear method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#clear
func (n *NodeMaterial) Clear() {

	n.p.Call("clear")
}

// Clone calls the Clone method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#clone
func (n *NodeMaterial) Clone(name string) *Material {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := n.p.Call("clone", args...)
	return MaterialFromJSObject(retVal, n.ctx)
}

// NodeMaterialCreateDefaultOpts contains optional parameters for NodeMaterial.CreateDefault.
type NodeMaterialCreateDefaultOpts struct {
	Scene *Scene
}

// CreateDefault calls the CreateDefault method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#createdefault
func (n *NodeMaterial) CreateDefault(name string, opts *NodeMaterialCreateDefaultOpts) *NodeMaterial {
	if opts == nil {
		opts = &NodeMaterialCreateDefaultOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, name)

	if opts.Scene == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Scene.JSObject())
	}

	retVal := n.p.Call("CreateDefault", args...)
	return NodeMaterialFromJSObject(retVal, n.ctx)
}

// NodeMaterialDisposeOpts contains optional parameters for NodeMaterial.Dispose.
type NodeMaterialDisposeOpts struct {
	ForceDisposeEffect   *bool
	ForceDisposeTextures *bool
	NotBoundToMesh       *bool
}

// Dispose calls the Dispose method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#dispose
func (n *NodeMaterial) Dispose(opts *NodeMaterialDisposeOpts) {
	if opts == nil {
		opts = &NodeMaterialDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+3)

	if opts.ForceDisposeEffect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeEffect)
	}
	if opts.ForceDisposeTextures == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeTextures)
	}
	if opts.NotBoundToMesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NotBoundToMesh)
	}

	n.p.Call("dispose", args...)
}

// NodeMaterialEditOpts contains optional parameters for NodeMaterial.Edit.
type NodeMaterialEditOpts struct {
	Config js.Value
}

// Edit calls the Edit method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#edit
func (n *NodeMaterial) Edit(opts *NodeMaterialEditOpts) *Promise {
	if opts == nil {
		opts = &NodeMaterialEditOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Config == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Config)
	}

	retVal := n.p.Call("edit", args...)
	return PromiseFromJSObject(retVal, n.ctx)
}

// NodeMaterialForceCompilationOpts contains optional parameters for NodeMaterial.ForceCompilation.
type NodeMaterialForceCompilationOpts struct {
	OnCompiled *func()
	Options    js.Value
	OnError    *func()
}

// ForceCompilation calls the ForceCompilation method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#forcecompilation
func (n *NodeMaterial) ForceCompilation(mesh *AbstractMesh, opts *NodeMaterialForceCompilationOpts) {
	if opts == nil {
		opts = &NodeMaterialForceCompilationOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, mesh.JSObject())

	if opts.OnCompiled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnCompiled)
	}
	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}

	n.p.Call("forceCompilation", args...)
}

// NodeMaterialForceCompilationAsyncOpts contains optional parameters for NodeMaterial.ForceCompilationAsync.
type NodeMaterialForceCompilationAsyncOpts struct {
	Options js.Value
}

// ForceCompilationAsync calls the ForceCompilationAsync method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#forcecompilationasync
func (n *NodeMaterial) ForceCompilationAsync(mesh *AbstractMesh, opts *NodeMaterialForceCompilationAsyncOpts) *Promise {
	if opts == nil {
		opts = &NodeMaterialForceCompilationAsyncOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, mesh.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := n.p.Call("forceCompilationAsync", args...)
	return PromiseFromJSObject(retVal, n.ctx)
}

// Freeze calls the Freeze method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#freeze
func (n *NodeMaterial) Freeze() {

	n.p.Call("freeze")
}

// GenerateCode calls the GenerateCode method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#generatecode
func (n *NodeMaterial) GenerateCode() string {

	retVal := n.p.Call("generateCode")
	return retVal.String()
}

// GetActiveTextures calls the GetActiveTextures method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#getactivetextures
func (n *NodeMaterial) GetActiveTextures() *BaseTexture {

	retVal := n.p.Call("getActiveTextures")
	return BaseTextureFromJSObject(retVal, n.ctx)
}

// GetAlphaTestTexture calls the GetAlphaTestTexture method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#getalphatesttexture
func (n *NodeMaterial) GetAlphaTestTexture() *BaseTexture {

	retVal := n.p.Call("getAlphaTestTexture")
	return BaseTextureFromJSObject(retVal, n.ctx)
}

// GetBindedMeshes calls the GetBindedMeshes method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#getbindedmeshes
func (n *NodeMaterial) GetBindedMeshes() *AbstractMesh {

	retVal := n.p.Call("getBindedMeshes")
	return AbstractMeshFromJSObject(retVal, n.ctx)
}

// GetBlockByName calls the GetBlockByName method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#getblockbyname
func (n *NodeMaterial) GetBlockByName(name string) *NodeMaterialBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := n.p.Call("getBlockByName", args...)
	return NodeMaterialBlockFromJSObject(retVal, n.ctx)
}

// GetBlockByPredicate calls the GetBlockByPredicate method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#getblockbypredicate
func (n *NodeMaterial) GetBlockByPredicate(predicate func()) *NodeMaterialBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { predicate(); return nil }))

	retVal := n.p.Call("getBlockByPredicate", args...)
	return NodeMaterialBlockFromJSObject(retVal, n.ctx)
}

// GetClassName calls the GetClassName method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#getclassname
func (n *NodeMaterial) GetClassName() string {

	retVal := n.p.Call("getClassName")
	return retVal.String()
}

// GetEffect calls the GetEffect method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#geteffect
func (n *NodeMaterial) GetEffect() *Effect {

	retVal := n.p.Call("getEffect")
	return EffectFromJSObject(retVal, n.ctx)
}

// GetInputBlockByPredicate calls the GetInputBlockByPredicate method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#getinputblockbypredicate
func (n *NodeMaterial) GetInputBlockByPredicate(predicate func()) *InputBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, js.FuncOf(func(this js.Value, args []js.Value) interface{} { predicate(); return nil }))

	retVal := n.p.Call("getInputBlockByPredicate", args...)
	return InputBlockFromJSObject(retVal, n.ctx)
}

// GetInputBlocks calls the GetInputBlocks method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#getinputblocks
func (n *NodeMaterial) GetInputBlocks() *InputBlock {

	retVal := n.p.Call("getInputBlocks")
	return InputBlockFromJSObject(retVal, n.ctx)
}

// GetScene calls the GetScene method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#getscene
func (n *NodeMaterial) GetScene() *Scene {

	retVal := n.p.Call("getScene")
	return SceneFromJSObject(retVal, n.ctx)
}

// GetTextureBlocks calls the GetTextureBlocks method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#gettextureblocks
func (n *NodeMaterial) GetTextureBlocks() *ReflectionTextureBlock {

	retVal := n.p.Call("getTextureBlocks")
	return ReflectionTextureBlockFromJSObject(retVal, n.ctx)
}

// HasTexture calls the HasTexture method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#hastexture
func (n *NodeMaterial) HasTexture(texture *BaseTexture) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	retVal := n.p.Call("hasTexture", args...)
	return retVal.Bool()
}

// NodeMaterialIsReadyOpts contains optional parameters for NodeMaterial.IsReady.
type NodeMaterialIsReadyOpts struct {
	Mesh         *AbstractMesh
	UseInstances *bool
}

// IsReady calls the IsReady method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#isready
func (n *NodeMaterial) IsReady(opts *NodeMaterialIsReadyOpts) bool {
	if opts == nil {
		opts = &NodeMaterialIsReadyOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}
	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := n.p.Call("isReady", args...)
	return retVal.Bool()
}

// NodeMaterialIsReadyForSubMeshOpts contains optional parameters for NodeMaterial.IsReadyForSubMesh.
type NodeMaterialIsReadyForSubMeshOpts struct {
	UseInstances *bool
}

// IsReadyForSubMesh calls the IsReadyForSubMesh method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#isreadyforsubmesh
func (n *NodeMaterial) IsReadyForSubMesh(mesh *AbstractMesh, subMesh *SubMesh, opts *NodeMaterialIsReadyForSubMeshOpts) bool {
	if opts == nil {
		opts = &NodeMaterialIsReadyForSubMeshOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := n.p.Call("isReadyForSubMesh", args...)
	return retVal.Bool()
}

// LoadAsync calls the LoadAsync method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#loadasync
func (n *NodeMaterial) LoadAsync(url string) *Promise {

	args := make([]interface{}, 0, 1+0)

	args = append(args, url)

	retVal := n.p.Call("loadAsync", args...)
	return PromiseFromJSObject(retVal, n.ctx)
}

// NodeMaterialLoadFromSerializationOpts contains optional parameters for NodeMaterial.LoadFromSerialization.
type NodeMaterialLoadFromSerializationOpts struct {
	RootUrl *string
}

// LoadFromSerialization calls the LoadFromSerialization method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#loadfromserialization
func (n *NodeMaterial) LoadFromSerialization(source interface{}, opts *NodeMaterialLoadFromSerializationOpts) {
	if opts == nil {
		opts = &NodeMaterialLoadFromSerializationOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, source)

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	n.p.Call("loadFromSerialization", args...)
}

// MarkAsDirty calls the MarkAsDirty method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#markasdirty
func (n *NodeMaterial) MarkAsDirty(flag float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, flag)

	n.p.Call("markAsDirty", args...)
}

// MarkDirty calls the MarkDirty method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#markdirty
func (n *NodeMaterial) MarkDirty() {

	n.p.Call("markDirty")
}

// NeedAlphaBlending calls the NeedAlphaBlending method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#needalphablending
func (n *NodeMaterial) NeedAlphaBlending() bool {

	retVal := n.p.Call("needAlphaBlending")
	return retVal.Bool()
}

// NeedAlphaBlendingForMesh calls the NeedAlphaBlendingForMesh method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#needalphablendingformesh
func (n *NodeMaterial) NeedAlphaBlendingForMesh(mesh *AbstractMesh) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	retVal := n.p.Call("needAlphaBlendingForMesh", args...)
	return retVal.Bool()
}

// NeedAlphaTesting calls the NeedAlphaTesting method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#needalphatesting
func (n *NodeMaterial) NeedAlphaTesting() bool {

	retVal := n.p.Call("needAlphaTesting")
	return retVal.Bool()
}

// Optimize calls the Optimize method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#optimize
func (n *NodeMaterial) Optimize() {

	n.p.Call("optimize")
}

// NodeMaterialParseOpts contains optional parameters for NodeMaterial.Parse.
type NodeMaterialParseOpts struct {
	RootUrl *string
}

// Parse calls the Parse method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#parse
func (n *NodeMaterial) Parse(source interface{}, scene *Scene, opts *NodeMaterialParseOpts) *NodeMaterial {
	if opts == nil {
		opts = &NodeMaterialParseOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, source)
	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := n.p.Call("Parse", args...)
	return NodeMaterialFromJSObject(retVal, n.ctx)
}

// RegisterOptimizer calls the RegisterOptimizer method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#registeroptimizer
func (n *NodeMaterial) RegisterOptimizer(optimizer *NodeMaterialOptimizer) *NodeMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, optimizer.JSObject())

	retVal := n.p.Call("registerOptimizer", args...)
	return NodeMaterialFromJSObject(retVal, n.ctx)
}

// RemoveBlock calls the RemoveBlock method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#removeblock
func (n *NodeMaterial) RemoveBlock(block *NodeMaterialBlock) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, block.JSObject())

	n.p.Call("removeBlock", args...)
}

// RemoveOutputNode calls the RemoveOutputNode method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#removeoutputnode
func (n *NodeMaterial) RemoveOutputNode(node *NodeMaterialBlock) *NodeMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, node.JSObject())

	retVal := n.p.Call("removeOutputNode", args...)
	return NodeMaterialFromJSObject(retVal, n.ctx)
}

// Serialize calls the Serialize method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#serialize
func (n *NodeMaterial) Serialize() interface{} {

	retVal := n.p.Call("serialize")
	return retVal
}

// SetToDefault calls the SetToDefault method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#settodefault
func (n *NodeMaterial) SetToDefault() {

	n.p.Call("setToDefault")
}

// NodeMaterialToStringOpts contains optional parameters for NodeMaterial.ToString.
type NodeMaterialToStringOpts struct {
	FullDetails *bool
}

// ToString calls the ToString method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#tostring
func (n *NodeMaterial) ToString(opts *NodeMaterialToStringOpts) string {
	if opts == nil {
		opts = &NodeMaterialToStringOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.FullDetails == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FullDetails)
	}

	retVal := n.p.Call("toString", args...)
	return retVal.String()
}

// Unbind calls the Unbind method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#unbind
func (n *NodeMaterial) Unbind() {

	n.p.Call("unbind")
}

// Unfreeze calls the Unfreeze method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#unfreeze
func (n *NodeMaterial) Unfreeze() {

	n.p.Call("unfreeze")
}

// UnregisterOptimizer calls the UnregisterOptimizer method on the NodeMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#unregisteroptimizer
func (n *NodeMaterial) UnregisterOptimizer(optimizer *NodeMaterialOptimizer) *NodeMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, optimizer.JSObject())

	retVal := n.p.Call("unregisterOptimizer", args...)
	return NodeMaterialFromJSObject(retVal, n.ctx)
}

/*

// AllDirtyFlag returns the AllDirtyFlag property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#alldirtyflag
func (n *NodeMaterial) AllDirtyFlag(AllDirtyFlag float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(AllDirtyFlag)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetAllDirtyFlag sets the AllDirtyFlag property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#alldirtyflag
func (n *NodeMaterial) SetAllDirtyFlag(AllDirtyFlag float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(AllDirtyFlag)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// AllowShaderHotSwapping returns the AllowShaderHotSwapping property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#allowshaderhotswapping
func (n *NodeMaterial) AllowShaderHotSwapping(allowShaderHotSwapping bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(allowShaderHotSwapping)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetAllowShaderHotSwapping sets the AllowShaderHotSwapping property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#allowshaderhotswapping
func (n *NodeMaterial) SetAllowShaderHotSwapping(allowShaderHotSwapping bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(allowShaderHotSwapping)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// Alpha returns the Alpha property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#alpha
func (n *NodeMaterial) Alpha(alpha float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(alpha)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetAlpha sets the Alpha property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#alpha
func (n *NodeMaterial) SetAlpha(alpha float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(alpha)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// AlphaMode returns the AlphaMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#alphamode
func (n *NodeMaterial) AlphaMode(alphaMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(alphaMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetAlphaMode sets the AlphaMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#alphamode
func (n *NodeMaterial) SetAlphaMode(alphaMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(alphaMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// Animations returns the Animations property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#animations
func (n *NodeMaterial) Animations(animations []*Animation) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(animations)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#animations
func (n *NodeMaterial) SetAnimations(animations []*Animation) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(animations)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// AttachedBlocks returns the AttachedBlocks property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#attachedblocks
func (n *NodeMaterial) AttachedBlocks(attachedBlocks *NodeMaterialBlock) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(attachedBlocks.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetAttachedBlocks sets the AttachedBlocks property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#attachedblocks
func (n *NodeMaterial) SetAttachedBlocks(attachedBlocks *NodeMaterialBlock) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(attachedBlocks.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// AttributesDirtyFlag returns the AttributesDirtyFlag property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#attributesdirtyflag
func (n *NodeMaterial) AttributesDirtyFlag(AttributesDirtyFlag float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(AttributesDirtyFlag)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetAttributesDirtyFlag sets the AttributesDirtyFlag property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#attributesdirtyflag
func (n *NodeMaterial) SetAttributesDirtyFlag(AttributesDirtyFlag float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(AttributesDirtyFlag)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// BackFaceCulling returns the BackFaceCulling property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#backfaceculling
func (n *NodeMaterial) BackFaceCulling(backFaceCulling bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(backFaceCulling)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetBackFaceCulling sets the BackFaceCulling property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#backfaceculling
func (n *NodeMaterial) SetBackFaceCulling(backFaceCulling bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(backFaceCulling)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// CheckReadyOnEveryCall returns the CheckReadyOnEveryCall property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#checkreadyoneverycall
func (n *NodeMaterial) CheckReadyOnEveryCall(checkReadyOnEveryCall bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(checkReadyOnEveryCall)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetCheckReadyOnEveryCall sets the CheckReadyOnEveryCall property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#checkreadyoneverycall
func (n *NodeMaterial) SetCheckReadyOnEveryCall(checkReadyOnEveryCall bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(checkReadyOnEveryCall)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// CheckReadyOnlyOnce returns the CheckReadyOnlyOnce property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#checkreadyonlyonce
func (n *NodeMaterial) CheckReadyOnlyOnce(checkReadyOnlyOnce bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(checkReadyOnlyOnce)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetCheckReadyOnlyOnce sets the CheckReadyOnlyOnce property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#checkreadyonlyonce
func (n *NodeMaterial) SetCheckReadyOnlyOnce(checkReadyOnlyOnce bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(checkReadyOnlyOnce)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// ClockWiseSideOrientation returns the ClockWiseSideOrientation property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#clockwisesideorientation
func (n *NodeMaterial) ClockWiseSideOrientation(ClockWiseSideOrientation float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(ClockWiseSideOrientation)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetClockWiseSideOrientation sets the ClockWiseSideOrientation property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#clockwisesideorientation
func (n *NodeMaterial) SetClockWiseSideOrientation(ClockWiseSideOrientation float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(ClockWiseSideOrientation)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// CompiledShaders returns the CompiledShaders property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#compiledshaders
func (n *NodeMaterial) CompiledShaders(compiledShaders string) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(compiledShaders)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetCompiledShaders sets the CompiledShaders property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#compiledshaders
func (n *NodeMaterial) SetCompiledShaders(compiledShaders string) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(compiledShaders)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// CounterClockWiseSideOrientation returns the CounterClockWiseSideOrientation property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#counterclockwisesideorientation
func (n *NodeMaterial) CounterClockWiseSideOrientation(CounterClockWiseSideOrientation float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(CounterClockWiseSideOrientation)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetCounterClockWiseSideOrientation sets the CounterClockWiseSideOrientation property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#counterclockwisesideorientation
func (n *NodeMaterial) SetCounterClockWiseSideOrientation(CounterClockWiseSideOrientation float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(CounterClockWiseSideOrientation)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// DepthFunction returns the DepthFunction property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#depthfunction
func (n *NodeMaterial) DepthFunction(depthFunction float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(depthFunction)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetDepthFunction sets the DepthFunction property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#depthfunction
func (n *NodeMaterial) SetDepthFunction(depthFunction float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(depthFunction)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// DisableDepthWrite returns the DisableDepthWrite property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#disabledepthwrite
func (n *NodeMaterial) DisableDepthWrite(disableDepthWrite bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(disableDepthWrite)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetDisableDepthWrite sets the DisableDepthWrite property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#disabledepthwrite
func (n *NodeMaterial) SetDisableDepthWrite(disableDepthWrite bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(disableDepthWrite)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// DoNotSerialize returns the DoNotSerialize property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#donotserialize
func (n *NodeMaterial) DoNotSerialize(doNotSerialize bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(doNotSerialize)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetDoNotSerialize sets the DoNotSerialize property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#donotserialize
func (n *NodeMaterial) SetDoNotSerialize(doNotSerialize bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(doNotSerialize)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// EditorData returns the EditorData property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#editordata
func (n *NodeMaterial) EditorData(editorData interface{}) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(editorData)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetEditorData sets the EditorData property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#editordata
func (n *NodeMaterial) SetEditorData(editorData interface{}) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(editorData)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// EditorURL returns the EditorURL property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#editorurl
func (n *NodeMaterial) EditorURL(EditorURL string) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(EditorURL)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetEditorURL sets the EditorURL property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#editorurl
func (n *NodeMaterial) SetEditorURL(EditorURL string) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(EditorURL)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// FillMode returns the FillMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#fillmode
func (n *NodeMaterial) FillMode(fillMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(fillMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetFillMode sets the FillMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#fillmode
func (n *NodeMaterial) SetFillMode(fillMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(fillMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// FogEnabled returns the FogEnabled property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#fogenabled
func (n *NodeMaterial) FogEnabled(fogEnabled bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(fogEnabled)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetFogEnabled sets the FogEnabled property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#fogenabled
func (n *NodeMaterial) SetFogEnabled(fogEnabled bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(fogEnabled)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// ForceDepthWrite returns the ForceDepthWrite property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#forcedepthwrite
func (n *NodeMaterial) ForceDepthWrite(forceDepthWrite bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(forceDepthWrite)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetForceDepthWrite sets the ForceDepthWrite property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#forcedepthwrite
func (n *NodeMaterial) SetForceDepthWrite(forceDepthWrite bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(forceDepthWrite)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// FresnelDirtyFlag returns the FresnelDirtyFlag property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#fresneldirtyflag
func (n *NodeMaterial) FresnelDirtyFlag(FresnelDirtyFlag float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(FresnelDirtyFlag)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetFresnelDirtyFlag sets the FresnelDirtyFlag property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#fresneldirtyflag
func (n *NodeMaterial) SetFresnelDirtyFlag(FresnelDirtyFlag float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(FresnelDirtyFlag)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// GetRenderTargetTextures returns the GetRenderTargetTextures property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#getrendertargettextures
func (n *NodeMaterial) GetRenderTargetTextures(getRenderTargetTextures func()) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {getRenderTargetTextures(); return nil}))
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetGetRenderTargetTextures sets the GetRenderTargetTextures property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#getrendertargettextures
func (n *NodeMaterial) SetGetRenderTargetTextures(getRenderTargetTextures func()) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {getRenderTargetTextures(); return nil}))
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// HasRenderTargetTextures returns the HasRenderTargetTextures property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#hasrendertargettextures
func (n *NodeMaterial) HasRenderTargetTextures(hasRenderTargetTextures bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(hasRenderTargetTextures)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetHasRenderTargetTextures sets the HasRenderTargetTextures property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#hasrendertargettextures
func (n *NodeMaterial) SetHasRenderTargetTextures(hasRenderTargetTextures bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(hasRenderTargetTextures)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// Id returns the Id property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#id
func (n *NodeMaterial) Id(id string) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(id)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetId sets the Id property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#id
func (n *NodeMaterial) SetId(id string) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(id)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// IgnoreAlpha returns the IgnoreAlpha property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#ignorealpha
func (n *NodeMaterial) IgnoreAlpha(ignoreAlpha bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(ignoreAlpha)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetIgnoreAlpha sets the IgnoreAlpha property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#ignorealpha
func (n *NodeMaterial) SetIgnoreAlpha(ignoreAlpha bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(ignoreAlpha)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// ImageProcessingConfiguration returns the ImageProcessingConfiguration property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#imageprocessingconfiguration
func (n *NodeMaterial) ImageProcessingConfiguration(imageProcessingConfiguration *ImageProcessingConfiguration) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(imageProcessingConfiguration.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetImageProcessingConfiguration sets the ImageProcessingConfiguration property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#imageprocessingconfiguration
func (n *NodeMaterial) SetImageProcessingConfiguration(imageProcessingConfiguration *ImageProcessingConfiguration) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(imageProcessingConfiguration.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#inspectablecustomproperties
func (n *NodeMaterial) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(inspectableCustomProperties.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#inspectablecustomproperties
func (n *NodeMaterial) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(inspectableCustomProperties.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// IsFrozen returns the IsFrozen property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#isfrozen
func (n *NodeMaterial) IsFrozen(isFrozen bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(isFrozen)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetIsFrozen sets the IsFrozen property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#isfrozen
func (n *NodeMaterial) SetIsFrozen(isFrozen bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(isFrozen)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// LightDirtyFlag returns the LightDirtyFlag property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#lightdirtyflag
func (n *NodeMaterial) LightDirtyFlag(LightDirtyFlag float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(LightDirtyFlag)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetLightDirtyFlag sets the LightDirtyFlag property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#lightdirtyflag
func (n *NodeMaterial) SetLightDirtyFlag(LightDirtyFlag float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(LightDirtyFlag)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// LineListDrawMode returns the LineListDrawMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#linelistdrawmode
func (n *NodeMaterial) LineListDrawMode(LineListDrawMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(LineListDrawMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetLineListDrawMode sets the LineListDrawMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#linelistdrawmode
func (n *NodeMaterial) SetLineListDrawMode(LineListDrawMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(LineListDrawMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// LineLoopDrawMode returns the LineLoopDrawMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#lineloopdrawmode
func (n *NodeMaterial) LineLoopDrawMode(LineLoopDrawMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(LineLoopDrawMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetLineLoopDrawMode sets the LineLoopDrawMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#lineloopdrawmode
func (n *NodeMaterial) SetLineLoopDrawMode(LineLoopDrawMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(LineLoopDrawMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// LineStripDrawMode returns the LineStripDrawMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#linestripdrawmode
func (n *NodeMaterial) LineStripDrawMode(LineStripDrawMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(LineStripDrawMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetLineStripDrawMode sets the LineStripDrawMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#linestripdrawmode
func (n *NodeMaterial) SetLineStripDrawMode(LineStripDrawMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(LineStripDrawMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// MaxSimultaneousLights returns the MaxSimultaneousLights property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#maxsimultaneouslights
func (n *NodeMaterial) MaxSimultaneousLights(maxSimultaneousLights float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(maxSimultaneousLights)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetMaxSimultaneousLights sets the MaxSimultaneousLights property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#maxsimultaneouslights
func (n *NodeMaterial) SetMaxSimultaneousLights(maxSimultaneousLights float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(maxSimultaneousLights)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#metadata
func (n *NodeMaterial) Metadata(metadata interface{}) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(metadata)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#metadata
func (n *NodeMaterial) SetMetadata(metadata interface{}) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(metadata)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// MiscDirtyFlag returns the MiscDirtyFlag property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#miscdirtyflag
func (n *NodeMaterial) MiscDirtyFlag(MiscDirtyFlag float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(MiscDirtyFlag)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetMiscDirtyFlag sets the MiscDirtyFlag property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#miscdirtyflag
func (n *NodeMaterial) SetMiscDirtyFlag(MiscDirtyFlag float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(MiscDirtyFlag)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#name
func (n *NodeMaterial) Name(name string) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(name)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#name
func (n *NodeMaterial) SetName(name string) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(name)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// NeedDepthPrePass returns the NeedDepthPrePass property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#needdepthprepass
func (n *NodeMaterial) NeedDepthPrePass(needDepthPrePass bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(needDepthPrePass)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetNeedDepthPrePass sets the NeedDepthPrePass property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#needdepthprepass
func (n *NodeMaterial) SetNeedDepthPrePass(needDepthPrePass bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(needDepthPrePass)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// OnBind returns the OnBind property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#onbind
func (n *NodeMaterial) OnBind(onBind func()) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onBind(); return nil}))
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetOnBind sets the OnBind property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#onbind
func (n *NodeMaterial) SetOnBind(onBind func()) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onBind(); return nil}))
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// OnBindObservable returns the OnBindObservable property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#onbindobservable
func (n *NodeMaterial) OnBindObservable(onBindObservable *Observable) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(onBindObservable.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetOnBindObservable sets the OnBindObservable property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#onbindobservable
func (n *NodeMaterial) SetOnBindObservable(onBindObservable *Observable) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(onBindObservable.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// OnBuildObservable returns the OnBuildObservable property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#onbuildobservable
func (n *NodeMaterial) OnBuildObservable(onBuildObservable *Observable) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(onBuildObservable.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetOnBuildObservable sets the OnBuildObservable property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#onbuildobservable
func (n *NodeMaterial) SetOnBuildObservable(onBuildObservable *Observable) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(onBuildObservable.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// OnCompiled returns the OnCompiled property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#oncompiled
func (n *NodeMaterial) OnCompiled(onCompiled func()) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onCompiled(); return nil}))
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetOnCompiled sets the OnCompiled property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#oncompiled
func (n *NodeMaterial) SetOnCompiled(onCompiled func()) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onCompiled(); return nil}))
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#ondispose
func (n *NodeMaterial) OnDispose(onDispose func()) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#ondispose
func (n *NodeMaterial) SetOnDispose(onDispose func()) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onDispose(); return nil}))
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#ondisposeobservable
func (n *NodeMaterial) OnDisposeObservable(onDisposeObservable *Observable) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(onDisposeObservable.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#ondisposeobservable
func (n *NodeMaterial) SetOnDisposeObservable(onDisposeObservable *Observable) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(onDisposeObservable.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// OnError returns the OnError property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#onerror
func (n *NodeMaterial) OnError(onError func()) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onError(); return nil}))
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetOnError sets the OnError property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#onerror
func (n *NodeMaterial) SetOnError(onError func()) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onError(); return nil}))
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// OnUnBindObservable returns the OnUnBindObservable property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#onunbindobservable
func (n *NodeMaterial) OnUnBindObservable(onUnBindObservable *Observable) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(onUnBindObservable.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetOnUnBindObservable sets the OnUnBindObservable property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#onunbindobservable
func (n *NodeMaterial) SetOnUnBindObservable(onUnBindObservable *Observable) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(onUnBindObservable.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// Options returns the Options property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#options
func (n *NodeMaterial) Options(options js.Value) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(options)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetOptions sets the Options property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#options
func (n *NodeMaterial) SetOptions(options js.Value) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(options)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// PointFillMode returns the PointFillMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#pointfillmode
func (n *NodeMaterial) PointFillMode(PointFillMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(PointFillMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetPointFillMode sets the PointFillMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#pointfillmode
func (n *NodeMaterial) SetPointFillMode(PointFillMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(PointFillMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// PointListDrawMode returns the PointListDrawMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#pointlistdrawmode
func (n *NodeMaterial) PointListDrawMode(PointListDrawMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(PointListDrawMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetPointListDrawMode sets the PointListDrawMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#pointlistdrawmode
func (n *NodeMaterial) SetPointListDrawMode(PointListDrawMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(PointListDrawMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// PointSize returns the PointSize property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#pointsize
func (n *NodeMaterial) PointSize(pointSize float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(pointSize)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetPointSize sets the PointSize property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#pointsize
func (n *NodeMaterial) SetPointSize(pointSize float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(pointSize)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// PointsCloud returns the PointsCloud property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#pointscloud
func (n *NodeMaterial) PointsCloud(pointsCloud bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(pointsCloud)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetPointsCloud sets the PointsCloud property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#pointscloud
func (n *NodeMaterial) SetPointsCloud(pointsCloud bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(pointsCloud)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#reserveddatastore
func (n *NodeMaterial) ReservedDataStore(reservedDataStore interface{}) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(reservedDataStore)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#reserveddatastore
func (n *NodeMaterial) SetReservedDataStore(reservedDataStore interface{}) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(reservedDataStore)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SeparateCullingPass returns the SeparateCullingPass property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#separatecullingpass
func (n *NodeMaterial) SeparateCullingPass(separateCullingPass bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(separateCullingPass)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetSeparateCullingPass sets the SeparateCullingPass property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#separatecullingpass
func (n *NodeMaterial) SetSeparateCullingPass(separateCullingPass bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(separateCullingPass)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SideOrientation returns the SideOrientation property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#sideorientation
func (n *NodeMaterial) SideOrientation(sideOrientation float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(sideOrientation)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetSideOrientation sets the SideOrientation property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#sideorientation
func (n *NodeMaterial) SetSideOrientation(sideOrientation float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(sideOrientation)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// State returns the State property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#state
func (n *NodeMaterial) State(state string) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(state)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetState sets the State property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#state
func (n *NodeMaterial) SetState(state string) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(state)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// TextureDirtyFlag returns the TextureDirtyFlag property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#texturedirtyflag
func (n *NodeMaterial) TextureDirtyFlag(TextureDirtyFlag float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(TextureDirtyFlag)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetTextureDirtyFlag sets the TextureDirtyFlag property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#texturedirtyflag
func (n *NodeMaterial) SetTextureDirtyFlag(TextureDirtyFlag float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(TextureDirtyFlag)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// TriangleFanDrawMode returns the TriangleFanDrawMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#trianglefandrawmode
func (n *NodeMaterial) TriangleFanDrawMode(TriangleFanDrawMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(TriangleFanDrawMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetTriangleFanDrawMode sets the TriangleFanDrawMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#trianglefandrawmode
func (n *NodeMaterial) SetTriangleFanDrawMode(TriangleFanDrawMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(TriangleFanDrawMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// TriangleFillMode returns the TriangleFillMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#trianglefillmode
func (n *NodeMaterial) TriangleFillMode(TriangleFillMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(TriangleFillMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetTriangleFillMode sets the TriangleFillMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#trianglefillmode
func (n *NodeMaterial) SetTriangleFillMode(TriangleFillMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(TriangleFillMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// TriangleStripDrawMode returns the TriangleStripDrawMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#trianglestripdrawmode
func (n *NodeMaterial) TriangleStripDrawMode(TriangleStripDrawMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(TriangleStripDrawMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetTriangleStripDrawMode sets the TriangleStripDrawMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#trianglestripdrawmode
func (n *NodeMaterial) SetTriangleStripDrawMode(TriangleStripDrawMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(TriangleStripDrawMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#uniqueid
func (n *NodeMaterial) UniqueId(uniqueId float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(uniqueId)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#uniqueid
func (n *NodeMaterial) SetUniqueId(uniqueId float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(uniqueId)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// WireFrameFillMode returns the WireFrameFillMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#wireframefillmode
func (n *NodeMaterial) WireFrameFillMode(WireFrameFillMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(WireFrameFillMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetWireFrameFillMode sets the WireFrameFillMode property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#wireframefillmode
func (n *NodeMaterial) SetWireFrameFillMode(WireFrameFillMode float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(WireFrameFillMode)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// Wireframe returns the Wireframe property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#wireframe
func (n *NodeMaterial) Wireframe(wireframe bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(wireframe)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetWireframe sets the Wireframe property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#wireframe
func (n *NodeMaterial) SetWireframe(wireframe bool) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(wireframe)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// ZOffset returns the ZOffset property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#zoffset
func (n *NodeMaterial) ZOffset(zOffset float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(zOffset)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// SetZOffset sets the ZOffset property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#zoffset
func (n *NodeMaterial) SetZOffset(zOffset float64) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(zOffset)
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// _fragmentOutputNodes returns the _fragmentOutputNodes property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#_fragmentoutputnodes
func (n *NodeMaterial) _fragmentOutputNodes(_fragmentOutputNodes *NodeMaterialBlock) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(_fragmentOutputNodes.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// Set_fragmentOutputNodes sets the _fragmentOutputNodes property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#_fragmentoutputnodes
func (n *NodeMaterial) Set_fragmentOutputNodes(_fragmentOutputNodes *NodeMaterialBlock) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(_fragmentOutputNodes.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// _vertexOutputNodes returns the _vertexOutputNodes property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#_vertexoutputnodes
func (n *NodeMaterial) _vertexOutputNodes(_vertexOutputNodes *NodeMaterialBlock) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(_vertexOutputNodes.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

// Set_vertexOutputNodes sets the _vertexOutputNodes property of class NodeMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerial#_vertexoutputnodes
func (n *NodeMaterial) Set_vertexOutputNodes(_vertexOutputNodes *NodeMaterialBlock) *NodeMaterial {
	p := ba.ctx.Get("NodeMaterial").New(_vertexOutputNodes.JSObject())
	return NodeMaterialFromJSObject(p, ba.ctx)
}

*/
