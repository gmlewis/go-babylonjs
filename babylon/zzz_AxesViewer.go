// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// AxesViewer represents a babylon.js AxesViewer.
// The Axes viewer will show 3 axes in a specific point in space
type AxesViewer struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (a *AxesViewer) JSObject() js.Value { return a.p }

// AxesViewer returns a AxesViewer JavaScript class.
func (ba *Babylon) AxesViewer() *AxesViewer {
	p := ba.ctx.Get("AxesViewer")
	return AxesViewerFromJSObject(p, ba.ctx)
}

// AxesViewerFromJSObject returns a wrapped AxesViewer JavaScript class.
func AxesViewerFromJSObject(p js.Value, ctx js.Value) *AxesViewer {
	return &AxesViewer{p: p, ctx: ctx}
}

// AxesViewerArrayToJSArray returns a JavaScript Array for the wrapped array.
func AxesViewerArrayToJSArray(array []*AxesViewer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewAxesViewerOpts contains optional parameters for NewAxesViewer.
type NewAxesViewerOpts struct {
	ScaleLines       *float64
	RenderingGroupId *float64
	XAxis            *TransformNode
	YAxis            *TransformNode
	ZAxis            *TransformNode
}

// NewAxesViewer returns a new AxesViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.axesviewer
func (ba *Babylon) NewAxesViewer(scene *Scene, opts *NewAxesViewerOpts) *AxesViewer {
	if opts == nil {
		opts = &NewAxesViewerOpts{}
	}

	args := make([]interface{}, 0, 1+5)

	args = append(args, scene.JSObject())

	if opts.ScaleLines == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ScaleLines)
	}
	if opts.RenderingGroupId == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RenderingGroupId)
	}
	if opts.XAxis == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.XAxis.JSObject())
	}
	if opts.YAxis == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.YAxis.JSObject())
	}
	if opts.ZAxis == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ZAxis.JSObject())
	}

	p := ba.ctx.Get("AxesViewer").New(args...)
	return AxesViewerFromJSObject(p, ba.ctx)
}

// CreateInstance calls the CreateInstance method on the AxesViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.axesviewer#createinstance
func (a *AxesViewer) CreateInstance() *AxesViewer {

	retVal := a.p.Call("createInstance")
	return AxesViewerFromJSObject(retVal, a.ctx)
}

// Dispose calls the Dispose method on the AxesViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.axesviewer#dispose
func (a *AxesViewer) Dispose() {

	a.p.Call("dispose")
}

// Update calls the Update method on the AxesViewer object.
//
// https://doc.babylonjs.com/api/classes/babylon.axesviewer#update
func (a *AxesViewer) Update(position *Vector3, xaxis *Vector3, yaxis *Vector3, zaxis *Vector3) {

	args := make([]interface{}, 0, 4+0)

	if position == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, position.JSObject())
	}

	if xaxis == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, xaxis.JSObject())
	}

	if yaxis == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, yaxis.JSObject())
	}

	if zaxis == nil {
		args = append(args, js.Null())
	} else {
		args = append(args, zaxis.JSObject())
	}

	a.p.Call("update", args...)
}

// ScaleLines returns the ScaleLines property of class AxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.axesviewer#scalelines
func (a *AxesViewer) ScaleLines() float64 {
	retVal := a.p.Get("scaleLines")
	return retVal.Float()
}

// SetScaleLines sets the ScaleLines property of class AxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.axesviewer#scalelines
func (a *AxesViewer) SetScaleLines(scaleLines float64) *AxesViewer {
	a.p.Set("scaleLines", scaleLines)
	return a
}

// Scene returns the Scene property of class AxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.axesviewer#scene
func (a *AxesViewer) Scene() *Scene {
	retVal := a.p.Get("scene")
	return SceneFromJSObject(retVal, a.ctx)
}

// SetScene sets the Scene property of class AxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.axesviewer#scene
func (a *AxesViewer) SetScene(scene *Scene) *AxesViewer {
	a.p.Set("scene", scene.JSObject())
	return a
}

// XAxis returns the XAxis property of class AxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.axesviewer#xaxis
func (a *AxesViewer) XAxis() *TransformNode {
	retVal := a.p.Get("xAxis")
	return TransformNodeFromJSObject(retVal, a.ctx)
}

// SetXAxis sets the XAxis property of class AxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.axesviewer#xaxis
func (a *AxesViewer) SetXAxis(xAxis *TransformNode) *AxesViewer {
	a.p.Set("xAxis", xAxis.JSObject())
	return a
}

// YAxis returns the YAxis property of class AxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.axesviewer#yaxis
func (a *AxesViewer) YAxis() *TransformNode {
	retVal := a.p.Get("yAxis")
	return TransformNodeFromJSObject(retVal, a.ctx)
}

// SetYAxis sets the YAxis property of class AxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.axesviewer#yaxis
func (a *AxesViewer) SetYAxis(yAxis *TransformNode) *AxesViewer {
	a.p.Set("yAxis", yAxis.JSObject())
	return a
}

// ZAxis returns the ZAxis property of class AxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.axesviewer#zaxis
func (a *AxesViewer) ZAxis() *TransformNode {
	retVal := a.p.Get("zAxis")
	return TransformNodeFromJSObject(retVal, a.ctx)
}

// SetZAxis sets the ZAxis property of class AxesViewer.
//
// https://doc.babylonjs.com/api/classes/babylon.axesviewer#zaxis
func (a *AxesViewer) SetZAxis(zAxis *TransformNode) *AxesViewer {
	a.p.Set("zAxis", zAxis.JSObject())
	return a
}
