// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SkyMaterial represents a babylon.js SkyMaterial.
// This is the sky material which allows to create dynamic and texture free effects for skyboxes.
//
// See: https://doc.babylonjs.com/extensions/sky
type SkyMaterial struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SkyMaterial) JSObject() js.Value { return s.p }

// SkyMaterial returns a SkyMaterial JavaScript class.
func (ba *Babylon) SkyMaterial() *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial")
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SkyMaterialFromJSObject returns a wrapped SkyMaterial JavaScript class.
func SkyMaterialFromJSObject(p js.Value, ctx js.Value) *SkyMaterial {
	return &SkyMaterial{p: p, ctx: ctx}
}

// NewSkyMaterial returns a new SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial
func (ba *Babylon) NewSkyMaterial(name string, scene *Scene) *SkyMaterial {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("SkyMaterial").New(args...)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SkyMaterialBindOpts contains optional parameters for SkyMaterial.Bind.
type SkyMaterialBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#bind
func (s *SkyMaterial) Bind(world *Matrix, opts *SkyMaterialBindOpts) {
	if opts == nil {
		opts = &SkyMaterialBindOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, world.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	s.p.Call("bind", args...)
}

// BindForSubMesh calls the BindForSubMesh method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#bindforsubmesh
func (s *SkyMaterial) BindForSubMesh(world *Matrix, mesh *Mesh, subMesh *SubMesh) {

	args := make([]interface{}, 0, 3+0)

	args = append(args, world.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	s.p.Call("bindForSubMesh", args...)
}

// BindOnlyNormalMatrix calls the BindOnlyNormalMatrix method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#bindonlynormalmatrix
func (s *SkyMaterial) BindOnlyNormalMatrix(normalMatrix *Matrix) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, normalMatrix.JSObject())

	s.p.Call("bindOnlyNormalMatrix", args...)
}

// BindOnlyWorldMatrix calls the BindOnlyWorldMatrix method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#bindonlyworldmatrix
func (s *SkyMaterial) BindOnlyWorldMatrix(world *Matrix) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, world.JSObject())

	s.p.Call("bindOnlyWorldMatrix", args...)
}

// BindSceneUniformBuffer calls the BindSceneUniformBuffer method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#bindsceneuniformbuffer
func (s *SkyMaterial) BindSceneUniformBuffer(effect *Effect, sceneUbo *UniformBuffer) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, sceneUbo.JSObject())

	s.p.Call("bindSceneUniformBuffer", args...)
}

// BindView calls the BindView method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#bindview
func (s *SkyMaterial) BindView(effect *Effect) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, effect.JSObject())

	s.p.Call("bindView", args...)
}

// BindViewProjection calls the BindViewProjection method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#bindviewprojection
func (s *SkyMaterial) BindViewProjection(effect *Effect) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, effect.JSObject())

	s.p.Call("bindViewProjection", args...)
}

// Clone calls the Clone method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#clone
func (s *SkyMaterial) Clone(name string) *SkyMaterial {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := s.p.Call("clone", args...)
	return SkyMaterialFromJSObject(retVal, s.ctx)
}

// SkyMaterialDisposeOpts contains optional parameters for SkyMaterial.Dispose.
type SkyMaterialDisposeOpts struct {
	ForceDisposeEffect *bool
}

// Dispose calls the Dispose method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#dispose
func (s *SkyMaterial) Dispose(opts *SkyMaterialDisposeOpts) {
	if opts == nil {
		opts = &SkyMaterialDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForceDisposeEffect == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDisposeEffect)
	}

	s.p.Call("dispose", args...)
}

// SkyMaterialForceCompilationOpts contains optional parameters for SkyMaterial.ForceCompilation.
type SkyMaterialForceCompilationOpts struct {
	OnCompiled *func()
	Options    js.Value
	OnError    *func()
}

// ForceCompilation calls the ForceCompilation method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#forcecompilation
func (s *SkyMaterial) ForceCompilation(mesh *AbstractMesh, opts *SkyMaterialForceCompilationOpts) {
	if opts == nil {
		opts = &SkyMaterialForceCompilationOpts{}
	}

	args := make([]interface{}, 0, 1+3)

	args = append(args, mesh.JSObject())

	if opts.OnCompiled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnCompiled)
	}
	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}

	s.p.Call("forceCompilation", args...)
}

// SkyMaterialForceCompilationAsyncOpts contains optional parameters for SkyMaterial.ForceCompilationAsync.
type SkyMaterialForceCompilationAsyncOpts struct {
	Options js.Value
}

// ForceCompilationAsync calls the ForceCompilationAsync method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#forcecompilationasync
func (s *SkyMaterial) ForceCompilationAsync(mesh *AbstractMesh, opts *SkyMaterialForceCompilationAsyncOpts) {
	if opts == nil {
		opts = &SkyMaterialForceCompilationAsyncOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, mesh.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	s.p.Call("forceCompilationAsync", args...)
}

// Freeze calls the Freeze method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#freeze
func (s *SkyMaterial) Freeze() {

	args := make([]interface{}, 0, 0+0)

	s.p.Call("freeze", args...)
}

// GetActiveTextures calls the GetActiveTextures method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#getactivetextures
func (s *SkyMaterial) GetActiveTextures() *BaseTexture {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("getActiveTextures", args...)
	return BaseTextureFromJSObject(retVal, s.ctx)
}

// GetAlphaTestTexture calls the GetAlphaTestTexture method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#getalphatesttexture
func (s *SkyMaterial) GetAlphaTestTexture() *BaseTexture {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("getAlphaTestTexture", args...)
	return BaseTextureFromJSObject(retVal, s.ctx)
}

// GetAnimatables calls the GetAnimatables method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#getanimatables
func (s *SkyMaterial) GetAnimatables() js.Value {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("getAnimatables", args...)
	return retVal
}

// GetBindedMeshes calls the GetBindedMeshes method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#getbindedmeshes
func (s *SkyMaterial) GetBindedMeshes() *AbstractMesh {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("getBindedMeshes", args...)
	return AbstractMeshFromJSObject(retVal, s.ctx)
}

// GetClassName calls the GetClassName method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#getclassname
func (s *SkyMaterial) GetClassName() string {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("getClassName", args...)
	return retVal.String()
}

// GetEffect calls the GetEffect method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#geteffect
func (s *SkyMaterial) GetEffect() *Effect {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("getEffect", args...)
	return EffectFromJSObject(retVal, s.ctx)
}

// GetScene calls the GetScene method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#getscene
func (s *SkyMaterial) GetScene() *Scene {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("getScene", args...)
	return SceneFromJSObject(retVal, s.ctx)
}

// HasTexture calls the HasTexture method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#hastexture
func (s *SkyMaterial) HasTexture(texture *BaseTexture) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, texture.JSObject())

	retVal := s.p.Call("hasTexture", args...)
	return retVal.Bool()
}

// SkyMaterialIsReadyOpts contains optional parameters for SkyMaterial.IsReady.
type SkyMaterialIsReadyOpts struct {
	Mesh         *AbstractMesh
	UseInstances *bool
}

// IsReady calls the IsReady method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#isready
func (s *SkyMaterial) IsReady(opts *SkyMaterialIsReadyOpts) bool {
	if opts == nil {
		opts = &SkyMaterialIsReadyOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}
	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := s.p.Call("isReady", args...)
	return retVal.Bool()
}

// SkyMaterialIsReadyForSubMeshOpts contains optional parameters for SkyMaterial.IsReadyForSubMesh.
type SkyMaterialIsReadyForSubMeshOpts struct {
	UseInstances *bool
}

// IsReadyForSubMesh calls the IsReadyForSubMesh method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#isreadyforsubmesh
func (s *SkyMaterial) IsReadyForSubMesh(mesh *AbstractMesh, subMesh *SubMesh, opts *SkyMaterialIsReadyForSubMeshOpts) bool {
	if opts == nil {
		opts = &SkyMaterialIsReadyForSubMeshOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, mesh.JSObject())
	args = append(args, subMesh.JSObject())

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := s.p.Call("isReadyForSubMesh", args...)
	return retVal.Bool()
}

// MarkAsDirty calls the MarkAsDirty method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#markasdirty
func (s *SkyMaterial) MarkAsDirty(flag float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, flag)

	s.p.Call("markAsDirty", args...)
}

// MarkDirty calls the MarkDirty method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#markdirty
func (s *SkyMaterial) MarkDirty() {

	args := make([]interface{}, 0, 0+0)

	s.p.Call("markDirty", args...)
}

// NeedAlphaBlending calls the NeedAlphaBlending method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#needalphablending
func (s *SkyMaterial) NeedAlphaBlending() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("needAlphaBlending", args...)
	return retVal.Bool()
}

// NeedAlphaBlendingForMesh calls the NeedAlphaBlendingForMesh method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#needalphablendingformesh
func (s *SkyMaterial) NeedAlphaBlendingForMesh(mesh *AbstractMesh) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	retVal := s.p.Call("needAlphaBlendingForMesh", args...)
	return retVal.Bool()
}

// NeedAlphaTesting calls the NeedAlphaTesting method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#needalphatesting
func (s *SkyMaterial) NeedAlphaTesting() bool {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("needAlphaTesting", args...)
	return retVal.Bool()
}

// Parse calls the Parse method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#parse
func (s *SkyMaterial) Parse(source interface{}, scene *Scene, rootUrl string) *SkyMaterial {

	args := make([]interface{}, 0, 3+0)

	args = append(args, source)
	args = append(args, scene.JSObject())
	args = append(args, rootUrl)

	retVal := s.p.Call("Parse", args...)
	return SkyMaterialFromJSObject(retVal, s.ctx)
}

// Serialize calls the Serialize method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#serialize
func (s *SkyMaterial) Serialize() interface{} {

	args := make([]interface{}, 0, 0+0)

	retVal := s.p.Call("serialize", args...)
	return retVal
}

// SkyMaterialToStringOpts contains optional parameters for SkyMaterial.ToString.
type SkyMaterialToStringOpts struct {
	FullDetails *bool
}

// ToString calls the ToString method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#tostring
func (s *SkyMaterial) ToString(opts *SkyMaterialToStringOpts) string {
	if opts == nil {
		opts = &SkyMaterialToStringOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.FullDetails == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FullDetails)
	}

	retVal := s.p.Call("toString", args...)
	return retVal.String()
}

// Unbind calls the Unbind method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#unbind
func (s *SkyMaterial) Unbind() {

	args := make([]interface{}, 0, 0+0)

	s.p.Call("unbind", args...)
}

// Unfreeze calls the Unfreeze method on the SkyMaterial object.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#unfreeze
func (s *SkyMaterial) Unfreeze() {

	args := make([]interface{}, 0, 0+0)

	s.p.Call("unfreeze", args...)
}

/*

// AllDirtyFlag returns the AllDirtyFlag property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#alldirtyflag
func (s *SkyMaterial) AllDirtyFlag(AllDirtyFlag float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(AllDirtyFlag)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetAllDirtyFlag sets the AllDirtyFlag property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#alldirtyflag
func (s *SkyMaterial) SetAllDirtyFlag(AllDirtyFlag float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(AllDirtyFlag)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// AllowShaderHotSwapping returns the AllowShaderHotSwapping property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#allowshaderhotswapping
func (s *SkyMaterial) AllowShaderHotSwapping(allowShaderHotSwapping bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(allowShaderHotSwapping)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetAllowShaderHotSwapping sets the AllowShaderHotSwapping property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#allowshaderhotswapping
func (s *SkyMaterial) SetAllowShaderHotSwapping(allowShaderHotSwapping bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(allowShaderHotSwapping)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// Alpha returns the Alpha property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#alpha
func (s *SkyMaterial) Alpha(alpha float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(alpha)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetAlpha sets the Alpha property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#alpha
func (s *SkyMaterial) SetAlpha(alpha float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(alpha)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// AlphaMode returns the AlphaMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#alphamode
func (s *SkyMaterial) AlphaMode(alphaMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(alphaMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetAlphaMode sets the AlphaMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#alphamode
func (s *SkyMaterial) SetAlphaMode(alphaMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(alphaMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// Animations returns the Animations property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#animations
func (s *SkyMaterial) Animations(animations []Animation) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(animations.JSObject())
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#animations
func (s *SkyMaterial) SetAnimations(animations []Animation) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(animations.JSObject())
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// AttributesDirtyFlag returns the AttributesDirtyFlag property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#attributesdirtyflag
func (s *SkyMaterial) AttributesDirtyFlag(AttributesDirtyFlag float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(AttributesDirtyFlag)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetAttributesDirtyFlag sets the AttributesDirtyFlag property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#attributesdirtyflag
func (s *SkyMaterial) SetAttributesDirtyFlag(AttributesDirtyFlag float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(AttributesDirtyFlag)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// Azimuth returns the Azimuth property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#azimuth
func (s *SkyMaterial) Azimuth(azimuth float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(azimuth)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetAzimuth sets the Azimuth property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#azimuth
func (s *SkyMaterial) SetAzimuth(azimuth float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(azimuth)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// BackFaceCulling returns the BackFaceCulling property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#backfaceculling
func (s *SkyMaterial) BackFaceCulling(backFaceCulling bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(backFaceCulling)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetBackFaceCulling sets the BackFaceCulling property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#backfaceculling
func (s *SkyMaterial) SetBackFaceCulling(backFaceCulling bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(backFaceCulling)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// CameraOffset returns the CameraOffset property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#cameraoffset
func (s *SkyMaterial) CameraOffset(cameraOffset *Vector3) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(cameraOffset.JSObject())
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetCameraOffset sets the CameraOffset property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#cameraoffset
func (s *SkyMaterial) SetCameraOffset(cameraOffset *Vector3) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(cameraOffset.JSObject())
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// CheckReadyOnEveryCall returns the CheckReadyOnEveryCall property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#checkreadyoneverycall
func (s *SkyMaterial) CheckReadyOnEveryCall(checkReadyOnEveryCall bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(checkReadyOnEveryCall)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetCheckReadyOnEveryCall sets the CheckReadyOnEveryCall property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#checkreadyoneverycall
func (s *SkyMaterial) SetCheckReadyOnEveryCall(checkReadyOnEveryCall bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(checkReadyOnEveryCall)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// CheckReadyOnlyOnce returns the CheckReadyOnlyOnce property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#checkreadyonlyonce
func (s *SkyMaterial) CheckReadyOnlyOnce(checkReadyOnlyOnce bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(checkReadyOnlyOnce)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetCheckReadyOnlyOnce sets the CheckReadyOnlyOnce property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#checkreadyonlyonce
func (s *SkyMaterial) SetCheckReadyOnlyOnce(checkReadyOnlyOnce bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(checkReadyOnlyOnce)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// ClockWiseSideOrientation returns the ClockWiseSideOrientation property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#clockwisesideorientation
func (s *SkyMaterial) ClockWiseSideOrientation(ClockWiseSideOrientation float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(ClockWiseSideOrientation)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetClockWiseSideOrientation sets the ClockWiseSideOrientation property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#clockwisesideorientation
func (s *SkyMaterial) SetClockWiseSideOrientation(ClockWiseSideOrientation float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(ClockWiseSideOrientation)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// CounterClockWiseSideOrientation returns the CounterClockWiseSideOrientation property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#counterclockwisesideorientation
func (s *SkyMaterial) CounterClockWiseSideOrientation(CounterClockWiseSideOrientation float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(CounterClockWiseSideOrientation)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetCounterClockWiseSideOrientation sets the CounterClockWiseSideOrientation property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#counterclockwisesideorientation
func (s *SkyMaterial) SetCounterClockWiseSideOrientation(CounterClockWiseSideOrientation float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(CounterClockWiseSideOrientation)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// DepthFunction returns the DepthFunction property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#depthfunction
func (s *SkyMaterial) DepthFunction(depthFunction float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(depthFunction)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetDepthFunction sets the DepthFunction property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#depthfunction
func (s *SkyMaterial) SetDepthFunction(depthFunction float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(depthFunction)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// DisableDepthWrite returns the DisableDepthWrite property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#disabledepthwrite
func (s *SkyMaterial) DisableDepthWrite(disableDepthWrite bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(disableDepthWrite)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetDisableDepthWrite sets the DisableDepthWrite property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#disabledepthwrite
func (s *SkyMaterial) SetDisableDepthWrite(disableDepthWrite bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(disableDepthWrite)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// Distance returns the Distance property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#distance
func (s *SkyMaterial) Distance(distance float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(distance)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetDistance sets the Distance property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#distance
func (s *SkyMaterial) SetDistance(distance float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(distance)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// DoNotSerialize returns the DoNotSerialize property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#donotserialize
func (s *SkyMaterial) DoNotSerialize(doNotSerialize bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(doNotSerialize)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetDoNotSerialize sets the DoNotSerialize property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#donotserialize
func (s *SkyMaterial) SetDoNotSerialize(doNotSerialize bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(doNotSerialize)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// FillMode returns the FillMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#fillmode
func (s *SkyMaterial) FillMode(fillMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(fillMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetFillMode sets the FillMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#fillmode
func (s *SkyMaterial) SetFillMode(fillMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(fillMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// FogEnabled returns the FogEnabled property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#fogenabled
func (s *SkyMaterial) FogEnabled(fogEnabled bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(fogEnabled)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetFogEnabled sets the FogEnabled property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#fogenabled
func (s *SkyMaterial) SetFogEnabled(fogEnabled bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(fogEnabled)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// ForceDepthWrite returns the ForceDepthWrite property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#forcedepthwrite
func (s *SkyMaterial) ForceDepthWrite(forceDepthWrite bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(forceDepthWrite)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetForceDepthWrite sets the ForceDepthWrite property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#forcedepthwrite
func (s *SkyMaterial) SetForceDepthWrite(forceDepthWrite bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(forceDepthWrite)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// FresnelDirtyFlag returns the FresnelDirtyFlag property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#fresneldirtyflag
func (s *SkyMaterial) FresnelDirtyFlag(FresnelDirtyFlag float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(FresnelDirtyFlag)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetFresnelDirtyFlag sets the FresnelDirtyFlag property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#fresneldirtyflag
func (s *SkyMaterial) SetFresnelDirtyFlag(FresnelDirtyFlag float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(FresnelDirtyFlag)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// GetRenderTargetTextures returns the GetRenderTargetTextures property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#getrendertargettextures
func (s *SkyMaterial) GetRenderTargetTextures(getRenderTargetTextures func()) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(getRenderTargetTextures)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetGetRenderTargetTextures sets the GetRenderTargetTextures property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#getrendertargettextures
func (s *SkyMaterial) SetGetRenderTargetTextures(getRenderTargetTextures func()) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(getRenderTargetTextures)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// HasRenderTargetTextures returns the HasRenderTargetTextures property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#hasrendertargettextures
func (s *SkyMaterial) HasRenderTargetTextures(hasRenderTargetTextures bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(hasRenderTargetTextures)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetHasRenderTargetTextures sets the HasRenderTargetTextures property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#hasrendertargettextures
func (s *SkyMaterial) SetHasRenderTargetTextures(hasRenderTargetTextures bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(hasRenderTargetTextures)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// Id returns the Id property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#id
func (s *SkyMaterial) Id(id string) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(id)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetId sets the Id property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#id
func (s *SkyMaterial) SetId(id string) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(id)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// Inclination returns the Inclination property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#inclination
func (s *SkyMaterial) Inclination(inclination float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(inclination)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetInclination sets the Inclination property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#inclination
func (s *SkyMaterial) SetInclination(inclination float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(inclination)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#inspectablecustomproperties
func (s *SkyMaterial) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(inspectableCustomProperties.JSObject())
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#inspectablecustomproperties
func (s *SkyMaterial) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(inspectableCustomProperties.JSObject())
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// IsFrozen returns the IsFrozen property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#isfrozen
func (s *SkyMaterial) IsFrozen(isFrozen bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(isFrozen)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetIsFrozen sets the IsFrozen property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#isfrozen
func (s *SkyMaterial) SetIsFrozen(isFrozen bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(isFrozen)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// LightDirtyFlag returns the LightDirtyFlag property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#lightdirtyflag
func (s *SkyMaterial) LightDirtyFlag(LightDirtyFlag float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(LightDirtyFlag)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetLightDirtyFlag sets the LightDirtyFlag property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#lightdirtyflag
func (s *SkyMaterial) SetLightDirtyFlag(LightDirtyFlag float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(LightDirtyFlag)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// LineListDrawMode returns the LineListDrawMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#linelistdrawmode
func (s *SkyMaterial) LineListDrawMode(LineListDrawMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(LineListDrawMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetLineListDrawMode sets the LineListDrawMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#linelistdrawmode
func (s *SkyMaterial) SetLineListDrawMode(LineListDrawMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(LineListDrawMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// LineLoopDrawMode returns the LineLoopDrawMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#lineloopdrawmode
func (s *SkyMaterial) LineLoopDrawMode(LineLoopDrawMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(LineLoopDrawMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetLineLoopDrawMode sets the LineLoopDrawMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#lineloopdrawmode
func (s *SkyMaterial) SetLineLoopDrawMode(LineLoopDrawMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(LineLoopDrawMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// LineStripDrawMode returns the LineStripDrawMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#linestripdrawmode
func (s *SkyMaterial) LineStripDrawMode(LineStripDrawMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(LineStripDrawMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetLineStripDrawMode sets the LineStripDrawMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#linestripdrawmode
func (s *SkyMaterial) SetLineStripDrawMode(LineStripDrawMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(LineStripDrawMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// Luminance returns the Luminance property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#luminance
func (s *SkyMaterial) Luminance(luminance float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(luminance)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetLuminance sets the Luminance property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#luminance
func (s *SkyMaterial) SetLuminance(luminance float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(luminance)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// Metadata returns the Metadata property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#metadata
func (s *SkyMaterial) Metadata(metadata interface{}) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(metadata)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetMetadata sets the Metadata property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#metadata
func (s *SkyMaterial) SetMetadata(metadata interface{}) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(metadata)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// MieCoefficient returns the MieCoefficient property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#miecoefficient
func (s *SkyMaterial) MieCoefficient(mieCoefficient float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(mieCoefficient)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetMieCoefficient sets the MieCoefficient property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#miecoefficient
func (s *SkyMaterial) SetMieCoefficient(mieCoefficient float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(mieCoefficient)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// MieDirectionalG returns the MieDirectionalG property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#miedirectionalg
func (s *SkyMaterial) MieDirectionalG(mieDirectionalG float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(mieDirectionalG)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetMieDirectionalG sets the MieDirectionalG property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#miedirectionalg
func (s *SkyMaterial) SetMieDirectionalG(mieDirectionalG float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(mieDirectionalG)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// MiscDirtyFlag returns the MiscDirtyFlag property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#miscdirtyflag
func (s *SkyMaterial) MiscDirtyFlag(MiscDirtyFlag float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(MiscDirtyFlag)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetMiscDirtyFlag sets the MiscDirtyFlag property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#miscdirtyflag
func (s *SkyMaterial) SetMiscDirtyFlag(MiscDirtyFlag float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(MiscDirtyFlag)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#name
func (s *SkyMaterial) Name(name string) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(name)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#name
func (s *SkyMaterial) SetName(name string) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(name)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// NeedDepthPrePass returns the NeedDepthPrePass property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#needdepthprepass
func (s *SkyMaterial) NeedDepthPrePass(needDepthPrePass bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(needDepthPrePass)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetNeedDepthPrePass sets the NeedDepthPrePass property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#needdepthprepass
func (s *SkyMaterial) SetNeedDepthPrePass(needDepthPrePass bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(needDepthPrePass)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// OnBind returns the OnBind property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#onbind
func (s *SkyMaterial) OnBind(onBind func()) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(onBind)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetOnBind sets the OnBind property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#onbind
func (s *SkyMaterial) SetOnBind(onBind func()) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(onBind)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// OnBindObservable returns the OnBindObservable property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#onbindobservable
func (s *SkyMaterial) OnBindObservable(onBindObservable *Observable) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(onBindObservable.JSObject())
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetOnBindObservable sets the OnBindObservable property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#onbindobservable
func (s *SkyMaterial) SetOnBindObservable(onBindObservable *Observable) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(onBindObservable.JSObject())
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// OnCompiled returns the OnCompiled property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#oncompiled
func (s *SkyMaterial) OnCompiled(onCompiled func()) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(onCompiled)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetOnCompiled sets the OnCompiled property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#oncompiled
func (s *SkyMaterial) SetOnCompiled(onCompiled func()) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(onCompiled)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// OnDispose returns the OnDispose property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#ondispose
func (s *SkyMaterial) OnDispose(onDispose func()) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(onDispose)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetOnDispose sets the OnDispose property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#ondispose
func (s *SkyMaterial) SetOnDispose(onDispose func()) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(onDispose)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// OnDisposeObservable returns the OnDisposeObservable property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#ondisposeobservable
func (s *SkyMaterial) OnDisposeObservable(onDisposeObservable *Observable) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(onDisposeObservable.JSObject())
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetOnDisposeObservable sets the OnDisposeObservable property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#ondisposeobservable
func (s *SkyMaterial) SetOnDisposeObservable(onDisposeObservable *Observable) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(onDisposeObservable.JSObject())
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// OnError returns the OnError property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#onerror
func (s *SkyMaterial) OnError(onError func()) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(onError)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetOnError sets the OnError property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#onerror
func (s *SkyMaterial) SetOnError(onError func()) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(onError)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// OnUnBindObservable returns the OnUnBindObservable property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#onunbindobservable
func (s *SkyMaterial) OnUnBindObservable(onUnBindObservable *Observable) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(onUnBindObservable.JSObject())
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetOnUnBindObservable sets the OnUnBindObservable property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#onunbindobservable
func (s *SkyMaterial) SetOnUnBindObservable(onUnBindObservable *Observable) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(onUnBindObservable.JSObject())
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// PointFillMode returns the PointFillMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#pointfillmode
func (s *SkyMaterial) PointFillMode(PointFillMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(PointFillMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetPointFillMode sets the PointFillMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#pointfillmode
func (s *SkyMaterial) SetPointFillMode(PointFillMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(PointFillMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// PointListDrawMode returns the PointListDrawMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#pointlistdrawmode
func (s *SkyMaterial) PointListDrawMode(PointListDrawMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(PointListDrawMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetPointListDrawMode sets the PointListDrawMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#pointlistdrawmode
func (s *SkyMaterial) SetPointListDrawMode(PointListDrawMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(PointListDrawMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// PointSize returns the PointSize property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#pointsize
func (s *SkyMaterial) PointSize(pointSize float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(pointSize)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetPointSize sets the PointSize property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#pointsize
func (s *SkyMaterial) SetPointSize(pointSize float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(pointSize)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// PointsCloud returns the PointsCloud property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#pointscloud
func (s *SkyMaterial) PointsCloud(pointsCloud bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(pointsCloud)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetPointsCloud sets the PointsCloud property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#pointscloud
func (s *SkyMaterial) SetPointsCloud(pointsCloud bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(pointsCloud)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// Rayleigh returns the Rayleigh property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#rayleigh
func (s *SkyMaterial) Rayleigh(rayleigh float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(rayleigh)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetRayleigh sets the Rayleigh property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#rayleigh
func (s *SkyMaterial) SetRayleigh(rayleigh float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(rayleigh)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// ReservedDataStore returns the ReservedDataStore property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#reserveddatastore
func (s *SkyMaterial) ReservedDataStore(reservedDataStore interface{}) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(reservedDataStore)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetReservedDataStore sets the ReservedDataStore property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#reserveddatastore
func (s *SkyMaterial) SetReservedDataStore(reservedDataStore interface{}) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(reservedDataStore)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SeparateCullingPass returns the SeparateCullingPass property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#separatecullingpass
func (s *SkyMaterial) SeparateCullingPass(separateCullingPass bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(separateCullingPass)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetSeparateCullingPass sets the SeparateCullingPass property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#separatecullingpass
func (s *SkyMaterial) SetSeparateCullingPass(separateCullingPass bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(separateCullingPass)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SideOrientation returns the SideOrientation property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#sideorientation
func (s *SkyMaterial) SideOrientation(sideOrientation float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(sideOrientation)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetSideOrientation sets the SideOrientation property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#sideorientation
func (s *SkyMaterial) SetSideOrientation(sideOrientation float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(sideOrientation)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// State returns the State property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#state
func (s *SkyMaterial) State(state string) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(state)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetState sets the State property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#state
func (s *SkyMaterial) SetState(state string) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(state)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SunPosition returns the SunPosition property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#sunposition
func (s *SkyMaterial) SunPosition(sunPosition *Vector3) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(sunPosition.JSObject())
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetSunPosition sets the SunPosition property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#sunposition
func (s *SkyMaterial) SetSunPosition(sunPosition *Vector3) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(sunPosition.JSObject())
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// TextureDirtyFlag returns the TextureDirtyFlag property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#texturedirtyflag
func (s *SkyMaterial) TextureDirtyFlag(TextureDirtyFlag float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(TextureDirtyFlag)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetTextureDirtyFlag sets the TextureDirtyFlag property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#texturedirtyflag
func (s *SkyMaterial) SetTextureDirtyFlag(TextureDirtyFlag float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(TextureDirtyFlag)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// TriangleFanDrawMode returns the TriangleFanDrawMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#trianglefandrawmode
func (s *SkyMaterial) TriangleFanDrawMode(TriangleFanDrawMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(TriangleFanDrawMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetTriangleFanDrawMode sets the TriangleFanDrawMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#trianglefandrawmode
func (s *SkyMaterial) SetTriangleFanDrawMode(TriangleFanDrawMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(TriangleFanDrawMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// TriangleFillMode returns the TriangleFillMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#trianglefillmode
func (s *SkyMaterial) TriangleFillMode(TriangleFillMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(TriangleFillMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetTriangleFillMode sets the TriangleFillMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#trianglefillmode
func (s *SkyMaterial) SetTriangleFillMode(TriangleFillMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(TriangleFillMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// TriangleStripDrawMode returns the TriangleStripDrawMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#trianglestripdrawmode
func (s *SkyMaterial) TriangleStripDrawMode(TriangleStripDrawMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(TriangleStripDrawMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetTriangleStripDrawMode sets the TriangleStripDrawMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#trianglestripdrawmode
func (s *SkyMaterial) SetTriangleStripDrawMode(TriangleStripDrawMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(TriangleStripDrawMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// Turbidity returns the Turbidity property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#turbidity
func (s *SkyMaterial) Turbidity(turbidity float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(turbidity)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetTurbidity sets the Turbidity property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#turbidity
func (s *SkyMaterial) SetTurbidity(turbidity float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(turbidity)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#uniqueid
func (s *SkyMaterial) UniqueId(uniqueId float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(uniqueId)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#uniqueid
func (s *SkyMaterial) SetUniqueId(uniqueId float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(uniqueId)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// UseSunPosition returns the UseSunPosition property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#usesunposition
func (s *SkyMaterial) UseSunPosition(useSunPosition bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(useSunPosition)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetUseSunPosition sets the UseSunPosition property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#usesunposition
func (s *SkyMaterial) SetUseSunPosition(useSunPosition bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(useSunPosition)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// WireFrameFillMode returns the WireFrameFillMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#wireframefillmode
func (s *SkyMaterial) WireFrameFillMode(WireFrameFillMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(WireFrameFillMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetWireFrameFillMode sets the WireFrameFillMode property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#wireframefillmode
func (s *SkyMaterial) SetWireFrameFillMode(WireFrameFillMode float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(WireFrameFillMode)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// Wireframe returns the Wireframe property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#wireframe
func (s *SkyMaterial) Wireframe(wireframe bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(wireframe)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetWireframe sets the Wireframe property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#wireframe
func (s *SkyMaterial) SetWireframe(wireframe bool) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(wireframe)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// ZOffset returns the ZOffset property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#zoffset
func (s *SkyMaterial) ZOffset(zOffset float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(zOffset)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

// SetZOffset sets the ZOffset property of class SkyMaterial.
//
// https://doc.babylonjs.com/api/classes/babylon.skymaterial#zoffset
func (s *SkyMaterial) SetZOffset(zOffset float64) *SkyMaterial {
	p := ba.ctx.Get("SkyMaterial").New(zOffset)
	return SkyMaterialFromJSObject(p, ba.ctx)
}

*/
