// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PhysicsRadialExplosionEvent represents a babylon.js PhysicsRadialExplosionEvent.
// Represents a physics radial explosion event
type PhysicsRadialExplosionEvent struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PhysicsRadialExplosionEvent) JSObject() js.Value { return p.p }

// PhysicsRadialExplosionEvent returns a PhysicsRadialExplosionEvent JavaScript class.
func (ba *Babylon) PhysicsRadialExplosionEvent() *PhysicsRadialExplosionEvent {
	p := ba.ctx.Get("PhysicsRadialExplosionEvent")
	return PhysicsRadialExplosionEventFromJSObject(p, ba.ctx)
}

// PhysicsRadialExplosionEventFromJSObject returns a wrapped PhysicsRadialExplosionEvent JavaScript class.
func PhysicsRadialExplosionEventFromJSObject(p js.Value, ctx js.Value) *PhysicsRadialExplosionEvent {
	return &PhysicsRadialExplosionEvent{p: p, ctx: ctx}
}

// PhysicsRadialExplosionEventArrayToJSArray returns a JavaScript Array for the wrapped array.
func PhysicsRadialExplosionEventArrayToJSArray(array []*PhysicsRadialExplosionEvent) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPhysicsRadialExplosionEvent returns a new PhysicsRadialExplosionEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsradialexplosionevent
func (ba *Babylon) NewPhysicsRadialExplosionEvent(_scene *Scene, _options *PhysicsRadialExplosionEventOptions) *PhysicsRadialExplosionEvent {

	args := make([]interface{}, 0, 2+0)

	args = append(args, _scene.JSObject())
	args = append(args, _options.JSObject())

	p := ba.ctx.Get("PhysicsRadialExplosionEvent").New(args...)
	return PhysicsRadialExplosionEventFromJSObject(p, ba.ctx)
}

// PhysicsRadialExplosionEventDisposeOpts contains optional parameters for PhysicsRadialExplosionEvent.Dispose.
type PhysicsRadialExplosionEventDisposeOpts struct {
	Force *bool
}

// Dispose calls the Dispose method on the PhysicsRadialExplosionEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsradialexplosionevent#dispose
func (p *PhysicsRadialExplosionEvent) Dispose(opts *PhysicsRadialExplosionEventDisposeOpts) {
	if opts == nil {
		opts = &PhysicsRadialExplosionEventDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Force == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Force)
	}

	p.p.Call("dispose", args...)
}

// GetData calls the GetData method on the PhysicsRadialExplosionEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsradialexplosionevent#getdata
func (p *PhysicsRadialExplosionEvent) GetData() *PhysicsRadialExplosionEventData {

	retVal := p.p.Call("getData")
	return PhysicsRadialExplosionEventDataFromJSObject(retVal, p.ctx)
}

// GetImpostorHitData calls the GetImpostorHitData method on the PhysicsRadialExplosionEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsradialexplosionevent#getimpostorhitdata
func (p *PhysicsRadialExplosionEvent) GetImpostorHitData(impostor *PhysicsImpostor, origin *Vector3) *PhysicsHitData {

	args := make([]interface{}, 0, 2+0)

	args = append(args, impostor.JSObject())
	args = append(args, origin.JSObject())

	retVal := p.p.Call("getImpostorHitData", args...)
	return PhysicsHitDataFromJSObject(retVal, p.ctx)
}

// TriggerAffectedImpostorsCallback calls the TriggerAffectedImpostorsCallback method on the PhysicsRadialExplosionEvent object.
//
// https://doc.babylonjs.com/api/classes/babylon.physicsradialexplosionevent#triggeraffectedimpostorscallback
func (p *PhysicsRadialExplosionEvent) TriggerAffectedImpostorsCallback(affectedImpostorsWithData []*PhysicsAffectedImpostorWithData) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, PhysicsAffectedImpostorWithDataArrayToJSArray(affectedImpostorsWithData))

	p.p.Call("triggerAffectedImpostorsCallback", args...)
}
