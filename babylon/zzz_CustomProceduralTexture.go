// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CustomProceduralTexture represents a babylon.js CustomProceduralTexture.
// Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called &amp;#39;refMaps&amp;#39; or &amp;#39;sampler&amp;#39; images.
// Custom Procedural textures are the easiest way to create your own procedural in your application.

//
// See: http://doc.babylonjs.com/how_to/how_to_use_procedural_textures#creating-custom-procedural-textures
type CustomProceduralTexture struct{ *ProceduralTexture }

// JSObject returns the underlying js.Value.
func (c *CustomProceduralTexture) JSObject() js.Value { return c.p }

// CustomProceduralTexture returns a CustomProceduralTexture JavaScript class.
func (b *Babylon) CustomProceduralTexture() *CustomProceduralTexture {
	p := b.ctx.Get("CustomProceduralTexture")
	return CustomProceduralTextureFromJSObject(p)
}

// CustomProceduralTextureFromJSObject returns a wrapped CustomProceduralTexture JavaScript class.
func CustomProceduralTextureFromJSObject(p js.Value) *CustomProceduralTexture {
	return &CustomProceduralTexture{ProceduralTextureFromJSObject(p)}
}

// NewCustomProceduralTexture returns a new CustomProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.customproceduraltexture
func (b *Babylon) NewCustomProceduralTexture(todo parameters) *CustomProceduralTexture {
	p := b.ctx.Get("CustomProceduralTexture").New(todo)
	return CustomProceduralTextureFromJSObject(p)
}

// TODO: methods
