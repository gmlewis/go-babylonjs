// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CustomProceduralTexture represents a babylon.js CustomProceduralTexture.
// Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called &#39;refMaps&#39; or &#39;sampler&#39; images.
// Custom Procedural textures are the easiest way to create your own procedural in your application.
//
// See: http://doc.babylonjs.com/how_to/how_to_use_procedural_textures#creating-custom-procedural-textures
type CustomProceduralTexture struct {
	*ProceduralTexture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *CustomProceduralTexture) JSObject() js.Value { return c.p }

// CustomProceduralTexture returns a CustomProceduralTexture JavaScript class.
func (ba *Babylon) CustomProceduralTexture() *CustomProceduralTexture {
	p := ba.ctx.Get("CustomProceduralTexture")
	return CustomProceduralTextureFromJSObject(p, ba.ctx)
}

// CustomProceduralTextureFromJSObject returns a wrapped CustomProceduralTexture JavaScript class.
func CustomProceduralTextureFromJSObject(p js.Value, ctx js.Value) *CustomProceduralTexture {
	return &CustomProceduralTexture{ProceduralTexture: ProceduralTextureFromJSObject(p, ctx), ctx: ctx}
}

// CustomProceduralTextureArrayToJSArray returns a JavaScript Array for the wrapped array.
func CustomProceduralTextureArrayToJSArray(array []*CustomProceduralTexture) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewCustomProceduralTextureOpts contains optional parameters for NewCustomProceduralTexture.
type NewCustomProceduralTextureOpts struct {
	FallbackTexture *Texture
	GenerateMipMaps *bool
}

// NewCustomProceduralTexture returns a new CustomProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.customproceduraltexture
func (ba *Babylon) NewCustomProceduralTexture(name string, texturePath string, size float64, scene *Scene, opts *NewCustomProceduralTextureOpts) *CustomProceduralTexture {
	if opts == nil {
		opts = &NewCustomProceduralTextureOpts{}
	}

	args := make([]interface{}, 0, 4+2)

	args = append(args, name)
	args = append(args, texturePath)
	args = append(args, size)
	args = append(args, scene.JSObject())

	if opts.FallbackTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.FallbackTexture.JSObject())
	}
	if opts.GenerateMipMaps == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.GenerateMipMaps)
	}

	p := ba.ctx.Get("CustomProceduralTexture").New(args...)
	return CustomProceduralTextureFromJSObject(p, ba.ctx)
}

// IsReady calls the IsReady method on the CustomProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.customproceduraltexture#isready
func (c *CustomProceduralTexture) IsReady() bool {

	retVal := c.p.Call("isReady")
	return retVal.Bool()
}

// CustomProceduralTextureRenderOpts contains optional parameters for CustomProceduralTexture.Render.
type CustomProceduralTextureRenderOpts struct {
	UseCameraPostProcess *bool
}

// Render calls the Render method on the CustomProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.customproceduraltexture#render
func (c *CustomProceduralTexture) Render(opts *CustomProceduralTextureRenderOpts) {
	if opts == nil {
		opts = &CustomProceduralTextureRenderOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.UseCameraPostProcess == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseCameraPostProcess)
	}

	c.p.Call("render", args...)
}

// UpdateShaderUniforms calls the UpdateShaderUniforms method on the CustomProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.customproceduraltexture#updateshaderuniforms
func (c *CustomProceduralTexture) UpdateShaderUniforms() {

	c.p.Call("updateShaderUniforms")
}

// UpdateTextures calls the UpdateTextures method on the CustomProceduralTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.customproceduraltexture#updatetextures
func (c *CustomProceduralTexture) UpdateTextures() {

	c.p.Call("updateTextures")
}

/*

// Animate returns the Animate property of class CustomProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.customproceduraltexture#animate
func (c *CustomProceduralTexture) Animate(animate bool) *CustomProceduralTexture {
	p := ba.ctx.Get("CustomProceduralTexture").New(animate)
	return CustomProceduralTextureFromJSObject(p, ba.ctx)
}

// SetAnimate sets the Animate property of class CustomProceduralTexture.
//
// https://doc.babylonjs.com/api/classes/babylon.customproceduraltexture#animate
func (c *CustomProceduralTexture) SetAnimate(animate bool) *CustomProceduralTexture {
	p := ba.ctx.Get("CustomProceduralTexture").New(animate)
	return CustomProceduralTextureFromJSObject(p, ba.ctx)
}

*/
