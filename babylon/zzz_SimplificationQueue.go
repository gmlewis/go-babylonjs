// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// SimplificationQueue represents a babylon.js SimplificationQueue.
// Queue used to order the simplification tasks
//
// See: http://doc.babylonjs.com/how_to/in-browser_mesh_simplification
type SimplificationQueue struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *SimplificationQueue) JSObject() js.Value { return s.p }

// SimplificationQueue returns a SimplificationQueue JavaScript class.
func (ba *Babylon) SimplificationQueue() *SimplificationQueue {
	p := ba.ctx.Get("SimplificationQueue")
	return SimplificationQueueFromJSObject(p, ba.ctx)
}

// SimplificationQueueFromJSObject returns a wrapped SimplificationQueue JavaScript class.
func SimplificationQueueFromJSObject(p js.Value, ctx js.Value) *SimplificationQueue {
	return &SimplificationQueue{p: p, ctx: ctx}
}

// NewSimplificationQueue returns a new SimplificationQueue object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplificationqueue
func (ba *Babylon) NewSimplificationQueue() *SimplificationQueue {

	args := make([]interface{}, 0, 0+0)

	p := ba.ctx.Get("SimplificationQueue").New(args...)
	return SimplificationQueueFromJSObject(p, ba.ctx)
}

// AddTask calls the AddTask method on the SimplificationQueue object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplificationqueue#addtask
func (s *SimplificationQueue) AddTask(task *ISimplificationTask) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, task.JSObject())

	s.p.Call("addTask", args...)
}

// ExecuteNext calls the ExecuteNext method on the SimplificationQueue object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplificationqueue#executenext
func (s *SimplificationQueue) ExecuteNext() {

	args := make([]interface{}, 0, 0+0)

	s.p.Call("executeNext", args...)
}

// RunSimplification calls the RunSimplification method on the SimplificationQueue object.
//
// https://doc.babylonjs.com/api/classes/babylon.simplificationqueue#runsimplification
func (s *SimplificationQueue) RunSimplification(task *ISimplificationTask) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, task.JSObject())

	s.p.Call("runSimplification", args...)
}

/*

// Running returns the Running property of class SimplificationQueue.
//
// https://doc.babylonjs.com/api/classes/babylon.simplificationqueue#running
func (s *SimplificationQueue) Running(running bool) *SimplificationQueue {
	p := ba.ctx.Get("SimplificationQueue").New(running)
	return SimplificationQueueFromJSObject(p, ba.ctx)
}

// SetRunning sets the Running property of class SimplificationQueue.
//
// https://doc.babylonjs.com/api/classes/babylon.simplificationqueue#running
func (s *SimplificationQueue) SetRunning(running bool) *SimplificationQueue {
	p := ba.ctx.Get("SimplificationQueue").New(running)
	return SimplificationQueueFromJSObject(p, ba.ctx)
}

*/
