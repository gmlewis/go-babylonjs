// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PassCubePostProcess represents a babylon.js PassCubePostProcess.
// PassCubePostProcess which produces an output the same as it&amp;#39;s input (which must be a cube texture)
type PassCubePostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PassCubePostProcess) JSObject() js.Value { return p.p }

// PassCubePostProcess returns a PassCubePostProcess JavaScript class.
func (ba *Babylon) PassCubePostProcess() *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess")
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// PassCubePostProcessFromJSObject returns a wrapped PassCubePostProcess JavaScript class.
func PassCubePostProcessFromJSObject(p js.Value, ctx js.Value) *PassCubePostProcess {
	return &PassCubePostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// PassCubePostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func PassCubePostProcessArrayToJSArray(array []*PassCubePostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPassCubePostProcessOpts contains optional parameters for NewPassCubePostProcess.
type NewPassCubePostProcessOpts struct {
	Camera           *Camera
	SamplingMode     *float64
	Engine           *Engine
	Reusable         *bool
	TextureType      *float64
	BlockCompilation *bool
}

// NewPassCubePostProcess returns a new PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess
func (ba *Babylon) NewPassCubePostProcess(name string, options float64, opts *NewPassCubePostProcessOpts) *PassCubePostProcess {
	if opts == nil {
		opts = &NewPassCubePostProcessOpts{}
	}

	args := make([]interface{}, 0, 2+6)

	args = append(args, name)
	args = append(args, options)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}
	if opts.BlockCompilation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.BlockCompilation)
	}

	p := ba.ctx.Get("PassCubePostProcess").New(args...)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// PassCubePostProcessActivateOpts contains optional parameters for PassCubePostProcess.Activate.
type PassCubePostProcessActivateOpts struct {
	SourceTexture     *InternalTexture
	ForceDepthStencil *bool
}

// Activate calls the Activate method on the PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#activate
func (p *PassCubePostProcess) Activate(camera *Camera, opts *PassCubePostProcessActivateOpts) *InternalTexture {
	if opts == nil {
		opts = &PassCubePostProcessActivateOpts{}
	}

	args := make([]interface{}, 0, 1+2)

	args = append(args, camera.JSObject())

	if opts.SourceTexture == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.SourceTexture.JSObject())
	}
	if opts.ForceDepthStencil == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.ForceDepthStencil)
	}

	retVal := p.p.Call("activate", args...)
	return InternalTextureFromJSObject(retVal, p.ctx)
}

// Apply calls the Apply method on the PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#apply
func (p *PassCubePostProcess) Apply() *Effect {

	retVal := p.p.Call("apply")
	return EffectFromJSObject(retVal, p.ctx)
}

// PassCubePostProcessDisposeOpts contains optional parameters for PassCubePostProcess.Dispose.
type PassCubePostProcessDisposeOpts struct {
	Camera *Camera
}

// Dispose calls the Dispose method on the PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#dispose
func (p *PassCubePostProcess) Dispose(opts *PassCubePostProcessDisposeOpts) {
	if opts == nil {
		opts = &PassCubePostProcessDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}

	p.p.Call("dispose", args...)
}

// GetCamera calls the GetCamera method on the PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#getcamera
func (p *PassCubePostProcess) GetCamera() *Camera {

	retVal := p.p.Call("getCamera")
	return CameraFromJSObject(retVal, p.ctx)
}

// GetClassName calls the GetClassName method on the PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#getclassname
func (p *PassCubePostProcess) GetClassName() string {

	retVal := p.p.Call("getClassName")
	return retVal.String()
}

// GetEffect calls the GetEffect method on the PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#geteffect
func (p *PassCubePostProcess) GetEffect() *Effect {

	retVal := p.p.Call("getEffect")
	return EffectFromJSObject(retVal, p.ctx)
}

// GetEffectName calls the GetEffectName method on the PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#geteffectname
func (p *PassCubePostProcess) GetEffectName() string {

	retVal := p.p.Call("getEffectName")
	return retVal.String()
}

// GetEngine calls the GetEngine method on the PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#getengine
func (p *PassCubePostProcess) GetEngine() *Engine {

	retVal := p.p.Call("getEngine")
	return EngineFromJSObject(retVal, p.ctx)
}

// IsReady calls the IsReady method on the PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#isready
func (p *PassCubePostProcess) IsReady() bool {

	retVal := p.p.Call("isReady")
	return retVal.Bool()
}

// IsReusable calls the IsReusable method on the PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#isreusable
func (p *PassCubePostProcess) IsReusable() bool {

	retVal := p.p.Call("isReusable")
	return retVal.Bool()
}

// MarkTextureDirty calls the MarkTextureDirty method on the PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#marktexturedirty
func (p *PassCubePostProcess) MarkTextureDirty() {

	p.p.Call("markTextureDirty")
}

// ShareOutputWith calls the ShareOutputWith method on the PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#shareoutputwith
func (p *PassCubePostProcess) ShareOutputWith(postProcess *PostProcess) *PostProcess {

	args := make([]interface{}, 0, 1+0)

	args = append(args, postProcess.JSObject())

	retVal := p.p.Call("shareOutputWith", args...)
	return PostProcessFromJSObject(retVal, p.ctx)
}

// PassCubePostProcessUpdateEffectOpts contains optional parameters for PassCubePostProcess.UpdateEffect.
type PassCubePostProcessUpdateEffectOpts struct {
	Defines         *string
	Uniforms        *string
	Samplers        *string
	IndexParameters *interface{}
	OnCompiled      *func()
	OnError         *func()
}

// UpdateEffect calls the UpdateEffect method on the PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#updateeffect
func (p *PassCubePostProcess) UpdateEffect(opts *PassCubePostProcessUpdateEffectOpts) {
	if opts == nil {
		opts = &PassCubePostProcessUpdateEffectOpts{}
	}

	args := make([]interface{}, 0, 0+6)

	if opts.Defines == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Defines)
	}
	if opts.Uniforms == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Uniforms)
	}
	if opts.Samplers == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Samplers)
	}
	if opts.IndexParameters == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.IndexParameters)
	}
	if opts.OnCompiled == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnCompiled)
	}
	if opts.OnError == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.OnError)
	}

	p.p.Call("updateEffect", args...)
}

// UseOwnOutput calls the UseOwnOutput method on the PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#useownoutput
func (p *PassCubePostProcess) UseOwnOutput() {

	p.p.Call("useOwnOutput")
}

/*

// AdaptScaleToCurrentViewport returns the AdaptScaleToCurrentViewport property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#adaptscaletocurrentviewport
func (p *PassCubePostProcess) AdaptScaleToCurrentViewport(adaptScaleToCurrentViewport bool) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(adaptScaleToCurrentViewport)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetAdaptScaleToCurrentViewport sets the AdaptScaleToCurrentViewport property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#adaptscaletocurrentviewport
func (p *PassCubePostProcess) SetAdaptScaleToCurrentViewport(adaptScaleToCurrentViewport bool) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(adaptScaleToCurrentViewport)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// AlphaConstants returns the AlphaConstants property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#alphaconstants
func (p *PassCubePostProcess) AlphaConstants(alphaConstants *Color4) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(alphaConstants.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetAlphaConstants sets the AlphaConstants property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#alphaconstants
func (p *PassCubePostProcess) SetAlphaConstants(alphaConstants *Color4) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(alphaConstants.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// AlphaMode returns the AlphaMode property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#alphamode
func (p *PassCubePostProcess) AlphaMode(alphaMode float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(alphaMode)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetAlphaMode sets the AlphaMode property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#alphamode
func (p *PassCubePostProcess) SetAlphaMode(alphaMode float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(alphaMode)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// AlwaysForcePOT returns the AlwaysForcePOT property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#alwaysforcepot
func (p *PassCubePostProcess) AlwaysForcePOT(alwaysForcePOT bool) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(alwaysForcePOT)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetAlwaysForcePOT sets the AlwaysForcePOT property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#alwaysforcepot
func (p *PassCubePostProcess) SetAlwaysForcePOT(alwaysForcePOT bool) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(alwaysForcePOT)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// Animations returns the Animations property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#animations
func (p *PassCubePostProcess) Animations(animations *Animation) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(animations.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetAnimations sets the Animations property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#animations
func (p *PassCubePostProcess) SetAnimations(animations *Animation) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(animations.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// AspectRatio returns the AspectRatio property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#aspectratio
func (p *PassCubePostProcess) AspectRatio(aspectRatio float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(aspectRatio)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetAspectRatio sets the AspectRatio property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#aspectratio
func (p *PassCubePostProcess) SetAspectRatio(aspectRatio float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(aspectRatio)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// AutoClear returns the AutoClear property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#autoclear
func (p *PassCubePostProcess) AutoClear(autoClear bool) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(autoClear)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetAutoClear sets the AutoClear property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#autoclear
func (p *PassCubePostProcess) SetAutoClear(autoClear bool) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(autoClear)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// ClearColor returns the ClearColor property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#clearcolor
func (p *PassCubePostProcess) ClearColor(clearColor *Color4) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(clearColor.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetClearColor sets the ClearColor property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#clearcolor
func (p *PassCubePostProcess) SetClearColor(clearColor *Color4) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(clearColor.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// EnablePixelPerfectMode returns the EnablePixelPerfectMode property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#enablepixelperfectmode
func (p *PassCubePostProcess) EnablePixelPerfectMode(enablePixelPerfectMode bool) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(enablePixelPerfectMode)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetEnablePixelPerfectMode sets the EnablePixelPerfectMode property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#enablepixelperfectmode
func (p *PassCubePostProcess) SetEnablePixelPerfectMode(enablePixelPerfectMode bool) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(enablePixelPerfectMode)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// Face returns the Face property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#face
func (p *PassCubePostProcess) Face(face float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(face)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetFace sets the Face property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#face
func (p *PassCubePostProcess) SetFace(face float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(face)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// ForceFullscreenViewport returns the ForceFullscreenViewport property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#forcefullscreenviewport
func (p *PassCubePostProcess) ForceFullscreenViewport(forceFullscreenViewport bool) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(forceFullscreenViewport)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetForceFullscreenViewport sets the ForceFullscreenViewport property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#forcefullscreenviewport
func (p *PassCubePostProcess) SetForceFullscreenViewport(forceFullscreenViewport bool) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(forceFullscreenViewport)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// Height returns the Height property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#height
func (p *PassCubePostProcess) Height(height float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(height)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetHeight sets the Height property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#height
func (p *PassCubePostProcess) SetHeight(height float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(height)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// InputTexture returns the InputTexture property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#inputtexture
func (p *PassCubePostProcess) InputTexture(inputTexture *InternalTexture) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(inputTexture.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetInputTexture sets the InputTexture property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#inputtexture
func (p *PassCubePostProcess) SetInputTexture(inputTexture *InternalTexture) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(inputTexture.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// InspectableCustomProperties returns the InspectableCustomProperties property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#inspectablecustomproperties
func (p *PassCubePostProcess) InspectableCustomProperties(inspectableCustomProperties *IInspectable) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(inspectableCustomProperties.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetInspectableCustomProperties sets the InspectableCustomProperties property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#inspectablecustomproperties
func (p *PassCubePostProcess) SetInspectableCustomProperties(inspectableCustomProperties *IInspectable) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(inspectableCustomProperties.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// IsSupported returns the IsSupported property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#issupported
func (p *PassCubePostProcess) IsSupported(isSupported bool) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(isSupported)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetIsSupported sets the IsSupported property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#issupported
func (p *PassCubePostProcess) SetIsSupported(isSupported bool) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(isSupported)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#name
func (p *PassCubePostProcess) Name(name string) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(name)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#name
func (p *PassCubePostProcess) SetName(name string) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(name)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// OnActivate returns the OnActivate property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onactivate
func (p *PassCubePostProcess) OnActivate(onActivate func()) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onActivate(); return nil}))
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetOnActivate sets the OnActivate property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onactivate
func (p *PassCubePostProcess) SetOnActivate(onActivate func()) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onActivate(); return nil}))
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// OnActivateObservable returns the OnActivateObservable property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onactivateobservable
func (p *PassCubePostProcess) OnActivateObservable(onActivateObservable *Observable) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(onActivateObservable.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetOnActivateObservable sets the OnActivateObservable property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onactivateobservable
func (p *PassCubePostProcess) SetOnActivateObservable(onActivateObservable *Observable) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(onActivateObservable.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// OnAfterRender returns the OnAfterRender property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onafterrender
func (p *PassCubePostProcess) OnAfterRender(onAfterRender func()) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onAfterRender(); return nil}))
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetOnAfterRender sets the OnAfterRender property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onafterrender
func (p *PassCubePostProcess) SetOnAfterRender(onAfterRender func()) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onAfterRender(); return nil}))
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// OnAfterRenderObservable returns the OnAfterRenderObservable property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onafterrenderobservable
func (p *PassCubePostProcess) OnAfterRenderObservable(onAfterRenderObservable *Observable) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(onAfterRenderObservable.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetOnAfterRenderObservable sets the OnAfterRenderObservable property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onafterrenderobservable
func (p *PassCubePostProcess) SetOnAfterRenderObservable(onAfterRenderObservable *Observable) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(onAfterRenderObservable.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// OnApply returns the OnApply property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onapply
func (p *PassCubePostProcess) OnApply(onApply func()) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onApply(); return nil}))
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetOnApply sets the OnApply property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onapply
func (p *PassCubePostProcess) SetOnApply(onApply func()) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onApply(); return nil}))
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// OnApplyObservable returns the OnApplyObservable property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onapplyobservable
func (p *PassCubePostProcess) OnApplyObservable(onApplyObservable *Observable) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(onApplyObservable.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetOnApplyObservable sets the OnApplyObservable property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onapplyobservable
func (p *PassCubePostProcess) SetOnApplyObservable(onApplyObservable *Observable) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(onApplyObservable.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// OnBeforeRender returns the OnBeforeRender property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onbeforerender
func (p *PassCubePostProcess) OnBeforeRender(onBeforeRender func()) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onBeforeRender(); return nil}))
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetOnBeforeRender sets the OnBeforeRender property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onbeforerender
func (p *PassCubePostProcess) SetOnBeforeRender(onBeforeRender func()) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onBeforeRender(); return nil}))
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// OnBeforeRenderObservable returns the OnBeforeRenderObservable property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onbeforerenderobservable
func (p *PassCubePostProcess) OnBeforeRenderObservable(onBeforeRenderObservable *Observable) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(onBeforeRenderObservable.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetOnBeforeRenderObservable sets the OnBeforeRenderObservable property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onbeforerenderobservable
func (p *PassCubePostProcess) SetOnBeforeRenderObservable(onBeforeRenderObservable *Observable) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(onBeforeRenderObservable.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// OnSizeChanged returns the OnSizeChanged property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onsizechanged
func (p *PassCubePostProcess) OnSizeChanged(onSizeChanged func()) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onSizeChanged(); return nil}))
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetOnSizeChanged sets the OnSizeChanged property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onsizechanged
func (p *PassCubePostProcess) SetOnSizeChanged(onSizeChanged func()) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {onSizeChanged(); return nil}))
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// OnSizeChangedObservable returns the OnSizeChangedObservable property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onsizechangedobservable
func (p *PassCubePostProcess) OnSizeChangedObservable(onSizeChangedObservable *Observable) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(onSizeChangedObservable.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetOnSizeChangedObservable sets the OnSizeChangedObservable property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#onsizechangedobservable
func (p *PassCubePostProcess) SetOnSizeChangedObservable(onSizeChangedObservable *Observable) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(onSizeChangedObservable.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// RenderTargetSamplingMode returns the RenderTargetSamplingMode property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#rendertargetsamplingmode
func (p *PassCubePostProcess) RenderTargetSamplingMode(renderTargetSamplingMode float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(renderTargetSamplingMode)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetRenderTargetSamplingMode sets the RenderTargetSamplingMode property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#rendertargetsamplingmode
func (p *PassCubePostProcess) SetRenderTargetSamplingMode(renderTargetSamplingMode float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(renderTargetSamplingMode)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// Samples returns the Samples property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#samples
func (p *PassCubePostProcess) Samples(samples float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(samples)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetSamples sets the Samples property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#samples
func (p *PassCubePostProcess) SetSamples(samples float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(samples)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// ScaleMode returns the ScaleMode property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#scalemode
func (p *PassCubePostProcess) ScaleMode(scaleMode float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(scaleMode)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetScaleMode sets the ScaleMode property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#scalemode
func (p *PassCubePostProcess) SetScaleMode(scaleMode float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(scaleMode)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// TexelSize returns the TexelSize property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#texelsize
func (p *PassCubePostProcess) TexelSize(texelSize *Vector2) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(texelSize.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetTexelSize sets the TexelSize property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#texelsize
func (p *PassCubePostProcess) SetTexelSize(texelSize *Vector2) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(texelSize.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#uniqueid
func (p *PassCubePostProcess) UniqueId(uniqueId float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(uniqueId)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#uniqueid
func (p *PassCubePostProcess) SetUniqueId(uniqueId float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(uniqueId)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// Width returns the Width property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#width
func (p *PassCubePostProcess) Width(width float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(width)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// SetWidth sets the Width property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#width
func (p *PassCubePostProcess) SetWidth(width float64) *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess").New(width)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

*/
