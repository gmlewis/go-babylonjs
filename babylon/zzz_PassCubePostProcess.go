// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PassCubePostProcess represents a babylon.js PassCubePostProcess.
// PassCubePostProcess which produces an output the same as it&amp;#39;s input (which must be a cube texture)
type PassCubePostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PassCubePostProcess) JSObject() js.Value { return p.p }

// PassCubePostProcess returns a PassCubePostProcess JavaScript class.
func (ba *Babylon) PassCubePostProcess() *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess")
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// PassCubePostProcessFromJSObject returns a wrapped PassCubePostProcess JavaScript class.
func PassCubePostProcessFromJSObject(p js.Value, ctx js.Value) *PassCubePostProcess {
	return &PassCubePostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// NewPassCubePostProcessOpts contains optional parameters for NewPassCubePostProcess.
type NewPassCubePostProcessOpts struct {
	Camera *Camera

	SamplingMode *JSFloat64

	Engine *Engine

	Reusable *JSBool

	TextureType *JSFloat64

	BlockCompilation *JSBool
}

// NewPassCubePostProcess returns a new PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess
func (ba *Babylon) NewPassCubePostProcess(name string, options float64, opts *NewPassCubePostProcessOpts) *PassCubePostProcess {
	if opts == nil {
		opts = &NewPassCubePostProcessOpts{}
	}

	p := ba.ctx.Get("PassCubePostProcess").New(name, options, opts.Camera.JSObject(), opts.SamplingMode.JSObject(), opts.Engine.JSObject(), opts.Reusable.JSObject(), opts.TextureType.JSObject(), opts.BlockCompilation.JSObject())
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// TODO: methods
