// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// PassCubePostProcess represents a babylon.js PassCubePostProcess.
// PassCubePostProcess which produces an output the same as it&#39;s input (which must be a cube texture)
type PassCubePostProcess struct {
	*PostProcess
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (p *PassCubePostProcess) JSObject() js.Value { return p.p }

// PassCubePostProcess returns a PassCubePostProcess JavaScript class.
func (ba *Babylon) PassCubePostProcess() *PassCubePostProcess {
	p := ba.ctx.Get("PassCubePostProcess")
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// PassCubePostProcessFromJSObject returns a wrapped PassCubePostProcess JavaScript class.
func PassCubePostProcessFromJSObject(p js.Value, ctx js.Value) *PassCubePostProcess {
	return &PassCubePostProcess{PostProcess: PostProcessFromJSObject(p, ctx), ctx: ctx}
}

// PassCubePostProcessArrayToJSArray returns a JavaScript Array for the wrapped array.
func PassCubePostProcessArrayToJSArray(array []*PassCubePostProcess) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewPassCubePostProcessOpts contains optional parameters for NewPassCubePostProcess.
type NewPassCubePostProcessOpts struct {
	Camera           *Camera
	SamplingMode     *float64
	Engine           *Engine
	Reusable         *bool
	TextureType      *float64
	BlockCompilation *bool
}

// NewPassCubePostProcess returns a new PassCubePostProcess object.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess
func (ba *Babylon) NewPassCubePostProcess(name string, options float64, opts *NewPassCubePostProcessOpts) *PassCubePostProcess {
	if opts == nil {
		opts = &NewPassCubePostProcessOpts{}
	}

	args := make([]interface{}, 0, 2+6)

	args = append(args, name)
	args = append(args, options)

	if opts.Camera == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Camera.JSObject())
	}
	if opts.SamplingMode == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SamplingMode)
	}
	if opts.Engine == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Engine.JSObject())
	}
	if opts.Reusable == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Reusable)
	}
	if opts.TextureType == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.TextureType)
	}
	if opts.BlockCompilation == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.BlockCompilation)
	}

	p := ba.ctx.Get("PassCubePostProcess").New(args...)
	return PassCubePostProcessFromJSObject(p, ba.ctx)
}

// Face returns the Face property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#face
func (p *PassCubePostProcess) Face() float64 {
	retVal := p.p.Get("face")
	return retVal.Float()
}

// SetFace sets the Face property of class PassCubePostProcess.
//
// https://doc.babylonjs.com/api/classes/babylon.passcubepostprocess#face
func (p *PassCubePostProcess) SetFace(face float64) *PassCubePostProcess {
	p.p.Set("face", face)
	return p
}
