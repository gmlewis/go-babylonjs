// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RefractBlock represents a babylon.js RefractBlock.
// Block used to get the refracted vector from a direction and a normal
type RefractBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RefractBlock) JSObject() js.Value { return r.p }

// RefractBlock returns a RefractBlock JavaScript class.
func (ba *Babylon) RefractBlock() *RefractBlock {
	p := ba.ctx.Get("RefractBlock")
	return RefractBlockFromJSObject(p, ba.ctx)
}

// RefractBlockFromJSObject returns a wrapped RefractBlock JavaScript class.
func RefractBlockFromJSObject(p js.Value, ctx js.Value) *RefractBlock {
	return &RefractBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// RefractBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func RefractBlockArrayToJSArray(array []*RefractBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewRefractBlock returns a new RefractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.refractblock#constructor
func (ba *Babylon) NewRefractBlock(name string) *RefractBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("RefractBlock").New(args...)
	return RefractBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the RefractBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.refractblock#getclassname
func (r *RefractBlock) GetClassName() string {

	retVal := r.p.Call("getClassName")
	return retVal.String()
}

// Incident returns the Incident property of class RefractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.refractblock#incident
func (r *RefractBlock) Incident() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("incident")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetIncident sets the Incident property of class RefractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.refractblock#incident
func (r *RefractBlock) SetIncident(incident *NodeMaterialConnectionPoint) *RefractBlock {
	r.p.Set("incident", incident.JSObject())
	return r
}

// Ior returns the Ior property of class RefractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.refractblock#ior
func (r *RefractBlock) Ior() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("ior")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetIor sets the Ior property of class RefractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.refractblock#ior
func (r *RefractBlock) SetIor(ior *NodeMaterialConnectionPoint) *RefractBlock {
	r.p.Set("ior", ior.JSObject())
	return r
}

// Normal returns the Normal property of class RefractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.refractblock#normal
func (r *RefractBlock) Normal() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("normal")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetNormal sets the Normal property of class RefractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.refractblock#normal
func (r *RefractBlock) SetNormal(normal *NodeMaterialConnectionPoint) *RefractBlock {
	r.p.Set("normal", normal.JSObject())
	return r
}

// Output returns the Output property of class RefractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.refractblock#output
func (r *RefractBlock) Output() *NodeMaterialConnectionPoint {
	retVal := r.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, r.ctx)
}

// SetOutput sets the Output property of class RefractBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.refractblock#output
func (r *RefractBlock) SetOutput(output *NodeMaterialConnectionPoint) *RefractBlock {
	r.p.Set("output", output.JSObject())
	return r
}
