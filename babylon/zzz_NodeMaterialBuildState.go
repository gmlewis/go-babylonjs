// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// NodeMaterialBuildState represents a babylon.js NodeMaterialBuildState.
// Class used to store node based material build state
type NodeMaterialBuildState struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (n *NodeMaterialBuildState) JSObject() js.Value { return n.p }

// NodeMaterialBuildState returns a NodeMaterialBuildState JavaScript class.
func (ba *Babylon) NodeMaterialBuildState() *NodeMaterialBuildState {
	p := ba.ctx.Get("NodeMaterialBuildState")
	return NodeMaterialBuildStateFromJSObject(p, ba.ctx)
}

// NodeMaterialBuildStateFromJSObject returns a wrapped NodeMaterialBuildState JavaScript class.
func NodeMaterialBuildStateFromJSObject(p js.Value, ctx js.Value) *NodeMaterialBuildState {
	return &NodeMaterialBuildState{p: p, ctx: ctx}
}

// NodeMaterialBuildStateArrayToJSArray returns a JavaScript Array for the wrapped array.
func NodeMaterialBuildStateArrayToJSArray(array []*NodeMaterialBuildState) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Finalize calls the Finalize method on the NodeMaterialBuildState object.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#finalize
func (n *NodeMaterialBuildState) Finalize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	n.p.Call("finalize", args...)
}

// Attributes returns the Attributes property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#attributes
func (n *NodeMaterialBuildState) Attributes() []string {
	retVal := n.p.Get("attributes")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetAttributes sets the Attributes property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#attributes
func (n *NodeMaterialBuildState) SetAttributes(attributes []string) *NodeMaterialBuildState {
	n.p.Set("attributes", attributes)
	return n
}

// CompilationString returns the CompilationString property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#compilationstring
func (n *NodeMaterialBuildState) CompilationString() string {
	retVal := n.p.Get("compilationString")
	return retVal.String()
}

// SetCompilationString sets the CompilationString property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#compilationstring
func (n *NodeMaterialBuildState) SetCompilationString(compilationString string) *NodeMaterialBuildState {
	n.p.Set("compilationString", compilationString)
	return n
}

// Constants returns the Constants property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#constants
func (n *NodeMaterialBuildState) Constants() []string {
	retVal := n.p.Get("constants")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetConstants sets the Constants property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#constants
func (n *NodeMaterialBuildState) SetConstants(constants []string) *NodeMaterialBuildState {
	n.p.Set("constants", constants)
	return n
}

// Counters returns the Counters property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#counters
func (n *NodeMaterialBuildState) Counters() js.Value {
	retVal := n.p.Get("counters")
	return retVal
}

// SetCounters sets the Counters property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#counters
func (n *NodeMaterialBuildState) SetCounters(counters js.Value) *NodeMaterialBuildState {
	n.p.Set("counters", counters)
	return n
}

// Extensions returns the Extensions property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#extensions
func (n *NodeMaterialBuildState) Extensions() js.Value {
	retVal := n.p.Get("extensions")
	return retVal
}

// SetExtensions sets the Extensions property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#extensions
func (n *NodeMaterialBuildState) SetExtensions(extensions js.Value) *NodeMaterialBuildState {
	n.p.Set("extensions", extensions)
	return n
}

// Functions returns the Functions property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#functions
func (n *NodeMaterialBuildState) Functions() js.Value {
	retVal := n.p.Get("functions")
	return retVal
}

// SetFunctions sets the Functions property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#functions
func (n *NodeMaterialBuildState) SetFunctions(functions js.Value) *NodeMaterialBuildState {
	n.p.Set("functions", functions)
	return n
}

// Samplers returns the Samplers property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#samplers
func (n *NodeMaterialBuildState) Samplers() []string {
	retVal := n.p.Get("samplers")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetSamplers sets the Samplers property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#samplers
func (n *NodeMaterialBuildState) SetSamplers(samplers []string) *NodeMaterialBuildState {
	n.p.Set("samplers", samplers)
	return n
}

// SharedData returns the SharedData property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#shareddata
func (n *NodeMaterialBuildState) SharedData() *NodeMaterialBuildStateSharedData {
	retVal := n.p.Get("sharedData")
	return NodeMaterialBuildStateSharedDataFromJSObject(retVal, n.ctx)
}

// SetSharedData sets the SharedData property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#shareddata
func (n *NodeMaterialBuildState) SetSharedData(sharedData *NodeMaterialBuildStateSharedData) *NodeMaterialBuildState {
	n.p.Set("sharedData", sharedData.JSObject())
	return n
}

// SupportUniformBuffers returns the SupportUniformBuffers property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#supportuniformbuffers
func (n *NodeMaterialBuildState) SupportUniformBuffers() bool {
	retVal := n.p.Get("supportUniformBuffers")
	return retVal.Bool()
}

// SetSupportUniformBuffers sets the SupportUniformBuffers property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#supportuniformbuffers
func (n *NodeMaterialBuildState) SetSupportUniformBuffers(supportUniformBuffers bool) *NodeMaterialBuildState {
	n.p.Set("supportUniformBuffers", supportUniformBuffers)
	return n
}

// Target returns the Target property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#target
func (n *NodeMaterialBuildState) Target() js.Value {
	retVal := n.p.Get("target")
	return retVal
}

// SetTarget sets the Target property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#target
func (n *NodeMaterialBuildState) SetTarget(target js.Value) *NodeMaterialBuildState {
	n.p.Set("target", target)
	return n
}

// Uniforms returns the Uniforms property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#uniforms
func (n *NodeMaterialBuildState) Uniforms() []string {
	retVal := n.p.Get("uniforms")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetUniforms sets the Uniforms property of class NodeMaterialBuildState.
//
// https://doc.babylonjs.com/api/classes/babylon.nodematerialbuildstate#uniforms
func (n *NodeMaterialBuildState) SetUniforms(uniforms []string) *NodeMaterialBuildState {
	n.p.Set("uniforms", uniforms)
	return n
}
