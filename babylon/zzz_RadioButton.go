// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RadioButton represents a babylon.js RadioButton.
// Class used to create radio button controls
type RadioButton struct {
	*Control
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RadioButton) JSObject() js.Value { return r.p }

// RadioButton returns a RadioButton JavaScript class.
func (gui *GUI) RadioButton() *RadioButton {
	p := gui.ctx.Get("RadioButton")
	return RadioButtonFromJSObject(p, gui.ctx)
}

// RadioButtonFromJSObject returns a wrapped RadioButton JavaScript class.
func RadioButtonFromJSObject(p js.Value, ctx js.Value) *RadioButton {
	return &RadioButton{Control: ControlFromJSObject(p, ctx), ctx: ctx}
}

// RadioButtonArrayToJSArray returns a JavaScript Array for the wrapped array.
func RadioButtonArrayToJSArray(array []*RadioButton) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewRadioButtonOpts contains optional parameters for NewRadioButton.
type NewRadioButtonOpts struct {
	Name *string
}

// NewRadioButton returns a new RadioButton object.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton
func (gui *GUI) NewRadioButton(opts *NewRadioButtonOpts) *RadioButton {
	if opts == nil {
		opts = &NewRadioButtonOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.Name == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.Name)
	}

	p := gui.ctx.Get("RadioButton").New(args...)
	return RadioButtonFromJSObject(p, gui.ctx)
}

// AddRadioButtonWithHeader calls the AddRadioButtonWithHeader method on the RadioButton object.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#addradiobuttonwithheader
func (r *RadioButton) AddRadioButtonWithHeader(title string, group string, isChecked bool, onValueChanged JSFunc) *StackPanel {

	args := make([]interface{}, 0, 4+0)

	args = append(args, title)
	args = append(args, group)
	args = append(args, isChecked)
	args = append(args, js.FuncOf(onValueChanged))

	retVal := r.p.Call("AddRadioButtonWithHeader", args...)
	return StackPanelFromJSObject(retVal, r.ctx)
}

// _draw calls the _draw method on the RadioButton object.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#_draw
func (r *RadioButton) _draw(context js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, context)

	r.p.Call("_draw", args...)
}

// _onPointerDown calls the _onPointerDown method on the RadioButton object.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#_onpointerdown
func (r *RadioButton) _onPointerDown(target *Control, coordinates *Vector2, pointerId float64, buttonIndex float64) bool {

	args := make([]interface{}, 0, 4+0)

	args = append(args, target.JSObject())
	args = append(args, coordinates.JSObject())
	args = append(args, pointerId)
	args = append(args, buttonIndex)

	retVal := r.p.Call("_onPointerDown", args...)
	return retVal.Bool()
}

// Background returns the Background property of class RadioButton.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#background
func (r *RadioButton) Background() string {
	retVal := r.p.Get("background")
	return retVal.String()
}

// SetBackground sets the Background property of class RadioButton.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#background
func (r *RadioButton) SetBackground(background string) *RadioButton {
	r.p.Set("background", background)
	return r
}

// CheckSizeRatio returns the CheckSizeRatio property of class RadioButton.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#checksizeratio
func (r *RadioButton) CheckSizeRatio() float64 {
	retVal := r.p.Get("checkSizeRatio")
	return retVal.Float()
}

// SetCheckSizeRatio sets the CheckSizeRatio property of class RadioButton.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#checksizeratio
func (r *RadioButton) SetCheckSizeRatio(checkSizeRatio float64) *RadioButton {
	r.p.Set("checkSizeRatio", checkSizeRatio)
	return r
}

// Group returns the Group property of class RadioButton.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#group
func (r *RadioButton) Group() string {
	retVal := r.p.Get("group")
	return retVal.String()
}

// SetGroup sets the Group property of class RadioButton.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#group
func (r *RadioButton) SetGroup(group string) *RadioButton {
	r.p.Set("group", group)
	return r
}

// IsChecked returns the IsChecked property of class RadioButton.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#ischecked
func (r *RadioButton) IsChecked() bool {
	retVal := r.p.Get("isChecked")
	return retVal.Bool()
}

// SetIsChecked sets the IsChecked property of class RadioButton.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#ischecked
func (r *RadioButton) SetIsChecked(isChecked bool) *RadioButton {
	r.p.Set("isChecked", isChecked)
	return r
}

// Name returns the Name property of class RadioButton.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#name
func (r *RadioButton) Name() string {
	retVal := r.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class RadioButton.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#name
func (r *RadioButton) SetName(name string) *RadioButton {
	r.p.Set("name", name)
	return r
}

// OnIsCheckedChangedObservable returns the OnIsCheckedChangedObservable property of class RadioButton.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#onischeckedchangedobservable
func (r *RadioButton) OnIsCheckedChangedObservable() *Observable {
	retVal := r.p.Get("onIsCheckedChangedObservable")
	return ObservableFromJSObject(retVal, r.ctx)
}

// SetOnIsCheckedChangedObservable sets the OnIsCheckedChangedObservable property of class RadioButton.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#onischeckedchangedobservable
func (r *RadioButton) SetOnIsCheckedChangedObservable(onIsCheckedChangedObservable *Observable) *RadioButton {
	r.p.Set("onIsCheckedChangedObservable", onIsCheckedChangedObservable.JSObject())
	return r
}

// Thickness returns the Thickness property of class RadioButton.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#thickness
func (r *RadioButton) Thickness() float64 {
	retVal := r.p.Get("thickness")
	return retVal.Float()
}

// SetThickness sets the Thickness property of class RadioButton.
//
// https://doc.babylonjs.com/api/classes/babylon.radiobutton#thickness
func (r *RadioButton) SetThickness(thickness float64) *RadioButton {
	r.p.Set("thickness", thickness)
	return r
}
