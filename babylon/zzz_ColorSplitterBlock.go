// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ColorSplitterBlock represents a babylon.js ColorSplitterBlock.
// Block used to expand a Color3/4 into 4 outputs (one for each component)
type ColorSplitterBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *ColorSplitterBlock) JSObject() js.Value { return c.p }

// ColorSplitterBlock returns a ColorSplitterBlock JavaScript class.
func (ba *Babylon) ColorSplitterBlock() *ColorSplitterBlock {
	p := ba.ctx.Get("ColorSplitterBlock")
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

// ColorSplitterBlockFromJSObject returns a wrapped ColorSplitterBlock JavaScript class.
func ColorSplitterBlockFromJSObject(p js.Value, ctx js.Value) *ColorSplitterBlock {
	return &ColorSplitterBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// ColorSplitterBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func ColorSplitterBlockArrayToJSArray(array []*ColorSplitterBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewColorSplitterBlock returns a new ColorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock
func (ba *Babylon) NewColorSplitterBlock(name string) *ColorSplitterBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("ColorSplitterBlock").New(args...)
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the ColorSplitterBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock#getclassname
func (c *ColorSplitterBlock) GetClassName() string {

	retVal := c.p.Call("getClassName")
	return retVal.String()
}

/*

// A returns the A property of class ColorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock#a
func (c *ColorSplitterBlock) A(a *NodeMaterialConnectionPoint) *ColorSplitterBlock {
	p := ba.ctx.Get("ColorSplitterBlock").New(a.JSObject())
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetA sets the A property of class ColorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock#a
func (c *ColorSplitterBlock) SetA(a *NodeMaterialConnectionPoint) *ColorSplitterBlock {
	p := ba.ctx.Get("ColorSplitterBlock").New(a.JSObject())
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

// B returns the B property of class ColorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock#b
func (c *ColorSplitterBlock) B(b *NodeMaterialConnectionPoint) *ColorSplitterBlock {
	p := ba.ctx.Get("ColorSplitterBlock").New(b.JSObject())
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetB sets the B property of class ColorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock#b
func (c *ColorSplitterBlock) SetB(b *NodeMaterialConnectionPoint) *ColorSplitterBlock {
	p := ba.ctx.Get("ColorSplitterBlock").New(b.JSObject())
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

// G returns the G property of class ColorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock#g
func (c *ColorSplitterBlock) G(g *NodeMaterialConnectionPoint) *ColorSplitterBlock {
	p := ba.ctx.Get("ColorSplitterBlock").New(g.JSObject())
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetG sets the G property of class ColorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock#g
func (c *ColorSplitterBlock) SetG(g *NodeMaterialConnectionPoint) *ColorSplitterBlock {
	p := ba.ctx.Get("ColorSplitterBlock").New(g.JSObject())
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

// R returns the R property of class ColorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock#r
func (c *ColorSplitterBlock) R(r *NodeMaterialConnectionPoint) *ColorSplitterBlock {
	p := ba.ctx.Get("ColorSplitterBlock").New(r.JSObject())
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetR sets the R property of class ColorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock#r
func (c *ColorSplitterBlock) SetR(r *NodeMaterialConnectionPoint) *ColorSplitterBlock {
	p := ba.ctx.Get("ColorSplitterBlock").New(r.JSObject())
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

// RgbIn returns the RgbIn property of class ColorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock#rgbin
func (c *ColorSplitterBlock) RgbIn(rgbIn *NodeMaterialConnectionPoint) *ColorSplitterBlock {
	p := ba.ctx.Get("ColorSplitterBlock").New(rgbIn.JSObject())
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetRgbIn sets the RgbIn property of class ColorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock#rgbin
func (c *ColorSplitterBlock) SetRgbIn(rgbIn *NodeMaterialConnectionPoint) *ColorSplitterBlock {
	p := ba.ctx.Get("ColorSplitterBlock").New(rgbIn.JSObject())
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

// RgbOut returns the RgbOut property of class ColorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock#rgbout
func (c *ColorSplitterBlock) RgbOut(rgbOut *NodeMaterialConnectionPoint) *ColorSplitterBlock {
	p := ba.ctx.Get("ColorSplitterBlock").New(rgbOut.JSObject())
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetRgbOut sets the RgbOut property of class ColorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock#rgbout
func (c *ColorSplitterBlock) SetRgbOut(rgbOut *NodeMaterialConnectionPoint) *ColorSplitterBlock {
	p := ba.ctx.Get("ColorSplitterBlock").New(rgbOut.JSObject())
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

// Rgba returns the Rgba property of class ColorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock#rgba
func (c *ColorSplitterBlock) Rgba(rgba *NodeMaterialConnectionPoint) *ColorSplitterBlock {
	p := ba.ctx.Get("ColorSplitterBlock").New(rgba.JSObject())
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

// SetRgba sets the Rgba property of class ColorSplitterBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.colorsplitterblock#rgba
func (c *ColorSplitterBlock) SetRgba(rgba *NodeMaterialConnectionPoint) *ColorSplitterBlock {
	p := ba.ctx.Get("ColorSplitterBlock").New(rgba.JSObject())
	return ColorSplitterBlockFromJSObject(p, ba.ctx)
}

*/
