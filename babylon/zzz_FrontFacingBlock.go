// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// FrontFacingBlock represents a babylon.js FrontFacingBlock.
// Block used to test if the fragment shader is front facing
type FrontFacingBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (f *FrontFacingBlock) JSObject() js.Value { return f.p }

// FrontFacingBlock returns a FrontFacingBlock JavaScript class.
func (ba *Babylon) FrontFacingBlock() *FrontFacingBlock {
	p := ba.ctx.Get("FrontFacingBlock")
	return FrontFacingBlockFromJSObject(p, ba.ctx)
}

// FrontFacingBlockFromJSObject returns a wrapped FrontFacingBlock JavaScript class.
func FrontFacingBlockFromJSObject(p js.Value, ctx js.Value) *FrontFacingBlock {
	return &FrontFacingBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// FrontFacingBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func FrontFacingBlockArrayToJSArray(array []*FrontFacingBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewFrontFacingBlock returns a new FrontFacingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.frontfacingblock
func (ba *Babylon) NewFrontFacingBlock(name string) *FrontFacingBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("FrontFacingBlock").New(args...)
	return FrontFacingBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the FrontFacingBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.frontfacingblock#getclassname
func (f *FrontFacingBlock) GetClassName() string {

	retVal := f.p.Call("getClassName")
	return retVal.String()
}

// Output returns the Output property of class FrontFacingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.frontfacingblock#output
func (f *FrontFacingBlock) Output() *NodeMaterialConnectionPoint {
	retVal := f.p.Get("output")
	return NodeMaterialConnectionPointFromJSObject(retVal, f.ctx)
}

// SetOutput sets the Output property of class FrontFacingBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.frontfacingblock#output
func (f *FrontFacingBlock) SetOutput(output *NodeMaterialConnectionPoint) *FrontFacingBlock {
	f.p.Set("output", output.JSObject())
	return f
}
