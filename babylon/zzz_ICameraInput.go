// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ICameraInput represents a babylon.js ICameraInput.
// This is the contract to implement in order to create a new input class.
// Inputs are dealing with listening to user actions and moving the camera accordingly.
type ICameraInput struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ICameraInput) JSObject() js.Value { return i.p }

// ICameraInput returns a ICameraInput JavaScript class.
func (ba *Babylon) ICameraInput() *ICameraInput {
	p := ba.ctx.Get("ICameraInput")
	return ICameraInputFromJSObject(p, ba.ctx)
}

// ICameraInputFromJSObject returns a wrapped ICameraInput JavaScript class.
func ICameraInputFromJSObject(p js.Value, ctx js.Value) *ICameraInput {
	return &ICameraInput{p: p, ctx: ctx}
}

// ICameraInputArrayToJSArray returns a JavaScript Array for the wrapped array.
func ICameraInputArrayToJSArray(array []*ICameraInput) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// ICameraInputAttachControlOpts contains optional parameters for ICameraInput.AttachControl.
type ICameraInputAttachControlOpts struct {
	NoPreventDefault *bool
}

// AttachControl calls the AttachControl method on the ICameraInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.icamerainput#attachcontrol
func (i *ICameraInput) AttachControl(element js.Value, opts *ICameraInputAttachControlOpts) {
	if opts == nil {
		opts = &ICameraInputAttachControlOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, element)

	if opts.NoPreventDefault == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoPreventDefault)
	}

	i.p.Call("attachControl", args...)
}

// DetachControl calls the DetachControl method on the ICameraInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.icamerainput#detachcontrol
func (i *ICameraInput) DetachControl(element js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, element)

	i.p.Call("detachControl", args...)
}

// GetClassName calls the GetClassName method on the ICameraInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.icamerainput#getclassname
func (i *ICameraInput) GetClassName() string {

	retVal := i.p.Call("getClassName")
	return retVal.String()
}

// GetSimpleName calls the GetSimpleName method on the ICameraInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.icamerainput#getsimplename
func (i *ICameraInput) GetSimpleName() string {

	retVal := i.p.Call("getSimpleName")
	return retVal.String()
}

/*

// Camera returns the Camera property of class ICameraInput.
//
// https://doc.babylonjs.com/api/classes/babylon.icamerainput#camera
func (i *ICameraInput) Camera(camera *Camera) *ICameraInput {
	p := ba.ctx.Get("ICameraInput").New(camera.JSObject())
	return ICameraInputFromJSObject(p, ba.ctx)
}

// SetCamera sets the Camera property of class ICameraInput.
//
// https://doc.babylonjs.com/api/classes/babylon.icamerainput#camera
func (i *ICameraInput) SetCamera(camera *Camera) *ICameraInput {
	p := ba.ctx.Get("ICameraInput").New(camera.JSObject())
	return ICameraInputFromJSObject(p, ba.ctx)
}

// CheckInputs returns the CheckInputs property of class ICameraInput.
//
// https://doc.babylonjs.com/api/classes/babylon.icamerainput#checkinputs
func (i *ICameraInput) CheckInputs(checkInputs func()) *ICameraInput {
	p := ba.ctx.Get("ICameraInput").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {checkInputs(); return nil}))
	return ICameraInputFromJSObject(p, ba.ctx)
}

// SetCheckInputs sets the CheckInputs property of class ICameraInput.
//
// https://doc.babylonjs.com/api/classes/babylon.icamerainput#checkinputs
func (i *ICameraInput) SetCheckInputs(checkInputs func()) *ICameraInput {
	p := ba.ctx.Get("ICameraInput").New(js.FuncOf(func(this js.Value, args []js.Value) interface{} {checkInputs(); return nil}))
	return ICameraInputFromJSObject(p, ba.ctx)
}

*/
