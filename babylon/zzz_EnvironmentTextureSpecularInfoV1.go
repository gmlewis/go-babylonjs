// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// EnvironmentTextureSpecularInfoV1 represents a babylon.js EnvironmentTextureSpecularInfoV1.
// Defines the specular data enclosed in the file.
// This corresponds to the version 1 of the data.
type EnvironmentTextureSpecularInfoV1 struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *EnvironmentTextureSpecularInfoV1) JSObject() js.Value { return e.p }

// EnvironmentTextureSpecularInfoV1 returns a EnvironmentTextureSpecularInfoV1 JavaScript class.
func (ba *Babylon) EnvironmentTextureSpecularInfoV1() *EnvironmentTextureSpecularInfoV1 {
	p := ba.ctx.Get("EnvironmentTextureSpecularInfoV1")
	return EnvironmentTextureSpecularInfoV1FromJSObject(p, ba.ctx)
}

// EnvironmentTextureSpecularInfoV1FromJSObject returns a wrapped EnvironmentTextureSpecularInfoV1 JavaScript class.
func EnvironmentTextureSpecularInfoV1FromJSObject(p js.Value, ctx js.Value) *EnvironmentTextureSpecularInfoV1 {
	return &EnvironmentTextureSpecularInfoV1{p: p, ctx: ctx}
}

// EnvironmentTextureSpecularInfoV1ArrayToJSArray returns a JavaScript Array for the wrapped array.
func EnvironmentTextureSpecularInfoV1ArrayToJSArray(array []*EnvironmentTextureSpecularInfoV1) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// LodGenerationScale returns the LodGenerationScale property of class EnvironmentTextureSpecularInfoV1.
//
// https://doc.babylonjs.com/api/classes/babylon.environmenttexturespecularinfov1#lodgenerationscale
func (e *EnvironmentTextureSpecularInfoV1) LodGenerationScale() float64 {
	retVal := e.p.Get("lodGenerationScale")
	return retVal.Float()
}

// SetLodGenerationScale sets the LodGenerationScale property of class EnvironmentTextureSpecularInfoV1.
//
// https://doc.babylonjs.com/api/classes/babylon.environmenttexturespecularinfov1#lodgenerationscale
func (e *EnvironmentTextureSpecularInfoV1) SetLodGenerationScale(lodGenerationScale float64) *EnvironmentTextureSpecularInfoV1 {
	e.p.Set("lodGenerationScale", lodGenerationScale)
	return e
}

// Mipmaps returns the Mipmaps property of class EnvironmentTextureSpecularInfoV1.
//
// https://doc.babylonjs.com/api/classes/babylon.environmenttexturespecularinfov1#mipmaps
func (e *EnvironmentTextureSpecularInfoV1) Mipmaps() []*BufferImageData {
	retVal := e.p.Get("mipmaps")
	result := []*BufferImageData{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, BufferImageDataFromJSObject(retVal.Index(ri), e.ctx))
	}
	return result
}

// SetMipmaps sets the Mipmaps property of class EnvironmentTextureSpecularInfoV1.
//
// https://doc.babylonjs.com/api/classes/babylon.environmenttexturespecularinfov1#mipmaps
func (e *EnvironmentTextureSpecularInfoV1) SetMipmaps(mipmaps []*BufferImageData) *EnvironmentTextureSpecularInfoV1 {
	e.p.Set("mipmaps", mipmaps)
	return e
}

// SpecularDataPosition returns the SpecularDataPosition property of class EnvironmentTextureSpecularInfoV1.
//
// https://doc.babylonjs.com/api/classes/babylon.environmenttexturespecularinfov1#speculardataposition
func (e *EnvironmentTextureSpecularInfoV1) SpecularDataPosition() float64 {
	retVal := e.p.Get("specularDataPosition")
	return retVal.Float()
}

// SetSpecularDataPosition sets the SpecularDataPosition property of class EnvironmentTextureSpecularInfoV1.
//
// https://doc.babylonjs.com/api/classes/babylon.environmenttexturespecularinfov1#speculardataposition
func (e *EnvironmentTextureSpecularInfoV1) SetSpecularDataPosition(specularDataPosition float64) *EnvironmentTextureSpecularInfoV1 {
	e.p.Set("specularDataPosition", specularDataPosition)
	return e
}
