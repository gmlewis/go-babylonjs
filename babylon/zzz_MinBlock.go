// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MinBlock represents a babylon.js MinBlock.
// Block used to get the min of 2 values
type MinBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MinBlock) JSObject() js.Value { return m.p }

// MinBlock returns a MinBlock JavaScript class.
func (ba *Babylon) MinBlock() *MinBlock {
	p := ba.ctx.Get("MinBlock")
	return MinBlockFromJSObject(p, ba.ctx)
}

// MinBlockFromJSObject returns a wrapped MinBlock JavaScript class.
func MinBlockFromJSObject(p js.Value, ctx js.Value) *MinBlock {
	return &MinBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// MinBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func MinBlockArrayToJSArray(array []*MinBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewMinBlock returns a new MinBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.minblock
func (ba *Babylon) NewMinBlock(name string) *MinBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("MinBlock").New(args...)
	return MinBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the MinBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.minblock#getclassname
func (m *MinBlock) GetClassName() string {

	retVal := m.p.Call("getClassName")
	return retVal.String()
}

/*

// Left returns the Left property of class MinBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.minblock#left
func (m *MinBlock) Left(left *NodeMaterialConnectionPoint) *MinBlock {
	p := ba.ctx.Get("MinBlock").New(left.JSObject())
	return MinBlockFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class MinBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.minblock#left
func (m *MinBlock) SetLeft(left *NodeMaterialConnectionPoint) *MinBlock {
	p := ba.ctx.Get("MinBlock").New(left.JSObject())
	return MinBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class MinBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.minblock#output
func (m *MinBlock) Output(output *NodeMaterialConnectionPoint) *MinBlock {
	p := ba.ctx.Get("MinBlock").New(output.JSObject())
	return MinBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class MinBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.minblock#output
func (m *MinBlock) SetOutput(output *NodeMaterialConnectionPoint) *MinBlock {
	p := ba.ctx.Get("MinBlock").New(output.JSObject())
	return MinBlockFromJSObject(p, ba.ctx)
}

// Right returns the Right property of class MinBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.minblock#right
func (m *MinBlock) Right(right *NodeMaterialConnectionPoint) *MinBlock {
	p := ba.ctx.Get("MinBlock").New(right.JSObject())
	return MinBlockFromJSObject(p, ba.ctx)
}

// SetRight sets the Right property of class MinBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.minblock#right
func (m *MinBlock) SetRight(right *NodeMaterialConnectionPoint) *MinBlock {
	p := ba.ctx.Get("MinBlock").New(right.JSObject())
	return MinBlockFromJSObject(p, ba.ctx)
}

*/
