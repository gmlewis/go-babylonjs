// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// VideoDome represents a babylon.js VideoDome.
// Display a 360/180 degree video on an approximately spherical surface, useful for VR applications or skyboxes.
// As a subclass of TransformNode, this allow parenting to the camera or multiple videos with different locations in the scene.
// This class achieves its effect with a VideoTexture and a correctly configured BackgroundMaterial on an inverted sphere.
// Potential additions to this helper include zoom and and non-infinite distance rendering effects.
type VideoDome struct {
	*TransformNode
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *VideoDome) JSObject() js.Value { return v.p }

// VideoDome returns a VideoDome JavaScript class.
func (ba *Babylon) VideoDome() *VideoDome {
	p := ba.ctx.Get("VideoDome")
	return VideoDomeFromJSObject(p, ba.ctx)
}

// VideoDomeFromJSObject returns a wrapped VideoDome JavaScript class.
func VideoDomeFromJSObject(p js.Value, ctx js.Value) *VideoDome {
	return &VideoDome{TransformNode: TransformNodeFromJSObject(p, ctx), ctx: ctx}
}

// VideoDomeArrayToJSArray returns a JavaScript Array for the wrapped array.
func VideoDomeArrayToJSArray(array []*VideoDome) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewVideoDome returns a new VideoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome
func (ba *Babylon) NewVideoDome(name string, urlsOrVideo string, options js.Value, scene *Scene) *VideoDome {

	args := make([]interface{}, 0, 4+0)

	args = append(args, name)
	args = append(args, urlsOrVideo)
	args = append(args, options)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("VideoDome").New(args...)
	return VideoDomeFromJSObject(p, ba.ctx)
}

// VideoDomeDisposeOpts contains optional parameters for VideoDome.Dispose.
type VideoDomeDisposeOpts struct {
	DoNotRecurse               *bool
	DisposeMaterialAndTextures *bool
}

// Dispose calls the Dispose method on the VideoDome object.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome#dispose
func (v *VideoDome) Dispose(opts *VideoDomeDisposeOpts) {
	if opts == nil {
		opts = &VideoDomeDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DoNotRecurse == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DoNotRecurse)
	}
	if opts.DisposeMaterialAndTextures == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DisposeMaterialAndTextures)
	}

	v.p.Call("dispose", args...)
}

// FovMultiplier returns the FovMultiplier property of class VideoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome#fovmultiplier
func (v *VideoDome) FovMultiplier() float64 {
	retVal := v.p.Get("fovMultiplier")
	return retVal.Float()
}

// SetFovMultiplier sets the FovMultiplier property of class VideoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome#fovmultiplier
func (v *VideoDome) SetFovMultiplier(fovMultiplier float64) *VideoDome {
	v.p.Set("fovMultiplier", fovMultiplier)
	return v
}

// HalfDome returns the HalfDome property of class VideoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome#halfdome
func (v *VideoDome) HalfDome() bool {
	retVal := v.p.Get("halfDome")
	return retVal.Bool()
}

// SetHalfDome sets the HalfDome property of class VideoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome#halfdome
func (v *VideoDome) SetHalfDome(halfDome bool) *VideoDome {
	v.p.Set("halfDome", halfDome)
	return v
}

// MODE_MONOSCOPIC returns the MODE_MONOSCOPIC property of class VideoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome#mode_monoscopic
func (v *VideoDome) MODE_MONOSCOPIC() float64 {
	retVal := v.p.Get("MODE_MONOSCOPIC")
	return retVal.Float()
}

// SetMODE_MONOSCOPIC sets the MODE_MONOSCOPIC property of class VideoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome#mode_monoscopic
func (v *VideoDome) SetMODE_MONOSCOPIC(MODE_MONOSCOPIC float64) *VideoDome {
	v.p.Set("MODE_MONOSCOPIC", MODE_MONOSCOPIC)
	return v
}

// MODE_SIDEBYSIDE returns the MODE_SIDEBYSIDE property of class VideoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome#mode_sidebyside
func (v *VideoDome) MODE_SIDEBYSIDE() float64 {
	retVal := v.p.Get("MODE_SIDEBYSIDE")
	return retVal.Float()
}

// SetMODE_SIDEBYSIDE sets the MODE_SIDEBYSIDE property of class VideoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome#mode_sidebyside
func (v *VideoDome) SetMODE_SIDEBYSIDE(MODE_SIDEBYSIDE float64) *VideoDome {
	v.p.Set("MODE_SIDEBYSIDE", MODE_SIDEBYSIDE)
	return v
}

// MODE_TOPBOTTOM returns the MODE_TOPBOTTOM property of class VideoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome#mode_topbottom
func (v *VideoDome) MODE_TOPBOTTOM() float64 {
	retVal := v.p.Get("MODE_TOPBOTTOM")
	return retVal.Float()
}

// SetMODE_TOPBOTTOM sets the MODE_TOPBOTTOM property of class VideoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome#mode_topbottom
func (v *VideoDome) SetMODE_TOPBOTTOM(MODE_TOPBOTTOM float64) *VideoDome {
	v.p.Set("MODE_TOPBOTTOM", MODE_TOPBOTTOM)
	return v
}

// VideoMode returns the VideoMode property of class VideoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome#videomode
func (v *VideoDome) VideoMode() float64 {
	retVal := v.p.Get("videoMode")
	return retVal.Float()
}

// SetVideoMode sets the VideoMode property of class VideoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome#videomode
func (v *VideoDome) SetVideoMode(videoMode float64) *VideoDome {
	v.p.Set("videoMode", videoMode)
	return v
}

// VideoTexture returns the VideoTexture property of class VideoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome#videotexture
func (v *VideoDome) VideoTexture() *VideoTexture {
	retVal := v.p.Get("videoTexture")
	return VideoTextureFromJSObject(retVal, v.ctx)
}

// SetVideoTexture sets the VideoTexture property of class VideoDome.
//
// https://doc.babylonjs.com/api/classes/babylon.videodome#videotexture
func (v *VideoDome) SetVideoTexture(videoTexture *VideoTexture) *VideoDome {
	v.p.Set("videoTexture", videoTexture.JSObject())
	return v
}
