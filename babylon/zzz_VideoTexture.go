// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// VideoTexture represents a babylon.js VideoTexture.
// If you want to display a video in your scene, this is the special texture for that.
// This special texture works similar to other textures, with the exception of a few parameters.
//
// See: https://doc.babylonjs.com/how_to/video_texture
type VideoTexture struct {
	*Texture
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (v *VideoTexture) JSObject() js.Value { return v.p }

// VideoTexture returns a VideoTexture JavaScript class.
func (ba *Babylon) VideoTexture() *VideoTexture {
	p := ba.ctx.Get("VideoTexture")
	return VideoTextureFromJSObject(p, ba.ctx)
}

// VideoTextureFromJSObject returns a wrapped VideoTexture JavaScript class.
func VideoTextureFromJSObject(p js.Value, ctx js.Value) *VideoTexture {
	return &VideoTexture{Texture: TextureFromJSObject(p, ctx), ctx: ctx}
}

// NewVideoTextureOpts contains optional parameters for NewVideoTexture.
type NewVideoTextureOpts struct {
	GenerateMipMaps *JSBool

	InvertY *JSBool

	SamplingMode *JSFloat64

	Settings *JSValue
}

// NewVideoTexture returns a new VideoTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.videotexture
func (ba *Babylon) NewVideoTexture(name string, src string, scene *Scene, opts *NewVideoTextureOpts) *VideoTexture {
	if opts == nil {
		opts = &NewVideoTextureOpts{}
	}

	p := ba.ctx.Get("VideoTexture").New(name, src, scene.JSObject(), opts.GenerateMipMaps.JSObject(), opts.InvertY.JSObject(), opts.SamplingMode.JSObject(), opts.Settings.JSObject())
	return VideoTextureFromJSObject(p, ba.ctx)
}

// TODO: methods
