// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RefractionTexture represents a babylon.js RefractionTexture.
// Creates a refraction texture used by refraction channel of the standard material.
// It is like a mirror but to see through a material.
//
// See: https://doc.babylonjs.com/how_to/reflect#refraction
type RefractionTexture struct{ *RenderTargetTexture }

// JSObject returns the underlying js.Value.
func (r *RefractionTexture) JSObject() js.Value { return r.p }

// RefractionTexture returns a RefractionTexture JavaScript class.
func (ba *Babylon) RefractionTexture() *RefractionTexture {
	p := ba.ctx.Get("RefractionTexture")
	return RefractionTextureFromJSObject(p)
}

// RefractionTextureFromJSObject returns a wrapped RefractionTexture JavaScript class.
func RefractionTextureFromJSObject(p js.Value) *RefractionTexture {
	return &RefractionTexture{RenderTargetTextureFromJSObject(p)}
}

// NewRefractionTextureOpts contains optional parameters for NewRefractionTexture.
type NewRefractionTextureOpts struct {
	GenerateMipMaps *JSBool
}

// NewRefractionTexture returns a new RefractionTexture object.
//
// https://doc.babylonjs.com/api/classes/babylon.refractiontexture
func (ba *Babylon) NewRefractionTexture(name string, size float64, scene *Scene, opts *NewRefractionTextureOpts) *RefractionTexture {
	if opts == nil {
		opts = &NewRefractionTextureOpts{}
	}

	p := ba.ctx.Get("RefractionTexture").New(name, size, scene.JSObject(), opts.GenerateMipMaps)
	return RefractionTextureFromJSObject(p)
}

// TODO: methods
