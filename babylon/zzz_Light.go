// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// Light represents a babylon.js Light.
// Base class of all the lights in Babylon. It groups all the generic information about lights.
// Lights are used, as you would expect, to affect how meshes are seen, in terms of both illumination and colour.
// All meshes allow light to pass through them unless shadow generation is activated. The default number of lights allowed is four but this can be increased.
type Light struct {
	*Node
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (l *Light) JSObject() js.Value { return l.p }

// Light returns a Light JavaScript class.
func (ba *Babylon) Light() *Light {
	p := ba.ctx.Get("Light")
	return LightFromJSObject(p, ba.ctx)
}

// LightFromJSObject returns a wrapped Light JavaScript class.
func LightFromJSObject(p js.Value, ctx js.Value) *Light {
	return &Light{Node: NodeFromJSObject(p, ctx), ctx: ctx}
}

// LightArrayToJSArray returns a JavaScript Array for the wrapped array.
func LightArrayToJSArray(array []*Light) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewLight returns a new Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light
func (ba *Babylon) NewLight(name string, scene *Scene) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, name)
	args = append(args, scene.JSObject())

	p := ba.ctx.Get("Light").New(args...)
	return LightFromJSObject(p, ba.ctx)
}

// LightBindLightOpts contains optional parameters for Light.BindLight.
type LightBindLightOpts struct {
	UsePhysicalLightFalloff *bool
	RebuildInParallel       *bool
}

// BindLight calls the BindLight method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#bindlight
func (l *Light) BindLight(lightIndex float64, scene *Scene, effect *Effect, useSpecular bool, opts *LightBindLightOpts) {
	if opts == nil {
		opts = &LightBindLightOpts{}
	}

	args := make([]interface{}, 0, 4+2)

	args = append(args, lightIndex)
	args = append(args, scene.JSObject())
	args = append(args, effect.JSObject())
	args = append(args, useSpecular)

	if opts.UsePhysicalLightFalloff == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UsePhysicalLightFalloff)
	}
	if opts.RebuildInParallel == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RebuildInParallel)
	}

	l.p.Call("bindLight", args...)
}

// CanAffectMesh calls the CanAffectMesh method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#canaffectmesh
func (l *Light) CanAffectMesh(mesh *AbstractMesh) bool {

	args := make([]interface{}, 0, 1+0)

	args = append(args, mesh.JSObject())

	retVal := l.p.Call("canAffectMesh", args...)
	return retVal.Bool()
}

// Clone calls the Clone method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#clone
func (l *Light) Clone(name string) *Light {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := l.p.Call("clone", args...)
	return LightFromJSObject(retVal, l.ctx)
}

// CompareLightsPriority calls the CompareLightsPriority method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#comparelightspriority
func (l *Light) CompareLightsPriority(a *Light, b *Light) float64 {

	args := make([]interface{}, 0, 2+0)

	args = append(args, a.JSObject())
	args = append(args, b.JSObject())

	retVal := l.p.Call("CompareLightsPriority", args...)
	return retVal.Float()
}

// LightDisposeOpts contains optional parameters for Light.Dispose.
type LightDisposeOpts struct {
	DoNotRecurse               *bool
	DisposeMaterialAndTextures *bool
}

// Dispose calls the Dispose method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#dispose
func (l *Light) Dispose(opts *LightDisposeOpts) {
	if opts == nil {
		opts = &LightDisposeOpts{}
	}

	args := make([]interface{}, 0, 0+2)

	if opts.DoNotRecurse == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DoNotRecurse)
	}
	if opts.DisposeMaterialAndTextures == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.DisposeMaterialAndTextures)
	}

	l.p.Call("dispose", args...)
}

// GetAbsolutePosition calls the GetAbsolutePosition method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#getabsoluteposition
func (l *Light) GetAbsolutePosition() *Vector3 {

	retVal := l.p.Call("getAbsolutePosition")
	return Vector3FromJSObject(retVal, l.ctx)
}

// GetClassName calls the GetClassName method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#getclassname
func (l *Light) GetClassName() string {

	retVal := l.p.Call("getClassName")
	return retVal.String()
}

// GetConstructorFromName calls the GetConstructorFromName method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#getconstructorfromname
func (l *Light) GetConstructorFromName(jsType float64, name string, scene *Scene) js.Value {

	args := make([]interface{}, 0, 3+0)

	args = append(args, jsType)
	args = append(args, name)
	args = append(args, scene.JSObject())

	retVal := l.p.Call("GetConstructorFromName", args...)
	return retVal
}

// GetScaledIntensity calls the GetScaledIntensity method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#getscaledintensity
func (l *Light) GetScaledIntensity() float64 {

	retVal := l.p.Call("getScaledIntensity")
	return retVal.Float()
}

// GetShadowGenerator calls the GetShadowGenerator method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#getshadowgenerator
func (l *Light) GetShadowGenerator() *IShadowGenerator {

	retVal := l.p.Call("getShadowGenerator")
	return IShadowGeneratorFromJSObject(retVal, l.ctx)
}

// GetTypeID calls the GetTypeID method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#gettypeid
func (l *Light) GetTypeID() float64 {

	retVal := l.p.Call("getTypeID")
	return retVal.Float()
}

// Parse calls the Parse method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#parse
func (l *Light) Parse(parsedLight interface{}, scene *Scene) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, parsedLight)
	args = append(args, scene.JSObject())

	retVal := l.p.Call("Parse", args...)
	return LightFromJSObject(retVal, l.ctx)
}

// PrepareLightSpecificDefines calls the PrepareLightSpecificDefines method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#preparelightspecificdefines
func (l *Light) PrepareLightSpecificDefines(defines interface{}, lightIndex float64) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, defines)
	args = append(args, lightIndex)

	l.p.Call("prepareLightSpecificDefines", args...)
}

// Serialize calls the Serialize method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#serialize
func (l *Light) Serialize() interface{} {

	retVal := l.p.Call("serialize")
	return retVal
}

// SetEnabled calls the SetEnabled method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#setenabled
func (l *Light) SetEnabled(value bool) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, value)

	l.p.Call("setEnabled", args...)
}

// LightToStringOpts contains optional parameters for Light.ToString.
type LightToStringOpts struct {
	FullDetails *bool
}

// ToString calls the ToString method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#tostring
func (l *Light) ToString(opts *LightToStringOpts) string {
	if opts == nil {
		opts = &LightToStringOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.FullDetails == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.FullDetails)
	}

	retVal := l.p.Call("toString", args...)
	return retVal.String()
}

// TransferTexturesToEffect calls the TransferTexturesToEffect method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#transfertexturestoeffect
func (l *Light) TransferTexturesToEffect(effect *Effect, lightIndex string) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, lightIndex)

	retVal := l.p.Call("transferTexturesToEffect", args...)
	return LightFromJSObject(retVal, l.ctx)
}

// TransferToEffect calls the TransferToEffect method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#transfertoeffect
func (l *Light) TransferToEffect(effect *Effect, lightIndex string) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, lightIndex)

	retVal := l.p.Call("transferToEffect", args...)
	return LightFromJSObject(retVal, l.ctx)
}

// TransferToNodeMaterialEffect calls the TransferToNodeMaterialEffect method on the Light object.
//
// https://doc.babylonjs.com/api/classes/babylon.light#transfertonodematerialeffect
func (l *Light) TransferToNodeMaterialEffect(effect *Effect, lightDataUniformName string) *Light {

	args := make([]interface{}, 0, 2+0)

	args = append(args, effect.JSObject())
	args = append(args, lightDataUniformName)

	retVal := l.p.Call("transferToNodeMaterialEffect", args...)
	return LightFromJSObject(retVal, l.ctx)
}

// Diffuse returns the Diffuse property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#diffuse
func (l *Light) Diffuse() *Color3 {
	retVal := l.p.Get("diffuse")
	return Color3FromJSObject(retVal, l.ctx)
}

// SetDiffuse sets the Diffuse property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#diffuse
func (l *Light) SetDiffuse(diffuse *Color3) *Light {
	l.p.Set("diffuse", diffuse.JSObject())
	return l
}

// ExcludeWithLayerMask returns the ExcludeWithLayerMask property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#excludewithlayermask
func (l *Light) ExcludeWithLayerMask() float64 {
	retVal := l.p.Get("excludeWithLayerMask")
	return retVal.Float()
}

// SetExcludeWithLayerMask sets the ExcludeWithLayerMask property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#excludewithlayermask
func (l *Light) SetExcludeWithLayerMask(excludeWithLayerMask float64) *Light {
	l.p.Set("excludeWithLayerMask", excludeWithLayerMask)
	return l
}

// FALLOFF_DEFAULT returns the FALLOFF_DEFAULT property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#falloff_default
func (l *Light) FALLOFF_DEFAULT() float64 {
	retVal := l.p.Get("FALLOFF_DEFAULT")
	return retVal.Float()
}

// SetFALLOFF_DEFAULT sets the FALLOFF_DEFAULT property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#falloff_default
func (l *Light) SetFALLOFF_DEFAULT(FALLOFF_DEFAULT float64) *Light {
	l.p.Set("FALLOFF_DEFAULT", FALLOFF_DEFAULT)
	return l
}

// FALLOFF_GLTF returns the FALLOFF_GLTF property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#falloff_gltf
func (l *Light) FALLOFF_GLTF() float64 {
	retVal := l.p.Get("FALLOFF_GLTF")
	return retVal.Float()
}

// SetFALLOFF_GLTF sets the FALLOFF_GLTF property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#falloff_gltf
func (l *Light) SetFALLOFF_GLTF(FALLOFF_GLTF float64) *Light {
	l.p.Set("FALLOFF_GLTF", FALLOFF_GLTF)
	return l
}

// FALLOFF_PHYSICAL returns the FALLOFF_PHYSICAL property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#falloff_physical
func (l *Light) FALLOFF_PHYSICAL() float64 {
	retVal := l.p.Get("FALLOFF_PHYSICAL")
	return retVal.Float()
}

// SetFALLOFF_PHYSICAL sets the FALLOFF_PHYSICAL property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#falloff_physical
func (l *Light) SetFALLOFF_PHYSICAL(FALLOFF_PHYSICAL float64) *Light {
	l.p.Set("FALLOFF_PHYSICAL", FALLOFF_PHYSICAL)
	return l
}

// FALLOFF_STANDARD returns the FALLOFF_STANDARD property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#falloff_standard
func (l *Light) FALLOFF_STANDARD() float64 {
	retVal := l.p.Get("FALLOFF_STANDARD")
	return retVal.Float()
}

// SetFALLOFF_STANDARD sets the FALLOFF_STANDARD property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#falloff_standard
func (l *Light) SetFALLOFF_STANDARD(FALLOFF_STANDARD float64) *Light {
	l.p.Set("FALLOFF_STANDARD", FALLOFF_STANDARD)
	return l
}

// FalloffType returns the FalloffType property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#fallofftype
func (l *Light) FalloffType() float64 {
	retVal := l.p.Get("falloffType")
	return retVal.Float()
}

// SetFalloffType sets the FalloffType property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#fallofftype
func (l *Light) SetFalloffType(falloffType float64) *Light {
	l.p.Set("falloffType", falloffType)
	return l
}

// INTENSITYMODE_AUTOMATIC returns the INTENSITYMODE_AUTOMATIC property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#intensitymode_automatic
func (l *Light) INTENSITYMODE_AUTOMATIC() float64 {
	retVal := l.p.Get("INTENSITYMODE_AUTOMATIC")
	return retVal.Float()
}

// SetINTENSITYMODE_AUTOMATIC sets the INTENSITYMODE_AUTOMATIC property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#intensitymode_automatic
func (l *Light) SetINTENSITYMODE_AUTOMATIC(INTENSITYMODE_AUTOMATIC float64) *Light {
	l.p.Set("INTENSITYMODE_AUTOMATIC", INTENSITYMODE_AUTOMATIC)
	return l
}

// INTENSITYMODE_ILLUMINANCE returns the INTENSITYMODE_ILLUMINANCE property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#intensitymode_illuminance
func (l *Light) INTENSITYMODE_ILLUMINANCE() float64 {
	retVal := l.p.Get("INTENSITYMODE_ILLUMINANCE")
	return retVal.Float()
}

// SetINTENSITYMODE_ILLUMINANCE sets the INTENSITYMODE_ILLUMINANCE property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#intensitymode_illuminance
func (l *Light) SetINTENSITYMODE_ILLUMINANCE(INTENSITYMODE_ILLUMINANCE float64) *Light {
	l.p.Set("INTENSITYMODE_ILLUMINANCE", INTENSITYMODE_ILLUMINANCE)
	return l
}

// INTENSITYMODE_LUMINANCE returns the INTENSITYMODE_LUMINANCE property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#intensitymode_luminance
func (l *Light) INTENSITYMODE_LUMINANCE() float64 {
	retVal := l.p.Get("INTENSITYMODE_LUMINANCE")
	return retVal.Float()
}

// SetINTENSITYMODE_LUMINANCE sets the INTENSITYMODE_LUMINANCE property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#intensitymode_luminance
func (l *Light) SetINTENSITYMODE_LUMINANCE(INTENSITYMODE_LUMINANCE float64) *Light {
	l.p.Set("INTENSITYMODE_LUMINANCE", INTENSITYMODE_LUMINANCE)
	return l
}

// INTENSITYMODE_LUMINOUSINTENSITY returns the INTENSITYMODE_LUMINOUSINTENSITY property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#intensitymode_luminousintensity
func (l *Light) INTENSITYMODE_LUMINOUSINTENSITY() float64 {
	retVal := l.p.Get("INTENSITYMODE_LUMINOUSINTENSITY")
	return retVal.Float()
}

// SetINTENSITYMODE_LUMINOUSINTENSITY sets the INTENSITYMODE_LUMINOUSINTENSITY property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#intensitymode_luminousintensity
func (l *Light) SetINTENSITYMODE_LUMINOUSINTENSITY(INTENSITYMODE_LUMINOUSINTENSITY float64) *Light {
	l.p.Set("INTENSITYMODE_LUMINOUSINTENSITY", INTENSITYMODE_LUMINOUSINTENSITY)
	return l
}

// INTENSITYMODE_LUMINOUSPOWER returns the INTENSITYMODE_LUMINOUSPOWER property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#intensitymode_luminouspower
func (l *Light) INTENSITYMODE_LUMINOUSPOWER() float64 {
	retVal := l.p.Get("INTENSITYMODE_LUMINOUSPOWER")
	return retVal.Float()
}

// SetINTENSITYMODE_LUMINOUSPOWER sets the INTENSITYMODE_LUMINOUSPOWER property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#intensitymode_luminouspower
func (l *Light) SetINTENSITYMODE_LUMINOUSPOWER(INTENSITYMODE_LUMINOUSPOWER float64) *Light {
	l.p.Set("INTENSITYMODE_LUMINOUSPOWER", INTENSITYMODE_LUMINOUSPOWER)
	return l
}

// IncludeOnlyWithLayerMask returns the IncludeOnlyWithLayerMask property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#includeonlywithlayermask
func (l *Light) IncludeOnlyWithLayerMask() float64 {
	retVal := l.p.Get("includeOnlyWithLayerMask")
	return retVal.Float()
}

// SetIncludeOnlyWithLayerMask sets the IncludeOnlyWithLayerMask property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#includeonlywithlayermask
func (l *Light) SetIncludeOnlyWithLayerMask(includeOnlyWithLayerMask float64) *Light {
	l.p.Set("includeOnlyWithLayerMask", includeOnlyWithLayerMask)
	return l
}

// Intensity returns the Intensity property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#intensity
func (l *Light) Intensity() float64 {
	retVal := l.p.Get("intensity")
	return retVal.Float()
}

// IntensityMode returns the IntensityMode property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#intensitymode
func (l *Light) IntensityMode() float64 {
	retVal := l.p.Get("intensityMode")
	return retVal.Float()
}

// SetIntensityMode sets the IntensityMode property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#intensitymode
func (l *Light) SetIntensityMode(intensityMode float64) *Light {
	l.p.Set("intensityMode", intensityMode)
	return l
}

// LIGHTMAP_DEFAULT returns the LIGHTMAP_DEFAULT property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lightmap_default
func (l *Light) LIGHTMAP_DEFAULT() float64 {
	retVal := l.p.Get("LIGHTMAP_DEFAULT")
	return retVal.Float()
}

// SetLIGHTMAP_DEFAULT sets the LIGHTMAP_DEFAULT property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lightmap_default
func (l *Light) SetLIGHTMAP_DEFAULT(LIGHTMAP_DEFAULT float64) *Light {
	l.p.Set("LIGHTMAP_DEFAULT", LIGHTMAP_DEFAULT)
	return l
}

// LIGHTMAP_SHADOWSONLY returns the LIGHTMAP_SHADOWSONLY property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lightmap_shadowsonly
func (l *Light) LIGHTMAP_SHADOWSONLY() float64 {
	retVal := l.p.Get("LIGHTMAP_SHADOWSONLY")
	return retVal.Float()
}

// SetLIGHTMAP_SHADOWSONLY sets the LIGHTMAP_SHADOWSONLY property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lightmap_shadowsonly
func (l *Light) SetLIGHTMAP_SHADOWSONLY(LIGHTMAP_SHADOWSONLY float64) *Light {
	l.p.Set("LIGHTMAP_SHADOWSONLY", LIGHTMAP_SHADOWSONLY)
	return l
}

// LIGHTMAP_SPECULAR returns the LIGHTMAP_SPECULAR property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lightmap_specular
func (l *Light) LIGHTMAP_SPECULAR() float64 {
	retVal := l.p.Get("LIGHTMAP_SPECULAR")
	return retVal.Float()
}

// SetLIGHTMAP_SPECULAR sets the LIGHTMAP_SPECULAR property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lightmap_specular
func (l *Light) SetLIGHTMAP_SPECULAR(LIGHTMAP_SPECULAR float64) *Light {
	l.p.Set("LIGHTMAP_SPECULAR", LIGHTMAP_SPECULAR)
	return l
}

// LIGHTTYPEID_DIRECTIONALLIGHT returns the LIGHTTYPEID_DIRECTIONALLIGHT property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lighttypeid_directionallight
func (l *Light) LIGHTTYPEID_DIRECTIONALLIGHT() float64 {
	retVal := l.p.Get("LIGHTTYPEID_DIRECTIONALLIGHT")
	return retVal.Float()
}

// SetLIGHTTYPEID_DIRECTIONALLIGHT sets the LIGHTTYPEID_DIRECTIONALLIGHT property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lighttypeid_directionallight
func (l *Light) SetLIGHTTYPEID_DIRECTIONALLIGHT(LIGHTTYPEID_DIRECTIONALLIGHT float64) *Light {
	l.p.Set("LIGHTTYPEID_DIRECTIONALLIGHT", LIGHTTYPEID_DIRECTIONALLIGHT)
	return l
}

// LIGHTTYPEID_HEMISPHERICLIGHT returns the LIGHTTYPEID_HEMISPHERICLIGHT property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lighttypeid_hemisphericlight
func (l *Light) LIGHTTYPEID_HEMISPHERICLIGHT() float64 {
	retVal := l.p.Get("LIGHTTYPEID_HEMISPHERICLIGHT")
	return retVal.Float()
}

// SetLIGHTTYPEID_HEMISPHERICLIGHT sets the LIGHTTYPEID_HEMISPHERICLIGHT property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lighttypeid_hemisphericlight
func (l *Light) SetLIGHTTYPEID_HEMISPHERICLIGHT(LIGHTTYPEID_HEMISPHERICLIGHT float64) *Light {
	l.p.Set("LIGHTTYPEID_HEMISPHERICLIGHT", LIGHTTYPEID_HEMISPHERICLIGHT)
	return l
}

// LIGHTTYPEID_POINTLIGHT returns the LIGHTTYPEID_POINTLIGHT property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lighttypeid_pointlight
func (l *Light) LIGHTTYPEID_POINTLIGHT() float64 {
	retVal := l.p.Get("LIGHTTYPEID_POINTLIGHT")
	return retVal.Float()
}

// SetLIGHTTYPEID_POINTLIGHT sets the LIGHTTYPEID_POINTLIGHT property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lighttypeid_pointlight
func (l *Light) SetLIGHTTYPEID_POINTLIGHT(LIGHTTYPEID_POINTLIGHT float64) *Light {
	l.p.Set("LIGHTTYPEID_POINTLIGHT", LIGHTTYPEID_POINTLIGHT)
	return l
}

// LIGHTTYPEID_SPOTLIGHT returns the LIGHTTYPEID_SPOTLIGHT property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lighttypeid_spotlight
func (l *Light) LIGHTTYPEID_SPOTLIGHT() float64 {
	retVal := l.p.Get("LIGHTTYPEID_SPOTLIGHT")
	return retVal.Float()
}

// SetLIGHTTYPEID_SPOTLIGHT sets the LIGHTTYPEID_SPOTLIGHT property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lighttypeid_spotlight
func (l *Light) SetLIGHTTYPEID_SPOTLIGHT(LIGHTTYPEID_SPOTLIGHT float64) *Light {
	l.p.Set("LIGHTTYPEID_SPOTLIGHT", LIGHTTYPEID_SPOTLIGHT)
	return l
}

// LightmapMode returns the LightmapMode property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lightmapmode
func (l *Light) LightmapMode() float64 {
	retVal := l.p.Get("lightmapMode")
	return retVal.Float()
}

// SetLightmapMode sets the LightmapMode property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#lightmapmode
func (l *Light) SetLightmapMode(lightmapMode float64) *Light {
	l.p.Set("lightmapMode", lightmapMode)
	return l
}

// Radius returns the Radius property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#radius
func (l *Light) Radius() float64 {
	retVal := l.p.Get("radius")
	return retVal.Float()
}

// SetRadius sets the Radius property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#radius
func (l *Light) SetRadius(radius float64) *Light {
	l.p.Set("radius", radius)
	return l
}

// Range returns the Range property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#range
func (l *Light) Range() float64 {
	retVal := l.p.Get("range")
	return retVal.Float()
}

// SetRange sets the Range property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#range
func (l *Light) SetRange(r float64) *Light {
	l.p.Set("range", r)
	return l
}

// RenderPriority returns the RenderPriority property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#renderpriority
func (l *Light) RenderPriority() float64 {
	retVal := l.p.Get("renderPriority")
	return retVal.Float()
}

// SetRenderPriority sets the RenderPriority property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#renderpriority
func (l *Light) SetRenderPriority(renderPriority float64) *Light {
	l.p.Set("renderPriority", renderPriority)
	return l
}

// ShadowEnabled returns the ShadowEnabled property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#shadowenabled
func (l *Light) ShadowEnabled() bool {
	retVal := l.p.Get("shadowEnabled")
	return retVal.Bool()
}

// SetShadowEnabled sets the ShadowEnabled property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#shadowenabled
func (l *Light) SetShadowEnabled(shadowEnabled bool) *Light {
	l.p.Set("shadowEnabled", shadowEnabled)
	return l
}

// Specular returns the Specular property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#specular
func (l *Light) Specular() *Color3 {
	retVal := l.p.Get("specular")
	return Color3FromJSObject(retVal, l.ctx)
}

// SetSpecular sets the Specular property of class Light.
//
// https://doc.babylonjs.com/api/classes/babylon.light#specular
func (l *Light) SetSpecular(specular *Color3) *Light {
	l.p.Set("specular", specular.JSObject())
	return l
}
