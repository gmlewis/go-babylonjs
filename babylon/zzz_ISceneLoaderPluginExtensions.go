// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ISceneLoaderPluginExtensions represents a babylon.js ISceneLoaderPluginExtensions.
// Interface used by SceneLoader plugins to define supported file extensions
type ISceneLoaderPluginExtensions struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *ISceneLoaderPluginExtensions) JSObject() js.Value { return i.p }

// ISceneLoaderPluginExtensions returns a ISceneLoaderPluginExtensions JavaScript class.
func (ba *Babylon) ISceneLoaderPluginExtensions() *ISceneLoaderPluginExtensions {
	p := ba.ctx.Get("ISceneLoaderPluginExtensions")
	return ISceneLoaderPluginExtensionsFromJSObject(p, ba.ctx)
}

// ISceneLoaderPluginExtensionsFromJSObject returns a wrapped ISceneLoaderPluginExtensions JavaScript class.
func ISceneLoaderPluginExtensionsFromJSObject(p js.Value, ctx js.Value) *ISceneLoaderPluginExtensions {
	return &ISceneLoaderPluginExtensions{p: p, ctx: ctx}
}

// ISceneLoaderPluginExtensionsArrayToJSArray returns a JavaScript Array for the wrapped array.
func ISceneLoaderPluginExtensionsArrayToJSArray(array []*ISceneLoaderPluginExtensions) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

 */
