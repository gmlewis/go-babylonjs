// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DataBuffer represents a babylon.js DataBuffer.
// Class used to store gfx data (like WebGLBuffer)
type DataBuffer struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DataBuffer) JSObject() js.Value { return d.p }

// DataBuffer returns a DataBuffer JavaScript class.
func (ba *Babylon) DataBuffer() *DataBuffer {
	p := ba.ctx.Get("DataBuffer")
	return DataBufferFromJSObject(p, ba.ctx)
}

// DataBufferFromJSObject returns a wrapped DataBuffer JavaScript class.
func DataBufferFromJSObject(p js.Value, ctx js.Value) *DataBuffer {
	return &DataBuffer{p: p, ctx: ctx}
}

// DataBufferArrayToJSArray returns a JavaScript Array for the wrapped array.
func DataBufferArrayToJSArray(array []*DataBuffer) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Capacity returns the Capacity property of class DataBuffer.
//
// https://doc.babylonjs.com/api/classes/babylon.databuffer#capacity
func (d *DataBuffer) Capacity() float64 {
	retVal := d.p.Get("capacity")
	return retVal.Float()
}

// SetCapacity sets the Capacity property of class DataBuffer.
//
// https://doc.babylonjs.com/api/classes/babylon.databuffer#capacity
func (d *DataBuffer) SetCapacity(capacity float64) *DataBuffer {
	d.p.Set("capacity", capacity)
	return d
}

// Is32Bits returns the Is32Bits property of class DataBuffer.
//
// https://doc.babylonjs.com/api/classes/babylon.databuffer#is32bits
func (d *DataBuffer) Is32Bits() bool {
	retVal := d.p.Get("is32Bits")
	return retVal.Bool()
}

// SetIs32Bits sets the Is32Bits property of class DataBuffer.
//
// https://doc.babylonjs.com/api/classes/babylon.databuffer#is32bits
func (d *DataBuffer) SetIs32Bits(is32Bits bool) *DataBuffer {
	d.p.Set("is32Bits", is32Bits)
	return d
}

// References returns the References property of class DataBuffer.
//
// https://doc.babylonjs.com/api/classes/babylon.databuffer#references
func (d *DataBuffer) References() float64 {
	retVal := d.p.Get("references")
	return retVal.Float()
}

// SetReferences sets the References property of class DataBuffer.
//
// https://doc.babylonjs.com/api/classes/babylon.databuffer#references
func (d *DataBuffer) SetReferences(references float64) *DataBuffer {
	d.p.Set("references", references)
	return d
}

// UnderlyingResource returns the UnderlyingResource property of class DataBuffer.
//
// https://doc.babylonjs.com/api/classes/babylon.databuffer#underlyingresource
func (d *DataBuffer) UnderlyingResource() js.Value {
	retVal := d.p.Get("underlyingResource")
	return retVal
}

// SetUnderlyingResource sets the UnderlyingResource property of class DataBuffer.
//
// https://doc.babylonjs.com/api/classes/babylon.databuffer#underlyingresource
func (d *DataBuffer) SetUnderlyingResource(underlyingResource JSObject) *DataBuffer {
	d.p.Set("underlyingResource", underlyingResource.JSObject())
	return d
}
