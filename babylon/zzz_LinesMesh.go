// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// LinesMesh represents a babylon.js LinesMesh.
// Line mesh
//
// See: https://doc.babylonjs.com/babylon101/parametric_shapes
type LinesMesh struct {
	*Mesh
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (l *LinesMesh) JSObject() js.Value { return l.p }

// LinesMesh returns a LinesMesh JavaScript class.
func (ba *Babylon) LinesMesh() *LinesMesh {
	p := ba.ctx.Get("LinesMesh")
	return LinesMeshFromJSObject(p, ba.ctx)
}

// LinesMeshFromJSObject returns a wrapped LinesMesh JavaScript class.
func LinesMeshFromJSObject(p js.Value, ctx js.Value) *LinesMesh {
	return &LinesMesh{Mesh: MeshFromJSObject(p, ctx), ctx: ctx}
}

// NewLinesMeshOpts contains optional parameters for NewLinesMesh.
type NewLinesMeshOpts struct {
	Scene *Scene

	Parent *Node

	Source *LinesMesh

	DoNotCloneChildren *JSBool

	UseVertexColor *JSBool

	UseVertexAlpha *JSBool
}

// NewLinesMesh returns a new LinesMesh object.
//
// https://doc.babylonjs.com/api/classes/babylon.linesmesh
func (ba *Babylon) NewLinesMesh(name string, opts *NewLinesMeshOpts) *LinesMesh {
	if opts == nil {
		opts = &NewLinesMeshOpts{}
	}

	p := ba.ctx.Get("LinesMesh").New(name, opts.Scene.JSObject(), opts.Parent.JSObject(), opts.Source.JSObject(), opts.DoNotCloneChildren.JSObject(), opts.UseVertexColor.JSObject(), opts.UseVertexAlpha.JSObject())
	return LinesMeshFromJSObject(p, ba.ctx)
}

// TODO: methods
