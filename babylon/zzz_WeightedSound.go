// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// WeightedSound represents a babylon.js WeightedSound.
// Wraps one or more Sound objects and selects one with random weight for playback.
type WeightedSound struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (w *WeightedSound) JSObject() js.Value { return w.p }

// WeightedSound returns a WeightedSound JavaScript class.
func (ba *Babylon) WeightedSound() *WeightedSound {
	p := ba.ctx.Get("WeightedSound")
	return WeightedSoundFromJSObject(p, ba.ctx)
}

// WeightedSoundFromJSObject returns a wrapped WeightedSound JavaScript class.
func WeightedSoundFromJSObject(p js.Value, ctx js.Value) *WeightedSound {
	return &WeightedSound{p: p, ctx: ctx}
}

// WeightedSoundArrayToJSArray returns a JavaScript Array for the wrapped array.
func WeightedSoundArrayToJSArray(array []*WeightedSound) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewWeightedSound returns a new WeightedSound object.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound
func (ba *Babylon) NewWeightedSound(loop bool, sounds *Sound, weights float64) *WeightedSound {

	args := make([]interface{}, 0, 3+0)

	args = append(args, loop)
	args = append(args, sounds.JSObject())
	args = append(args, weights)

	p := ba.ctx.Get("WeightedSound").New(args...)
	return WeightedSoundFromJSObject(p, ba.ctx)
}

// Pause calls the Pause method on the WeightedSound object.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound#pause
func (w *WeightedSound) Pause() {

	w.p.Call("pause")
}

// WeightedSoundPlayOpts contains optional parameters for WeightedSound.Play.
type WeightedSoundPlayOpts struct {
	StartOffset *float64
}

// Play calls the Play method on the WeightedSound object.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound#play
func (w *WeightedSound) Play(opts *WeightedSoundPlayOpts) {
	if opts == nil {
		opts = &WeightedSoundPlayOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.StartOffset == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.StartOffset)
	}

	w.p.Call("play", args...)
}

// Stop calls the Stop method on the WeightedSound object.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound#stop
func (w *WeightedSound) Stop() {

	w.p.Call("stop")
}

// DirectionalConeInnerAngle returns the DirectionalConeInnerAngle property of class WeightedSound.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound#directionalconeinnerangle
func (w *WeightedSound) DirectionalConeInnerAngle() float64 {
	retVal := w.p.Get("directionalConeInnerAngle")
	return retVal.Float()
}

// SetDirectionalConeInnerAngle sets the DirectionalConeInnerAngle property of class WeightedSound.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound#directionalconeinnerangle
func (w *WeightedSound) SetDirectionalConeInnerAngle(directionalConeInnerAngle float64) *WeightedSound {
	w.p.Set("directionalConeInnerAngle", directionalConeInnerAngle)
	return w
}

// DirectionalConeOuterAngle returns the DirectionalConeOuterAngle property of class WeightedSound.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound#directionalconeouterangle
func (w *WeightedSound) DirectionalConeOuterAngle() float64 {
	retVal := w.p.Get("directionalConeOuterAngle")
	return retVal.Float()
}

// SetDirectionalConeOuterAngle sets the DirectionalConeOuterAngle property of class WeightedSound.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound#directionalconeouterangle
func (w *WeightedSound) SetDirectionalConeOuterAngle(directionalConeOuterAngle float64) *WeightedSound {
	w.p.Set("directionalConeOuterAngle", directionalConeOuterAngle)
	return w
}

// IsPaused returns the IsPaused property of class WeightedSound.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound#ispaused
func (w *WeightedSound) IsPaused() bool {
	retVal := w.p.Get("isPaused")
	return retVal.Bool()
}

// SetIsPaused sets the IsPaused property of class WeightedSound.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound#ispaused
func (w *WeightedSound) SetIsPaused(isPaused bool) *WeightedSound {
	w.p.Set("isPaused", isPaused)
	return w
}

// IsPlaying returns the IsPlaying property of class WeightedSound.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound#isplaying
func (w *WeightedSound) IsPlaying() bool {
	retVal := w.p.Get("isPlaying")
	return retVal.Bool()
}

// SetIsPlaying sets the IsPlaying property of class WeightedSound.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound#isplaying
func (w *WeightedSound) SetIsPlaying(isPlaying bool) *WeightedSound {
	w.p.Set("isPlaying", isPlaying)
	return w
}

// Loop returns the Loop property of class WeightedSound.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound#loop
func (w *WeightedSound) Loop() bool {
	retVal := w.p.Get("loop")
	return retVal.Bool()
}

// SetLoop sets the Loop property of class WeightedSound.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound#loop
func (w *WeightedSound) SetLoop(loop bool) *WeightedSound {
	w.p.Set("loop", loop)
	return w
}

// Volume returns the Volume property of class WeightedSound.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound#volume
func (w *WeightedSound) Volume() float64 {
	retVal := w.p.Get("volume")
	return retVal.Float()
}

// SetVolume sets the Volume property of class WeightedSound.
//
// https://doc.babylonjs.com/api/classes/babylon.weightedsound#volume
func (w *WeightedSound) SetVolume(volume float64) *WeightedSound {
	w.p.Set("volume", volume)
	return w
}
