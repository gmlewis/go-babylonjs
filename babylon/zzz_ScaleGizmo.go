// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// ScaleGizmo represents a babylon.js ScaleGizmo.
// Gizmo that enables scaling a mesh along 3 axis
type ScaleGizmo struct {
	*Gizmo
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (s *ScaleGizmo) JSObject() js.Value { return s.p }

// ScaleGizmo returns a ScaleGizmo JavaScript class.
func (ba *Babylon) ScaleGizmo() *ScaleGizmo {
	p := ba.ctx.Get("ScaleGizmo")
	return ScaleGizmoFromJSObject(p, ba.ctx)
}

// ScaleGizmoFromJSObject returns a wrapped ScaleGizmo JavaScript class.
func ScaleGizmoFromJSObject(p js.Value, ctx js.Value) *ScaleGizmo {
	return &ScaleGizmo{Gizmo: GizmoFromJSObject(p, ctx), ctx: ctx}
}

// ScaleGizmoArrayToJSArray returns a JavaScript Array for the wrapped array.
func ScaleGizmoArrayToJSArray(array []*ScaleGizmo) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewScaleGizmoOpts contains optional parameters for NewScaleGizmo.
type NewScaleGizmoOpts struct {
	GizmoLayer *UtilityLayerRenderer
}

// NewScaleGizmo returns a new ScaleGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo
func (ba *Babylon) NewScaleGizmo(opts *NewScaleGizmoOpts) *ScaleGizmo {
	if opts == nil {
		opts = &NewScaleGizmoOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.GizmoLayer == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.GizmoLayer.JSObject())
	}

	p := ba.ctx.Get("ScaleGizmo").New(args...)
	return ScaleGizmoFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the ScaleGizmo object.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#dispose
func (s *ScaleGizmo) Dispose() {

	s.p.Call("dispose")
}

// AttachedMesh returns the AttachedMesh property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#attachedmesh
func (s *ScaleGizmo) AttachedMesh() *AbstractMesh {
	retVal := s.p.Get("attachedMesh")
	return AbstractMeshFromJSObject(retVal, s.ctx)
}

// SetAttachedMesh sets the AttachedMesh property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#attachedmesh
func (s *ScaleGizmo) SetAttachedMesh(attachedMesh *AbstractMesh) *ScaleGizmo {
	s.p.Set("attachedMesh", attachedMesh.JSObject())
	return s
}

// OnDragEndObservable returns the OnDragEndObservable property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#ondragendobservable
func (s *ScaleGizmo) OnDragEndObservable() *Observable {
	retVal := s.p.Get("onDragEndObservable")
	return ObservableFromJSObject(retVal, s.ctx)
}

// SetOnDragEndObservable sets the OnDragEndObservable property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#ondragendobservable
func (s *ScaleGizmo) SetOnDragEndObservable(onDragEndObservable *Observable) *ScaleGizmo {
	s.p.Set("onDragEndObservable", onDragEndObservable.JSObject())
	return s
}

// OnDragStartObservable returns the OnDragStartObservable property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#ondragstartobservable
func (s *ScaleGizmo) OnDragStartObservable() *Observable {
	retVal := s.p.Get("onDragStartObservable")
	return ObservableFromJSObject(retVal, s.ctx)
}

// SetOnDragStartObservable sets the OnDragStartObservable property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#ondragstartobservable
func (s *ScaleGizmo) SetOnDragStartObservable(onDragStartObservable *Observable) *ScaleGizmo {
	s.p.Set("onDragStartObservable", onDragStartObservable.JSObject())
	return s
}

// ScaleRatio returns the ScaleRatio property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#scaleratio
func (s *ScaleGizmo) ScaleRatio() float64 {
	retVal := s.p.Get("scaleRatio")
	return retVal.Float()
}

// SetScaleRatio sets the ScaleRatio property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#scaleratio
func (s *ScaleGizmo) SetScaleRatio(scaleRatio float64) *ScaleGizmo {
	s.p.Set("scaleRatio", scaleRatio)
	return s
}

// Sensitivity returns the Sensitivity property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#sensitivity
func (s *ScaleGizmo) Sensitivity() float64 {
	retVal := s.p.Get("sensitivity")
	return retVal.Float()
}

// SetSensitivity sets the Sensitivity property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#sensitivity
func (s *ScaleGizmo) SetSensitivity(sensitivity float64) *ScaleGizmo {
	s.p.Set("sensitivity", sensitivity)
	return s
}

// SnapDistance returns the SnapDistance property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#snapdistance
func (s *ScaleGizmo) SnapDistance() float64 {
	retVal := s.p.Get("snapDistance")
	return retVal.Float()
}

// SetSnapDistance sets the SnapDistance property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#snapdistance
func (s *ScaleGizmo) SetSnapDistance(snapDistance float64) *ScaleGizmo {
	s.p.Set("snapDistance", snapDistance)
	return s
}

// UniformScaleGizmo returns the UniformScaleGizmo property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#uniformscalegizmo
func (s *ScaleGizmo) UniformScaleGizmo() *AxisScaleGizmo {
	retVal := s.p.Get("uniformScaleGizmo")
	return AxisScaleGizmoFromJSObject(retVal, s.ctx)
}

// SetUniformScaleGizmo sets the UniformScaleGizmo property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#uniformscalegizmo
func (s *ScaleGizmo) SetUniformScaleGizmo(uniformScaleGizmo *AxisScaleGizmo) *ScaleGizmo {
	s.p.Set("uniformScaleGizmo", uniformScaleGizmo.JSObject())
	return s
}

// UpdateGizmoRotationToMatchAttachedMesh returns the UpdateGizmoRotationToMatchAttachedMesh property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#updategizmorotationtomatchattachedmesh
func (s *ScaleGizmo) UpdateGizmoRotationToMatchAttachedMesh() bool {
	retVal := s.p.Get("updateGizmoRotationToMatchAttachedMesh")
	return retVal.Bool()
}

// SetUpdateGizmoRotationToMatchAttachedMesh sets the UpdateGizmoRotationToMatchAttachedMesh property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#updategizmorotationtomatchattachedmesh
func (s *ScaleGizmo) SetUpdateGizmoRotationToMatchAttachedMesh(updateGizmoRotationToMatchAttachedMesh bool) *ScaleGizmo {
	s.p.Set("updateGizmoRotationToMatchAttachedMesh", updateGizmoRotationToMatchAttachedMesh)
	return s
}

// XGizmo returns the XGizmo property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#xgizmo
func (s *ScaleGizmo) XGizmo() *AxisScaleGizmo {
	retVal := s.p.Get("xGizmo")
	return AxisScaleGizmoFromJSObject(retVal, s.ctx)
}

// SetXGizmo sets the XGizmo property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#xgizmo
func (s *ScaleGizmo) SetXGizmo(xGizmo *AxisScaleGizmo) *ScaleGizmo {
	s.p.Set("xGizmo", xGizmo.JSObject())
	return s
}

// YGizmo returns the YGizmo property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#ygizmo
func (s *ScaleGizmo) YGizmo() *AxisScaleGizmo {
	retVal := s.p.Get("yGizmo")
	return AxisScaleGizmoFromJSObject(retVal, s.ctx)
}

// SetYGizmo sets the YGizmo property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#ygizmo
func (s *ScaleGizmo) SetYGizmo(yGizmo *AxisScaleGizmo) *ScaleGizmo {
	s.p.Set("yGizmo", yGizmo.JSObject())
	return s
}

// ZGizmo returns the ZGizmo property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#zgizmo
func (s *ScaleGizmo) ZGizmo() *AxisScaleGizmo {
	retVal := s.p.Get("zGizmo")
	return AxisScaleGizmoFromJSObject(retVal, s.ctx)
}

// SetZGizmo sets the ZGizmo property of class ScaleGizmo.
//
// https://doc.babylonjs.com/api/classes/babylon.scalegizmo#zgizmo
func (s *ScaleGizmo) SetZGizmo(zGizmo *AxisScaleGizmo) *ScaleGizmo {
	s.p.Set("zGizmo", zGizmo.JSObject())
	return s
}
