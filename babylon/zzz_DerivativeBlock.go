// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DerivativeBlock represents a babylon.js DerivativeBlock.
// Block used to get the derivative value on x and y of a given input
type DerivativeBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DerivativeBlock) JSObject() js.Value { return d.p }

// DerivativeBlock returns a DerivativeBlock JavaScript class.
func (ba *Babylon) DerivativeBlock() *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock")
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// DerivativeBlockFromJSObject returns a wrapped DerivativeBlock JavaScript class.
func DerivativeBlockFromJSObject(p js.Value, ctx js.Value) *DerivativeBlock {
	return &DerivativeBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// DerivativeBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func DerivativeBlockArrayToJSArray(array []*DerivativeBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDerivativeBlock returns a new DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock
func (ba *Babylon) NewDerivativeBlock(name string) *DerivativeBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("DerivativeBlock").New(args...)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// AutoConfigure calls the AutoConfigure method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#autoconfigure
func (d *DerivativeBlock) AutoConfigure(material *NodeMaterial) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, material.JSObject())

	d.p.Call("autoConfigure", args...)
}

// DerivativeBlockBindOpts contains optional parameters for DerivativeBlock.Bind.
type DerivativeBlockBindOpts struct {
	Mesh *Mesh
}

// Bind calls the Bind method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#bind
func (d *DerivativeBlock) Bind(effect *Effect, nodeMaterial *NodeMaterial, opts *DerivativeBlockBindOpts) {
	if opts == nil {
		opts = &DerivativeBlockBindOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, effect.JSObject())
	args = append(args, nodeMaterial.JSObject())

	if opts.Mesh == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Mesh.JSObject())
	}

	d.p.Call("bind", args...)
}

// Build calls the Build method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#build
func (d *DerivativeBlock) Build(state *NodeMaterialBuildState, activeBlocks *NodeMaterialBlock) bool {

	args := make([]interface{}, 0, 2+0)

	args = append(args, state.JSObject())
	args = append(args, activeBlocks.JSObject())

	retVal := d.p.Call("build", args...)
	return retVal.Bool()
}

// DerivativeBlockCloneOpts contains optional parameters for DerivativeBlock.Clone.
type DerivativeBlockCloneOpts struct {
	RootUrl *string
}

// Clone calls the Clone method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#clone
func (d *DerivativeBlock) Clone(scene *Scene, opts *DerivativeBlockCloneOpts) *NodeMaterialBlock {
	if opts == nil {
		opts = &DerivativeBlockCloneOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, scene.JSObject())

	if opts.RootUrl == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.RootUrl)
	}

	retVal := d.p.Call("clone", args...)
	return NodeMaterialBlockFromJSObject(retVal, d.ctx)
}

// DerivativeBlockConnectToOpts contains optional parameters for DerivativeBlock.ConnectTo.
type DerivativeBlockConnectToOpts struct {
	Options js.Value
}

// ConnectTo calls the ConnectTo method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#connectto
func (d *DerivativeBlock) ConnectTo(other *NodeMaterialBlock, opts *DerivativeBlockConnectToOpts) *DerivativeBlock {
	if opts == nil {
		opts = &DerivativeBlockConnectToOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, other.JSObject())

	if opts.Options == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Options)
	}

	retVal := d.p.Call("connectTo", args...)
	return DerivativeBlockFromJSObject(retVal, d.ctx)
}

// Dispose calls the Dispose method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#dispose
func (d *DerivativeBlock) Dispose() {

	d.p.Call("dispose")
}

// GetClassName calls the GetClassName method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#getclassname
func (d *DerivativeBlock) GetClassName() string {

	retVal := d.p.Call("getClassName")
	return retVal.String()
}

// DerivativeBlockGetFirstAvailableInputOpts contains optional parameters for DerivativeBlock.GetFirstAvailableInput.
type DerivativeBlockGetFirstAvailableInputOpts struct {
	ForOutput *NodeMaterialConnectionPoint
}

// GetFirstAvailableInput calls the GetFirstAvailableInput method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#getfirstavailableinput
func (d *DerivativeBlock) GetFirstAvailableInput(opts *DerivativeBlockGetFirstAvailableInputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &DerivativeBlockGetFirstAvailableInputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForOutput == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForOutput.JSObject())
	}

	retVal := d.p.Call("getFirstAvailableInput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, d.ctx)
}

// DerivativeBlockGetFirstAvailableOutputOpts contains optional parameters for DerivativeBlock.GetFirstAvailableOutput.
type DerivativeBlockGetFirstAvailableOutputOpts struct {
	ForBlock *NodeMaterialBlock
}

// GetFirstAvailableOutput calls the GetFirstAvailableOutput method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#getfirstavailableoutput
func (d *DerivativeBlock) GetFirstAvailableOutput(opts *DerivativeBlockGetFirstAvailableOutputOpts) *NodeMaterialConnectionPoint {
	if opts == nil {
		opts = &DerivativeBlockGetFirstAvailableOutputOpts{}
	}

	args := make([]interface{}, 0, 0+1)

	if opts.ForBlock == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.ForBlock.JSObject())
	}

	retVal := d.p.Call("getFirstAvailableOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, d.ctx)
}

// GetInputByName calls the GetInputByName method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#getinputbyname
func (d *DerivativeBlock) GetInputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := d.p.Call("getInputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, d.ctx)
}

// GetOutputByName calls the GetOutputByName method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#getoutputbyname
func (d *DerivativeBlock) GetOutputByName(name string) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	retVal := d.p.Call("getOutputByName", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, d.ctx)
}

// GetSiblingOutput calls the GetSiblingOutput method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#getsiblingoutput
func (d *DerivativeBlock) GetSiblingOutput(current *NodeMaterialConnectionPoint) *NodeMaterialConnectionPoint {

	args := make([]interface{}, 0, 1+0)

	args = append(args, current.JSObject())

	retVal := d.p.Call("getSiblingOutput", args...)
	return NodeMaterialConnectionPointFromJSObject(retVal, d.ctx)
}

// Initialize calls the Initialize method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#initialize
func (d *DerivativeBlock) Initialize(state *NodeMaterialBuildState) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, state.JSObject())

	d.p.Call("initialize", args...)
}

// DerivativeBlockInitializeDefinesOpts contains optional parameters for DerivativeBlock.InitializeDefines.
type DerivativeBlockInitializeDefinesOpts struct {
	UseInstances *bool
}

// InitializeDefines calls the InitializeDefines method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#initializedefines
func (d *DerivativeBlock) InitializeDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *DerivativeBlockInitializeDefinesOpts) {
	if opts == nil {
		opts = &DerivativeBlockInitializeDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	d.p.Call("initializeDefines", args...)
}

// DerivativeBlockIsReadyOpts contains optional parameters for DerivativeBlock.IsReady.
type DerivativeBlockIsReadyOpts struct {
	UseInstances *bool
}

// IsReady calls the IsReady method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#isready
func (d *DerivativeBlock) IsReady(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *DerivativeBlockIsReadyOpts) bool {
	if opts == nil {
		opts = &DerivativeBlockIsReadyOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	retVal := d.p.Call("isReady", args...)
	return retVal.Bool()
}

// DerivativeBlockPrepareDefinesOpts contains optional parameters for DerivativeBlock.PrepareDefines.
type DerivativeBlockPrepareDefinesOpts struct {
	UseInstances *bool
}

// PrepareDefines calls the PrepareDefines method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#preparedefines
func (d *DerivativeBlock) PrepareDefines(mesh *AbstractMesh, nodeMaterial *NodeMaterial, defines js.Value, opts *DerivativeBlockPrepareDefinesOpts) {
	if opts == nil {
		opts = &DerivativeBlockPrepareDefinesOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, mesh.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)

	if opts.UseInstances == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.UseInstances)
	}

	d.p.Call("prepareDefines", args...)
}

// ProvideFallbacks calls the ProvideFallbacks method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#providefallbacks
func (d *DerivativeBlock) ProvideFallbacks(mesh *AbstractMesh, fallbacks *EffectFallbacks) {

	args := make([]interface{}, 0, 2+0)

	args = append(args, mesh.JSObject())
	args = append(args, fallbacks.JSObject())

	d.p.Call("provideFallbacks", args...)
}

// DerivativeBlockRegisterInputOpts contains optional parameters for DerivativeBlock.RegisterInput.
type DerivativeBlockRegisterInputOpts struct {
	IsOptional *bool
	Target     js.Value
}

// RegisterInput calls the RegisterInput method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#registerinput
func (d *DerivativeBlock) RegisterInput(name string, jsType js.Value, opts *DerivativeBlockRegisterInputOpts) *DerivativeBlock {
	if opts == nil {
		opts = &DerivativeBlockRegisterInputOpts{}
	}

	args := make([]interface{}, 0, 2+2)

	args = append(args, name)
	args = append(args, jsType)

	if opts.IsOptional == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.IsOptional)
	}
	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := d.p.Call("registerInput", args...)
	return DerivativeBlockFromJSObject(retVal, d.ctx)
}

// DerivativeBlockRegisterOutputOpts contains optional parameters for DerivativeBlock.RegisterOutput.
type DerivativeBlockRegisterOutputOpts struct {
	Target js.Value
}

// RegisterOutput calls the RegisterOutput method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#registeroutput
func (d *DerivativeBlock) RegisterOutput(name string, jsType js.Value, opts *DerivativeBlockRegisterOutputOpts) *DerivativeBlock {
	if opts == nil {
		opts = &DerivativeBlockRegisterOutputOpts{}
	}

	args := make([]interface{}, 0, 2+1)

	args = append(args, name)
	args = append(args, jsType)

	if opts.Target == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, opts.Target)
	}

	retVal := d.p.Call("registerOutput", args...)
	return DerivativeBlockFromJSObject(retVal, d.ctx)
}

// ReplaceRepeatableContent calls the ReplaceRepeatableContent method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#replacerepeatablecontent
func (d *DerivativeBlock) ReplaceRepeatableContent(vertexShaderState *NodeMaterialBuildState, fragmentShaderState *NodeMaterialBuildState, mesh *AbstractMesh, defines js.Value) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, vertexShaderState.JSObject())
	args = append(args, fragmentShaderState.JSObject())
	args = append(args, mesh.JSObject())
	args = append(args, defines)

	d.p.Call("replaceRepeatableContent", args...)
}

// Serialize calls the Serialize method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#serialize
func (d *DerivativeBlock) Serialize() interface{} {

	retVal := d.p.Call("serialize")
	return retVal
}

// UpdateUniformsAndSamples calls the UpdateUniformsAndSamples method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#updateuniformsandsamples
func (d *DerivativeBlock) UpdateUniformsAndSamples(state *NodeMaterialBuildState, nodeMaterial *NodeMaterial, defines js.Value, uniformBuffers string) {

	args := make([]interface{}, 0, 4+0)

	args = append(args, state.JSObject())
	args = append(args, nodeMaterial.JSObject())
	args = append(args, defines)
	args = append(args, uniformBuffers)

	d.p.Call("updateUniformsAndSamples", args...)
}

/*

// BuildId returns the BuildId property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#buildid
func (d *DerivativeBlock) BuildId(buildId float64) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(buildId)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// SetBuildId sets the BuildId property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#buildid
func (d *DerivativeBlock) SetBuildId(buildId float64) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(buildId)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// Comments returns the Comments property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#comments
func (d *DerivativeBlock) Comments(comments string) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(comments)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// SetComments sets the Comments property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#comments
func (d *DerivativeBlock) SetComments(comments string) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(comments)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// Dx returns the Dx property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#dx
func (d *DerivativeBlock) Dx(dx *NodeMaterialConnectionPoint) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(dx.JSObject())
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// SetDx sets the Dx property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#dx
func (d *DerivativeBlock) SetDx(dx *NodeMaterialConnectionPoint) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(dx.JSObject())
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// Dy returns the Dy property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#dy
func (d *DerivativeBlock) Dy(dy *NodeMaterialConnectionPoint) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(dy.JSObject())
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// SetDy sets the Dy property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#dy
func (d *DerivativeBlock) SetDy(dy *NodeMaterialConnectionPoint) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(dy.JSObject())
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// Input returns the Input property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#input
func (d *DerivativeBlock) Input(input *NodeMaterialConnectionPoint) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(input.JSObject())
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// SetInput sets the Input property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#input
func (d *DerivativeBlock) SetInput(input *NodeMaterialConnectionPoint) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(input.JSObject())
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// Inputs returns the Inputs property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#inputs
func (d *DerivativeBlock) Inputs(inputs *NodeMaterialConnectionPoint) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(inputs.JSObject())
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// SetInputs sets the Inputs property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#inputs
func (d *DerivativeBlock) SetInputs(inputs *NodeMaterialConnectionPoint) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(inputs.JSObject())
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// IsFinalMerger returns the IsFinalMerger property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#isfinalmerger
func (d *DerivativeBlock) IsFinalMerger(isFinalMerger bool) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(isFinalMerger)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// SetIsFinalMerger sets the IsFinalMerger property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#isfinalmerger
func (d *DerivativeBlock) SetIsFinalMerger(isFinalMerger bool) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(isFinalMerger)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// IsInput returns the IsInput property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#isinput
func (d *DerivativeBlock) IsInput(isInput bool) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(isInput)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// SetIsInput sets the IsInput property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#isinput
func (d *DerivativeBlock) SetIsInput(isInput bool) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(isInput)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// IsUnique returns the IsUnique property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#isunique
func (d *DerivativeBlock) IsUnique(isUnique bool) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(isUnique)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// SetIsUnique sets the IsUnique property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#isunique
func (d *DerivativeBlock) SetIsUnique(isUnique bool) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(isUnique)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// Name returns the Name property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#name
func (d *DerivativeBlock) Name(name string) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(name)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// SetName sets the Name property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#name
func (d *DerivativeBlock) SetName(name string) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(name)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// Outputs returns the Outputs property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#outputs
func (d *DerivativeBlock) Outputs(outputs *NodeMaterialConnectionPoint) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(outputs.JSObject())
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// SetOutputs sets the Outputs property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#outputs
func (d *DerivativeBlock) SetOutputs(outputs *NodeMaterialConnectionPoint) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(outputs.JSObject())
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// Target returns the Target property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#target
func (d *DerivativeBlock) Target(target js.Value) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(target)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// SetTarget sets the Target property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#target
func (d *DerivativeBlock) SetTarget(target js.Value) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(target)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// UniqueId returns the UniqueId property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#uniqueid
func (d *DerivativeBlock) UniqueId(uniqueId float64) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(uniqueId)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// SetUniqueId sets the UniqueId property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#uniqueid
func (d *DerivativeBlock) SetUniqueId(uniqueId float64) *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock").New(uniqueId)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

*/
