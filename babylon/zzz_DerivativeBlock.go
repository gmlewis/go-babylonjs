// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DerivativeBlock represents a babylon.js DerivativeBlock.
// Block used to get the derivative value on x and y of a given input
type DerivativeBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DerivativeBlock) JSObject() js.Value { return d.p }

// DerivativeBlock returns a DerivativeBlock JavaScript class.
func (ba *Babylon) DerivativeBlock() *DerivativeBlock {
	p := ba.ctx.Get("DerivativeBlock")
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// DerivativeBlockFromJSObject returns a wrapped DerivativeBlock JavaScript class.
func DerivativeBlockFromJSObject(p js.Value, ctx js.Value) *DerivativeBlock {
	return &DerivativeBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// DerivativeBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func DerivativeBlockArrayToJSArray(array []*DerivativeBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDerivativeBlock returns a new DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#constructor
func (ba *Babylon) NewDerivativeBlock(name string) *DerivativeBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("DerivativeBlock").New(args...)
	return DerivativeBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the DerivativeBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#getclassname
func (d *DerivativeBlock) GetClassName() string {

	retVal := d.p.Call("getClassName")
	return retVal.String()
}

// Dx returns the Dx property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#dx
func (d *DerivativeBlock) Dx() *NodeMaterialConnectionPoint {
	retVal := d.p.Get("dx")
	return NodeMaterialConnectionPointFromJSObject(retVal, d.ctx)
}

// SetDx sets the Dx property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#dx
func (d *DerivativeBlock) SetDx(dx *NodeMaterialConnectionPoint) *DerivativeBlock {
	d.p.Set("dx", dx.JSObject())
	return d
}

// Dy returns the Dy property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#dy
func (d *DerivativeBlock) Dy() *NodeMaterialConnectionPoint {
	retVal := d.p.Get("dy")
	return NodeMaterialConnectionPointFromJSObject(retVal, d.ctx)
}

// SetDy sets the Dy property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#dy
func (d *DerivativeBlock) SetDy(dy *NodeMaterialConnectionPoint) *DerivativeBlock {
	d.p.Set("dy", dy.JSObject())
	return d
}

// Input returns the Input property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#input
func (d *DerivativeBlock) Input() *NodeMaterialConnectionPoint {
	retVal := d.p.Get("input")
	return NodeMaterialConnectionPointFromJSObject(retVal, d.ctx)
}

// SetInput sets the Input property of class DerivativeBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.derivativeblock#input
func (d *DerivativeBlock) SetInput(input *NodeMaterialConnectionPoint) *DerivativeBlock {
	d.p.Set("input", input.JSObject())
	return d
}
