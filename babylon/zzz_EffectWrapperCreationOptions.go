// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// EffectWrapperCreationOptions represents a babylon.js EffectWrapperCreationOptions.
// Options to create an EffectWrapper
type EffectWrapperCreationOptions struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (e *EffectWrapperCreationOptions) JSObject() js.Value { return e.p }

// EffectWrapperCreationOptions returns a EffectWrapperCreationOptions JavaScript class.
func (ba *Babylon) EffectWrapperCreationOptions() *EffectWrapperCreationOptions {
	p := ba.ctx.Get("EffectWrapperCreationOptions")
	return EffectWrapperCreationOptionsFromJSObject(p, ba.ctx)
}

// EffectWrapperCreationOptionsFromJSObject returns a wrapped EffectWrapperCreationOptions JavaScript class.
func EffectWrapperCreationOptionsFromJSObject(p js.Value, ctx js.Value) *EffectWrapperCreationOptions {
	return &EffectWrapperCreationOptions{p: p, ctx: ctx}
}

// EffectWrapperCreationOptionsArrayToJSArray returns a JavaScript Array for the wrapped array.
func EffectWrapperCreationOptionsArrayToJSArray(array []*EffectWrapperCreationOptions) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// AttributeNames returns the AttributeNames property of class EffectWrapperCreationOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrappercreationoptions#attributenames
func (e *EffectWrapperCreationOptions) AttributeNames() []string {
	retVal := e.p.Get("attributeNames")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetAttributeNames sets the AttributeNames property of class EffectWrapperCreationOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrappercreationoptions#attributenames
func (e *EffectWrapperCreationOptions) SetAttributeNames(attributeNames []string) *EffectWrapperCreationOptions {
	e.p.Set("attributeNames", attributeNames)
	return e
}

// Engine returns the Engine property of class EffectWrapperCreationOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrappercreationoptions#engine
func (e *EffectWrapperCreationOptions) Engine() *ThinEngine {
	retVal := e.p.Get("engine")
	return ThinEngineFromJSObject(retVal, e.ctx)
}

// SetEngine sets the Engine property of class EffectWrapperCreationOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrappercreationoptions#engine
func (e *EffectWrapperCreationOptions) SetEngine(engine *ThinEngine) *EffectWrapperCreationOptions {
	e.p.Set("engine", engine.JSObject())
	return e
}

// FragmentShader returns the FragmentShader property of class EffectWrapperCreationOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrappercreationoptions#fragmentshader
func (e *EffectWrapperCreationOptions) FragmentShader() string {
	retVal := e.p.Get("fragmentShader")
	return retVal.String()
}

// SetFragmentShader sets the FragmentShader property of class EffectWrapperCreationOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrappercreationoptions#fragmentshader
func (e *EffectWrapperCreationOptions) SetFragmentShader(fragmentShader string) *EffectWrapperCreationOptions {
	e.p.Set("fragmentShader", fragmentShader)
	return e
}

// Name returns the Name property of class EffectWrapperCreationOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrappercreationoptions#name
func (e *EffectWrapperCreationOptions) Name() string {
	retVal := e.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class EffectWrapperCreationOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrappercreationoptions#name
func (e *EffectWrapperCreationOptions) SetName(name string) *EffectWrapperCreationOptions {
	e.p.Set("name", name)
	return e
}

// SamplerNames returns the SamplerNames property of class EffectWrapperCreationOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrappercreationoptions#samplernames
func (e *EffectWrapperCreationOptions) SamplerNames() []string {
	retVal := e.p.Get("samplerNames")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetSamplerNames sets the SamplerNames property of class EffectWrapperCreationOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrappercreationoptions#samplernames
func (e *EffectWrapperCreationOptions) SetSamplerNames(samplerNames []string) *EffectWrapperCreationOptions {
	e.p.Set("samplerNames", samplerNames)
	return e
}

// UniformNames returns the UniformNames property of class EffectWrapperCreationOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrappercreationoptions#uniformnames
func (e *EffectWrapperCreationOptions) UniformNames() []string {
	retVal := e.p.Get("uniformNames")
	result := []string{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).String())
	}
	return result
}

// SetUniformNames sets the UniformNames property of class EffectWrapperCreationOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrappercreationoptions#uniformnames
func (e *EffectWrapperCreationOptions) SetUniformNames(uniformNames []string) *EffectWrapperCreationOptions {
	e.p.Set("uniformNames", uniformNames)
	return e
}

// VertexShader returns the VertexShader property of class EffectWrapperCreationOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrappercreationoptions#vertexshader
func (e *EffectWrapperCreationOptions) VertexShader() string {
	retVal := e.p.Get("vertexShader")
	return retVal.String()
}

// SetVertexShader sets the VertexShader property of class EffectWrapperCreationOptions.
//
// https://doc.babylonjs.com/api/classes/babylon.effectwrappercreationoptions#vertexshader
func (e *EffectWrapperCreationOptions) SetVertexShader(vertexShader string) *EffectWrapperCreationOptions {
	e.p.Set("vertexShader", vertexShader)
	return e
}
