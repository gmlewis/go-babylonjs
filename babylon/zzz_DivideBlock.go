// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// DivideBlock represents a babylon.js DivideBlock.
// Block used to divide 2 vectors
type DivideBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (d *DivideBlock) JSObject() js.Value { return d.p }

// DivideBlock returns a DivideBlock JavaScript class.
func (ba *Babylon) DivideBlock() *DivideBlock {
	p := ba.ctx.Get("DivideBlock")
	return DivideBlockFromJSObject(p, ba.ctx)
}

// DivideBlockFromJSObject returns a wrapped DivideBlock JavaScript class.
func DivideBlockFromJSObject(p js.Value, ctx js.Value) *DivideBlock {
	return &DivideBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// DivideBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func DivideBlockArrayToJSArray(array []*DivideBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewDivideBlock returns a new DivideBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.divideblock
func (ba *Babylon) NewDivideBlock(name string) *DivideBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("DivideBlock").New(args...)
	return DivideBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the DivideBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.divideblock#getclassname
func (d *DivideBlock) GetClassName() string {

	retVal := d.p.Call("getClassName")
	return retVal.String()
}

/*

// Left returns the Left property of class DivideBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.divideblock#left
func (d *DivideBlock) Left(left *NodeMaterialConnectionPoint) *DivideBlock {
	p := ba.ctx.Get("DivideBlock").New(left.JSObject())
	return DivideBlockFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class DivideBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.divideblock#left
func (d *DivideBlock) SetLeft(left *NodeMaterialConnectionPoint) *DivideBlock {
	p := ba.ctx.Get("DivideBlock").New(left.JSObject())
	return DivideBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class DivideBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.divideblock#output
func (d *DivideBlock) Output(output *NodeMaterialConnectionPoint) *DivideBlock {
	p := ba.ctx.Get("DivideBlock").New(output.JSObject())
	return DivideBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class DivideBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.divideblock#output
func (d *DivideBlock) SetOutput(output *NodeMaterialConnectionPoint) *DivideBlock {
	p := ba.ctx.Get("DivideBlock").New(output.JSObject())
	return DivideBlockFromJSObject(p, ba.ctx)
}

// Right returns the Right property of class DivideBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.divideblock#right
func (d *DivideBlock) Right(right *NodeMaterialConnectionPoint) *DivideBlock {
	p := ba.ctx.Get("DivideBlock").New(right.JSObject())
	return DivideBlockFromJSObject(p, ba.ctx)
}

// SetRight sets the Right property of class DivideBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.divideblock#right
func (d *DivideBlock) SetRight(right *NodeMaterialConnectionPoint) *DivideBlock {
	p := ba.ctx.Get("DivideBlock").New(right.JSObject())
	return DivideBlockFromJSObject(p, ba.ctx)
}

*/
