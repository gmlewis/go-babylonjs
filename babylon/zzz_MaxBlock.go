// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// MaxBlock represents a babylon.js MaxBlock.
// Block used to get the max of 2 values
type MaxBlock struct {
	*NodeMaterialBlock
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (m *MaxBlock) JSObject() js.Value { return m.p }

// MaxBlock returns a MaxBlock JavaScript class.
func (ba *Babylon) MaxBlock() *MaxBlock {
	p := ba.ctx.Get("MaxBlock")
	return MaxBlockFromJSObject(p, ba.ctx)
}

// MaxBlockFromJSObject returns a wrapped MaxBlock JavaScript class.
func MaxBlockFromJSObject(p js.Value, ctx js.Value) *MaxBlock {
	return &MaxBlock{NodeMaterialBlock: NodeMaterialBlockFromJSObject(p, ctx), ctx: ctx}
}

// MaxBlockArrayToJSArray returns a JavaScript Array for the wrapped array.
func MaxBlockArrayToJSArray(array []*MaxBlock) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewMaxBlock returns a new MaxBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.maxblock
func (ba *Babylon) NewMaxBlock(name string) *MaxBlock {

	args := make([]interface{}, 0, 1+0)

	args = append(args, name)

	p := ba.ctx.Get("MaxBlock").New(args...)
	return MaxBlockFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the MaxBlock object.
//
// https://doc.babylonjs.com/api/classes/babylon.maxblock#getclassname
func (m *MaxBlock) GetClassName() string {

	retVal := m.p.Call("getClassName")
	return retVal.String()
}

/*

// Left returns the Left property of class MaxBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.maxblock#left
func (m *MaxBlock) Left(left *NodeMaterialConnectionPoint) *MaxBlock {
	p := ba.ctx.Get("MaxBlock").New(left.JSObject())
	return MaxBlockFromJSObject(p, ba.ctx)
}

// SetLeft sets the Left property of class MaxBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.maxblock#left
func (m *MaxBlock) SetLeft(left *NodeMaterialConnectionPoint) *MaxBlock {
	p := ba.ctx.Get("MaxBlock").New(left.JSObject())
	return MaxBlockFromJSObject(p, ba.ctx)
}

// Output returns the Output property of class MaxBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.maxblock#output
func (m *MaxBlock) Output(output *NodeMaterialConnectionPoint) *MaxBlock {
	p := ba.ctx.Get("MaxBlock").New(output.JSObject())
	return MaxBlockFromJSObject(p, ba.ctx)
}

// SetOutput sets the Output property of class MaxBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.maxblock#output
func (m *MaxBlock) SetOutput(output *NodeMaterialConnectionPoint) *MaxBlock {
	p := ba.ctx.Get("MaxBlock").New(output.JSObject())
	return MaxBlockFromJSObject(p, ba.ctx)
}

// Right returns the Right property of class MaxBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.maxblock#right
func (m *MaxBlock) Right(right *NodeMaterialConnectionPoint) *MaxBlock {
	p := ba.ctx.Get("MaxBlock").New(right.JSObject())
	return MaxBlockFromJSObject(p, ba.ctx)
}

// SetRight sets the Right property of class MaxBlock.
//
// https://doc.babylonjs.com/api/classes/babylon.maxblock#right
func (m *MaxBlock) SetRight(right *NodeMaterialConnectionPoint) *MaxBlock {
	p := ba.ctx.Get("MaxBlock").New(right.JSObject())
	return MaxBlockFromJSObject(p, ba.ctx)
}

*/
