// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// IDisposable represents a babylon.js IDisposable.
// Define an interface for all classes that will hold resources
type IDisposable struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (i *IDisposable) JSObject() js.Value { return i.p }

// IDisposable returns a IDisposable JavaScript class.
func (ba *Babylon) IDisposable() *IDisposable {
	p := ba.ctx.Get("IDisposable")
	return IDisposableFromJSObject(p, ba.ctx)
}

// IDisposableFromJSObject returns a wrapped IDisposable JavaScript class.
func IDisposableFromJSObject(p js.Value, ctx js.Value) *IDisposable {
	return &IDisposable{p: p, ctx: ctx}
}

// IDisposableArrayToJSArray returns a JavaScript Array for the wrapped array.
func IDisposableArrayToJSArray(array []*IDisposable) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// Dispose calls the Dispose method on the IDisposable object.
//
// https://doc.babylonjs.com/api/classes/babylon.idisposable#dispose
func (i *IDisposable) Dispose() {

	i.p.Call("dispose")
}

/*

 */
