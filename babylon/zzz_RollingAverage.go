// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// RollingAverage represents a babylon.js RollingAverage.
// RollingAverage
//
// Utility to efficiently compute the rolling average and variance over a sliding window of samples
type RollingAverage struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (r *RollingAverage) JSObject() js.Value { return r.p }

// RollingAverage returns a RollingAverage JavaScript class.
func (ba *Babylon) RollingAverage() *RollingAverage {
	p := ba.ctx.Get("RollingAverage")
	return RollingAverageFromJSObject(p, ba.ctx)
}

// RollingAverageFromJSObject returns a wrapped RollingAverage JavaScript class.
func RollingAverageFromJSObject(p js.Value, ctx js.Value) *RollingAverage {
	return &RollingAverage{p: p, ctx: ctx}
}

// RollingAverageArrayToJSArray returns a JavaScript Array for the wrapped array.
func RollingAverageArrayToJSArray(array []*RollingAverage) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewRollingAverage returns a new RollingAverage object.
//
// https://doc.babylonjs.com/api/classes/babylon.rollingaverage#constructor
func (ba *Babylon) NewRollingAverage(length float64) *RollingAverage {

	args := make([]interface{}, 0, 1+0)

	args = append(args, length)

	p := ba.ctx.Get("RollingAverage").New(args...)
	return RollingAverageFromJSObject(p, ba.ctx)
}

// Add calls the Add method on the RollingAverage object.
//
// https://doc.babylonjs.com/api/classes/babylon.rollingaverage#add
func (r *RollingAverage) Add(v float64) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, v)

	r.p.Call("add", args...)
}

// History calls the History method on the RollingAverage object.
//
// https://doc.babylonjs.com/api/classes/babylon.rollingaverage#history
func (r *RollingAverage) History(i float64) float64 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, i)

	retVal := r.p.Call("history", args...)
	return retVal.Float()
}

// IsSaturated calls the IsSaturated method on the RollingAverage object.
//
// https://doc.babylonjs.com/api/classes/babylon.rollingaverage#issaturated
func (r *RollingAverage) IsSaturated() bool {

	retVal := r.p.Call("isSaturated")
	return retVal.Bool()
}

// Reset calls the Reset method on the RollingAverage object.
//
// https://doc.babylonjs.com/api/classes/babylon.rollingaverage#reset
func (r *RollingAverage) Reset() {

	r.p.Call("reset")
}

// Average returns the Average property of class RollingAverage.
//
// https://doc.babylonjs.com/api/classes/babylon.rollingaverage#average
func (r *RollingAverage) Average() float64 {
	retVal := r.p.Get("average")
	return retVal.Float()
}

// SetAverage sets the Average property of class RollingAverage.
//
// https://doc.babylonjs.com/api/classes/babylon.rollingaverage#average
func (r *RollingAverage) SetAverage(average float64) *RollingAverage {
	r.p.Set("average", average)
	return r
}

// Variance returns the Variance property of class RollingAverage.
//
// https://doc.babylonjs.com/api/classes/babylon.rollingaverage#variance
func (r *RollingAverage) Variance() float64 {
	retVal := r.p.Get("variance")
	return retVal.Float()
}

// SetVariance sets the Variance property of class RollingAverage.
//
// https://doc.babylonjs.com/api/classes/babylon.rollingaverage#variance
func (r *RollingAverage) SetVariance(variance float64) *RollingAverage {
	r.p.Set("variance", variance)
	return r
}
