// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// BaseCameraPointersInput represents a babylon.js BaseCameraPointersInput.
// Base class for Camera Pointer Inputs.
// See FollowCameraPointersInput in src/Cameras/Inputs/followCameraPointersInput.ts
// for example usage.
type BaseCameraPointersInput struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (b *BaseCameraPointersInput) JSObject() js.Value { return b.p }

// BaseCameraPointersInput returns a BaseCameraPointersInput JavaScript class.
func (ba *Babylon) BaseCameraPointersInput() *BaseCameraPointersInput {
	p := ba.ctx.Get("BaseCameraPointersInput")
	return BaseCameraPointersInputFromJSObject(p, ba.ctx)
}

// BaseCameraPointersInputFromJSObject returns a wrapped BaseCameraPointersInput JavaScript class.
func BaseCameraPointersInputFromJSObject(p js.Value, ctx js.Value) *BaseCameraPointersInput {
	return &BaseCameraPointersInput{p: p, ctx: ctx}
}

// BaseCameraPointersInputArrayToJSArray returns a JavaScript Array for the wrapped array.
func BaseCameraPointersInputArrayToJSArray(array []*BaseCameraPointersInput) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// BaseCameraPointersInputAttachControlOpts contains optional parameters for BaseCameraPointersInput.AttachControl.
type BaseCameraPointersInputAttachControlOpts struct {
	NoPreventDefault *bool
}

// AttachControl calls the AttachControl method on the BaseCameraPointersInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.basecamerapointersinput#attachcontrol
func (b *BaseCameraPointersInput) AttachControl(element js.Value, opts *BaseCameraPointersInputAttachControlOpts) {
	if opts == nil {
		opts = &BaseCameraPointersInputAttachControlOpts{}
	}

	args := make([]interface{}, 0, 1+1)

	args = append(args, element)

	if opts.NoPreventDefault == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.NoPreventDefault)
	}

	b.p.Call("attachControl", args...)
}

// DetachControl calls the DetachControl method on the BaseCameraPointersInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.basecamerapointersinput#detachcontrol
func (b *BaseCameraPointersInput) DetachControl(element js.Value) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, element)

	b.p.Call("detachControl", args...)
}

// GetClassName calls the GetClassName method on the BaseCameraPointersInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.basecamerapointersinput#getclassname
func (b *BaseCameraPointersInput) GetClassName() string {

	retVal := b.p.Call("getClassName")
	return retVal.String()
}

// GetSimpleName calls the GetSimpleName method on the BaseCameraPointersInput object.
//
// https://doc.babylonjs.com/api/classes/babylon.basecamerapointersinput#getsimplename
func (b *BaseCameraPointersInput) GetSimpleName() string {

	retVal := b.p.Call("getSimpleName")
	return retVal.String()
}

// Buttons returns the Buttons property of class BaseCameraPointersInput.
//
// https://doc.babylonjs.com/api/classes/babylon.basecamerapointersinput#buttons
func (b *BaseCameraPointersInput) Buttons() []float64 {
	retVal := b.p.Get("buttons")
	result := []float64{}
	for ri := 0; ri < retVal.Length(); ri++ {
		result = append(result, retVal.Index(ri).Float())
	}
	return result
}

// SetButtons sets the Buttons property of class BaseCameraPointersInput.
//
// https://doc.babylonjs.com/api/classes/babylon.basecamerapointersinput#buttons
func (b *BaseCameraPointersInput) SetButtons(buttons []float64) *BaseCameraPointersInput {
	b.p.Set("buttons", buttons)
	return b
}

// Camera returns the Camera property of class BaseCameraPointersInput.
//
// https://doc.babylonjs.com/api/classes/babylon.basecamerapointersinput#camera
func (b *BaseCameraPointersInput) Camera() *Camera {
	retVal := b.p.Get("camera")
	return CameraFromJSObject(retVal, b.ctx)
}

// SetCamera sets the Camera property of class BaseCameraPointersInput.
//
// https://doc.babylonjs.com/api/classes/babylon.basecamerapointersinput#camera
func (b *BaseCameraPointersInput) SetCamera(camera *Camera) *BaseCameraPointersInput {
	b.p.Set("camera", camera.JSObject())
	return b
}
