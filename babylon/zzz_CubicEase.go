// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// CubicEase represents a babylon.js CubicEase.
// Easing function with a power of 3 shape (see link below).
//
// See: https://easings.net/#easeInCubic
// See: http://doc.babylonjs.com/babylon101/animations#easing-functions
type CubicEase struct {
	*EasingFunction
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (c *CubicEase) JSObject() js.Value { return c.p }

// CubicEase returns a CubicEase JavaScript class.
func (ba *Babylon) CubicEase() *CubicEase {
	p := ba.ctx.Get("CubicEase")
	return CubicEaseFromJSObject(p, ba.ctx)
}

// CubicEaseFromJSObject returns a wrapped CubicEase JavaScript class.
func CubicEaseFromJSObject(p js.Value, ctx js.Value) *CubicEase {
	return &CubicEase{EasingFunction: EasingFunctionFromJSObject(p, ctx), ctx: ctx}
}

// CubicEaseArrayToJSArray returns a JavaScript Array for the wrapped array.
func CubicEaseArrayToJSArray(array []*CubicEase) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

/*

 */
