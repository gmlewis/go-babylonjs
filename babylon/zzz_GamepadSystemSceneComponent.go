// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// GamepadSystemSceneComponent represents a babylon.js GamepadSystemSceneComponent.
// Defines the gamepad scene component responsible to manage gamepads in a given scene
type GamepadSystemSceneComponent struct {
	p   js.Value
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (g *GamepadSystemSceneComponent) JSObject() js.Value { return g.p }

// GamepadSystemSceneComponent returns a GamepadSystemSceneComponent JavaScript class.
func (ba *Babylon) GamepadSystemSceneComponent() *GamepadSystemSceneComponent {
	p := ba.ctx.Get("GamepadSystemSceneComponent")
	return GamepadSystemSceneComponentFromJSObject(p, ba.ctx)
}

// GamepadSystemSceneComponentFromJSObject returns a wrapped GamepadSystemSceneComponent JavaScript class.
func GamepadSystemSceneComponentFromJSObject(p js.Value, ctx js.Value) *GamepadSystemSceneComponent {
	return &GamepadSystemSceneComponent{p: p, ctx: ctx}
}

// GamepadSystemSceneComponentArrayToJSArray returns a JavaScript Array for the wrapped array.
func GamepadSystemSceneComponentArrayToJSArray(array []*GamepadSystemSceneComponent) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewGamepadSystemSceneComponent returns a new GamepadSystemSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.gamepadsystemscenecomponent#constructor
func (ba *Babylon) NewGamepadSystemSceneComponent(scene *Scene) *GamepadSystemSceneComponent {

	args := make([]interface{}, 0, 1+0)

	args = append(args, scene.JSObject())

	p := ba.ctx.Get("GamepadSystemSceneComponent").New(args...)
	return GamepadSystemSceneComponentFromJSObject(p, ba.ctx)
}

// Dispose calls the Dispose method on the GamepadSystemSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.gamepadsystemscenecomponent#dispose
func (g *GamepadSystemSceneComponent) Dispose() {

	g.p.Call("dispose")
}

// Rebuild calls the Rebuild method on the GamepadSystemSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.gamepadsystemscenecomponent#rebuild
func (g *GamepadSystemSceneComponent) Rebuild() {

	g.p.Call("rebuild")
}

// Register calls the Register method on the GamepadSystemSceneComponent object.
//
// https://doc.babylonjs.com/api/classes/babylon.gamepadsystemscenecomponent#register
func (g *GamepadSystemSceneComponent) Register() {

	g.p.Call("register")
}

// Name returns the Name property of class GamepadSystemSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.gamepadsystemscenecomponent#name
func (g *GamepadSystemSceneComponent) Name() string {
	retVal := g.p.Get("name")
	return retVal.String()
}

// SetName sets the Name property of class GamepadSystemSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.gamepadsystemscenecomponent#name
func (g *GamepadSystemSceneComponent) SetName(name string) *GamepadSystemSceneComponent {
	g.p.Set("name", name)
	return g
}

// Scene returns the Scene property of class GamepadSystemSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.gamepadsystemscenecomponent#scene
func (g *GamepadSystemSceneComponent) Scene() *Scene {
	retVal := g.p.Get("scene")
	return SceneFromJSObject(retVal, g.ctx)
}

// SetScene sets the Scene property of class GamepadSystemSceneComponent.
//
// https://doc.babylonjs.com/api/classes/babylon.gamepadsystemscenecomponent#scene
func (g *GamepadSystemSceneComponent) SetScene(scene *Scene) *GamepadSystemSceneComponent {
	g.p.Set("scene", scene.JSObject())
	return g
}
