// Code generated by docs2go. DO NOT EDIT.

package babylon

import (
	"syscall/js"
)

// TargetCamera represents a babylon.js TargetCamera.
// A target camera takes a mesh or position as a target and continues to look at it while it moves.
// This is the base of the follow, arc rotate cameras and Free camera
//
// See: http://doc.babylonjs.com/features/cameras
type TargetCamera struct {
	*Camera
	ctx js.Value
}

// JSObject returns the underlying js.Value.
func (t *TargetCamera) JSObject() js.Value { return t.p }

// TargetCamera returns a TargetCamera JavaScript class.
func (ba *Babylon) TargetCamera() *TargetCamera {
	p := ba.ctx.Get("TargetCamera")
	return TargetCameraFromJSObject(p, ba.ctx)
}

// TargetCameraFromJSObject returns a wrapped TargetCamera JavaScript class.
func TargetCameraFromJSObject(p js.Value, ctx js.Value) *TargetCamera {
	return &TargetCamera{Camera: CameraFromJSObject(p, ctx), ctx: ctx}
}

// TargetCameraArrayToJSArray returns a JavaScript Array for the wrapped array.
func TargetCameraArrayToJSArray(array []*TargetCamera) []interface{} {
	var result []interface{}
	for _, v := range array {
		result = append(result, v.JSObject())
	}
	return result
}

// NewTargetCameraOpts contains optional parameters for NewTargetCamera.
type NewTargetCameraOpts struct {
	SetActiveOnSceneIfNoneActive *bool
}

// NewTargetCamera returns a new TargetCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera
func (ba *Babylon) NewTargetCamera(name string, position *Vector3, scene *Scene, opts *NewTargetCameraOpts) *TargetCamera {
	if opts == nil {
		opts = &NewTargetCameraOpts{}
	}

	args := make([]interface{}, 0, 3+1)

	args = append(args, name)
	args = append(args, position.JSObject())
	args = append(args, scene.JSObject())

	if opts.SetActiveOnSceneIfNoneActive == nil {
		args = append(args, js.Undefined())
	} else {
		args = append(args, *opts.SetActiveOnSceneIfNoneActive)
	}

	p := ba.ctx.Get("TargetCamera").New(args...)
	return TargetCameraFromJSObject(p, ba.ctx)
}

// GetClassName calls the GetClassName method on the TargetCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#getclassname
func (t *TargetCamera) GetClassName() string {

	retVal := t.p.Call("getClassName")
	return retVal.String()
}

// GetFrontPosition calls the GetFrontPosition method on the TargetCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#getfrontposition
func (t *TargetCamera) GetFrontPosition(distance float64) *Vector3 {

	args := make([]interface{}, 0, 1+0)

	args = append(args, distance)

	retVal := t.p.Call("getFrontPosition", args...)
	return Vector3FromJSObject(retVal, t.ctx)
}

// GetTarget calls the GetTarget method on the TargetCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#gettarget
func (t *TargetCamera) GetTarget() *Vector3 {

	retVal := t.p.Call("getTarget")
	return Vector3FromJSObject(retVal, t.ctx)
}

// SetTarget calls the SetTarget method on the TargetCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#settarget
func (t *TargetCamera) SetTarget(target *Vector3) {

	args := make([]interface{}, 0, 1+0)

	args = append(args, target.JSObject())

	t.p.Call("setTarget", args...)
}

// StoreState calls the StoreState method on the TargetCamera object.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#storestate
func (t *TargetCamera) StoreState() *Camera {

	retVal := t.p.Call("storeState")
	return CameraFromJSObject(retVal, t.ctx)
}

/*

// CameraDirection returns the CameraDirection property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#cameradirection
func (t *TargetCamera) CameraDirection(cameraDirection *Vector3) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(cameraDirection.JSObject())
	return TargetCameraFromJSObject(p, ba.ctx)
}

// SetCameraDirection sets the CameraDirection property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#cameradirection
func (t *TargetCamera) SetCameraDirection(cameraDirection *Vector3) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(cameraDirection.JSObject())
	return TargetCameraFromJSObject(p, ba.ctx)
}

// CameraRotation returns the CameraRotation property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#camerarotation
func (t *TargetCamera) CameraRotation(cameraRotation *Vector2) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(cameraRotation.JSObject())
	return TargetCameraFromJSObject(p, ba.ctx)
}

// SetCameraRotation sets the CameraRotation property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#camerarotation
func (t *TargetCamera) SetCameraRotation(cameraRotation *Vector2) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(cameraRotation.JSObject())
	return TargetCameraFromJSObject(p, ba.ctx)
}

// LockedTarget returns the LockedTarget property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#lockedtarget
func (t *TargetCamera) LockedTarget(lockedTarget interface{}) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(lockedTarget)
	return TargetCameraFromJSObject(p, ba.ctx)
}

// SetLockedTarget sets the LockedTarget property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#lockedtarget
func (t *TargetCamera) SetLockedTarget(lockedTarget interface{}) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(lockedTarget)
	return TargetCameraFromJSObject(p, ba.ctx)
}

// NoRotationConstraint returns the NoRotationConstraint property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#norotationconstraint
func (t *TargetCamera) NoRotationConstraint(noRotationConstraint bool) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(noRotationConstraint)
	return TargetCameraFromJSObject(p, ba.ctx)
}

// SetNoRotationConstraint sets the NoRotationConstraint property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#norotationconstraint
func (t *TargetCamera) SetNoRotationConstraint(noRotationConstraint bool) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(noRotationConstraint)
	return TargetCameraFromJSObject(p, ba.ctx)
}

// Rotation returns the Rotation property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#rotation
func (t *TargetCamera) Rotation(rotation *Vector3) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(rotation.JSObject())
	return TargetCameraFromJSObject(p, ba.ctx)
}

// SetRotation sets the Rotation property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#rotation
func (t *TargetCamera) SetRotation(rotation *Vector3) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(rotation.JSObject())
	return TargetCameraFromJSObject(p, ba.ctx)
}

// RotationQuaternion returns the RotationQuaternion property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#rotationquaternion
func (t *TargetCamera) RotationQuaternion(rotationQuaternion *Quaternion) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(rotationQuaternion.JSObject())
	return TargetCameraFromJSObject(p, ba.ctx)
}

// SetRotationQuaternion sets the RotationQuaternion property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#rotationquaternion
func (t *TargetCamera) SetRotationQuaternion(rotationQuaternion *Quaternion) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(rotationQuaternion.JSObject())
	return TargetCameraFromJSObject(p, ba.ctx)
}

// Speed returns the Speed property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#speed
func (t *TargetCamera) Speed(speed float64) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(speed)
	return TargetCameraFromJSObject(p, ba.ctx)
}

// SetSpeed sets the Speed property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#speed
func (t *TargetCamera) SetSpeed(speed float64) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(speed)
	return TargetCameraFromJSObject(p, ba.ctx)
}

// UpdateUpVectorFromRotation returns the UpdateUpVectorFromRotation property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#updateupvectorfromrotation
func (t *TargetCamera) UpdateUpVectorFromRotation(updateUpVectorFromRotation bool) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(updateUpVectorFromRotation)
	return TargetCameraFromJSObject(p, ba.ctx)
}

// SetUpdateUpVectorFromRotation sets the UpdateUpVectorFromRotation property of class TargetCamera.
//
// https://doc.babylonjs.com/api/classes/babylon.targetcamera#updateupvectorfromrotation
func (t *TargetCamera) SetUpdateUpVectorFromRotation(updateUpVectorFromRotation bool) *TargetCamera {
	p := ba.ctx.Get("TargetCamera").New(updateUpVectorFromRotation)
	return TargetCameraFromJSObject(p, ba.ctx)
}

*/
